
AirQualityDetectorRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f094  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800f268  0800f268  00010268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f960  0800f960  00011338  2**0
                  CONTENTS
  4 .ARM          00000008  0800f960  0800f960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f968  0800f968  00011338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f968  0800f968  00010968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f96c  0800f96c  0001096c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  0800f970  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ca8  20000338  0800fca8  00011338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005fe0  0800fca8  00011fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002166e  00000000  00000000  00011368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052b2  00000000  00000000  000329d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00037c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001402  00000000  00000000  000396b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cde5  00000000  00000000  0003aab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025856  00000000  00000000  00067897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106f96  00000000  00000000  0008d0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00194083  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e30  00000000  00000000  001940c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0019bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f24c 	.word	0x0800f24c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	0800f24c 	.word	0x0800f24c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f965 	bl	8001344 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000354 	.word	0x20000354

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f97e 	bl	80013a8 <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000354 	.word	0x20000354

080010b8 <SetIndicatorLEDsNum>:

void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 fa20 	bl	800150c <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000354 	.word	0x20000354

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f8a5 	bl	8001230 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	20000384 	.word	0x20000384

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f8ab 	bl	8001256 <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000384 	.word	0x20000384

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f8a1 	bl	8001256 <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000384 	.word	0x20000384

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d051      	beq.n	800121e <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	899b      	ldrh	r3, [r3, #12]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f003 f8c1 	bl	800430c <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d843      	bhi.n	800121e <ReadButton+0xb6>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <ReadButton+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011fb 	.word	0x080011fb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d130      	bne.n	8001218 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80011c2:	e029      	b.n	8001218 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]

                break;
 80011d0:	e025      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10a      	bne.n	80011f2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	739a      	strb	r2, [r3, #14]
                break;
 80011f8:	e011      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d005      	beq.n	800121c <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	739a      	strb	r2, [r3, #14]
                }
                break;
 8001216:	e001      	b.n	800121c <ReadButton+0xb4>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <ReadButton+0xb6>
                break;
 800121c:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	73bb      	strb	r3, [r7, #14]
    return retval;
 8001224:	7bbb      	ldrb	r3, [r7, #14]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	809a      	strh	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	f003 f865 	bl	800433c <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001280:	f000 f9ca 	bl	8001618 <MQ9_GetRawValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f9dc 	bl	8001648 <MQ9_ConverRaw2Real>
 8001290:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f003 f828 	bl	800433c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ec:	e007      	b.n	80012fe <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f003 f81f 	bl	800433c <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800130c:	2208      	movs	r2, #8
 800130e:	4903      	ldr	r1, [pc, #12]	@ (800131c <LED_init+0x14>)
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <LED_init+0x18>)
 8001312:	f7ff ffc7 	bl	80012a4 <CreateNewSingleLED>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	2000038c 	.word	0x2000038c

08001324 <LED_Drive>:

void LED_Drive(bool state)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <LED_Drive+0x1c>)
 8001334:	f7ff ffc9 	bl	80012ca <UpdateSingleLED>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000038c 	.word	0x2000038c

08001344 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8b3a      	ldrh	r2, [r7, #24]
 800136a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8c3a      	ldrh	r2, [r7, #32]
 8001376:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001382:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800138e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800139a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014f4 <LedRowWrite+0x14c>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 ffb3 	bl	800433c <HAL_GPIO_WritePin>
 80013d6:	e007      	b.n	80013e8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f002 ffaa 	bl	800433c <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014f8 <LedRowWrite+0x150>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd08      	ble.n	800140c <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f002 ff99 	bl	800433c <HAL_GPIO_WritePin>
 800140a:	e007      	b.n	800141c <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f002 ff90 	bl	800433c <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014fc <LedRowWrite+0x154>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	dd08      	ble.n	8001440 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f002 ff7f 	bl	800433c <HAL_GPIO_WritePin>
 800143e:	e007      	b.n	8001450 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6918      	ldr	r0, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f002 ff76 	bl	800433c <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001500 <LedRowWrite+0x158>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6998      	ldr	r0, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f002 ff65 	bl	800433c <HAL_GPIO_WritePin>
 8001472:	e007      	b.n	8001484 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6998      	ldr	r0, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b9b      	ldrh	r3, [r3, #28]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f002 ff5c 	bl	800433c <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 8001484:	edd7 7a00 	vldr	s15, [r7]
 8001488:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001504 <LedRowWrite+0x15c>
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd08      	ble.n	80014a8 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f002 ff4b 	bl	800433c <HAL_GPIO_WritePin>
 80014a6:	e007      	b.n	80014b8 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a18      	ldr	r0, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 ff42 	bl	800433c <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001508 <LedRowWrite+0x160>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd08      	ble.n	80014dc <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 ff31 	bl	800433c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 80014da:	e007      	b.n	80014ec <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 ff28 	bl	800433c <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	43c80000 	.word	0x43c80000
 80014f8:	44160000 	.word	0x44160000
 80014fc:	44960000 	.word	0x44960000
 8001500:	44e10000 	.word	0x44e10000
 8001504:	45160000 	.word	0x45160000
 8001508:	453b8000 	.word	0x453b8000

0800150c <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d877      	bhi.n	800160e <LedRowWriteNum+0x102>
	{
		if(num > 0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f002 ff04 	bl	800433c <HAL_GPIO_WritePin>
 8001534:	e007      	b.n	8001546 <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 fefb 	bl	800433c <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d908      	bls.n	800155e <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f002 fef0 	bl	800433c <HAL_GPIO_WritePin>
 800155c:	e007      	b.n	800156e <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f002 fee7 	bl	800433c <HAL_GPIO_WritePin>
		}

		if(num > 2)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d908      	bls.n	8001586 <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6918      	ldr	r0, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a9b      	ldrh	r3, [r3, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f002 fedc 	bl	800433c <HAL_GPIO_WritePin>
 8001584:	e007      	b.n	8001596 <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6918      	ldr	r0, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8a9b      	ldrh	r3, [r3, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 fed3 	bl	800433c <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d908      	bls.n	80015ae <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8b9b      	ldrh	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 fec8 	bl	800433c <HAL_GPIO_WritePin>
 80015ac:	e007      	b.n	80015be <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6998      	ldr	r0, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8b9b      	ldrh	r3, [r3, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f002 febf 	bl	800433c <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d908      	bls.n	80015d6 <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a18      	ldr	r0, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 feb4 	bl	800433c <HAL_GPIO_WritePin>
 80015d4:	e007      	b.n	80015e6 <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f002 feab 	bl	800433c <HAL_GPIO_WritePin>
		}

		if(num > 5)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 fea0 	bl	800433c <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 80015fc:	e007      	b.n	800160e <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f002 fe97 	bl	800433c <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001620:	f001 feb4 	bl	800338c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 800162a:	f001 ff7d 	bl	8003528 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001630:	f002 f805 	bl	800363e <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001638:	88fb      	ldrh	r3, [r7, #6]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003e0 	.word	0x200003e0

08001648 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MQ9_ConverRaw2Real+0x48>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MQ9_ConverRaw2Real+0x4c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000

08001698 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800169c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a0:	4902      	ldr	r1, [pc, #8]	@ (80016ac <SignalSystemInit+0x14>)
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SignalSystemInit+0x18>)
 80016a4:	f7ff fd3a 	bl	800111c <CreateNewButton>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	20000394 	.word	0x20000394

080016b4 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ReadSignal+0x20>)
 80016c0:	f7ff fd52 	bl	8001168 <ReadButton>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	return Status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000394 	.word	0x20000394

080016d8 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe fdf5 	bl	80002d0 <strlen>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	480e      	ldr	r0, [pc, #56]	@ (800172c <UART_TransmitString+0x54>)
 80016f2:	f004 fa77 	bl	8005be4 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <UART_TransmitString+0x58>)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4611      	mov	r1, r2
 8001700:	8019      	strh	r1, [r3, #0]
 8001702:	3302      	adds	r3, #2
 8001704:	0c12      	lsrs	r2, r2, #16
 8001706:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fddf 	bl	80002d0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 010c 	add.w	r1, r7, #12
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <UART_TransmitString+0x54>)
 8001720:	f004 fa60 	bl	8005be4 <HAL_UART_Transmit>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000044c 	.word	0x2000044c
 8001730:	0800f268 	.word	0x0800f268

08001734 <UART_TransmitStringWithoutNewLine>:

void UART_TransmitStringWithoutNewLine(char* str)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7fe fdc7 	bl	80002d0 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <UART_TransmitStringWithoutNewLine+0x28>)
 800174e:	f004 fa49 	bl	8005be4 <HAL_UART_Transmit>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000044c 	.word	0x2000044c

08001760 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	@ 0x40
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe ff1c 	bl	80005a8 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	f107 000c 	add.w	r0, r7, #12
 8001778:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <UART_TransmitFloat+0x44>)
 800177a:	f00a f8c5 	bl	800b908 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fda4 	bl	80002d0 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	f107 010c 	add.w	r1, r7, #12
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <UART_TransmitFloat+0x48>)
 8001796:	f004 fa25 	bl	8005be4 <HAL_UART_Transmit>
}
 800179a:	bf00      	nop
 800179c:	3740      	adds	r7, #64	@ 0x40
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800f26c 	.word	0x0800f26c
 80017a8:	2000044c 	.word	0x2000044c

080017ac <HelpSendUART>:

void HelpSendUART(uint16_t NumOfElements, char** CommandMatrix)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	80fb      	strh	r3, [r7, #6]
	uint16_t iterator = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	81fb      	strh	r3, [r7, #14]
	UART_TransmitString("\n===  UART Commands ===\n");
 80017bc:	480e      	ldr	r0, [pc, #56]	@ (80017f8 <HelpSendUART+0x4c>)
 80017be:	f7ff ff8b 	bl	80016d8 <UART_TransmitString>
	while(iterator < NumOfElements)
 80017c2:	e00d      	b.n	80017e0 <HelpSendUART+0x34>
	{
		UART_TransmitStringWithoutNewLine("\t");
 80017c4:	480d      	ldr	r0, [pc, #52]	@ (80017fc <HelpSendUART+0x50>)
 80017c6:	f7ff ffb5 	bl	8001734 <UART_TransmitStringWithoutNewLine>
		UART_TransmitString(CommandMatrix[iterator]);
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff7f 	bl	80016d8 <UART_TransmitString>

		iterator++;
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	3301      	adds	r3, #1
 80017de:	81fb      	strh	r3, [r7, #14]
	while(iterator < NumOfElements)
 80017e0:	89fa      	ldrh	r2, [r7, #14]
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d3ed      	bcc.n	80017c4 <HelpSendUART+0x18>
	}
	UART_TransmitString("\n==========\n");
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HelpSendUART+0x54>)
 80017ea:	f7ff ff75 	bl	80016d8 <UART_TransmitString>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800f274 	.word	0x0800f274
 80017fc:	0800f290 	.word	0x0800f290
 8001800:	0800f294 	.word	0x0800f294

08001804 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 800180c:	4a36      	ldr	r2, [pc, #216]	@ (80018e8 <TerminalHandler+0xe4>)
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	8019      	strh	r1, [r3, #0]
 8001818:	3302      	adds	r3, #2
 800181a:	0c12      	lsrs	r2, r2, #16
 800181c:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 800181e:	4a33      	ldr	r2, [pc, #204]	@ (80018ec <TerminalHandler+0xe8>)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	7019      	strb	r1, [r3, #0]
	//HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));

	if(huart->Instance == USART1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <TerminalHandler+0xec>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d14d      	bne.n	80018d4 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <TerminalHandler+0xf0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8001840:	f000 f872 	bl	8001928 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <TerminalHandler+0xf4>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b0d      	cmp	r3, #13
 800184a:	d02f      	beq.n	80018ac <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <TerminalHandler+0xf4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d117      	bne.n	8001884 <TerminalHandler+0x80>
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <TerminalHandler+0xf0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <TerminalHandler+0xf0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <TerminalHandler+0xf8>)
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <TerminalHandler+0xf0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <TerminalHandler+0xf0>)
 8001872:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8001874:	f107 010c 	add.w	r1, r7, #12
 8001878:	230a      	movs	r3, #10
 800187a:	2205      	movs	r2, #5
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f004 f9b1 	bl	8005be4 <HAL_UART_Transmit>
 8001882:	e00c      	b.n	800189e <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <TerminalHandler+0xf0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <TerminalHandler+0xf4>)
 800188c:	7819      	ldrb	r1, [r3, #0]
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <TerminalHandler+0xf8>)
 8001890:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <TerminalHandler+0xf0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <TerminalHandler+0xf0>)
 800189c:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 800189e:	230a      	movs	r3, #10
 80018a0:	2201      	movs	r2, #1
 80018a2:	4915      	ldr	r1, [pc, #84]	@ (80018f8 <TerminalHandler+0xf4>)
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f004 f99d 	bl	8005be4 <HAL_UART_Transmit>
 80018aa:	e013      	b.n	80018d4 <TerminalHandler+0xd0>
			//RxData[0] = '\0'; //added while debbuging
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <TerminalHandler+0xf0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <TerminalHandler+0xf4>)
 80018b4:	7819      	ldrb	r1, [r3, #0]
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <TerminalHandler+0xf8>)
 80018b8:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <TerminalHandler+0xf0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <TerminalHandler+0xfc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 80018c6:	f107 0114 	add.w	r1, r7, #20
 80018ca:	230a      	movs	r3, #10
 80018cc:	2203      	movs	r2, #3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f004 f988 	bl	8005be4 <HAL_UART_Transmit>
			//RxData[0] = '\0'; //added while debbuging
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 80018d4:	2201      	movs	r2, #1
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <TerminalHandler+0xf4>)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f004 fa06 	bl	8005cea <HAL_UART_Receive_IT>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800f2a4 	.word	0x0800f2a4
 80018ec:	0800f2a8 	.word	0x0800f2a8
 80018f0:	40011000 	.word	0x40011000
 80018f4:	200003a4 	.word	0x200003a4
 80018f8:	200003a8 	.word	0x200003a8
 80018fc:	200003ac 	.word	0x200003ac
 8001900:	200003de 	.word	0x200003de

08001904 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 800190c:	2201      	movs	r2, #1
 800190e:	4905      	ldr	r1, [pc, #20]	@ (8001924 <TerminalInit+0x20>)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f004 f9ea 	bl	8005cea <HAL_UART_Receive_IT>
	ClearRxBuffer();
 8001916:	f000 f807 	bl	8001928 <ClearRxBuffer>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003a8 	.word	0x200003a8

08001928 <ClearRxBuffer>:

void ClearRxBuffer()
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 50; counter++)
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e007      	b.n	8001944 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8001934:	4a09      	ldr	r2, [pc, #36]	@ (800195c <ClearRxBuffer+0x34>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 50; counter++)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b31      	cmp	r3, #49	@ 0x31
 8001948:	ddf4      	ble.n	8001934 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <ClearRxBuffer+0x38>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200003ac 	.word	0x200003ac
 8001960:	200003de 	.word	0x200003de

08001964 <IsTransferComplete>:

bool IsTransferComplete()
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	return transferCompleteFlag;
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <IsTransferComplete+0x14>)
 800196a:	781b      	ldrb	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200003de 	.word	0x200003de

0800197c <GetRxBuffer>:

char* GetRxBuffer()
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	return (char*)RxBuffer;
 8001980:	4b02      	ldr	r3, [pc, #8]	@ (800198c <GetRxBuffer+0x10>)
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	200003ac 	.word	0x200003ac

08001990 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff33 	bl	8001804 <TerminalHandler>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <StringCompareFromUART>:


bool StringCompareFromUART(char* cmd_string, char** matrix,  uint16_t numOfStrings, uint16_t* index)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]

	    uint16_t count = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	82fb      	strh	r3, [r7, #22]
	    bool foundIt = false;
 80019ba:	2300      	movs	r3, #0
 80019bc:	757b      	strb	r3, [r7, #21]
	    bool retval;
	    cmd_string = strupr(cmd_string);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f00a f80e 	bl	800b9e0 <strupr>
 80019c4:	60f8      	str	r0, [r7, #12]
	    while((count < numOfStrings) && (foundIt == false))
 80019c6:	e013      	b.n	80019f0 <StringCompareFromUART+0x4a>
	    {

	        if(strcmp(cmd_string, matrix[count]) == 0)
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	4413      	add	r3, r2
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7fe fc1b 	bl	8000210 <strcmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <StringCompareFromUART+0x44>
	        {
	            *index = count;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	8afa      	ldrh	r2, [r7, #22]
 80019e4:	801a      	strh	r2, [r3, #0]
	            foundIt = true;
 80019e6:	2301      	movs	r3, #1
 80019e8:	757b      	strb	r3, [r7, #21]

	        }
	        count++;
 80019ea:	8afb      	ldrh	r3, [r7, #22]
 80019ec:	3301      	adds	r3, #1
 80019ee:	82fb      	strh	r3, [r7, #22]
	    while((count < numOfStrings) && (foundIt == false))
 80019f0:	8afa      	ldrh	r2, [r7, #22]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d205      	bcs.n	8001a04 <StringCompareFromUART+0x5e>
 80019f8:	7d7b      	ldrb	r3, [r7, #21]
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e1      	bne.n	80019c8 <StringCompareFromUART+0x22>
	    }

	    if(foundIt)
 8001a04:	7d7b      	ldrb	r3, [r7, #21]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <StringCompareFromUART+0x6a>
	    {
	        retval = true;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	753b      	strb	r3, [r7, #20]
 8001a0e:	e001      	b.n	8001a14 <StringCompareFromUART+0x6e>
	    }
	    else
	    {
	        retval = false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	753b      	strb	r3, [r7, #20]
	    }

	    return retval;
 8001a14:	7d3b      	ldrb	r3, [r7, #20]

}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <DevicesInit>:
#include "Variables.h"

extern UART_HandleTypeDef huart1;

void DevicesInit()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	AlarmInit();
 8001a24:	f7ff fb58 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 8001a28:	f7ff fe36 	bl	8001698 <SignalSystemInit>
	AirQualityIncicatorInit();
 8001a2c:	f7ff fb0a 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 8001a30:	f7ff fc6a 	bl	8001308 <LED_init>
	TerminalInit(&huart1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <DevicesInit+0x20>)
 8001a36:	f7ff ff65 	bl	8001904 <TerminalInit>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000044c 	.word	0x2000044c

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f001 fc2f 	bl	80032aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f88a 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f000 f99c 	bl	8001d8c <MX_GPIO_Init>
  MX_ADC3_Init();
 8001a54:	f000 f8f6 	bl	8001c44 <MX_ADC3_Init>
  MX_CRC_Init();
 8001a58:	f000 f946 	bl	8001ce8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001a5c:	f000 f966 	bl	8001d2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DevicesInit(); // Function that initializes all of systems components
 8001a60:	f7ff ffde 	bl	8001a20 <DevicesInit>
//  osTimerStart(LEDTimerHandle, 3000);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a64:	f005 fb54 	bl	8007110 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RegimeMutex */
  RegimeMutexHandle = osMutexNew(&RegimeMutex_attributes);
 8001a68:	4825      	ldr	r0, [pc, #148]	@ (8001b00 <main+0xbc>)
 8001a6a:	f005 fdb3 	bl	80075d4 <osMutexNew>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a24      	ldr	r2, [pc, #144]	@ (8001b04 <main+0xc0>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* creation of LED_Blink_Mutex */
  LED_Blink_MutexHandle = osMutexNew(&LED_Blink_Mutex_attributes);
 8001a74:	4824      	ldr	r0, [pc, #144]	@ (8001b08 <main+0xc4>)
 8001a76:	f005 fdad 	bl	80075d4 <osMutexNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <main+0xc8>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8001a80:	4823      	ldr	r0, [pc, #140]	@ (8001b10 <main+0xcc>)
 8001a82:	f005 fda7 	bl	80075d4 <osMutexNew>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a22      	ldr	r2, [pc, #136]	@ (8001b14 <main+0xd0>)
 8001a8a:	6013      	str	r3, [r2, #0]

  /* creation of LED_FSM_Mutex */
  LED_FSM_MutexHandle = osMutexNew(&LED_FSM_Mutex_attributes);
 8001a8c:	4822      	ldr	r0, [pc, #136]	@ (8001b18 <main+0xd4>)
 8001a8e:	f005 fda1 	bl	80075d4 <osMutexNew>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <main+0xd8>)
 8001a96:	6013      	str	r3, [r2, #0]

  /* creation of ButtonCountMutex */
  ButtonCountMutexHandle = osMutexNew(&ButtonCountMutex_attributes);
 8001a98:	4821      	ldr	r0, [pc, #132]	@ (8001b20 <main+0xdc>)
 8001a9a:	f005 fd9b 	bl	80075d4 <osMutexNew>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a20      	ldr	r2, [pc, #128]	@ (8001b24 <main+0xe0>)
 8001aa2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of LEDTimer */
  LEDTimerHandle = osTimerNew(LEDTimerCallback, osTimerPeriodic, NULL, &LEDTimer_attributes);
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <main+0xe4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4820      	ldr	r0, [pc, #128]	@ (8001b2c <main+0xe8>)
 8001aac:	f005 fc84 	bl	80073b8 <osTimerNew>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b30 <main+0xec>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(ButtonTimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <main+0xf0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	481e      	ldr	r0, [pc, #120]	@ (8001b38 <main+0xf4>)
 8001abe:	f005 fc7b 	bl	80073b8 <osTimerNew>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b3c <main+0xf8>)
 8001ac6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <main+0xfc>)
 8001aca:	2100      	movs	r1, #0
 8001acc:	481d      	ldr	r0, [pc, #116]	@ (8001b44 <main+0x100>)
 8001ace:	f005 fb89 	bl	80071e4 <osThreadNew>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b48 <main+0x104>)
 8001ad6:	6013      	str	r3, [r2, #0]

  /* creation of TerminalTask */
  TerminalTaskHandle = osThreadNew(StartTerminalTask, NULL, &TerminalTask_attributes);
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b4c <main+0x108>)
 8001ada:	2100      	movs	r1, #0
 8001adc:	481c      	ldr	r0, [pc, #112]	@ (8001b50 <main+0x10c>)
 8001ade:	f005 fb81 	bl	80071e4 <osThreadNew>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <main+0x110>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b58 <main+0x114>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	481b      	ldr	r0, [pc, #108]	@ (8001b5c <main+0x118>)
 8001aee:	f005 fb79 	bl	80071e4 <osThreadNew>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b60 <main+0x11c>)
 8001af6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001af8:	f005 fb3e 	bl	8007178 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <main+0xb8>
 8001b00:	0800f4c8 	.word	0x0800f4c8
 8001b04:	200004e8 	.word	0x200004e8
 8001b08:	0800f4d8 	.word	0x0800f4d8
 8001b0c:	200004ec 	.word	0x200004ec
 8001b10:	0800f4e8 	.word	0x0800f4e8
 8001b14:	200004f0 	.word	0x200004f0
 8001b18:	0800f4f8 	.word	0x0800f4f8
 8001b1c:	200004f4 	.word	0x200004f4
 8001b20:	0800f508 	.word	0x0800f508
 8001b24:	200004f8 	.word	0x200004f8
 8001b28:	0800f4a8 	.word	0x0800f4a8
 8001b2c:	08002ac1 	.word	0x08002ac1
 8001b30:	200004e0 	.word	0x200004e0
 8001b34:	0800f4b8 	.word	0x0800f4b8
 8001b38:	08002bf1 	.word	0x08002bf1
 8001b3c:	200004e4 	.word	0x200004e4
 8001b40:	0800f43c 	.word	0x0800f43c
 8001b44:	08002645 	.word	0x08002645
 8001b48:	200004d4 	.word	0x200004d4
 8001b4c:	0800f460 	.word	0x0800f460
 8001b50:	08002841 	.word	0x08002841
 8001b54:	200004d8 	.word	0x200004d8
 8001b58:	0800f484 	.word	0x0800f484
 8001b5c:	08002a51 	.word	0x08002a51
 8001b60:	200004dc 	.word	0x200004dc

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	@ 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2230      	movs	r2, #48	@ 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f009 ff2b 	bl	800b9ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b88:	f002 fbf2 	bl	8004370 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <SystemClock_Config+0xd8>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	4a2a      	ldr	r2, [pc, #168]	@ (8001c3c <SystemClock_Config+0xd8>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <SystemClock_Config+0xd8>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <SystemClock_Config+0xdc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a25      	ldr	r2, [pc, #148]	@ (8001c40 <SystemClock_Config+0xdc>)
 8001baa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <SystemClock_Config+0xdc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bd0:	2319      	movs	r3, #25
 8001bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001bd4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001bde:	2309      	movs	r3, #9
 8001be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fc22 	bl	8004430 <HAL_RCC_OscConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bf2:	f001 f87d 	bl	8002cf0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bf6:	f002 fbcb 	bl	8004390 <HAL_PWREx_EnableOverDrive>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c00:	f001 f876 	bl	8002cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c04:	230f      	movs	r3, #15
 8001c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2106      	movs	r1, #6
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 fea8 	bl	8004978 <HAL_RCC_ClockConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001c2e:	f001 f85f 	bl	8002cf0 <Error_Handler>
  }
}
 8001c32:	bf00      	nop
 8001c34:	3750      	adds	r7, #80	@ 0x50
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c58:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <MX_ADC3_Init+0x9c>)
 8001c5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c84:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c86:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <MX_ADC3_Init+0xa0>)
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8a:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001ca6:	f001 fb2d 	bl	8003304 <HAL_ADC_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001cb0:	f001 f81e 	bl	8002cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_ADC3_Init+0x98>)
 8001cc6:	f001 fcc7 	bl	8003658 <HAL_ADC_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001cd0:	f001 f80e 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200003e0 	.word	0x200003e0
 8001ce0:	40012200 	.word	0x40012200
 8001ce4:	0f000001 	.word	0x0f000001

08001ce8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <MX_CRC_Init+0x3c>)
 8001cee:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <MX_CRC_Init+0x40>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_CRC_Init+0x3c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <MX_CRC_Init+0x3c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_CRC_Init+0x3c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <MX_CRC_Init+0x3c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_CRC_Init+0x3c>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	@ (8001d24 <MX_CRC_Init+0x3c>)
 8001d12:	f001 ffd3 	bl	8003cbc <HAL_CRC_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001d1c:	f000 ffe8 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000428 	.word	0x20000428
 8001d28:	40023000 	.word	0x40023000

08001d2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <MX_USART1_UART_Init+0x5c>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_USART1_UART_Init+0x58>)
 8001d70:	f003 feea 	bl	8005b48 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d7a:	f000 ffb9 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000044c 	.word	0x2000044c
 8001d88:	40011000 	.word	0x40011000

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b090      	sub	sp, #64	@ 0x40
 8001d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da2:	4baf      	ldr	r3, [pc, #700]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4aae      	ldr	r2, [pc, #696]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001da8:	f043 0310 	orr.w	r3, r3, #16
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4bac      	ldr	r3, [pc, #688]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dba:	4ba9      	ldr	r3, [pc, #676]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4aa8      	ldr	r2, [pc, #672]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4ba6      	ldr	r3, [pc, #664]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	4ba3      	ldr	r3, [pc, #652]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4aa2      	ldr	r2, [pc, #648]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4ba0      	ldr	r3, [pc, #640]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
 8001de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	4b9d      	ldr	r3, [pc, #628]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a9c      	ldr	r2, [pc, #624]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b9a      	ldr	r3, [pc, #616]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	4b97      	ldr	r3, [pc, #604]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a96      	ldr	r2, [pc, #600]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b94      	ldr	r3, [pc, #592]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b91      	ldr	r3, [pc, #580]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a90      	ldr	r2, [pc, #576]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b8e      	ldr	r3, [pc, #568]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e32:	4b8b      	ldr	r3, [pc, #556]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a8a      	ldr	r2, [pc, #552]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b88      	ldr	r3, [pc, #544]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e4a:	4b85      	ldr	r3, [pc, #532]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a84      	ldr	r2, [pc, #528]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b82      	ldr	r3, [pc, #520]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e62:	4b7f      	ldr	r3, [pc, #508]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a7e      	ldr	r2, [pc, #504]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7a:	4b79      	ldr	r3, [pc, #484]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a78      	ldr	r2, [pc, #480]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e80:	f043 0320 	orr.w	r3, r3, #32
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b76      	ldr	r3, [pc, #472]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	4b73      	ldr	r3, [pc, #460]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a72      	ldr	r2, [pc, #456]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b70      	ldr	r3, [pc, #448]	@ (8002060 <MX_GPIO_Init+0x2d4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2110      	movs	r1, #16
 8001eae:	486d      	ldr	r0, [pc, #436]	@ (8002064 <MX_GPIO_Init+0x2d8>)
 8001eb0:	f002 fa44 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	486b      	ldr	r0, [pc, #428]	@ (8002068 <MX_GPIO_Init+0x2dc>)
 8001eba:	f002 fa3f 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	210d      	movs	r1, #13
 8001ec2:	486a      	ldr	r0, [pc, #424]	@ (800206c <MX_GPIO_Init+0x2e0>)
 8001ec4:	f002 fa3a 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2108      	movs	r1, #8
 8001ecc:	4868      	ldr	r0, [pc, #416]	@ (8002070 <MX_GPIO_Init+0x2e4>)
 8001ece:	f002 fa35 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ed8:	4864      	ldr	r0, [pc, #400]	@ (800206c <MX_GPIO_Init+0x2e0>)
 8001eda:	f002 fa2f 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001ee4:	4863      	ldr	r0, [pc, #396]	@ (8002074 <MX_GPIO_Init+0x2e8>)
 8001ee6:	f002 fa29 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2140      	movs	r1, #64	@ 0x40
 8001eee:	4862      	ldr	r0, [pc, #392]	@ (8002078 <MX_GPIO_Init+0x2ec>)
 8001ef0:	f002 fa24 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	21c8      	movs	r1, #200	@ 0xc8
 8001ef8:	4860      	ldr	r0, [pc, #384]	@ (800207c <MX_GPIO_Init+0x2f0>)
 8001efa:	f002 fa1f 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001efe:	2310      	movs	r3, #16
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f0e:	230e      	movs	r3, #14
 8001f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4859      	ldr	r0, [pc, #356]	@ (8002080 <MX_GPIO_Init+0x2f4>)
 8001f1a:	f002 f84b 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4853      	ldr	r0, [pc, #332]	@ (8002080 <MX_GPIO_Init+0x2f4>)
 8001f32:	f002 f83f 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f36:	2304      	movs	r3, #4
 8001f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f46:	2309      	movs	r3, #9
 8001f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	484b      	ldr	r0, [pc, #300]	@ (8002080 <MX_GPIO_Init+0x2f4>)
 8001f52:	f002 f82f 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f56:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f68:	230b      	movs	r3, #11
 8001f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f70:	4619      	mov	r1, r3
 8001f72:	4842      	ldr	r0, [pc, #264]	@ (800207c <MX_GPIO_Init+0x2f0>)
 8001f74:	f002 f81e 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001f78:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f92:	4619      	mov	r1, r3
 8001f94:	483a      	ldr	r0, [pc, #232]	@ (8002080 <MX_GPIO_Init+0x2f4>)
 8001f96:	f002 f80d 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001f9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fac:	2304      	movs	r3, #4
 8001fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	482b      	ldr	r0, [pc, #172]	@ (8002064 <MX_GPIO_Init+0x2d8>)
 8001fb8:	f001 fffc 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4824      	ldr	r0, [pc, #144]	@ (8002064 <MX_GPIO_Init+0x2d8>)
 8001fd4:	f001 ffee 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481d      	ldr	r0, [pc, #116]	@ (8002068 <MX_GPIO_Init+0x2dc>)
 8001ff4:	f001 ffde 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001ff8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800200a:	230c      	movs	r3, #12
 800200c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002012:	4619      	mov	r1, r3
 8002014:	4818      	ldr	r0, [pc, #96]	@ (8002078 <MX_GPIO_Init+0x2ec>)
 8002016:	f001 ffcd 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800201a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202c:	2301      	movs	r3, #1
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002030:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002034:	4619      	mov	r1, r3
 8002036:	4813      	ldr	r0, [pc, #76]	@ (8002084 <MX_GPIO_Init+0x2f8>)
 8002038:	f001 ffbc 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800203c:	2360      	movs	r3, #96	@ 0x60
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800204c:	230d      	movs	r3, #13
 800204e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002050:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002054:	4619      	mov	r1, r3
 8002056:	480a      	ldr	r0, [pc, #40]	@ (8002080 <MX_GPIO_Init+0x2f4>)
 8002058:	f001 ffac 	bl	8003fb4 <HAL_GPIO_Init>
 800205c:	e014      	b.n	8002088 <MX_GPIO_Init+0x2fc>
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40020400 	.word	0x40020400
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40022000 	.word	0x40022000
 8002070:	40022800 	.word	0x40022800
 8002074:	40021c00 	.word	0x40021c00
 8002078:	40020800 	.word	0x40020800
 800207c:	40021800 	.word	0x40021800
 8002080:	40021000 	.word	0x40021000
 8002084:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002088:	2340      	movs	r3, #64	@ 0x40
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002098:	230a      	movs	r3, #10
 800209a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	48bc      	ldr	r0, [pc, #752]	@ (8002394 <MX_GPIO_Init+0x608>)
 80020a4:	f001 ff86 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80020a8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020ba:	230c      	movs	r3, #12
 80020bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c2:	4619      	mov	r1, r3
 80020c4:	48b4      	ldr	r0, [pc, #720]	@ (8002398 <MX_GPIO_Init+0x60c>)
 80020c6:	f001 ff75 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020ca:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020dc:	230e      	movs	r3, #14
 80020de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e4:	4619      	mov	r1, r3
 80020e6:	48ad      	ldr	r0, [pc, #692]	@ (800239c <MX_GPIO_Init+0x610>)
 80020e8:	f001 ff64 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80020ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f2:	2300      	movs	r3, #0
 80020f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020fe:	4619      	mov	r1, r3
 8002100:	48a6      	ldr	r0, [pc, #664]	@ (800239c <MX_GPIO_Init+0x610>)
 8002102:	f001 ff57 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002106:	2340      	movs	r3, #64	@ 0x40
 8002108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800210a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800210e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002118:	4619      	mov	r1, r3
 800211a:	48a1      	ldr	r0, [pc, #644]	@ (80023a0 <MX_GPIO_Init+0x614>)
 800211c:	f001 ff4a 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002120:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002124:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002132:	230c      	movs	r3, #12
 8002134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800213a:	4619      	mov	r1, r3
 800213c:	4898      	ldr	r0, [pc, #608]	@ (80023a0 <MX_GPIO_Init+0x614>)
 800213e:	f001 ff39 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002142:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002154:	230a      	movs	r3, #10
 8002156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800215c:	4619      	mov	r1, r3
 800215e:	4891      	ldr	r0, [pc, #580]	@ (80023a4 <MX_GPIO_Init+0x618>)
 8002160:	f001 ff28 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002164:	23f0      	movs	r3, #240	@ 0xf0
 8002166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002174:	230a      	movs	r3, #10
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002178:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800217c:	4619      	mov	r1, r3
 800217e:	488a      	ldr	r0, [pc, #552]	@ (80023a8 <MX_GPIO_Init+0x61c>)
 8002180:	f001 ff18 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002184:	23f7      	movs	r3, #247	@ 0xf7
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002194:	230e      	movs	r3, #14
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	4883      	ldr	r0, [pc, #524]	@ (80023ac <MX_GPIO_Init+0x620>)
 80021a0:	f001 ff08 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80021a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021b6:	2309      	movs	r3, #9
 80021b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021be:	4619      	mov	r1, r3
 80021c0:	4875      	ldr	r0, [pc, #468]	@ (8002398 <MX_GPIO_Init+0x60c>)
 80021c2:	f001 fef7 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80021c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80021d8:	230a      	movs	r3, #10
 80021da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021e0:	4619      	mov	r1, r3
 80021e2:	486d      	ldr	r0, [pc, #436]	@ (8002398 <MX_GPIO_Init+0x60c>)
 80021e4:	f001 fee6 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021e8:	2320      	movs	r3, #32
 80021ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021fc:	4619      	mov	r1, r3
 80021fe:	4868      	ldr	r0, [pc, #416]	@ (80023a0 <MX_GPIO_Init+0x614>)
 8002200:	f001 fed8 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002204:	2308      	movs	r3, #8
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002214:	230d      	movs	r3, #13
 8002216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002218:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800221c:	4619      	mov	r1, r3
 800221e:	4860      	ldr	r0, [pc, #384]	@ (80023a0 <MX_GPIO_Init+0x614>)
 8002220:	f001 fec8 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8002224:	230d      	movs	r3, #13
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800222c:	2302      	movs	r3, #2
 800222e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002238:	4619      	mov	r1, r3
 800223a:	485b      	ldr	r0, [pc, #364]	@ (80023a8 <MX_GPIO_Init+0x61c>)
 800223c:	f001 feba 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002246:	2300      	movs	r3, #0
 8002248:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800224e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002252:	4619      	mov	r1, r3
 8002254:	4856      	ldr	r0, [pc, #344]	@ (80023b0 <MX_GPIO_Init+0x624>)
 8002256:	f001 fead 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800225a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800226c:	230c      	movs	r3, #12
 800226e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002274:	4619      	mov	r1, r3
 8002276:	484f      	ldr	r0, [pc, #316]	@ (80023b4 <MX_GPIO_Init+0x628>)
 8002278:	f001 fe9c 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800227c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800228e:	230e      	movs	r3, #14
 8002290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002292:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002296:	4619      	mov	r1, r3
 8002298:	4843      	ldr	r0, [pc, #268]	@ (80023a8 <MX_GPIO_Init+0x61c>)
 800229a:	f001 fe8b 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800229e:	2308      	movs	r3, #8
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022b2:	4619      	mov	r1, r3
 80022b4:	483d      	ldr	r0, [pc, #244]	@ (80023ac <MX_GPIO_Init+0x620>)
 80022b6:	f001 fe7d 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80022ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022cc:	230d      	movs	r3, #13
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d4:	4619      	mov	r1, r3
 80022d6:	4830      	ldr	r0, [pc, #192]	@ (8002398 <MX_GPIO_Init+0x60c>)
 80022d8:	f001 fe6c 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022dc:	2310      	movs	r3, #16
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ec:	4619      	mov	r1, r3
 80022ee:	482c      	ldr	r0, [pc, #176]	@ (80023a0 <MX_GPIO_Init+0x614>)
 80022f0:	f001 fe60 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80022f4:	2304      	movs	r3, #4
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002304:	230c      	movs	r3, #12
 8002306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230c:	4619      	mov	r1, r3
 800230e:	4824      	ldr	r0, [pc, #144]	@ (80023a0 <MX_GPIO_Init+0x614>)
 8002310:	f001 fe50 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002314:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002322:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002326:	4619      	mov	r1, r3
 8002328:	4823      	ldr	r0, [pc, #140]	@ (80023b8 <MX_GPIO_Init+0x62c>)
 800232a:	f001 fe43 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800232e:	2302      	movs	r3, #2
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800233e:	2305      	movs	r3, #5
 8002340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002346:	4619      	mov	r1, r3
 8002348:	4817      	ldr	r0, [pc, #92]	@ (80023a8 <MX_GPIO_Init+0x61c>)
 800234a:	f001 fe33 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800234e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002364:	4619      	mov	r1, r3
 8002366:	4810      	ldr	r0, [pc, #64]	@ (80023a8 <MX_GPIO_Init+0x61c>)
 8002368:	f001 fe24 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800236c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002382:	4619      	mov	r1, r3
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <MX_GPIO_Init+0x62c>)
 8002386:	f001 fe15 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800238a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800238e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	e013      	b.n	80023bc <MX_GPIO_Init+0x630>
 8002394:	40020400 	.word	0x40020400
 8002398:	40021800 	.word	0x40021800
 800239c:	40022400 	.word	0x40022400
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40022800 	.word	0x40022800
 80023b0:	40020800 	.word	0x40020800
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021c00 	.word	0x40021c00
 80023bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023c6:	230d      	movs	r3, #13
 80023c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ce:	4619      	mov	r1, r3
 80023d0:	4895      	ldr	r0, [pc, #596]	@ (8002628 <MX_GPIO_Init+0x89c>)
 80023d2:	f001 fdef 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80023d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023e0:	2302      	movs	r3, #2
 80023e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e8:	4619      	mov	r1, r3
 80023ea:	4890      	ldr	r0, [pc, #576]	@ (800262c <MX_GPIO_Init+0x8a0>)
 80023ec:	f001 fde2 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80023f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002402:	2301      	movs	r3, #1
 8002404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002406:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240a:	4619      	mov	r1, r3
 800240c:	4888      	ldr	r0, [pc, #544]	@ (8002630 <MX_GPIO_Init+0x8a4>)
 800240e:	f001 fdd1 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002418:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800241c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002422:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002426:	4619      	mov	r1, r3
 8002428:	4880      	ldr	r0, [pc, #512]	@ (800262c <MX_GPIO_Init+0x8a0>)
 800242a:	f001 fdc3 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800243e:	2308      	movs	r3, #8
 8002440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002446:	4619      	mov	r1, r3
 8002448:	487a      	ldr	r0, [pc, #488]	@ (8002634 <MX_GPIO_Init+0x8a8>)
 800244a:	f001 fdb3 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 800244e:	2340      	movs	r3, #64	@ 0x40
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002456:	2302      	movs	r3, #2
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002462:	4619      	mov	r1, r3
 8002464:	4873      	ldr	r0, [pc, #460]	@ (8002634 <MX_GPIO_Init+0x8a8>)
 8002466:	f001 fda5 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800246a:	2328      	movs	r3, #40	@ 0x28
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800247a:	230c      	movs	r3, #12
 800247c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800247e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002482:	4619      	mov	r1, r3
 8002484:	4868      	ldr	r0, [pc, #416]	@ (8002628 <MX_GPIO_Init+0x89c>)
 8002486:	f001 fd95 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 800248a:	23c0      	movs	r3, #192	@ 0xc0
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248e:	2301      	movs	r3, #1
 8002490:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002492:	2302      	movs	r3, #2
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800249a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800249e:	4619      	mov	r1, r3
 80024a0:	4865      	ldr	r0, [pc, #404]	@ (8002638 <MX_GPIO_Init+0x8ac>)
 80024a2:	f001 fd87 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80024a6:	2308      	movs	r3, #8
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024b6:	230c      	movs	r3, #12
 80024b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	485c      	ldr	r0, [pc, #368]	@ (8002634 <MX_GPIO_Init+0x8a8>)
 80024c2:	f001 fd77 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024c6:	2332      	movs	r3, #50	@ 0x32
 80024c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024d6:	230b      	movs	r3, #11
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	4854      	ldr	r0, [pc, #336]	@ (8002634 <MX_GPIO_Init+0x8a8>)
 80024e2:	f001 fd67 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024e6:	2304      	movs	r3, #4
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024f6:	2309      	movs	r3, #9
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fe:	4619      	mov	r1, r3
 8002500:	484e      	ldr	r0, [pc, #312]	@ (800263c <MX_GPIO_Init+0x8b0>)
 8002502:	f001 fd57 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002506:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002518:	2309      	movs	r3, #9
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800251c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002520:	4619      	mov	r1, r3
 8002522:	4847      	ldr	r0, [pc, #284]	@ (8002640 <MX_GPIO_Init+0x8b4>)
 8002524:	f001 fd46 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002528:	2308      	movs	r3, #8
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800253c:	4619      	mov	r1, r3
 800253e:	483e      	ldr	r0, [pc, #248]	@ (8002638 <MX_GPIO_Init+0x8ac>)
 8002540:	f001 fd38 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002544:	2304      	movs	r3, #4
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	2300      	movs	r3, #0
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002554:	4619      	mov	r1, r3
 8002556:	4838      	ldr	r0, [pc, #224]	@ (8002638 <MX_GPIO_Init+0x8ac>)
 8002558:	f001 fd2c 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800255c:	2386      	movs	r3, #134	@ 0x86
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800256c:	230b      	movs	r3, #11
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002574:	4619      	mov	r1, r3
 8002576:	482e      	ldr	r0, [pc, #184]	@ (8002630 <MX_GPIO_Init+0x8a4>)
 8002578:	f001 fd1c 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800257c:	2350      	movs	r3, #80	@ 0x50
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800258c:	230d      	movs	r3, #13
 800258e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002590:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002594:	4619      	mov	r1, r3
 8002596:	4826      	ldr	r0, [pc, #152]	@ (8002630 <MX_GPIO_Init+0x8a4>)
 8002598:	f001 fd0c 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800259c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a2:	2312      	movs	r3, #18
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025ae:	2304      	movs	r3, #4
 80025b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025b6:	4619      	mov	r1, r3
 80025b8:	481b      	ldr	r0, [pc, #108]	@ (8002628 <MX_GPIO_Init+0x89c>)
 80025ba:	f001 fcfb 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80025be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025d0:	230a      	movs	r3, #10
 80025d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025d8:	4619      	mov	r1, r3
 80025da:	4818      	ldr	r0, [pc, #96]	@ (800263c <MX_GPIO_Init+0x8b0>)
 80025dc:	f001 fcea 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 80025e0:	2340      	movs	r3, #64	@ 0x40
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025e8:	2302      	movs	r3, #2
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025f4:	4619      	mov	r1, r3
 80025f6:	480c      	ldr	r0, [pc, #48]	@ (8002628 <MX_GPIO_Init+0x89c>)
 80025f8:	f001 fcdc 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80025fc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800260e:	2305      	movs	r3, #5
 8002610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002616:	4619      	mov	r1, r3
 8002618:	4808      	ldr	r0, [pc, #32]	@ (800263c <MX_GPIO_Init+0x8b0>)
 800261a:	f001 fccb 	bl	8003fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800261e:	bf00      	nop
 8002620:	3740      	adds	r7, #64	@ 0x40
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021c00 	.word	0x40021c00
 800262c:	40022000 	.word	0x40022000
 8002630:	40020000 	.word	0x40020000
 8002634:	40020800 	.word	0x40020800
 8002638:	40021800 	.word	0x40021800
 800263c:	40020400 	.word	0x40020400
 8002640:	40020c00 	.word	0x40020c00

08002644 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Setup code
	ProgramStateFSM progStateLocal;
	float PPMValue;
	bool sentAlarmMSG = false; // flag to transmit alarm msg only once
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
	bool meassuring = false;
 8002650:	2300      	movs	r3, #0
 8002652:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002654:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <StartMainTask+0x1d4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	4618      	mov	r0, r3
 800265e:	f005 f853 	bl	8007708 <osMutexAcquire>
	  progStateLocal = progState;
 8002662:	4b6e      	ldr	r3, [pc, #440]	@ (800281c <StartMainTask+0x1d8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	737b      	strb	r3, [r7, #13]
	  osMutexRelease(RegimeMutexHandle);
 8002668:	4b6b      	ldr	r3, [pc, #428]	@ (8002818 <StartMainTask+0x1d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f005 f8a9 	bl	80077c4 <osMutexRelease>

	  PPMValue = ReadGasSensor();
 8002672:	f7fe fe02 	bl	800127a <ReadGasSensor>
 8002676:	ed87 0a02 	vstr	s0, [r7, #8]

	  switch(progStateLocal)
 800267a:	7b7b      	ldrb	r3, [r7, #13]
 800267c:	2b04      	cmp	r3, #4
 800267e:	f200 808b 	bhi.w	8002798 <StartMainTask+0x154>
 8002682:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <StartMainTask+0x44>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	080026e9 	.word	0x080026e9
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026fd 	.word	0x080026fd
 8002694:	08002731 	.word	0x08002731
 8002698:	08002765 	.word	0x08002765
	  {
	  	  case P_IDLE_START:
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 800269c:	4b60      	ldr	r3, [pc, #384]	@ (8002820 <StartMainTask+0x1dc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	4618      	mov	r0, r3
 80026a6:	f005 f82f 	bl	8007708 <osMutexAcquire>
	  		  HelpSendUART(len_of_array, cmdStrings);
 80026aa:	2314      	movs	r3, #20
 80026ac:	495d      	ldr	r1, [pc, #372]	@ (8002824 <StartMainTask+0x1e0>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f87c 	bl	80017ac <HelpSendUART>
	  		  UART_TransmitString(IdleMSG);
 80026b4:	485c      	ldr	r0, [pc, #368]	@ (8002828 <StartMainTask+0x1e4>)
 80026b6:	f7ff f80f 	bl	80016d8 <UART_TransmitString>
	  		  osMutexRelease(UARTMutexHandle);
 80026ba:	4b59      	ldr	r3, [pc, #356]	@ (8002820 <StartMainTask+0x1dc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f005 f880 	bl	80077c4 <osMutexRelease>

	  		  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 80026c4:	4b54      	ldr	r3, [pc, #336]	@ (8002818 <StartMainTask+0x1d4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	4618      	mov	r0, r3
 80026ce:	f005 f81b 	bl	8007708 <osMutexAcquire>
	  		  progState = P_IDLE;
 80026d2:	4b52      	ldr	r3, [pc, #328]	@ (800281c <StartMainTask+0x1d8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(RegimeMutexHandle);
 80026d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002818 <StartMainTask+0x1d4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f005 f871 	bl	80077c4 <osMutexRelease>

	  		  meassuring = false;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73bb      	strb	r3, [r7, #14]
		  break;
 80026e6:	e057      	b.n	8002798 <StartMainTask+0x154>

	  	  case P_IDLE:
	  		  //System waits for configuration
	  		  SetIndicatorLEDs(0);
 80026e8:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 800282c <StartMainTask+0x1e8>
 80026ec:	f7fe fcd4 	bl	8001098 <SetIndicatorLEDs>
	  		  meassuring = false;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73bb      	strb	r3, [r7, #14]
	  		  osDelay(5);
 80026f4:	2005      	movs	r0, #5
 80026f6:	f004 fe1b 	bl	8007330 <osDelay>
		  break;
 80026fa:	e04d      	b.n	8002798 <StartMainTask+0x154>

	  	  case P_WORK_S1:
	  		  meassuring = true;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002700:	4b47      	ldr	r3, [pc, #284]	@ (8002820 <StartMainTask+0x1dc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	4618      	mov	r0, r3
 800270a:	f004 fffd 	bl	8007708 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 800270e:	4848      	ldr	r0, [pc, #288]	@ (8002830 <StartMainTask+0x1ec>)
 8002710:	f7fe ffe2 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002714:	ed97 0a02 	vldr	s0, [r7, #8]
 8002718:	f7ff f822 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 800271c:	4b40      	ldr	r3, [pc, #256]	@ (8002820 <StartMainTask+0x1dc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f005 f84f 	bl	80077c4 <osMutexRelease>
	  		  osDelay(1000);
 8002726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800272a:	f004 fe01 	bl	8007330 <osDelay>
		  break;
 800272e:	e033      	b.n	8002798 <StartMainTask+0x154>

	  	  case P_WORK_S3:
	  		  meassuring = true;
 8002730:	2301      	movs	r3, #1
 8002732:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002734:	4b3a      	ldr	r3, [pc, #232]	@ (8002820 <StartMainTask+0x1dc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	4618      	mov	r0, r3
 800273e:	f004 ffe3 	bl	8007708 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 8002742:	483b      	ldr	r0, [pc, #236]	@ (8002830 <StartMainTask+0x1ec>)
 8002744:	f7fe ffc8 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002748:	ed97 0a02 	vldr	s0, [r7, #8]
 800274c:	f7ff f808 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 8002750:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <StartMainTask+0x1dc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f005 f835 	bl	80077c4 <osMutexRelease>
	  		  osDelay(3000);
 800275a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800275e:	f004 fde7 	bl	8007330 <osDelay>
		  break;
 8002762:	e019      	b.n	8002798 <StartMainTask+0x154>

	  	  case P_WORK_S5:
	  		  meassuring = true;
 8002764:	2301      	movs	r3, #1
 8002766:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002768:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <StartMainTask+0x1dc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	4618      	mov	r0, r3
 8002772:	f004 ffc9 	bl	8007708 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 8002776:	482e      	ldr	r0, [pc, #184]	@ (8002830 <StartMainTask+0x1ec>)
 8002778:	f7fe ffae 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 800277c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002780:	f7fe ffee 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 8002784:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <StartMainTask+0x1dc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f005 f81b 	bl	80077c4 <osMutexRelease>
	  		  osDelay(5000);
 800278e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002792:	f004 fdcd 	bl	8007330 <osDelay>
		  break;
 8002796:	bf00      	nop
	  }

	  //Take action
	  //Setting the indicator system
	  if(meassuring == true)
 8002798:	7bbb      	ldrb	r3, [r7, #14]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <StartMainTask+0x162>
	  {
		  SetIndicatorLEDs(PPMValue);
 800279e:	ed97 0a02 	vldr	s0, [r7, #8]
 80027a2:	f7fe fc79 	bl	8001098 <SetIndicatorLEDs>
	  }

	  //Check for contamination
	  if(meassuring == true)
 80027a6:	7bbb      	ldrb	r3, [r7, #14]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f43f af53 	beq.w	8002654 <StartMainTask+0x10>
	  {
		  if(PPMValue > DangerousPPM)
 80027ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002834 <StartMainTask+0x1f0>
 80027b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027be:	dd13      	ble.n	80027e8 <StartMainTask+0x1a4>
		  {
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <StartMainTask+0x1dc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 ff9d 	bl	8007708 <osMutexAcquire>
			  UART_TransmitString(AlertMSG);
 80027ce:	481a      	ldr	r0, [pc, #104]	@ (8002838 <StartMainTask+0x1f4>)
 80027d0:	f7fe ff82 	bl	80016d8 <UART_TransmitString>
			  osMutexRelease(UARTMutexHandle);
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <StartMainTask+0x1dc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fff3 	bl	80077c4 <osMutexRelease>
			  sentAlarmMSG = true;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
			  AlarmON();
 80027e2:	f7fe fc87 	bl	80010f4 <AlarmON>
 80027e6:	e735      	b.n	8002654 <StartMainTask+0x10>
		  }
		  else
		  {
			  AlarmOFF();
 80027e8:	f7fe fc8e 	bl	8001108 <AlarmOFF>
			  if(sentAlarmMSG == true)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f43f af30 	beq.w	8002654 <StartMainTask+0x10>
			  {
				  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <StartMainTask+0x1dc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 ff83 	bl	8007708 <osMutexAcquire>
				  UART_TransmitString(RoomClearedMSG);
 8002802:	480e      	ldr	r0, [pc, #56]	@ (800283c <StartMainTask+0x1f8>)
 8002804:	f7fe ff68 	bl	80016d8 <UART_TransmitString>
				  osMutexRelease(UARTMutexHandle);
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <StartMainTask+0x1dc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f004 ffd9 	bl	80077c4 <osMutexRelease>
				  sentAlarmMSG = false; // to be avaliable for next time danger happens
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002816:	e71d      	b.n	8002654 <StartMainTask+0x10>
 8002818:	200004e8 	.word	0x200004e8
 800281c:	2000015c 	.word	0x2000015c
 8002820:	200004f0 	.word	0x200004f0
 8002824:	2000010c 	.word	0x2000010c
 8002828:	20000008 	.word	0x20000008
 800282c:	00000000 	.word	0x00000000
 8002830:	20000028 	.word	0x20000028
 8002834:	453b8000 	.word	0x453b8000
 8002838:	20000030 	.word	0x20000030
 800283c:	20000054 	.word	0x20000054

08002840 <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void *argument)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	bool CommandStatus;
	float LocalPPM;
  /* Infinite loop */
  for(;;)
  {
	  if(IsTransferComplete() == true)
 8002848:	f7ff f88c 	bl	8001964 <IsTransferComplete>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80e3 	beq.w	8002a1a <StartTerminalTask+0x1da>
	  {
		  CommandStatus = StringCompareFromUART(GetRxBuffer(), cmdStrings, len_of_array, &CommandIndex);
 8002854:	f7ff f892 	bl	800197c <GetRxBuffer>
 8002858:	2214      	movs	r2, #20
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	4971      	ldr	r1, [pc, #452]	@ (8002a24 <StartTerminalTask+0x1e4>)
 8002860:	f7ff f8a1 	bl	80019a6 <StringCompareFromUART>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
		  if(CommandStatus == false)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d018      	beq.n	80028a6 <StartTerminalTask+0x66>
		  {
			  UART_TransmitString(ErrorMSG);
 8002874:	486c      	ldr	r0, [pc, #432]	@ (8002a28 <StartTerminalTask+0x1e8>)
 8002876:	f7fe ff2f 	bl	80016d8 <UART_TransmitString>
			  ClearRxBuffer();
 800287a:	f7ff f855 	bl	8001928 <ClearRxBuffer>
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 800287e:	4b6b      	ldr	r3, [pc, #428]	@ (8002a2c <StartTerminalTask+0x1ec>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f04f 31ff 	mov.w	r1, #4294967295
 8002886:	4618      	mov	r0, r3
 8002888:	f004 ff3e 	bl	8007708 <osMutexAcquire>
			  HelpSendUART(len_of_array, cmdStrings);
 800288c:	2314      	movs	r3, #20
 800288e:	4965      	ldr	r1, [pc, #404]	@ (8002a24 <StartTerminalTask+0x1e4>)
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe ff8b 	bl	80017ac <HelpSendUART>
			  osMutexRelease(UARTMutexHandle);
 8002896:	4b65      	ldr	r3, [pc, #404]	@ (8002a2c <StartTerminalTask+0x1ec>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 ff92 	bl	80077c4 <osMutexRelease>
			  progStateLocal = P_IDLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	75fb      	strb	r3, [r7, #23]
 80028a4:	e0b9      	b.n	8002a1a <StartTerminalTask+0x1da>
		  }
		  else
		  {
			  ClearRxBuffer();
 80028a6:	f7ff f83f 	bl	8001928 <ClearRxBuffer>
				uartCmdState = CommandIndex;
 80028aa:	89bb      	ldrh	r3, [r7, #12]
 80028ac:	73bb      	strb	r3, [r7, #14]

				switch(uartCmdState)
 80028ae:	7bbb      	ldrb	r3, [r7, #14]
 80028b0:	2b14      	cmp	r3, #20
 80028b2:	f200 80a3 	bhi.w	80029fc <StartTerminalTask+0x1bc>
 80028b6:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <StartTerminalTask+0x7c>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	08002911 	.word	0x08002911
 80028c0:	08002917 	.word	0x08002917
 80028c4:	08002923 	.word	0x08002923
 80028c8:	0800292f 	.word	0x0800292f
 80028cc:	0800293b 	.word	0x0800293b
 80028d0:	08002945 	.word	0x08002945
 80028d4:	08002955 	.word	0x08002955
 80028d8:	08002961 	.word	0x08002961
 80028dc:	0800296d 	.word	0x0800296d
 80028e0:	08002977 	.word	0x08002977
 80028e4:	08002981 	.word	0x08002981
 80028e8:	0800298d 	.word	0x0800298d
 80028ec:	08002999 	.word	0x08002999
 80028f0:	080029a5 	.word	0x080029a5
 80028f4:	080029b1 	.word	0x080029b1
 80028f8:	080029bd 	.word	0x080029bd
 80028fc:	080029c9 	.word	0x080029c9
 8002900:	080029d5 	.word	0x080029d5
 8002904:	080029e1 	.word	0x080029e1
 8002908:	080029ed 	.word	0x080029ed
 800290c:	080029fd 	.word	0x080029fd
				{
					case cmd_0:

						progStateLocal = P_IDLE_START;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]

						break;
 8002914:	e072      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_1:

						progStateLocal = P_WORK_S1;
 8002916:	2302      	movs	r3, #2
 8002918:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S1WorkStateMSG);
 800291a:	4845      	ldr	r0, [pc, #276]	@ (8002a30 <StartTerminalTask+0x1f0>)
 800291c:	f7fe fedc 	bl	80016d8 <UART_TransmitString>

						break;
 8002920:	e06c      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_2:

						progStateLocal = P_WORK_S3;
 8002922:	2303      	movs	r3, #3
 8002924:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S3WorkStateMSG);
 8002926:	4843      	ldr	r0, [pc, #268]	@ (8002a34 <StartTerminalTask+0x1f4>)
 8002928:	f7fe fed6 	bl	80016d8 <UART_TransmitString>

						break;
 800292c:	e066      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_3:

						progStateLocal = P_WORK_S5;
 800292e:	2304      	movs	r3, #4
 8002930:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S5WorkStateMSG);
 8002932:	4841      	ldr	r0, [pc, #260]	@ (8002a38 <StartTerminalTask+0x1f8>)
 8002934:	f7fe fed0 	bl	80016d8 <UART_TransmitString>

						break;
 8002938:	e060      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_4:

						LocalPPM = ReadGasSensor();
 800293a:	f7fe fc9e 	bl	800127a <ReadGasSensor>
 800293e:	ed87 0a04 	vstr	s0, [r7, #16]

						break;
 8002942:	e05b      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_5:

						UART_TransmitString(PPM_MSG);
 8002944:	483d      	ldr	r0, [pc, #244]	@ (8002a3c <StartTerminalTask+0x1fc>)
 8002946:	f7fe fec7 	bl	80016d8 <UART_TransmitString>
						UART_TransmitFloat(LocalPPM);
 800294a:	ed97 0a04 	vldr	s0, [r7, #16]
 800294e:	f7fe ff07 	bl	8001760 <UART_TransmitFloat>

						break;
 8002952:	e053      	b.n	80029fc <StartTerminalTask+0x1bc>


					case cmd_6:

						UART_TransmitString(FAN_ON);
 8002954:	483a      	ldr	r0, [pc, #232]	@ (8002a40 <StartTerminalTask+0x200>)
 8002956:	f7fe febf 	bl	80016d8 <UART_TransmitString>


						progStateLocal = P_IDLE;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]

						break;
 800295e:	e04d      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_7:

						UART_TransmitString(FAN_OFF);
 8002960:	4838      	ldr	r0, [pc, #224]	@ (8002a44 <StartTerminalTask+0x204>)
 8002962:	f7fe feb9 	bl	80016d8 <UART_TransmitString>
						progStateLocal = P_IDLE;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]

						break;
 800296a:	e047      	b.n	80029fc <StartTerminalTask+0x1bc>


					case cmd_8:

						AlarmON();
 800296c:	f7fe fbc2 	bl	80010f4 <AlarmON>
						progStateLocal = P_IDLE;
 8002970:	2300      	movs	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]

						break;
 8002974:	e042      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_9:

						AlarmOFF();
 8002976:	f7fe fbc7 	bl	8001108 <AlarmOFF>
						progStateLocal = P_IDLE;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]

						break;
 800297e:	e03d      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_10:

						LED_Drive(true);
 8002980:	2001      	movs	r0, #1
 8002982:	f7fe fccf 	bl	8001324 <LED_Drive>
						progStateLocal = P_IDLE;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]

						break;
 800298a:	e037      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_11:

						LED_Drive(false);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe fcc9 	bl	8001324 <LED_Drive>
						progStateLocal = P_IDLE;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]

						break;
 8002996:	e031      	b.n	80029fc <StartTerminalTask+0x1bc>


					case cmd_12:

						SetIndicatorLEDsNum(0);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe fb8d 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]

						break;
 80029a2:	e02b      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_13:

						SetIndicatorLEDsNum(1);
 80029a4:	2001      	movs	r0, #1
 80029a6:	f7fe fb87 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]

						break;
 80029ae:	e025      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_14:

						SetIndicatorLEDsNum(2);
 80029b0:	2002      	movs	r0, #2
 80029b2:	f7fe fb81 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]

						break;
 80029ba:	e01f      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_15:

						SetIndicatorLEDsNum(3);
 80029bc:	2003      	movs	r0, #3
 80029be:	f7fe fb7b 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]

						break;
 80029c6:	e019      	b.n	80029fc <StartTerminalTask+0x1bc>


					case cmd_16:

						SetIndicatorLEDsNum(4);
 80029c8:	2004      	movs	r0, #4
 80029ca:	f7fe fb75 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]

						break;
 80029d2:	e013      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_17:

						SetIndicatorLEDsNum(5);
 80029d4:	2005      	movs	r0, #5
 80029d6:	f7fe fb6f 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]

						break;
 80029de:	e00d      	b.n	80029fc <StartTerminalTask+0x1bc>


					case cmd_18:

						SetIndicatorLEDsNum(6);
 80029e0:	2006      	movs	r0, #6
 80029e2:	f7fe fb69 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]

						break;
 80029ea:	e007      	b.n	80029fc <StartTerminalTask+0x1bc>

					case cmd_19:

						HelpSendUART(len_of_array, cmdStrings);
 80029ec:	2314      	movs	r3, #20
 80029ee:	490d      	ldr	r1, [pc, #52]	@ (8002a24 <StartTerminalTask+0x1e4>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fedb 	bl	80017ac <HelpSendUART>
						progStateLocal = P_IDLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]

						break;
 80029fa:	bf00      	nop
						break;
				}

				//ClearRxBuffer();

				osMutexAcquire(RegimeMutexHandle, osWaitForever);
 80029fc:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <StartTerminalTask+0x208>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fe7f 	bl	8007708 <osMutexAcquire>
				progState = progStateLocal;
 8002a0a:	4a10      	ldr	r2, [pc, #64]	@ (8002a4c <StartTerminalTask+0x20c>)
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	7013      	strb	r3, [r2, #0]
				osMutexRelease(RegimeMutexHandle);
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <StartTerminalTask+0x208>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 fed5 	bl	80077c4 <osMutexRelease>
		  }
	  }

    osDelay(100);
 8002a1a:	2064      	movs	r0, #100	@ 0x64
 8002a1c:	f004 fc88 	bl	8007330 <osDelay>
	  if(IsTransferComplete() == true)
 8002a20:	e712      	b.n	8002848 <StartTerminalTask+0x8>
 8002a22:	bf00      	nop
 8002a24:	2000010c 	.word	0x2000010c
 8002a28:	200000dc 	.word	0x200000dc
 8002a2c:	200004f0 	.word	0x200004f0
 8002a30:	2000007c 	.word	0x2000007c
 8002a34:	20000094 	.word	0x20000094
 8002a38:	200000ac 	.word	0x200000ac
 8002a3c:	20000028 	.word	0x20000028
 8002a40:	200000c4 	.word	0x200000c4
 8002a44:	200000d0 	.word	0x200000d0
 8002a48:	200004e8 	.word	0x200004e8
 8002a4c:	2000015c 	.word	0x2000015c

08002a50 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
	bool read_button_flag = true;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73bb      	strb	r3, [r7, #14]
	bool press_button_flag = false;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
	press_button_flag = ReadSignal(&read_button_flag);
 8002a60:	f107 030e 	add.w	r3, r7, #14
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fe25 	bl	80016b4 <ReadSignal>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	73fb      	strb	r3, [r7, #15]
    if(press_button_flag == true)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <StartButtonTask+0x5c>
    {
    	osTimerStart(ButtonTimerHandle, 3000);
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <StartButtonTask+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 fd1f 	bl	80074c0 <osTimerStart>

    	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002a82:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <StartButtonTask+0x68>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fe3c 	bl	8007708 <osMutexAcquire>
    	button_press_counter++;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <StartButtonTask+0x6c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <StartButtonTask+0x6c>)
 8002a9c:	701a      	strb	r2, [r3, #0]
    	osMutexRelease(ButtonCountMutexHandle);
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <StartButtonTask+0x68>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 fe8e 	bl	80077c4 <osMutexRelease>

    	press_button_flag = false;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
    }
    osDelay(10);
 8002aac:	200a      	movs	r0, #10
 8002aae:	f004 fc3f 	bl	8007330 <osDelay>
	press_button_flag = ReadSignal(&read_button_flag);
 8002ab2:	e7d5      	b.n	8002a60 <StartButtonTask+0x10>
 8002ab4:	200004e4 	.word	0x200004e4
 8002ab8:	200004f8 	.word	0x200004f8
 8002abc:	200004fc 	.word	0x200004fc

08002ac0 <LEDTimerCallback>:
  /* USER CODE END StartButtonTask */
}

/* LEDTimerCallback function */
void LEDTimerCallback(void *argument)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	bool quality_status_local;
	ProgramStateFSM progStateLocal;
	LED_StatusFSM ledStateLocal;


	osMutexAcquire(LED_Blink_MutexHandle, osWaitForever);
 8002ac8:	4b42      	ldr	r3, [pc, #264]	@ (8002bd4 <LEDTimerCallback+0x114>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 fe19 	bl	8007708 <osMutexAcquire>
		quality_status_local = quality_status;
 8002ad6:	4b40      	ldr	r3, [pc, #256]	@ (8002bd8 <LEDTimerCallback+0x118>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	73bb      	strb	r3, [r7, #14]
	osMutexRelease(LED_Blink_MutexHandle);
 8002adc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <LEDTimerCallback+0x114>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 fe6f 	bl	80077c4 <osMutexRelease>

	osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <LEDTimerCallback+0x11c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 31ff 	mov.w	r1, #4294967295
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fe0a 	bl	8007708 <osMutexAcquire>
		progStateLocal = progState;
 8002af4:	4b3a      	ldr	r3, [pc, #232]	@ (8002be0 <LEDTimerCallback+0x120>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	737b      	strb	r3, [r7, #13]
	osMutexRelease(RegimeMutexHandle);
 8002afa:	4b38      	ldr	r3, [pc, #224]	@ (8002bdc <LEDTimerCallback+0x11c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fe60 	bl	80077c4 <osMutexRelease>

	osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8002b04:	4b37      	ldr	r3, [pc, #220]	@ (8002be4 <LEDTimerCallback+0x124>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fdfb 	bl	8007708 <osMutexAcquire>
		ledStateLocal = ledState;
 8002b12:	4b35      	ldr	r3, [pc, #212]	@ (8002be8 <LEDTimerCallback+0x128>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(LED_FSM_MutexHandle);
 8002b18:	4b32      	ldr	r3, [pc, #200]	@ (8002be4 <LEDTimerCallback+0x124>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 fe51 	bl	80077c4 <osMutexRelease>


	if( (progStateLocal == P_IDLE_START) || (progStateLocal == P_IDLE) )
 8002b22:	7b7b      	ldrb	r3, [r7, #13]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d002      	beq.n	8002b2e <LEDTimerCallback+0x6e>
 8002b28:	7b7b      	ldrb	r3, [r7, #13]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <LEDTimerCallback+0x80>
	{
		osTimerStop(LEDTimerHandle);
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bec <LEDTimerCallback+0x12c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fd04 	bl	8007540 <osTimerStop>
		LED_Drive(false);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fe fbf3 	bl	8001324 <LED_Drive>
 8002b3e:	e036      	b.n	8002bae <LEDTimerCallback+0xee>
	}
	else
	{
		switch(ledStateLocal)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d026      	beq.n	8002b94 <LEDTimerCallback+0xd4>
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	dc31      	bgt.n	8002bae <LEDTimerCallback+0xee>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <LEDTimerCallback+0x94>
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d013      	beq.n	8002b7a <LEDTimerCallback+0xba>
 8002b52:	e02c      	b.n	8002bae <LEDTimerCallback+0xee>
		{
			case LED_OFF:
				void AlarmOFF();
				osTimerStart(LEDTimerHandle, 3000);
 8002b54:	4b25      	ldr	r3, [pc, #148]	@ (8002bec <LEDTimerCallback+0x12c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fcaf 	bl	80074c0 <osTimerStart>
				LED_Drive(false);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe fbde 	bl	8001324 <LED_Drive>
				if(quality_status_local == true)
 8002b68:	7bbb      	ldrb	r3, [r7, #14]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <LEDTimerCallback+0xb4>
				{
					ledStateLocal = LED_ON_CORECT;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
				else
				{
					ledStateLocal = LED_ON_INCORECT;
				}

				break;
 8002b72:	e01c      	b.n	8002bae <LEDTimerCallback+0xee>
					ledStateLocal = LED_ON_INCORECT;
 8002b74:	2302      	movs	r3, #2
 8002b76:	73fb      	strb	r3, [r7, #15]
				break;
 8002b78:	e019      	b.n	8002bae <LEDTimerCallback+0xee>

			case LED_ON_CORECT:
				void AlarmON();
				LED_Drive(true);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fe fbd2 	bl	8001324 <LED_Drive>
				osTimerStart(LEDTimerHandle, 1000);
 8002b80:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <LEDTimerCallback+0x12c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fc99 	bl	80074c0 <osTimerStart>
				ledStateLocal = LED_OFF;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]

				break;
 8002b92:	e00c      	b.n	8002bae <LEDTimerCallback+0xee>

			case LED_ON_INCORECT:

				void AlarmON();
				LED_Drive(true);
 8002b94:	2001      	movs	r0, #1
 8002b96:	f7fe fbc5 	bl	8001324 <LED_Drive>
				osTimerStart(LEDTimerHandle, 500);
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <LEDTimerCallback+0x12c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 fc8c 	bl	80074c0 <osTimerStart>
				ledStateLocal = LED_OFF;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]

				break;
 8002bac:	bf00      	nop
		}
	}
	osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <LEDTimerCallback+0x124>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 fda6 	bl	8007708 <osMutexAcquire>
		ledState = ledStateLocal;
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <LEDTimerCallback+0x128>)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	7013      	strb	r3, [r2, #0]
	osMutexRelease(LED_FSM_MutexHandle);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <LEDTimerCallback+0x124>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 fdfc 	bl	80077c4 <osMutexRelease>

	//LED_Blink_MutexHandle

  /* USER CODE END LEDTimerCallback */
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200004ec 	.word	0x200004ec
 8002bd8:	200004fd 	.word	0x200004fd
 8002bdc:	200004e8 	.word	0x200004e8
 8002be0:	2000015c 	.word	0x2000015c
 8002be4:	200004f4 	.word	0x200004f4
 8002be8:	200004fe 	.word	0x200004fe
 8002bec:	200004e0 	.word	0x200004e0

08002bf0 <ButtonTimerCallback>:

/* ButtonTimerCallback function */
void ButtonTimerCallback(void *argument)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTimerCallback */
	ProgramStateFSM progStateLocal;
	uint8_t ButtonCountLocal;

	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <ButtonTimerCallback+0xc0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 fd81 	bl	8007708 <osMutexAcquire>
	ButtonCountLocal = button_press_counter;
 8002c06:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <ButtonTimerCallback+0xc4>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	73bb      	strb	r3, [r7, #14]
	osMutexRelease(ButtonCountMutexHandle);
 8002c0c:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <ButtonTimerCallback+0xc0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 fdd7 	bl	80077c4 <osMutexRelease>

	switch(ButtonCountLocal)
 8002c16:	7bbb      	ldrb	r3, [r7, #14]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d827      	bhi.n	8002c6c <ButtonTimerCallback+0x7c>
 8002c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <ButtonTimerCallback+0x34>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c3d 	.word	0x08002c3d
 8002c28:	08002c43 	.word	0x08002c43
 8002c2c:	08002c4f 	.word	0x08002c4f
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	08002c6d 	.word	0x08002c6d
 8002c38:	08002c67 	.word	0x08002c67
	{
		case 0:

			progStateLocal = P_IDLE_START;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]

			break;
 8002c40:	e014      	b.n	8002c6c <ButtonTimerCallback+0x7c>

		case 1:

			progStateLocal = P_WORK_S1;
 8002c42:	2302      	movs	r3, #2
 8002c44:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S1WorkStateMSG);
 8002c46:	481c      	ldr	r0, [pc, #112]	@ (8002cb8 <ButtonTimerCallback+0xc8>)
 8002c48:	f7fe fd46 	bl	80016d8 <UART_TransmitString>

			break;
 8002c4c:	e00e      	b.n	8002c6c <ButtonTimerCallback+0x7c>

		case 2:

			progStateLocal = P_WORK_S3;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S3WorkStateMSG);
 8002c52:	481a      	ldr	r0, [pc, #104]	@ (8002cbc <ButtonTimerCallback+0xcc>)
 8002c54:	f7fe fd40 	bl	80016d8 <UART_TransmitString>

			break;
 8002c58:	e008      	b.n	8002c6c <ButtonTimerCallback+0x7c>

		case 3:

			progStateLocal = P_WORK_S5;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S5WorkStateMSG);
 8002c5e:	4818      	ldr	r0, [pc, #96]	@ (8002cc0 <ButtonTimerCallback+0xd0>)
 8002c60:	f7fe fd3a 	bl	80016d8 <UART_TransmitString>

			break;
 8002c64:	e002      	b.n	8002c6c <ButtonTimerCallback+0x7c>

			break;

		case 5:

			progStateLocal = P_IDLE_START;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]

			break;
 8002c6a:	bf00      	nop

	}

	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002c6c:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <ButtonTimerCallback+0xc0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	4618      	mov	r0, r3
 8002c76:	f004 fd47 	bl	8007708 <osMutexAcquire>
	button_press_counter = 0;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <ButtonTimerCallback+0xc4>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
	osMutexRelease(ButtonCountMutexHandle);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <ButtonTimerCallback+0xc0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f004 fd9d 	bl	80077c4 <osMutexRelease>

    osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <ButtonTimerCallback+0xd4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 fd38 	bl	8007708 <osMutexAcquire>
    progState = progStateLocal;
 8002c98:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc8 <ButtonTimerCallback+0xd8>)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	7013      	strb	r3, [r2, #0]
	osMutexRelease(RegimeMutexHandle);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	@ (8002cc4 <ButtonTimerCallback+0xd4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fd8e 	bl	80077c4 <osMutexRelease>

   //osTimerStop(ButtonTimerHandle);
  /* USER CODE END ButtonTimerCallback */
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200004f8 	.word	0x200004f8
 8002cb4:	200004fc 	.word	0x200004fc
 8002cb8:	2000007c 	.word	0x2000007c
 8002cbc:	20000094 	.word	0x20000094
 8002cc0:	200000ac 	.word	0x200000ac
 8002cc4:	200004e8 	.word	0x200004e8
 8002cc8:	2000015c 	.word	0x2000015c

08002ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cde:	f000 faf1 	bl	80032c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40002000 	.word	0x40002000

08002cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf4:	b672      	cpsid	i
}
 8002cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <Error_Handler+0x8>

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	4a10      	ldr	r2, [pc, #64]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d26:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	210f      	movs	r1, #15
 8002d36:	f06f 0001 	mvn.w	r0, #1
 8002d3a:	f000 ff95 	bl	8003c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a21      	ldr	r2, [pc, #132]	@ (8002df0 <HAL_ADC_MspInit+0xa4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d13c      	bne.n	8002de8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d6e:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	4a20      	ldr	r2, [pc, #128]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002d74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <HAL_ADC_MspInit+0xa8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002db6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002dba:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	480b      	ldr	r0, [pc, #44]	@ (8002df8 <HAL_ADC_MspInit+0xac>)
 8002dcc:	f001 f8f2 	bl	8003fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	4806      	ldr	r0, [pc, #24]	@ (8002dfc <HAL_ADC_MspInit+0xb0>)
 8002de4:	f001 f8e6 	bl	8003fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	@ 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40012200 	.word	0x40012200
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40020000 	.word	0x40020000

08002e00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <HAL_CRC_MspInit+0x38>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10b      	bne.n	8002e2a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_CRC_MspInit+0x3c>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a09      	ldr	r2, [pc, #36]	@ (8002e3c <HAL_CRC_MspInit+0x3c>)
 8002e18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <HAL_CRC_MspInit+0x3c>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023000 	.word	0x40023000
 8002e3c:	40023800 	.word	0x40023800

08002e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0ac      	sub	sp, #176	@ 0xb0
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e58:	f107 0318 	add.w	r3, r7, #24
 8002e5c:	2284      	movs	r2, #132	@ 0x84
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f008 fdb4 	bl	800b9ce <memset>
  if(huart->Instance==USART1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a36      	ldr	r2, [pc, #216]	@ (8002f44 <HAL_UART_MspInit+0x104>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d164      	bne.n	8002f3a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e70:	2340      	movs	r3, #64	@ 0x40
 8002e72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e74:	2300      	movs	r3, #0
 8002e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e78:	f107 0318 	add.w	r3, r7, #24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 ff93 	bl	8004da8 <HAL_RCCEx_PeriphCLKConfig>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e88:	f7ff ff32 	bl	8002cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	4a2d      	ldr	r2, [pc, #180]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002e92:	f043 0310 	orr.w	r3, r3, #16
 8002e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e98:	4b2b      	ldr	r3, [pc, #172]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea4:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	4a27      	ldr	r2, [pc, #156]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	4a21      	ldr	r2, [pc, #132]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <HAL_UART_MspInit+0x108>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eec:	2307      	movs	r3, #7
 8002eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4814      	ldr	r0, [pc, #80]	@ (8002f4c <HAL_UART_MspInit+0x10c>)
 8002efa:	f001 f85b 	bl	8003fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f18:	2307      	movs	r3, #7
 8002f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f22:	4619      	mov	r1, r3
 8002f24:	480a      	ldr	r0, [pc, #40]	@ (8002f50 <HAL_UART_MspInit+0x110>)
 8002f26:	f001 f845 	bl	8003fb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2105      	movs	r1, #5
 8002f2e:	2025      	movs	r0, #37	@ 0x25
 8002f30:	f000 fe9a 	bl	8003c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f34:	2025      	movs	r0, #37	@ 0x25
 8002f36:	f000 feb3 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	37b0      	adds	r7, #176	@ 0xb0
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40011000 	.word	0x40011000
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020000 	.word	0x40020000

08002f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08e      	sub	sp, #56	@ 0x38
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002f64:	4b33      	ldr	r3, [pc, #204]	@ (8003034 <HAL_InitTick+0xe0>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <HAL_InitTick+0xe0>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f70:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <HAL_InitTick+0xe0>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f7c:	f107 0210 	add.w	r2, r7, #16
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fedc 	bl	8004d44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f96:	f001 fead 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8002f9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002f9c:	e004      	b.n	8002fa8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f9e:	f001 fea9 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002faa:	4a23      	ldr	r2, [pc, #140]	@ (8003038 <HAL_InitTick+0xe4>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	0c9b      	lsrs	r3, r3, #18
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002fb6:	4b21      	ldr	r3, [pc, #132]	@ (800303c <HAL_InitTick+0xe8>)
 8002fb8:	4a21      	ldr	r2, [pc, #132]	@ (8003040 <HAL_InitTick+0xec>)
 8002fba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <HAL_InitTick+0xe8>)
 8002fbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002fc2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <HAL_InitTick+0xe8>)
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	@ (800303c <HAL_InitTick+0xe8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_InitTick+0xe8>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_InitTick+0xe8>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002fdc:	4817      	ldr	r0, [pc, #92]	@ (800303c <HAL_InitTick+0xe8>)
 8002fde:	f002 fad3 	bl	8005588 <HAL_TIM_Base_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11b      	bne.n	8003028 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002ff0:	4812      	ldr	r0, [pc, #72]	@ (800303c <HAL_InitTick+0xe8>)
 8002ff2:	f002 fb2b 	bl	800564c <HAL_TIM_Base_Start_IT>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003000:	2b00      	cmp	r3, #0
 8003002:	d111      	bne.n	8003028 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003004:	202d      	movs	r0, #45	@ 0x2d
 8003006:	f000 fe4b 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d808      	bhi.n	8003022 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003010:	2200      	movs	r2, #0
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	202d      	movs	r0, #45	@ 0x2d
 8003016:	f000 fe27 	bl	8003c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <HAL_InitTick+0xf0>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e002      	b.n	8003028 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003028:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800302c:	4618      	mov	r0, r3
 800302e:	3738      	adds	r7, #56	@ 0x38
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	431bde83 	.word	0x431bde83
 800303c:	20000500 	.word	0x20000500
 8003040:	40002000 	.word	0x40002000
 8003044:	20000164 	.word	0x20000164

08003048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800304c:	bf00      	nop
 800304e:	e7fd      	b.n	800304c <NMI_Handler+0x4>

08003050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <HardFault_Handler+0x4>

08003058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <MemManage_Handler+0x4>

08003060 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <BusFault_Handler+0x4>

08003068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <UsageFault_Handler+0x4>

08003070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <USART1_IRQHandler+0x10>)
 8003086:	f002 fe75 	bl	8005d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	2000044c 	.word	0x2000044c

08003094 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003098:	4802      	ldr	r0, [pc, #8]	@ (80030a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800309a:	f002 fb4f 	bl	800573c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000500 	.word	0x20000500

080030a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return 1;
 80030ac:	2301      	movs	r3, #1
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <_kill>:

int _kill(int pid, int sig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030c2:	f008 fd3f 	bl	800bb44 <__errno>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2216      	movs	r2, #22
 80030ca:	601a      	str	r2, [r3, #0]
  return -1;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_exit>:

void _exit (int status)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ffe7 	bl	80030b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030ea:	bf00      	nop
 80030ec:	e7fd      	b.n	80030ea <_exit+0x12>

080030ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e00a      	b.n	8003116 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003100:	f3af 8000 	nop.w
 8003104:	4601      	mov	r1, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	60ba      	str	r2, [r7, #8]
 800310c:	b2ca      	uxtb	r2, r1
 800310e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3301      	adds	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	429a      	cmp	r2, r3
 800311c:	dbf0      	blt.n	8003100 <_read+0x12>
  }

  return len;
 800311e:	687b      	ldr	r3, [r7, #4]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e009      	b.n	800314e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	60ba      	str	r2, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	dbf1      	blt.n	800313a <_write+0x12>
  }
  return len;
 8003156:	687b      	ldr	r3, [r7, #4]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_close>:

int _close(int file)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003188:	605a      	str	r2, [r3, #4]
  return 0;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <_isatty>:

int _isatty(int file)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031d0:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <_sbrk+0x5c>)
 80031d2:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <_sbrk+0x60>)
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <_sbrk+0x64>)
 80031e6:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <_sbrk+0x68>)
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <_sbrk+0x64>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f8:	f008 fca4 	bl	800bb44 <__errno>
 80031fc:	4603      	mov	r3, r0
 80031fe:	220c      	movs	r2, #12
 8003200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e009      	b.n	800321c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003208:	4b08      	ldr	r3, [pc, #32]	@ (800322c <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800320e:	4b07      	ldr	r3, [pc, #28]	@ (800322c <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	4a05      	ldr	r2, [pc, #20]	@ (800322c <_sbrk+0x64>)
 8003218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20050000 	.word	0x20050000
 8003228:	00000400 	.word	0x00000400
 800322c:	2000054c 	.word	0x2000054c
 8003230:	20005fe0 	.word	0x20005fe0

08003234 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <SystemInit+0x20>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	4a05      	ldr	r2, [pc, #20]	@ (8003254 <SystemInit+0x20>)
 8003240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800325c:	480d      	ldr	r0, [pc, #52]	@ (8003294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800325e:	490e      	ldr	r1, [pc, #56]	@ (8003298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003260:	4a0e      	ldr	r2, [pc, #56]	@ (800329c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003264:	e002      	b.n	800326c <LoopCopyDataInit>

08003266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326a:	3304      	adds	r3, #4

0800326c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800326c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003270:	d3f9      	bcc.n	8003266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003272:	4a0b      	ldr	r2, [pc, #44]	@ (80032a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003274:	4c0b      	ldr	r4, [pc, #44]	@ (80032a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003278:	e001      	b.n	800327e <LoopFillZerobss>

0800327a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800327c:	3204      	adds	r2, #4

0800327e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003280:	d3fb      	bcc.n	800327a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003282:	f7ff ffd7 	bl	8003234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003286:	f008 fc63 	bl	800bb50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328a:	f7fe fbdb 	bl	8001a44 <main>
  bx  lr    
 800328e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003290:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003298:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 800329c:	0800f970 	.word	0x0800f970
  ldr r2, =_sbss
 80032a0:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 80032a4:	20005fe0 	.word	0x20005fe0

080032a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a8:	e7fe      	b.n	80032a8 <ADC_IRQHandler>

080032aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ae:	2003      	movs	r0, #3
 80032b0:	f000 fccf 	bl	8003c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032b4:	200f      	movs	r0, #15
 80032b6:	f7ff fe4d 	bl	8002f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ba:	f7ff fd1f 	bl	8002cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000168 	.word	0x20000168
 80032e8:	20000550 	.word	0x20000550

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000550 	.word	0x20000550

08003304 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e031      	b.n	800337e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fd12 	bl	8002d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <HAL_ADC_Init+0x84>)
 8003348:	4013      	ands	r3, r2
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fad6 	bl	8003904 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40
 800336e:	e001      	b.n	8003374 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	ffffeefd 	.word	0xffffeefd

0800338c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Start+0x1a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0ad      	b.n	8003502 <HAL_ADC_Start+0x176>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d018      	beq.n	80033ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80033cc:	4b50      	ldr	r3, [pc, #320]	@ (8003510 <HAL_ADC_Start+0x184>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a50      	ldr	r2, [pc, #320]	@ (8003514 <HAL_ADC_Start+0x188>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0c9a      	lsrs	r2, r3, #18
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033e0:	e002      	b.n	80033e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f9      	bne.n	80033e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d175      	bne.n	80034e8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003400:	4b45      	ldr	r3, [pc, #276]	@ (8003518 <HAL_ADC_Start+0x18c>)
 8003402:	4013      	ands	r3, r2
 8003404:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003422:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	d106      	bne.n	8003446 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	f023 0206 	bic.w	r2, r3, #6
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
 8003444:	e002      	b.n	800344c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800345c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800345e:	4b2f      	ldr	r3, [pc, #188]	@ (800351c <HAL_ADC_Start+0x190>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d143      	bne.n	8003500 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	e03a      	b.n	8003500 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a24      	ldr	r2, [pc, #144]	@ (8003520 <HAL_ADC_Start+0x194>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10e      	bne.n	80034b2 <HAL_ADC_Start+0x126>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80034b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80034b2:	4b1a      	ldr	r3, [pc, #104]	@ (800351c <HAL_ADC_Start+0x190>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d120      	bne.n	8003500 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a18      	ldr	r2, [pc, #96]	@ (8003524 <HAL_ADC_Start+0x198>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d11b      	bne.n	8003500 <HAL_ADC_Start+0x174>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	e00b      	b.n	8003500 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f043 0210 	orr.w	r2, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000160 	.word	0x20000160
 8003514:	431bde83 	.word	0x431bde83
 8003518:	fffff8fe 	.word	0xfffff8fe
 800351c:	40012300 	.word	0x40012300
 8003520:	40012000 	.word	0x40012000
 8003524:	40012200 	.word	0x40012200

08003528 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003544:	d113      	bne.n	800356e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003554:	d10b      	bne.n	800356e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e063      	b.n	8003636 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800356e:	f7ff febd 	bl	80032ec <HAL_GetTick>
 8003572:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003574:	e021      	b.n	80035ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d01d      	beq.n	80035ba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_ADC_PollForConversion+0x6c>
 8003584:	f7ff feb2 	bl	80032ec <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d212      	bcs.n	80035ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d00b      	beq.n	80035ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	f043 0204 	orr.w	r2, r3, #4
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e03d      	b.n	8003636 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d1d6      	bne.n	8003576 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0212 	mvn.w	r2, #18
 80035d0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d123      	bne.n	8003634 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11f      	bne.n	8003634 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1c>
 8003670:	2302      	movs	r3, #2
 8003672:	e136      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x28a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b09      	cmp	r3, #9
 8003682:	d93a      	bls.n	80036fa <HAL_ADC_ConfigChannel+0xa2>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800368c:	d035      	beq.n	80036fa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68d9      	ldr	r1, [r3, #12]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	3b1e      	subs	r3, #30
 80036a4:	2207      	movs	r2, #7
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43da      	mvns	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	400a      	ands	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a8d      	ldr	r2, [pc, #564]	@ (80038f0 <HAL_ADC_ConfigChannel+0x298>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10a      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68d9      	ldr	r1, [r3, #12]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	061a      	lsls	r2, r3, #24
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d2:	e035      	b.n	8003740 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68d9      	ldr	r1, [r3, #12]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4403      	add	r3, r0
 80036ec:	3b1e      	subs	r3, #30
 80036ee:	409a      	lsls	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036f8:	e022      	b.n	8003740 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6919      	ldr	r1, [r3, #16]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	2207      	movs	r2, #7
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43da      	mvns	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	400a      	ands	r2, r1
 800371c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6919      	ldr	r1, [r3, #16]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	4618      	mov	r0, r3
 8003730:	4603      	mov	r3, r0
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4403      	add	r3, r0
 8003736:	409a      	lsls	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d824      	bhi.n	8003792 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	3b05      	subs	r3, #5
 800375a:	221f      	movs	r2, #31
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43da      	mvns	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	400a      	ands	r2, r1
 8003768:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	4618      	mov	r0, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	3b05      	subs	r3, #5
 8003784:	fa00 f203 	lsl.w	r2, r0, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003790:	e04c      	b.n	800382c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d824      	bhi.n	80037e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	3b23      	subs	r3, #35	@ 0x23
 80037ac:	221f      	movs	r2, #31
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	400a      	ands	r2, r1
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	3b23      	subs	r3, #35	@ 0x23
 80037d6:	fa00 f203 	lsl.w	r2, r0, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80037e2:	e023      	b.n	800382c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	3b41      	subs	r3, #65	@ 0x41
 80037f6:	221f      	movs	r2, #31
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43da      	mvns	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	400a      	ands	r2, r1
 8003804:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4618      	mov	r0, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	3b41      	subs	r3, #65	@ 0x41
 8003820:	fa00 f203 	lsl.w	r2, r0, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a30      	ldr	r2, [pc, #192]	@ (80038f4 <HAL_ADC_ConfigChannel+0x29c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10a      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1f4>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800383e:	d105      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003840:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a2c      	ldr	r2, [pc, #176]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003846:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800384a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a28      	ldr	r2, [pc, #160]	@ (80038f4 <HAL_ADC_ConfigChannel+0x29c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10f      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x21e>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b12      	cmp	r3, #18
 800385c:	d10b      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800385e:	4b26      	ldr	r3, [pc, #152]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4a25      	ldr	r2, [pc, #148]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003864:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003868:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800386a:	4b23      	ldr	r3, [pc, #140]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4a22      	ldr	r2, [pc, #136]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003870:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003874:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1e      	ldr	r2, [pc, #120]	@ (80038f4 <HAL_ADC_ConfigChannel+0x29c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d12b      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x280>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1a      	ldr	r2, [pc, #104]	@ (80038f0 <HAL_ADC_ConfigChannel+0x298>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <HAL_ADC_ConfigChannel+0x23a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b11      	cmp	r3, #17
 8003890:	d122      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003892:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003898:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800389c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800389e:	4b16      	ldr	r3, [pc, #88]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a15      	ldr	r2, [pc, #84]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80038a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038a8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a10      	ldr	r2, [pc, #64]	@ (80038f0 <HAL_ADC_ConfigChannel+0x298>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d111      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80038b4:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_ADC_ConfigChannel+0x2a4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a11      	ldr	r2, [pc, #68]	@ (8003900 <HAL_ADC_ConfigChannel+0x2a8>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0c9a      	lsrs	r2, r3, #18
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038ca:	e002      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f9      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	10000012 	.word	0x10000012
 80038f4:	40012000 	.word	0x40012000
 80038f8:	40012300 	.word	0x40012300
 80038fc:	20000160 	.word	0x20000160
 8003900:	431bde83 	.word	0x431bde83

08003904 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800390c:	4b78      	ldr	r3, [pc, #480]	@ (8003af0 <ADC_Init+0x1ec>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a77      	ldr	r2, [pc, #476]	@ (8003af0 <ADC_Init+0x1ec>)
 8003912:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003916:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003918:	4b75      	ldr	r3, [pc, #468]	@ (8003af0 <ADC_Init+0x1ec>)
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4973      	ldr	r1, [pc, #460]	@ (8003af0 <ADC_Init+0x1ec>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	021a      	lsls	r2, r3, #8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800397a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003992:	4a58      	ldr	r2, [pc, #352]	@ (8003af4 <ADC_Init+0x1f0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6899      	ldr	r1, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	e00f      	b.n	80039fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0202 	bic.w	r2, r2, #2
 8003a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6899      	ldr	r1, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	005a      	lsls	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003a4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	3b01      	subs	r3, #1
 8003a58:	035a      	lsls	r2, r3, #13
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	e007      	b.n	8003a74 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	051a      	lsls	r2, r3, #20
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6899      	ldr	r1, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ab6:	025a      	lsls	r2, r3, #9
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6899      	ldr	r1, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	029a      	lsls	r2, r3, #10
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40012300 	.word	0x40012300
 8003af4:	0f000001 	.word	0x0f000001

08003af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <__NVIC_SetPriorityGrouping+0x40>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b26:	4a04      	ldr	r2, [pc, #16]	@ (8003b38 <__NVIC_SetPriorityGrouping+0x40>)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	60d3      	str	r3, [r2, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00
 8003b3c:	05fa0000 	.word	0x05fa0000

08003b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	@ (8003b94 <__NVIC_EnableIRQ+0x38>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	db0a      	blt.n	8003bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	490c      	ldr	r1, [pc, #48]	@ (8003be4 <__NVIC_SetPriority+0x4c>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc0:	e00a      	b.n	8003bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4908      	ldr	r1, [pc, #32]	@ (8003be8 <__NVIC_SetPriority+0x50>)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	761a      	strb	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e100 	.word	0xe000e100
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	@ 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f1c3 0307 	rsb	r3, r3, #7
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	bf28      	it	cs
 8003c0a:	2304      	movcs	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d902      	bls.n	8003c1c <NVIC_EncodePriority+0x30>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	e000      	b.n	8003c1e <NVIC_EncodePriority+0x32>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	401a      	ands	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c34:	f04f 31ff 	mov.w	r1, #4294967295
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43d9      	mvns	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	4313      	orrs	r3, r2
         );
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	@ 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ff4c 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7a:	f7ff ff61 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	6978      	ldr	r0, [r7, #20]
 8003c86:	f7ff ffb1 	bl	8003bec <NVIC_EncodePriority>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff80 	bl	8003b98 <__NVIC_SetPriority>
}
 8003c98:	bf00      	nop
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ff54 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e054      	b.n	8003d78 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7f5b      	ldrb	r3, [r3, #29]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff f88e 	bl	8002e00 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	791b      	ldrb	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10c      	bne.n	8003d0c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a22      	ldr	r2, [pc, #136]	@ (8003d80 <HAL_CRC_Init+0xc4>)
 8003cf8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0218 	bic.w	r2, r2, #24
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	e00c      	b.n	8003d26 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f834 	bl	8003d84 <HAL_CRCEx_Polynomial_Set>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e028      	b.n	8003d78 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	795b      	ldrb	r3, [r3, #5]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	611a      	str	r2, [r3, #16]
 8003d38:	e004      	b.n	8003d44 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6912      	ldr	r2, [r2, #16]
 8003d42:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	04c11db7 	.word	0x04c11db7

08003d84 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d94:	231f      	movs	r3, #31
 8003d96:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d98:	bf00      	nop
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1e5a      	subs	r2, r3, #1
 8003d9e:	613a      	str	r2, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_CRCEx_Polynomial_Set+0x34>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b18      	cmp	r3, #24
 8003dbc:	d846      	bhi.n	8003e4c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003e53 	.word	0x08003e53
 8003dc8:	08003e4d 	.word	0x08003e4d
 8003dcc:	08003e4d 	.word	0x08003e4d
 8003dd0:	08003e4d 	.word	0x08003e4d
 8003dd4:	08003e4d 	.word	0x08003e4d
 8003dd8:	08003e4d 	.word	0x08003e4d
 8003ddc:	08003e4d 	.word	0x08003e4d
 8003de0:	08003e4d 	.word	0x08003e4d
 8003de4:	08003e41 	.word	0x08003e41
 8003de8:	08003e4d 	.word	0x08003e4d
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	08003e4d 	.word	0x08003e4d
 8003df4:	08003e4d 	.word	0x08003e4d
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003e4d 	.word	0x08003e4d
 8003e00:	08003e4d 	.word	0x08003e4d
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e4d 	.word	0x08003e4d
 8003e0c:	08003e4d 	.word	0x08003e4d
 8003e10:	08003e4d 	.word	0x08003e4d
 8003e14:	08003e4d 	.word	0x08003e4d
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e4d 	.word	0x08003e4d
 8003e20:	08003e4d 	.word	0x08003e4d
 8003e24:	08003e29 	.word	0x08003e29
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d913      	bls.n	8003e56 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e32:	e010      	b.n	8003e56 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b07      	cmp	r3, #7
 8003e38:	d90f      	bls.n	8003e5a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e3e:	e00c      	b.n	8003e5a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d90b      	bls.n	8003e5e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e4a:	e008      	b.n	8003e5e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e006      	b.n	8003e60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e52:	bf00      	nop
 8003e54:	e004      	b.n	8003e60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e5e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 0118 	bic.w	r1, r3, #24
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e9e:	f7ff fa25 	bl	80032ec <HAL_GetTick>
 8003ea2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d008      	beq.n	8003ec2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2280      	movs	r2, #128	@ 0x80
 8003eb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e052      	b.n	8003f68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0216 	bic.w	r2, r2, #22
 8003ed0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_DMA_Abort+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0208 	bic.w	r2, r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f12:	e013      	b.n	8003f3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f14:	f7ff f9ea 	bl	80032ec <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d90c      	bls.n	8003f3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e015      	b.n	8003f68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e4      	bne.n	8003f14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	223f      	movs	r2, #63	@ 0x3f
 8003f50:	409a      	lsls	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2280      	movs	r2, #128	@ 0x80
 8003f88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e00c      	b.n	8003fa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2205      	movs	r2, #5
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	@ 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e175      	b.n	80042c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	f040 8164 	bne.w	80042ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d005      	beq.n	800400a <HAL_GPIO_Init+0x56>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d130      	bne.n	800406c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 0201 	and.w	r2, r3, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b03      	cmp	r3, #3
 8004076:	d017      	beq.n	80040a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d123      	bne.n	80040fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	220f      	movs	r2, #15
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	08da      	lsrs	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3208      	adds	r2, #8
 80040f6:	69b9      	ldr	r1, [r7, #24]
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80be 	beq.w	80042ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413e:	4b66      	ldr	r3, [pc, #408]	@ (80042d8 <HAL_GPIO_Init+0x324>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	4a65      	ldr	r2, [pc, #404]	@ (80042d8 <HAL_GPIO_Init+0x324>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004148:	6453      	str	r3, [r2, #68]	@ 0x44
 800414a:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_GPIO_Init+0x324>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004156:	4a61      	ldr	r2, [pc, #388]	@ (80042dc <HAL_GPIO_Init+0x328>)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	3302      	adds	r3, #2
 800415e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a58      	ldr	r2, [pc, #352]	@ (80042e0 <HAL_GPIO_Init+0x32c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d037      	beq.n	80041f2 <HAL_GPIO_Init+0x23e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a57      	ldr	r2, [pc, #348]	@ (80042e4 <HAL_GPIO_Init+0x330>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d031      	beq.n	80041ee <HAL_GPIO_Init+0x23a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a56      	ldr	r2, [pc, #344]	@ (80042e8 <HAL_GPIO_Init+0x334>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02b      	beq.n	80041ea <HAL_GPIO_Init+0x236>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a55      	ldr	r2, [pc, #340]	@ (80042ec <HAL_GPIO_Init+0x338>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d025      	beq.n	80041e6 <HAL_GPIO_Init+0x232>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a54      	ldr	r2, [pc, #336]	@ (80042f0 <HAL_GPIO_Init+0x33c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <HAL_GPIO_Init+0x22e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a53      	ldr	r2, [pc, #332]	@ (80042f4 <HAL_GPIO_Init+0x340>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d019      	beq.n	80041de <HAL_GPIO_Init+0x22a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a52      	ldr	r2, [pc, #328]	@ (80042f8 <HAL_GPIO_Init+0x344>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_GPIO_Init+0x226>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a51      	ldr	r2, [pc, #324]	@ (80042fc <HAL_GPIO_Init+0x348>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00d      	beq.n	80041d6 <HAL_GPIO_Init+0x222>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a50      	ldr	r2, [pc, #320]	@ (8004300 <HAL_GPIO_Init+0x34c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_GPIO_Init+0x21e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004304 <HAL_GPIO_Init+0x350>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_GPIO_Init+0x21a>
 80041ca:	2309      	movs	r3, #9
 80041cc:	e012      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041ce:	230a      	movs	r3, #10
 80041d0:	e010      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041d2:	2308      	movs	r3, #8
 80041d4:	e00e      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041d6:	2307      	movs	r3, #7
 80041d8:	e00c      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041da:	2306      	movs	r3, #6
 80041dc:	e00a      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041de:	2305      	movs	r3, #5
 80041e0:	e008      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041e2:	2304      	movs	r3, #4
 80041e4:	e006      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041e6:	2303      	movs	r3, #3
 80041e8:	e004      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041f2:	2300      	movs	r3, #0
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	f002 0203 	and.w	r2, r2, #3
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	4093      	lsls	r3, r2
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004204:	4935      	ldr	r1, [pc, #212]	@ (80042dc <HAL_GPIO_Init+0x328>)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	089b      	lsrs	r3, r3, #2
 800420a:	3302      	adds	r3, #2
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004212:	4b3d      	ldr	r3, [pc, #244]	@ (8004308 <HAL_GPIO_Init+0x354>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004236:	4a34      	ldr	r2, [pc, #208]	@ (8004308 <HAL_GPIO_Init+0x354>)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800423c:	4b32      	ldr	r3, [pc, #200]	@ (8004308 <HAL_GPIO_Init+0x354>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	43db      	mvns	r3, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004260:	4a29      	ldr	r2, [pc, #164]	@ (8004308 <HAL_GPIO_Init+0x354>)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004266:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <HAL_GPIO_Init+0x354>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800428a:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <HAL_GPIO_Init+0x354>)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <HAL_GPIO_Init+0x354>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042b4:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_GPIO_Init+0x354>)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b0f      	cmp	r3, #15
 80042c4:	f67f ae86 	bls.w	8003fd4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	3724      	adds	r7, #36	@ 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40020800 	.word	0x40020800
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40021400 	.word	0x40021400
 80042f8:	40021800 	.word	0x40021800
 80042fc:	40021c00 	.word	0x40021c00
 8004300:	40022000 	.word	0x40022000
 8004304:	40022400 	.word	0x40022400
 8004308:	40013c00 	.word	0x40013c00

0800430c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	887b      	ldrh	r3, [r7, #2]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e001      	b.n	800432e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	807b      	strh	r3, [r7, #2]
 8004348:	4613      	mov	r3, r2
 800434a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800434c:	787b      	ldrb	r3, [r7, #1]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004358:	e003      	b.n	8004362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800435a:	887b      	ldrh	r3, [r7, #2]
 800435c:	041a      	lsls	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	619a      	str	r2, [r3, #24]
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a04      	ldr	r2, [pc, #16]	@ (800438c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800437a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800437e:	6013      	str	r3, [r2, #0]
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40007000 	.word	0x40007000

08004390 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	4b23      	ldr	r3, [pc, #140]	@ (8004428 <HAL_PWREx_EnableOverDrive+0x98>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	4a22      	ldr	r2, [pc, #136]	@ (8004428 <HAL_PWREx_EnableOverDrive+0x98>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a6:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <HAL_PWREx_EnableOverDrive+0x98>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043b2:	4b1e      	ldr	r3, [pc, #120]	@ (800442c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043be:	f7fe ff95 	bl	80032ec <HAL_GetTick>
 80043c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043c4:	e009      	b.n	80043da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043c6:	f7fe ff91 	bl	80032ec <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043d4:	d901      	bls.n	80043da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e022      	b.n	8004420 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043da:	4b14      	ldr	r3, [pc, #80]	@ (800442c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e6:	d1ee      	bne.n	80043c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043e8:	4b10      	ldr	r3, [pc, #64]	@ (800442c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0f      	ldr	r2, [pc, #60]	@ (800442c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043f4:	f7fe ff7a 	bl	80032ec <HAL_GetTick>
 80043f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043fa:	e009      	b.n	8004410 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043fc:	f7fe ff76 	bl	80032ec <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800440a:	d901      	bls.n	8004410 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e007      	b.n	8004420 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004410:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800441c:	d1ee      	bne.n	80043fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	40007000 	.word	0x40007000

08004430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004438:	2300      	movs	r3, #0
 800443a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e291      	b.n	800496a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8087 	beq.w	8004562 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004454:	4b96      	ldr	r3, [pc, #600]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b04      	cmp	r3, #4
 800445e:	d00c      	beq.n	800447a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004460:	4b93      	ldr	r3, [pc, #588]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b08      	cmp	r3, #8
 800446a:	d112      	bne.n	8004492 <HAL_RCC_OscConfig+0x62>
 800446c:	4b90      	ldr	r3, [pc, #576]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004478:	d10b      	bne.n	8004492 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447a:	4b8d      	ldr	r3, [pc, #564]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d06c      	beq.n	8004560 <HAL_RCC_OscConfig+0x130>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d168      	bne.n	8004560 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e26b      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x7a>
 800449c:	4b84      	ldr	r3, [pc, #528]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a83      	ldr	r2, [pc, #524]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e02e      	b.n	8004508 <HAL_RCC_OscConfig+0xd8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x9c>
 80044b2:	4b7f      	ldr	r3, [pc, #508]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7e      	ldr	r2, [pc, #504]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b7c      	ldr	r3, [pc, #496]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7b      	ldr	r2, [pc, #492]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e01d      	b.n	8004508 <HAL_RCC_OscConfig+0xd8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0xc0>
 80044d6:	4b76      	ldr	r3, [pc, #472]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a75      	ldr	r2, [pc, #468]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b73      	ldr	r3, [pc, #460]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a72      	ldr	r2, [pc, #456]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0xd8>
 80044f0:	4b6f      	ldr	r3, [pc, #444]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a6e      	ldr	r2, [pc, #440]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	4b6c      	ldr	r3, [pc, #432]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a6b      	ldr	r2, [pc, #428]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d013      	beq.n	8004538 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fe feec 	bl	80032ec <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004518:	f7fe fee8 	bl	80032ec <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	@ 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e21f      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	4b61      	ldr	r3, [pc, #388]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0xe8>
 8004536:	e014      	b.n	8004562 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fe fed8 	bl	80032ec <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fe fed4 	bl	80032ec <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e20b      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004552:	4b57      	ldr	r3, [pc, #348]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x110>
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d069      	beq.n	8004642 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800456e:	4b50      	ldr	r3, [pc, #320]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457a:	4b4d      	ldr	r3, [pc, #308]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b08      	cmp	r3, #8
 8004584:	d11c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x190>
 8004586:	4b4a      	ldr	r3, [pc, #296]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d116      	bne.n	80045c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	4b47      	ldr	r3, [pc, #284]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_RCC_OscConfig+0x17a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e1df      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045aa:	4b41      	ldr	r3, [pc, #260]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	493d      	ldr	r1, [pc, #244]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045be:	e040      	b.n	8004642 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d023      	beq.n	8004610 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c8:	4b39      	ldr	r3, [pc, #228]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a38      	ldr	r2, [pc, #224]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe fe8a 	bl	80032ec <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fe fe86 	bl	80032ec <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e1bd      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ee:	4b30      	ldr	r3, [pc, #192]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fa:	4b2d      	ldr	r3, [pc, #180]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4929      	ldr	r1, [pc, #164]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
 800460e:	e018      	b.n	8004642 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004610:	4b27      	ldr	r3, [pc, #156]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a26      	ldr	r2, [pc, #152]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe fe66 	bl	80032ec <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004624:	f7fe fe62 	bl	80032ec <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e199      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004636:	4b1e      	ldr	r3, [pc, #120]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d038      	beq.n	80046c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d019      	beq.n	800468a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004656:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465a:	4a15      	ldr	r2, [pc, #84]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fe fe43 	bl	80032ec <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466a:	f7fe fe3f 	bl	80032ec <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e176      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467c:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800467e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x23a>
 8004688:	e01a      	b.n	80046c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468a:	4b09      	ldr	r3, [pc, #36]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 800468c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468e:	4a08      	ldr	r2, [pc, #32]	@ (80046b0 <HAL_RCC_OscConfig+0x280>)
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fe fe29 	bl	80032ec <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469e:	f7fe fe25 	bl	80032ec <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d903      	bls.n	80046b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e15c      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
 80046b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b4:	4b91      	ldr	r3, [pc, #580]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ee      	bne.n	800469e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a4 	beq.w	8004816 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b8b      	ldr	r3, [pc, #556]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	4b88      	ldr	r3, [pc, #544]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	4a87      	ldr	r2, [pc, #540]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e6:	4b85      	ldr	r3, [pc, #532]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f6:	4b82      	ldr	r3, [pc, #520]	@ (8004900 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d118      	bne.n	8004734 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004702:	4b7f      	ldr	r3, [pc, #508]	@ (8004900 <HAL_RCC_OscConfig+0x4d0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a7e      	ldr	r2, [pc, #504]	@ (8004900 <HAL_RCC_OscConfig+0x4d0>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800470c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470e:	f7fe fded 	bl	80032ec <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004716:	f7fe fde9 	bl	80032ec <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b64      	cmp	r3, #100	@ 0x64
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e120      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004728:	4b75      	ldr	r3, [pc, #468]	@ (8004900 <HAL_RCC_OscConfig+0x4d0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x31a>
 800473c:	4b6f      	ldr	r3, [pc, #444]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004740:	4a6e      	ldr	r2, [pc, #440]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6713      	str	r3, [r2, #112]	@ 0x70
 8004748:	e02d      	b.n	80047a6 <HAL_RCC_OscConfig+0x376>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x33c>
 8004752:	4b6a      	ldr	r3, [pc, #424]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	4a69      	ldr	r2, [pc, #420]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70
 800475e:	4b67      	ldr	r3, [pc, #412]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	4a66      	ldr	r2, [pc, #408]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	6713      	str	r3, [r2, #112]	@ 0x70
 800476a:	e01c      	b.n	80047a6 <HAL_RCC_OscConfig+0x376>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d10c      	bne.n	800478e <HAL_RCC_OscConfig+0x35e>
 8004774:	4b61      	ldr	r3, [pc, #388]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	4a60      	ldr	r2, [pc, #384]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004780:	4b5e      	ldr	r3, [pc, #376]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004784:	4a5d      	ldr	r2, [pc, #372]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	@ 0x70
 800478c:	e00b      	b.n	80047a6 <HAL_RCC_OscConfig+0x376>
 800478e:	4b5b      	ldr	r3, [pc, #364]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	4a5a      	ldr	r2, [pc, #360]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70
 800479a:	4b58      	ldr	r3, [pc, #352]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4a57      	ldr	r2, [pc, #348]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d015      	beq.n	80047da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fe fd9d 	bl	80032ec <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe fd99 	bl	80032ec <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0ce      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	4b4b      	ldr	r3, [pc, #300]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ee      	beq.n	80047b6 <HAL_RCC_OscConfig+0x386>
 80047d8:	e014      	b.n	8004804 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fe fd87 	bl	80032ec <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fe fd83 	bl	80032ec <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0b8      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f8:	4b40      	ldr	r3, [pc, #256]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ee      	bne.n	80047e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004804:	7dfb      	ldrb	r3, [r7, #23]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4b3c      	ldr	r3, [pc, #240]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	4a3b      	ldr	r2, [pc, #236]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80a4 	beq.w	8004968 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004820:	4b36      	ldr	r3, [pc, #216]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 030c 	and.w	r3, r3, #12
 8004828:	2b08      	cmp	r3, #8
 800482a:	d06b      	beq.n	8004904 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d149      	bne.n	80048c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004834:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a30      	ldr	r2, [pc, #192]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800483a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800483e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fe fd54 	bl	80032ec <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004848:	f7fe fd50 	bl	80032ec <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e087      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	4b28      	ldr	r3, [pc, #160]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	019b      	lsls	r3, r3, #6
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	3b01      	subs	r3, #1
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	4313      	orrs	r3, r2
 800488c:	4a1b      	ldr	r2, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800488e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004892:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004894:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a18      	ldr	r2, [pc, #96]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800489a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800489e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe fd24 	bl	80032ec <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe fd20 	bl	80032ec <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e057      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x478>
 80048c6:	e04f      	b.n	8004968 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0b      	ldr	r2, [pc, #44]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80048ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fe fd0a 	bl	80032ec <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fe fd06 	bl	80032ec <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e03d      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x4ac>
 80048fa:	e035      	b.n	8004968 <HAL_RCC_OscConfig+0x538>
 80048fc:	40023800 	.word	0x40023800
 8004900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004904:	4b1b      	ldr	r3, [pc, #108]	@ (8004974 <HAL_RCC_OscConfig+0x544>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d028      	beq.n	8004964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d121      	bne.n	8004964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d11a      	bne.n	8004964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800493a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800493c:	4293      	cmp	r3, r2
 800493e:	d111      	bne.n	8004964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	3b01      	subs	r3, #1
 800494e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d107      	bne.n	8004964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800

08004978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0d0      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b6a      	ldr	r3, [pc, #424]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d910      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b67      	ldr	r3, [pc, #412]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 020f 	bic.w	r2, r3, #15
 80049a6:	4965      	ldr	r1, [pc, #404]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b63      	ldr	r3, [pc, #396]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0b8      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d8:	4b59      	ldr	r3, [pc, #356]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a58      	ldr	r2, [pc, #352]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f0:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 80049f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fc:	4b50      	ldr	r3, [pc, #320]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	494d      	ldr	r1, [pc, #308]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d040      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a22:	4b47      	ldr	r3, [pc, #284]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d115      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	4b41      	ldr	r3, [pc, #260]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e073      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06b      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4936      	ldr	r1, [pc, #216]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fe fc3e 	bl	80032ec <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fe fc3a 	bl	80032ec <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e053      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1eb      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b27      	ldr	r3, [pc, #156]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d210      	bcs.n	8004acc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 020f 	bic.w	r2, r3, #15
 8004ab2:	4922      	ldr	r1, [pc, #136]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e032      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4916      	ldr	r1, [pc, #88]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	490e      	ldr	r1, [pc, #56]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b0a:	f000 f821 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	490a      	ldr	r1, [pc, #40]	@ (8004b44 <HAL_RCC_ClockConfig+0x1cc>)
 8004b1c:	5ccb      	ldrb	r3, [r1, r3]
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <HAL_RCC_ClockConfig+0x1d0>)
 8004b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b26:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <HAL_RCC_ClockConfig+0x1d4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fa12 	bl	8002f54 <HAL_InitTick>

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023c00 	.word	0x40023c00
 8004b40:	40023800 	.word	0x40023800
 8004b44:	0800f518 	.word	0x0800f518
 8004b48:	20000160 	.word	0x20000160
 8004b4c:	20000164 	.word	0x20000164

08004b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b54:	b090      	sub	sp, #64	@ 0x40
 8004b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b60:	2300      	movs	r3, #0
 8004b62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b68:	4b59      	ldr	r3, [pc, #356]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d00d      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x40>
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	f200 80a1 	bhi.w	8004cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x34>
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d003      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b82:	e09b      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b84:	4b53      	ldr	r3, [pc, #332]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b88:	e09b      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b8a:	4b53      	ldr	r3, [pc, #332]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b8e:	e098      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b90:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d028      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	2200      	movs	r2, #0
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4b47      	ldr	r3, [pc, #284]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bbc:	fb03 f201 	mul.w	r2, r3, r1
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	fb00 f303 	mul.w	r3, r0, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	4a43      	ldr	r2, [pc, #268]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bca:	fba0 1202 	umull	r1, r2, r0, r2
 8004bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd6:	4413      	add	r3, r2
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bdc:	2200      	movs	r2, #0
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	61fa      	str	r2, [r7, #28]
 8004be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004bea:	f7fc f87d 	bl	8000ce8 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf6:	e053      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf8:	4b35      	ldr	r3, [pc, #212]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	2200      	movs	r2, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	617a      	str	r2, [r7, #20]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c0a:	f04f 0b00 	mov.w	fp, #0
 8004c0e:	4652      	mov	r2, sl
 8004c10:	465b      	mov	r3, fp
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	0159      	lsls	r1, r3, #5
 8004c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c20:	0150      	lsls	r0, r2, #5
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	ebb2 080a 	subs.w	r8, r2, sl
 8004c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c42:	ebb2 0408 	subs.w	r4, r2, r8
 8004c46:	eb63 0509 	sbc.w	r5, r3, r9
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	00eb      	lsls	r3, r5, #3
 8004c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c58:	00e2      	lsls	r2, r4, #3
 8004c5a:	4614      	mov	r4, r2
 8004c5c:	461d      	mov	r5, r3
 8004c5e:	eb14 030a 	adds.w	r3, r4, sl
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	eb45 030b 	adc.w	r3, r5, fp
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c76:	4629      	mov	r1, r5
 8004c78:	028b      	lsls	r3, r1, #10
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c80:	4621      	mov	r1, r4
 8004c82:	028a      	lsls	r2, r1, #10
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	60fa      	str	r2, [r7, #12]
 8004c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c94:	f7fc f828 	bl	8000ce8 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	3301      	adds	r3, #1
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004cb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cba:	e002      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3740      	adds	r7, #64	@ 0x40
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	017d7840 	.word	0x017d7840

08004cdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000160 	.word	0x20000160

08004cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf8:	f7ff fff0 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0a9b      	lsrs	r3, r3, #10
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4903      	ldr	r1, [pc, #12]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40023800 	.word	0x40023800
 8004d18:	0800f528 	.word	0x0800f528

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d20:	f7ff ffdc 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0b5b      	lsrs	r3, r3, #13
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4903      	ldr	r1, [pc, #12]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	0800f528 	.word	0x0800f528

08004d44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	220f      	movs	r2, #15
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d54:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0203 	and.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d60:	4b0f      	ldr	r3, [pc, #60]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d78:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d86:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <HAL_RCC_GetClockConfig+0x60>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 020f 	and.w	r2, r3, #15
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	601a      	str	r2, [r3, #0]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40023c00 	.word	0x40023c00

08004da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dd0:	4b69      	ldr	r3, [pc, #420]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a68      	ldr	r2, [pc, #416]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	4b66      	ldr	r3, [pc, #408]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de4:	4964      	ldr	r1, [pc, #400]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d017      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e02:	4b5d      	ldr	r3, [pc, #372]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e08:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e10:	4959      	ldr	r1, [pc, #356]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e20:	d101      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d017      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	494a      	ldr	r1, [pc, #296]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 808b 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	4a39      	ldr	r2, [pc, #228]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e98:	4b37      	ldr	r3, [pc, #220]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ea4:	4b35      	ldr	r3, [pc, #212]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a34      	ldr	r2, [pc, #208]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb0:	f7fe fa1c 	bl	80032ec <HAL_GetTick>
 8004eb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fe fa18 	bl	80032ec <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b64      	cmp	r3, #100	@ 0x64
 8004ec4:	d901      	bls.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e357      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eca:	4b2c      	ldr	r3, [pc, #176]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed6:	4b28      	ldr	r3, [pc, #160]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ede:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d035      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d02e      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef4:	4b20      	ldr	r3, [pc, #128]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004efe:	4b1e      	ldr	r3, [pc, #120]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	4a1d      	ldr	r2, [pc, #116]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f08:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f16:	4a18      	ldr	r2, [pc, #96]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f1c:	4b16      	ldr	r3, [pc, #88]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d114      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fe f9e0 	bl	80032ec <HAL_GetTick>
 8004f2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f30:	f7fe f9dc 	bl	80032ec <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e319      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f46:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0ee      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f5e:	d111      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f60:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f6c:	4b04      	ldr	r3, [pc, #16]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f6e:	400b      	ands	r3, r1
 8004f70:	4901      	ldr	r1, [pc, #4]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
 8004f76:	e00b      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	0ffffcff 	.word	0x0ffffcff
 8004f84:	4baa      	ldr	r3, [pc, #680]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4aa9      	ldr	r2, [pc, #676]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f8e:	6093      	str	r3, [r2, #8]
 8004f90:	4ba7      	ldr	r3, [pc, #668]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9c:	49a4      	ldr	r1, [pc, #656]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fae:	4ba0      	ldr	r3, [pc, #640]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb4:	4a9e      	ldr	r2, [pc, #632]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004fbe:	4b9c      	ldr	r3, [pc, #624]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc8:	4999      	ldr	r1, [pc, #612]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fdc:	4b94      	ldr	r3, [pc, #592]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fea:	4991      	ldr	r1, [pc, #580]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ffe:	4b8c      	ldr	r3, [pc, #560]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005004:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500c:	4988      	ldr	r1, [pc, #544]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005020:	4b83      	ldr	r3, [pc, #524]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005026:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502e:	4980      	ldr	r1, [pc, #512]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005042:	4b7b      	ldr	r3, [pc, #492]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005048:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005050:	4977      	ldr	r1, [pc, #476]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005064:	4b72      	ldr	r3, [pc, #456]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	f023 0203 	bic.w	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005072:	496f      	ldr	r1, [pc, #444]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005086:	4b6a      	ldr	r3, [pc, #424]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508c:	f023 020c 	bic.w	r2, r3, #12
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005094:	4966      	ldr	r1, [pc, #408]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050a8:	4b61      	ldr	r3, [pc, #388]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b6:	495e      	ldr	r1, [pc, #376]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ca:	4b59      	ldr	r3, [pc, #356]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d8:	4955      	ldr	r1, [pc, #340]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050ec:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	494d      	ldr	r1, [pc, #308]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800510e:	4b48      	ldr	r3, [pc, #288]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005114:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511c:	4944      	ldr	r1, [pc, #272]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005130:	4b3f      	ldr	r3, [pc, #252]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005136:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513e:	493c      	ldr	r1, [pc, #240]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005152:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005158:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005160:	4933      	ldr	r1, [pc, #204]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005174:	4b2e      	ldr	r3, [pc, #184]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005182:	492b      	ldr	r1, [pc, #172]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d011      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005196:	4b26      	ldr	r3, [pc, #152]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051a4:	4922      	ldr	r1, [pc, #136]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b4:	d101      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d6:	4b16      	ldr	r3, [pc, #88]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e4:	4912      	ldr	r1, [pc, #72]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005208:	4909      	ldr	r1, [pc, #36]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d006      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80d9 	beq.w	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005224:	4b02      	ldr	r3, [pc, #8]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a01      	ldr	r2, [pc, #4]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800522e:	e001      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005230:	40023800 	.word	0x40023800
 8005234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005236:	f7fe f859 	bl	80032ec <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800523e:	f7fe f855 	bl	80032ec <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b64      	cmp	r3, #100	@ 0x64
 800524a:	d901      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e194      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005250:	4b6c      	ldr	r3, [pc, #432]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d021      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526c:	2b00      	cmp	r3, #0
 800526e:	d11d      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005270:	4b64      	ldr	r3, [pc, #400]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800527e:	4b61      	ldr	r3, [pc, #388]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005284:	0e1b      	lsrs	r3, r3, #24
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	019a      	lsls	r2, r3, #6
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	431a      	orrs	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	071b      	lsls	r3, r3, #28
 80052a4:	4957      	ldr	r1, [pc, #348]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d004      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d02e      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052d6:	d129      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052e6:	4b47      	ldr	r3, [pc, #284]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ec:	0f1b      	lsrs	r3, r3, #28
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	019a      	lsls	r2, r3, #6
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	071b      	lsls	r3, r3, #28
 800530c:	493d      	ldr	r1, [pc, #244]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005314:	4b3b      	ldr	r3, [pc, #236]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800531a:	f023 021f 	bic.w	r2, r3, #31
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	3b01      	subs	r3, #1
 8005324:	4937      	ldr	r1, [pc, #220]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01d      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005338:	4b32      	ldr	r3, [pc, #200]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533e:	0e1b      	lsrs	r3, r3, #24
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005346:	4b2f      	ldr	r3, [pc, #188]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800534c:	0f1b      	lsrs	r3, r3, #28
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	019a      	lsls	r2, r3, #6
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	431a      	orrs	r2, r3
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	431a      	orrs	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	071b      	lsls	r3, r3, #28
 800536c:	4925      	ldr	r1, [pc, #148]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d011      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	019a      	lsls	r2, r3, #6
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	061b      	lsls	r3, r3, #24
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	071b      	lsls	r3, r3, #28
 800539c:	4919      	ldr	r1, [pc, #100]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053a4:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b0:	f7fd ff9c 	bl	80032ec <HAL_GetTick>
 80053b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053b8:	f7fd ff98 	bl	80032ec <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	@ 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0d7      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f040 80cd 	bne.w	8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053de:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a08      	ldr	r2, [pc, #32]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ea:	f7fd ff7f 	bl	80032ec <HAL_GetTick>
 80053ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053f0:	e00a      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053f2:	f7fd ff7b 	bl	80032ec <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b64      	cmp	r3, #100	@ 0x64
 80053fe:	d903      	bls.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e0ba      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005404:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005408:	4b5e      	ldr	r3, [pc, #376]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005414:	d0ed      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02e      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d12a      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800543e:	4b51      	ldr	r3, [pc, #324]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800544c:	4b4d      	ldr	r3, [pc, #308]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	0f1b      	lsrs	r3, r3, #28
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	019a      	lsls	r2, r3, #6
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	061b      	lsls	r3, r3, #24
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	071b      	lsls	r3, r3, #28
 8005472:	4944      	ldr	r1, [pc, #272]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800547a:	4b42      	ldr	r3, [pc, #264]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800547c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005480:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	3b01      	subs	r3, #1
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	493d      	ldr	r1, [pc, #244]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d022      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a8:	d11d      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054aa:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b0:	0e1b      	lsrs	r3, r3, #24
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054b8:	4b32      	ldr	r3, [pc, #200]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	0f1b      	lsrs	r3, r3, #28
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	019a      	lsls	r2, r3, #6
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	431a      	orrs	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	431a      	orrs	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	4929      	ldr	r1, [pc, #164]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d028      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054f2:	4b24      	ldr	r3, [pc, #144]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f8:	0e1b      	lsrs	r3, r3, #24
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005500:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	0c1b      	lsrs	r3, r3, #16
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	019a      	lsls	r2, r3, #6
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	431a      	orrs	r2, r3
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	061b      	lsls	r3, r3, #24
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	071b      	lsls	r3, r3, #28
 8005526:	4917      	ldr	r1, [pc, #92]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800552e:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005534:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	4911      	ldr	r1, [pc, #68]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005544:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0e      	ldr	r2, [pc, #56]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005550:	f7fd fecc 	bl	80032ec <HAL_GetTick>
 8005554:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005556:	e008      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005558:	f7fd fec8 	bl	80032ec <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	@ 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e007      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005576:	d1ef      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800

08005588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e049      	b.n	800562e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f841 	bl	8005636 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f000 fa00 	bl	80059cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e054      	b.n	800570e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a26      	ldr	r2, [pc, #152]	@ (800571c <HAL_TIM_Base_Start_IT+0xd0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d022      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x80>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568e:	d01d      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x80>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a22      	ldr	r2, [pc, #136]	@ (8005720 <HAL_TIM_Base_Start_IT+0xd4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x80>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	@ (8005724 <HAL_TIM_Base_Start_IT+0xd8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005728 <HAL_TIM_Base_Start_IT+0xdc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x80>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	@ (800572c <HAL_TIM_Base_Start_IT+0xe0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x80>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <HAL_TIM_Base_Start_IT+0xe4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x80>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005734 <HAL_TIM_Base_Start_IT+0xe8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d115      	bne.n	80056f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	4b19      	ldr	r3, [pc, #100]	@ (8005738 <HAL_TIM_Base_Start_IT+0xec>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d015      	beq.n	800570a <HAL_TIM_Base_Start_IT+0xbe>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e4:	d011      	beq.n	800570a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	e008      	b.n	800570a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e000      	b.n	800570c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40010400 	.word	0x40010400
 8005730:	40014000 	.word	0x40014000
 8005734:	40001800 	.word	0x40001800
 8005738:	00010007 	.word	0x00010007

0800573c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	d122      	bne.n	8005798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b02      	cmp	r3, #2
 800575e:	d11b      	bne.n	8005798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0202 	mvn.w	r2, #2
 8005768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f905 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8f7 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f908 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d122      	bne.n	80057ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d11b      	bne.n	80057ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0204 	mvn.w	r2, #4
 80057bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8db 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8cd 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8de 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0208 	mvn.w	r2, #8
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2204      	movs	r2, #4
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8b1 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8a3 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f8b4 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b10      	cmp	r3, #16
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0210 	mvn.w	r2, #16
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2208      	movs	r2, #8
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f887 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f879 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f88a 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d10e      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d107      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0201 	mvn.w	r2, #1
 80058b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fd fa06 	bl	8002ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ca:	2b80      	cmp	r3, #128	@ 0x80
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d8:	2b80      	cmp	r3, #128	@ 0x80
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f91a 	bl	8005b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058fa:	d10e      	bne.n	800591a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b80      	cmp	r3, #128	@ 0x80
 8005908:	d107      	bne.n	800591a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f90d 	bl	8005b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b40      	cmp	r3, #64	@ 0x40
 8005926:	d10e      	bne.n	8005946 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	d107      	bne.n	8005946 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800593e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f838 	bl	80059b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b20      	cmp	r3, #32
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0220 	mvn.w	r2, #32
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f8cd 	bl	8005b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a40      	ldr	r2, [pc, #256]	@ (8005ae0 <TIM_Base_SetConfig+0x114>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3d      	ldr	r2, [pc, #244]	@ (8005ae4 <TIM_Base_SetConfig+0x118>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae8 <TIM_Base_SetConfig+0x11c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3b      	ldr	r2, [pc, #236]	@ (8005aec <TIM_Base_SetConfig+0x120>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3a      	ldr	r2, [pc, #232]	@ (8005af0 <TIM_Base_SetConfig+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae0 <TIM_Base_SetConfig+0x114>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d02b      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2c:	d027      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae4 <TIM_Base_SetConfig+0x118>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d023      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae8 <TIM_Base_SetConfig+0x11c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01f      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2a      	ldr	r2, [pc, #168]	@ (8005aec <TIM_Base_SetConfig+0x120>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01b      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <TIM_Base_SetConfig+0x124>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d017      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a28      	ldr	r2, [pc, #160]	@ (8005af4 <TIM_Base_SetConfig+0x128>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a27      	ldr	r2, [pc, #156]	@ (8005af8 <TIM_Base_SetConfig+0x12c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00f      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a26      	ldr	r2, [pc, #152]	@ (8005afc <TIM_Base_SetConfig+0x130>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a25      	ldr	r2, [pc, #148]	@ (8005b00 <TIM_Base_SetConfig+0x134>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a24      	ldr	r2, [pc, #144]	@ (8005b04 <TIM_Base_SetConfig+0x138>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a23      	ldr	r2, [pc, #140]	@ (8005b08 <TIM_Base_SetConfig+0x13c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae0 <TIM_Base_SetConfig+0x114>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0xf8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0c      	ldr	r2, [pc, #48]	@ (8005af0 <TIM_Base_SetConfig+0x124>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d103      	bne.n	8005acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	615a      	str	r2, [r3, #20]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800
 8005b00:	40001800 	.word	0x40001800
 8005b04:	40001c00 	.word	0x40001c00
 8005b08:	40002000 	.word	0x40002000

08005b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e040      	b.n	8005bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fd f968 	bl	8002e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2224      	movs	r2, #36	@ 0x24
 8005b74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fbe6 	bl	8006358 <UART_SetConfig>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e022      	b.n	8005bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fe3e 	bl	8006820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fec5 	bl	8006964 <UART_CheckIdleState>
 8005bda:	4603      	mov	r3, r0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	@ 0x28
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d171      	bne.n	8005ce0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_UART_Transmit+0x24>
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e06a      	b.n	8005ce2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2221      	movs	r2, #33	@ 0x21
 8005c18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c1a:	f7fd fb67 	bl	80032ec <HAL_GetTick>
 8005c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c38:	d108      	bne.n	8005c4c <HAL_UART_Transmit+0x68>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e003      	b.n	8005c54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c54:	e02c      	b.n	8005cb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2180      	movs	r1, #128	@ 0x80
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 feb6 	bl	80069d2 <UART_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e038      	b.n	8005ce2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10b      	bne.n	8005c8e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	3302      	adds	r3, #2
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e007      	b.n	8005c9e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1cc      	bne.n	8005c56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2140      	movs	r1, #64	@ 0x40
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fe83 	bl	80069d2 <UART_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e005      	b.n	8005ce2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b08a      	sub	sp, #40	@ 0x28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d132      	bne.n	8005d68 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_UART_Receive_IT+0x24>
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e02b      	b.n	8005d6a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d018      	beq.n	8005d58 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	613b      	str	r3, [r7, #16]
   return(result);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	6a3a      	ldr	r2, [r7, #32]
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e6      	bne.n	8005d26 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fefe 	bl	8006b60 <UART_Start_Receive_IT>
 8005d64:	4603      	mov	r3, r0
 8005d66:	e000      	b.n	8005d6a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3728      	adds	r7, #40	@ 0x28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b0ba      	sub	sp, #232	@ 0xe8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005da2:	4013      	ands	r3, r2
 8005da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d115      	bne.n	8005ddc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00f      	beq.n	8005ddc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d009      	beq.n	8005ddc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8297 	beq.w	8006300 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4798      	blx	r3
      }
      return;
 8005dda:	e291      	b.n	8006300 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8117 	beq.w	8006014 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005df2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005df6:	4b85      	ldr	r3, [pc, #532]	@ (800600c <HAL_UART_IRQHandler+0x298>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 810a 	beq.w	8006014 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d011      	beq.n	8005e30 <HAL_UART_IRQHandler+0xbc>
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e26:	f043 0201 	orr.w	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d011      	beq.n	8005e60 <HAL_UART_IRQHandler+0xec>
 8005e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e56:	f043 0204 	orr.w	r2, r3, #4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d011      	beq.n	8005e90 <HAL_UART_IRQHandler+0x11c>
 8005e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d017      	beq.n	8005ecc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2208      	movs	r2, #8
 8005eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec2:	f043 0208 	orr.w	r2, r3, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d012      	beq.n	8005efe <HAL_UART_IRQHandler+0x18a>
 8005ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005edc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00c      	beq.n	8005efe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ef4:	f043 0220 	orr.w	r2, r3, #32
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 81fd 	beq.w	8006304 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d005      	beq.n	8005f56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d04f      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fec8 	bl	8006cec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f66:	2b40      	cmp	r3, #64	@ 0x40
 8005f68:	d141      	bne.n	8005fee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3308      	adds	r3, #8
 8005f92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1d9      	bne.n	8005f6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d013      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc2:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <HAL_UART_IRQHandler+0x29c>)
 8005fc4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd ffd0 	bl	8003f70 <HAL_DMA_Abort_IT>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d017      	beq.n	8006006 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e00f      	b.n	8006006 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9a0 	bl	800632c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	e00b      	b.n	8006006 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f99c 	bl	800632c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	e007      	b.n	8006006 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f998 	bl	800632c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006004:	e17e      	b.n	8006304 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006006:	bf00      	nop
    return;
 8006008:	e17c      	b.n	8006304 <HAL_UART_IRQHandler+0x590>
 800600a:	bf00      	nop
 800600c:	04000120 	.word	0x04000120
 8006010:	08006db5 	.word	0x08006db5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006018:	2b01      	cmp	r3, #1
 800601a:	f040 814c 	bne.w	80062b6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8145 	beq.w	80062b6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 813e 	beq.w	80062b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2210      	movs	r2, #16
 8006040:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604c:	2b40      	cmp	r3, #64	@ 0x40
 800604e:	f040 80b6 	bne.w	80061be <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800605e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8150 	beq.w	8006308 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800606e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006072:	429a      	cmp	r2, r3
 8006074:	f080 8148 	bcs.w	8006308 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800607e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800608c:	f000 8086 	beq.w	800619c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1da      	bne.n	8006090 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3308      	adds	r3, #8
 80060fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006102:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006106:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e1      	bne.n	80060da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3308      	adds	r3, #8
 800611c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800612c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800613a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800613c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006140:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e3      	bne.n	8006116 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800616a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800616c:	f023 0310 	bic.w	r3, r3, #16
 8006170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800617e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006180:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800618c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e4      	bne.n	800615c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd fe7a 	bl	8003e90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8c2 	bl	8006340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061bc:	e0a4      	b.n	8006308 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8096 	beq.w	800630c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80061e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8091 	beq.w	800630c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800620c:	647b      	str	r3, [r7, #68]	@ 0x44
 800620e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800621a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e4      	bne.n	80061ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	e853 3f00 	ldrex	r3, [r3]
 800622e:	623b      	str	r3, [r7, #32]
   return(result);
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006244:	633a      	str	r2, [r7, #48]	@ 0x30
 8006246:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800624a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e3      	bne.n	8006220 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	60fb      	str	r3, [r7, #12]
   return(result);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f023 0310 	bic.w	r3, r3, #16
 8006280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	69b9      	ldr	r1, [r7, #24]
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	617b      	str	r3, [r7, #20]
   return(result);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e4      	bne.n	800626c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f846 	bl	8006340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062b4:	e02a      	b.n	800630c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01c      	beq.n	8006310 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
    }
    return;
 80062de:	e017      	b.n	8006310 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d012      	beq.n	8006312 <HAL_UART_IRQHandler+0x59e>
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00c      	beq.n	8006312 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fd71 	bl	8006de0 <UART_EndTransmit_IT>
    return;
 80062fe:	e008      	b.n	8006312 <HAL_UART_IRQHandler+0x59e>
      return;
 8006300:	bf00      	nop
 8006302:	e006      	b.n	8006312 <HAL_UART_IRQHandler+0x59e>
    return;
 8006304:	bf00      	nop
 8006306:	e004      	b.n	8006312 <HAL_UART_IRQHandler+0x59e>
      return;
 8006308:	bf00      	nop
 800630a:	e002      	b.n	8006312 <HAL_UART_IRQHandler+0x59e>
      return;
 800630c:	bf00      	nop
 800630e:	e000      	b.n	8006312 <HAL_UART_IRQHandler+0x59e>
    return;
 8006310:	bf00      	nop
  }

}
 8006312:	37e8      	adds	r7, #232	@ 0xe8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4ba6      	ldr	r3, [pc, #664]	@ (800661c <UART_SetConfig+0x2c4>)
 8006384:	4013      	ands	r3, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	6979      	ldr	r1, [r7, #20]
 800638c:	430b      	orrs	r3, r1
 800638e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a94      	ldr	r2, [pc, #592]	@ (8006620 <UART_SetConfig+0x2c8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d120      	bne.n	8006416 <UART_SetConfig+0xbe>
 80063d4:	4b93      	ldr	r3, [pc, #588]	@ (8006624 <UART_SetConfig+0x2cc>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d816      	bhi.n	8006410 <UART_SetConfig+0xb8>
 80063e2:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <UART_SetConfig+0x90>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	08006405 	.word	0x08006405
 80063f0:	080063ff 	.word	0x080063ff
 80063f4:	0800640b 	.word	0x0800640b
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e150      	b.n	80066a0 <UART_SetConfig+0x348>
 80063fe:	2302      	movs	r3, #2
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e14d      	b.n	80066a0 <UART_SetConfig+0x348>
 8006404:	2304      	movs	r3, #4
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e14a      	b.n	80066a0 <UART_SetConfig+0x348>
 800640a:	2308      	movs	r3, #8
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e147      	b.n	80066a0 <UART_SetConfig+0x348>
 8006410:	2310      	movs	r3, #16
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e144      	b.n	80066a0 <UART_SetConfig+0x348>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a83      	ldr	r2, [pc, #524]	@ (8006628 <UART_SetConfig+0x2d0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d132      	bne.n	8006486 <UART_SetConfig+0x12e>
 8006420:	4b80      	ldr	r3, [pc, #512]	@ (8006624 <UART_SetConfig+0x2cc>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006426:	f003 030c 	and.w	r3, r3, #12
 800642a:	2b0c      	cmp	r3, #12
 800642c:	d828      	bhi.n	8006480 <UART_SetConfig+0x128>
 800642e:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <UART_SetConfig+0xdc>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006469 	.word	0x08006469
 8006438:	08006481 	.word	0x08006481
 800643c:	08006481 	.word	0x08006481
 8006440:	08006481 	.word	0x08006481
 8006444:	08006475 	.word	0x08006475
 8006448:	08006481 	.word	0x08006481
 800644c:	08006481 	.word	0x08006481
 8006450:	08006481 	.word	0x08006481
 8006454:	0800646f 	.word	0x0800646f
 8006458:	08006481 	.word	0x08006481
 800645c:	08006481 	.word	0x08006481
 8006460:	08006481 	.word	0x08006481
 8006464:	0800647b 	.word	0x0800647b
 8006468:	2300      	movs	r3, #0
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e118      	b.n	80066a0 <UART_SetConfig+0x348>
 800646e:	2302      	movs	r3, #2
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e115      	b.n	80066a0 <UART_SetConfig+0x348>
 8006474:	2304      	movs	r3, #4
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e112      	b.n	80066a0 <UART_SetConfig+0x348>
 800647a:	2308      	movs	r3, #8
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e10f      	b.n	80066a0 <UART_SetConfig+0x348>
 8006480:	2310      	movs	r3, #16
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e10c      	b.n	80066a0 <UART_SetConfig+0x348>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a68      	ldr	r2, [pc, #416]	@ (800662c <UART_SetConfig+0x2d4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d120      	bne.n	80064d2 <UART_SetConfig+0x17a>
 8006490:	4b64      	ldr	r3, [pc, #400]	@ (8006624 <UART_SetConfig+0x2cc>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006496:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800649a:	2b30      	cmp	r3, #48	@ 0x30
 800649c:	d013      	beq.n	80064c6 <UART_SetConfig+0x16e>
 800649e:	2b30      	cmp	r3, #48	@ 0x30
 80064a0:	d814      	bhi.n	80064cc <UART_SetConfig+0x174>
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	d009      	beq.n	80064ba <UART_SetConfig+0x162>
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d810      	bhi.n	80064cc <UART_SetConfig+0x174>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <UART_SetConfig+0x15c>
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d006      	beq.n	80064c0 <UART_SetConfig+0x168>
 80064b2:	e00b      	b.n	80064cc <UART_SetConfig+0x174>
 80064b4:	2300      	movs	r3, #0
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e0f2      	b.n	80066a0 <UART_SetConfig+0x348>
 80064ba:	2302      	movs	r3, #2
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e0ef      	b.n	80066a0 <UART_SetConfig+0x348>
 80064c0:	2304      	movs	r3, #4
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e0ec      	b.n	80066a0 <UART_SetConfig+0x348>
 80064c6:	2308      	movs	r3, #8
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e0e9      	b.n	80066a0 <UART_SetConfig+0x348>
 80064cc:	2310      	movs	r3, #16
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e0e6      	b.n	80066a0 <UART_SetConfig+0x348>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a56      	ldr	r2, [pc, #344]	@ (8006630 <UART_SetConfig+0x2d8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d120      	bne.n	800651e <UART_SetConfig+0x1c6>
 80064dc:	4b51      	ldr	r3, [pc, #324]	@ (8006624 <UART_SetConfig+0x2cc>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80064e8:	d013      	beq.n	8006512 <UART_SetConfig+0x1ba>
 80064ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80064ec:	d814      	bhi.n	8006518 <UART_SetConfig+0x1c0>
 80064ee:	2b80      	cmp	r3, #128	@ 0x80
 80064f0:	d009      	beq.n	8006506 <UART_SetConfig+0x1ae>
 80064f2:	2b80      	cmp	r3, #128	@ 0x80
 80064f4:	d810      	bhi.n	8006518 <UART_SetConfig+0x1c0>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <UART_SetConfig+0x1a8>
 80064fa:	2b40      	cmp	r3, #64	@ 0x40
 80064fc:	d006      	beq.n	800650c <UART_SetConfig+0x1b4>
 80064fe:	e00b      	b.n	8006518 <UART_SetConfig+0x1c0>
 8006500:	2300      	movs	r3, #0
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e0cc      	b.n	80066a0 <UART_SetConfig+0x348>
 8006506:	2302      	movs	r3, #2
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e0c9      	b.n	80066a0 <UART_SetConfig+0x348>
 800650c:	2304      	movs	r3, #4
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e0c6      	b.n	80066a0 <UART_SetConfig+0x348>
 8006512:	2308      	movs	r3, #8
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e0c3      	b.n	80066a0 <UART_SetConfig+0x348>
 8006518:	2310      	movs	r3, #16
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e0c0      	b.n	80066a0 <UART_SetConfig+0x348>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a44      	ldr	r2, [pc, #272]	@ (8006634 <UART_SetConfig+0x2dc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d125      	bne.n	8006574 <UART_SetConfig+0x21c>
 8006528:	4b3e      	ldr	r3, [pc, #248]	@ (8006624 <UART_SetConfig+0x2cc>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800652e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006536:	d017      	beq.n	8006568 <UART_SetConfig+0x210>
 8006538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800653c:	d817      	bhi.n	800656e <UART_SetConfig+0x216>
 800653e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006542:	d00b      	beq.n	800655c <UART_SetConfig+0x204>
 8006544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006548:	d811      	bhi.n	800656e <UART_SetConfig+0x216>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <UART_SetConfig+0x1fe>
 800654e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006552:	d006      	beq.n	8006562 <UART_SetConfig+0x20a>
 8006554:	e00b      	b.n	800656e <UART_SetConfig+0x216>
 8006556:	2300      	movs	r3, #0
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e0a1      	b.n	80066a0 <UART_SetConfig+0x348>
 800655c:	2302      	movs	r3, #2
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e09e      	b.n	80066a0 <UART_SetConfig+0x348>
 8006562:	2304      	movs	r3, #4
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e09b      	b.n	80066a0 <UART_SetConfig+0x348>
 8006568:	2308      	movs	r3, #8
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e098      	b.n	80066a0 <UART_SetConfig+0x348>
 800656e:	2310      	movs	r3, #16
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e095      	b.n	80066a0 <UART_SetConfig+0x348>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2f      	ldr	r2, [pc, #188]	@ (8006638 <UART_SetConfig+0x2e0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d125      	bne.n	80065ca <UART_SetConfig+0x272>
 800657e:	4b29      	ldr	r3, [pc, #164]	@ (8006624 <UART_SetConfig+0x2cc>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006584:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006588:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800658c:	d017      	beq.n	80065be <UART_SetConfig+0x266>
 800658e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006592:	d817      	bhi.n	80065c4 <UART_SetConfig+0x26c>
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006598:	d00b      	beq.n	80065b2 <UART_SetConfig+0x25a>
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800659e:	d811      	bhi.n	80065c4 <UART_SetConfig+0x26c>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <UART_SetConfig+0x254>
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a8:	d006      	beq.n	80065b8 <UART_SetConfig+0x260>
 80065aa:	e00b      	b.n	80065c4 <UART_SetConfig+0x26c>
 80065ac:	2301      	movs	r3, #1
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e076      	b.n	80066a0 <UART_SetConfig+0x348>
 80065b2:	2302      	movs	r3, #2
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e073      	b.n	80066a0 <UART_SetConfig+0x348>
 80065b8:	2304      	movs	r3, #4
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e070      	b.n	80066a0 <UART_SetConfig+0x348>
 80065be:	2308      	movs	r3, #8
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e06d      	b.n	80066a0 <UART_SetConfig+0x348>
 80065c4:	2310      	movs	r3, #16
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e06a      	b.n	80066a0 <UART_SetConfig+0x348>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1b      	ldr	r2, [pc, #108]	@ (800663c <UART_SetConfig+0x2e4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d138      	bne.n	8006646 <UART_SetConfig+0x2ee>
 80065d4:	4b13      	ldr	r3, [pc, #76]	@ (8006624 <UART_SetConfig+0x2cc>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80065de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e2:	d017      	beq.n	8006614 <UART_SetConfig+0x2bc>
 80065e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e8:	d82a      	bhi.n	8006640 <UART_SetConfig+0x2e8>
 80065ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ee:	d00b      	beq.n	8006608 <UART_SetConfig+0x2b0>
 80065f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f4:	d824      	bhi.n	8006640 <UART_SetConfig+0x2e8>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <UART_SetConfig+0x2aa>
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fe:	d006      	beq.n	800660e <UART_SetConfig+0x2b6>
 8006600:	e01e      	b.n	8006640 <UART_SetConfig+0x2e8>
 8006602:	2300      	movs	r3, #0
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e04b      	b.n	80066a0 <UART_SetConfig+0x348>
 8006608:	2302      	movs	r3, #2
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e048      	b.n	80066a0 <UART_SetConfig+0x348>
 800660e:	2304      	movs	r3, #4
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e045      	b.n	80066a0 <UART_SetConfig+0x348>
 8006614:	2308      	movs	r3, #8
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e042      	b.n	80066a0 <UART_SetConfig+0x348>
 800661a:	bf00      	nop
 800661c:	efff69f3 	.word	0xefff69f3
 8006620:	40011000 	.word	0x40011000
 8006624:	40023800 	.word	0x40023800
 8006628:	40004400 	.word	0x40004400
 800662c:	40004800 	.word	0x40004800
 8006630:	40004c00 	.word	0x40004c00
 8006634:	40005000 	.word	0x40005000
 8006638:	40011400 	.word	0x40011400
 800663c:	40007800 	.word	0x40007800
 8006640:	2310      	movs	r3, #16
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e02c      	b.n	80066a0 <UART_SetConfig+0x348>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a72      	ldr	r2, [pc, #456]	@ (8006814 <UART_SetConfig+0x4bc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d125      	bne.n	800669c <UART_SetConfig+0x344>
 8006650:	4b71      	ldr	r3, [pc, #452]	@ (8006818 <UART_SetConfig+0x4c0>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006656:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800665a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800665e:	d017      	beq.n	8006690 <UART_SetConfig+0x338>
 8006660:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006664:	d817      	bhi.n	8006696 <UART_SetConfig+0x33e>
 8006666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800666a:	d00b      	beq.n	8006684 <UART_SetConfig+0x32c>
 800666c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006670:	d811      	bhi.n	8006696 <UART_SetConfig+0x33e>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <UART_SetConfig+0x326>
 8006676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800667a:	d006      	beq.n	800668a <UART_SetConfig+0x332>
 800667c:	e00b      	b.n	8006696 <UART_SetConfig+0x33e>
 800667e:	2300      	movs	r3, #0
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e00d      	b.n	80066a0 <UART_SetConfig+0x348>
 8006684:	2302      	movs	r3, #2
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e00a      	b.n	80066a0 <UART_SetConfig+0x348>
 800668a:	2304      	movs	r3, #4
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e007      	b.n	80066a0 <UART_SetConfig+0x348>
 8006690:	2308      	movs	r3, #8
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e004      	b.n	80066a0 <UART_SetConfig+0x348>
 8006696:	2310      	movs	r3, #16
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e001      	b.n	80066a0 <UART_SetConfig+0x348>
 800669c:	2310      	movs	r3, #16
 800669e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a8:	d15b      	bne.n	8006762 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066aa:	7ffb      	ldrb	r3, [r7, #31]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d828      	bhi.n	8006702 <UART_SetConfig+0x3aa>
 80066b0:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <UART_SetConfig+0x360>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	08006703 	.word	0x08006703
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	08006703 	.word	0x08006703
 80066d0:	08006703 	.word	0x08006703
 80066d4:	08006703 	.word	0x08006703
 80066d8:	080066fb 	.word	0x080066fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fe fb0a 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 80066e0:	61b8      	str	r0, [r7, #24]
        break;
 80066e2:	e013      	b.n	800670c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fe fb1a 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 80066e8:	61b8      	str	r0, [r7, #24]
        break;
 80066ea:	e00f      	b.n	800670c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ec:	4b4b      	ldr	r3, [pc, #300]	@ (800681c <UART_SetConfig+0x4c4>)
 80066ee:	61bb      	str	r3, [r7, #24]
        break;
 80066f0:	e00c      	b.n	800670c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f2:	f7fe fa2d 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80066f6:	61b8      	str	r0, [r7, #24]
        break;
 80066f8:	e008      	b.n	800670c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fe:	61bb      	str	r3, [r7, #24]
        break;
 8006700:	e004      	b.n	800670c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	77bb      	strb	r3, [r7, #30]
        break;
 800670a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d074      	beq.n	80067fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	005a      	lsls	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	441a      	add	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b0f      	cmp	r3, #15
 800672c:	d916      	bls.n	800675c <UART_SetConfig+0x404>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006734:	d212      	bcs.n	800675c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	b29b      	uxth	r3, r3
 800673a:	f023 030f 	bic.w	r3, r3, #15
 800673e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	b29b      	uxth	r3, r3
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	b29a      	uxth	r2, r3
 800674c:	89fb      	ldrh	r3, [r7, #14]
 800674e:	4313      	orrs	r3, r2
 8006750:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	89fa      	ldrh	r2, [r7, #14]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	e04f      	b.n	80067fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	77bb      	strb	r3, [r7, #30]
 8006760:	e04c      	b.n	80067fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006762:	7ffb      	ldrb	r3, [r7, #31]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d828      	bhi.n	80067ba <UART_SetConfig+0x462>
 8006768:	a201      	add	r2, pc, #4	@ (adr r2, 8006770 <UART_SetConfig+0x418>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	08006795 	.word	0x08006795
 8006774:	0800679d 	.word	0x0800679d
 8006778:	080067a5 	.word	0x080067a5
 800677c:	080067bb 	.word	0x080067bb
 8006780:	080067ab 	.word	0x080067ab
 8006784:	080067bb 	.word	0x080067bb
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067bb 	.word	0x080067bb
 8006790:	080067b3 	.word	0x080067b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006794:	f7fe faae 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006798:	61b8      	str	r0, [r7, #24]
        break;
 800679a:	e013      	b.n	80067c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800679c:	f7fe fabe 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 80067a0:	61b8      	str	r0, [r7, #24]
        break;
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a4:	4b1d      	ldr	r3, [pc, #116]	@ (800681c <UART_SetConfig+0x4c4>)
 80067a6:	61bb      	str	r3, [r7, #24]
        break;
 80067a8:	e00c      	b.n	80067c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067aa:	f7fe f9d1 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80067ae:	61b8      	str	r0, [r7, #24]
        break;
 80067b0:	e008      	b.n	80067c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067b6:	61bb      	str	r3, [r7, #24]
        break;
 80067b8:	e004      	b.n	80067c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	77bb      	strb	r3, [r7, #30]
        break;
 80067c2:	bf00      	nop
    }

    if (pclk != 0U)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d018      	beq.n	80067fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	085a      	lsrs	r2, r3, #1
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	441a      	add	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b0f      	cmp	r3, #15
 80067e2:	d909      	bls.n	80067f8 <UART_SetConfig+0x4a0>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ea:	d205      	bcs.n	80067f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	e001      	b.n	80067fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006808:	7fbb      	ldrb	r3, [r7, #30]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40007c00 	.word	0x40007c00
 8006818:	40023800 	.word	0x40023800
 800681c:	00f42400 	.word	0x00f42400

08006820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01a      	beq.n	8006936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800691e:	d10a      	bne.n	8006936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af02      	add	r7, sp, #8
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006974:	f7fc fcba 	bl	80032ec <HAL_GetTick>
 8006978:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b08      	cmp	r3, #8
 8006986:	d10e      	bne.n	80069a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006988:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f81b 	bl	80069d2 <UART_WaitOnFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e011      	b.n	80069ca <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b09c      	sub	sp, #112	@ 0x70
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	603b      	str	r3, [r7, #0]
 80069de:	4613      	mov	r3, r2
 80069e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e2:	e0a7      	b.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	f000 80a3 	beq.w	8006b34 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fc fc7d 	bl	80032ec <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x32>
 80069fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d13f      	bne.n	8006a84 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a14:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006a18:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a24:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a56:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a58:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e068      	b.n	8006b56 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d050      	beq.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa0:	d148      	bne.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aaa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006acc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e6      	bne.n	8006aac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	613b      	str	r3, [r7, #16]
   return(result);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3308      	adds	r3, #8
 8006afc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006afe:	623a      	str	r2, [r7, #32]
 8006b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	69f9      	ldr	r1, [r7, #28]
 8006b04:	6a3a      	ldr	r2, [r7, #32]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e010      	b.n	8006b56 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69da      	ldr	r2, [r3, #28]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	bf0c      	ite	eq
 8006b44:	2301      	moveq	r3, #1
 8006b46:	2300      	movne	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	f43f af48 	beq.w	80069e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3770      	adds	r7, #112	@ 0x70
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b097      	sub	sp, #92	@ 0x5c
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	88fa      	ldrh	r2, [r7, #6]
 8006b80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b92:	d10e      	bne.n	8006bb2 <UART_Start_Receive_IT+0x52>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <UART_Start_Receive_IT+0x48>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ba6:	e02d      	b.n	8006c04 <UART_Start_Receive_IT+0xa4>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	22ff      	movs	r2, #255	@ 0xff
 8006bac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bb0:	e028      	b.n	8006c04 <UART_Start_Receive_IT+0xa4>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10d      	bne.n	8006bd6 <UART_Start_Receive_IT+0x76>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <UART_Start_Receive_IT+0x6c>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	22ff      	movs	r2, #255	@ 0xff
 8006bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bca:	e01b      	b.n	8006c04 <UART_Start_Receive_IT+0xa4>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	227f      	movs	r2, #127	@ 0x7f
 8006bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bd4:	e016      	b.n	8006c04 <UART_Start_Receive_IT+0xa4>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bde:	d10d      	bne.n	8006bfc <UART_Start_Receive_IT+0x9c>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <UART_Start_Receive_IT+0x92>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	227f      	movs	r2, #127	@ 0x7f
 8006bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bf0:	e008      	b.n	8006c04 <UART_Start_Receive_IT+0xa4>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	223f      	movs	r2, #63	@ 0x3f
 8006bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bfa:	e003      	b.n	8006c04 <UART_Start_Receive_IT+0xa4>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2222      	movs	r2, #34	@ 0x22
 8006c10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c34:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006c36:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c50:	d107      	bne.n	8006c62 <UART_Start_Receive_IT+0x102>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4a21      	ldr	r2, [pc, #132]	@ (8006ce4 <UART_Start_Receive_IT+0x184>)
 8006c5e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006c60:	e002      	b.n	8006c68 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a20      	ldr	r2, [pc, #128]	@ (8006ce8 <UART_Start_Receive_IT+0x188>)
 8006c66:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d019      	beq.n	8006ca4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c90:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e6      	bne.n	8006c70 <UART_Start_Receive_IT+0x110>
 8006ca2:	e018      	b.n	8006cd6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f043 0320 	orr.w	r3, r3, #32
 8006cb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc2:	623b      	str	r3, [r7, #32]
 8006cc4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	69f9      	ldr	r1, [r7, #28]
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e6      	bne.n	8006ca4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	375c      	adds	r7, #92	@ 0x5c
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	08006f9b 	.word	0x08006f9b
 8006ce8:	08006e35 	.word	0x08006e35

08006cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b095      	sub	sp, #84	@ 0x54
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e5      	bne.n	8006d26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d118      	bne.n	8006d94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f023 0310 	bic.w	r3, r3, #16
 8006d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6979      	ldr	r1, [r7, #20]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006da8:	bf00      	nop
 8006daa:	3754      	adds	r7, #84	@ 0x54
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff faaa 	bl	800632c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6979      	ldr	r1, [r7, #20]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	613b      	str	r3, [r7, #16]
   return(result);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e6      	bne.n	8006de8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fa76 	bl	8006318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2c:	bf00      	nop
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b096      	sub	sp, #88	@ 0x58
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e42:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4c:	2b22      	cmp	r3, #34	@ 0x22
 8006e4e:	f040 8098 	bne.w	8006f82 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006e60:	b2d9      	uxtb	r1, r3
 8006e62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6c:	400a      	ands	r2, r1
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d17b      	bne.n	8006f92 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	623b      	str	r3, [r7, #32]
   return(result);
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eec:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d12e      	bne.n	8006f7a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0310 	bic.w	r3, r3, #16
 8006f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f40:	61fb      	str	r3, [r7, #28]
 8006f42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d103      	bne.n	8006f6a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2210      	movs	r2, #16
 8006f68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff f9e4 	bl	8006340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f78:	e00b      	b.n	8006f92 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fa fd08 	bl	8001990 <HAL_UART_RxCpltCallback>
}
 8006f80:	e007      	b.n	8006f92 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0208 	orr.w	r2, r2, #8
 8006f90:	619a      	str	r2, [r3, #24]
}
 8006f92:	bf00      	nop
 8006f94:	3758      	adds	r7, #88	@ 0x58
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b096      	sub	sp, #88	@ 0x58
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fa8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fb2:	2b22      	cmp	r3, #34	@ 0x22
 8006fb4:	f040 8098 	bne.w	80070e8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbe:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc6:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006fc8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006fcc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fdc:	1c9a      	adds	r2, r3, #2
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d17b      	bne.n	80070f8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800701e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007020:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e6      	bne.n	8007000 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	61fb      	str	r3, [r7, #28]
   return(result);
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e5      	bne.n	8007032 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800707e:	2b01      	cmp	r3, #1
 8007080:	d12e      	bne.n	80070e0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	60bb      	str	r3, [r7, #8]
   return(result);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f023 0310 	bic.w	r3, r3, #16
 800709c:	647b      	str	r3, [r7, #68]	@ 0x44
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6979      	ldr	r1, [r7, #20]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	613b      	str	r3, [r7, #16]
   return(result);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e6      	bne.n	8007088 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d103      	bne.n	80070d0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2210      	movs	r2, #16
 80070ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff f931 	bl	8006340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070de:	e00b      	b.n	80070f8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fa fc55 	bl	8001990 <HAL_UART_RxCpltCallback>
}
 80070e6:	e007      	b.n	80070f8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0208 	orr.w	r2, r2, #8
 80070f6:	619a      	str	r2, [r3, #24]
}
 80070f8:	bf00      	nop
 80070fa:	3758      	adds	r7, #88	@ 0x58
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007104:	bf00      	nop
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007116:	f3ef 8305 	mrs	r3, IPSR
 800711a:	60bb      	str	r3, [r7, #8]
  return(result);
 800711c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10f      	bne.n	8007142 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007122:	f3ef 8310 	mrs	r3, PRIMASK
 8007126:	607b      	str	r3, [r7, #4]
  return(result);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800712e:	f3ef 8311 	mrs	r3, BASEPRI
 8007132:	603b      	str	r3, [r7, #0]
  return(result);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <osKernelInitialize+0x3a>
 800713a:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <osKernelInitialize+0x64>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d103      	bne.n	800714a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007142:	f06f 0305 	mvn.w	r3, #5
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e00c      	b.n	8007164 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800714a:	4b0a      	ldr	r3, [pc, #40]	@ (8007174 <osKernelInitialize+0x64>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d105      	bne.n	800715e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007152:	4b08      	ldr	r3, [pc, #32]	@ (8007174 <osKernelInitialize+0x64>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e002      	b.n	8007164 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295
 8007162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000554 	.word	0x20000554

08007178 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800717e:	f3ef 8305 	mrs	r3, IPSR
 8007182:	60bb      	str	r3, [r7, #8]
  return(result);
 8007184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10f      	bne.n	80071aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718a:	f3ef 8310 	mrs	r3, PRIMASK
 800718e:	607b      	str	r3, [r7, #4]
  return(result);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007196:	f3ef 8311 	mrs	r3, BASEPRI
 800719a:	603b      	str	r3, [r7, #0]
  return(result);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <osKernelStart+0x3a>
 80071a2:	4b0f      	ldr	r3, [pc, #60]	@ (80071e0 <osKernelStart+0x68>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d103      	bne.n	80071b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80071aa:	f06f 0305 	mvn.w	r3, #5
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e010      	b.n	80071d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071b2:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <osKernelStart+0x68>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d109      	bne.n	80071ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071ba:	f7ff ffa1 	bl	8007100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071be:	4b08      	ldr	r3, [pc, #32]	@ (80071e0 <osKernelStart+0x68>)
 80071c0:	2202      	movs	r2, #2
 80071c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071c4:	f001 fd7e 	bl	8008cc4 <vTaskStartScheduler>
      stat = osOK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e002      	b.n	80071d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295
 80071d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000554 	.word	0x20000554

080071e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b090      	sub	sp, #64	@ 0x40
 80071e8:	af04      	add	r7, sp, #16
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f4:	f3ef 8305 	mrs	r3, IPSR
 80071f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80071fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 808f 	bne.w	8007320 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007202:	f3ef 8310 	mrs	r3, PRIMASK
 8007206:	61bb      	str	r3, [r7, #24]
  return(result);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800720e:	f3ef 8311 	mrs	r3, BASEPRI
 8007212:	617b      	str	r3, [r7, #20]
  return(result);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <osThreadNew+0x3e>
 800721a:	4b44      	ldr	r3, [pc, #272]	@ (800732c <osThreadNew+0x148>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d07e      	beq.n	8007320 <osThreadNew+0x13c>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d07b      	beq.n	8007320 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007228:	2380      	movs	r3, #128	@ 0x80
 800722a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800722c:	2318      	movs	r3, #24
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007234:	f04f 33ff 	mov.w	r3, #4294967295
 8007238:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d045      	beq.n	80072cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <osThreadNew+0x6a>
        name = attr->name;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <osThreadNew+0x90>
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	2b38      	cmp	r3, #56	@ 0x38
 8007266:	d805      	bhi.n	8007274 <osThreadNew+0x90>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <osThreadNew+0x94>
        return (NULL);
 8007274:	2300      	movs	r3, #0
 8007276:	e054      	b.n	8007322 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	089b      	lsrs	r3, r3, #2
 8007286:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00e      	beq.n	80072ae <osThreadNew+0xca>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2ba7      	cmp	r3, #167	@ 0xa7
 8007296:	d90a      	bls.n	80072ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <osThreadNew+0xca>
        mem = 1;
 80072a8:	2301      	movs	r3, #1
 80072aa:	623b      	str	r3, [r7, #32]
 80072ac:	e010      	b.n	80072d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <osThreadNew+0xec>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d108      	bne.n	80072d0 <osThreadNew+0xec>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <osThreadNew+0xec>
          mem = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	e001      	b.n	80072d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d110      	bne.n	80072f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f001 faeb 	bl	80088c8 <xTaskCreateStatic>
 80072f2:	4603      	mov	r3, r0
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	e013      	b.n	8007320 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d110      	bne.n	8007320 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	b29a      	uxth	r2, r3
 8007302:	f107 0310 	add.w	r3, r7, #16
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f001 fb3f 	bl	8008994 <xTaskCreate>
 8007316:	4603      	mov	r3, r0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d001      	beq.n	8007320 <osThreadNew+0x13c>
          hTask = NULL;
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007320:	693b      	ldr	r3, [r7, #16]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3730      	adds	r7, #48	@ 0x30
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000554 	.word	0x20000554

08007330 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007338:	f3ef 8305 	mrs	r3, IPSR
 800733c:	613b      	str	r3, [r7, #16]
  return(result);
 800733e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10f      	bne.n	8007364 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007344:	f3ef 8310 	mrs	r3, PRIMASK
 8007348:	60fb      	str	r3, [r7, #12]
  return(result);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007350:	f3ef 8311 	mrs	r3, BASEPRI
 8007354:	60bb      	str	r3, [r7, #8]
  return(result);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <osDelay+0x3c>
 800735c:	4b0a      	ldr	r3, [pc, #40]	@ (8007388 <osDelay+0x58>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d103      	bne.n	800736c <osDelay+0x3c>
    stat = osErrorISR;
 8007364:	f06f 0305 	mvn.w	r3, #5
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	e007      	b.n	800737c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 fc6c 	bl	8008c54 <vTaskDelay>
    }
  }

  return (stat);
 800737c:	697b      	ldr	r3, [r7, #20]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000554 	.word	0x20000554

0800738c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f002 ff41 	bl	800a21c <pvTimerGetTimerID>
 800739a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <TimerCallback+0x22>
    callb->func (callb->arg);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	6852      	ldr	r2, [r2, #4]
 80073aa:	4610      	mov	r0, r2
 80073ac:	4798      	blx	r3
  }
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08e      	sub	sp, #56	@ 0x38
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	460b      	mov	r3, r1
 80073c6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073cc:	f3ef 8305 	mrs	r3, IPSR
 80073d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80073d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d16a      	bne.n	80074ae <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d8:	f3ef 8310 	mrs	r3, PRIMASK
 80073dc:	617b      	str	r3, [r7, #20]
  return(result);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073e4:	f3ef 8311 	mrs	r3, BASEPRI
 80073e8:	613b      	str	r3, [r7, #16]
  return(result);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <osTimerNew+0x40>
 80073f0:	4b31      	ldr	r3, [pc, #196]	@ (80074b8 <osTimerNew+0x100>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d05a      	beq.n	80074ae <osTimerNew+0xf6>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d057      	beq.n	80074ae <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80073fe:	2008      	movs	r0, #8
 8007400:	f003 f96a 	bl	800a6d8 <pvPortMalloc>
 8007404:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d050      	beq.n	80074ae <osTimerNew+0xf6>
      callb->func = func;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d102      	bne.n	8007424 <osTimerNew+0x6c>
        reload = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
 8007422:	e001      	b.n	8007428 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 8007428:	f04f 33ff 	mov.w	r3, #4294967295
 800742c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01c      	beq.n	8007472 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <osTimerNew+0x8e>
          name = attr->name;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d006      	beq.n	800745c <osTimerNew+0xa4>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	2b2b      	cmp	r3, #43	@ 0x2b
 8007454:	d902      	bls.n	800745c <osTimerNew+0xa4>
          mem = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	e00c      	b.n	8007476 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d108      	bne.n	8007476 <osTimerNew+0xbe>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <osTimerNew+0xbe>
            mem = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	e001      	b.n	8007476 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d10c      	bne.n	8007496 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	4b0e      	ldr	r3, [pc, #56]	@ (80074bc <osTimerNew+0x104>)
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800748a:	2101      	movs	r1, #1
 800748c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800748e:	f002 fafa 	bl	8009a86 <xTimerCreateStatic>
 8007492:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007494:	e00b      	b.n	80074ae <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d108      	bne.n	80074ae <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <osTimerNew+0x104>)
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a4:	2101      	movs	r1, #1
 80074a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074a8:	f002 facc 	bl	8009a44 <xTimerCreate>
 80074ac:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3730      	adds	r7, #48	@ 0x30
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20000554 	.word	0x20000554
 80074bc:	0800738d 	.word	0x0800738d

080074c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08a      	sub	sp, #40	@ 0x28
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ce:	f3ef 8305 	mrs	r3, IPSR
 80074d2:	617b      	str	r3, [r7, #20]
  return(result);
 80074d4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10f      	bne.n	80074fa <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074da:	f3ef 8310 	mrs	r3, PRIMASK
 80074de:	613b      	str	r3, [r7, #16]
  return(result);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074e6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <osTimerStart+0x42>
 80074f2:	4b12      	ldr	r3, [pc, #72]	@ (800753c <osTimerStart+0x7c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d103      	bne.n	8007502 <osTimerStart+0x42>
    stat = osErrorISR;
 80074fa:	f06f 0305 	mvn.w	r3, #5
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	e017      	b.n	8007532 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d103      	bne.n	8007510 <osTimerStart+0x50>
    stat = osErrorParameter;
 8007508:	f06f 0303 	mvn.w	r3, #3
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	e010      	b.n	8007532 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007510:	2300      	movs	r3, #0
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	2104      	movs	r1, #4
 800751a:	69b8      	ldr	r0, [r7, #24]
 800751c:	f002 fb36 	bl	8009b8c <xTimerGenericCommand>
 8007520:	4603      	mov	r3, r0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d102      	bne.n	800752c <osTimerStart+0x6c>
      stat = osOK;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	e002      	b.n	8007532 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800752c:	f06f 0302 	mvn.w	r3, #2
 8007530:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8007532:	69fb      	ldr	r3, [r7, #28]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3720      	adds	r7, #32
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20000554 	.word	0x20000554

08007540 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	@ 0x28
 8007544:	af02      	add	r7, sp, #8
 8007546:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754c:	f3ef 8305 	mrs	r3, IPSR
 8007550:	617b      	str	r3, [r7, #20]
  return(result);
 8007552:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10f      	bne.n	8007578 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007558:	f3ef 8310 	mrs	r3, PRIMASK
 800755c:	613b      	str	r3, [r7, #16]
  return(result);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <osTimerStop+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007564:	f3ef 8311 	mrs	r3, BASEPRI
 8007568:	60fb      	str	r3, [r7, #12]
  return(result);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <osTimerStop+0x40>
 8007570:	4b17      	ldr	r3, [pc, #92]	@ (80075d0 <osTimerStop+0x90>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d103      	bne.n	8007580 <osTimerStop+0x40>
    stat = osErrorISR;
 8007578:	f06f 0305 	mvn.w	r3, #5
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e021      	b.n	80075c4 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <osTimerStop+0x4e>
    stat = osErrorParameter;
 8007586:	f06f 0303 	mvn.w	r3, #3
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	e01a      	b.n	80075c4 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800758e:	69b8      	ldr	r0, [r7, #24]
 8007590:	f002 fe18 	bl	800a1c4 <xTimerIsTimerActive>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <osTimerStop+0x62>
      stat = osErrorResource;
 800759a:	f06f 0302 	mvn.w	r3, #2
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e010      	b.n	80075c4 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80075a2:	2300      	movs	r3, #0
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	2300      	movs	r3, #0
 80075a8:	2200      	movs	r2, #0
 80075aa:	2103      	movs	r1, #3
 80075ac:	69b8      	ldr	r0, [r7, #24]
 80075ae:	f002 faed 	bl	8009b8c <xTimerGenericCommand>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d102      	bne.n	80075be <osTimerStop+0x7e>
        stat = osOK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	e002      	b.n	80075c4 <osTimerStop+0x84>
      } else {
        stat = osError;
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80075c4:	69fb      	ldr	r3, [r7, #28]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3720      	adds	r7, #32
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000554 	.word	0x20000554

080075d4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	@ 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e0:	f3ef 8305 	mrs	r3, IPSR
 80075e4:	613b      	str	r3, [r7, #16]
  return(result);
 80075e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 8085 	bne.w	80076f8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ee:	f3ef 8310 	mrs	r3, PRIMASK
 80075f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d105      	bne.n	8007606 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075fa:	f3ef 8311 	mrs	r3, BASEPRI
 80075fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <osMutexNew+0x3a>
 8007606:	4b3f      	ldr	r3, [pc, #252]	@ (8007704 <osMutexNew+0x130>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d074      	beq.n	80076f8 <osMutexNew+0x124>
    if (attr != NULL) {
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <osMutexNew+0x48>
      type = attr->attr_bits;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	e001      	b.n	8007620 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <osMutexNew+0x5c>
      rmtx = 1U;
 800762a:	2301      	movs	r3, #1
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	e001      	b.n	8007634 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d15c      	bne.n	80076f8 <osMutexNew+0x124>
      mem = -1;
 800763e:	f04f 33ff 	mov.w	r3, #4294967295
 8007642:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d015      	beq.n	8007676 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <osMutexNew+0x8c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	2b4f      	cmp	r3, #79	@ 0x4f
 8007658:	d902      	bls.n	8007660 <osMutexNew+0x8c>
          mem = 1;
 800765a:	2301      	movs	r3, #1
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	e00c      	b.n	800767a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d108      	bne.n	800767a <osMutexNew+0xa6>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <osMutexNew+0xa6>
            mem = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	e001      	b.n	800767a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d112      	bne.n	80076a6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	4619      	mov	r1, r3
 800768c:	2004      	movs	r0, #4
 800768e:	f000 fb5c 	bl	8007d4a <xQueueCreateMutexStatic>
 8007692:	6278      	str	r0, [r7, #36]	@ 0x24
 8007694:	e016      	b.n	80076c4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4619      	mov	r1, r3
 800769c:	2001      	movs	r0, #1
 800769e:	f000 fb54 	bl	8007d4a <xQueueCreateMutexStatic>
 80076a2:	6278      	str	r0, [r7, #36]	@ 0x24
 80076a4:	e00e      	b.n	80076c4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80076b2:	2004      	movs	r0, #4
 80076b4:	f000 fb31 	bl	8007d1a <xQueueCreateMutex>
 80076b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80076ba:	e003      	b.n	80076c4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80076bc:	2001      	movs	r0, #1
 80076be:	f000 fb2c 	bl	8007d1a <xQueueCreateMutex>
 80076c2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00c      	beq.n	80076e4 <osMutexNew+0x110>
        if (attr != NULL) {
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <osMutexNew+0x104>
          name = attr->name;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e001      	b.n	80076dc <osMutexNew+0x108>
        } else {
          name = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80076dc:	6979      	ldr	r1, [r7, #20]
 80076de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076e0:	f001 f894 	bl	800880c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d006      	beq.n	80076f8 <osMutexNew+0x124>
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	@ 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000554 	.word	0x20000554

08007708 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f023 0301 	bic.w	r3, r3, #1
 8007718:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007726:	f3ef 8305 	mrs	r3, IPSR
 800772a:	613b      	str	r3, [r7, #16]
  return(result);
 800772c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007732:	f3ef 8310 	mrs	r3, PRIMASK
 8007736:	60fb      	str	r3, [r7, #12]
  return(result);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800773e:	f3ef 8311 	mrs	r3, BASEPRI
 8007742:	60bb      	str	r3, [r7, #8]
  return(result);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <osMutexAcquire+0x52>
 800774a:	4b1d      	ldr	r3, [pc, #116]	@ (80077c0 <osMutexAcquire+0xb8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d103      	bne.n	800775a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007752:	f06f 0305 	mvn.w	r3, #5
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	e02c      	b.n	80077b4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007760:	f06f 0303 	mvn.w	r3, #3
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	e025      	b.n	80077b4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d011      	beq.n	8007792 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	69b8      	ldr	r0, [r7, #24]
 8007772:	f000 fb3c 	bl	8007dee <xQueueTakeMutexRecursive>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d01b      	beq.n	80077b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007782:	f06f 0301 	mvn.w	r3, #1
 8007786:	61fb      	str	r3, [r7, #28]
 8007788:	e014      	b.n	80077b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800778a:	f06f 0302 	mvn.w	r3, #2
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	e010      	b.n	80077b4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	69b8      	ldr	r0, [r7, #24]
 8007796:	f000 fdf9 	bl	800838c <xQueueSemaphoreTake>
 800779a:	4603      	mov	r3, r0
 800779c:	2b01      	cmp	r3, #1
 800779e:	d009      	beq.n	80077b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80077a6:	f06f 0301 	mvn.w	r3, #1
 80077aa:	61fb      	str	r3, [r7, #28]
 80077ac:	e002      	b.n	80077b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80077ae:	f06f 0302 	mvn.w	r3, #2
 80077b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80077b4:	69fb      	ldr	r3, [r7, #28]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000554 	.word	0x20000554

080077c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f023 0301 	bic.w	r3, r3, #1
 80077d2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e0:	f3ef 8305 	mrs	r3, IPSR
 80077e4:	613b      	str	r3, [r7, #16]
  return(result);
 80077e6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10f      	bne.n	800780c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ec:	f3ef 8310 	mrs	r3, PRIMASK
 80077f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077f8:	f3ef 8311 	mrs	r3, BASEPRI
 80077fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <osMutexRelease+0x50>
 8007804:	4b16      	ldr	r3, [pc, #88]	@ (8007860 <osMutexRelease+0x9c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d103      	bne.n	8007814 <osMutexRelease+0x50>
    stat = osErrorISR;
 800780c:	f06f 0305 	mvn.w	r3, #5
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	e01f      	b.n	8007854 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d103      	bne.n	8007822 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800781a:	f06f 0303 	mvn.w	r3, #3
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	e018      	b.n	8007854 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007828:	69b8      	ldr	r0, [r7, #24]
 800782a:	f000 faa9 	bl	8007d80 <xQueueGiveMutexRecursive>
 800782e:	4603      	mov	r3, r0
 8007830:	2b01      	cmp	r3, #1
 8007832:	d00f      	beq.n	8007854 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007834:	f06f 0302 	mvn.w	r3, #2
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	e00b      	b.n	8007854 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800783c:	2300      	movs	r3, #0
 800783e:	2200      	movs	r2, #0
 8007840:	2100      	movs	r1, #0
 8007842:	69b8      	ldr	r0, [r7, #24]
 8007844:	f000 fb0c 	bl	8007e60 <xQueueGenericSend>
 8007848:	4603      	mov	r3, r0
 800784a:	2b01      	cmp	r3, #1
 800784c:	d002      	beq.n	8007854 <osMutexRelease+0x90>
        stat = osErrorResource;
 800784e:	f06f 0302 	mvn.w	r3, #2
 8007852:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007854:	69fb      	ldr	r3, [r7, #28]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3720      	adds	r7, #32
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20000554 	.word	0x20000554

08007864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4a07      	ldr	r2, [pc, #28]	@ (8007890 <vApplicationGetIdleTaskMemory+0x2c>)
 8007874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4a06      	ldr	r2, [pc, #24]	@ (8007894 <vApplicationGetIdleTaskMemory+0x30>)
 800787a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2280      	movs	r2, #128	@ 0x80
 8007880:	601a      	str	r2, [r3, #0]
}
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20000558 	.word	0x20000558
 8007894:	20000600 	.word	0x20000600

08007898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a07      	ldr	r2, [pc, #28]	@ (80078c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80078a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4a06      	ldr	r2, [pc, #24]	@ (80078c8 <vApplicationGetTimerTaskMemory+0x30>)
 80078ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80078b6:	601a      	str	r2, [r3, #0]
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	20000800 	.word	0x20000800
 80078c8:	200008a8 	.word	0x200008a8

080078cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f103 0208 	add.w	r2, r3, #8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295
 80078e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f103 0208 	add.w	r2, r3, #8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f103 0208 	add.w	r2, r3, #8
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d103      	bne.n	800798e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	e00c      	b.n	80079a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3308      	adds	r3, #8
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	e002      	b.n	800799c <vListInsert+0x2e>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d2f6      	bcs.n	8007996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6892      	ldr	r2, [r2, #8]
 80079f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6852      	ldr	r2, [r2, #4]
 8007a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d103      	bne.n	8007a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	1e5a      	subs	r2, r3, #1
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10d      	bne.n	8007a64 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	b672      	cpsid	i
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	b662      	cpsie	i
 8007a5c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	e7fd      	b.n	8007a60 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007a64:	f002 fd0a 	bl	800a47c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a70:	68f9      	ldr	r1, [r7, #12]
 8007a72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a74:	fb01 f303 	mul.w	r3, r1, r3
 8007a78:	441a      	add	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a94:	3b01      	subs	r3, #1
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a9a:	fb01 f303 	mul.w	r3, r1, r3
 8007a9e:	441a      	add	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	22ff      	movs	r2, #255	@ 0xff
 8007aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	22ff      	movs	r2, #255	@ 0xff
 8007ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d114      	bne.n	8007ae4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d01a      	beq.n	8007af8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3310      	adds	r3, #16
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fba8 	bl	800921c <xTaskRemoveFromEventList>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d012      	beq.n	8007af8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b08 <xQueueGenericReset+0xd4>)
 8007ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	e009      	b.n	8007af8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3310      	adds	r3, #16
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff feef 	bl	80078cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3324      	adds	r3, #36	@ 0x24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff feea 	bl	80078cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007af8:	f002 fcf6 	bl	800a4e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007afc:	2301      	movs	r3, #1
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08e      	sub	sp, #56	@ 0x38
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10d      	bne.n	8007b3c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b24:	b672      	cpsid	i
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	b662      	cpsie	i
 8007b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	e7fd      	b.n	8007b38 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10d      	bne.n	8007b5e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b46:	b672      	cpsid	i
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	b662      	cpsie	i
 8007b56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <xQueueGenericCreateStatic+0x5e>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <xQueueGenericCreateStatic+0x62>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <xQueueGenericCreateStatic+0x64>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10d      	bne.n	8007b90 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b78:	b672      	cpsid	i
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	b662      	cpsie	i
 8007b88:	623b      	str	r3, [r7, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <xQueueGenericCreateStatic+0x90>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <xQueueGenericCreateStatic+0x94>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <xQueueGenericCreateStatic+0x96>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10d      	bne.n	8007bc2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	b672      	cpsid	i
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	b662      	cpsie	i
 8007bba:	61fb      	str	r3, [r7, #28]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bc2:	2350      	movs	r3, #80	@ 0x50
 8007bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b50      	cmp	r3, #80	@ 0x50
 8007bca:	d00d      	beq.n	8007be8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	b672      	cpsid	i
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	b662      	cpsie	i
 8007be0:	61bb      	str	r3, [r7, #24]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007be8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00d      	beq.n	8007c10 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f848 	bl	8007ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3730      	adds	r7, #48	@ 0x30
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b08a      	sub	sp, #40	@ 0x28
 8007c1e:	af02      	add	r7, sp, #8
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	4613      	mov	r3, r2
 8007c26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10d      	bne.n	8007c4a <xQueueGenericCreate+0x30>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	613b      	str	r3, [r7, #16]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	e004      	b.n	8007c60 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	3350      	adds	r3, #80	@ 0x50
 8007c64:	4618      	mov	r0, r3
 8007c66:	f002 fd37 	bl	800a6d8 <pvPortMalloc>
 8007c6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d011      	beq.n	8007c96 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	3350      	adds	r3, #80	@ 0x50
 8007c7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c84:	79fa      	ldrb	r2, [r7, #7]
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f805 	bl	8007ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c96:	69bb      	ldr	r3, [r7, #24]
	}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e002      	b.n	8007cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cce:	2101      	movs	r1, #1
 8007cd0:	69b8      	ldr	r0, [r7, #24]
 8007cd2:	f7ff feaf 	bl	8007a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00e      	beq.n	8007d12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d06:	2300      	movs	r3, #0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8a7 	bl	8007e60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b086      	sub	sp, #24
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	4603      	mov	r3, r0
 8007d22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d24:	2301      	movs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6939      	ldr	r1, [r7, #16]
 8007d32:	6978      	ldr	r0, [r7, #20]
 8007d34:	f7ff ff71 	bl	8007c1a <xQueueGenericCreate>
 8007d38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff ffd3 	bl	8007ce6 <prvInitialiseMutex>

		return xNewQueue;
 8007d40:	68fb      	ldr	r3, [r7, #12]
	}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b088      	sub	sp, #32
 8007d4e:	af02      	add	r7, sp, #8
 8007d50:	4603      	mov	r3, r0
 8007d52:	6039      	str	r1, [r7, #0]
 8007d54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d56:	2301      	movs	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2200      	movs	r2, #0
 8007d66:	6939      	ldr	r1, [r7, #16]
 8007d68:	6978      	ldr	r0, [r7, #20]
 8007d6a:	f7ff fecf 	bl	8007b0c <xQueueGenericCreateStatic>
 8007d6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff ffb8 	bl	8007ce6 <prvInitialiseMutex>

		return xNewQueue;
 8007d76:	68fb      	ldr	r3, [r7, #12]
	}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10d      	bne.n	8007dae <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	b672      	cpsid	i
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	b662      	cpsie	i
 8007da6:	60fb      	str	r3, [r7, #12]
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	e7fd      	b.n	8007daa <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	689c      	ldr	r4, [r3, #8]
 8007db2:	f001 fc01 	bl	80095b8 <xTaskGetCurrentTaskHandle>
 8007db6:	4603      	mov	r3, r0
 8007db8:	429c      	cmp	r4, r3
 8007dba:	d111      	bne.n	8007de0 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	1e5a      	subs	r2, r3, #1
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	6938      	ldr	r0, [r7, #16]
 8007dd6:	f000 f843 	bl	8007e60 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	e001      	b.n	8007de4 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007de4:	697b      	ldr	r3, [r7, #20]
	}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd90      	pop	{r4, r7, pc}

08007dee <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007dee:	b590      	push	{r4, r7, lr}
 8007df0:	b087      	sub	sp, #28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10d      	bne.n	8007e1e <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	b672      	cpsid	i
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	b662      	cpsie	i
 8007e16:	60fb      	str	r3, [r7, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	689c      	ldr	r4, [r3, #8]
 8007e22:	f001 fbc9 	bl	80095b8 <xTaskGetCurrentTaskHandle>
 8007e26:	4603      	mov	r3, r0
 8007e28:	429c      	cmp	r4, r3
 8007e2a:	d107      	bne.n	8007e3c <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007e36:	2301      	movs	r3, #1
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	e00c      	b.n	8007e56 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6938      	ldr	r0, [r7, #16]
 8007e40:	f000 faa4 	bl	800838c <xQueueSemaphoreTake>
 8007e44:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007e56:	697b      	ldr	r3, [r7, #20]
	}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd90      	pop	{r4, r7, pc}

08007e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	@ 0x38
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10d      	bne.n	8007e98 <xQueueGenericSend+0x38>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	b672      	cpsid	i
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	b662      	cpsie	i
 8007e90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <xQueueGenericSend+0x46>
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <xQueueGenericSend+0x4a>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <xQueueGenericSend+0x4c>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10d      	bne.n	8007ecc <xQueueGenericSend+0x6c>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	b672      	cpsid	i
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	b662      	cpsie	i
 8007ec4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d103      	bne.n	8007eda <xQueueGenericSend+0x7a>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <xQueueGenericSend+0x7e>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <xQueueGenericSend+0x80>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10d      	bne.n	8007f00 <xQueueGenericSend+0xa0>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee8:	b672      	cpsid	i
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	b662      	cpsie	i
 8007ef8:	623b      	str	r3, [r7, #32]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f00:	f001 fb6a 	bl	80095d8 <xTaskGetSchedulerState>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <xQueueGenericSend+0xb0>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <xQueueGenericSend+0xb4>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <xQueueGenericSend+0xb6>
 8007f14:	2300      	movs	r3, #0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <xQueueGenericSend+0xd6>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1e:	b672      	cpsid	i
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	b662      	cpsie	i
 8007f2e:	61fb      	str	r3, [r7, #28]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f36:	f002 faa1 	bl	800a47c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d302      	bcc.n	8007f4c <xQueueGenericSend+0xec>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d129      	bne.n	8007fa0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f52:	f000 fb4b 	bl	80085ec <prvCopyDataToQueue>
 8007f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d010      	beq.n	8007f82 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	3324      	adds	r3, #36	@ 0x24
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 f959 	bl	800921c <xTaskRemoveFromEventList>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d013      	beq.n	8007f98 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f70:	4b3f      	ldr	r3, [pc, #252]	@ (8008070 <xQueueGenericSend+0x210>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	e00a      	b.n	8007f98 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d007      	beq.n	8007f98 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f88:	4b39      	ldr	r3, [pc, #228]	@ (8008070 <xQueueGenericSend+0x210>)
 8007f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f98:	f002 faa6 	bl	800a4e8 <vPortExitCritical>
				return pdPASS;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e063      	b.n	8008068 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fa6:	f002 fa9f 	bl	800a4e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	e05c      	b.n	8008068 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d106      	bne.n	8007fc2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fb4:	f107 0314 	add.w	r3, r7, #20
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 f995 	bl	80092e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fc2:	f002 fa91 	bl	800a4e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fc6:	f000 fef1 	bl	8008dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fca:	f002 fa57 	bl	800a47c <vPortEnterCritical>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fd4:	b25b      	sxtb	r3, r3
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d103      	bne.n	8007fe4 <xQueueGenericSend+0x184>
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fea:	b25b      	sxtb	r3, r3
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d103      	bne.n	8007ffa <xQueueGenericSend+0x19a>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ffa:	f002 fa75 	bl	800a4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ffe:	1d3a      	adds	r2, r7, #4
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f001 f984 	bl	8009314 <xTaskCheckForTimeOut>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d124      	bne.n	800805c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008014:	f000 fbe2 	bl	80087dc <prvIsQueueFull>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d018      	beq.n	8008050 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	3310      	adds	r3, #16
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	4611      	mov	r1, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f001 f8a2 	bl	8009170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800802c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800802e:	f000 fb6d 	bl	800870c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008032:	f000 fec9 	bl	8008dc8 <xTaskResumeAll>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f af7c 	bne.w	8007f36 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800803e:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <xQueueGenericSend+0x210>)
 8008040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	e772      	b.n	8007f36 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008052:	f000 fb5b 	bl	800870c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008056:	f000 feb7 	bl	8008dc8 <xTaskResumeAll>
 800805a:	e76c      	b.n	8007f36 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800805c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800805e:	f000 fb55 	bl	800870c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008062:	f000 feb1 	bl	8008dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008068:	4618      	mov	r0, r3
 800806a:	3738      	adds	r7, #56	@ 0x38
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08e      	sub	sp, #56	@ 0x38
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10d      	bne.n	80080a8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008090:	b672      	cpsid	i
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	b662      	cpsie	i
 80080a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <xQueueGenericSendFromISR+0x42>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <xQueueGenericSendFromISR+0x46>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <xQueueGenericSendFromISR+0x48>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10d      	bne.n	80080dc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c4:	b672      	cpsid	i
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	b662      	cpsie	i
 80080d4:	623b      	str	r3, [r7, #32]
}
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	e7fd      	b.n	80080d8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d103      	bne.n	80080ea <xQueueGenericSendFromISR+0x76>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <xQueueGenericSendFromISR+0x7a>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <xQueueGenericSendFromISR+0x7c>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10d      	bne.n	8008110 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	61fb      	str	r3, [r7, #28]
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	e7fd      	b.n	800810c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008110:	f002 fa9c 	bl	800a64c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008114:	f3ef 8211 	mrs	r2, BASEPRI
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	b672      	cpsid	i
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	b662      	cpsie	i
 800812c:	61ba      	str	r2, [r7, #24]
 800812e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008130:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008132:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813c:	429a      	cmp	r2, r3
 800813e:	d302      	bcc.n	8008146 <xQueueGenericSendFromISR+0xd2>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d12c      	bne.n	80081a0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800814c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008156:	f000 fa49 	bl	80085ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800815a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d112      	bne.n	800818a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d016      	beq.n	800819a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800816c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816e:	3324      	adds	r3, #36	@ 0x24
 8008170:	4618      	mov	r0, r3
 8008172:	f001 f853 	bl	800921c <xTaskRemoveFromEventList>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	e007      	b.n	800819a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800818a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800818e:	3301      	adds	r3, #1
 8008190:	b2db      	uxtb	r3, r3
 8008192:	b25a      	sxtb	r2, r3
 8008194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800819a:	2301      	movs	r3, #1
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800819e:	e001      	b.n	80081a4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3738      	adds	r7, #56	@ 0x38
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08c      	sub	sp, #48	@ 0x30
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10d      	bne.n	80081f2 <xQueueReceive+0x36>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081da:	b672      	cpsid	i
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	b662      	cpsie	i
 80081ea:	623b      	str	r3, [r7, #32]
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	e7fd      	b.n	80081ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <xQueueReceive+0x44>
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <xQueueReceive+0x48>
 8008200:	2301      	movs	r3, #1
 8008202:	e000      	b.n	8008206 <xQueueReceive+0x4a>
 8008204:	2300      	movs	r3, #0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10d      	bne.n	8008226 <xQueueReceive+0x6a>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820e:	b672      	cpsid	i
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	b662      	cpsie	i
 800821e:	61fb      	str	r3, [r7, #28]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008226:	f001 f9d7 	bl	80095d8 <xTaskGetSchedulerState>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <xQueueReceive+0x7a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <xQueueReceive+0x7e>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueReceive+0x80>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10d      	bne.n	800825c <xQueueReceive+0xa0>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	b672      	cpsid	i
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	b662      	cpsie	i
 8008254:	61bb      	str	r3, [r7, #24]
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800825c:	f002 f90e 	bl	800a47c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008264:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01f      	beq.n	80082ac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008270:	f000 fa26 	bl	80086c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	1e5a      	subs	r2, r3, #1
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00f      	beq.n	80082a4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	3310      	adds	r3, #16
 8008288:	4618      	mov	r0, r3
 800828a:	f000 ffc7 	bl	800921c <xTaskRemoveFromEventList>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d007      	beq.n	80082a4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008294:	4b3c      	ldr	r3, [pc, #240]	@ (8008388 <xQueueReceive+0x1cc>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082a4:	f002 f920 	bl	800a4e8 <vPortExitCritical>
				return pdPASS;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e069      	b.n	8008380 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082b2:	f002 f919 	bl	800a4e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e062      	b.n	8008380 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d106      	bne.n	80082ce <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082c0:	f107 0310 	add.w	r3, r7, #16
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 f80f 	bl	80092e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082ca:	2301      	movs	r3, #1
 80082cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ce:	f002 f90b 	bl	800a4e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082d2:	f000 fd6b 	bl	8008dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082d6:	f002 f8d1 	bl	800a47c <vPortEnterCritical>
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d103      	bne.n	80082f0 <xQueueReceive+0x134>
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082f6:	b25b      	sxtb	r3, r3
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d103      	bne.n	8008306 <xQueueReceive+0x14a>
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008306:	f002 f8ef 	bl	800a4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800830a:	1d3a      	adds	r2, r7, #4
 800830c:	f107 0310 	add.w	r3, r7, #16
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fffe 	bl	8009314 <xTaskCheckForTimeOut>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d123      	bne.n	8008366 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800831e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008320:	f000 fa46 	bl	80087b0 <prvIsQueueEmpty>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d017      	beq.n	800835a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	3324      	adds	r3, #36	@ 0x24
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	4611      	mov	r1, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f000 ff1c 	bl	8009170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800833a:	f000 f9e7 	bl	800870c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800833e:	f000 fd43 	bl	8008dc8 <xTaskResumeAll>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d189      	bne.n	800825c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008348:	4b0f      	ldr	r3, [pc, #60]	@ (8008388 <xQueueReceive+0x1cc>)
 800834a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	e780      	b.n	800825c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800835a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800835c:	f000 f9d6 	bl	800870c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008360:	f000 fd32 	bl	8008dc8 <xTaskResumeAll>
 8008364:	e77a      	b.n	800825c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008368:	f000 f9d0 	bl	800870c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800836c:	f000 fd2c 	bl	8008dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008372:	f000 fa1d 	bl	80087b0 <prvIsQueueEmpty>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	f43f af6f 	beq.w	800825c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800837e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008380:	4618      	mov	r0, r3
 8008382:	3730      	adds	r7, #48	@ 0x30
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08e      	sub	sp, #56	@ 0x38
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008396:	2300      	movs	r3, #0
 8008398:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800839e:	2300      	movs	r3, #0
 80083a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10d      	bne.n	80083c4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	b672      	cpsid	i
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	b662      	cpsie	i
 80083bc:	623b      	str	r3, [r7, #32]
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00d      	beq.n	80083e8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d0:	b672      	cpsid	i
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	b662      	cpsie	i
 80083e0:	61fb      	str	r3, [r7, #28]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083e8:	f001 f8f6 	bl	80095d8 <xTaskGetSchedulerState>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <xQueueSemaphoreTake+0x6c>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <xQueueSemaphoreTake+0x70>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e000      	b.n	80083fe <xQueueSemaphoreTake+0x72>
 80083fc:	2300      	movs	r3, #0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10d      	bne.n	800841e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008406:	b672      	cpsid	i
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	b662      	cpsie	i
 8008416:	61bb      	str	r3, [r7, #24]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800841e:	f002 f82d 	bl	800a47c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008426:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d024      	beq.n	8008478 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d104      	bne.n	8008448 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800843e:	f001 fa4d 	bl	80098dc <pvTaskIncrementMutexHeldCount>
 8008442:	4602      	mov	r2, r0
 8008444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008446:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00f      	beq.n	8008470 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	3310      	adds	r3, #16
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fee1 	bl	800921c <xTaskRemoveFromEventList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d007      	beq.n	8008470 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008460:	4b55      	ldr	r3, [pc, #340]	@ (80085b8 <xQueueSemaphoreTake+0x22c>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008470:	f002 f83a 	bl	800a4e8 <vPortExitCritical>
				return pdPASS;
 8008474:	2301      	movs	r3, #1
 8008476:	e09a      	b.n	80085ae <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d114      	bne.n	80084a8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00d      	beq.n	80084a0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	b672      	cpsid	i
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	b662      	cpsie	i
 8008498:	617b      	str	r3, [r7, #20]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084a0:	f002 f822 	bl	800a4e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084a4:	2300      	movs	r3, #0
 80084a6:	e082      	b.n	80085ae <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084ae:	f107 030c 	add.w	r3, r7, #12
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 ff18 	bl	80092e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084bc:	f002 f814 	bl	800a4e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c0:	f000 fc74 	bl	8008dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c4:	f001 ffda 	bl	800a47c <vPortEnterCritical>
 80084c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084ce:	b25b      	sxtb	r3, r3
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d4:	d103      	bne.n	80084de <xQueueSemaphoreTake+0x152>
 80084d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084e4:	b25b      	sxtb	r3, r3
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d103      	bne.n	80084f4 <xQueueSemaphoreTake+0x168>
 80084ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084f4:	f001 fff8 	bl	800a4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084f8:	463a      	mov	r2, r7
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f000 ff07 	bl	8009314 <xTaskCheckForTimeOut>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d132      	bne.n	8008572 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800850c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800850e:	f000 f94f 	bl	80087b0 <prvIsQueueEmpty>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d026      	beq.n	8008566 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008520:	f001 ffac 	bl	800a47c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	4618      	mov	r0, r3
 800852a:	f001 f873 	bl	8009614 <xTaskPriorityInherit>
 800852e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008530:	f001 ffda 	bl	800a4e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	3324      	adds	r3, #36	@ 0x24
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fe17 	bl	8009170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008544:	f000 f8e2 	bl	800870c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008548:	f000 fc3e 	bl	8008dc8 <xTaskResumeAll>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	f47f af65 	bne.w	800841e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008554:	4b18      	ldr	r3, [pc, #96]	@ (80085b8 <xQueueSemaphoreTake+0x22c>)
 8008556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	e75b      	b.n	800841e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008566:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008568:	f000 f8d0 	bl	800870c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800856c:	f000 fc2c 	bl	8008dc8 <xTaskResumeAll>
 8008570:	e755      	b.n	800841e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008572:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008574:	f000 f8ca 	bl	800870c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008578:	f000 fc26 	bl	8008dc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800857c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800857e:	f000 f917 	bl	80087b0 <prvIsQueueEmpty>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	f43f af4a 	beq.w	800841e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00d      	beq.n	80085ac <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008590:	f001 ff74 	bl	800a47c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008596:	f000 f811 	bl	80085bc <prvGetDisinheritPriorityAfterTimeout>
 800859a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800859c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 f912 	bl	80097cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085a8:	f001 ff9e 	bl	800a4e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3738      	adds	r7, #56	@ 0x38
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d006      	beq.n	80085da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e001      	b.n	80085de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085de:	68fb      	ldr	r3, [r7, #12]
	}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10d      	bne.n	8008626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d14d      	bne.n	80086ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	4618      	mov	r0, r3
 8008618:	f001 f864 	bl	80096e4 <xTaskPriorityDisinherit>
 800861c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	609a      	str	r2, [r3, #8]
 8008624:	e043      	b.n	80086ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d119      	bne.n	8008660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6858      	ldr	r0, [r3, #4]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008634:	461a      	mov	r2, r3
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	f003 fab1 	bl	800bb9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d32b      	bcc.n	80086ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]
 800865e:	e026      	b.n	80086ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68d8      	ldr	r0, [r3, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	461a      	mov	r2, r3
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	f003 fa97 	bl	800bb9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008678:	425b      	negs	r3, r3
 800867a:	441a      	add	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d207      	bcs.n	800869c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008694:	425b      	negs	r3, r3
 8008696:	441a      	add	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d105      	bne.n	80086ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086b6:	697b      	ldr	r3, [r7, #20]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d018      	beq.n	8008704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086da:	441a      	add	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d303      	bcc.n	80086f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68d9      	ldr	r1, [r3, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fc:	461a      	mov	r2, r3
 80086fe:	6838      	ldr	r0, [r7, #0]
 8008700:	f003 fa4d 	bl	800bb9e <memcpy>
	}
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008714:	f001 feb2 	bl	800a47c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800871e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008720:	e011      	b.n	8008746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008726:	2b00      	cmp	r3, #0
 8008728:	d012      	beq.n	8008750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3324      	adds	r3, #36	@ 0x24
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fd74 	bl	800921c <xTaskRemoveFromEventList>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800873a:	f000 fe53 	bl	80093e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	3b01      	subs	r3, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	dce9      	bgt.n	8008722 <prvUnlockQueue+0x16>
 800874e:	e000      	b.n	8008752 <prvUnlockQueue+0x46>
					break;
 8008750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	22ff      	movs	r2, #255	@ 0xff
 8008756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800875a:	f001 fec5 	bl	800a4e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800875e:	f001 fe8d 	bl	800a47c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800876a:	e011      	b.n	8008790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d012      	beq.n	800879a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3310      	adds	r3, #16
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fd4f 	bl	800921c <xTaskRemoveFromEventList>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008784:	f000 fe2e 	bl	80093e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	3b01      	subs	r3, #1
 800878c:	b2db      	uxtb	r3, r3
 800878e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008794:	2b00      	cmp	r3, #0
 8008796:	dce9      	bgt.n	800876c <prvUnlockQueue+0x60>
 8008798:	e000      	b.n	800879c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800879a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	22ff      	movs	r2, #255	@ 0xff
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087a4:	f001 fea0 	bl	800a4e8 <vPortExitCritical>
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087b8:	f001 fe60 	bl	800a47c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e001      	b.n	80087ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ce:	f001 fe8b 	bl	800a4e8 <vPortExitCritical>

	return xReturn;
 80087d2:	68fb      	ldr	r3, [r7, #12]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087e4:	f001 fe4a 	bl	800a47c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d102      	bne.n	80087fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e001      	b.n	80087fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087fe:	f001 fe73 	bl	800a4e8 <vPortExitCritical>

	return xReturn;
 8008802:	68fb      	ldr	r3, [r7, #12]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	e014      	b.n	8008846 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800881c:	4a0f      	ldr	r2, [pc, #60]	@ (800885c <vQueueAddToRegistry+0x50>)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008828:	490c      	ldr	r1, [pc, #48]	@ (800885c <vQueueAddToRegistry+0x50>)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008832:	4a0a      	ldr	r2, [pc, #40]	@ (800885c <vQueueAddToRegistry+0x50>)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	4413      	add	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800883e:	e006      	b.n	800884e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b07      	cmp	r3, #7
 800884a:	d9e7      	bls.n	800881c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	200018a8 	.word	0x200018a8

08008860 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008870:	f001 fe04 	bl	800a47c <vPortEnterCritical>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800887a:	b25b      	sxtb	r3, r3
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d103      	bne.n	800888a <vQueueWaitForMessageRestricted+0x2a>
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008890:	b25b      	sxtb	r3, r3
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d103      	bne.n	80088a0 <vQueueWaitForMessageRestricted+0x40>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088a0:	f001 fe22 	bl	800a4e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3324      	adds	r3, #36	@ 0x24
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fc83 	bl	80091c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f7ff ff26 	bl	800870c <prvUnlockQueue>
	}
 80088c0:	bf00      	nop
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08e      	sub	sp, #56	@ 0x38
 80088cc:	af04      	add	r7, sp, #16
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10d      	bne.n	80088f8 <xTaskCreateStatic+0x30>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e0:	b672      	cpsid	i
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	b662      	cpsie	i
 80088f0:	623b      	str	r3, [r7, #32]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80088f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10d      	bne.n	800891a <xTaskCreateStatic+0x52>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	b672      	cpsid	i
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	b662      	cpsie	i
 8008912:	61fb      	str	r3, [r7, #28]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800891a:	23a8      	movs	r3, #168	@ 0xa8
 800891c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2ba8      	cmp	r3, #168	@ 0xa8
 8008922:	d00d      	beq.n	8008940 <xTaskCreateStatic+0x78>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	b672      	cpsid	i
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	b662      	cpsie	i
 8008938:	61bb      	str	r3, [r7, #24]
}
 800893a:	bf00      	nop
 800893c:	bf00      	nop
 800893e:	e7fd      	b.n	800893c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008940:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01e      	beq.n	8008986 <xTaskCreateStatic+0xbe>
 8008948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01b      	beq.n	8008986 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008956:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	2202      	movs	r2, #2
 800895c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008960:	2300      	movs	r3, #0
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	9302      	str	r3, [sp, #8]
 8008968:	f107 0314 	add.w	r3, r7, #20
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f851 	bl	8008a20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800897e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008980:	f000 f8f8 	bl	8008b74 <prvAddNewTaskToReadyList>
 8008984:	e001      	b.n	800898a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800898a:	697b      	ldr	r3, [r7, #20]
	}
 800898c:	4618      	mov	r0, r3
 800898e:	3728      	adds	r7, #40	@ 0x28
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08c      	sub	sp, #48	@ 0x30
 8008998:	af04      	add	r7, sp, #16
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089a4:	88fb      	ldrh	r3, [r7, #6]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fe95 	bl	800a6d8 <pvPortMalloc>
 80089ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089b6:	20a8      	movs	r0, #168	@ 0xa8
 80089b8:	f001 fe8e 	bl	800a6d8 <pvPortMalloc>
 80089bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80089ca:	e005      	b.n	80089d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089cc:	6978      	ldr	r0, [r7, #20]
 80089ce:	f001 ff51 	bl	800a874 <vPortFree>
 80089d2:	e001      	b.n	80089d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d017      	beq.n	8008a0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f80f 	bl	8008a20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a02:	69f8      	ldr	r0, [r7, #28]
 8008a04:	f000 f8b6 	bl	8008b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	61bb      	str	r3, [r7, #24]
 8008a0c:	e002      	b.n	8008a14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a14:	69bb      	ldr	r3, [r7, #24]
	}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3720      	adds	r7, #32
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	461a      	mov	r2, r3
 8008a38:	21a5      	movs	r1, #165	@ 0xa5
 8008a3a:	f002 ffc8 	bl	800b9ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008a48:	440b      	add	r3, r1
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f023 0307 	bic.w	r3, r3, #7
 8008a56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00d      	beq.n	8008a7e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a66:	b672      	cpsid	i
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	b662      	cpsie	i
 8008a76:	617b      	str	r3, [r7, #20]
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	e7fd      	b.n	8008a7a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01f      	beq.n	8008ac4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
 8008a88:	e012      	b.n	8008ab0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	7819      	ldrb	r1, [r3, #0]
 8008a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	4413      	add	r3, r2
 8008a98:	3334      	adds	r3, #52	@ 0x34
 8008a9a:	460a      	mov	r2, r1
 8008a9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d006      	beq.n	8008ab8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	3301      	adds	r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	2b0f      	cmp	r3, #15
 8008ab4:	d9e9      	bls.n	8008a8a <prvInitialiseNewTask+0x6a>
 8008ab6:	e000      	b.n	8008aba <prvInitialiseNewTask+0x9a>
			{
				break;
 8008ab8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ac2:	e003      	b.n	8008acc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	2b37      	cmp	r3, #55	@ 0x37
 8008ad0:	d901      	bls.n	8008ad6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ad2:	2337      	movs	r3, #55	@ 0x37
 8008ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ada:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ae0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	3304      	adds	r3, #4
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe ff0d 	bl	800790c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	3318      	adds	r3, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe ff08 	bl	800790c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	3354      	adds	r3, #84	@ 0x54
 8008b26:	224c      	movs	r2, #76	@ 0x4c
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 ff4f 	bl	800b9ce <memset>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	4a0d      	ldr	r2, [pc, #52]	@ (8008b68 <prvInitialiseNewTask+0x148>)
 8008b34:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	4a0c      	ldr	r2, [pc, #48]	@ (8008b6c <prvInitialiseNewTask+0x14c>)
 8008b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b70 <prvInitialiseNewTask+0x150>)
 8008b40:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	69b8      	ldr	r0, [r7, #24]
 8008b48:	f001 fb8c 	bl	800a264 <pxPortInitialiseStack>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b5e:	bf00      	nop
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20005e94 	.word	0x20005e94
 8008b6c:	20005efc 	.word	0x20005efc
 8008b70:	20005f64 	.word	0x20005f64

08008b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b7c:	f001 fc7e 	bl	800a47c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b80:	4b2d      	ldr	r3, [pc, #180]	@ (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a2c      	ldr	r2, [pc, #176]	@ (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b92:	4a2a      	ldr	r2, [pc, #168]	@ (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b98:	4b27      	ldr	r3, [pc, #156]	@ (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d110      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ba0:	f000 fc44 	bl	800942c <prvInitialiseTaskLists>
 8008ba4:	e00d      	b.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ba6:	4b26      	ldr	r3, [pc, #152]	@ (8008c40 <prvAddNewTaskToReadyList+0xcc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bae:	4b23      	ldr	r3, [pc, #140]	@ (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d802      	bhi.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bc2:	4b20      	ldr	r3, [pc, #128]	@ (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c48 <prvAddNewTaskToReadyList+0xd4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d903      	bls.n	8008be8 <prvAddNewTaskToReadyList+0x74>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be4:	4a18      	ldr	r2, [pc, #96]	@ (8008c48 <prvAddNewTaskToReadyList+0xd4>)
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4a15      	ldr	r2, [pc, #84]	@ (8008c4c <prvAddNewTaskToReadyList+0xd8>)
 8008bf6:	441a      	add	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7fe fe91 	bl	8007926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c04:	f001 fc70 	bl	800a4e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c08:	4b0d      	ldr	r3, [pc, #52]	@ (8008c40 <prvAddNewTaskToReadyList+0xcc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c10:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d207      	bcs.n	8008c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c50 <prvAddNewTaskToReadyList+0xdc>)
 8008c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20001dbc 	.word	0x20001dbc
 8008c3c:	200018e8 	.word	0x200018e8
 8008c40:	20001dc8 	.word	0x20001dc8
 8008c44:	20001dd8 	.word	0x20001dd8
 8008c48:	20001dc4 	.word	0x20001dc4
 8008c4c:	200018ec 	.word	0x200018ec
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01a      	beq.n	8008c9c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c66:	4b15      	ldr	r3, [pc, #84]	@ (8008cbc <vTaskDelay+0x68>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00d      	beq.n	8008c8a <vTaskDelay+0x36>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	b672      	cpsid	i
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	b662      	cpsie	i
 8008c82:	60bb      	str	r3, [r7, #8]
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008c8a:	f000 f88f 	bl	8008dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c8e:	2100      	movs	r1, #0
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fe37 	bl	8009904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c96:	f000 f897 	bl	8008dc8 <xTaskResumeAll>
 8008c9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d107      	bne.n	8008cb2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008ca2:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <vTaskDelay+0x6c>)
 8008ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cb2:	bf00      	nop
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20001de4 	.word	0x20001de4
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	@ 0x28
 8008cc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cd2:	463a      	mov	r2, r7
 8008cd4:	1d39      	adds	r1, r7, #4
 8008cd6:	f107 0308 	add.w	r3, r7, #8
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe fdc2 	bl	8007864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	9202      	str	r2, [sp, #8]
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	2300      	movs	r3, #0
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	460a      	mov	r2, r1
 8008cf2:	4926      	ldr	r1, [pc, #152]	@ (8008d8c <vTaskStartScheduler+0xc8>)
 8008cf4:	4826      	ldr	r0, [pc, #152]	@ (8008d90 <vTaskStartScheduler+0xcc>)
 8008cf6:	f7ff fde7 	bl	80088c8 <xTaskCreateStatic>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	4a25      	ldr	r2, [pc, #148]	@ (8008d94 <vTaskStartScheduler+0xd0>)
 8008cfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d00:	4b24      	ldr	r3, [pc, #144]	@ (8008d94 <vTaskStartScheduler+0xd0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e001      	b.n	8008d12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d102      	bne.n	8008d1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d18:	f000 fe48 	bl	80099ac <xTimerCreateTimerTask>
 8008d1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d11d      	bne.n	8008d60 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	b672      	cpsid	i
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	b662      	cpsie	i
 8008d38:	613b      	str	r3, [r7, #16]
}
 8008d3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d3c:	4b16      	ldr	r3, [pc, #88]	@ (8008d98 <vTaskStartScheduler+0xd4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3354      	adds	r3, #84	@ 0x54
 8008d42:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <vTaskStartScheduler+0xd8>)
 8008d44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d46:	4b16      	ldr	r3, [pc, #88]	@ (8008da0 <vTaskStartScheduler+0xdc>)
 8008d48:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d4e:	4b15      	ldr	r3, [pc, #84]	@ (8008da4 <vTaskStartScheduler+0xe0>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d54:	4b14      	ldr	r3, [pc, #80]	@ (8008da8 <vTaskStartScheduler+0xe4>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d5a:	f001 fb11 	bl	800a380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d5e:	e011      	b.n	8008d84 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d66:	d10d      	bne.n	8008d84 <vTaskStartScheduler+0xc0>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	b672      	cpsid	i
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	b662      	cpsie	i
 8008d7c:	60fb      	str	r3, [r7, #12]
}
 8008d7e:	bf00      	nop
 8008d80:	bf00      	nop
 8008d82:	e7fd      	b.n	8008d80 <vTaskStartScheduler+0xbc>
}
 8008d84:	bf00      	nop
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	0800f424 	.word	0x0800f424
 8008d90:	080093fd 	.word	0x080093fd
 8008d94:	20001de0 	.word	0x20001de0
 8008d98:	200018e8 	.word	0x200018e8
 8008d9c:	2000017c 	.word	0x2000017c
 8008da0:	20001ddc 	.word	0x20001ddc
 8008da4:	20001dc8 	.word	0x20001dc8
 8008da8:	20001dc0 	.word	0x20001dc0

08008dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008db0:	4b04      	ldr	r3, [pc, #16]	@ (8008dc4 <vTaskSuspendAll+0x18>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3301      	adds	r3, #1
 8008db6:	4a03      	ldr	r2, [pc, #12]	@ (8008dc4 <vTaskSuspendAll+0x18>)
 8008db8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008dba:	bf00      	nop
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	20001de4 	.word	0x20001de4

08008dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dd6:	4b43      	ldr	r3, [pc, #268]	@ (8008ee4 <xTaskResumeAll+0x11c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10d      	bne.n	8008dfa <xTaskResumeAll+0x32>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	b672      	cpsid	i
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	b662      	cpsie	i
 8008df2:	603b      	str	r3, [r7, #0]
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	e7fd      	b.n	8008df6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dfa:	f001 fb3f 	bl	800a47c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dfe:	4b39      	ldr	r3, [pc, #228]	@ (8008ee4 <xTaskResumeAll+0x11c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	4a37      	ldr	r2, [pc, #220]	@ (8008ee4 <xTaskResumeAll+0x11c>)
 8008e06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e08:	4b36      	ldr	r3, [pc, #216]	@ (8008ee4 <xTaskResumeAll+0x11c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d162      	bne.n	8008ed6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e10:	4b35      	ldr	r3, [pc, #212]	@ (8008ee8 <xTaskResumeAll+0x120>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d05e      	beq.n	8008ed6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e18:	e02f      	b.n	8008e7a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e1a:	4b34      	ldr	r3, [pc, #208]	@ (8008eec <xTaskResumeAll+0x124>)
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3318      	adds	r3, #24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fdda 	bl	80079e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe fdd5 	bl	80079e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef0 <xTaskResumeAll+0x128>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d903      	bls.n	8008e4a <xTaskResumeAll+0x82>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	4a2a      	ldr	r2, [pc, #168]	@ (8008ef0 <xTaskResumeAll+0x128>)
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a27      	ldr	r2, [pc, #156]	@ (8008ef4 <xTaskResumeAll+0x12c>)
 8008e58:	441a      	add	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4610      	mov	r0, r2
 8008e62:	f7fe fd60 	bl	8007926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e6a:	4b23      	ldr	r3, [pc, #140]	@ (8008ef8 <xTaskResumeAll+0x130>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008e74:	4b21      	ldr	r3, [pc, #132]	@ (8008efc <xTaskResumeAll+0x134>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8008eec <xTaskResumeAll+0x124>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1cb      	bne.n	8008e1a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e88:	f000 fb76 	bl	8009578 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008f00 <xTaskResumeAll+0x138>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d010      	beq.n	8008eba <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e98:	f000 f846 	bl	8008f28 <xTaskIncrementTick>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008ea2:	4b16      	ldr	r3, [pc, #88]	@ (8008efc <xTaskResumeAll+0x134>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f1      	bne.n	8008e98 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008eb4:	4b12      	ldr	r3, [pc, #72]	@ (8008f00 <xTaskResumeAll+0x138>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008eba:	4b10      	ldr	r3, [pc, #64]	@ (8008efc <xTaskResumeAll+0x134>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f04 <xTaskResumeAll+0x13c>)
 8008ec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ed6:	f001 fb07 	bl	800a4e8 <vPortExitCritical>

	return xAlreadyYielded;
 8008eda:	68bb      	ldr	r3, [r7, #8]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20001de4 	.word	0x20001de4
 8008ee8:	20001dbc 	.word	0x20001dbc
 8008eec:	20001d7c 	.word	0x20001d7c
 8008ef0:	20001dc4 	.word	0x20001dc4
 8008ef4:	200018ec 	.word	0x200018ec
 8008ef8:	200018e8 	.word	0x200018e8
 8008efc:	20001dd0 	.word	0x20001dd0
 8008f00:	20001dcc 	.word	0x20001dcc
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f0e:	4b05      	ldr	r3, [pc, #20]	@ (8008f24 <xTaskGetTickCount+0x1c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f14:	687b      	ldr	r3, [r7, #4]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20001dc0 	.word	0x20001dc0

08008f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f32:	4b50      	ldr	r3, [pc, #320]	@ (8009074 <xTaskIncrementTick+0x14c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f040 808c 	bne.w	8009054 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8009078 <xTaskIncrementTick+0x150>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3301      	adds	r3, #1
 8008f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f44:	4a4c      	ldr	r2, [pc, #304]	@ (8009078 <xTaskIncrementTick+0x150>)
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d123      	bne.n	8008f98 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f50:	4b4a      	ldr	r3, [pc, #296]	@ (800907c <xTaskIncrementTick+0x154>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00d      	beq.n	8008f76 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5e:	b672      	cpsid	i
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	b662      	cpsie	i
 8008f6e:	603b      	str	r3, [r7, #0]
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	e7fd      	b.n	8008f72 <xTaskIncrementTick+0x4a>
 8008f76:	4b41      	ldr	r3, [pc, #260]	@ (800907c <xTaskIncrementTick+0x154>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	4b40      	ldr	r3, [pc, #256]	@ (8009080 <xTaskIncrementTick+0x158>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a3e      	ldr	r2, [pc, #248]	@ (800907c <xTaskIncrementTick+0x154>)
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	4a3e      	ldr	r2, [pc, #248]	@ (8009080 <xTaskIncrementTick+0x158>)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009084 <xTaskIncrementTick+0x15c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	4a3c      	ldr	r2, [pc, #240]	@ (8009084 <xTaskIncrementTick+0x15c>)
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	f000 faf0 	bl	8009578 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f98:	4b3b      	ldr	r3, [pc, #236]	@ (8009088 <xTaskIncrementTick+0x160>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d349      	bcc.n	8009036 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa2:	4b36      	ldr	r3, [pc, #216]	@ (800907c <xTaskIncrementTick+0x154>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fac:	4b36      	ldr	r3, [pc, #216]	@ (8009088 <xTaskIncrementTick+0x160>)
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb2:	601a      	str	r2, [r3, #0]
					break;
 8008fb4:	e03f      	b.n	8009036 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb6:	4b31      	ldr	r3, [pc, #196]	@ (800907c <xTaskIncrementTick+0x154>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d203      	bcs.n	8008fd6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fce:	4a2e      	ldr	r2, [pc, #184]	@ (8009088 <xTaskIncrementTick+0x160>)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fd4:	e02f      	b.n	8009036 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fe fd00 	bl	80079e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d004      	beq.n	8008ff2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	3318      	adds	r3, #24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe fcf7 	bl	80079e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff6:	4b25      	ldr	r3, [pc, #148]	@ (800908c <xTaskIncrementTick+0x164>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d903      	bls.n	8009006 <xTaskIncrementTick+0xde>
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009002:	4a22      	ldr	r2, [pc, #136]	@ (800908c <xTaskIncrementTick+0x164>)
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4a1f      	ldr	r2, [pc, #124]	@ (8009090 <xTaskIncrementTick+0x168>)
 8009014:	441a      	add	r2, r3
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	3304      	adds	r3, #4
 800901a:	4619      	mov	r1, r3
 800901c:	4610      	mov	r0, r2
 800901e:	f7fe fc82 	bl	8007926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009026:	4b1b      	ldr	r3, [pc, #108]	@ (8009094 <xTaskIncrementTick+0x16c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902c:	429a      	cmp	r2, r3
 800902e:	d3b8      	bcc.n	8008fa2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009030:	2301      	movs	r3, #1
 8009032:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009034:	e7b5      	b.n	8008fa2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009036:	4b17      	ldr	r3, [pc, #92]	@ (8009094 <xTaskIncrementTick+0x16c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903c:	4914      	ldr	r1, [pc, #80]	@ (8009090 <xTaskIncrementTick+0x168>)
 800903e:	4613      	mov	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	440b      	add	r3, r1
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d907      	bls.n	800905e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800904e:	2301      	movs	r3, #1
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	e004      	b.n	800905e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009054:	4b10      	ldr	r3, [pc, #64]	@ (8009098 <xTaskIncrementTick+0x170>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	4a0f      	ldr	r2, [pc, #60]	@ (8009098 <xTaskIncrementTick+0x170>)
 800905c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800905e:	4b0f      	ldr	r3, [pc, #60]	@ (800909c <xTaskIncrementTick+0x174>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009066:	2301      	movs	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800906a:	697b      	ldr	r3, [r7, #20]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20001de4 	.word	0x20001de4
 8009078:	20001dc0 	.word	0x20001dc0
 800907c:	20001d74 	.word	0x20001d74
 8009080:	20001d78 	.word	0x20001d78
 8009084:	20001dd4 	.word	0x20001dd4
 8009088:	20001ddc 	.word	0x20001ddc
 800908c:	20001dc4 	.word	0x20001dc4
 8009090:	200018ec 	.word	0x200018ec
 8009094:	200018e8 	.word	0x200018e8
 8009098:	20001dcc 	.word	0x20001dcc
 800909c:	20001dd0 	.word	0x20001dd0

080090a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009158 <vTaskSwitchContext+0xb8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090ae:	4b2b      	ldr	r3, [pc, #172]	@ (800915c <vTaskSwitchContext+0xbc>)
 80090b0:	2201      	movs	r2, #1
 80090b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090b4:	e049      	b.n	800914a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80090b6:	4b29      	ldr	r3, [pc, #164]	@ (800915c <vTaskSwitchContext+0xbc>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090bc:	4b28      	ldr	r3, [pc, #160]	@ (8009160 <vTaskSwitchContext+0xc0>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	e013      	b.n	80090ec <vTaskSwitchContext+0x4c>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10d      	bne.n	80090e6 <vTaskSwitchContext+0x46>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ce:	b672      	cpsid	i
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	b662      	cpsie	i
 80090de:	607b      	str	r3, [r7, #4]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <vTaskSwitchContext+0x42>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	491d      	ldr	r1, [pc, #116]	@ (8009164 <vTaskSwitchContext+0xc4>)
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0e1      	beq.n	80090c4 <vTaskSwitchContext+0x24>
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4a16      	ldr	r2, [pc, #88]	@ (8009164 <vTaskSwitchContext+0xc4>)
 800910c:	4413      	add	r3, r2
 800910e:	60bb      	str	r3, [r7, #8]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	3308      	adds	r3, #8
 8009122:	429a      	cmp	r2, r3
 8009124:	d104      	bne.n	8009130 <vTaskSwitchContext+0x90>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	605a      	str	r2, [r3, #4]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	4a0c      	ldr	r2, [pc, #48]	@ (8009168 <vTaskSwitchContext+0xc8>)
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	4a09      	ldr	r2, [pc, #36]	@ (8009160 <vTaskSwitchContext+0xc0>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009140:	4b09      	ldr	r3, [pc, #36]	@ (8009168 <vTaskSwitchContext+0xc8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3354      	adds	r3, #84	@ 0x54
 8009146:	4a09      	ldr	r2, [pc, #36]	@ (800916c <vTaskSwitchContext+0xcc>)
 8009148:	6013      	str	r3, [r2, #0]
}
 800914a:	bf00      	nop
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	20001de4 	.word	0x20001de4
 800915c:	20001dd0 	.word	0x20001dd0
 8009160:	20001dc4 	.word	0x20001dc4
 8009164:	200018ec 	.word	0x200018ec
 8009168:	200018e8 	.word	0x200018e8
 800916c:	2000017c 	.word	0x2000017c

08009170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10d      	bne.n	800919c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009184:	b672      	cpsid	i
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	b662      	cpsie	i
 8009194:	60fb      	str	r3, [r7, #12]
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	e7fd      	b.n	8009198 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800919c:	4b07      	ldr	r3, [pc, #28]	@ (80091bc <vTaskPlaceOnEventList+0x4c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3318      	adds	r3, #24
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7fe fbe2 	bl	800796e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091aa:	2101      	movs	r1, #1
 80091ac:	6838      	ldr	r0, [r7, #0]
 80091ae:	f000 fba9 	bl	8009904 <prvAddCurrentTaskToDelayedList>
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	200018e8 	.word	0x200018e8

080091c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10d      	bne.n	80091ee <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d6:	b672      	cpsid	i
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	b662      	cpsie	i
 80091e6:	617b      	str	r3, [r7, #20]
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	e7fd      	b.n	80091ea <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009218 <vTaskPlaceOnEventListRestricted+0x58>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3318      	adds	r3, #24
 80091f4:	4619      	mov	r1, r3
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7fe fb95 	bl	8007926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009202:	f04f 33ff 	mov.w	r3, #4294967295
 8009206:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	68b8      	ldr	r0, [r7, #8]
 800920c:	f000 fb7a 	bl	8009904 <prvAddCurrentTaskToDelayedList>
	}
 8009210:	bf00      	nop
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	200018e8 	.word	0x200018e8

0800921c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10d      	bne.n	800924e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009236:	b672      	cpsid	i
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	b662      	cpsie	i
 8009246:	60fb      	str	r3, [r7, #12]
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	e7fd      	b.n	800924a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	3318      	adds	r3, #24
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fbc4 	bl	80079e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009258:	4b1d      	ldr	r3, [pc, #116]	@ (80092d0 <xTaskRemoveFromEventList+0xb4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d11d      	bne.n	800929c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3304      	adds	r3, #4
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe fbbb 	bl	80079e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800926e:	4b19      	ldr	r3, [pc, #100]	@ (80092d4 <xTaskRemoveFromEventList+0xb8>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d903      	bls.n	800927e <xTaskRemoveFromEventList+0x62>
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927a:	4a16      	ldr	r2, [pc, #88]	@ (80092d4 <xTaskRemoveFromEventList+0xb8>)
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4a13      	ldr	r2, [pc, #76]	@ (80092d8 <xTaskRemoveFromEventList+0xbc>)
 800928c:	441a      	add	r2, r3
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	3304      	adds	r3, #4
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7fe fb46 	bl	8007926 <vListInsertEnd>
 800929a:	e005      	b.n	80092a8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3318      	adds	r3, #24
 80092a0:	4619      	mov	r1, r3
 80092a2:	480e      	ldr	r0, [pc, #56]	@ (80092dc <xTaskRemoveFromEventList+0xc0>)
 80092a4:	f7fe fb3f 	bl	8007926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ac:	4b0c      	ldr	r3, [pc, #48]	@ (80092e0 <xTaskRemoveFromEventList+0xc4>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d905      	bls.n	80092c2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092b6:	2301      	movs	r3, #1
 80092b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092ba:	4b0a      	ldr	r3, [pc, #40]	@ (80092e4 <xTaskRemoveFromEventList+0xc8>)
 80092bc:	2201      	movs	r2, #1
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	e001      	b.n	80092c6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092c6:	697b      	ldr	r3, [r7, #20]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20001de4 	.word	0x20001de4
 80092d4:	20001dc4 	.word	0x20001dc4
 80092d8:	200018ec 	.word	0x200018ec
 80092dc:	20001d7c 	.word	0x20001d7c
 80092e0:	200018e8 	.word	0x200018e8
 80092e4:	20001dd0 	.word	0x20001dd0

080092e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092f0:	4b06      	ldr	r3, [pc, #24]	@ (800930c <vTaskInternalSetTimeOutState+0x24>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092f8:	4b05      	ldr	r3, [pc, #20]	@ (8009310 <vTaskInternalSetTimeOutState+0x28>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	605a      	str	r2, [r3, #4]
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	20001dd4 	.word	0x20001dd4
 8009310:	20001dc0 	.word	0x20001dc0

08009314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10d      	bne.n	8009340 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	b672      	cpsid	i
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	b662      	cpsie	i
 8009338:	613b      	str	r3, [r7, #16]
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	e7fd      	b.n	800933c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10d      	bne.n	8009362 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	b672      	cpsid	i
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	b662      	cpsie	i
 800935a:	60fb      	str	r3, [r7, #12]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009362:	f001 f88b 	bl	800a47c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009366:	4b1d      	ldr	r3, [pc, #116]	@ (80093dc <xTaskCheckForTimeOut+0xc8>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937e:	d102      	bne.n	8009386 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	e023      	b.n	80093ce <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4b15      	ldr	r3, [pc, #84]	@ (80093e0 <xTaskCheckForTimeOut+0xcc>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d007      	beq.n	80093a2 <xTaskCheckForTimeOut+0x8e>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	429a      	cmp	r2, r3
 800939a:	d302      	bcc.n	80093a2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800939c:	2301      	movs	r3, #1
 800939e:	61fb      	str	r3, [r7, #28]
 80093a0:	e015      	b.n	80093ce <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d20b      	bcs.n	80093c4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff ff95 	bl	80092e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	e004      	b.n	80093ce <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093ca:	2301      	movs	r3, #1
 80093cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093ce:	f001 f88b 	bl	800a4e8 <vPortExitCritical>

	return xReturn;
 80093d2:	69fb      	ldr	r3, [r7, #28]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3720      	adds	r7, #32
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20001dc0 	.word	0x20001dc0
 80093e0:	20001dd4 	.word	0x20001dd4

080093e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093e8:	4b03      	ldr	r3, [pc, #12]	@ (80093f8 <vTaskMissedYield+0x14>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]
}
 80093ee:	bf00      	nop
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20001dd0 	.word	0x20001dd0

080093fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009404:	f000 f852 	bl	80094ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009408:	4b06      	ldr	r3, [pc, #24]	@ (8009424 <prvIdleTask+0x28>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d9f9      	bls.n	8009404 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <prvIdleTask+0x2c>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009420:	e7f0      	b.n	8009404 <prvIdleTask+0x8>
 8009422:	bf00      	nop
 8009424:	200018ec 	.word	0x200018ec
 8009428:	e000ed04 	.word	0xe000ed04

0800942c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009432:	2300      	movs	r3, #0
 8009434:	607b      	str	r3, [r7, #4]
 8009436:	e00c      	b.n	8009452 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4a12      	ldr	r2, [pc, #72]	@ (800948c <prvInitialiseTaskLists+0x60>)
 8009444:	4413      	add	r3, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe fa40 	bl	80078cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3301      	adds	r3, #1
 8009450:	607b      	str	r3, [r7, #4]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b37      	cmp	r3, #55	@ 0x37
 8009456:	d9ef      	bls.n	8009438 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009458:	480d      	ldr	r0, [pc, #52]	@ (8009490 <prvInitialiseTaskLists+0x64>)
 800945a:	f7fe fa37 	bl	80078cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800945e:	480d      	ldr	r0, [pc, #52]	@ (8009494 <prvInitialiseTaskLists+0x68>)
 8009460:	f7fe fa34 	bl	80078cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009464:	480c      	ldr	r0, [pc, #48]	@ (8009498 <prvInitialiseTaskLists+0x6c>)
 8009466:	f7fe fa31 	bl	80078cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800946a:	480c      	ldr	r0, [pc, #48]	@ (800949c <prvInitialiseTaskLists+0x70>)
 800946c:	f7fe fa2e 	bl	80078cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009470:	480b      	ldr	r0, [pc, #44]	@ (80094a0 <prvInitialiseTaskLists+0x74>)
 8009472:	f7fe fa2b 	bl	80078cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009476:	4b0b      	ldr	r3, [pc, #44]	@ (80094a4 <prvInitialiseTaskLists+0x78>)
 8009478:	4a05      	ldr	r2, [pc, #20]	@ (8009490 <prvInitialiseTaskLists+0x64>)
 800947a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800947c:	4b0a      	ldr	r3, [pc, #40]	@ (80094a8 <prvInitialiseTaskLists+0x7c>)
 800947e:	4a05      	ldr	r2, [pc, #20]	@ (8009494 <prvInitialiseTaskLists+0x68>)
 8009480:	601a      	str	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	200018ec 	.word	0x200018ec
 8009490:	20001d4c 	.word	0x20001d4c
 8009494:	20001d60 	.word	0x20001d60
 8009498:	20001d7c 	.word	0x20001d7c
 800949c:	20001d90 	.word	0x20001d90
 80094a0:	20001da8 	.word	0x20001da8
 80094a4:	20001d74 	.word	0x20001d74
 80094a8:	20001d78 	.word	0x20001d78

080094ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094b2:	e019      	b.n	80094e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094b4:	f000 ffe2 	bl	800a47c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b8:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <prvCheckTasksWaitingTermination+0x50>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fa8b 	bl	80079e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009500 <prvCheckTasksWaitingTermination+0x54>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	4a0b      	ldr	r2, [pc, #44]	@ (8009500 <prvCheckTasksWaitingTermination+0x54>)
 80094d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009504 <prvCheckTasksWaitingTermination+0x58>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3b01      	subs	r3, #1
 80094da:	4a0a      	ldr	r2, [pc, #40]	@ (8009504 <prvCheckTasksWaitingTermination+0x58>)
 80094dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094de:	f001 f803 	bl	800a4e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f810 	bl	8009508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094e8:	4b06      	ldr	r3, [pc, #24]	@ (8009504 <prvCheckTasksWaitingTermination+0x58>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e1      	bne.n	80094b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20001d90 	.word	0x20001d90
 8009500:	20001dbc 	.word	0x20001dbc
 8009504:	20001da4 	.word	0x20001da4

08009508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3354      	adds	r3, #84	@ 0x54
 8009514:	4618      	mov	r0, r3
 8009516:	f002 fa89 	bl	800ba2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009520:	2b00      	cmp	r3, #0
 8009522:	d108      	bne.n	8009536 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009528:	4618      	mov	r0, r3
 800952a:	f001 f9a3 	bl	800a874 <vPortFree>
				vPortFree( pxTCB );
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 f9a0 	bl	800a874 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009534:	e01b      	b.n	800956e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800953c:	2b01      	cmp	r3, #1
 800953e:	d103      	bne.n	8009548 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 f997 	bl	800a874 <vPortFree>
	}
 8009546:	e012      	b.n	800956e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800954e:	2b02      	cmp	r3, #2
 8009550:	d00d      	beq.n	800956e <prvDeleteTCB+0x66>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009556:	b672      	cpsid	i
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	b662      	cpsie	i
 8009566:	60fb      	str	r3, [r7, #12]
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	e7fd      	b.n	800956a <prvDeleteTCB+0x62>
	}
 800956e:	bf00      	nop
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
	...

08009578 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800957e:	4b0c      	ldr	r3, [pc, #48]	@ (80095b0 <prvResetNextTaskUnblockTime+0x38>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d104      	bne.n	8009592 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009588:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <prvResetNextTaskUnblockTime+0x3c>)
 800958a:	f04f 32ff 	mov.w	r2, #4294967295
 800958e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009590:	e008      	b.n	80095a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009592:	4b07      	ldr	r3, [pc, #28]	@ (80095b0 <prvResetNextTaskUnblockTime+0x38>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4a04      	ldr	r2, [pc, #16]	@ (80095b4 <prvResetNextTaskUnblockTime+0x3c>)
 80095a2:	6013      	str	r3, [r2, #0]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	20001d74 	.word	0x20001d74
 80095b4:	20001ddc 	.word	0x20001ddc

080095b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80095be:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80095c4:	687b      	ldr	r3, [r7, #4]
	}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	200018e8 	.word	0x200018e8

080095d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095de:	4b0b      	ldr	r3, [pc, #44]	@ (800960c <xTaskGetSchedulerState+0x34>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095e6:	2301      	movs	r3, #1
 80095e8:	607b      	str	r3, [r7, #4]
 80095ea:	e008      	b.n	80095fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ec:	4b08      	ldr	r3, [pc, #32]	@ (8009610 <xTaskGetSchedulerState+0x38>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095f4:	2302      	movs	r3, #2
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	e001      	b.n	80095fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095fa:	2300      	movs	r3, #0
 80095fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095fe:	687b      	ldr	r3, [r7, #4]
	}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	20001dc8 	.word	0x20001dc8
 8009610:	20001de4 	.word	0x20001de4

08009614 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d051      	beq.n	80096ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800962e:	4b2a      	ldr	r3, [pc, #168]	@ (80096d8 <xTaskPriorityInherit+0xc4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009634:	429a      	cmp	r2, r3
 8009636:	d241      	bcs.n	80096bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	db06      	blt.n	800964e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009640:	4b25      	ldr	r3, [pc, #148]	@ (80096d8 <xTaskPriorityInherit+0xc4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009646:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6959      	ldr	r1, [r3, #20]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4a1f      	ldr	r2, [pc, #124]	@ (80096dc <xTaskPriorityInherit+0xc8>)
 8009660:	4413      	add	r3, r2
 8009662:	4299      	cmp	r1, r3
 8009664:	d122      	bne.n	80096ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	3304      	adds	r3, #4
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe f9b8 	bl	80079e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009670:	4b19      	ldr	r3, [pc, #100]	@ (80096d8 <xTaskPriorityInherit+0xc4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967e:	4b18      	ldr	r3, [pc, #96]	@ (80096e0 <xTaskPriorityInherit+0xcc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d903      	bls.n	800968e <xTaskPriorityInherit+0x7a>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968a:	4a15      	ldr	r2, [pc, #84]	@ (80096e0 <xTaskPriorityInherit+0xcc>)
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4a10      	ldr	r2, [pc, #64]	@ (80096dc <xTaskPriorityInherit+0xc8>)
 800969c:	441a      	add	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	3304      	adds	r3, #4
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f7fe f93e 	bl	8007926 <vListInsertEnd>
 80096aa:	e004      	b.n	80096b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096ac:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <xTaskPriorityInherit+0xc4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80096b6:	2301      	movs	r3, #1
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	e008      	b.n	80096ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096c0:	4b05      	ldr	r3, [pc, #20]	@ (80096d8 <xTaskPriorityInherit+0xc4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d201      	bcs.n	80096ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80096ca:	2301      	movs	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096ce:	68fb      	ldr	r3, [r7, #12]
	}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	200018e8 	.word	0x200018e8
 80096dc:	200018ec 	.word	0x200018ec
 80096e0:	20001dc4 	.word	0x20001dc4

080096e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d05c      	beq.n	80097b4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096fa:	4b31      	ldr	r3, [pc, #196]	@ (80097c0 <xTaskPriorityDisinherit+0xdc>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	429a      	cmp	r2, r3
 8009702:	d00d      	beq.n	8009720 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	b672      	cpsid	i
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	b662      	cpsie	i
 8009718:	60fb      	str	r3, [r7, #12]
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	e7fd      	b.n	800971c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10d      	bne.n	8009744 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972c:	b672      	cpsid	i
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	b662      	cpsie	i
 800973c:	60bb      	str	r3, [r7, #8]
}
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	e7fd      	b.n	8009740 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009748:	1e5a      	subs	r2, r3, #1
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009756:	429a      	cmp	r2, r3
 8009758:	d02c      	beq.n	80097b4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800975e:	2b00      	cmp	r3, #0
 8009760:	d128      	bne.n	80097b4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	3304      	adds	r3, #4
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe f93a 	bl	80079e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009778:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009784:	4b0f      	ldr	r3, [pc, #60]	@ (80097c4 <xTaskPriorityDisinherit+0xe0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d903      	bls.n	8009794 <xTaskPriorityDisinherit+0xb0>
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	4a0c      	ldr	r2, [pc, #48]	@ (80097c4 <xTaskPriorityDisinherit+0xe0>)
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009798:	4613      	mov	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4a09      	ldr	r2, [pc, #36]	@ (80097c8 <xTaskPriorityDisinherit+0xe4>)
 80097a2:	441a      	add	r2, r3
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	3304      	adds	r3, #4
 80097a8:	4619      	mov	r1, r3
 80097aa:	4610      	mov	r0, r2
 80097ac:	f7fe f8bb 	bl	8007926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097b0:	2301      	movs	r3, #1
 80097b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097b4:	697b      	ldr	r3, [r7, #20]
	}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	200018e8 	.word	0x200018e8
 80097c4:	20001dc4 	.word	0x20001dc4
 80097c8:	200018ec 	.word	0x200018ec

080097cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d070      	beq.n	80098c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f0:	b672      	cpsid	i
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	b662      	cpsie	i
 8009800:	60fb      	str	r3, [r7, #12]
}
 8009802:	bf00      	nop
 8009804:	bf00      	nop
 8009806:	e7fd      	b.n	8009804 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d902      	bls.n	8009818 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	61fb      	str	r3, [r7, #28]
 8009816:	e002      	b.n	800981e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800981c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	429a      	cmp	r2, r3
 8009826:	d04e      	beq.n	80098c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	429a      	cmp	r2, r3
 8009830:	d149      	bne.n	80098c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009832:	4b27      	ldr	r3, [pc, #156]	@ (80098d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	429a      	cmp	r2, r3
 800983a:	d10d      	bne.n	8009858 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009840:	b672      	cpsid	i
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	b662      	cpsie	i
 8009850:	60bb      	str	r3, [r7, #8]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	2b00      	cmp	r3, #0
 800986a:	db04      	blt.n	8009876 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	6959      	ldr	r1, [r3, #20]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4a13      	ldr	r2, [pc, #76]	@ (80098d4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009886:	4413      	add	r3, r2
 8009888:	4299      	cmp	r1, r3
 800988a:	d11c      	bne.n	80098c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	3304      	adds	r3, #4
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe f8a5 	bl	80079e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800989a:	4b0f      	ldr	r3, [pc, #60]	@ (80098d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d903      	bls.n	80098aa <vTaskPriorityDisinheritAfterTimeout+0xde>
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a6:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4a07      	ldr	r2, [pc, #28]	@ (80098d4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80098b8:	441a      	add	r2, r3
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	3304      	adds	r3, #4
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f7fe f830 	bl	8007926 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098c6:	bf00      	nop
 80098c8:	3720      	adds	r7, #32
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	200018e8 	.word	0x200018e8
 80098d4:	200018ec 	.word	0x200018ec
 80098d8:	20001dc4 	.word	0x20001dc4

080098dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80098e0:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <pvTaskIncrementMutexHeldCount+0x24>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d004      	beq.n	80098f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80098e8:	4b05      	ldr	r3, [pc, #20]	@ (8009900 <pvTaskIncrementMutexHeldCount+0x24>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098ee:	3201      	adds	r2, #1
 80098f0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80098f2:	4b03      	ldr	r3, [pc, #12]	@ (8009900 <pvTaskIncrementMutexHeldCount+0x24>)
 80098f4:	681b      	ldr	r3, [r3, #0]
	}
 80098f6:	4618      	mov	r0, r3
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	200018e8 	.word	0x200018e8

08009904 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800990e:	4b21      	ldr	r3, [pc, #132]	@ (8009994 <prvAddCurrentTaskToDelayedList+0x90>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009914:	4b20      	ldr	r3, [pc, #128]	@ (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3304      	adds	r3, #4
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe f860 	bl	80079e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009926:	d10a      	bne.n	800993e <prvAddCurrentTaskToDelayedList+0x3a>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800992e:	4b1a      	ldr	r3, [pc, #104]	@ (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4819      	ldr	r0, [pc, #100]	@ (800999c <prvAddCurrentTaskToDelayedList+0x98>)
 8009938:	f7fd fff5 	bl	8007926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800993c:	e026      	b.n	800998c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4413      	add	r3, r2
 8009944:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009946:	4b14      	ldr	r3, [pc, #80]	@ (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	429a      	cmp	r2, r3
 8009954:	d209      	bcs.n	800996a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009956:	4b12      	ldr	r3, [pc, #72]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b0f      	ldr	r3, [pc, #60]	@ (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3304      	adds	r3, #4
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f7fe f803 	bl	800796e <vListInsert>
}
 8009968:	e010      	b.n	800998c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996a:	4b0e      	ldr	r3, [pc, #56]	@ (80099a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b0a      	ldr	r3, [pc, #40]	@ (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fd fff9 	bl	800796e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800997c:	4b0a      	ldr	r3, [pc, #40]	@ (80099a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	d202      	bcs.n	800998c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009986:	4a08      	ldr	r2, [pc, #32]	@ (80099a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6013      	str	r3, [r2, #0]
}
 800998c:	bf00      	nop
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20001dc0 	.word	0x20001dc0
 8009998:	200018e8 	.word	0x200018e8
 800999c:	20001da8 	.word	0x20001da8
 80099a0:	20001d78 	.word	0x20001d78
 80099a4:	20001d74 	.word	0x20001d74
 80099a8:	20001ddc 	.word	0x20001ddc

080099ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	@ 0x28
 80099b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099b6:	f000 fbc5 	bl	800a144 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009a34 <xTimerCreateTimerTask+0x88>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d021      	beq.n	8009a06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099ca:	1d3a      	adds	r2, r7, #4
 80099cc:	f107 0108 	add.w	r1, r7, #8
 80099d0:	f107 030c 	add.w	r3, r7, #12
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fd ff5f 	bl	8007898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	9202      	str	r2, [sp, #8]
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	2313      	movs	r3, #19
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	2300      	movs	r3, #0
 80099ea:	460a      	mov	r2, r1
 80099ec:	4912      	ldr	r1, [pc, #72]	@ (8009a38 <xTimerCreateTimerTask+0x8c>)
 80099ee:	4813      	ldr	r0, [pc, #76]	@ (8009a3c <xTimerCreateTimerTask+0x90>)
 80099f0:	f7fe ff6a 	bl	80088c8 <xTaskCreateStatic>
 80099f4:	4603      	mov	r3, r0
 80099f6:	4a12      	ldr	r2, [pc, #72]	@ (8009a40 <xTimerCreateTimerTask+0x94>)
 80099f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099fa:	4b11      	ldr	r3, [pc, #68]	@ (8009a40 <xTimerCreateTimerTask+0x94>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10d      	bne.n	8009a28 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a10:	b672      	cpsid	i
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	b662      	cpsie	i
 8009a20:	613b      	str	r3, [r7, #16]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009a28:	697b      	ldr	r3, [r7, #20]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20001e18 	.word	0x20001e18
 8009a38:	0800f42c 	.word	0x0800f42c
 8009a3c:	08009ccd 	.word	0x08009ccd
 8009a40:	20001e1c 	.word	0x20001e1c

08009a44 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009a52:	202c      	movs	r0, #44	@ 0x2c
 8009a54:	f000 fe40 	bl	800a6d8 <pvPortMalloc>
 8009a58:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00d      	beq.n	8009a7c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	68b9      	ldr	r1, [r7, #8]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f849 	bl	8009b0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009a7c:	697b      	ldr	r3, [r7, #20]
	}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b08a      	sub	sp, #40	@ 0x28
 8009a8a:	af02      	add	r7, sp, #8
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	60b9      	str	r1, [r7, #8]
 8009a90:	607a      	str	r2, [r7, #4]
 8009a92:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009a94:	232c      	movs	r3, #44	@ 0x2c
 8009a96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b2c      	cmp	r3, #44	@ 0x2c
 8009a9c:	d00d      	beq.n	8009aba <xTimerCreateStatic+0x34>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa2:	b672      	cpsid	i
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	b662      	cpsie	i
 8009ab2:	61bb      	str	r3, [r7, #24]
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	e7fd      	b.n	8009ab6 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009aba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10d      	bne.n	8009ade <xTimerCreateStatic+0x58>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac6:	b672      	cpsid	i
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	b662      	cpsie	i
 8009ad6:	617b      	str	r3, [r7, #20]
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	e7fd      	b.n	8009ada <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00d      	beq.n	8009b04 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	9301      	str	r3, [sp, #4]
 8009af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 f805 	bl	8009b0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009b04:	69fb      	ldr	r3, [r7, #28]
	}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3720      	adds	r7, #32
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b086      	sub	sp, #24
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10d      	bne.n	8009b3e <prvInitialiseNewTimer+0x30>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	b672      	cpsid	i
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	b662      	cpsie	i
 8009b36:	617b      	str	r3, [r7, #20]
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	e7fd      	b.n	8009b3a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d01e      	beq.n	8009b82 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009b44:	f000 fafe 	bl	800a144 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	6a3a      	ldr	r2, [r7, #32]
 8009b5e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	3304      	adds	r3, #4
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fd fed1 	bl	800790c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d008      	beq.n	8009b82 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b76:	f043 0304 	orr.w	r3, r3, #4
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009b82:	bf00      	nop
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08a      	sub	sp, #40	@ 0x28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10d      	bne.n	8009bc0 <xTimerGenericCommand+0x34>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba8:	b672      	cpsid	i
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	b662      	cpsie	i
 8009bb8:	623b      	str	r3, [r7, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bc0:	4b19      	ldr	r3, [pc, #100]	@ (8009c28 <xTimerGenericCommand+0x9c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d02a      	beq.n	8009c1e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	dc18      	bgt.n	8009c0c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bda:	f7ff fcfd 	bl	80095d8 <xTaskGetSchedulerState>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d109      	bne.n	8009bf8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009be4:	4b10      	ldr	r3, [pc, #64]	@ (8009c28 <xTimerGenericCommand+0x9c>)
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	f107 0110 	add.w	r1, r7, #16
 8009bec:	2300      	movs	r3, #0
 8009bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bf0:	f7fe f936 	bl	8007e60 <xQueueGenericSend>
 8009bf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009bf6:	e012      	b.n	8009c1e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8009c28 <xTimerGenericCommand+0x9c>)
 8009bfa:	6818      	ldr	r0, [r3, #0]
 8009bfc:	f107 0110 	add.w	r1, r7, #16
 8009c00:	2300      	movs	r3, #0
 8009c02:	2200      	movs	r2, #0
 8009c04:	f7fe f92c 	bl	8007e60 <xQueueGenericSend>
 8009c08:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c0a:	e008      	b.n	8009c1e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c0c:	4b06      	ldr	r3, [pc, #24]	@ (8009c28 <xTimerGenericCommand+0x9c>)
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	f107 0110 	add.w	r1, r7, #16
 8009c14:	2300      	movs	r3, #0
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	f7fe fa2c 	bl	8008074 <xQueueGenericSendFromISR>
 8009c1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3728      	adds	r7, #40	@ 0x28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20001e18 	.word	0x20001e18

08009c2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c36:	4b24      	ldr	r3, [pc, #144]	@ (8009cc8 <prvProcessExpiredTimer+0x9c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	3304      	adds	r3, #4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fd fecb 	bl	80079e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d025      	beq.n	8009ca4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	699a      	ldr	r2, [r3, #24]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	18d1      	adds	r1, r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	6978      	ldr	r0, [r7, #20]
 8009c66:	f000 f8d7 	bl	8009e18 <prvInsertTimerInActiveList>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d022      	beq.n	8009cb6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c70:	2300      	movs	r3, #0
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	2300      	movs	r3, #0
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6978      	ldr	r0, [r7, #20]
 8009c7c:	f7ff ff86 	bl	8009b8c <xTimerGenericCommand>
 8009c80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d116      	bne.n	8009cb6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8c:	b672      	cpsid	i
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	b662      	cpsie	i
 8009c9c:	60fb      	str	r3, [r7, #12]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009caa:	f023 0301 	bic.w	r3, r3, #1
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	6978      	ldr	r0, [r7, #20]
 8009cbc:	4798      	blx	r3
}
 8009cbe:	bf00      	nop
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20001e10 	.word	0x20001e10

08009ccc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cd4:	f107 0308 	add.w	r3, r7, #8
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f859 	bl	8009d90 <prvGetNextExpireTime>
 8009cde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f805 	bl	8009cf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cea:	f000 f8d7 	bl	8009e9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cee:	bf00      	nop
 8009cf0:	e7f0      	b.n	8009cd4 <prvTimerTask+0x8>
	...

08009cf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cfe:	f7ff f855 	bl	8008dac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f866 	bl	8009dd8 <prvSampleTimeNow>
 8009d0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d130      	bne.n	8009d76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <prvProcessTimerOrBlockTask+0x3c>
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d806      	bhi.n	8009d30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d22:	f7ff f851 	bl	8008dc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff ff7f 	bl	8009c2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d2e:	e024      	b.n	8009d7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d008      	beq.n	8009d48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d36:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <prvProcessTimerOrBlockTask+0x90>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <prvProcessTimerOrBlockTask+0x50>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <prvProcessTimerOrBlockTask+0x52>
 8009d44:	2300      	movs	r3, #0
 8009d46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d48:	4b0f      	ldr	r3, [pc, #60]	@ (8009d88 <prvProcessTimerOrBlockTask+0x94>)
 8009d4a:	6818      	ldr	r0, [r3, #0]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	4619      	mov	r1, r3
 8009d56:	f7fe fd83 	bl	8008860 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d5a:	f7ff f835 	bl	8008dc8 <xTaskResumeAll>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d64:	4b09      	ldr	r3, [pc, #36]	@ (8009d8c <prvProcessTimerOrBlockTask+0x98>)
 8009d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	f3bf 8f6f 	isb	sy
}
 8009d74:	e001      	b.n	8009d7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d76:	f7ff f827 	bl	8008dc8 <xTaskResumeAll>
}
 8009d7a:	bf00      	nop
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20001e14 	.word	0x20001e14
 8009d88:	20001e18 	.word	0x20001e18
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d98:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <prvGetNextExpireTime+0x44>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <prvGetNextExpireTime+0x16>
 8009da2:	2201      	movs	r2, #1
 8009da4:	e000      	b.n	8009da8 <prvGetNextExpireTime+0x18>
 8009da6:	2200      	movs	r2, #0
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d105      	bne.n	8009dc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009db4:	4b07      	ldr	r3, [pc, #28]	@ (8009dd4 <prvGetNextExpireTime+0x44>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	e001      	b.n	8009dc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20001e10 	.word	0x20001e10

08009dd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009de0:	f7ff f892 	bl	8008f08 <xTaskGetTickCount>
 8009de4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009de6:	4b0b      	ldr	r3, [pc, #44]	@ (8009e14 <prvSampleTimeNow+0x3c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d205      	bcs.n	8009dfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009df0:	f000 f940 	bl	800a074 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	e002      	b.n	8009e02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e02:	4a04      	ldr	r2, [pc, #16]	@ (8009e14 <prvSampleTimeNow+0x3c>)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e08:	68fb      	ldr	r3, [r7, #12]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20001e20 	.word	0x20001e20

08009e18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e26:	2300      	movs	r3, #0
 8009e28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d812      	bhi.n	8009e64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	1ad2      	subs	r2, r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d302      	bcc.n	8009e52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	e01b      	b.n	8009e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e52:	4b10      	ldr	r3, [pc, #64]	@ (8009e94 <prvInsertTimerInActiveList+0x7c>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f7fd fd86 	bl	800796e <vListInsert>
 8009e62:	e012      	b.n	8009e8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d206      	bcs.n	8009e7a <prvInsertTimerInActiveList+0x62>
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d302      	bcc.n	8009e7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e74:	2301      	movs	r3, #1
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	e007      	b.n	8009e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e7a:	4b07      	ldr	r3, [pc, #28]	@ (8009e98 <prvInsertTimerInActiveList+0x80>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4619      	mov	r1, r3
 8009e84:	4610      	mov	r0, r2
 8009e86:	f7fd fd72 	bl	800796e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e8a:	697b      	ldr	r3, [r7, #20]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20001e14 	.word	0x20001e14
 8009e98:	20001e10 	.word	0x20001e10

08009e9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08e      	sub	sp, #56	@ 0x38
 8009ea0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ea2:	e0d4      	b.n	800a04e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	da1b      	bge.n	8009ee2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009eaa:	1d3b      	adds	r3, r7, #4
 8009eac:	3304      	adds	r3, #4
 8009eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10d      	bne.n	8009ed2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eba:	b672      	cpsid	i
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	b662      	cpsie	i
 8009eca:	61fb      	str	r3, [r7, #28]
}
 8009ecc:	bf00      	nop
 8009ece:	bf00      	nop
 8009ed0:	e7fd      	b.n	8009ece <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ed8:	6850      	ldr	r0, [r2, #4]
 8009eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009edc:	6892      	ldr	r2, [r2, #8]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f2c0 80b2 	blt.w	800a04e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fd fd70 	bl	80079e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f00:	463b      	mov	r3, r7
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff ff68 	bl	8009dd8 <prvSampleTimeNow>
 8009f08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	f200 809b 	bhi.w	800a048 <prvProcessReceivedCommands+0x1ac>
 8009f12:	a201      	add	r2, pc, #4	@ (adr r2, 8009f18 <prvProcessReceivedCommands+0x7c>)
 8009f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f18:	08009f41 	.word	0x08009f41
 8009f1c:	08009f41 	.word	0x08009f41
 8009f20:	08009f41 	.word	0x08009f41
 8009f24:	08009fbb 	.word	0x08009fbb
 8009f28:	08009fcf 	.word	0x08009fcf
 8009f2c:	0800a01f 	.word	0x0800a01f
 8009f30:	08009f41 	.word	0x08009f41
 8009f34:	08009f41 	.word	0x08009f41
 8009f38:	08009fbb 	.word	0x08009fbb
 8009f3c:	08009fcf 	.word	0x08009fcf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	18d1      	adds	r1, r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f60:	f7ff ff5a 	bl	8009e18 <prvInsertTimerInActiveList>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d070      	beq.n	800a04c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d065      	beq.n	800a04c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	441a      	add	r2, r3
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	2100      	movs	r1, #0
 8009f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f92:	f7ff fdfb 	bl	8009b8c <xTimerGenericCommand>
 8009f96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d156      	bne.n	800a04c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	b672      	cpsid	i
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	b662      	cpsie	i
 8009fb2:	61bb      	str	r3, [r7, #24]
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	e7fd      	b.n	8009fb6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fcc:	e03f      	b.n	800a04e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fd4:	f043 0301 	orr.w	r3, r3, #1
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10d      	bne.n	800a00a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	b672      	cpsid	i
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	b662      	cpsie	i
 800a002:	617b      	str	r3, [r7, #20]
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00c:	699a      	ldr	r2, [r3, #24]
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	18d1      	adds	r1, r2, r3
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a018:	f7ff fefe 	bl	8009e18 <prvInsertTimerInActiveList>
					break;
 800a01c:	e017      	b.n	800a04e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a020:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d103      	bne.n	800a034 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a02c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a02e:	f000 fc21 	bl	800a874 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a032:	e00c      	b.n	800a04e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a03a:	f023 0301 	bic.w	r3, r3, #1
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a042:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a046:	e002      	b.n	800a04e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a048:	bf00      	nop
 800a04a:	e000      	b.n	800a04e <prvProcessReceivedCommands+0x1b2>
					break;
 800a04c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a04e:	4b08      	ldr	r3, [pc, #32]	@ (800a070 <prvProcessReceivedCommands+0x1d4>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	1d39      	adds	r1, r7, #4
 800a054:	2200      	movs	r2, #0
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe f8b0 	bl	80081bc <xQueueReceive>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f47f af20 	bne.w	8009ea4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	3730      	adds	r7, #48	@ 0x30
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20001e18 	.word	0x20001e18

0800a074 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a07a:	e04b      	b.n	800a114 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a07c:	4b2f      	ldr	r3, [pc, #188]	@ (800a13c <prvSwitchTimerLists+0xc8>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a086:	4b2d      	ldr	r3, [pc, #180]	@ (800a13c <prvSwitchTimerLists+0xc8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3304      	adds	r3, #4
 800a094:	4618      	mov	r0, r3
 800a096:	f7fd fca3 	bl	80079e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d031      	beq.n	800a114 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d90e      	bls.n	800a0e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ce:	4b1b      	ldr	r3, [pc, #108]	@ (800a13c <prvSwitchTimerLists+0xc8>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f7fd fc48 	bl	800796e <vListInsert>
 800a0de:	e019      	b.n	800a114 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7ff fd4e 	bl	8009b8c <xTimerGenericCommand>
 800a0f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10d      	bne.n	800a114 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	b672      	cpsid	i
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	b662      	cpsie	i
 800a10c:	603b      	str	r3, [r7, #0]
}
 800a10e:	bf00      	nop
 800a110:	bf00      	nop
 800a112:	e7fd      	b.n	800a110 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a114:	4b09      	ldr	r3, [pc, #36]	@ (800a13c <prvSwitchTimerLists+0xc8>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1ae      	bne.n	800a07c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a11e:	4b07      	ldr	r3, [pc, #28]	@ (800a13c <prvSwitchTimerLists+0xc8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a124:	4b06      	ldr	r3, [pc, #24]	@ (800a140 <prvSwitchTimerLists+0xcc>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a04      	ldr	r2, [pc, #16]	@ (800a13c <prvSwitchTimerLists+0xc8>)
 800a12a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a12c:	4a04      	ldr	r2, [pc, #16]	@ (800a140 <prvSwitchTimerLists+0xcc>)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	6013      	str	r3, [r2, #0]
}
 800a132:	bf00      	nop
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20001e10 	.word	0x20001e10
 800a140:	20001e14 	.word	0x20001e14

0800a144 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a14a:	f000 f997 	bl	800a47c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a14e:	4b15      	ldr	r3, [pc, #84]	@ (800a1a4 <prvCheckForValidListAndQueue+0x60>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d120      	bne.n	800a198 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a156:	4814      	ldr	r0, [pc, #80]	@ (800a1a8 <prvCheckForValidListAndQueue+0x64>)
 800a158:	f7fd fbb8 	bl	80078cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a15c:	4813      	ldr	r0, [pc, #76]	@ (800a1ac <prvCheckForValidListAndQueue+0x68>)
 800a15e:	f7fd fbb5 	bl	80078cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a162:	4b13      	ldr	r3, [pc, #76]	@ (800a1b0 <prvCheckForValidListAndQueue+0x6c>)
 800a164:	4a10      	ldr	r2, [pc, #64]	@ (800a1a8 <prvCheckForValidListAndQueue+0x64>)
 800a166:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a168:	4b12      	ldr	r3, [pc, #72]	@ (800a1b4 <prvCheckForValidListAndQueue+0x70>)
 800a16a:	4a10      	ldr	r2, [pc, #64]	@ (800a1ac <prvCheckForValidListAndQueue+0x68>)
 800a16c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a16e:	2300      	movs	r3, #0
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	4b11      	ldr	r3, [pc, #68]	@ (800a1b8 <prvCheckForValidListAndQueue+0x74>)
 800a174:	4a11      	ldr	r2, [pc, #68]	@ (800a1bc <prvCheckForValidListAndQueue+0x78>)
 800a176:	2110      	movs	r1, #16
 800a178:	2040      	movs	r0, #64	@ 0x40
 800a17a:	f7fd fcc7 	bl	8007b0c <xQueueGenericCreateStatic>
 800a17e:	4603      	mov	r3, r0
 800a180:	4a08      	ldr	r2, [pc, #32]	@ (800a1a4 <prvCheckForValidListAndQueue+0x60>)
 800a182:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a184:	4b07      	ldr	r3, [pc, #28]	@ (800a1a4 <prvCheckForValidListAndQueue+0x60>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a18c:	4b05      	ldr	r3, [pc, #20]	@ (800a1a4 <prvCheckForValidListAndQueue+0x60>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	490b      	ldr	r1, [pc, #44]	@ (800a1c0 <prvCheckForValidListAndQueue+0x7c>)
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe fb3a 	bl	800880c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a198:	f000 f9a6 	bl	800a4e8 <vPortExitCritical>
}
 800a19c:	bf00      	nop
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20001e18 	.word	0x20001e18
 800a1a8:	20001de8 	.word	0x20001de8
 800a1ac:	20001dfc 	.word	0x20001dfc
 800a1b0:	20001e10 	.word	0x20001e10
 800a1b4:	20001e14 	.word	0x20001e14
 800a1b8:	20002224 	.word	0x20002224
 800a1bc:	20001e24 	.word	0x20001e24
 800a1c0:	0800f434 	.word	0x0800f434

0800a1c4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10d      	bne.n	800a1f2 <xTimerIsTimerActive+0x2e>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	b672      	cpsid	i
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	b662      	cpsie	i
 800a1ea:	60fb      	str	r3, [r7, #12]
}
 800a1ec:	bf00      	nop
 800a1ee:	bf00      	nop
 800a1f0:	e7fd      	b.n	800a1ee <xTimerIsTimerActive+0x2a>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a1f2:	f000 f943 	bl	800a47c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d102      	bne.n	800a20a <xTimerIsTimerActive+0x46>
		{
			xReturn = pdFALSE;
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	e001      	b.n	800a20e <xTimerIsTimerActive+0x4a>
		}
		else
		{
			xReturn = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a20e:	f000 f96b 	bl	800a4e8 <vPortExitCritical>

	return xReturn;
 800a212:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10d      	bne.n	800a24a <pvTimerGetTimerID+0x2e>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	b672      	cpsid	i
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	b662      	cpsie	i
 800a242:	60fb      	str	r3, [r7, #12]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800a24a:	f000 f917 	bl	800a47c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a254:	f000 f948 	bl	800a4e8 <vPortExitCritical>

	return pvReturn;
 800a258:	693b      	ldr	r3, [r7, #16]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3b04      	subs	r3, #4
 800a274:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a27c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3b04      	subs	r3, #4
 800a282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f023 0201 	bic.w	r2, r3, #1
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3b04      	subs	r3, #4
 800a292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a294:	4a0c      	ldr	r2, [pc, #48]	@ (800a2c8 <pxPortInitialiseStack+0x64>)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3b14      	subs	r3, #20
 800a29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f06f 0202 	mvn.w	r2, #2
 800a2b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3b20      	subs	r3, #32
 800a2b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	0800a2cd 	.word	0x0800a2cd

0800a2cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2d6:	4b15      	ldr	r3, [pc, #84]	@ (800a32c <prvTaskExitError+0x60>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d00d      	beq.n	800a2fc <prvTaskExitError+0x30>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e4:	b672      	cpsid	i
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	b662      	cpsie	i
 800a2f4:	60fb      	str	r3, [r7, #12]
}
 800a2f6:	bf00      	nop
 800a2f8:	bf00      	nop
 800a2fa:	e7fd      	b.n	800a2f8 <prvTaskExitError+0x2c>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a300:	b672      	cpsid	i
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	b662      	cpsie	i
 800a310:	60bb      	str	r3, [r7, #8]
}
 800a312:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a314:	bf00      	nop
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0fc      	beq.n	800a316 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a31c:	bf00      	nop
 800a31e:	bf00      	nop
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	2000016c 	.word	0x2000016c

0800a330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a330:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <pxCurrentTCBConst2>)
 800a332:	6819      	ldr	r1, [r3, #0]
 800a334:	6808      	ldr	r0, [r1, #0]
 800a336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	f380 8809 	msr	PSP, r0
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f04f 0000 	mov.w	r0, #0
 800a346:	f380 8811 	msr	BASEPRI, r0
 800a34a:	4770      	bx	lr
 800a34c:	f3af 8000 	nop.w

0800a350 <pxCurrentTCBConst2>:
 800a350:	200018e8 	.word	0x200018e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop

0800a358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a358:	4808      	ldr	r0, [pc, #32]	@ (800a37c <prvPortStartFirstTask+0x24>)
 800a35a:	6800      	ldr	r0, [r0, #0]
 800a35c:	6800      	ldr	r0, [r0, #0]
 800a35e:	f380 8808 	msr	MSP, r0
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8814 	msr	CONTROL, r0
 800a36a:	b662      	cpsie	i
 800a36c:	b661      	cpsie	f
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	df00      	svc	0
 800a378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a37a:	bf00      	nop
 800a37c:	e000ed08 	.word	0xe000ed08

0800a380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a386:	4b37      	ldr	r3, [pc, #220]	@ (800a464 <xPortStartScheduler+0xe4>)
 800a388:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	22ff      	movs	r2, #255	@ 0xff
 800a396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a468 <xPortStartScheduler+0xe8>)
 800a3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3ae:	4b2f      	ldr	r3, [pc, #188]	@ (800a46c <xPortStartScheduler+0xec>)
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3b4:	e009      	b.n	800a3ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a3b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a46c <xPortStartScheduler+0xec>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a46c <xPortStartScheduler+0xec>)
 800a3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3d2:	2b80      	cmp	r3, #128	@ 0x80
 800a3d4:	d0ef      	beq.n	800a3b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3d6:	4b25      	ldr	r3, [pc, #148]	@ (800a46c <xPortStartScheduler+0xec>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f1c3 0307 	rsb	r3, r3, #7
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d00d      	beq.n	800a3fe <xPortStartScheduler+0x7e>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e6:	b672      	cpsid	i
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	b662      	cpsie	i
 800a3f6:	60bb      	str	r3, [r7, #8]
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	e7fd      	b.n	800a3fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a46c <xPortStartScheduler+0xec>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	4a19      	ldr	r2, [pc, #100]	@ (800a46c <xPortStartScheduler+0xec>)
 800a406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a408:	4b18      	ldr	r3, [pc, #96]	@ (800a46c <xPortStartScheduler+0xec>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a410:	4a16      	ldr	r2, [pc, #88]	@ (800a46c <xPortStartScheduler+0xec>)
 800a412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	b2da      	uxtb	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a41c:	4b14      	ldr	r3, [pc, #80]	@ (800a470 <xPortStartScheduler+0xf0>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a13      	ldr	r2, [pc, #76]	@ (800a470 <xPortStartScheduler+0xf0>)
 800a422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a428:	4b11      	ldr	r3, [pc, #68]	@ (800a470 <xPortStartScheduler+0xf0>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a10      	ldr	r2, [pc, #64]	@ (800a470 <xPortStartScheduler+0xf0>)
 800a42e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a434:	f000 f8dc 	bl	800a5f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a438:	4b0e      	ldr	r3, [pc, #56]	@ (800a474 <xPortStartScheduler+0xf4>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a43e:	f000 f8fb 	bl	800a638 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <xPortStartScheduler+0xf8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a0c      	ldr	r2, [pc, #48]	@ (800a478 <xPortStartScheduler+0xf8>)
 800a448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a44c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a44e:	f7ff ff83 	bl	800a358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a452:	f7fe fe25 	bl	80090a0 <vTaskSwitchContext>
	prvTaskExitError();
 800a456:	f7ff ff39 	bl	800a2cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	e000e400 	.word	0xe000e400
 800a468:	20002274 	.word	0x20002274
 800a46c:	20002278 	.word	0x20002278
 800a470:	e000ed20 	.word	0xe000ed20
 800a474:	2000016c 	.word	0x2000016c
 800a478:	e000ef34 	.word	0xe000ef34

0800a47c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a486:	b672      	cpsid	i
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	b662      	cpsie	i
 800a496:	607b      	str	r3, [r7, #4]
}
 800a498:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a49a:	4b11      	ldr	r3, [pc, #68]	@ (800a4e0 <vPortEnterCritical+0x64>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e0 <vPortEnterCritical+0x64>)
 800a4a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e0 <vPortEnterCritical+0x64>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d112      	bne.n	800a4d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e4 <vPortEnterCritical+0x68>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00d      	beq.n	800a4d2 <vPortEnterCritical+0x56>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ba:	b672      	cpsid	i
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	b662      	cpsie	i
 800a4ca:	603b      	str	r3, [r7, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	e7fd      	b.n	800a4ce <vPortEnterCritical+0x52>
	}
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	2000016c 	.word	0x2000016c
 800a4e4:	e000ed04 	.word	0xe000ed04

0800a4e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4ee:	4b13      	ldr	r3, [pc, #76]	@ (800a53c <vPortExitCritical+0x54>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10d      	bne.n	800a512 <vPortExitCritical+0x2a>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fa:	b672      	cpsid	i
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	b662      	cpsie	i
 800a50a:	607b      	str	r3, [r7, #4]
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	e7fd      	b.n	800a50e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a512:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <vPortExitCritical+0x54>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3b01      	subs	r3, #1
 800a518:	4a08      	ldr	r2, [pc, #32]	@ (800a53c <vPortExitCritical+0x54>)
 800a51a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a51c:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <vPortExitCritical+0x54>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d105      	bne.n	800a530 <vPortExitCritical+0x48>
 800a524:	2300      	movs	r3, #0
 800a526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	f383 8811 	msr	BASEPRI, r3
}
 800a52e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	2000016c 	.word	0x2000016c

0800a540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a540:	f3ef 8009 	mrs	r0, PSP
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4b15      	ldr	r3, [pc, #84]	@ (800a5a0 <pxCurrentTCBConst>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f01e 0f10 	tst.w	lr, #16
 800a550:	bf08      	it	eq
 800a552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	6010      	str	r0, [r2, #0]
 800a55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a564:	b672      	cpsid	i
 800a566:	f380 8811 	msr	BASEPRI, r0
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	b662      	cpsie	i
 800a574:	f7fe fd94 	bl	80090a0 <vTaskSwitchContext>
 800a578:	f04f 0000 	mov.w	r0, #0
 800a57c:	f380 8811 	msr	BASEPRI, r0
 800a580:	bc09      	pop	{r0, r3}
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	6808      	ldr	r0, [r1, #0]
 800a586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58a:	f01e 0f10 	tst.w	lr, #16
 800a58e:	bf08      	it	eq
 800a590:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a594:	f380 8809 	msr	PSP, r0
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop

0800a5a0 <pxCurrentTCBConst>:
 800a5a0:	200018e8 	.word	0x200018e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	b672      	cpsid	i
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	b662      	cpsie	i
 800a5c2:	607b      	str	r3, [r7, #4]
}
 800a5c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5c6:	f7fe fcaf 	bl	8008f28 <xTaskIncrementTick>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5d0:	4b06      	ldr	r3, [pc, #24]	@ (800a5ec <SysTick_Handler+0x44>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	f383 8811 	msr	BASEPRI, r3
}
 800a5e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	e000ed04 	.word	0xe000ed04

0800a5f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a624 <vPortSetupTimerInterrupt+0x34>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a628 <vPortSetupTimerInterrupt+0x38>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a600:	4b0a      	ldr	r3, [pc, #40]	@ (800a62c <vPortSetupTimerInterrupt+0x3c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a0a      	ldr	r2, [pc, #40]	@ (800a630 <vPortSetupTimerInterrupt+0x40>)
 800a606:	fba2 2303 	umull	r2, r3, r2, r3
 800a60a:	099b      	lsrs	r3, r3, #6
 800a60c:	4a09      	ldr	r2, [pc, #36]	@ (800a634 <vPortSetupTimerInterrupt+0x44>)
 800a60e:	3b01      	subs	r3, #1
 800a610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a612:	4b04      	ldr	r3, [pc, #16]	@ (800a624 <vPortSetupTimerInterrupt+0x34>)
 800a614:	2207      	movs	r2, #7
 800a616:	601a      	str	r2, [r3, #0]
}
 800a618:	bf00      	nop
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	e000e010 	.word	0xe000e010
 800a628:	e000e018 	.word	0xe000e018
 800a62c:	20000160 	.word	0x20000160
 800a630:	10624dd3 	.word	0x10624dd3
 800a634:	e000e014 	.word	0xe000e014

0800a638 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a638:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a648 <vPortEnableVFP+0x10>
 800a63c:	6801      	ldr	r1, [r0, #0]
 800a63e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a642:	6001      	str	r1, [r0, #0]
 800a644:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a646:	bf00      	nop
 800a648:	e000ed88 	.word	0xe000ed88

0800a64c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a652:	f3ef 8305 	mrs	r3, IPSR
 800a656:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b0f      	cmp	r3, #15
 800a65c:	d917      	bls.n	800a68e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a65e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6c8 <vPortValidateInterruptPriority+0x7c>)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4413      	add	r3, r2
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a668:	4b18      	ldr	r3, [pc, #96]	@ (800a6cc <vPortValidateInterruptPriority+0x80>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	7afa      	ldrb	r2, [r7, #11]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d20d      	bcs.n	800a68e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a676:	b672      	cpsid	i
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	b662      	cpsie	i
 800a686:	607b      	str	r3, [r7, #4]
}
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
 800a68c:	e7fd      	b.n	800a68a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a68e:	4b10      	ldr	r3, [pc, #64]	@ (800a6d0 <vPortValidateInterruptPriority+0x84>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a696:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d4 <vPortValidateInterruptPriority+0x88>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d90d      	bls.n	800a6ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	b672      	cpsid	i
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	b662      	cpsie	i
 800a6b2:	603b      	str	r3, [r7, #0]
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop
 800a6b8:	e7fd      	b.n	800a6b6 <vPortValidateInterruptPriority+0x6a>
	}
 800a6ba:	bf00      	nop
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	e000e3f0 	.word	0xe000e3f0
 800a6cc:	20002274 	.word	0x20002274
 800a6d0:	e000ed0c 	.word	0xe000ed0c
 800a6d4:	20002278 	.word	0x20002278

0800a6d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	@ 0x28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6e4:	f7fe fb62 	bl	8008dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6e8:	4b5d      	ldr	r3, [pc, #372]	@ (800a860 <pvPortMalloc+0x188>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6f0:	f000 f920 	bl	800a934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a864 <pvPortMalloc+0x18c>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f040 8094 	bne.w	800a82a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d020      	beq.n	800a74a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a708:	2208      	movs	r2, #8
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4413      	add	r3, r2
 800a70e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	2b00      	cmp	r3, #0
 800a718:	d017      	beq.n	800a74a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f023 0307 	bic.w	r3, r3, #7
 800a720:	3308      	adds	r3, #8
 800a722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00d      	beq.n	800a74a <pvPortMalloc+0x72>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	b672      	cpsid	i
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	b662      	cpsie	i
 800a742:	617b      	str	r3, [r7, #20]
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	e7fd      	b.n	800a746 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d06c      	beq.n	800a82a <pvPortMalloc+0x152>
 800a750:	4b45      	ldr	r3, [pc, #276]	@ (800a868 <pvPortMalloc+0x190>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	429a      	cmp	r2, r3
 800a758:	d867      	bhi.n	800a82a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a75a:	4b44      	ldr	r3, [pc, #272]	@ (800a86c <pvPortMalloc+0x194>)
 800a75c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a75e:	4b43      	ldr	r3, [pc, #268]	@ (800a86c <pvPortMalloc+0x194>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a764:	e004      	b.n	800a770 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	429a      	cmp	r2, r3
 800a778:	d903      	bls.n	800a782 <pvPortMalloc+0xaa>
 800a77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1f1      	bne.n	800a766 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a782:	4b37      	ldr	r3, [pc, #220]	@ (800a860 <pvPortMalloc+0x188>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a788:	429a      	cmp	r2, r3
 800a78a:	d04e      	beq.n	800a82a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2208      	movs	r2, #8
 800a792:	4413      	add	r3, r2
 800a794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	1ad2      	subs	r2, r2, r3
 800a7a6:	2308      	movs	r3, #8
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d922      	bls.n	800a7f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	f003 0307 	and.w	r3, r3, #7
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00d      	beq.n	800a7dc <pvPortMalloc+0x104>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c4:	b672      	cpsid	i
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	b662      	cpsie	i
 800a7d4:	613b      	str	r3, [r7, #16]
}
 800a7d6:	bf00      	nop
 800a7d8:	bf00      	nop
 800a7da:	e7fd      	b.n	800a7d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	1ad2      	subs	r2, r2, r3
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7ee:	69b8      	ldr	r0, [r7, #24]
 800a7f0:	f000 f902 	bl	800a9f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a868 <pvPortMalloc+0x190>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a868 <pvPortMalloc+0x190>)
 800a800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a802:	4b19      	ldr	r3, [pc, #100]	@ (800a868 <pvPortMalloc+0x190>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	4b1a      	ldr	r3, [pc, #104]	@ (800a870 <pvPortMalloc+0x198>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d203      	bcs.n	800a816 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a80e:	4b16      	ldr	r3, [pc, #88]	@ (800a868 <pvPortMalloc+0x190>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a17      	ldr	r2, [pc, #92]	@ (800a870 <pvPortMalloc+0x198>)
 800a814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	4b12      	ldr	r3, [pc, #72]	@ (800a864 <pvPortMalloc+0x18c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	431a      	orrs	r2, r3
 800a820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a826:	2200      	movs	r2, #0
 800a828:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a82a:	f7fe facd 	bl	8008dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	f003 0307 	and.w	r3, r3, #7
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00d      	beq.n	800a854 <pvPortMalloc+0x17c>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	b672      	cpsid	i
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	b662      	cpsie	i
 800a84c:	60fb      	str	r3, [r7, #12]
}
 800a84e:	bf00      	nop
 800a850:	bf00      	nop
 800a852:	e7fd      	b.n	800a850 <pvPortMalloc+0x178>
	return pvReturn;
 800a854:	69fb      	ldr	r3, [r7, #28]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3728      	adds	r7, #40	@ 0x28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20005e84 	.word	0x20005e84
 800a864:	20005e90 	.word	0x20005e90
 800a868:	20005e88 	.word	0x20005e88
 800a86c:	20005e7c 	.word	0x20005e7c
 800a870:	20005e8c 	.word	0x20005e8c

0800a874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d04e      	beq.n	800a924 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a886:	2308      	movs	r3, #8
 800a888:	425b      	negs	r3, r3
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4413      	add	r3, r2
 800a88e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	4b24      	ldr	r3, [pc, #144]	@ (800a92c <vPortFree+0xb8>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4013      	ands	r3, r2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10d      	bne.n	800a8be <vPortFree+0x4a>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a6:	b672      	cpsid	i
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	b662      	cpsie	i
 800a8b6:	60fb      	str	r3, [r7, #12]
}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	e7fd      	b.n	800a8ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00d      	beq.n	800a8e2 <vPortFree+0x6e>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ca:	b672      	cpsid	i
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	b662      	cpsie	i
 800a8da:	60bb      	str	r3, [r7, #8]
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	e7fd      	b.n	800a8de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	4b11      	ldr	r3, [pc, #68]	@ (800a92c <vPortFree+0xb8>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d019      	beq.n	800a924 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d115      	bne.n	800a924 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a92c <vPortFree+0xb8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	43db      	mvns	r3, r3
 800a902:	401a      	ands	r2, r3
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a908:	f7fe fa50 	bl	8008dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	4b07      	ldr	r3, [pc, #28]	@ (800a930 <vPortFree+0xbc>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4413      	add	r3, r2
 800a916:	4a06      	ldr	r2, [pc, #24]	@ (800a930 <vPortFree+0xbc>)
 800a918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a91a:	6938      	ldr	r0, [r7, #16]
 800a91c:	f000 f86c 	bl	800a9f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a920:	f7fe fa52 	bl	8008dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a924:	bf00      	nop
 800a926:	3718      	adds	r7, #24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20005e90 	.word	0x20005e90
 800a930:	20005e88 	.word	0x20005e88

0800a934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a93a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a93e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a940:	4b27      	ldr	r3, [pc, #156]	@ (800a9e0 <prvHeapInit+0xac>)
 800a942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f003 0307 	and.w	r3, r3, #7
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00c      	beq.n	800a968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3307      	adds	r3, #7
 800a952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0307 	bic.w	r3, r3, #7
 800a95a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	4a1f      	ldr	r2, [pc, #124]	@ (800a9e0 <prvHeapInit+0xac>)
 800a964:	4413      	add	r3, r2
 800a966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a96c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e4 <prvHeapInit+0xb0>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a972:	4b1c      	ldr	r3, [pc, #112]	@ (800a9e4 <prvHeapInit+0xb0>)
 800a974:	2200      	movs	r2, #0
 800a976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	4413      	add	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a980:	2208      	movs	r2, #8
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f023 0307 	bic.w	r3, r3, #7
 800a98e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4a15      	ldr	r2, [pc, #84]	@ (800a9e8 <prvHeapInit+0xb4>)
 800a994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a996:	4b14      	ldr	r3, [pc, #80]	@ (800a9e8 <prvHeapInit+0xb4>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2200      	movs	r2, #0
 800a99c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a99e:	4b12      	ldr	r3, [pc, #72]	@ (800a9e8 <prvHeapInit+0xb4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e8 <prvHeapInit+0xb4>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a9ec <prvHeapInit+0xb8>)
 800a9c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	4a09      	ldr	r2, [pc, #36]	@ (800a9f0 <prvHeapInit+0xbc>)
 800a9ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9cc:	4b09      	ldr	r3, [pc, #36]	@ (800a9f4 <prvHeapInit+0xc0>)
 800a9ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a9d2:	601a      	str	r2, [r3, #0]
}
 800a9d4:	bf00      	nop
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	2000227c 	.word	0x2000227c
 800a9e4:	20005e7c 	.word	0x20005e7c
 800a9e8:	20005e84 	.word	0x20005e84
 800a9ec:	20005e8c 	.word	0x20005e8c
 800a9f0:	20005e88 	.word	0x20005e88
 800a9f4:	20005e90 	.word	0x20005e90

0800a9f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa00:	4b28      	ldr	r3, [pc, #160]	@ (800aaa4 <prvInsertBlockIntoFreeList+0xac>)
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	e002      	b.n	800aa0c <prvInsertBlockIntoFreeList+0x14>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d8f7      	bhi.n	800aa06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	4413      	add	r3, r2
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d108      	bne.n	800aa3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	441a      	add	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	441a      	add	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d118      	bne.n	800aa80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	4b15      	ldr	r3, [pc, #84]	@ (800aaa8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d00d      	beq.n	800aa76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	441a      	add	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	e008      	b.n	800aa88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa76:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	e003      	b.n	800aa88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d002      	beq.n	800aa96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa96:	bf00      	nop
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20005e7c 	.word	0x20005e7c
 800aaa8:	20005e84 	.word	0x20005e84

0800aaac <__cvt>:
 800aaac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	ec57 6b10 	vmov	r6, r7, d0
 800aab4:	2f00      	cmp	r7, #0
 800aab6:	460c      	mov	r4, r1
 800aab8:	4619      	mov	r1, r3
 800aaba:	463b      	mov	r3, r7
 800aabc:	bfbb      	ittet	lt
 800aabe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aac2:	461f      	movlt	r7, r3
 800aac4:	2300      	movge	r3, #0
 800aac6:	232d      	movlt	r3, #45	@ 0x2d
 800aac8:	700b      	strb	r3, [r1, #0]
 800aaca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aacc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aad0:	4691      	mov	r9, r2
 800aad2:	f023 0820 	bic.w	r8, r3, #32
 800aad6:	bfbc      	itt	lt
 800aad8:	4632      	movlt	r2, r6
 800aada:	4616      	movlt	r6, r2
 800aadc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aae0:	d005      	beq.n	800aaee <__cvt+0x42>
 800aae2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aae6:	d100      	bne.n	800aaea <__cvt+0x3e>
 800aae8:	3401      	adds	r4, #1
 800aaea:	2102      	movs	r1, #2
 800aaec:	e000      	b.n	800aaf0 <__cvt+0x44>
 800aaee:	2103      	movs	r1, #3
 800aaf0:	ab03      	add	r3, sp, #12
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	ab02      	add	r3, sp, #8
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	ec47 6b10 	vmov	d0, r6, r7
 800aafc:	4653      	mov	r3, sl
 800aafe:	4622      	mov	r2, r4
 800ab00:	f001 f8ea 	bl	800bcd8 <_dtoa_r>
 800ab04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab08:	4605      	mov	r5, r0
 800ab0a:	d119      	bne.n	800ab40 <__cvt+0x94>
 800ab0c:	f019 0f01 	tst.w	r9, #1
 800ab10:	d00e      	beq.n	800ab30 <__cvt+0x84>
 800ab12:	eb00 0904 	add.w	r9, r0, r4
 800ab16:	2200      	movs	r2, #0
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	f7f6 f803 	bl	8000b28 <__aeabi_dcmpeq>
 800ab22:	b108      	cbz	r0, 800ab28 <__cvt+0x7c>
 800ab24:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab28:	2230      	movs	r2, #48	@ 0x30
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	454b      	cmp	r3, r9
 800ab2e:	d31e      	bcc.n	800ab6e <__cvt+0xc2>
 800ab30:	9b03      	ldr	r3, [sp, #12]
 800ab32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab34:	1b5b      	subs	r3, r3, r5
 800ab36:	4628      	mov	r0, r5
 800ab38:	6013      	str	r3, [r2, #0]
 800ab3a:	b004      	add	sp, #16
 800ab3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab44:	eb00 0904 	add.w	r9, r0, r4
 800ab48:	d1e5      	bne.n	800ab16 <__cvt+0x6a>
 800ab4a:	7803      	ldrb	r3, [r0, #0]
 800ab4c:	2b30      	cmp	r3, #48	@ 0x30
 800ab4e:	d10a      	bne.n	800ab66 <__cvt+0xba>
 800ab50:	2200      	movs	r2, #0
 800ab52:	2300      	movs	r3, #0
 800ab54:	4630      	mov	r0, r6
 800ab56:	4639      	mov	r1, r7
 800ab58:	f7f5 ffe6 	bl	8000b28 <__aeabi_dcmpeq>
 800ab5c:	b918      	cbnz	r0, 800ab66 <__cvt+0xba>
 800ab5e:	f1c4 0401 	rsb	r4, r4, #1
 800ab62:	f8ca 4000 	str.w	r4, [sl]
 800ab66:	f8da 3000 	ldr.w	r3, [sl]
 800ab6a:	4499      	add	r9, r3
 800ab6c:	e7d3      	b.n	800ab16 <__cvt+0x6a>
 800ab6e:	1c59      	adds	r1, r3, #1
 800ab70:	9103      	str	r1, [sp, #12]
 800ab72:	701a      	strb	r2, [r3, #0]
 800ab74:	e7d9      	b.n	800ab2a <__cvt+0x7e>

0800ab76 <__exponent>:
 800ab76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	bfba      	itte	lt
 800ab7c:	4249      	neglt	r1, r1
 800ab7e:	232d      	movlt	r3, #45	@ 0x2d
 800ab80:	232b      	movge	r3, #43	@ 0x2b
 800ab82:	2909      	cmp	r1, #9
 800ab84:	7002      	strb	r2, [r0, #0]
 800ab86:	7043      	strb	r3, [r0, #1]
 800ab88:	dd29      	ble.n	800abde <__exponent+0x68>
 800ab8a:	f10d 0307 	add.w	r3, sp, #7
 800ab8e:	461d      	mov	r5, r3
 800ab90:	270a      	movs	r7, #10
 800ab92:	461a      	mov	r2, r3
 800ab94:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab98:	fb07 1416 	mls	r4, r7, r6, r1
 800ab9c:	3430      	adds	r4, #48	@ 0x30
 800ab9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aba2:	460c      	mov	r4, r1
 800aba4:	2c63      	cmp	r4, #99	@ 0x63
 800aba6:	f103 33ff 	add.w	r3, r3, #4294967295
 800abaa:	4631      	mov	r1, r6
 800abac:	dcf1      	bgt.n	800ab92 <__exponent+0x1c>
 800abae:	3130      	adds	r1, #48	@ 0x30
 800abb0:	1e94      	subs	r4, r2, #2
 800abb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abb6:	1c41      	adds	r1, r0, #1
 800abb8:	4623      	mov	r3, r4
 800abba:	42ab      	cmp	r3, r5
 800abbc:	d30a      	bcc.n	800abd4 <__exponent+0x5e>
 800abbe:	f10d 0309 	add.w	r3, sp, #9
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	42ac      	cmp	r4, r5
 800abc6:	bf88      	it	hi
 800abc8:	2300      	movhi	r3, #0
 800abca:	3302      	adds	r3, #2
 800abcc:	4403      	add	r3, r0
 800abce:	1a18      	subs	r0, r3, r0
 800abd0:	b003      	add	sp, #12
 800abd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800abd8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800abdc:	e7ed      	b.n	800abba <__exponent+0x44>
 800abde:	2330      	movs	r3, #48	@ 0x30
 800abe0:	3130      	adds	r1, #48	@ 0x30
 800abe2:	7083      	strb	r3, [r0, #2]
 800abe4:	70c1      	strb	r1, [r0, #3]
 800abe6:	1d03      	adds	r3, r0, #4
 800abe8:	e7f1      	b.n	800abce <__exponent+0x58>
	...

0800abec <_printf_float>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	b08d      	sub	sp, #52	@ 0x34
 800abf2:	460c      	mov	r4, r1
 800abf4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800abf8:	4616      	mov	r6, r2
 800abfa:	461f      	mov	r7, r3
 800abfc:	4605      	mov	r5, r0
 800abfe:	f000 ff01 	bl	800ba04 <_localeconv_r>
 800ac02:	6803      	ldr	r3, [r0, #0]
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7f5 fb62 	bl	80002d0 <strlen>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac10:	f8d8 3000 	ldr.w	r3, [r8]
 800ac14:	9005      	str	r0, [sp, #20]
 800ac16:	3307      	adds	r3, #7
 800ac18:	f023 0307 	bic.w	r3, r3, #7
 800ac1c:	f103 0208 	add.w	r2, r3, #8
 800ac20:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac24:	f8d4 b000 	ldr.w	fp, [r4]
 800ac28:	f8c8 2000 	str.w	r2, [r8]
 800ac2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac34:	9307      	str	r3, [sp, #28]
 800ac36:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac42:	4b9c      	ldr	r3, [pc, #624]	@ (800aeb4 <_printf_float+0x2c8>)
 800ac44:	f04f 32ff 	mov.w	r2, #4294967295
 800ac48:	f7f5 ffa0 	bl	8000b8c <__aeabi_dcmpun>
 800ac4c:	bb70      	cbnz	r0, 800acac <_printf_float+0xc0>
 800ac4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac52:	4b98      	ldr	r3, [pc, #608]	@ (800aeb4 <_printf_float+0x2c8>)
 800ac54:	f04f 32ff 	mov.w	r2, #4294967295
 800ac58:	f7f5 ff7a 	bl	8000b50 <__aeabi_dcmple>
 800ac5c:	bb30      	cbnz	r0, 800acac <_printf_float+0xc0>
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2300      	movs	r3, #0
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f5 ff69 	bl	8000b3c <__aeabi_dcmplt>
 800ac6a:	b110      	cbz	r0, 800ac72 <_printf_float+0x86>
 800ac6c:	232d      	movs	r3, #45	@ 0x2d
 800ac6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac72:	4a91      	ldr	r2, [pc, #580]	@ (800aeb8 <_printf_float+0x2cc>)
 800ac74:	4b91      	ldr	r3, [pc, #580]	@ (800aebc <_printf_float+0x2d0>)
 800ac76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac7a:	bf94      	ite	ls
 800ac7c:	4690      	movls	r8, r2
 800ac7e:	4698      	movhi	r8, r3
 800ac80:	2303      	movs	r3, #3
 800ac82:	6123      	str	r3, [r4, #16]
 800ac84:	f02b 0304 	bic.w	r3, fp, #4
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	f04f 0900 	mov.w	r9, #0
 800ac8e:	9700      	str	r7, [sp, #0]
 800ac90:	4633      	mov	r3, r6
 800ac92:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac94:	4621      	mov	r1, r4
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 f9d2 	bl	800b040 <_printf_common>
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	f040 808d 	bne.w	800adbc <_printf_float+0x1d0>
 800aca2:	f04f 30ff 	mov.w	r0, #4294967295
 800aca6:	b00d      	add	sp, #52	@ 0x34
 800aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acac:	4642      	mov	r2, r8
 800acae:	464b      	mov	r3, r9
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	f7f5 ff6a 	bl	8000b8c <__aeabi_dcmpun>
 800acb8:	b140      	cbz	r0, 800accc <_printf_float+0xe0>
 800acba:	464b      	mov	r3, r9
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfbc      	itt	lt
 800acc0:	232d      	movlt	r3, #45	@ 0x2d
 800acc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acc6:	4a7e      	ldr	r2, [pc, #504]	@ (800aec0 <_printf_float+0x2d4>)
 800acc8:	4b7e      	ldr	r3, [pc, #504]	@ (800aec4 <_printf_float+0x2d8>)
 800acca:	e7d4      	b.n	800ac76 <_printf_float+0x8a>
 800accc:	6863      	ldr	r3, [r4, #4]
 800acce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800acd2:	9206      	str	r2, [sp, #24]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	d13b      	bne.n	800ad50 <_printf_float+0x164>
 800acd8:	2306      	movs	r3, #6
 800acda:	6063      	str	r3, [r4, #4]
 800acdc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ace0:	2300      	movs	r3, #0
 800ace2:	6022      	str	r2, [r4, #0]
 800ace4:	9303      	str	r3, [sp, #12]
 800ace6:	ab0a      	add	r3, sp, #40	@ 0x28
 800ace8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800acec:	ab09      	add	r3, sp, #36	@ 0x24
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	6861      	ldr	r1, [r4, #4]
 800acf2:	ec49 8b10 	vmov	d0, r8, r9
 800acf6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800acfa:	4628      	mov	r0, r5
 800acfc:	f7ff fed6 	bl	800aaac <__cvt>
 800ad00:	9b06      	ldr	r3, [sp, #24]
 800ad02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad04:	2b47      	cmp	r3, #71	@ 0x47
 800ad06:	4680      	mov	r8, r0
 800ad08:	d129      	bne.n	800ad5e <_printf_float+0x172>
 800ad0a:	1cc8      	adds	r0, r1, #3
 800ad0c:	db02      	blt.n	800ad14 <_printf_float+0x128>
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	4299      	cmp	r1, r3
 800ad12:	dd41      	ble.n	800ad98 <_printf_float+0x1ac>
 800ad14:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad18:	fa5f fa8a 	uxtb.w	sl, sl
 800ad1c:	3901      	subs	r1, #1
 800ad1e:	4652      	mov	r2, sl
 800ad20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad24:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad26:	f7ff ff26 	bl	800ab76 <__exponent>
 800ad2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad2c:	1813      	adds	r3, r2, r0
 800ad2e:	2a01      	cmp	r2, #1
 800ad30:	4681      	mov	r9, r0
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	dc02      	bgt.n	800ad3c <_printf_float+0x150>
 800ad36:	6822      	ldr	r2, [r4, #0]
 800ad38:	07d2      	lsls	r2, r2, #31
 800ad3a:	d501      	bpl.n	800ad40 <_printf_float+0x154>
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d0a2      	beq.n	800ac8e <_printf_float+0xa2>
 800ad48:	232d      	movs	r3, #45	@ 0x2d
 800ad4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad4e:	e79e      	b.n	800ac8e <_printf_float+0xa2>
 800ad50:	9a06      	ldr	r2, [sp, #24]
 800ad52:	2a47      	cmp	r2, #71	@ 0x47
 800ad54:	d1c2      	bne.n	800acdc <_printf_float+0xf0>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1c0      	bne.n	800acdc <_printf_float+0xf0>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e7bd      	b.n	800acda <_printf_float+0xee>
 800ad5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad62:	d9db      	bls.n	800ad1c <_printf_float+0x130>
 800ad64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad68:	d118      	bne.n	800ad9c <_printf_float+0x1b0>
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	6863      	ldr	r3, [r4, #4]
 800ad6e:	dd0b      	ble.n	800ad88 <_printf_float+0x19c>
 800ad70:	6121      	str	r1, [r4, #16]
 800ad72:	b913      	cbnz	r3, 800ad7a <_printf_float+0x18e>
 800ad74:	6822      	ldr	r2, [r4, #0]
 800ad76:	07d0      	lsls	r0, r2, #31
 800ad78:	d502      	bpl.n	800ad80 <_printf_float+0x194>
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	440b      	add	r3, r1
 800ad7e:	6123      	str	r3, [r4, #16]
 800ad80:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad82:	f04f 0900 	mov.w	r9, #0
 800ad86:	e7db      	b.n	800ad40 <_printf_float+0x154>
 800ad88:	b913      	cbnz	r3, 800ad90 <_printf_float+0x1a4>
 800ad8a:	6822      	ldr	r2, [r4, #0]
 800ad8c:	07d2      	lsls	r2, r2, #31
 800ad8e:	d501      	bpl.n	800ad94 <_printf_float+0x1a8>
 800ad90:	3302      	adds	r3, #2
 800ad92:	e7f4      	b.n	800ad7e <_printf_float+0x192>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e7f2      	b.n	800ad7e <_printf_float+0x192>
 800ad98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ad9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad9e:	4299      	cmp	r1, r3
 800ada0:	db05      	blt.n	800adae <_printf_float+0x1c2>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	6121      	str	r1, [r4, #16]
 800ada6:	07d8      	lsls	r0, r3, #31
 800ada8:	d5ea      	bpl.n	800ad80 <_printf_float+0x194>
 800adaa:	1c4b      	adds	r3, r1, #1
 800adac:	e7e7      	b.n	800ad7e <_printf_float+0x192>
 800adae:	2900      	cmp	r1, #0
 800adb0:	bfd4      	ite	le
 800adb2:	f1c1 0202 	rsble	r2, r1, #2
 800adb6:	2201      	movgt	r2, #1
 800adb8:	4413      	add	r3, r2
 800adba:	e7e0      	b.n	800ad7e <_printf_float+0x192>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	055a      	lsls	r2, r3, #21
 800adc0:	d407      	bmi.n	800add2 <_printf_float+0x1e6>
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	4642      	mov	r2, r8
 800adc6:	4631      	mov	r1, r6
 800adc8:	4628      	mov	r0, r5
 800adca:	47b8      	blx	r7
 800adcc:	3001      	adds	r0, #1
 800adce:	d12b      	bne.n	800ae28 <_printf_float+0x23c>
 800add0:	e767      	b.n	800aca2 <_printf_float+0xb6>
 800add2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800add6:	f240 80dd 	bls.w	800af94 <_printf_float+0x3a8>
 800adda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adde:	2200      	movs	r2, #0
 800ade0:	2300      	movs	r3, #0
 800ade2:	f7f5 fea1 	bl	8000b28 <__aeabi_dcmpeq>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d033      	beq.n	800ae52 <_printf_float+0x266>
 800adea:	4a37      	ldr	r2, [pc, #220]	@ (800aec8 <_printf_float+0x2dc>)
 800adec:	2301      	movs	r3, #1
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	f43f af54 	beq.w	800aca2 <_printf_float+0xb6>
 800adfa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800adfe:	4543      	cmp	r3, r8
 800ae00:	db02      	blt.n	800ae08 <_printf_float+0x21c>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	07d8      	lsls	r0, r3, #31
 800ae06:	d50f      	bpl.n	800ae28 <_printf_float+0x23c>
 800ae08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae0c:	4631      	mov	r1, r6
 800ae0e:	4628      	mov	r0, r5
 800ae10:	47b8      	blx	r7
 800ae12:	3001      	adds	r0, #1
 800ae14:	f43f af45 	beq.w	800aca2 <_printf_float+0xb6>
 800ae18:	f04f 0900 	mov.w	r9, #0
 800ae1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae20:	f104 0a1a 	add.w	sl, r4, #26
 800ae24:	45c8      	cmp	r8, r9
 800ae26:	dc09      	bgt.n	800ae3c <_printf_float+0x250>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	079b      	lsls	r3, r3, #30
 800ae2c:	f100 8103 	bmi.w	800b036 <_printf_float+0x44a>
 800ae30:	68e0      	ldr	r0, [r4, #12]
 800ae32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae34:	4298      	cmp	r0, r3
 800ae36:	bfb8      	it	lt
 800ae38:	4618      	movlt	r0, r3
 800ae3a:	e734      	b.n	800aca6 <_printf_float+0xba>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	4652      	mov	r2, sl
 800ae40:	4631      	mov	r1, r6
 800ae42:	4628      	mov	r0, r5
 800ae44:	47b8      	blx	r7
 800ae46:	3001      	adds	r0, #1
 800ae48:	f43f af2b 	beq.w	800aca2 <_printf_float+0xb6>
 800ae4c:	f109 0901 	add.w	r9, r9, #1
 800ae50:	e7e8      	b.n	800ae24 <_printf_float+0x238>
 800ae52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dc39      	bgt.n	800aecc <_printf_float+0x2e0>
 800ae58:	4a1b      	ldr	r2, [pc, #108]	@ (800aec8 <_printf_float+0x2dc>)
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f af1d 	beq.w	800aca2 <_printf_float+0xb6>
 800ae68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae6c:	ea59 0303 	orrs.w	r3, r9, r3
 800ae70:	d102      	bne.n	800ae78 <_printf_float+0x28c>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	07d9      	lsls	r1, r3, #31
 800ae76:	d5d7      	bpl.n	800ae28 <_printf_float+0x23c>
 800ae78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	f43f af0d 	beq.w	800aca2 <_printf_float+0xb6>
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	f104 0b1a 	add.w	fp, r4, #26
 800ae90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae92:	425b      	negs	r3, r3
 800ae94:	4553      	cmp	r3, sl
 800ae96:	dc01      	bgt.n	800ae9c <_printf_float+0x2b0>
 800ae98:	464b      	mov	r3, r9
 800ae9a:	e793      	b.n	800adc4 <_printf_float+0x1d8>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	465a      	mov	r2, fp
 800aea0:	4631      	mov	r1, r6
 800aea2:	4628      	mov	r0, r5
 800aea4:	47b8      	blx	r7
 800aea6:	3001      	adds	r0, #1
 800aea8:	f43f aefb 	beq.w	800aca2 <_printf_float+0xb6>
 800aeac:	f10a 0a01 	add.w	sl, sl, #1
 800aeb0:	e7ee      	b.n	800ae90 <_printf_float+0x2a4>
 800aeb2:	bf00      	nop
 800aeb4:	7fefffff 	.word	0x7fefffff
 800aeb8:	0800f530 	.word	0x0800f530
 800aebc:	0800f534 	.word	0x0800f534
 800aec0:	0800f538 	.word	0x0800f538
 800aec4:	0800f53c 	.word	0x0800f53c
 800aec8:	0800f540 	.word	0x0800f540
 800aecc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aece:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aed2:	4553      	cmp	r3, sl
 800aed4:	bfa8      	it	ge
 800aed6:	4653      	movge	r3, sl
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	4699      	mov	r9, r3
 800aedc:	dc36      	bgt.n	800af4c <_printf_float+0x360>
 800aede:	f04f 0b00 	mov.w	fp, #0
 800aee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aee6:	f104 021a 	add.w	r2, r4, #26
 800aeea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aeec:	9306      	str	r3, [sp, #24]
 800aeee:	eba3 0309 	sub.w	r3, r3, r9
 800aef2:	455b      	cmp	r3, fp
 800aef4:	dc31      	bgt.n	800af5a <_printf_float+0x36e>
 800aef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef8:	459a      	cmp	sl, r3
 800aefa:	dc3a      	bgt.n	800af72 <_printf_float+0x386>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	07da      	lsls	r2, r3, #31
 800af00:	d437      	bmi.n	800af72 <_printf_float+0x386>
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	ebaa 0903 	sub.w	r9, sl, r3
 800af08:	9b06      	ldr	r3, [sp, #24]
 800af0a:	ebaa 0303 	sub.w	r3, sl, r3
 800af0e:	4599      	cmp	r9, r3
 800af10:	bfa8      	it	ge
 800af12:	4699      	movge	r9, r3
 800af14:	f1b9 0f00 	cmp.w	r9, #0
 800af18:	dc33      	bgt.n	800af82 <_printf_float+0x396>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af22:	f104 0b1a 	add.w	fp, r4, #26
 800af26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af28:	ebaa 0303 	sub.w	r3, sl, r3
 800af2c:	eba3 0309 	sub.w	r3, r3, r9
 800af30:	4543      	cmp	r3, r8
 800af32:	f77f af79 	ble.w	800ae28 <_printf_float+0x23c>
 800af36:	2301      	movs	r3, #1
 800af38:	465a      	mov	r2, fp
 800af3a:	4631      	mov	r1, r6
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	f43f aeae 	beq.w	800aca2 <_printf_float+0xb6>
 800af46:	f108 0801 	add.w	r8, r8, #1
 800af4a:	e7ec      	b.n	800af26 <_printf_float+0x33a>
 800af4c:	4642      	mov	r2, r8
 800af4e:	4631      	mov	r1, r6
 800af50:	4628      	mov	r0, r5
 800af52:	47b8      	blx	r7
 800af54:	3001      	adds	r0, #1
 800af56:	d1c2      	bne.n	800aede <_printf_float+0x2f2>
 800af58:	e6a3      	b.n	800aca2 <_printf_float+0xb6>
 800af5a:	2301      	movs	r3, #1
 800af5c:	4631      	mov	r1, r6
 800af5e:	4628      	mov	r0, r5
 800af60:	9206      	str	r2, [sp, #24]
 800af62:	47b8      	blx	r7
 800af64:	3001      	adds	r0, #1
 800af66:	f43f ae9c 	beq.w	800aca2 <_printf_float+0xb6>
 800af6a:	9a06      	ldr	r2, [sp, #24]
 800af6c:	f10b 0b01 	add.w	fp, fp, #1
 800af70:	e7bb      	b.n	800aeea <_printf_float+0x2fe>
 800af72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af76:	4631      	mov	r1, r6
 800af78:	4628      	mov	r0, r5
 800af7a:	47b8      	blx	r7
 800af7c:	3001      	adds	r0, #1
 800af7e:	d1c0      	bne.n	800af02 <_printf_float+0x316>
 800af80:	e68f      	b.n	800aca2 <_printf_float+0xb6>
 800af82:	9a06      	ldr	r2, [sp, #24]
 800af84:	464b      	mov	r3, r9
 800af86:	4442      	add	r2, r8
 800af88:	4631      	mov	r1, r6
 800af8a:	4628      	mov	r0, r5
 800af8c:	47b8      	blx	r7
 800af8e:	3001      	adds	r0, #1
 800af90:	d1c3      	bne.n	800af1a <_printf_float+0x32e>
 800af92:	e686      	b.n	800aca2 <_printf_float+0xb6>
 800af94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af98:	f1ba 0f01 	cmp.w	sl, #1
 800af9c:	dc01      	bgt.n	800afa2 <_printf_float+0x3b6>
 800af9e:	07db      	lsls	r3, r3, #31
 800afa0:	d536      	bpl.n	800b010 <_printf_float+0x424>
 800afa2:	2301      	movs	r3, #1
 800afa4:	4642      	mov	r2, r8
 800afa6:	4631      	mov	r1, r6
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b8      	blx	r7
 800afac:	3001      	adds	r0, #1
 800afae:	f43f ae78 	beq.w	800aca2 <_printf_float+0xb6>
 800afb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afb6:	4631      	mov	r1, r6
 800afb8:	4628      	mov	r0, r5
 800afba:	47b8      	blx	r7
 800afbc:	3001      	adds	r0, #1
 800afbe:	f43f ae70 	beq.w	800aca2 <_printf_float+0xb6>
 800afc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afc6:	2200      	movs	r2, #0
 800afc8:	2300      	movs	r3, #0
 800afca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afce:	f7f5 fdab 	bl	8000b28 <__aeabi_dcmpeq>
 800afd2:	b9c0      	cbnz	r0, 800b006 <_printf_float+0x41a>
 800afd4:	4653      	mov	r3, sl
 800afd6:	f108 0201 	add.w	r2, r8, #1
 800afda:	4631      	mov	r1, r6
 800afdc:	4628      	mov	r0, r5
 800afde:	47b8      	blx	r7
 800afe0:	3001      	adds	r0, #1
 800afe2:	d10c      	bne.n	800affe <_printf_float+0x412>
 800afe4:	e65d      	b.n	800aca2 <_printf_float+0xb6>
 800afe6:	2301      	movs	r3, #1
 800afe8:	465a      	mov	r2, fp
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f ae56 	beq.w	800aca2 <_printf_float+0xb6>
 800aff6:	f108 0801 	add.w	r8, r8, #1
 800affa:	45d0      	cmp	r8, sl
 800affc:	dbf3      	blt.n	800afe6 <_printf_float+0x3fa>
 800affe:	464b      	mov	r3, r9
 800b000:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b004:	e6df      	b.n	800adc6 <_printf_float+0x1da>
 800b006:	f04f 0800 	mov.w	r8, #0
 800b00a:	f104 0b1a 	add.w	fp, r4, #26
 800b00e:	e7f4      	b.n	800affa <_printf_float+0x40e>
 800b010:	2301      	movs	r3, #1
 800b012:	4642      	mov	r2, r8
 800b014:	e7e1      	b.n	800afda <_printf_float+0x3ee>
 800b016:	2301      	movs	r3, #1
 800b018:	464a      	mov	r2, r9
 800b01a:	4631      	mov	r1, r6
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	f43f ae3e 	beq.w	800aca2 <_printf_float+0xb6>
 800b026:	f108 0801 	add.w	r8, r8, #1
 800b02a:	68e3      	ldr	r3, [r4, #12]
 800b02c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b02e:	1a5b      	subs	r3, r3, r1
 800b030:	4543      	cmp	r3, r8
 800b032:	dcf0      	bgt.n	800b016 <_printf_float+0x42a>
 800b034:	e6fc      	b.n	800ae30 <_printf_float+0x244>
 800b036:	f04f 0800 	mov.w	r8, #0
 800b03a:	f104 0919 	add.w	r9, r4, #25
 800b03e:	e7f4      	b.n	800b02a <_printf_float+0x43e>

0800b040 <_printf_common>:
 800b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b044:	4616      	mov	r6, r2
 800b046:	4698      	mov	r8, r3
 800b048:	688a      	ldr	r2, [r1, #8]
 800b04a:	690b      	ldr	r3, [r1, #16]
 800b04c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b050:	4293      	cmp	r3, r2
 800b052:	bfb8      	it	lt
 800b054:	4613      	movlt	r3, r2
 800b056:	6033      	str	r3, [r6, #0]
 800b058:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b05c:	4607      	mov	r7, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	b10a      	cbz	r2, 800b066 <_printf_common+0x26>
 800b062:	3301      	adds	r3, #1
 800b064:	6033      	str	r3, [r6, #0]
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	0699      	lsls	r1, r3, #26
 800b06a:	bf42      	ittt	mi
 800b06c:	6833      	ldrmi	r3, [r6, #0]
 800b06e:	3302      	addmi	r3, #2
 800b070:	6033      	strmi	r3, [r6, #0]
 800b072:	6825      	ldr	r5, [r4, #0]
 800b074:	f015 0506 	ands.w	r5, r5, #6
 800b078:	d106      	bne.n	800b088 <_printf_common+0x48>
 800b07a:	f104 0a19 	add.w	sl, r4, #25
 800b07e:	68e3      	ldr	r3, [r4, #12]
 800b080:	6832      	ldr	r2, [r6, #0]
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	42ab      	cmp	r3, r5
 800b086:	dc26      	bgt.n	800b0d6 <_printf_common+0x96>
 800b088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	3b00      	subs	r3, #0
 800b090:	bf18      	it	ne
 800b092:	2301      	movne	r3, #1
 800b094:	0692      	lsls	r2, r2, #26
 800b096:	d42b      	bmi.n	800b0f0 <_printf_common+0xb0>
 800b098:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b09c:	4641      	mov	r1, r8
 800b09e:	4638      	mov	r0, r7
 800b0a0:	47c8      	blx	r9
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d01e      	beq.n	800b0e4 <_printf_common+0xa4>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	6922      	ldr	r2, [r4, #16]
 800b0aa:	f003 0306 	and.w	r3, r3, #6
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	bf02      	ittt	eq
 800b0b2:	68e5      	ldreq	r5, [r4, #12]
 800b0b4:	6833      	ldreq	r3, [r6, #0]
 800b0b6:	1aed      	subeq	r5, r5, r3
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	bf0c      	ite	eq
 800b0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0c0:	2500      	movne	r5, #0
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	bfc4      	itt	gt
 800b0c6:	1a9b      	subgt	r3, r3, r2
 800b0c8:	18ed      	addgt	r5, r5, r3
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	341a      	adds	r4, #26
 800b0ce:	42b5      	cmp	r5, r6
 800b0d0:	d11a      	bne.n	800b108 <_printf_common+0xc8>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e008      	b.n	800b0e8 <_printf_common+0xa8>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4652      	mov	r2, sl
 800b0da:	4641      	mov	r1, r8
 800b0dc:	4638      	mov	r0, r7
 800b0de:	47c8      	blx	r9
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d103      	bne.n	800b0ec <_printf_common+0xac>
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	e7c6      	b.n	800b07e <_printf_common+0x3e>
 800b0f0:	18e1      	adds	r1, r4, r3
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	2030      	movs	r0, #48	@ 0x30
 800b0f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0fa:	4422      	add	r2, r4
 800b0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b100:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b104:	3302      	adds	r3, #2
 800b106:	e7c7      	b.n	800b098 <_printf_common+0x58>
 800b108:	2301      	movs	r3, #1
 800b10a:	4622      	mov	r2, r4
 800b10c:	4641      	mov	r1, r8
 800b10e:	4638      	mov	r0, r7
 800b110:	47c8      	blx	r9
 800b112:	3001      	adds	r0, #1
 800b114:	d0e6      	beq.n	800b0e4 <_printf_common+0xa4>
 800b116:	3601      	adds	r6, #1
 800b118:	e7d9      	b.n	800b0ce <_printf_common+0x8e>
	...

0800b11c <_printf_i>:
 800b11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	7e0f      	ldrb	r7, [r1, #24]
 800b122:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b124:	2f78      	cmp	r7, #120	@ 0x78
 800b126:	4691      	mov	r9, r2
 800b128:	4680      	mov	r8, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	469a      	mov	sl, r3
 800b12e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b132:	d807      	bhi.n	800b144 <_printf_i+0x28>
 800b134:	2f62      	cmp	r7, #98	@ 0x62
 800b136:	d80a      	bhi.n	800b14e <_printf_i+0x32>
 800b138:	2f00      	cmp	r7, #0
 800b13a:	f000 80d2 	beq.w	800b2e2 <_printf_i+0x1c6>
 800b13e:	2f58      	cmp	r7, #88	@ 0x58
 800b140:	f000 80b9 	beq.w	800b2b6 <_printf_i+0x19a>
 800b144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b148:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b14c:	e03a      	b.n	800b1c4 <_printf_i+0xa8>
 800b14e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b152:	2b15      	cmp	r3, #21
 800b154:	d8f6      	bhi.n	800b144 <_printf_i+0x28>
 800b156:	a101      	add	r1, pc, #4	@ (adr r1, 800b15c <_printf_i+0x40>)
 800b158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1c9 	.word	0x0800b1c9
 800b164:	0800b145 	.word	0x0800b145
 800b168:	0800b145 	.word	0x0800b145
 800b16c:	0800b145 	.word	0x0800b145
 800b170:	0800b145 	.word	0x0800b145
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b145 	.word	0x0800b145
 800b17c:	0800b145 	.word	0x0800b145
 800b180:	0800b145 	.word	0x0800b145
 800b184:	0800b145 	.word	0x0800b145
 800b188:	0800b2c9 	.word	0x0800b2c9
 800b18c:	0800b1f3 	.word	0x0800b1f3
 800b190:	0800b283 	.word	0x0800b283
 800b194:	0800b145 	.word	0x0800b145
 800b198:	0800b145 	.word	0x0800b145
 800b19c:	0800b2eb 	.word	0x0800b2eb
 800b1a0:	0800b145 	.word	0x0800b145
 800b1a4:	0800b1f3 	.word	0x0800b1f3
 800b1a8:	0800b145 	.word	0x0800b145
 800b1ac:	0800b145 	.word	0x0800b145
 800b1b0:	0800b28b 	.word	0x0800b28b
 800b1b4:	6833      	ldr	r3, [r6, #0]
 800b1b6:	1d1a      	adds	r2, r3, #4
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6032      	str	r2, [r6, #0]
 800b1bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e09d      	b.n	800b304 <_printf_i+0x1e8>
 800b1c8:	6833      	ldr	r3, [r6, #0]
 800b1ca:	6820      	ldr	r0, [r4, #0]
 800b1cc:	1d19      	adds	r1, r3, #4
 800b1ce:	6031      	str	r1, [r6, #0]
 800b1d0:	0606      	lsls	r6, r0, #24
 800b1d2:	d501      	bpl.n	800b1d8 <_printf_i+0xbc>
 800b1d4:	681d      	ldr	r5, [r3, #0]
 800b1d6:	e003      	b.n	800b1e0 <_printf_i+0xc4>
 800b1d8:	0645      	lsls	r5, r0, #25
 800b1da:	d5fb      	bpl.n	800b1d4 <_printf_i+0xb8>
 800b1dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	da03      	bge.n	800b1ec <_printf_i+0xd0>
 800b1e4:	232d      	movs	r3, #45	@ 0x2d
 800b1e6:	426d      	negs	r5, r5
 800b1e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1ec:	4859      	ldr	r0, [pc, #356]	@ (800b354 <_printf_i+0x238>)
 800b1ee:	230a      	movs	r3, #10
 800b1f0:	e011      	b.n	800b216 <_printf_i+0xfa>
 800b1f2:	6821      	ldr	r1, [r4, #0]
 800b1f4:	6833      	ldr	r3, [r6, #0]
 800b1f6:	0608      	lsls	r0, r1, #24
 800b1f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1fc:	d402      	bmi.n	800b204 <_printf_i+0xe8>
 800b1fe:	0649      	lsls	r1, r1, #25
 800b200:	bf48      	it	mi
 800b202:	b2ad      	uxthmi	r5, r5
 800b204:	2f6f      	cmp	r7, #111	@ 0x6f
 800b206:	4853      	ldr	r0, [pc, #332]	@ (800b354 <_printf_i+0x238>)
 800b208:	6033      	str	r3, [r6, #0]
 800b20a:	bf14      	ite	ne
 800b20c:	230a      	movne	r3, #10
 800b20e:	2308      	moveq	r3, #8
 800b210:	2100      	movs	r1, #0
 800b212:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b216:	6866      	ldr	r6, [r4, #4]
 800b218:	60a6      	str	r6, [r4, #8]
 800b21a:	2e00      	cmp	r6, #0
 800b21c:	bfa2      	ittt	ge
 800b21e:	6821      	ldrge	r1, [r4, #0]
 800b220:	f021 0104 	bicge.w	r1, r1, #4
 800b224:	6021      	strge	r1, [r4, #0]
 800b226:	b90d      	cbnz	r5, 800b22c <_printf_i+0x110>
 800b228:	2e00      	cmp	r6, #0
 800b22a:	d04b      	beq.n	800b2c4 <_printf_i+0x1a8>
 800b22c:	4616      	mov	r6, r2
 800b22e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b232:	fb03 5711 	mls	r7, r3, r1, r5
 800b236:	5dc7      	ldrb	r7, [r0, r7]
 800b238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b23c:	462f      	mov	r7, r5
 800b23e:	42bb      	cmp	r3, r7
 800b240:	460d      	mov	r5, r1
 800b242:	d9f4      	bls.n	800b22e <_printf_i+0x112>
 800b244:	2b08      	cmp	r3, #8
 800b246:	d10b      	bne.n	800b260 <_printf_i+0x144>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	07df      	lsls	r7, r3, #31
 800b24c:	d508      	bpl.n	800b260 <_printf_i+0x144>
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	6861      	ldr	r1, [r4, #4]
 800b252:	4299      	cmp	r1, r3
 800b254:	bfde      	ittt	le
 800b256:	2330      	movle	r3, #48	@ 0x30
 800b258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b25c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b260:	1b92      	subs	r2, r2, r6
 800b262:	6122      	str	r2, [r4, #16]
 800b264:	f8cd a000 	str.w	sl, [sp]
 800b268:	464b      	mov	r3, r9
 800b26a:	aa03      	add	r2, sp, #12
 800b26c:	4621      	mov	r1, r4
 800b26e:	4640      	mov	r0, r8
 800b270:	f7ff fee6 	bl	800b040 <_printf_common>
 800b274:	3001      	adds	r0, #1
 800b276:	d14a      	bne.n	800b30e <_printf_i+0x1f2>
 800b278:	f04f 30ff 	mov.w	r0, #4294967295
 800b27c:	b004      	add	sp, #16
 800b27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	f043 0320 	orr.w	r3, r3, #32
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	4833      	ldr	r0, [pc, #204]	@ (800b358 <_printf_i+0x23c>)
 800b28c:	2778      	movs	r7, #120	@ 0x78
 800b28e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	6831      	ldr	r1, [r6, #0]
 800b296:	061f      	lsls	r7, r3, #24
 800b298:	f851 5b04 	ldr.w	r5, [r1], #4
 800b29c:	d402      	bmi.n	800b2a4 <_printf_i+0x188>
 800b29e:	065f      	lsls	r7, r3, #25
 800b2a0:	bf48      	it	mi
 800b2a2:	b2ad      	uxthmi	r5, r5
 800b2a4:	6031      	str	r1, [r6, #0]
 800b2a6:	07d9      	lsls	r1, r3, #31
 800b2a8:	bf44      	itt	mi
 800b2aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b2ae:	6023      	strmi	r3, [r4, #0]
 800b2b0:	b11d      	cbz	r5, 800b2ba <_printf_i+0x19e>
 800b2b2:	2310      	movs	r3, #16
 800b2b4:	e7ac      	b.n	800b210 <_printf_i+0xf4>
 800b2b6:	4827      	ldr	r0, [pc, #156]	@ (800b354 <_printf_i+0x238>)
 800b2b8:	e7e9      	b.n	800b28e <_printf_i+0x172>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	f023 0320 	bic.w	r3, r3, #32
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	e7f6      	b.n	800b2b2 <_printf_i+0x196>
 800b2c4:	4616      	mov	r6, r2
 800b2c6:	e7bd      	b.n	800b244 <_printf_i+0x128>
 800b2c8:	6833      	ldr	r3, [r6, #0]
 800b2ca:	6825      	ldr	r5, [r4, #0]
 800b2cc:	6961      	ldr	r1, [r4, #20]
 800b2ce:	1d18      	adds	r0, r3, #4
 800b2d0:	6030      	str	r0, [r6, #0]
 800b2d2:	062e      	lsls	r6, r5, #24
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	d501      	bpl.n	800b2dc <_printf_i+0x1c0>
 800b2d8:	6019      	str	r1, [r3, #0]
 800b2da:	e002      	b.n	800b2e2 <_printf_i+0x1c6>
 800b2dc:	0668      	lsls	r0, r5, #25
 800b2de:	d5fb      	bpl.n	800b2d8 <_printf_i+0x1bc>
 800b2e0:	8019      	strh	r1, [r3, #0]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	4616      	mov	r6, r2
 800b2e8:	e7bc      	b.n	800b264 <_printf_i+0x148>
 800b2ea:	6833      	ldr	r3, [r6, #0]
 800b2ec:	1d1a      	adds	r2, r3, #4
 800b2ee:	6032      	str	r2, [r6, #0]
 800b2f0:	681e      	ldr	r6, [r3, #0]
 800b2f2:	6862      	ldr	r2, [r4, #4]
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7f4 ff9a 	bl	8000230 <memchr>
 800b2fc:	b108      	cbz	r0, 800b302 <_printf_i+0x1e6>
 800b2fe:	1b80      	subs	r0, r0, r6
 800b300:	6060      	str	r0, [r4, #4]
 800b302:	6863      	ldr	r3, [r4, #4]
 800b304:	6123      	str	r3, [r4, #16]
 800b306:	2300      	movs	r3, #0
 800b308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b30c:	e7aa      	b.n	800b264 <_printf_i+0x148>
 800b30e:	6923      	ldr	r3, [r4, #16]
 800b310:	4632      	mov	r2, r6
 800b312:	4649      	mov	r1, r9
 800b314:	4640      	mov	r0, r8
 800b316:	47d0      	blx	sl
 800b318:	3001      	adds	r0, #1
 800b31a:	d0ad      	beq.n	800b278 <_printf_i+0x15c>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	079b      	lsls	r3, r3, #30
 800b320:	d413      	bmi.n	800b34a <_printf_i+0x22e>
 800b322:	68e0      	ldr	r0, [r4, #12]
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	4298      	cmp	r0, r3
 800b328:	bfb8      	it	lt
 800b32a:	4618      	movlt	r0, r3
 800b32c:	e7a6      	b.n	800b27c <_printf_i+0x160>
 800b32e:	2301      	movs	r3, #1
 800b330:	4632      	mov	r2, r6
 800b332:	4649      	mov	r1, r9
 800b334:	4640      	mov	r0, r8
 800b336:	47d0      	blx	sl
 800b338:	3001      	adds	r0, #1
 800b33a:	d09d      	beq.n	800b278 <_printf_i+0x15c>
 800b33c:	3501      	adds	r5, #1
 800b33e:	68e3      	ldr	r3, [r4, #12]
 800b340:	9903      	ldr	r1, [sp, #12]
 800b342:	1a5b      	subs	r3, r3, r1
 800b344:	42ab      	cmp	r3, r5
 800b346:	dcf2      	bgt.n	800b32e <_printf_i+0x212>
 800b348:	e7eb      	b.n	800b322 <_printf_i+0x206>
 800b34a:	2500      	movs	r5, #0
 800b34c:	f104 0619 	add.w	r6, r4, #25
 800b350:	e7f5      	b.n	800b33e <_printf_i+0x222>
 800b352:	bf00      	nop
 800b354:	0800f542 	.word	0x0800f542
 800b358:	0800f553 	.word	0x0800f553

0800b35c <_scanf_float>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	b087      	sub	sp, #28
 800b362:	4617      	mov	r7, r2
 800b364:	9303      	str	r3, [sp, #12]
 800b366:	688b      	ldr	r3, [r1, #8]
 800b368:	1e5a      	subs	r2, r3, #1
 800b36a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b36e:	bf81      	itttt	hi
 800b370:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b374:	eb03 0b05 	addhi.w	fp, r3, r5
 800b378:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b37c:	608b      	strhi	r3, [r1, #8]
 800b37e:	680b      	ldr	r3, [r1, #0]
 800b380:	460a      	mov	r2, r1
 800b382:	f04f 0500 	mov.w	r5, #0
 800b386:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b38a:	f842 3b1c 	str.w	r3, [r2], #28
 800b38e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b392:	4680      	mov	r8, r0
 800b394:	460c      	mov	r4, r1
 800b396:	bf98      	it	ls
 800b398:	f04f 0b00 	movls.w	fp, #0
 800b39c:	9201      	str	r2, [sp, #4]
 800b39e:	4616      	mov	r6, r2
 800b3a0:	46aa      	mov	sl, r5
 800b3a2:	46a9      	mov	r9, r5
 800b3a4:	9502      	str	r5, [sp, #8]
 800b3a6:	68a2      	ldr	r2, [r4, #8]
 800b3a8:	b152      	cbz	r2, 800b3c0 <_scanf_float+0x64>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b4e      	cmp	r3, #78	@ 0x4e
 800b3b0:	d864      	bhi.n	800b47c <_scanf_float+0x120>
 800b3b2:	2b40      	cmp	r3, #64	@ 0x40
 800b3b4:	d83c      	bhi.n	800b430 <_scanf_float+0xd4>
 800b3b6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b3ba:	b2c8      	uxtb	r0, r1
 800b3bc:	280e      	cmp	r0, #14
 800b3be:	d93a      	bls.n	800b436 <_scanf_float+0xda>
 800b3c0:	f1b9 0f00 	cmp.w	r9, #0
 800b3c4:	d003      	beq.n	800b3ce <_scanf_float+0x72>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3d2:	f1ba 0f01 	cmp.w	sl, #1
 800b3d6:	f200 8117 	bhi.w	800b608 <_scanf_float+0x2ac>
 800b3da:	9b01      	ldr	r3, [sp, #4]
 800b3dc:	429e      	cmp	r6, r3
 800b3de:	f200 8108 	bhi.w	800b5f2 <_scanf_float+0x296>
 800b3e2:	2001      	movs	r0, #1
 800b3e4:	b007      	add	sp, #28
 800b3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b3ee:	2a0d      	cmp	r2, #13
 800b3f0:	d8e6      	bhi.n	800b3c0 <_scanf_float+0x64>
 800b3f2:	a101      	add	r1, pc, #4	@ (adr r1, 800b3f8 <_scanf_float+0x9c>)
 800b3f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b3f8:	0800b53f 	.word	0x0800b53f
 800b3fc:	0800b3c1 	.word	0x0800b3c1
 800b400:	0800b3c1 	.word	0x0800b3c1
 800b404:	0800b3c1 	.word	0x0800b3c1
 800b408:	0800b59f 	.word	0x0800b59f
 800b40c:	0800b577 	.word	0x0800b577
 800b410:	0800b3c1 	.word	0x0800b3c1
 800b414:	0800b3c1 	.word	0x0800b3c1
 800b418:	0800b54d 	.word	0x0800b54d
 800b41c:	0800b3c1 	.word	0x0800b3c1
 800b420:	0800b3c1 	.word	0x0800b3c1
 800b424:	0800b3c1 	.word	0x0800b3c1
 800b428:	0800b3c1 	.word	0x0800b3c1
 800b42c:	0800b505 	.word	0x0800b505
 800b430:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b434:	e7db      	b.n	800b3ee <_scanf_float+0x92>
 800b436:	290e      	cmp	r1, #14
 800b438:	d8c2      	bhi.n	800b3c0 <_scanf_float+0x64>
 800b43a:	a001      	add	r0, pc, #4	@ (adr r0, 800b440 <_scanf_float+0xe4>)
 800b43c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b440:	0800b4f5 	.word	0x0800b4f5
 800b444:	0800b3c1 	.word	0x0800b3c1
 800b448:	0800b4f5 	.word	0x0800b4f5
 800b44c:	0800b58b 	.word	0x0800b58b
 800b450:	0800b3c1 	.word	0x0800b3c1
 800b454:	0800b49d 	.word	0x0800b49d
 800b458:	0800b4db 	.word	0x0800b4db
 800b45c:	0800b4db 	.word	0x0800b4db
 800b460:	0800b4db 	.word	0x0800b4db
 800b464:	0800b4db 	.word	0x0800b4db
 800b468:	0800b4db 	.word	0x0800b4db
 800b46c:	0800b4db 	.word	0x0800b4db
 800b470:	0800b4db 	.word	0x0800b4db
 800b474:	0800b4db 	.word	0x0800b4db
 800b478:	0800b4db 	.word	0x0800b4db
 800b47c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b47e:	d809      	bhi.n	800b494 <_scanf_float+0x138>
 800b480:	2b60      	cmp	r3, #96	@ 0x60
 800b482:	d8b2      	bhi.n	800b3ea <_scanf_float+0x8e>
 800b484:	2b54      	cmp	r3, #84	@ 0x54
 800b486:	d07b      	beq.n	800b580 <_scanf_float+0x224>
 800b488:	2b59      	cmp	r3, #89	@ 0x59
 800b48a:	d199      	bne.n	800b3c0 <_scanf_float+0x64>
 800b48c:	2d07      	cmp	r5, #7
 800b48e:	d197      	bne.n	800b3c0 <_scanf_float+0x64>
 800b490:	2508      	movs	r5, #8
 800b492:	e02c      	b.n	800b4ee <_scanf_float+0x192>
 800b494:	2b74      	cmp	r3, #116	@ 0x74
 800b496:	d073      	beq.n	800b580 <_scanf_float+0x224>
 800b498:	2b79      	cmp	r3, #121	@ 0x79
 800b49a:	e7f6      	b.n	800b48a <_scanf_float+0x12e>
 800b49c:	6821      	ldr	r1, [r4, #0]
 800b49e:	05c8      	lsls	r0, r1, #23
 800b4a0:	d51b      	bpl.n	800b4da <_scanf_float+0x17e>
 800b4a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b4a6:	6021      	str	r1, [r4, #0]
 800b4a8:	f109 0901 	add.w	r9, r9, #1
 800b4ac:	f1bb 0f00 	cmp.w	fp, #0
 800b4b0:	d003      	beq.n	800b4ba <_scanf_float+0x15e>
 800b4b2:	3201      	adds	r2, #1
 800b4b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4b8:	60a2      	str	r2, [r4, #8]
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	60a3      	str	r3, [r4, #8]
 800b4c0:	6923      	ldr	r3, [r4, #16]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	6123      	str	r3, [r4, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	607b      	str	r3, [r7, #4]
 800b4ce:	f340 8087 	ble.w	800b5e0 <_scanf_float+0x284>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	e765      	b.n	800b3a6 <_scanf_float+0x4a>
 800b4da:	eb1a 0105 	adds.w	r1, sl, r5
 800b4de:	f47f af6f 	bne.w	800b3c0 <_scanf_float+0x64>
 800b4e2:	6822      	ldr	r2, [r4, #0]
 800b4e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b4e8:	6022      	str	r2, [r4, #0]
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	468a      	mov	sl, r1
 800b4ee:	f806 3b01 	strb.w	r3, [r6], #1
 800b4f2:	e7e2      	b.n	800b4ba <_scanf_float+0x15e>
 800b4f4:	6822      	ldr	r2, [r4, #0]
 800b4f6:	0610      	lsls	r0, r2, #24
 800b4f8:	f57f af62 	bpl.w	800b3c0 <_scanf_float+0x64>
 800b4fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b500:	6022      	str	r2, [r4, #0]
 800b502:	e7f4      	b.n	800b4ee <_scanf_float+0x192>
 800b504:	f1ba 0f00 	cmp.w	sl, #0
 800b508:	d10e      	bne.n	800b528 <_scanf_float+0x1cc>
 800b50a:	f1b9 0f00 	cmp.w	r9, #0
 800b50e:	d10e      	bne.n	800b52e <_scanf_float+0x1d2>
 800b510:	6822      	ldr	r2, [r4, #0]
 800b512:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b516:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b51a:	d108      	bne.n	800b52e <_scanf_float+0x1d2>
 800b51c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b520:	6022      	str	r2, [r4, #0]
 800b522:	f04f 0a01 	mov.w	sl, #1
 800b526:	e7e2      	b.n	800b4ee <_scanf_float+0x192>
 800b528:	f1ba 0f02 	cmp.w	sl, #2
 800b52c:	d055      	beq.n	800b5da <_scanf_float+0x27e>
 800b52e:	2d01      	cmp	r5, #1
 800b530:	d002      	beq.n	800b538 <_scanf_float+0x1dc>
 800b532:	2d04      	cmp	r5, #4
 800b534:	f47f af44 	bne.w	800b3c0 <_scanf_float+0x64>
 800b538:	3501      	adds	r5, #1
 800b53a:	b2ed      	uxtb	r5, r5
 800b53c:	e7d7      	b.n	800b4ee <_scanf_float+0x192>
 800b53e:	f1ba 0f01 	cmp.w	sl, #1
 800b542:	f47f af3d 	bne.w	800b3c0 <_scanf_float+0x64>
 800b546:	f04f 0a02 	mov.w	sl, #2
 800b54a:	e7d0      	b.n	800b4ee <_scanf_float+0x192>
 800b54c:	b97d      	cbnz	r5, 800b56e <_scanf_float+0x212>
 800b54e:	f1b9 0f00 	cmp.w	r9, #0
 800b552:	f47f af38 	bne.w	800b3c6 <_scanf_float+0x6a>
 800b556:	6822      	ldr	r2, [r4, #0]
 800b558:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b55c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b560:	f040 8108 	bne.w	800b774 <_scanf_float+0x418>
 800b564:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b568:	6022      	str	r2, [r4, #0]
 800b56a:	2501      	movs	r5, #1
 800b56c:	e7bf      	b.n	800b4ee <_scanf_float+0x192>
 800b56e:	2d03      	cmp	r5, #3
 800b570:	d0e2      	beq.n	800b538 <_scanf_float+0x1dc>
 800b572:	2d05      	cmp	r5, #5
 800b574:	e7de      	b.n	800b534 <_scanf_float+0x1d8>
 800b576:	2d02      	cmp	r5, #2
 800b578:	f47f af22 	bne.w	800b3c0 <_scanf_float+0x64>
 800b57c:	2503      	movs	r5, #3
 800b57e:	e7b6      	b.n	800b4ee <_scanf_float+0x192>
 800b580:	2d06      	cmp	r5, #6
 800b582:	f47f af1d 	bne.w	800b3c0 <_scanf_float+0x64>
 800b586:	2507      	movs	r5, #7
 800b588:	e7b1      	b.n	800b4ee <_scanf_float+0x192>
 800b58a:	6822      	ldr	r2, [r4, #0]
 800b58c:	0591      	lsls	r1, r2, #22
 800b58e:	f57f af17 	bpl.w	800b3c0 <_scanf_float+0x64>
 800b592:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b596:	6022      	str	r2, [r4, #0]
 800b598:	f8cd 9008 	str.w	r9, [sp, #8]
 800b59c:	e7a7      	b.n	800b4ee <_scanf_float+0x192>
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b5a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b5a8:	d006      	beq.n	800b5b8 <_scanf_float+0x25c>
 800b5aa:	0550      	lsls	r0, r2, #21
 800b5ac:	f57f af08 	bpl.w	800b3c0 <_scanf_float+0x64>
 800b5b0:	f1b9 0f00 	cmp.w	r9, #0
 800b5b4:	f000 80de 	beq.w	800b774 <_scanf_float+0x418>
 800b5b8:	0591      	lsls	r1, r2, #22
 800b5ba:	bf58      	it	pl
 800b5bc:	9902      	ldrpl	r1, [sp, #8]
 800b5be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5c2:	bf58      	it	pl
 800b5c4:	eba9 0101 	subpl.w	r1, r9, r1
 800b5c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b5cc:	bf58      	it	pl
 800b5ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b5d2:	6022      	str	r2, [r4, #0]
 800b5d4:	f04f 0900 	mov.w	r9, #0
 800b5d8:	e789      	b.n	800b4ee <_scanf_float+0x192>
 800b5da:	f04f 0a03 	mov.w	sl, #3
 800b5de:	e786      	b.n	800b4ee <_scanf_float+0x192>
 800b5e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4798      	blx	r3
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	f43f aedb 	beq.w	800b3a6 <_scanf_float+0x4a>
 800b5f0:	e6e6      	b.n	800b3c0 <_scanf_float+0x64>
 800b5f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5fa:	463a      	mov	r2, r7
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	4798      	blx	r3
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	3b01      	subs	r3, #1
 800b604:	6123      	str	r3, [r4, #16]
 800b606:	e6e8      	b.n	800b3da <_scanf_float+0x7e>
 800b608:	1e6b      	subs	r3, r5, #1
 800b60a:	2b06      	cmp	r3, #6
 800b60c:	d824      	bhi.n	800b658 <_scanf_float+0x2fc>
 800b60e:	2d02      	cmp	r5, #2
 800b610:	d836      	bhi.n	800b680 <_scanf_float+0x324>
 800b612:	9b01      	ldr	r3, [sp, #4]
 800b614:	429e      	cmp	r6, r3
 800b616:	f67f aee4 	bls.w	800b3e2 <_scanf_float+0x86>
 800b61a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b61e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b622:	463a      	mov	r2, r7
 800b624:	4640      	mov	r0, r8
 800b626:	4798      	blx	r3
 800b628:	6923      	ldr	r3, [r4, #16]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	e7f0      	b.n	800b612 <_scanf_float+0x2b6>
 800b630:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b634:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b638:	463a      	mov	r2, r7
 800b63a:	4640      	mov	r0, r8
 800b63c:	4798      	blx	r3
 800b63e:	6923      	ldr	r3, [r4, #16]
 800b640:	3b01      	subs	r3, #1
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b648:	fa5f fa8a 	uxtb.w	sl, sl
 800b64c:	f1ba 0f02 	cmp.w	sl, #2
 800b650:	d1ee      	bne.n	800b630 <_scanf_float+0x2d4>
 800b652:	3d03      	subs	r5, #3
 800b654:	b2ed      	uxtb	r5, r5
 800b656:	1b76      	subs	r6, r6, r5
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	05da      	lsls	r2, r3, #23
 800b65c:	d530      	bpl.n	800b6c0 <_scanf_float+0x364>
 800b65e:	055b      	lsls	r3, r3, #21
 800b660:	d511      	bpl.n	800b686 <_scanf_float+0x32a>
 800b662:	9b01      	ldr	r3, [sp, #4]
 800b664:	429e      	cmp	r6, r3
 800b666:	f67f aebc 	bls.w	800b3e2 <_scanf_float+0x86>
 800b66a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b66e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b672:	463a      	mov	r2, r7
 800b674:	4640      	mov	r0, r8
 800b676:	4798      	blx	r3
 800b678:	6923      	ldr	r3, [r4, #16]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	6123      	str	r3, [r4, #16]
 800b67e:	e7f0      	b.n	800b662 <_scanf_float+0x306>
 800b680:	46aa      	mov	sl, r5
 800b682:	46b3      	mov	fp, r6
 800b684:	e7de      	b.n	800b644 <_scanf_float+0x2e8>
 800b686:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b68a:	6923      	ldr	r3, [r4, #16]
 800b68c:	2965      	cmp	r1, #101	@ 0x65
 800b68e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b692:	f106 35ff 	add.w	r5, r6, #4294967295
 800b696:	6123      	str	r3, [r4, #16]
 800b698:	d00c      	beq.n	800b6b4 <_scanf_float+0x358>
 800b69a:	2945      	cmp	r1, #69	@ 0x45
 800b69c:	d00a      	beq.n	800b6b4 <_scanf_float+0x358>
 800b69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6a2:	463a      	mov	r2, r7
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	4798      	blx	r3
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	1eb5      	subs	r5, r6, #2
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6b8:	463a      	mov	r2, r7
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	4798      	blx	r3
 800b6be:	462e      	mov	r6, r5
 800b6c0:	6822      	ldr	r2, [r4, #0]
 800b6c2:	f012 0210 	ands.w	r2, r2, #16
 800b6c6:	d001      	beq.n	800b6cc <_scanf_float+0x370>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	e68b      	b.n	800b3e4 <_scanf_float+0x88>
 800b6cc:	7032      	strb	r2, [r6, #0]
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b6d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6d8:	d11c      	bne.n	800b714 <_scanf_float+0x3b8>
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	454b      	cmp	r3, r9
 800b6de:	eba3 0209 	sub.w	r2, r3, r9
 800b6e2:	d123      	bne.n	800b72c <_scanf_float+0x3d0>
 800b6e4:	9901      	ldr	r1, [sp, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	f002 fc6d 	bl	800dfc8 <_strtod_r>
 800b6ee:	9b03      	ldr	r3, [sp, #12]
 800b6f0:	6821      	ldr	r1, [r4, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f011 0f02 	tst.w	r1, #2
 800b6f8:	ec57 6b10 	vmov	r6, r7, d0
 800b6fc:	f103 0204 	add.w	r2, r3, #4
 800b700:	d01f      	beq.n	800b742 <_scanf_float+0x3e6>
 800b702:	9903      	ldr	r1, [sp, #12]
 800b704:	600a      	str	r2, [r1, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	e9c3 6700 	strd	r6, r7, [r3]
 800b70c:	68e3      	ldr	r3, [r4, #12]
 800b70e:	3301      	adds	r3, #1
 800b710:	60e3      	str	r3, [r4, #12]
 800b712:	e7d9      	b.n	800b6c8 <_scanf_float+0x36c>
 800b714:	9b04      	ldr	r3, [sp, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0e4      	beq.n	800b6e4 <_scanf_float+0x388>
 800b71a:	9905      	ldr	r1, [sp, #20]
 800b71c:	230a      	movs	r3, #10
 800b71e:	3101      	adds	r1, #1
 800b720:	4640      	mov	r0, r8
 800b722:	f002 fcd1 	bl	800e0c8 <_strtol_r>
 800b726:	9b04      	ldr	r3, [sp, #16]
 800b728:	9e05      	ldr	r6, [sp, #20]
 800b72a:	1ac2      	subs	r2, r0, r3
 800b72c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b730:	429e      	cmp	r6, r3
 800b732:	bf28      	it	cs
 800b734:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b738:	4910      	ldr	r1, [pc, #64]	@ (800b77c <_scanf_float+0x420>)
 800b73a:	4630      	mov	r0, r6
 800b73c:	f000 f8e4 	bl	800b908 <siprintf>
 800b740:	e7d0      	b.n	800b6e4 <_scanf_float+0x388>
 800b742:	f011 0f04 	tst.w	r1, #4
 800b746:	9903      	ldr	r1, [sp, #12]
 800b748:	600a      	str	r2, [r1, #0]
 800b74a:	d1dc      	bne.n	800b706 <_scanf_float+0x3aa>
 800b74c:	681d      	ldr	r5, [r3, #0]
 800b74e:	4632      	mov	r2, r6
 800b750:	463b      	mov	r3, r7
 800b752:	4630      	mov	r0, r6
 800b754:	4639      	mov	r1, r7
 800b756:	f7f5 fa19 	bl	8000b8c <__aeabi_dcmpun>
 800b75a:	b128      	cbz	r0, 800b768 <_scanf_float+0x40c>
 800b75c:	4808      	ldr	r0, [pc, #32]	@ (800b780 <_scanf_float+0x424>)
 800b75e:	f000 fa2d 	bl	800bbbc <nanf>
 800b762:	ed85 0a00 	vstr	s0, [r5]
 800b766:	e7d1      	b.n	800b70c <_scanf_float+0x3b0>
 800b768:	4630      	mov	r0, r6
 800b76a:	4639      	mov	r1, r7
 800b76c:	f7f5 fa6c 	bl	8000c48 <__aeabi_d2f>
 800b770:	6028      	str	r0, [r5, #0]
 800b772:	e7cb      	b.n	800b70c <_scanf_float+0x3b0>
 800b774:	f04f 0900 	mov.w	r9, #0
 800b778:	e629      	b.n	800b3ce <_scanf_float+0x72>
 800b77a:	bf00      	nop
 800b77c:	0800f564 	.word	0x0800f564
 800b780:	0800f8fd 	.word	0x0800f8fd

0800b784 <std>:
 800b784:	2300      	movs	r3, #0
 800b786:	b510      	push	{r4, lr}
 800b788:	4604      	mov	r4, r0
 800b78a:	e9c0 3300 	strd	r3, r3, [r0]
 800b78e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b792:	6083      	str	r3, [r0, #8]
 800b794:	8181      	strh	r1, [r0, #12]
 800b796:	6643      	str	r3, [r0, #100]	@ 0x64
 800b798:	81c2      	strh	r2, [r0, #14]
 800b79a:	6183      	str	r3, [r0, #24]
 800b79c:	4619      	mov	r1, r3
 800b79e:	2208      	movs	r2, #8
 800b7a0:	305c      	adds	r0, #92	@ 0x5c
 800b7a2:	f000 f914 	bl	800b9ce <memset>
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7dc <std+0x58>)
 800b7a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e0 <std+0x5c>)
 800b7ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e4 <std+0x60>)
 800b7b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e8 <std+0x64>)
 800b7b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <std+0x68>)
 800b7b8:	6224      	str	r4, [r4, #32]
 800b7ba:	429c      	cmp	r4, r3
 800b7bc:	d006      	beq.n	800b7cc <std+0x48>
 800b7be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7c2:	4294      	cmp	r4, r2
 800b7c4:	d002      	beq.n	800b7cc <std+0x48>
 800b7c6:	33d0      	adds	r3, #208	@ 0xd0
 800b7c8:	429c      	cmp	r4, r3
 800b7ca:	d105      	bne.n	800b7d8 <std+0x54>
 800b7cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d4:	f000 b9e0 	b.w	800bb98 <__retarget_lock_init_recursive>
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	bf00      	nop
 800b7dc:	0800b949 	.word	0x0800b949
 800b7e0:	0800b96b 	.word	0x0800b96b
 800b7e4:	0800b9a3 	.word	0x0800b9a3
 800b7e8:	0800b9c7 	.word	0x0800b9c7
 800b7ec:	20005e94 	.word	0x20005e94

0800b7f0 <stdio_exit_handler>:
 800b7f0:	4a02      	ldr	r2, [pc, #8]	@ (800b7fc <stdio_exit_handler+0xc>)
 800b7f2:	4903      	ldr	r1, [pc, #12]	@ (800b800 <stdio_exit_handler+0x10>)
 800b7f4:	4803      	ldr	r0, [pc, #12]	@ (800b804 <stdio_exit_handler+0x14>)
 800b7f6:	f000 b869 	b.w	800b8cc <_fwalk_sglue>
 800b7fa:	bf00      	nop
 800b7fc:	20000170 	.word	0x20000170
 800b800:	0800e485 	.word	0x0800e485
 800b804:	20000180 	.word	0x20000180

0800b808 <cleanup_stdio>:
 800b808:	6841      	ldr	r1, [r0, #4]
 800b80a:	4b0c      	ldr	r3, [pc, #48]	@ (800b83c <cleanup_stdio+0x34>)
 800b80c:	4299      	cmp	r1, r3
 800b80e:	b510      	push	{r4, lr}
 800b810:	4604      	mov	r4, r0
 800b812:	d001      	beq.n	800b818 <cleanup_stdio+0x10>
 800b814:	f002 fe36 	bl	800e484 <_fflush_r>
 800b818:	68a1      	ldr	r1, [r4, #8]
 800b81a:	4b09      	ldr	r3, [pc, #36]	@ (800b840 <cleanup_stdio+0x38>)
 800b81c:	4299      	cmp	r1, r3
 800b81e:	d002      	beq.n	800b826 <cleanup_stdio+0x1e>
 800b820:	4620      	mov	r0, r4
 800b822:	f002 fe2f 	bl	800e484 <_fflush_r>
 800b826:	68e1      	ldr	r1, [r4, #12]
 800b828:	4b06      	ldr	r3, [pc, #24]	@ (800b844 <cleanup_stdio+0x3c>)
 800b82a:	4299      	cmp	r1, r3
 800b82c:	d004      	beq.n	800b838 <cleanup_stdio+0x30>
 800b82e:	4620      	mov	r0, r4
 800b830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b834:	f002 be26 	b.w	800e484 <_fflush_r>
 800b838:	bd10      	pop	{r4, pc}
 800b83a:	bf00      	nop
 800b83c:	20005e94 	.word	0x20005e94
 800b840:	20005efc 	.word	0x20005efc
 800b844:	20005f64 	.word	0x20005f64

0800b848 <global_stdio_init.part.0>:
 800b848:	b510      	push	{r4, lr}
 800b84a:	4b0b      	ldr	r3, [pc, #44]	@ (800b878 <global_stdio_init.part.0+0x30>)
 800b84c:	4c0b      	ldr	r4, [pc, #44]	@ (800b87c <global_stdio_init.part.0+0x34>)
 800b84e:	4a0c      	ldr	r2, [pc, #48]	@ (800b880 <global_stdio_init.part.0+0x38>)
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	4620      	mov	r0, r4
 800b854:	2200      	movs	r2, #0
 800b856:	2104      	movs	r1, #4
 800b858:	f7ff ff94 	bl	800b784 <std>
 800b85c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b860:	2201      	movs	r2, #1
 800b862:	2109      	movs	r1, #9
 800b864:	f7ff ff8e 	bl	800b784 <std>
 800b868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b86c:	2202      	movs	r2, #2
 800b86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b872:	2112      	movs	r1, #18
 800b874:	f7ff bf86 	b.w	800b784 <std>
 800b878:	20005fcc 	.word	0x20005fcc
 800b87c:	20005e94 	.word	0x20005e94
 800b880:	0800b7f1 	.word	0x0800b7f1

0800b884 <__sfp_lock_acquire>:
 800b884:	4801      	ldr	r0, [pc, #4]	@ (800b88c <__sfp_lock_acquire+0x8>)
 800b886:	f000 b988 	b.w	800bb9a <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	20005fd5 	.word	0x20005fd5

0800b890 <__sfp_lock_release>:
 800b890:	4801      	ldr	r0, [pc, #4]	@ (800b898 <__sfp_lock_release+0x8>)
 800b892:	f000 b983 	b.w	800bb9c <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	20005fd5 	.word	0x20005fd5

0800b89c <__sinit>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4604      	mov	r4, r0
 800b8a0:	f7ff fff0 	bl	800b884 <__sfp_lock_acquire>
 800b8a4:	6a23      	ldr	r3, [r4, #32]
 800b8a6:	b11b      	cbz	r3, 800b8b0 <__sinit+0x14>
 800b8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ac:	f7ff bff0 	b.w	800b890 <__sfp_lock_release>
 800b8b0:	4b04      	ldr	r3, [pc, #16]	@ (800b8c4 <__sinit+0x28>)
 800b8b2:	6223      	str	r3, [r4, #32]
 800b8b4:	4b04      	ldr	r3, [pc, #16]	@ (800b8c8 <__sinit+0x2c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f5      	bne.n	800b8a8 <__sinit+0xc>
 800b8bc:	f7ff ffc4 	bl	800b848 <global_stdio_init.part.0>
 800b8c0:	e7f2      	b.n	800b8a8 <__sinit+0xc>
 800b8c2:	bf00      	nop
 800b8c4:	0800b809 	.word	0x0800b809
 800b8c8:	20005fcc 	.word	0x20005fcc

0800b8cc <_fwalk_sglue>:
 800b8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d0:	4607      	mov	r7, r0
 800b8d2:	4688      	mov	r8, r1
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	2600      	movs	r6, #0
 800b8d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b8e0:	d505      	bpl.n	800b8ee <_fwalk_sglue+0x22>
 800b8e2:	6824      	ldr	r4, [r4, #0]
 800b8e4:	2c00      	cmp	r4, #0
 800b8e6:	d1f7      	bne.n	800b8d8 <_fwalk_sglue+0xc>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d907      	bls.n	800b904 <_fwalk_sglue+0x38>
 800b8f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	d003      	beq.n	800b904 <_fwalk_sglue+0x38>
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	4638      	mov	r0, r7
 800b900:	47c0      	blx	r8
 800b902:	4306      	orrs	r6, r0
 800b904:	3568      	adds	r5, #104	@ 0x68
 800b906:	e7e9      	b.n	800b8dc <_fwalk_sglue+0x10>

0800b908 <siprintf>:
 800b908:	b40e      	push	{r1, r2, r3}
 800b90a:	b500      	push	{lr}
 800b90c:	b09c      	sub	sp, #112	@ 0x70
 800b90e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b910:	9002      	str	r0, [sp, #8]
 800b912:	9006      	str	r0, [sp, #24]
 800b914:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b918:	4809      	ldr	r0, [pc, #36]	@ (800b940 <siprintf+0x38>)
 800b91a:	9107      	str	r1, [sp, #28]
 800b91c:	9104      	str	r1, [sp, #16]
 800b91e:	4909      	ldr	r1, [pc, #36]	@ (800b944 <siprintf+0x3c>)
 800b920:	f853 2b04 	ldr.w	r2, [r3], #4
 800b924:	9105      	str	r1, [sp, #20]
 800b926:	6800      	ldr	r0, [r0, #0]
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	a902      	add	r1, sp, #8
 800b92c:	f002 fc2a 	bl	800e184 <_svfiprintf_r>
 800b930:	9b02      	ldr	r3, [sp, #8]
 800b932:	2200      	movs	r2, #0
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	b01c      	add	sp, #112	@ 0x70
 800b938:	f85d eb04 	ldr.w	lr, [sp], #4
 800b93c:	b003      	add	sp, #12
 800b93e:	4770      	bx	lr
 800b940:	2000017c 	.word	0x2000017c
 800b944:	ffff0208 	.word	0xffff0208

0800b948 <__sread>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	460c      	mov	r4, r1
 800b94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b950:	f000 f8d4 	bl	800bafc <_read_r>
 800b954:	2800      	cmp	r0, #0
 800b956:	bfab      	itete	ge
 800b958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b95a:	89a3      	ldrhlt	r3, [r4, #12]
 800b95c:	181b      	addge	r3, r3, r0
 800b95e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b962:	bfac      	ite	ge
 800b964:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b966:	81a3      	strhlt	r3, [r4, #12]
 800b968:	bd10      	pop	{r4, pc}

0800b96a <__swrite>:
 800b96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96e:	461f      	mov	r7, r3
 800b970:	898b      	ldrh	r3, [r1, #12]
 800b972:	05db      	lsls	r3, r3, #23
 800b974:	4605      	mov	r5, r0
 800b976:	460c      	mov	r4, r1
 800b978:	4616      	mov	r6, r2
 800b97a:	d505      	bpl.n	800b988 <__swrite+0x1e>
 800b97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b980:	2302      	movs	r3, #2
 800b982:	2200      	movs	r2, #0
 800b984:	f000 f8a8 	bl	800bad8 <_lseek_r>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b98e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	4632      	mov	r2, r6
 800b996:	463b      	mov	r3, r7
 800b998:	4628      	mov	r0, r5
 800b99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b99e:	f000 b8bf 	b.w	800bb20 <_write_r>

0800b9a2 <__sseek>:
 800b9a2:	b510      	push	{r4, lr}
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9aa:	f000 f895 	bl	800bad8 <_lseek_r>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	bf15      	itete	ne
 800b9b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9be:	81a3      	strheq	r3, [r4, #12]
 800b9c0:	bf18      	it	ne
 800b9c2:	81a3      	strhne	r3, [r4, #12]
 800b9c4:	bd10      	pop	{r4, pc}

0800b9c6 <__sclose>:
 800b9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ca:	f000 b81f 	b.w	800ba0c <_close_r>

0800b9ce <memset>:
 800b9ce:	4402      	add	r2, r0
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d100      	bne.n	800b9d8 <memset+0xa>
 800b9d6:	4770      	bx	lr
 800b9d8:	f803 1b01 	strb.w	r1, [r3], #1
 800b9dc:	e7f9      	b.n	800b9d2 <memset+0x4>
	...

0800b9e0 <strupr>:
 800b9e0:	b510      	push	{r4, lr}
 800b9e2:	4c07      	ldr	r4, [pc, #28]	@ (800ba00 <strupr+0x20>)
 800b9e4:	1e42      	subs	r2, r0, #1
 800b9e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b9ea:	b903      	cbnz	r3, 800b9ee <strupr+0xe>
 800b9ec:	bd10      	pop	{r4, pc}
 800b9ee:	5ce1      	ldrb	r1, [r4, r3]
 800b9f0:	f001 0103 	and.w	r1, r1, #3
 800b9f4:	2902      	cmp	r1, #2
 800b9f6:	bf08      	it	eq
 800b9f8:	3b20      	subeq	r3, #32
 800b9fa:	7013      	strb	r3, [r2, #0]
 800b9fc:	e7f3      	b.n	800b9e6 <strupr+0x6>
 800b9fe:	bf00      	nop
 800ba00:	0800f7a9 	.word	0x0800f7a9

0800ba04 <_localeconv_r>:
 800ba04:	4800      	ldr	r0, [pc, #0]	@ (800ba08 <_localeconv_r+0x4>)
 800ba06:	4770      	bx	lr
 800ba08:	200002bc 	.word	0x200002bc

0800ba0c <_close_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4d06      	ldr	r5, [pc, #24]	@ (800ba28 <_close_r+0x1c>)
 800ba10:	2300      	movs	r3, #0
 800ba12:	4604      	mov	r4, r0
 800ba14:	4608      	mov	r0, r1
 800ba16:	602b      	str	r3, [r5, #0]
 800ba18:	f7f7 fba2 	bl	8003160 <_close>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_close_r+0x1a>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_close_r+0x1a>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	20005fd0 	.word	0x20005fd0

0800ba2c <_reclaim_reent>:
 800ba2c:	4b29      	ldr	r3, [pc, #164]	@ (800bad4 <_reclaim_reent+0xa8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4283      	cmp	r3, r0
 800ba32:	b570      	push	{r4, r5, r6, lr}
 800ba34:	4604      	mov	r4, r0
 800ba36:	d04b      	beq.n	800bad0 <_reclaim_reent+0xa4>
 800ba38:	69c3      	ldr	r3, [r0, #28]
 800ba3a:	b1ab      	cbz	r3, 800ba68 <_reclaim_reent+0x3c>
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	b16b      	cbz	r3, 800ba5c <_reclaim_reent+0x30>
 800ba40:	2500      	movs	r5, #0
 800ba42:	69e3      	ldr	r3, [r4, #28]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	5959      	ldr	r1, [r3, r5]
 800ba48:	2900      	cmp	r1, #0
 800ba4a:	d13b      	bne.n	800bac4 <_reclaim_reent+0x98>
 800ba4c:	3504      	adds	r5, #4
 800ba4e:	2d80      	cmp	r5, #128	@ 0x80
 800ba50:	d1f7      	bne.n	800ba42 <_reclaim_reent+0x16>
 800ba52:	69e3      	ldr	r3, [r4, #28]
 800ba54:	4620      	mov	r0, r4
 800ba56:	68d9      	ldr	r1, [r3, #12]
 800ba58:	f000 ff02 	bl	800c860 <_free_r>
 800ba5c:	69e3      	ldr	r3, [r4, #28]
 800ba5e:	6819      	ldr	r1, [r3, #0]
 800ba60:	b111      	cbz	r1, 800ba68 <_reclaim_reent+0x3c>
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fefc 	bl	800c860 <_free_r>
 800ba68:	6961      	ldr	r1, [r4, #20]
 800ba6a:	b111      	cbz	r1, 800ba72 <_reclaim_reent+0x46>
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f000 fef7 	bl	800c860 <_free_r>
 800ba72:	69e1      	ldr	r1, [r4, #28]
 800ba74:	b111      	cbz	r1, 800ba7c <_reclaim_reent+0x50>
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 fef2 	bl	800c860 <_free_r>
 800ba7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba7e:	b111      	cbz	r1, 800ba86 <_reclaim_reent+0x5a>
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 feed 	bl	800c860 <_free_r>
 800ba86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba88:	b111      	cbz	r1, 800ba90 <_reclaim_reent+0x64>
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 fee8 	bl	800c860 <_free_r>
 800ba90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ba92:	b111      	cbz	r1, 800ba9a <_reclaim_reent+0x6e>
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 fee3 	bl	800c860 <_free_r>
 800ba9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba9c:	b111      	cbz	r1, 800baa4 <_reclaim_reent+0x78>
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fede 	bl	800c860 <_free_r>
 800baa4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800baa6:	b111      	cbz	r1, 800baae <_reclaim_reent+0x82>
 800baa8:	4620      	mov	r0, r4
 800baaa:	f000 fed9 	bl	800c860 <_free_r>
 800baae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bab0:	b111      	cbz	r1, 800bab8 <_reclaim_reent+0x8c>
 800bab2:	4620      	mov	r0, r4
 800bab4:	f000 fed4 	bl	800c860 <_free_r>
 800bab8:	6a23      	ldr	r3, [r4, #32]
 800baba:	b14b      	cbz	r3, 800bad0 <_reclaim_reent+0xa4>
 800babc:	4620      	mov	r0, r4
 800babe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bac2:	4718      	bx	r3
 800bac4:	680e      	ldr	r6, [r1, #0]
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 feca 	bl	800c860 <_free_r>
 800bacc:	4631      	mov	r1, r6
 800bace:	e7bb      	b.n	800ba48 <_reclaim_reent+0x1c>
 800bad0:	bd70      	pop	{r4, r5, r6, pc}
 800bad2:	bf00      	nop
 800bad4:	2000017c 	.word	0x2000017c

0800bad8 <_lseek_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	@ (800baf8 <_lseek_r+0x20>)
 800badc:	4604      	mov	r4, r0
 800bade:	4608      	mov	r0, r1
 800bae0:	4611      	mov	r1, r2
 800bae2:	2200      	movs	r2, #0
 800bae4:	602a      	str	r2, [r5, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	f7f7 fb61 	bl	80031ae <_lseek>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_lseek_r+0x1e>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_lseek_r+0x1e>
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20005fd0 	.word	0x20005fd0

0800bafc <_read_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4d07      	ldr	r5, [pc, #28]	@ (800bb1c <_read_r+0x20>)
 800bb00:	4604      	mov	r4, r0
 800bb02:	4608      	mov	r0, r1
 800bb04:	4611      	mov	r1, r2
 800bb06:	2200      	movs	r2, #0
 800bb08:	602a      	str	r2, [r5, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f7f7 faef 	bl	80030ee <_read>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_read_r+0x1e>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_read_r+0x1e>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	20005fd0 	.word	0x20005fd0

0800bb20 <_write_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d07      	ldr	r5, [pc, #28]	@ (800bb40 <_write_r+0x20>)
 800bb24:	4604      	mov	r4, r0
 800bb26:	4608      	mov	r0, r1
 800bb28:	4611      	mov	r1, r2
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	602a      	str	r2, [r5, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f7f7 fafa 	bl	8003128 <_write>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_write_r+0x1e>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_write_r+0x1e>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	20005fd0 	.word	0x20005fd0

0800bb44 <__errno>:
 800bb44:	4b01      	ldr	r3, [pc, #4]	@ (800bb4c <__errno+0x8>)
 800bb46:	6818      	ldr	r0, [r3, #0]
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	2000017c 	.word	0x2000017c

0800bb50 <__libc_init_array>:
 800bb50:	b570      	push	{r4, r5, r6, lr}
 800bb52:	4d0d      	ldr	r5, [pc, #52]	@ (800bb88 <__libc_init_array+0x38>)
 800bb54:	4c0d      	ldr	r4, [pc, #52]	@ (800bb8c <__libc_init_array+0x3c>)
 800bb56:	1b64      	subs	r4, r4, r5
 800bb58:	10a4      	asrs	r4, r4, #2
 800bb5a:	2600      	movs	r6, #0
 800bb5c:	42a6      	cmp	r6, r4
 800bb5e:	d109      	bne.n	800bb74 <__libc_init_array+0x24>
 800bb60:	4d0b      	ldr	r5, [pc, #44]	@ (800bb90 <__libc_init_array+0x40>)
 800bb62:	4c0c      	ldr	r4, [pc, #48]	@ (800bb94 <__libc_init_array+0x44>)
 800bb64:	f003 fb72 	bl	800f24c <_init>
 800bb68:	1b64      	subs	r4, r4, r5
 800bb6a:	10a4      	asrs	r4, r4, #2
 800bb6c:	2600      	movs	r6, #0
 800bb6e:	42a6      	cmp	r6, r4
 800bb70:	d105      	bne.n	800bb7e <__libc_init_array+0x2e>
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb78:	4798      	blx	r3
 800bb7a:	3601      	adds	r6, #1
 800bb7c:	e7ee      	b.n	800bb5c <__libc_init_array+0xc>
 800bb7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb82:	4798      	blx	r3
 800bb84:	3601      	adds	r6, #1
 800bb86:	e7f2      	b.n	800bb6e <__libc_init_array+0x1e>
 800bb88:	0800f968 	.word	0x0800f968
 800bb8c:	0800f968 	.word	0x0800f968
 800bb90:	0800f968 	.word	0x0800f968
 800bb94:	0800f96c 	.word	0x0800f96c

0800bb98 <__retarget_lock_init_recursive>:
 800bb98:	4770      	bx	lr

0800bb9a <__retarget_lock_acquire_recursive>:
 800bb9a:	4770      	bx	lr

0800bb9c <__retarget_lock_release_recursive>:
 800bb9c:	4770      	bx	lr

0800bb9e <memcpy>:
 800bb9e:	440a      	add	r2, r1
 800bba0:	4291      	cmp	r1, r2
 800bba2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bba6:	d100      	bne.n	800bbaa <memcpy+0xc>
 800bba8:	4770      	bx	lr
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb4:	4291      	cmp	r1, r2
 800bbb6:	d1f9      	bne.n	800bbac <memcpy+0xe>
 800bbb8:	bd10      	pop	{r4, pc}
	...

0800bbbc <nanf>:
 800bbbc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bbc4 <nanf+0x8>
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	7fc00000 	.word	0x7fc00000

0800bbc8 <quorem>:
 800bbc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	6903      	ldr	r3, [r0, #16]
 800bbce:	690c      	ldr	r4, [r1, #16]
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	db7e      	blt.n	800bcd4 <quorem+0x10c>
 800bbd6:	3c01      	subs	r4, #1
 800bbd8:	f101 0814 	add.w	r8, r1, #20
 800bbdc:	00a3      	lsls	r3, r4, #2
 800bbde:	f100 0514 	add.w	r5, r0, #20
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbfa:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbfe:	d32e      	bcc.n	800bc5e <quorem+0x96>
 800bc00:	f04f 0a00 	mov.w	sl, #0
 800bc04:	46c4      	mov	ip, r8
 800bc06:	46ae      	mov	lr, r5
 800bc08:	46d3      	mov	fp, sl
 800bc0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc0e:	b298      	uxth	r0, r3
 800bc10:	fb06 a000 	mla	r0, r6, r0, sl
 800bc14:	0c02      	lsrs	r2, r0, #16
 800bc16:	0c1b      	lsrs	r3, r3, #16
 800bc18:	fb06 2303 	mla	r3, r6, r3, r2
 800bc1c:	f8de 2000 	ldr.w	r2, [lr]
 800bc20:	b280      	uxth	r0, r0
 800bc22:	b292      	uxth	r2, r2
 800bc24:	1a12      	subs	r2, r2, r0
 800bc26:	445a      	add	r2, fp
 800bc28:	f8de 0000 	ldr.w	r0, [lr]
 800bc2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc36:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc3a:	b292      	uxth	r2, r2
 800bc3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc40:	45e1      	cmp	r9, ip
 800bc42:	f84e 2b04 	str.w	r2, [lr], #4
 800bc46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc4a:	d2de      	bcs.n	800bc0a <quorem+0x42>
 800bc4c:	9b00      	ldr	r3, [sp, #0]
 800bc4e:	58eb      	ldr	r3, [r5, r3]
 800bc50:	b92b      	cbnz	r3, 800bc5e <quorem+0x96>
 800bc52:	9b01      	ldr	r3, [sp, #4]
 800bc54:	3b04      	subs	r3, #4
 800bc56:	429d      	cmp	r5, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	d32f      	bcc.n	800bcbc <quorem+0xf4>
 800bc5c:	613c      	str	r4, [r7, #16]
 800bc5e:	4638      	mov	r0, r7
 800bc60:	f001 f9c2 	bl	800cfe8 <__mcmp>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	db25      	blt.n	800bcb4 <quorem+0xec>
 800bc68:	4629      	mov	r1, r5
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc70:	f8d1 c000 	ldr.w	ip, [r1]
 800bc74:	fa1f fe82 	uxth.w	lr, r2
 800bc78:	fa1f f38c 	uxth.w	r3, ip
 800bc7c:	eba3 030e 	sub.w	r3, r3, lr
 800bc80:	4403      	add	r3, r0
 800bc82:	0c12      	lsrs	r2, r2, #16
 800bc84:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc92:	45c1      	cmp	r9, r8
 800bc94:	f841 3b04 	str.w	r3, [r1], #4
 800bc98:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc9c:	d2e6      	bcs.n	800bc6c <quorem+0xa4>
 800bc9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bca6:	b922      	cbnz	r2, 800bcb2 <quorem+0xea>
 800bca8:	3b04      	subs	r3, #4
 800bcaa:	429d      	cmp	r5, r3
 800bcac:	461a      	mov	r2, r3
 800bcae:	d30b      	bcc.n	800bcc8 <quorem+0x100>
 800bcb0:	613c      	str	r4, [r7, #16]
 800bcb2:	3601      	adds	r6, #1
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	b003      	add	sp, #12
 800bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbc:	6812      	ldr	r2, [r2, #0]
 800bcbe:	3b04      	subs	r3, #4
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	d1cb      	bne.n	800bc5c <quorem+0x94>
 800bcc4:	3c01      	subs	r4, #1
 800bcc6:	e7c6      	b.n	800bc56 <quorem+0x8e>
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	3b04      	subs	r3, #4
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	d1ef      	bne.n	800bcb0 <quorem+0xe8>
 800bcd0:	3c01      	subs	r4, #1
 800bcd2:	e7ea      	b.n	800bcaa <quorem+0xe2>
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	e7ee      	b.n	800bcb6 <quorem+0xee>

0800bcd8 <_dtoa_r>:
 800bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	69c7      	ldr	r7, [r0, #28]
 800bcde:	b099      	sub	sp, #100	@ 0x64
 800bce0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bce4:	ec55 4b10 	vmov	r4, r5, d0
 800bce8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bcea:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcec:	4683      	mov	fp, r0
 800bcee:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcf2:	b97f      	cbnz	r7, 800bd14 <_dtoa_r+0x3c>
 800bcf4:	2010      	movs	r0, #16
 800bcf6:	f000 fdfd 	bl	800c8f4 <malloc>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd00:	b920      	cbnz	r0, 800bd0c <_dtoa_r+0x34>
 800bd02:	4ba7      	ldr	r3, [pc, #668]	@ (800bfa0 <_dtoa_r+0x2c8>)
 800bd04:	21ef      	movs	r1, #239	@ 0xef
 800bd06:	48a7      	ldr	r0, [pc, #668]	@ (800bfa4 <_dtoa_r+0x2cc>)
 800bd08:	f002 fc2a 	bl	800e560 <__assert_func>
 800bd0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd10:	6007      	str	r7, [r0, #0]
 800bd12:	60c7      	str	r7, [r0, #12]
 800bd14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd18:	6819      	ldr	r1, [r3, #0]
 800bd1a:	b159      	cbz	r1, 800bd34 <_dtoa_r+0x5c>
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	604a      	str	r2, [r1, #4]
 800bd20:	2301      	movs	r3, #1
 800bd22:	4093      	lsls	r3, r2
 800bd24:	608b      	str	r3, [r1, #8]
 800bd26:	4658      	mov	r0, fp
 800bd28:	f000 feda 	bl	800cae0 <_Bfree>
 800bd2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	1e2b      	subs	r3, r5, #0
 800bd36:	bfb9      	ittee	lt
 800bd38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd3c:	9303      	strlt	r3, [sp, #12]
 800bd3e:	2300      	movge	r3, #0
 800bd40:	6033      	strge	r3, [r6, #0]
 800bd42:	9f03      	ldr	r7, [sp, #12]
 800bd44:	4b98      	ldr	r3, [pc, #608]	@ (800bfa8 <_dtoa_r+0x2d0>)
 800bd46:	bfbc      	itt	lt
 800bd48:	2201      	movlt	r2, #1
 800bd4a:	6032      	strlt	r2, [r6, #0]
 800bd4c:	43bb      	bics	r3, r7
 800bd4e:	d112      	bne.n	800bd76 <_dtoa_r+0x9e>
 800bd50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd52:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd5c:	4323      	orrs	r3, r4
 800bd5e:	f000 854d 	beq.w	800c7fc <_dtoa_r+0xb24>
 800bd62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bfbc <_dtoa_r+0x2e4>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f000 854f 	beq.w	800c80c <_dtoa_r+0xb34>
 800bd6e:	f10a 0303 	add.w	r3, sl, #3
 800bd72:	f000 bd49 	b.w	800c808 <_dtoa_r+0xb30>
 800bd76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	ec51 0b17 	vmov	r0, r1, d7
 800bd80:	2300      	movs	r3, #0
 800bd82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bd86:	f7f4 fecf 	bl	8000b28 <__aeabi_dcmpeq>
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	b158      	cbz	r0, 800bda6 <_dtoa_r+0xce>
 800bd8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd90:	2301      	movs	r3, #1
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd96:	b113      	cbz	r3, 800bd9e <_dtoa_r+0xc6>
 800bd98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd9a:	4b84      	ldr	r3, [pc, #528]	@ (800bfac <_dtoa_r+0x2d4>)
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bfc0 <_dtoa_r+0x2e8>
 800bda2:	f000 bd33 	b.w	800c80c <_dtoa_r+0xb34>
 800bda6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bdaa:	aa16      	add	r2, sp, #88	@ 0x58
 800bdac:	a917      	add	r1, sp, #92	@ 0x5c
 800bdae:	4658      	mov	r0, fp
 800bdb0:	f001 fa3a 	bl	800d228 <__d2b>
 800bdb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bdb8:	4681      	mov	r9, r0
 800bdba:	2e00      	cmp	r6, #0
 800bdbc:	d077      	beq.n	800beae <_dtoa_r+0x1d6>
 800bdbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bdc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bdd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bdd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bdd8:	4619      	mov	r1, r3
 800bdda:	2200      	movs	r2, #0
 800bddc:	4b74      	ldr	r3, [pc, #464]	@ (800bfb0 <_dtoa_r+0x2d8>)
 800bdde:	f7f4 fa83 	bl	80002e8 <__aeabi_dsub>
 800bde2:	a369      	add	r3, pc, #420	@ (adr r3, 800bf88 <_dtoa_r+0x2b0>)
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f7f4 fc36 	bl	8000658 <__aeabi_dmul>
 800bdec:	a368      	add	r3, pc, #416	@ (adr r3, 800bf90 <_dtoa_r+0x2b8>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f7f4 fa7b 	bl	80002ec <__adddf3>
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	460d      	mov	r5, r1
 800bdfc:	f7f4 fbc2 	bl	8000584 <__aeabi_i2d>
 800be00:	a365      	add	r3, pc, #404	@ (adr r3, 800bf98 <_dtoa_r+0x2c0>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fc27 	bl	8000658 <__aeabi_dmul>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4620      	mov	r0, r4
 800be10:	4629      	mov	r1, r5
 800be12:	f7f4 fa6b 	bl	80002ec <__adddf3>
 800be16:	4604      	mov	r4, r0
 800be18:	460d      	mov	r5, r1
 800be1a:	f7f4 fecd 	bl	8000bb8 <__aeabi_d2iz>
 800be1e:	2200      	movs	r2, #0
 800be20:	4607      	mov	r7, r0
 800be22:	2300      	movs	r3, #0
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	f7f4 fe88 	bl	8000b3c <__aeabi_dcmplt>
 800be2c:	b140      	cbz	r0, 800be40 <_dtoa_r+0x168>
 800be2e:	4638      	mov	r0, r7
 800be30:	f7f4 fba8 	bl	8000584 <__aeabi_i2d>
 800be34:	4622      	mov	r2, r4
 800be36:	462b      	mov	r3, r5
 800be38:	f7f4 fe76 	bl	8000b28 <__aeabi_dcmpeq>
 800be3c:	b900      	cbnz	r0, 800be40 <_dtoa_r+0x168>
 800be3e:	3f01      	subs	r7, #1
 800be40:	2f16      	cmp	r7, #22
 800be42:	d851      	bhi.n	800bee8 <_dtoa_r+0x210>
 800be44:	4b5b      	ldr	r3, [pc, #364]	@ (800bfb4 <_dtoa_r+0x2dc>)
 800be46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be52:	f7f4 fe73 	bl	8000b3c <__aeabi_dcmplt>
 800be56:	2800      	cmp	r0, #0
 800be58:	d048      	beq.n	800beec <_dtoa_r+0x214>
 800be5a:	3f01      	subs	r7, #1
 800be5c:	2300      	movs	r3, #0
 800be5e:	9312      	str	r3, [sp, #72]	@ 0x48
 800be60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be62:	1b9b      	subs	r3, r3, r6
 800be64:	1e5a      	subs	r2, r3, #1
 800be66:	bf44      	itt	mi
 800be68:	f1c3 0801 	rsbmi	r8, r3, #1
 800be6c:	2300      	movmi	r3, #0
 800be6e:	9208      	str	r2, [sp, #32]
 800be70:	bf54      	ite	pl
 800be72:	f04f 0800 	movpl.w	r8, #0
 800be76:	9308      	strmi	r3, [sp, #32]
 800be78:	2f00      	cmp	r7, #0
 800be7a:	db39      	blt.n	800bef0 <_dtoa_r+0x218>
 800be7c:	9b08      	ldr	r3, [sp, #32]
 800be7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800be80:	443b      	add	r3, r7
 800be82:	9308      	str	r3, [sp, #32]
 800be84:	2300      	movs	r3, #0
 800be86:	930a      	str	r3, [sp, #40]	@ 0x28
 800be88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8a:	2b09      	cmp	r3, #9
 800be8c:	d864      	bhi.n	800bf58 <_dtoa_r+0x280>
 800be8e:	2b05      	cmp	r3, #5
 800be90:	bfc4      	itt	gt
 800be92:	3b04      	subgt	r3, #4
 800be94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800be96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be98:	f1a3 0302 	sub.w	r3, r3, #2
 800be9c:	bfcc      	ite	gt
 800be9e:	2400      	movgt	r4, #0
 800bea0:	2401      	movle	r4, #1
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d863      	bhi.n	800bf6e <_dtoa_r+0x296>
 800bea6:	e8df f003 	tbb	[pc, r3]
 800beaa:	372a      	.short	0x372a
 800beac:	5535      	.short	0x5535
 800beae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800beb2:	441e      	add	r6, r3
 800beb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800beb8:	2b20      	cmp	r3, #32
 800beba:	bfc1      	itttt	gt
 800bebc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bec0:	409f      	lslgt	r7, r3
 800bec2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bec6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800beca:	bfd6      	itet	le
 800becc:	f1c3 0320 	rsble	r3, r3, #32
 800bed0:	ea47 0003 	orrgt.w	r0, r7, r3
 800bed4:	fa04 f003 	lslle.w	r0, r4, r3
 800bed8:	f7f4 fb44 	bl	8000564 <__aeabi_ui2d>
 800bedc:	2201      	movs	r2, #1
 800bede:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bee2:	3e01      	subs	r6, #1
 800bee4:	9214      	str	r2, [sp, #80]	@ 0x50
 800bee6:	e777      	b.n	800bdd8 <_dtoa_r+0x100>
 800bee8:	2301      	movs	r3, #1
 800beea:	e7b8      	b.n	800be5e <_dtoa_r+0x186>
 800beec:	9012      	str	r0, [sp, #72]	@ 0x48
 800beee:	e7b7      	b.n	800be60 <_dtoa_r+0x188>
 800bef0:	427b      	negs	r3, r7
 800bef2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bef4:	2300      	movs	r3, #0
 800bef6:	eba8 0807 	sub.w	r8, r8, r7
 800befa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800befc:	e7c4      	b.n	800be88 <_dtoa_r+0x1b0>
 800befe:	2300      	movs	r3, #0
 800bf00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	dc35      	bgt.n	800bf74 <_dtoa_r+0x29c>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	9307      	str	r3, [sp, #28]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf12:	e00b      	b.n	800bf2c <_dtoa_r+0x254>
 800bf14:	2301      	movs	r3, #1
 800bf16:	e7f3      	b.n	800bf00 <_dtoa_r+0x228>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf1e:	18fb      	adds	r3, r7, r3
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	3301      	adds	r3, #1
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	9307      	str	r3, [sp, #28]
 800bf28:	bfb8      	it	lt
 800bf2a:	2301      	movlt	r3, #1
 800bf2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf30:	2100      	movs	r1, #0
 800bf32:	2204      	movs	r2, #4
 800bf34:	f102 0514 	add.w	r5, r2, #20
 800bf38:	429d      	cmp	r5, r3
 800bf3a:	d91f      	bls.n	800bf7c <_dtoa_r+0x2a4>
 800bf3c:	6041      	str	r1, [r0, #4]
 800bf3e:	4658      	mov	r0, fp
 800bf40:	f000 fd8e 	bl	800ca60 <_Balloc>
 800bf44:	4682      	mov	sl, r0
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d13c      	bne.n	800bfc4 <_dtoa_r+0x2ec>
 800bf4a:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb8 <_dtoa_r+0x2e0>)
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf52:	e6d8      	b.n	800bd06 <_dtoa_r+0x2e>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e7e0      	b.n	800bf1a <_dtoa_r+0x242>
 800bf58:	2401      	movs	r4, #1
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf60:	f04f 33ff 	mov.w	r3, #4294967295
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	9307      	str	r3, [sp, #28]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2312      	movs	r3, #18
 800bf6c:	e7d0      	b.n	800bf10 <_dtoa_r+0x238>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf72:	e7f5      	b.n	800bf60 <_dtoa_r+0x288>
 800bf74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	9307      	str	r3, [sp, #28]
 800bf7a:	e7d7      	b.n	800bf2c <_dtoa_r+0x254>
 800bf7c:	3101      	adds	r1, #1
 800bf7e:	0052      	lsls	r2, r2, #1
 800bf80:	e7d8      	b.n	800bf34 <_dtoa_r+0x25c>
 800bf82:	bf00      	nop
 800bf84:	f3af 8000 	nop.w
 800bf88:	636f4361 	.word	0x636f4361
 800bf8c:	3fd287a7 	.word	0x3fd287a7
 800bf90:	8b60c8b3 	.word	0x8b60c8b3
 800bf94:	3fc68a28 	.word	0x3fc68a28
 800bf98:	509f79fb 	.word	0x509f79fb
 800bf9c:	3fd34413 	.word	0x3fd34413
 800bfa0:	0800f576 	.word	0x0800f576
 800bfa4:	0800f58d 	.word	0x0800f58d
 800bfa8:	7ff00000 	.word	0x7ff00000
 800bfac:	0800f541 	.word	0x0800f541
 800bfb0:	3ff80000 	.word	0x3ff80000
 800bfb4:	0800f688 	.word	0x0800f688
 800bfb8:	0800f5e5 	.word	0x0800f5e5
 800bfbc:	0800f572 	.word	0x0800f572
 800bfc0:	0800f540 	.word	0x0800f540
 800bfc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfc8:	6018      	str	r0, [r3, #0]
 800bfca:	9b07      	ldr	r3, [sp, #28]
 800bfcc:	2b0e      	cmp	r3, #14
 800bfce:	f200 80a4 	bhi.w	800c11a <_dtoa_r+0x442>
 800bfd2:	2c00      	cmp	r4, #0
 800bfd4:	f000 80a1 	beq.w	800c11a <_dtoa_r+0x442>
 800bfd8:	2f00      	cmp	r7, #0
 800bfda:	dd33      	ble.n	800c044 <_dtoa_r+0x36c>
 800bfdc:	4bad      	ldr	r3, [pc, #692]	@ (800c294 <_dtoa_r+0x5bc>)
 800bfde:	f007 020f 	and.w	r2, r7, #15
 800bfe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfe6:	ed93 7b00 	vldr	d7, [r3]
 800bfea:	05f8      	lsls	r0, r7, #23
 800bfec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bff0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bff4:	d516      	bpl.n	800c024 <_dtoa_r+0x34c>
 800bff6:	4ba8      	ldr	r3, [pc, #672]	@ (800c298 <_dtoa_r+0x5c0>)
 800bff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c000:	f7f4 fc54 	bl	80008ac <__aeabi_ddiv>
 800c004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c008:	f004 040f 	and.w	r4, r4, #15
 800c00c:	2603      	movs	r6, #3
 800c00e:	4da2      	ldr	r5, [pc, #648]	@ (800c298 <_dtoa_r+0x5c0>)
 800c010:	b954      	cbnz	r4, 800c028 <_dtoa_r+0x350>
 800c012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c01a:	f7f4 fc47 	bl	80008ac <__aeabi_ddiv>
 800c01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c022:	e028      	b.n	800c076 <_dtoa_r+0x39e>
 800c024:	2602      	movs	r6, #2
 800c026:	e7f2      	b.n	800c00e <_dtoa_r+0x336>
 800c028:	07e1      	lsls	r1, r4, #31
 800c02a:	d508      	bpl.n	800c03e <_dtoa_r+0x366>
 800c02c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c030:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c034:	f7f4 fb10 	bl	8000658 <__aeabi_dmul>
 800c038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c03c:	3601      	adds	r6, #1
 800c03e:	1064      	asrs	r4, r4, #1
 800c040:	3508      	adds	r5, #8
 800c042:	e7e5      	b.n	800c010 <_dtoa_r+0x338>
 800c044:	f000 80d2 	beq.w	800c1ec <_dtoa_r+0x514>
 800c048:	427c      	negs	r4, r7
 800c04a:	4b92      	ldr	r3, [pc, #584]	@ (800c294 <_dtoa_r+0x5bc>)
 800c04c:	4d92      	ldr	r5, [pc, #584]	@ (800c298 <_dtoa_r+0x5c0>)
 800c04e:	f004 020f 	and.w	r2, r4, #15
 800c052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c05e:	f7f4 fafb 	bl	8000658 <__aeabi_dmul>
 800c062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c066:	1124      	asrs	r4, r4, #4
 800c068:	2300      	movs	r3, #0
 800c06a:	2602      	movs	r6, #2
 800c06c:	2c00      	cmp	r4, #0
 800c06e:	f040 80b2 	bne.w	800c1d6 <_dtoa_r+0x4fe>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1d3      	bne.n	800c01e <_dtoa_r+0x346>
 800c076:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c078:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 80b7 	beq.w	800c1f0 <_dtoa_r+0x518>
 800c082:	4b86      	ldr	r3, [pc, #536]	@ (800c29c <_dtoa_r+0x5c4>)
 800c084:	2200      	movs	r2, #0
 800c086:	4620      	mov	r0, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	f7f4 fd57 	bl	8000b3c <__aeabi_dcmplt>
 800c08e:	2800      	cmp	r0, #0
 800c090:	f000 80ae 	beq.w	800c1f0 <_dtoa_r+0x518>
 800c094:	9b07      	ldr	r3, [sp, #28]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 80aa 	beq.w	800c1f0 <_dtoa_r+0x518>
 800c09c:	9b00      	ldr	r3, [sp, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dd37      	ble.n	800c112 <_dtoa_r+0x43a>
 800c0a2:	1e7b      	subs	r3, r7, #1
 800c0a4:	9304      	str	r3, [sp, #16]
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	4b7d      	ldr	r3, [pc, #500]	@ (800c2a0 <_dtoa_r+0x5c8>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	f7f4 fad3 	bl	8000658 <__aeabi_dmul>
 800c0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b6:	9c00      	ldr	r4, [sp, #0]
 800c0b8:	3601      	adds	r6, #1
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f7f4 fa62 	bl	8000584 <__aeabi_i2d>
 800c0c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0c4:	f7f4 fac8 	bl	8000658 <__aeabi_dmul>
 800c0c8:	4b76      	ldr	r3, [pc, #472]	@ (800c2a4 <_dtoa_r+0x5cc>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f7f4 f90e 	bl	80002ec <__adddf3>
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c0d6:	2c00      	cmp	r4, #0
 800c0d8:	f040 808d 	bne.w	800c1f6 <_dtoa_r+0x51e>
 800c0dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e0:	4b71      	ldr	r3, [pc, #452]	@ (800c2a8 <_dtoa_r+0x5d0>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f7f4 f900 	bl	80002e8 <__aeabi_dsub>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0f0:	462a      	mov	r2, r5
 800c0f2:	4633      	mov	r3, r6
 800c0f4:	f7f4 fd40 	bl	8000b78 <__aeabi_dcmpgt>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	f040 828b 	bne.w	800c614 <_dtoa_r+0x93c>
 800c0fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c102:	462a      	mov	r2, r5
 800c104:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c108:	f7f4 fd18 	bl	8000b3c <__aeabi_dcmplt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	f040 8128 	bne.w	800c362 <_dtoa_r+0x68a>
 800c112:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c116:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c11a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f2c0 815a 	blt.w	800c3d6 <_dtoa_r+0x6fe>
 800c122:	2f0e      	cmp	r7, #14
 800c124:	f300 8157 	bgt.w	800c3d6 <_dtoa_r+0x6fe>
 800c128:	4b5a      	ldr	r3, [pc, #360]	@ (800c294 <_dtoa_r+0x5bc>)
 800c12a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c12e:	ed93 7b00 	vldr	d7, [r3]
 800c132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c134:	2b00      	cmp	r3, #0
 800c136:	ed8d 7b00 	vstr	d7, [sp]
 800c13a:	da03      	bge.n	800c144 <_dtoa_r+0x46c>
 800c13c:	9b07      	ldr	r3, [sp, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f340 8101 	ble.w	800c346 <_dtoa_r+0x66e>
 800c144:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c148:	4656      	mov	r6, sl
 800c14a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 fbab 	bl	80008ac <__aeabi_ddiv>
 800c156:	f7f4 fd2f 	bl	8000bb8 <__aeabi_d2iz>
 800c15a:	4680      	mov	r8, r0
 800c15c:	f7f4 fa12 	bl	8000584 <__aeabi_i2d>
 800c160:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c164:	f7f4 fa78 	bl	8000658 <__aeabi_dmul>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4620      	mov	r0, r4
 800c16e:	4629      	mov	r1, r5
 800c170:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c174:	f7f4 f8b8 	bl	80002e8 <__aeabi_dsub>
 800c178:	f806 4b01 	strb.w	r4, [r6], #1
 800c17c:	9d07      	ldr	r5, [sp, #28]
 800c17e:	eba6 040a 	sub.w	r4, r6, sl
 800c182:	42a5      	cmp	r5, r4
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	f040 8117 	bne.w	800c3ba <_dtoa_r+0x6e2>
 800c18c:	f7f4 f8ae 	bl	80002ec <__adddf3>
 800c190:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c194:	4604      	mov	r4, r0
 800c196:	460d      	mov	r5, r1
 800c198:	f7f4 fcee 	bl	8000b78 <__aeabi_dcmpgt>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f040 80f9 	bne.w	800c394 <_dtoa_r+0x6bc>
 800c1a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 fcbd 	bl	8000b28 <__aeabi_dcmpeq>
 800c1ae:	b118      	cbz	r0, 800c1b8 <_dtoa_r+0x4e0>
 800c1b0:	f018 0f01 	tst.w	r8, #1
 800c1b4:	f040 80ee 	bne.w	800c394 <_dtoa_r+0x6bc>
 800c1b8:	4649      	mov	r1, r9
 800c1ba:	4658      	mov	r0, fp
 800c1bc:	f000 fc90 	bl	800cae0 <_Bfree>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	7033      	strb	r3, [r6, #0]
 800c1c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1c6:	3701      	adds	r7, #1
 800c1c8:	601f      	str	r7, [r3, #0]
 800c1ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 831d 	beq.w	800c80c <_dtoa_r+0xb34>
 800c1d2:	601e      	str	r6, [r3, #0]
 800c1d4:	e31a      	b.n	800c80c <_dtoa_r+0xb34>
 800c1d6:	07e2      	lsls	r2, r4, #31
 800c1d8:	d505      	bpl.n	800c1e6 <_dtoa_r+0x50e>
 800c1da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1de:	f7f4 fa3b 	bl	8000658 <__aeabi_dmul>
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	1064      	asrs	r4, r4, #1
 800c1e8:	3508      	adds	r5, #8
 800c1ea:	e73f      	b.n	800c06c <_dtoa_r+0x394>
 800c1ec:	2602      	movs	r6, #2
 800c1ee:	e742      	b.n	800c076 <_dtoa_r+0x39e>
 800c1f0:	9c07      	ldr	r4, [sp, #28]
 800c1f2:	9704      	str	r7, [sp, #16]
 800c1f4:	e761      	b.n	800c0ba <_dtoa_r+0x3e2>
 800c1f6:	4b27      	ldr	r3, [pc, #156]	@ (800c294 <_dtoa_r+0x5bc>)
 800c1f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c202:	4454      	add	r4, sl
 800c204:	2900      	cmp	r1, #0
 800c206:	d053      	beq.n	800c2b0 <_dtoa_r+0x5d8>
 800c208:	4928      	ldr	r1, [pc, #160]	@ (800c2ac <_dtoa_r+0x5d4>)
 800c20a:	2000      	movs	r0, #0
 800c20c:	f7f4 fb4e 	bl	80008ac <__aeabi_ddiv>
 800c210:	4633      	mov	r3, r6
 800c212:	462a      	mov	r2, r5
 800c214:	f7f4 f868 	bl	80002e8 <__aeabi_dsub>
 800c218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c21c:	4656      	mov	r6, sl
 800c21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c222:	f7f4 fcc9 	bl	8000bb8 <__aeabi_d2iz>
 800c226:	4605      	mov	r5, r0
 800c228:	f7f4 f9ac 	bl	8000584 <__aeabi_i2d>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c234:	f7f4 f858 	bl	80002e8 <__aeabi_dsub>
 800c238:	3530      	adds	r5, #48	@ 0x30
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c242:	f806 5b01 	strb.w	r5, [r6], #1
 800c246:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c24a:	f7f4 fc77 	bl	8000b3c <__aeabi_dcmplt>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d171      	bne.n	800c336 <_dtoa_r+0x65e>
 800c252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c256:	4911      	ldr	r1, [pc, #68]	@ (800c29c <_dtoa_r+0x5c4>)
 800c258:	2000      	movs	r0, #0
 800c25a:	f7f4 f845 	bl	80002e8 <__aeabi_dsub>
 800c25e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c262:	f7f4 fc6b 	bl	8000b3c <__aeabi_dcmplt>
 800c266:	2800      	cmp	r0, #0
 800c268:	f040 8095 	bne.w	800c396 <_dtoa_r+0x6be>
 800c26c:	42a6      	cmp	r6, r4
 800c26e:	f43f af50 	beq.w	800c112 <_dtoa_r+0x43a>
 800c272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c276:	4b0a      	ldr	r3, [pc, #40]	@ (800c2a0 <_dtoa_r+0x5c8>)
 800c278:	2200      	movs	r2, #0
 800c27a:	f7f4 f9ed 	bl	8000658 <__aeabi_dmul>
 800c27e:	4b08      	ldr	r3, [pc, #32]	@ (800c2a0 <_dtoa_r+0x5c8>)
 800c280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c284:	2200      	movs	r2, #0
 800c286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c28a:	f7f4 f9e5 	bl	8000658 <__aeabi_dmul>
 800c28e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c292:	e7c4      	b.n	800c21e <_dtoa_r+0x546>
 800c294:	0800f688 	.word	0x0800f688
 800c298:	0800f660 	.word	0x0800f660
 800c29c:	3ff00000 	.word	0x3ff00000
 800c2a0:	40240000 	.word	0x40240000
 800c2a4:	401c0000 	.word	0x401c0000
 800c2a8:	40140000 	.word	0x40140000
 800c2ac:	3fe00000 	.word	0x3fe00000
 800c2b0:	4631      	mov	r1, r6
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f7f4 f9d0 	bl	8000658 <__aeabi_dmul>
 800c2b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2bc:	9415      	str	r4, [sp, #84]	@ 0x54
 800c2be:	4656      	mov	r6, sl
 800c2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2c4:	f7f4 fc78 	bl	8000bb8 <__aeabi_d2iz>
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	f7f4 f95b 	bl	8000584 <__aeabi_i2d>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2d6:	f7f4 f807 	bl	80002e8 <__aeabi_dsub>
 800c2da:	3530      	adds	r5, #48	@ 0x30
 800c2dc:	f806 5b01 	strb.w	r5, [r6], #1
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	42a6      	cmp	r6, r4
 800c2e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2ea:	f04f 0200 	mov.w	r2, #0
 800c2ee:	d124      	bne.n	800c33a <_dtoa_r+0x662>
 800c2f0:	4bac      	ldr	r3, [pc, #688]	@ (800c5a4 <_dtoa_r+0x8cc>)
 800c2f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2f6:	f7f3 fff9 	bl	80002ec <__adddf3>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c302:	f7f4 fc39 	bl	8000b78 <__aeabi_dcmpgt>
 800c306:	2800      	cmp	r0, #0
 800c308:	d145      	bne.n	800c396 <_dtoa_r+0x6be>
 800c30a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c30e:	49a5      	ldr	r1, [pc, #660]	@ (800c5a4 <_dtoa_r+0x8cc>)
 800c310:	2000      	movs	r0, #0
 800c312:	f7f3 ffe9 	bl	80002e8 <__aeabi_dsub>
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c31e:	f7f4 fc0d 	bl	8000b3c <__aeabi_dcmplt>
 800c322:	2800      	cmp	r0, #0
 800c324:	f43f aef5 	beq.w	800c112 <_dtoa_r+0x43a>
 800c328:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c32a:	1e73      	subs	r3, r6, #1
 800c32c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c32e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c332:	2b30      	cmp	r3, #48	@ 0x30
 800c334:	d0f8      	beq.n	800c328 <_dtoa_r+0x650>
 800c336:	9f04      	ldr	r7, [sp, #16]
 800c338:	e73e      	b.n	800c1b8 <_dtoa_r+0x4e0>
 800c33a:	4b9b      	ldr	r3, [pc, #620]	@ (800c5a8 <_dtoa_r+0x8d0>)
 800c33c:	f7f4 f98c 	bl	8000658 <__aeabi_dmul>
 800c340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c344:	e7bc      	b.n	800c2c0 <_dtoa_r+0x5e8>
 800c346:	d10c      	bne.n	800c362 <_dtoa_r+0x68a>
 800c348:	4b98      	ldr	r3, [pc, #608]	@ (800c5ac <_dtoa_r+0x8d4>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c350:	f7f4 f982 	bl	8000658 <__aeabi_dmul>
 800c354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c358:	f7f4 fc04 	bl	8000b64 <__aeabi_dcmpge>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f000 8157 	beq.w	800c610 <_dtoa_r+0x938>
 800c362:	2400      	movs	r4, #0
 800c364:	4625      	mov	r5, r4
 800c366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c368:	43db      	mvns	r3, r3
 800c36a:	9304      	str	r3, [sp, #16]
 800c36c:	4656      	mov	r6, sl
 800c36e:	2700      	movs	r7, #0
 800c370:	4621      	mov	r1, r4
 800c372:	4658      	mov	r0, fp
 800c374:	f000 fbb4 	bl	800cae0 <_Bfree>
 800c378:	2d00      	cmp	r5, #0
 800c37a:	d0dc      	beq.n	800c336 <_dtoa_r+0x65e>
 800c37c:	b12f      	cbz	r7, 800c38a <_dtoa_r+0x6b2>
 800c37e:	42af      	cmp	r7, r5
 800c380:	d003      	beq.n	800c38a <_dtoa_r+0x6b2>
 800c382:	4639      	mov	r1, r7
 800c384:	4658      	mov	r0, fp
 800c386:	f000 fbab 	bl	800cae0 <_Bfree>
 800c38a:	4629      	mov	r1, r5
 800c38c:	4658      	mov	r0, fp
 800c38e:	f000 fba7 	bl	800cae0 <_Bfree>
 800c392:	e7d0      	b.n	800c336 <_dtoa_r+0x65e>
 800c394:	9704      	str	r7, [sp, #16]
 800c396:	4633      	mov	r3, r6
 800c398:	461e      	mov	r6, r3
 800c39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c39e:	2a39      	cmp	r2, #57	@ 0x39
 800c3a0:	d107      	bne.n	800c3b2 <_dtoa_r+0x6da>
 800c3a2:	459a      	cmp	sl, r3
 800c3a4:	d1f8      	bne.n	800c398 <_dtoa_r+0x6c0>
 800c3a6:	9a04      	ldr	r2, [sp, #16]
 800c3a8:	3201      	adds	r2, #1
 800c3aa:	9204      	str	r2, [sp, #16]
 800c3ac:	2230      	movs	r2, #48	@ 0x30
 800c3ae:	f88a 2000 	strb.w	r2, [sl]
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	3201      	adds	r2, #1
 800c3b6:	701a      	strb	r2, [r3, #0]
 800c3b8:	e7bd      	b.n	800c336 <_dtoa_r+0x65e>
 800c3ba:	4b7b      	ldr	r3, [pc, #492]	@ (800c5a8 <_dtoa_r+0x8d0>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f7f4 f94b 	bl	8000658 <__aeabi_dmul>
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	460d      	mov	r5, r1
 800c3ca:	f7f4 fbad 	bl	8000b28 <__aeabi_dcmpeq>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f43f aebb 	beq.w	800c14a <_dtoa_r+0x472>
 800c3d4:	e6f0      	b.n	800c1b8 <_dtoa_r+0x4e0>
 800c3d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c3d8:	2a00      	cmp	r2, #0
 800c3da:	f000 80db 	beq.w	800c594 <_dtoa_r+0x8bc>
 800c3de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3e0:	2a01      	cmp	r2, #1
 800c3e2:	f300 80bf 	bgt.w	800c564 <_dtoa_r+0x88c>
 800c3e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c3e8:	2a00      	cmp	r2, #0
 800c3ea:	f000 80b7 	beq.w	800c55c <_dtoa_r+0x884>
 800c3ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3f4:	4646      	mov	r6, r8
 800c3f6:	9a08      	ldr	r2, [sp, #32]
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	441a      	add	r2, r3
 800c3fc:	4658      	mov	r0, fp
 800c3fe:	4498      	add	r8, r3
 800c400:	9208      	str	r2, [sp, #32]
 800c402:	f000 fc6b 	bl	800ccdc <__i2b>
 800c406:	4605      	mov	r5, r0
 800c408:	b15e      	cbz	r6, 800c422 <_dtoa_r+0x74a>
 800c40a:	9b08      	ldr	r3, [sp, #32]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	dd08      	ble.n	800c422 <_dtoa_r+0x74a>
 800c410:	42b3      	cmp	r3, r6
 800c412:	9a08      	ldr	r2, [sp, #32]
 800c414:	bfa8      	it	ge
 800c416:	4633      	movge	r3, r6
 800c418:	eba8 0803 	sub.w	r8, r8, r3
 800c41c:	1af6      	subs	r6, r6, r3
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	9308      	str	r3, [sp, #32]
 800c422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c424:	b1f3      	cbz	r3, 800c464 <_dtoa_r+0x78c>
 800c426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 80b7 	beq.w	800c59c <_dtoa_r+0x8c4>
 800c42e:	b18c      	cbz	r4, 800c454 <_dtoa_r+0x77c>
 800c430:	4629      	mov	r1, r5
 800c432:	4622      	mov	r2, r4
 800c434:	4658      	mov	r0, fp
 800c436:	f000 fd11 	bl	800ce5c <__pow5mult>
 800c43a:	464a      	mov	r2, r9
 800c43c:	4601      	mov	r1, r0
 800c43e:	4605      	mov	r5, r0
 800c440:	4658      	mov	r0, fp
 800c442:	f000 fc61 	bl	800cd08 <__multiply>
 800c446:	4649      	mov	r1, r9
 800c448:	9004      	str	r0, [sp, #16]
 800c44a:	4658      	mov	r0, fp
 800c44c:	f000 fb48 	bl	800cae0 <_Bfree>
 800c450:	9b04      	ldr	r3, [sp, #16]
 800c452:	4699      	mov	r9, r3
 800c454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c456:	1b1a      	subs	r2, r3, r4
 800c458:	d004      	beq.n	800c464 <_dtoa_r+0x78c>
 800c45a:	4649      	mov	r1, r9
 800c45c:	4658      	mov	r0, fp
 800c45e:	f000 fcfd 	bl	800ce5c <__pow5mult>
 800c462:	4681      	mov	r9, r0
 800c464:	2101      	movs	r1, #1
 800c466:	4658      	mov	r0, fp
 800c468:	f000 fc38 	bl	800ccdc <__i2b>
 800c46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c46e:	4604      	mov	r4, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	f000 81cf 	beq.w	800c814 <_dtoa_r+0xb3c>
 800c476:	461a      	mov	r2, r3
 800c478:	4601      	mov	r1, r0
 800c47a:	4658      	mov	r0, fp
 800c47c:	f000 fcee 	bl	800ce5c <__pow5mult>
 800c480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c482:	2b01      	cmp	r3, #1
 800c484:	4604      	mov	r4, r0
 800c486:	f300 8095 	bgt.w	800c5b4 <_dtoa_r+0x8dc>
 800c48a:	9b02      	ldr	r3, [sp, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f040 8087 	bne.w	800c5a0 <_dtoa_r+0x8c8>
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f040 8089 	bne.w	800c5b0 <_dtoa_r+0x8d8>
 800c49e:	9b03      	ldr	r3, [sp, #12]
 800c4a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4a4:	0d1b      	lsrs	r3, r3, #20
 800c4a6:	051b      	lsls	r3, r3, #20
 800c4a8:	b12b      	cbz	r3, 800c4b6 <_dtoa_r+0x7de>
 800c4aa:	9b08      	ldr	r3, [sp, #32]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	9308      	str	r3, [sp, #32]
 800c4b0:	f108 0801 	add.w	r8, r8, #1
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 81b0 	beq.w	800c820 <_dtoa_r+0xb48>
 800c4c0:	6923      	ldr	r3, [r4, #16]
 800c4c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4c6:	6918      	ldr	r0, [r3, #16]
 800c4c8:	f000 fbbc 	bl	800cc44 <__hi0bits>
 800c4cc:	f1c0 0020 	rsb	r0, r0, #32
 800c4d0:	9b08      	ldr	r3, [sp, #32]
 800c4d2:	4418      	add	r0, r3
 800c4d4:	f010 001f 	ands.w	r0, r0, #31
 800c4d8:	d077      	beq.n	800c5ca <_dtoa_r+0x8f2>
 800c4da:	f1c0 0320 	rsb	r3, r0, #32
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	dd6b      	ble.n	800c5ba <_dtoa_r+0x8e2>
 800c4e2:	9b08      	ldr	r3, [sp, #32]
 800c4e4:	f1c0 001c 	rsb	r0, r0, #28
 800c4e8:	4403      	add	r3, r0
 800c4ea:	4480      	add	r8, r0
 800c4ec:	4406      	add	r6, r0
 800c4ee:	9308      	str	r3, [sp, #32]
 800c4f0:	f1b8 0f00 	cmp.w	r8, #0
 800c4f4:	dd05      	ble.n	800c502 <_dtoa_r+0x82a>
 800c4f6:	4649      	mov	r1, r9
 800c4f8:	4642      	mov	r2, r8
 800c4fa:	4658      	mov	r0, fp
 800c4fc:	f000 fd08 	bl	800cf10 <__lshift>
 800c500:	4681      	mov	r9, r0
 800c502:	9b08      	ldr	r3, [sp, #32]
 800c504:	2b00      	cmp	r3, #0
 800c506:	dd05      	ble.n	800c514 <_dtoa_r+0x83c>
 800c508:	4621      	mov	r1, r4
 800c50a:	461a      	mov	r2, r3
 800c50c:	4658      	mov	r0, fp
 800c50e:	f000 fcff 	bl	800cf10 <__lshift>
 800c512:	4604      	mov	r4, r0
 800c514:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c516:	2b00      	cmp	r3, #0
 800c518:	d059      	beq.n	800c5ce <_dtoa_r+0x8f6>
 800c51a:	4621      	mov	r1, r4
 800c51c:	4648      	mov	r0, r9
 800c51e:	f000 fd63 	bl	800cfe8 <__mcmp>
 800c522:	2800      	cmp	r0, #0
 800c524:	da53      	bge.n	800c5ce <_dtoa_r+0x8f6>
 800c526:	1e7b      	subs	r3, r7, #1
 800c528:	9304      	str	r3, [sp, #16]
 800c52a:	4649      	mov	r1, r9
 800c52c:	2300      	movs	r3, #0
 800c52e:	220a      	movs	r2, #10
 800c530:	4658      	mov	r0, fp
 800c532:	f000 faf7 	bl	800cb24 <__multadd>
 800c536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c538:	4681      	mov	r9, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8172 	beq.w	800c824 <_dtoa_r+0xb4c>
 800c540:	2300      	movs	r3, #0
 800c542:	4629      	mov	r1, r5
 800c544:	220a      	movs	r2, #10
 800c546:	4658      	mov	r0, fp
 800c548:	f000 faec 	bl	800cb24 <__multadd>
 800c54c:	9b00      	ldr	r3, [sp, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	4605      	mov	r5, r0
 800c552:	dc67      	bgt.n	800c624 <_dtoa_r+0x94c>
 800c554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c556:	2b02      	cmp	r3, #2
 800c558:	dc41      	bgt.n	800c5de <_dtoa_r+0x906>
 800c55a:	e063      	b.n	800c624 <_dtoa_r+0x94c>
 800c55c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c55e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c562:	e746      	b.n	800c3f2 <_dtoa_r+0x71a>
 800c564:	9b07      	ldr	r3, [sp, #28]
 800c566:	1e5c      	subs	r4, r3, #1
 800c568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c56a:	42a3      	cmp	r3, r4
 800c56c:	bfbf      	itttt	lt
 800c56e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c570:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c572:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c574:	1ae3      	sublt	r3, r4, r3
 800c576:	bfb4      	ite	lt
 800c578:	18d2      	addlt	r2, r2, r3
 800c57a:	1b1c      	subge	r4, r3, r4
 800c57c:	9b07      	ldr	r3, [sp, #28]
 800c57e:	bfbc      	itt	lt
 800c580:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c582:	2400      	movlt	r4, #0
 800c584:	2b00      	cmp	r3, #0
 800c586:	bfb5      	itete	lt
 800c588:	eba8 0603 	sublt.w	r6, r8, r3
 800c58c:	9b07      	ldrge	r3, [sp, #28]
 800c58e:	2300      	movlt	r3, #0
 800c590:	4646      	movge	r6, r8
 800c592:	e730      	b.n	800c3f6 <_dtoa_r+0x71e>
 800c594:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c596:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c598:	4646      	mov	r6, r8
 800c59a:	e735      	b.n	800c408 <_dtoa_r+0x730>
 800c59c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c59e:	e75c      	b.n	800c45a <_dtoa_r+0x782>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	e788      	b.n	800c4b6 <_dtoa_r+0x7de>
 800c5a4:	3fe00000 	.word	0x3fe00000
 800c5a8:	40240000 	.word	0x40240000
 800c5ac:	40140000 	.word	0x40140000
 800c5b0:	9b02      	ldr	r3, [sp, #8]
 800c5b2:	e780      	b.n	800c4b6 <_dtoa_r+0x7de>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b8:	e782      	b.n	800c4c0 <_dtoa_r+0x7e8>
 800c5ba:	d099      	beq.n	800c4f0 <_dtoa_r+0x818>
 800c5bc:	9a08      	ldr	r2, [sp, #32]
 800c5be:	331c      	adds	r3, #28
 800c5c0:	441a      	add	r2, r3
 800c5c2:	4498      	add	r8, r3
 800c5c4:	441e      	add	r6, r3
 800c5c6:	9208      	str	r2, [sp, #32]
 800c5c8:	e792      	b.n	800c4f0 <_dtoa_r+0x818>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	e7f6      	b.n	800c5bc <_dtoa_r+0x8e4>
 800c5ce:	9b07      	ldr	r3, [sp, #28]
 800c5d0:	9704      	str	r7, [sp, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	dc20      	bgt.n	800c618 <_dtoa_r+0x940>
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	dd1e      	ble.n	800c61c <_dtoa_r+0x944>
 800c5de:	9b00      	ldr	r3, [sp, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f47f aec0 	bne.w	800c366 <_dtoa_r+0x68e>
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	2205      	movs	r2, #5
 800c5ea:	4658      	mov	r0, fp
 800c5ec:	f000 fa9a 	bl	800cb24 <__multadd>
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4648      	mov	r0, r9
 800c5f6:	f000 fcf7 	bl	800cfe8 <__mcmp>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	f77f aeb3 	ble.w	800c366 <_dtoa_r+0x68e>
 800c600:	4656      	mov	r6, sl
 800c602:	2331      	movs	r3, #49	@ 0x31
 800c604:	f806 3b01 	strb.w	r3, [r6], #1
 800c608:	9b04      	ldr	r3, [sp, #16]
 800c60a:	3301      	adds	r3, #1
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	e6ae      	b.n	800c36e <_dtoa_r+0x696>
 800c610:	9c07      	ldr	r4, [sp, #28]
 800c612:	9704      	str	r7, [sp, #16]
 800c614:	4625      	mov	r5, r4
 800c616:	e7f3      	b.n	800c600 <_dtoa_r+0x928>
 800c618:	9b07      	ldr	r3, [sp, #28]
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 8104 	beq.w	800c82c <_dtoa_r+0xb54>
 800c624:	2e00      	cmp	r6, #0
 800c626:	dd05      	ble.n	800c634 <_dtoa_r+0x95c>
 800c628:	4629      	mov	r1, r5
 800c62a:	4632      	mov	r2, r6
 800c62c:	4658      	mov	r0, fp
 800c62e:	f000 fc6f 	bl	800cf10 <__lshift>
 800c632:	4605      	mov	r5, r0
 800c634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c636:	2b00      	cmp	r3, #0
 800c638:	d05a      	beq.n	800c6f0 <_dtoa_r+0xa18>
 800c63a:	6869      	ldr	r1, [r5, #4]
 800c63c:	4658      	mov	r0, fp
 800c63e:	f000 fa0f 	bl	800ca60 <_Balloc>
 800c642:	4606      	mov	r6, r0
 800c644:	b928      	cbnz	r0, 800c652 <_dtoa_r+0x97a>
 800c646:	4b84      	ldr	r3, [pc, #528]	@ (800c858 <_dtoa_r+0xb80>)
 800c648:	4602      	mov	r2, r0
 800c64a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c64e:	f7ff bb5a 	b.w	800bd06 <_dtoa_r+0x2e>
 800c652:	692a      	ldr	r2, [r5, #16]
 800c654:	3202      	adds	r2, #2
 800c656:	0092      	lsls	r2, r2, #2
 800c658:	f105 010c 	add.w	r1, r5, #12
 800c65c:	300c      	adds	r0, #12
 800c65e:	f7ff fa9e 	bl	800bb9e <memcpy>
 800c662:	2201      	movs	r2, #1
 800c664:	4631      	mov	r1, r6
 800c666:	4658      	mov	r0, fp
 800c668:	f000 fc52 	bl	800cf10 <__lshift>
 800c66c:	f10a 0301 	add.w	r3, sl, #1
 800c670:	9307      	str	r3, [sp, #28]
 800c672:	9b00      	ldr	r3, [sp, #0]
 800c674:	4453      	add	r3, sl
 800c676:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c678:	9b02      	ldr	r3, [sp, #8]
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	462f      	mov	r7, r5
 800c680:	930a      	str	r3, [sp, #40]	@ 0x28
 800c682:	4605      	mov	r5, r0
 800c684:	9b07      	ldr	r3, [sp, #28]
 800c686:	4621      	mov	r1, r4
 800c688:	3b01      	subs	r3, #1
 800c68a:	4648      	mov	r0, r9
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	f7ff fa9b 	bl	800bbc8 <quorem>
 800c692:	4639      	mov	r1, r7
 800c694:	9002      	str	r0, [sp, #8]
 800c696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c69a:	4648      	mov	r0, r9
 800c69c:	f000 fca4 	bl	800cfe8 <__mcmp>
 800c6a0:	462a      	mov	r2, r5
 800c6a2:	9008      	str	r0, [sp, #32]
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	4658      	mov	r0, fp
 800c6a8:	f000 fcba 	bl	800d020 <__mdiff>
 800c6ac:	68c2      	ldr	r2, [r0, #12]
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	bb02      	cbnz	r2, 800c6f4 <_dtoa_r+0xa1c>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	4648      	mov	r0, r9
 800c6b6:	f000 fc97 	bl	800cfe8 <__mcmp>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	4631      	mov	r1, r6
 800c6be:	4658      	mov	r0, fp
 800c6c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6c2:	f000 fa0d 	bl	800cae0 <_Bfree>
 800c6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6ca:	9e07      	ldr	r6, [sp, #28]
 800c6cc:	ea43 0102 	orr.w	r1, r3, r2
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6d2:	4319      	orrs	r1, r3
 800c6d4:	d110      	bne.n	800c6f8 <_dtoa_r+0xa20>
 800c6d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6da:	d029      	beq.n	800c730 <_dtoa_r+0xa58>
 800c6dc:	9b08      	ldr	r3, [sp, #32]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	dd02      	ble.n	800c6e8 <_dtoa_r+0xa10>
 800c6e2:	9b02      	ldr	r3, [sp, #8]
 800c6e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c6e8:	9b00      	ldr	r3, [sp, #0]
 800c6ea:	f883 8000 	strb.w	r8, [r3]
 800c6ee:	e63f      	b.n	800c370 <_dtoa_r+0x698>
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	e7bb      	b.n	800c66c <_dtoa_r+0x994>
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	e7e1      	b.n	800c6bc <_dtoa_r+0x9e4>
 800c6f8:	9b08      	ldr	r3, [sp, #32]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	db04      	blt.n	800c708 <_dtoa_r+0xa30>
 800c6fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c700:	430b      	orrs	r3, r1
 800c702:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c704:	430b      	orrs	r3, r1
 800c706:	d120      	bne.n	800c74a <_dtoa_r+0xa72>
 800c708:	2a00      	cmp	r2, #0
 800c70a:	dded      	ble.n	800c6e8 <_dtoa_r+0xa10>
 800c70c:	4649      	mov	r1, r9
 800c70e:	2201      	movs	r2, #1
 800c710:	4658      	mov	r0, fp
 800c712:	f000 fbfd 	bl	800cf10 <__lshift>
 800c716:	4621      	mov	r1, r4
 800c718:	4681      	mov	r9, r0
 800c71a:	f000 fc65 	bl	800cfe8 <__mcmp>
 800c71e:	2800      	cmp	r0, #0
 800c720:	dc03      	bgt.n	800c72a <_dtoa_r+0xa52>
 800c722:	d1e1      	bne.n	800c6e8 <_dtoa_r+0xa10>
 800c724:	f018 0f01 	tst.w	r8, #1
 800c728:	d0de      	beq.n	800c6e8 <_dtoa_r+0xa10>
 800c72a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c72e:	d1d8      	bne.n	800c6e2 <_dtoa_r+0xa0a>
 800c730:	9a00      	ldr	r2, [sp, #0]
 800c732:	2339      	movs	r3, #57	@ 0x39
 800c734:	7013      	strb	r3, [r2, #0]
 800c736:	4633      	mov	r3, r6
 800c738:	461e      	mov	r6, r3
 800c73a:	3b01      	subs	r3, #1
 800c73c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c740:	2a39      	cmp	r2, #57	@ 0x39
 800c742:	d052      	beq.n	800c7ea <_dtoa_r+0xb12>
 800c744:	3201      	adds	r2, #1
 800c746:	701a      	strb	r2, [r3, #0]
 800c748:	e612      	b.n	800c370 <_dtoa_r+0x698>
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	dd07      	ble.n	800c75e <_dtoa_r+0xa86>
 800c74e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c752:	d0ed      	beq.n	800c730 <_dtoa_r+0xa58>
 800c754:	9a00      	ldr	r2, [sp, #0]
 800c756:	f108 0301 	add.w	r3, r8, #1
 800c75a:	7013      	strb	r3, [r2, #0]
 800c75c:	e608      	b.n	800c370 <_dtoa_r+0x698>
 800c75e:	9b07      	ldr	r3, [sp, #28]
 800c760:	9a07      	ldr	r2, [sp, #28]
 800c762:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c768:	4293      	cmp	r3, r2
 800c76a:	d028      	beq.n	800c7be <_dtoa_r+0xae6>
 800c76c:	4649      	mov	r1, r9
 800c76e:	2300      	movs	r3, #0
 800c770:	220a      	movs	r2, #10
 800c772:	4658      	mov	r0, fp
 800c774:	f000 f9d6 	bl	800cb24 <__multadd>
 800c778:	42af      	cmp	r7, r5
 800c77a:	4681      	mov	r9, r0
 800c77c:	f04f 0300 	mov.w	r3, #0
 800c780:	f04f 020a 	mov.w	r2, #10
 800c784:	4639      	mov	r1, r7
 800c786:	4658      	mov	r0, fp
 800c788:	d107      	bne.n	800c79a <_dtoa_r+0xac2>
 800c78a:	f000 f9cb 	bl	800cb24 <__multadd>
 800c78e:	4607      	mov	r7, r0
 800c790:	4605      	mov	r5, r0
 800c792:	9b07      	ldr	r3, [sp, #28]
 800c794:	3301      	adds	r3, #1
 800c796:	9307      	str	r3, [sp, #28]
 800c798:	e774      	b.n	800c684 <_dtoa_r+0x9ac>
 800c79a:	f000 f9c3 	bl	800cb24 <__multadd>
 800c79e:	4629      	mov	r1, r5
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	220a      	movs	r2, #10
 800c7a6:	4658      	mov	r0, fp
 800c7a8:	f000 f9bc 	bl	800cb24 <__multadd>
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	e7f0      	b.n	800c792 <_dtoa_r+0xaba>
 800c7b0:	9b00      	ldr	r3, [sp, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	bfcc      	ite	gt
 800c7b6:	461e      	movgt	r6, r3
 800c7b8:	2601      	movle	r6, #1
 800c7ba:	4456      	add	r6, sl
 800c7bc:	2700      	movs	r7, #0
 800c7be:	4649      	mov	r1, r9
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	4658      	mov	r0, fp
 800c7c4:	f000 fba4 	bl	800cf10 <__lshift>
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	4681      	mov	r9, r0
 800c7cc:	f000 fc0c 	bl	800cfe8 <__mcmp>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	dcb0      	bgt.n	800c736 <_dtoa_r+0xa5e>
 800c7d4:	d102      	bne.n	800c7dc <_dtoa_r+0xb04>
 800c7d6:	f018 0f01 	tst.w	r8, #1
 800c7da:	d1ac      	bne.n	800c736 <_dtoa_r+0xa5e>
 800c7dc:	4633      	mov	r3, r6
 800c7de:	461e      	mov	r6, r3
 800c7e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7e4:	2a30      	cmp	r2, #48	@ 0x30
 800c7e6:	d0fa      	beq.n	800c7de <_dtoa_r+0xb06>
 800c7e8:	e5c2      	b.n	800c370 <_dtoa_r+0x698>
 800c7ea:	459a      	cmp	sl, r3
 800c7ec:	d1a4      	bne.n	800c738 <_dtoa_r+0xa60>
 800c7ee:	9b04      	ldr	r3, [sp, #16]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	2331      	movs	r3, #49	@ 0x31
 800c7f6:	f88a 3000 	strb.w	r3, [sl]
 800c7fa:	e5b9      	b.n	800c370 <_dtoa_r+0x698>
 800c7fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c85c <_dtoa_r+0xb84>
 800c802:	b11b      	cbz	r3, 800c80c <_dtoa_r+0xb34>
 800c804:	f10a 0308 	add.w	r3, sl, #8
 800c808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	4650      	mov	r0, sl
 800c80e:	b019      	add	sp, #100	@ 0x64
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c816:	2b01      	cmp	r3, #1
 800c818:	f77f ae37 	ble.w	800c48a <_dtoa_r+0x7b2>
 800c81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c81e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c820:	2001      	movs	r0, #1
 800c822:	e655      	b.n	800c4d0 <_dtoa_r+0x7f8>
 800c824:	9b00      	ldr	r3, [sp, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f77f aed6 	ble.w	800c5d8 <_dtoa_r+0x900>
 800c82c:	4656      	mov	r6, sl
 800c82e:	4621      	mov	r1, r4
 800c830:	4648      	mov	r0, r9
 800c832:	f7ff f9c9 	bl	800bbc8 <quorem>
 800c836:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c83a:	f806 8b01 	strb.w	r8, [r6], #1
 800c83e:	9b00      	ldr	r3, [sp, #0]
 800c840:	eba6 020a 	sub.w	r2, r6, sl
 800c844:	4293      	cmp	r3, r2
 800c846:	ddb3      	ble.n	800c7b0 <_dtoa_r+0xad8>
 800c848:	4649      	mov	r1, r9
 800c84a:	2300      	movs	r3, #0
 800c84c:	220a      	movs	r2, #10
 800c84e:	4658      	mov	r0, fp
 800c850:	f000 f968 	bl	800cb24 <__multadd>
 800c854:	4681      	mov	r9, r0
 800c856:	e7ea      	b.n	800c82e <_dtoa_r+0xb56>
 800c858:	0800f5e5 	.word	0x0800f5e5
 800c85c:	0800f569 	.word	0x0800f569

0800c860 <_free_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4605      	mov	r5, r0
 800c864:	2900      	cmp	r1, #0
 800c866:	d041      	beq.n	800c8ec <_free_r+0x8c>
 800c868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c86c:	1f0c      	subs	r4, r1, #4
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bfb8      	it	lt
 800c872:	18e4      	addlt	r4, r4, r3
 800c874:	f000 f8e8 	bl	800ca48 <__malloc_lock>
 800c878:	4a1d      	ldr	r2, [pc, #116]	@ (800c8f0 <_free_r+0x90>)
 800c87a:	6813      	ldr	r3, [r2, #0]
 800c87c:	b933      	cbnz	r3, 800c88c <_free_r+0x2c>
 800c87e:	6063      	str	r3, [r4, #4]
 800c880:	6014      	str	r4, [r2, #0]
 800c882:	4628      	mov	r0, r5
 800c884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c888:	f000 b8e4 	b.w	800ca54 <__malloc_unlock>
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	d908      	bls.n	800c8a2 <_free_r+0x42>
 800c890:	6820      	ldr	r0, [r4, #0]
 800c892:	1821      	adds	r1, r4, r0
 800c894:	428b      	cmp	r3, r1
 800c896:	bf01      	itttt	eq
 800c898:	6819      	ldreq	r1, [r3, #0]
 800c89a:	685b      	ldreq	r3, [r3, #4]
 800c89c:	1809      	addeq	r1, r1, r0
 800c89e:	6021      	streq	r1, [r4, #0]
 800c8a0:	e7ed      	b.n	800c87e <_free_r+0x1e>
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	b10b      	cbz	r3, 800c8ac <_free_r+0x4c>
 800c8a8:	42a3      	cmp	r3, r4
 800c8aa:	d9fa      	bls.n	800c8a2 <_free_r+0x42>
 800c8ac:	6811      	ldr	r1, [r2, #0]
 800c8ae:	1850      	adds	r0, r2, r1
 800c8b0:	42a0      	cmp	r0, r4
 800c8b2:	d10b      	bne.n	800c8cc <_free_r+0x6c>
 800c8b4:	6820      	ldr	r0, [r4, #0]
 800c8b6:	4401      	add	r1, r0
 800c8b8:	1850      	adds	r0, r2, r1
 800c8ba:	4283      	cmp	r3, r0
 800c8bc:	6011      	str	r1, [r2, #0]
 800c8be:	d1e0      	bne.n	800c882 <_free_r+0x22>
 800c8c0:	6818      	ldr	r0, [r3, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	6053      	str	r3, [r2, #4]
 800c8c6:	4408      	add	r0, r1
 800c8c8:	6010      	str	r0, [r2, #0]
 800c8ca:	e7da      	b.n	800c882 <_free_r+0x22>
 800c8cc:	d902      	bls.n	800c8d4 <_free_r+0x74>
 800c8ce:	230c      	movs	r3, #12
 800c8d0:	602b      	str	r3, [r5, #0]
 800c8d2:	e7d6      	b.n	800c882 <_free_r+0x22>
 800c8d4:	6820      	ldr	r0, [r4, #0]
 800c8d6:	1821      	adds	r1, r4, r0
 800c8d8:	428b      	cmp	r3, r1
 800c8da:	bf04      	itt	eq
 800c8dc:	6819      	ldreq	r1, [r3, #0]
 800c8de:	685b      	ldreq	r3, [r3, #4]
 800c8e0:	6063      	str	r3, [r4, #4]
 800c8e2:	bf04      	itt	eq
 800c8e4:	1809      	addeq	r1, r1, r0
 800c8e6:	6021      	streq	r1, [r4, #0]
 800c8e8:	6054      	str	r4, [r2, #4]
 800c8ea:	e7ca      	b.n	800c882 <_free_r+0x22>
 800c8ec:	bd38      	pop	{r3, r4, r5, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20005fdc 	.word	0x20005fdc

0800c8f4 <malloc>:
 800c8f4:	4b02      	ldr	r3, [pc, #8]	@ (800c900 <malloc+0xc>)
 800c8f6:	4601      	mov	r1, r0
 800c8f8:	6818      	ldr	r0, [r3, #0]
 800c8fa:	f000 b825 	b.w	800c948 <_malloc_r>
 800c8fe:	bf00      	nop
 800c900:	2000017c 	.word	0x2000017c

0800c904 <sbrk_aligned>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	4e0f      	ldr	r6, [pc, #60]	@ (800c944 <sbrk_aligned+0x40>)
 800c908:	460c      	mov	r4, r1
 800c90a:	6831      	ldr	r1, [r6, #0]
 800c90c:	4605      	mov	r5, r0
 800c90e:	b911      	cbnz	r1, 800c916 <sbrk_aligned+0x12>
 800c910:	f001 fe0c 	bl	800e52c <_sbrk_r>
 800c914:	6030      	str	r0, [r6, #0]
 800c916:	4621      	mov	r1, r4
 800c918:	4628      	mov	r0, r5
 800c91a:	f001 fe07 	bl	800e52c <_sbrk_r>
 800c91e:	1c43      	adds	r3, r0, #1
 800c920:	d103      	bne.n	800c92a <sbrk_aligned+0x26>
 800c922:	f04f 34ff 	mov.w	r4, #4294967295
 800c926:	4620      	mov	r0, r4
 800c928:	bd70      	pop	{r4, r5, r6, pc}
 800c92a:	1cc4      	adds	r4, r0, #3
 800c92c:	f024 0403 	bic.w	r4, r4, #3
 800c930:	42a0      	cmp	r0, r4
 800c932:	d0f8      	beq.n	800c926 <sbrk_aligned+0x22>
 800c934:	1a21      	subs	r1, r4, r0
 800c936:	4628      	mov	r0, r5
 800c938:	f001 fdf8 	bl	800e52c <_sbrk_r>
 800c93c:	3001      	adds	r0, #1
 800c93e:	d1f2      	bne.n	800c926 <sbrk_aligned+0x22>
 800c940:	e7ef      	b.n	800c922 <sbrk_aligned+0x1e>
 800c942:	bf00      	nop
 800c944:	20005fd8 	.word	0x20005fd8

0800c948 <_malloc_r>:
 800c948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c94c:	1ccd      	adds	r5, r1, #3
 800c94e:	f025 0503 	bic.w	r5, r5, #3
 800c952:	3508      	adds	r5, #8
 800c954:	2d0c      	cmp	r5, #12
 800c956:	bf38      	it	cc
 800c958:	250c      	movcc	r5, #12
 800c95a:	2d00      	cmp	r5, #0
 800c95c:	4606      	mov	r6, r0
 800c95e:	db01      	blt.n	800c964 <_malloc_r+0x1c>
 800c960:	42a9      	cmp	r1, r5
 800c962:	d904      	bls.n	800c96e <_malloc_r+0x26>
 800c964:	230c      	movs	r3, #12
 800c966:	6033      	str	r3, [r6, #0]
 800c968:	2000      	movs	r0, #0
 800c96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c96e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca44 <_malloc_r+0xfc>
 800c972:	f000 f869 	bl	800ca48 <__malloc_lock>
 800c976:	f8d8 3000 	ldr.w	r3, [r8]
 800c97a:	461c      	mov	r4, r3
 800c97c:	bb44      	cbnz	r4, 800c9d0 <_malloc_r+0x88>
 800c97e:	4629      	mov	r1, r5
 800c980:	4630      	mov	r0, r6
 800c982:	f7ff ffbf 	bl	800c904 <sbrk_aligned>
 800c986:	1c43      	adds	r3, r0, #1
 800c988:	4604      	mov	r4, r0
 800c98a:	d158      	bne.n	800ca3e <_malloc_r+0xf6>
 800c98c:	f8d8 4000 	ldr.w	r4, [r8]
 800c990:	4627      	mov	r7, r4
 800c992:	2f00      	cmp	r7, #0
 800c994:	d143      	bne.n	800ca1e <_malloc_r+0xd6>
 800c996:	2c00      	cmp	r4, #0
 800c998:	d04b      	beq.n	800ca32 <_malloc_r+0xea>
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	4639      	mov	r1, r7
 800c99e:	4630      	mov	r0, r6
 800c9a0:	eb04 0903 	add.w	r9, r4, r3
 800c9a4:	f001 fdc2 	bl	800e52c <_sbrk_r>
 800c9a8:	4581      	cmp	r9, r0
 800c9aa:	d142      	bne.n	800ca32 <_malloc_r+0xea>
 800c9ac:	6821      	ldr	r1, [r4, #0]
 800c9ae:	1a6d      	subs	r5, r5, r1
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7ff ffa6 	bl	800c904 <sbrk_aligned>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d03a      	beq.n	800ca32 <_malloc_r+0xea>
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	442b      	add	r3, r5
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	bb62      	cbnz	r2, 800ca24 <_malloc_r+0xdc>
 800c9ca:	f8c8 7000 	str.w	r7, [r8]
 800c9ce:	e00f      	b.n	800c9f0 <_malloc_r+0xa8>
 800c9d0:	6822      	ldr	r2, [r4, #0]
 800c9d2:	1b52      	subs	r2, r2, r5
 800c9d4:	d420      	bmi.n	800ca18 <_malloc_r+0xd0>
 800c9d6:	2a0b      	cmp	r2, #11
 800c9d8:	d917      	bls.n	800ca0a <_malloc_r+0xc2>
 800c9da:	1961      	adds	r1, r4, r5
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	6025      	str	r5, [r4, #0]
 800c9e0:	bf18      	it	ne
 800c9e2:	6059      	strne	r1, [r3, #4]
 800c9e4:	6863      	ldr	r3, [r4, #4]
 800c9e6:	bf08      	it	eq
 800c9e8:	f8c8 1000 	streq.w	r1, [r8]
 800c9ec:	5162      	str	r2, [r4, r5]
 800c9ee:	604b      	str	r3, [r1, #4]
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f000 f82f 	bl	800ca54 <__malloc_unlock>
 800c9f6:	f104 000b 	add.w	r0, r4, #11
 800c9fa:	1d23      	adds	r3, r4, #4
 800c9fc:	f020 0007 	bic.w	r0, r0, #7
 800ca00:	1ac2      	subs	r2, r0, r3
 800ca02:	bf1c      	itt	ne
 800ca04:	1a1b      	subne	r3, r3, r0
 800ca06:	50a3      	strne	r3, [r4, r2]
 800ca08:	e7af      	b.n	800c96a <_malloc_r+0x22>
 800ca0a:	6862      	ldr	r2, [r4, #4]
 800ca0c:	42a3      	cmp	r3, r4
 800ca0e:	bf0c      	ite	eq
 800ca10:	f8c8 2000 	streq.w	r2, [r8]
 800ca14:	605a      	strne	r2, [r3, #4]
 800ca16:	e7eb      	b.n	800c9f0 <_malloc_r+0xa8>
 800ca18:	4623      	mov	r3, r4
 800ca1a:	6864      	ldr	r4, [r4, #4]
 800ca1c:	e7ae      	b.n	800c97c <_malloc_r+0x34>
 800ca1e:	463c      	mov	r4, r7
 800ca20:	687f      	ldr	r7, [r7, #4]
 800ca22:	e7b6      	b.n	800c992 <_malloc_r+0x4a>
 800ca24:	461a      	mov	r2, r3
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	42a3      	cmp	r3, r4
 800ca2a:	d1fb      	bne.n	800ca24 <_malloc_r+0xdc>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	6053      	str	r3, [r2, #4]
 800ca30:	e7de      	b.n	800c9f0 <_malloc_r+0xa8>
 800ca32:	230c      	movs	r3, #12
 800ca34:	6033      	str	r3, [r6, #0]
 800ca36:	4630      	mov	r0, r6
 800ca38:	f000 f80c 	bl	800ca54 <__malloc_unlock>
 800ca3c:	e794      	b.n	800c968 <_malloc_r+0x20>
 800ca3e:	6005      	str	r5, [r0, #0]
 800ca40:	e7d6      	b.n	800c9f0 <_malloc_r+0xa8>
 800ca42:	bf00      	nop
 800ca44:	20005fdc 	.word	0x20005fdc

0800ca48 <__malloc_lock>:
 800ca48:	4801      	ldr	r0, [pc, #4]	@ (800ca50 <__malloc_lock+0x8>)
 800ca4a:	f7ff b8a6 	b.w	800bb9a <__retarget_lock_acquire_recursive>
 800ca4e:	bf00      	nop
 800ca50:	20005fd4 	.word	0x20005fd4

0800ca54 <__malloc_unlock>:
 800ca54:	4801      	ldr	r0, [pc, #4]	@ (800ca5c <__malloc_unlock+0x8>)
 800ca56:	f7ff b8a1 	b.w	800bb9c <__retarget_lock_release_recursive>
 800ca5a:	bf00      	nop
 800ca5c:	20005fd4 	.word	0x20005fd4

0800ca60 <_Balloc>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	69c6      	ldr	r6, [r0, #28]
 800ca64:	4604      	mov	r4, r0
 800ca66:	460d      	mov	r5, r1
 800ca68:	b976      	cbnz	r6, 800ca88 <_Balloc+0x28>
 800ca6a:	2010      	movs	r0, #16
 800ca6c:	f7ff ff42 	bl	800c8f4 <malloc>
 800ca70:	4602      	mov	r2, r0
 800ca72:	61e0      	str	r0, [r4, #28]
 800ca74:	b920      	cbnz	r0, 800ca80 <_Balloc+0x20>
 800ca76:	4b18      	ldr	r3, [pc, #96]	@ (800cad8 <_Balloc+0x78>)
 800ca78:	4818      	ldr	r0, [pc, #96]	@ (800cadc <_Balloc+0x7c>)
 800ca7a:	216b      	movs	r1, #107	@ 0x6b
 800ca7c:	f001 fd70 	bl	800e560 <__assert_func>
 800ca80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca84:	6006      	str	r6, [r0, #0]
 800ca86:	60c6      	str	r6, [r0, #12]
 800ca88:	69e6      	ldr	r6, [r4, #28]
 800ca8a:	68f3      	ldr	r3, [r6, #12]
 800ca8c:	b183      	cbz	r3, 800cab0 <_Balloc+0x50>
 800ca8e:	69e3      	ldr	r3, [r4, #28]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca96:	b9b8      	cbnz	r0, 800cac8 <_Balloc+0x68>
 800ca98:	2101      	movs	r1, #1
 800ca9a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca9e:	1d72      	adds	r2, r6, #5
 800caa0:	0092      	lsls	r2, r2, #2
 800caa2:	4620      	mov	r0, r4
 800caa4:	f001 fd7a 	bl	800e59c <_calloc_r>
 800caa8:	b160      	cbz	r0, 800cac4 <_Balloc+0x64>
 800caaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caae:	e00e      	b.n	800cace <_Balloc+0x6e>
 800cab0:	2221      	movs	r2, #33	@ 0x21
 800cab2:	2104      	movs	r1, #4
 800cab4:	4620      	mov	r0, r4
 800cab6:	f001 fd71 	bl	800e59c <_calloc_r>
 800caba:	69e3      	ldr	r3, [r4, #28]
 800cabc:	60f0      	str	r0, [r6, #12]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e4      	bne.n	800ca8e <_Balloc+0x2e>
 800cac4:	2000      	movs	r0, #0
 800cac6:	bd70      	pop	{r4, r5, r6, pc}
 800cac8:	6802      	ldr	r2, [r0, #0]
 800caca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cace:	2300      	movs	r3, #0
 800cad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cad4:	e7f7      	b.n	800cac6 <_Balloc+0x66>
 800cad6:	bf00      	nop
 800cad8:	0800f576 	.word	0x0800f576
 800cadc:	0800f5f6 	.word	0x0800f5f6

0800cae0 <_Bfree>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	69c6      	ldr	r6, [r0, #28]
 800cae4:	4605      	mov	r5, r0
 800cae6:	460c      	mov	r4, r1
 800cae8:	b976      	cbnz	r6, 800cb08 <_Bfree+0x28>
 800caea:	2010      	movs	r0, #16
 800caec:	f7ff ff02 	bl	800c8f4 <malloc>
 800caf0:	4602      	mov	r2, r0
 800caf2:	61e8      	str	r0, [r5, #28]
 800caf4:	b920      	cbnz	r0, 800cb00 <_Bfree+0x20>
 800caf6:	4b09      	ldr	r3, [pc, #36]	@ (800cb1c <_Bfree+0x3c>)
 800caf8:	4809      	ldr	r0, [pc, #36]	@ (800cb20 <_Bfree+0x40>)
 800cafa:	218f      	movs	r1, #143	@ 0x8f
 800cafc:	f001 fd30 	bl	800e560 <__assert_func>
 800cb00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb04:	6006      	str	r6, [r0, #0]
 800cb06:	60c6      	str	r6, [r0, #12]
 800cb08:	b13c      	cbz	r4, 800cb1a <_Bfree+0x3a>
 800cb0a:	69eb      	ldr	r3, [r5, #28]
 800cb0c:	6862      	ldr	r2, [r4, #4]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb14:	6021      	str	r1, [r4, #0]
 800cb16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb1a:	bd70      	pop	{r4, r5, r6, pc}
 800cb1c:	0800f576 	.word	0x0800f576
 800cb20:	0800f5f6 	.word	0x0800f5f6

0800cb24 <__multadd>:
 800cb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb28:	690d      	ldr	r5, [r1, #16]
 800cb2a:	4607      	mov	r7, r0
 800cb2c:	460c      	mov	r4, r1
 800cb2e:	461e      	mov	r6, r3
 800cb30:	f101 0c14 	add.w	ip, r1, #20
 800cb34:	2000      	movs	r0, #0
 800cb36:	f8dc 3000 	ldr.w	r3, [ip]
 800cb3a:	b299      	uxth	r1, r3
 800cb3c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb40:	0c1e      	lsrs	r6, r3, #16
 800cb42:	0c0b      	lsrs	r3, r1, #16
 800cb44:	fb02 3306 	mla	r3, r2, r6, r3
 800cb48:	b289      	uxth	r1, r1
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb50:	4285      	cmp	r5, r0
 800cb52:	f84c 1b04 	str.w	r1, [ip], #4
 800cb56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb5a:	dcec      	bgt.n	800cb36 <__multadd+0x12>
 800cb5c:	b30e      	cbz	r6, 800cba2 <__multadd+0x7e>
 800cb5e:	68a3      	ldr	r3, [r4, #8]
 800cb60:	42ab      	cmp	r3, r5
 800cb62:	dc19      	bgt.n	800cb98 <__multadd+0x74>
 800cb64:	6861      	ldr	r1, [r4, #4]
 800cb66:	4638      	mov	r0, r7
 800cb68:	3101      	adds	r1, #1
 800cb6a:	f7ff ff79 	bl	800ca60 <_Balloc>
 800cb6e:	4680      	mov	r8, r0
 800cb70:	b928      	cbnz	r0, 800cb7e <__multadd+0x5a>
 800cb72:	4602      	mov	r2, r0
 800cb74:	4b0c      	ldr	r3, [pc, #48]	@ (800cba8 <__multadd+0x84>)
 800cb76:	480d      	ldr	r0, [pc, #52]	@ (800cbac <__multadd+0x88>)
 800cb78:	21ba      	movs	r1, #186	@ 0xba
 800cb7a:	f001 fcf1 	bl	800e560 <__assert_func>
 800cb7e:	6922      	ldr	r2, [r4, #16]
 800cb80:	3202      	adds	r2, #2
 800cb82:	f104 010c 	add.w	r1, r4, #12
 800cb86:	0092      	lsls	r2, r2, #2
 800cb88:	300c      	adds	r0, #12
 800cb8a:	f7ff f808 	bl	800bb9e <memcpy>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4638      	mov	r0, r7
 800cb92:	f7ff ffa5 	bl	800cae0 <_Bfree>
 800cb96:	4644      	mov	r4, r8
 800cb98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb9c:	3501      	adds	r5, #1
 800cb9e:	615e      	str	r6, [r3, #20]
 800cba0:	6125      	str	r5, [r4, #16]
 800cba2:	4620      	mov	r0, r4
 800cba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba8:	0800f5e5 	.word	0x0800f5e5
 800cbac:	0800f5f6 	.word	0x0800f5f6

0800cbb0 <__s2b>:
 800cbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	4615      	mov	r5, r2
 800cbb8:	461f      	mov	r7, r3
 800cbba:	2209      	movs	r2, #9
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	db09      	blt.n	800cbe0 <__s2b+0x30>
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7ff ff47 	bl	800ca60 <_Balloc>
 800cbd2:	b940      	cbnz	r0, 800cbe6 <__s2b+0x36>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	4b19      	ldr	r3, [pc, #100]	@ (800cc3c <__s2b+0x8c>)
 800cbd8:	4819      	ldr	r0, [pc, #100]	@ (800cc40 <__s2b+0x90>)
 800cbda:	21d3      	movs	r1, #211	@ 0xd3
 800cbdc:	f001 fcc0 	bl	800e560 <__assert_func>
 800cbe0:	0052      	lsls	r2, r2, #1
 800cbe2:	3101      	adds	r1, #1
 800cbe4:	e7f0      	b.n	800cbc8 <__s2b+0x18>
 800cbe6:	9b08      	ldr	r3, [sp, #32]
 800cbe8:	6143      	str	r3, [r0, #20]
 800cbea:	2d09      	cmp	r5, #9
 800cbec:	f04f 0301 	mov.w	r3, #1
 800cbf0:	6103      	str	r3, [r0, #16]
 800cbf2:	dd16      	ble.n	800cc22 <__s2b+0x72>
 800cbf4:	f104 0909 	add.w	r9, r4, #9
 800cbf8:	46c8      	mov	r8, r9
 800cbfa:	442c      	add	r4, r5
 800cbfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc00:	4601      	mov	r1, r0
 800cc02:	3b30      	subs	r3, #48	@ 0x30
 800cc04:	220a      	movs	r2, #10
 800cc06:	4630      	mov	r0, r6
 800cc08:	f7ff ff8c 	bl	800cb24 <__multadd>
 800cc0c:	45a0      	cmp	r8, r4
 800cc0e:	d1f5      	bne.n	800cbfc <__s2b+0x4c>
 800cc10:	f1a5 0408 	sub.w	r4, r5, #8
 800cc14:	444c      	add	r4, r9
 800cc16:	1b2d      	subs	r5, r5, r4
 800cc18:	1963      	adds	r3, r4, r5
 800cc1a:	42bb      	cmp	r3, r7
 800cc1c:	db04      	blt.n	800cc28 <__s2b+0x78>
 800cc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc22:	340a      	adds	r4, #10
 800cc24:	2509      	movs	r5, #9
 800cc26:	e7f6      	b.n	800cc16 <__s2b+0x66>
 800cc28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc2c:	4601      	mov	r1, r0
 800cc2e:	3b30      	subs	r3, #48	@ 0x30
 800cc30:	220a      	movs	r2, #10
 800cc32:	4630      	mov	r0, r6
 800cc34:	f7ff ff76 	bl	800cb24 <__multadd>
 800cc38:	e7ee      	b.n	800cc18 <__s2b+0x68>
 800cc3a:	bf00      	nop
 800cc3c:	0800f5e5 	.word	0x0800f5e5
 800cc40:	0800f5f6 	.word	0x0800f5f6

0800cc44 <__hi0bits>:
 800cc44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc48:	4603      	mov	r3, r0
 800cc4a:	bf36      	itet	cc
 800cc4c:	0403      	lslcc	r3, r0, #16
 800cc4e:	2000      	movcs	r0, #0
 800cc50:	2010      	movcc	r0, #16
 800cc52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc56:	bf3c      	itt	cc
 800cc58:	021b      	lslcc	r3, r3, #8
 800cc5a:	3008      	addcc	r0, #8
 800cc5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc60:	bf3c      	itt	cc
 800cc62:	011b      	lslcc	r3, r3, #4
 800cc64:	3004      	addcc	r0, #4
 800cc66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc6a:	bf3c      	itt	cc
 800cc6c:	009b      	lslcc	r3, r3, #2
 800cc6e:	3002      	addcc	r0, #2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	db05      	blt.n	800cc80 <__hi0bits+0x3c>
 800cc74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc78:	f100 0001 	add.w	r0, r0, #1
 800cc7c:	bf08      	it	eq
 800cc7e:	2020      	moveq	r0, #32
 800cc80:	4770      	bx	lr

0800cc82 <__lo0bits>:
 800cc82:	6803      	ldr	r3, [r0, #0]
 800cc84:	4602      	mov	r2, r0
 800cc86:	f013 0007 	ands.w	r0, r3, #7
 800cc8a:	d00b      	beq.n	800cca4 <__lo0bits+0x22>
 800cc8c:	07d9      	lsls	r1, r3, #31
 800cc8e:	d421      	bmi.n	800ccd4 <__lo0bits+0x52>
 800cc90:	0798      	lsls	r0, r3, #30
 800cc92:	bf49      	itett	mi
 800cc94:	085b      	lsrmi	r3, r3, #1
 800cc96:	089b      	lsrpl	r3, r3, #2
 800cc98:	2001      	movmi	r0, #1
 800cc9a:	6013      	strmi	r3, [r2, #0]
 800cc9c:	bf5c      	itt	pl
 800cc9e:	6013      	strpl	r3, [r2, #0]
 800cca0:	2002      	movpl	r0, #2
 800cca2:	4770      	bx	lr
 800cca4:	b299      	uxth	r1, r3
 800cca6:	b909      	cbnz	r1, 800ccac <__lo0bits+0x2a>
 800cca8:	0c1b      	lsrs	r3, r3, #16
 800ccaa:	2010      	movs	r0, #16
 800ccac:	b2d9      	uxtb	r1, r3
 800ccae:	b909      	cbnz	r1, 800ccb4 <__lo0bits+0x32>
 800ccb0:	3008      	adds	r0, #8
 800ccb2:	0a1b      	lsrs	r3, r3, #8
 800ccb4:	0719      	lsls	r1, r3, #28
 800ccb6:	bf04      	itt	eq
 800ccb8:	091b      	lsreq	r3, r3, #4
 800ccba:	3004      	addeq	r0, #4
 800ccbc:	0799      	lsls	r1, r3, #30
 800ccbe:	bf04      	itt	eq
 800ccc0:	089b      	lsreq	r3, r3, #2
 800ccc2:	3002      	addeq	r0, #2
 800ccc4:	07d9      	lsls	r1, r3, #31
 800ccc6:	d403      	bmi.n	800ccd0 <__lo0bits+0x4e>
 800ccc8:	085b      	lsrs	r3, r3, #1
 800ccca:	f100 0001 	add.w	r0, r0, #1
 800ccce:	d003      	beq.n	800ccd8 <__lo0bits+0x56>
 800ccd0:	6013      	str	r3, [r2, #0]
 800ccd2:	4770      	bx	lr
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	4770      	bx	lr
 800ccd8:	2020      	movs	r0, #32
 800ccda:	4770      	bx	lr

0800ccdc <__i2b>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	460c      	mov	r4, r1
 800cce0:	2101      	movs	r1, #1
 800cce2:	f7ff febd 	bl	800ca60 <_Balloc>
 800cce6:	4602      	mov	r2, r0
 800cce8:	b928      	cbnz	r0, 800ccf6 <__i2b+0x1a>
 800ccea:	4b05      	ldr	r3, [pc, #20]	@ (800cd00 <__i2b+0x24>)
 800ccec:	4805      	ldr	r0, [pc, #20]	@ (800cd04 <__i2b+0x28>)
 800ccee:	f240 1145 	movw	r1, #325	@ 0x145
 800ccf2:	f001 fc35 	bl	800e560 <__assert_func>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	6144      	str	r4, [r0, #20]
 800ccfa:	6103      	str	r3, [r0, #16]
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	bf00      	nop
 800cd00:	0800f5e5 	.word	0x0800f5e5
 800cd04:	0800f5f6 	.word	0x0800f5f6

0800cd08 <__multiply>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	4614      	mov	r4, r2
 800cd0e:	690a      	ldr	r2, [r1, #16]
 800cd10:	6923      	ldr	r3, [r4, #16]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	bfa8      	it	ge
 800cd16:	4623      	movge	r3, r4
 800cd18:	460f      	mov	r7, r1
 800cd1a:	bfa4      	itt	ge
 800cd1c:	460c      	movge	r4, r1
 800cd1e:	461f      	movge	r7, r3
 800cd20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd28:	68a3      	ldr	r3, [r4, #8]
 800cd2a:	6861      	ldr	r1, [r4, #4]
 800cd2c:	eb0a 0609 	add.w	r6, sl, r9
 800cd30:	42b3      	cmp	r3, r6
 800cd32:	b085      	sub	sp, #20
 800cd34:	bfb8      	it	lt
 800cd36:	3101      	addlt	r1, #1
 800cd38:	f7ff fe92 	bl	800ca60 <_Balloc>
 800cd3c:	b930      	cbnz	r0, 800cd4c <__multiply+0x44>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	4b44      	ldr	r3, [pc, #272]	@ (800ce54 <__multiply+0x14c>)
 800cd42:	4845      	ldr	r0, [pc, #276]	@ (800ce58 <__multiply+0x150>)
 800cd44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd48:	f001 fc0a 	bl	800e560 <__assert_func>
 800cd4c:	f100 0514 	add.w	r5, r0, #20
 800cd50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd54:	462b      	mov	r3, r5
 800cd56:	2200      	movs	r2, #0
 800cd58:	4543      	cmp	r3, r8
 800cd5a:	d321      	bcc.n	800cda0 <__multiply+0x98>
 800cd5c:	f107 0114 	add.w	r1, r7, #20
 800cd60:	f104 0214 	add.w	r2, r4, #20
 800cd64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cd68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cd6c:	9302      	str	r3, [sp, #8]
 800cd6e:	1b13      	subs	r3, r2, r4
 800cd70:	3b15      	subs	r3, #21
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	3304      	adds	r3, #4
 800cd78:	f104 0715 	add.w	r7, r4, #21
 800cd7c:	42ba      	cmp	r2, r7
 800cd7e:	bf38      	it	cc
 800cd80:	2304      	movcc	r3, #4
 800cd82:	9301      	str	r3, [sp, #4]
 800cd84:	9b02      	ldr	r3, [sp, #8]
 800cd86:	9103      	str	r1, [sp, #12]
 800cd88:	428b      	cmp	r3, r1
 800cd8a:	d80c      	bhi.n	800cda6 <__multiply+0x9e>
 800cd8c:	2e00      	cmp	r6, #0
 800cd8e:	dd03      	ble.n	800cd98 <__multiply+0x90>
 800cd90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d05b      	beq.n	800ce50 <__multiply+0x148>
 800cd98:	6106      	str	r6, [r0, #16]
 800cd9a:	b005      	add	sp, #20
 800cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda0:	f843 2b04 	str.w	r2, [r3], #4
 800cda4:	e7d8      	b.n	800cd58 <__multiply+0x50>
 800cda6:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdaa:	f1ba 0f00 	cmp.w	sl, #0
 800cdae:	d024      	beq.n	800cdfa <__multiply+0xf2>
 800cdb0:	f104 0e14 	add.w	lr, r4, #20
 800cdb4:	46a9      	mov	r9, r5
 800cdb6:	f04f 0c00 	mov.w	ip, #0
 800cdba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cdbe:	f8d9 3000 	ldr.w	r3, [r9]
 800cdc2:	fa1f fb87 	uxth.w	fp, r7
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	fb0a 330b 	mla	r3, sl, fp, r3
 800cdcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cdd0:	f8d9 7000 	ldr.w	r7, [r9]
 800cdd4:	4463      	add	r3, ip
 800cdd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cdda:	fb0a c70b 	mla	r7, sl, fp, ip
 800cdde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cde8:	4572      	cmp	r2, lr
 800cdea:	f849 3b04 	str.w	r3, [r9], #4
 800cdee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cdf2:	d8e2      	bhi.n	800cdba <__multiply+0xb2>
 800cdf4:	9b01      	ldr	r3, [sp, #4]
 800cdf6:	f845 c003 	str.w	ip, [r5, r3]
 800cdfa:	9b03      	ldr	r3, [sp, #12]
 800cdfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce00:	3104      	adds	r1, #4
 800ce02:	f1b9 0f00 	cmp.w	r9, #0
 800ce06:	d021      	beq.n	800ce4c <__multiply+0x144>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	f104 0c14 	add.w	ip, r4, #20
 800ce0e:	46ae      	mov	lr, r5
 800ce10:	f04f 0a00 	mov.w	sl, #0
 800ce14:	f8bc b000 	ldrh.w	fp, [ip]
 800ce18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce1c:	fb09 770b 	mla	r7, r9, fp, r7
 800ce20:	4457      	add	r7, sl
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce28:	f84e 3b04 	str.w	r3, [lr], #4
 800ce2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce34:	f8be 3000 	ldrh.w	r3, [lr]
 800ce38:	fb09 330a 	mla	r3, r9, sl, r3
 800ce3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce40:	4562      	cmp	r2, ip
 800ce42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce46:	d8e5      	bhi.n	800ce14 <__multiply+0x10c>
 800ce48:	9f01      	ldr	r7, [sp, #4]
 800ce4a:	51eb      	str	r3, [r5, r7]
 800ce4c:	3504      	adds	r5, #4
 800ce4e:	e799      	b.n	800cd84 <__multiply+0x7c>
 800ce50:	3e01      	subs	r6, #1
 800ce52:	e79b      	b.n	800cd8c <__multiply+0x84>
 800ce54:	0800f5e5 	.word	0x0800f5e5
 800ce58:	0800f5f6 	.word	0x0800f5f6

0800ce5c <__pow5mult>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	4615      	mov	r5, r2
 800ce62:	f012 0203 	ands.w	r2, r2, #3
 800ce66:	4607      	mov	r7, r0
 800ce68:	460e      	mov	r6, r1
 800ce6a:	d007      	beq.n	800ce7c <__pow5mult+0x20>
 800ce6c:	4c25      	ldr	r4, [pc, #148]	@ (800cf04 <__pow5mult+0xa8>)
 800ce6e:	3a01      	subs	r2, #1
 800ce70:	2300      	movs	r3, #0
 800ce72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce76:	f7ff fe55 	bl	800cb24 <__multadd>
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	10ad      	asrs	r5, r5, #2
 800ce7e:	d03d      	beq.n	800cefc <__pow5mult+0xa0>
 800ce80:	69fc      	ldr	r4, [r7, #28]
 800ce82:	b97c      	cbnz	r4, 800cea4 <__pow5mult+0x48>
 800ce84:	2010      	movs	r0, #16
 800ce86:	f7ff fd35 	bl	800c8f4 <malloc>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	61f8      	str	r0, [r7, #28]
 800ce8e:	b928      	cbnz	r0, 800ce9c <__pow5mult+0x40>
 800ce90:	4b1d      	ldr	r3, [pc, #116]	@ (800cf08 <__pow5mult+0xac>)
 800ce92:	481e      	ldr	r0, [pc, #120]	@ (800cf0c <__pow5mult+0xb0>)
 800ce94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce98:	f001 fb62 	bl	800e560 <__assert_func>
 800ce9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cea0:	6004      	str	r4, [r0, #0]
 800cea2:	60c4      	str	r4, [r0, #12]
 800cea4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ceac:	b94c      	cbnz	r4, 800cec2 <__pow5mult+0x66>
 800ceae:	f240 2171 	movw	r1, #625	@ 0x271
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f7ff ff12 	bl	800ccdc <__i2b>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f8c8 0008 	str.w	r0, [r8, #8]
 800cebe:	4604      	mov	r4, r0
 800cec0:	6003      	str	r3, [r0, #0]
 800cec2:	f04f 0900 	mov.w	r9, #0
 800cec6:	07eb      	lsls	r3, r5, #31
 800cec8:	d50a      	bpl.n	800cee0 <__pow5mult+0x84>
 800ceca:	4631      	mov	r1, r6
 800cecc:	4622      	mov	r2, r4
 800cece:	4638      	mov	r0, r7
 800ced0:	f7ff ff1a 	bl	800cd08 <__multiply>
 800ced4:	4631      	mov	r1, r6
 800ced6:	4680      	mov	r8, r0
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7ff fe01 	bl	800cae0 <_Bfree>
 800cede:	4646      	mov	r6, r8
 800cee0:	106d      	asrs	r5, r5, #1
 800cee2:	d00b      	beq.n	800cefc <__pow5mult+0xa0>
 800cee4:	6820      	ldr	r0, [r4, #0]
 800cee6:	b938      	cbnz	r0, 800cef8 <__pow5mult+0x9c>
 800cee8:	4622      	mov	r2, r4
 800ceea:	4621      	mov	r1, r4
 800ceec:	4638      	mov	r0, r7
 800ceee:	f7ff ff0b 	bl	800cd08 <__multiply>
 800cef2:	6020      	str	r0, [r4, #0]
 800cef4:	f8c0 9000 	str.w	r9, [r0]
 800cef8:	4604      	mov	r4, r0
 800cefa:	e7e4      	b.n	800cec6 <__pow5mult+0x6a>
 800cefc:	4630      	mov	r0, r6
 800cefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf02:	bf00      	nop
 800cf04:	0800f650 	.word	0x0800f650
 800cf08:	0800f576 	.word	0x0800f576
 800cf0c:	0800f5f6 	.word	0x0800f5f6

0800cf10 <__lshift>:
 800cf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf14:	460c      	mov	r4, r1
 800cf16:	6849      	ldr	r1, [r1, #4]
 800cf18:	6923      	ldr	r3, [r4, #16]
 800cf1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf1e:	68a3      	ldr	r3, [r4, #8]
 800cf20:	4607      	mov	r7, r0
 800cf22:	4691      	mov	r9, r2
 800cf24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf28:	f108 0601 	add.w	r6, r8, #1
 800cf2c:	42b3      	cmp	r3, r6
 800cf2e:	db0b      	blt.n	800cf48 <__lshift+0x38>
 800cf30:	4638      	mov	r0, r7
 800cf32:	f7ff fd95 	bl	800ca60 <_Balloc>
 800cf36:	4605      	mov	r5, r0
 800cf38:	b948      	cbnz	r0, 800cf4e <__lshift+0x3e>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	4b28      	ldr	r3, [pc, #160]	@ (800cfe0 <__lshift+0xd0>)
 800cf3e:	4829      	ldr	r0, [pc, #164]	@ (800cfe4 <__lshift+0xd4>)
 800cf40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf44:	f001 fb0c 	bl	800e560 <__assert_func>
 800cf48:	3101      	adds	r1, #1
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	e7ee      	b.n	800cf2c <__lshift+0x1c>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f100 0114 	add.w	r1, r0, #20
 800cf54:	f100 0210 	add.w	r2, r0, #16
 800cf58:	4618      	mov	r0, r3
 800cf5a:	4553      	cmp	r3, sl
 800cf5c:	db33      	blt.n	800cfc6 <__lshift+0xb6>
 800cf5e:	6920      	ldr	r0, [r4, #16]
 800cf60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf64:	f104 0314 	add.w	r3, r4, #20
 800cf68:	f019 091f 	ands.w	r9, r9, #31
 800cf6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf74:	d02b      	beq.n	800cfce <__lshift+0xbe>
 800cf76:	f1c9 0e20 	rsb	lr, r9, #32
 800cf7a:	468a      	mov	sl, r1
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	6818      	ldr	r0, [r3, #0]
 800cf80:	fa00 f009 	lsl.w	r0, r0, r9
 800cf84:	4310      	orrs	r0, r2
 800cf86:	f84a 0b04 	str.w	r0, [sl], #4
 800cf8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8e:	459c      	cmp	ip, r3
 800cf90:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf94:	d8f3      	bhi.n	800cf7e <__lshift+0x6e>
 800cf96:	ebac 0304 	sub.w	r3, ip, r4
 800cf9a:	3b15      	subs	r3, #21
 800cf9c:	f023 0303 	bic.w	r3, r3, #3
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	f104 0015 	add.w	r0, r4, #21
 800cfa6:	4584      	cmp	ip, r0
 800cfa8:	bf38      	it	cc
 800cfaa:	2304      	movcc	r3, #4
 800cfac:	50ca      	str	r2, [r1, r3]
 800cfae:	b10a      	cbz	r2, 800cfb4 <__lshift+0xa4>
 800cfb0:	f108 0602 	add.w	r6, r8, #2
 800cfb4:	3e01      	subs	r6, #1
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	612e      	str	r6, [r5, #16]
 800cfba:	4621      	mov	r1, r4
 800cfbc:	f7ff fd90 	bl	800cae0 <_Bfree>
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfca:	3301      	adds	r3, #1
 800cfcc:	e7c5      	b.n	800cf5a <__lshift+0x4a>
 800cfce:	3904      	subs	r1, #4
 800cfd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfd8:	459c      	cmp	ip, r3
 800cfda:	d8f9      	bhi.n	800cfd0 <__lshift+0xc0>
 800cfdc:	e7ea      	b.n	800cfb4 <__lshift+0xa4>
 800cfde:	bf00      	nop
 800cfe0:	0800f5e5 	.word	0x0800f5e5
 800cfe4:	0800f5f6 	.word	0x0800f5f6

0800cfe8 <__mcmp>:
 800cfe8:	690a      	ldr	r2, [r1, #16]
 800cfea:	4603      	mov	r3, r0
 800cfec:	6900      	ldr	r0, [r0, #16]
 800cfee:	1a80      	subs	r0, r0, r2
 800cff0:	b530      	push	{r4, r5, lr}
 800cff2:	d10e      	bne.n	800d012 <__mcmp+0x2a>
 800cff4:	3314      	adds	r3, #20
 800cff6:	3114      	adds	r1, #20
 800cff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d008:	4295      	cmp	r5, r2
 800d00a:	d003      	beq.n	800d014 <__mcmp+0x2c>
 800d00c:	d205      	bcs.n	800d01a <__mcmp+0x32>
 800d00e:	f04f 30ff 	mov.w	r0, #4294967295
 800d012:	bd30      	pop	{r4, r5, pc}
 800d014:	42a3      	cmp	r3, r4
 800d016:	d3f3      	bcc.n	800d000 <__mcmp+0x18>
 800d018:	e7fb      	b.n	800d012 <__mcmp+0x2a>
 800d01a:	2001      	movs	r0, #1
 800d01c:	e7f9      	b.n	800d012 <__mcmp+0x2a>
	...

0800d020 <__mdiff>:
 800d020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	4689      	mov	r9, r1
 800d026:	4606      	mov	r6, r0
 800d028:	4611      	mov	r1, r2
 800d02a:	4648      	mov	r0, r9
 800d02c:	4614      	mov	r4, r2
 800d02e:	f7ff ffdb 	bl	800cfe8 <__mcmp>
 800d032:	1e05      	subs	r5, r0, #0
 800d034:	d112      	bne.n	800d05c <__mdiff+0x3c>
 800d036:	4629      	mov	r1, r5
 800d038:	4630      	mov	r0, r6
 800d03a:	f7ff fd11 	bl	800ca60 <_Balloc>
 800d03e:	4602      	mov	r2, r0
 800d040:	b928      	cbnz	r0, 800d04e <__mdiff+0x2e>
 800d042:	4b3f      	ldr	r3, [pc, #252]	@ (800d140 <__mdiff+0x120>)
 800d044:	f240 2137 	movw	r1, #567	@ 0x237
 800d048:	483e      	ldr	r0, [pc, #248]	@ (800d144 <__mdiff+0x124>)
 800d04a:	f001 fa89 	bl	800e560 <__assert_func>
 800d04e:	2301      	movs	r3, #1
 800d050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d054:	4610      	mov	r0, r2
 800d056:	b003      	add	sp, #12
 800d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05c:	bfbc      	itt	lt
 800d05e:	464b      	movlt	r3, r9
 800d060:	46a1      	movlt	r9, r4
 800d062:	4630      	mov	r0, r6
 800d064:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d068:	bfba      	itte	lt
 800d06a:	461c      	movlt	r4, r3
 800d06c:	2501      	movlt	r5, #1
 800d06e:	2500      	movge	r5, #0
 800d070:	f7ff fcf6 	bl	800ca60 <_Balloc>
 800d074:	4602      	mov	r2, r0
 800d076:	b918      	cbnz	r0, 800d080 <__mdiff+0x60>
 800d078:	4b31      	ldr	r3, [pc, #196]	@ (800d140 <__mdiff+0x120>)
 800d07a:	f240 2145 	movw	r1, #581	@ 0x245
 800d07e:	e7e3      	b.n	800d048 <__mdiff+0x28>
 800d080:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d084:	6926      	ldr	r6, [r4, #16]
 800d086:	60c5      	str	r5, [r0, #12]
 800d088:	f109 0310 	add.w	r3, r9, #16
 800d08c:	f109 0514 	add.w	r5, r9, #20
 800d090:	f104 0e14 	add.w	lr, r4, #20
 800d094:	f100 0b14 	add.w	fp, r0, #20
 800d098:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d09c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	46d9      	mov	r9, fp
 800d0a4:	f04f 0c00 	mov.w	ip, #0
 800d0a8:	9b01      	ldr	r3, [sp, #4]
 800d0aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	fa1f f38a 	uxth.w	r3, sl
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	b283      	uxth	r3, r0
 800d0bc:	1acb      	subs	r3, r1, r3
 800d0be:	0c00      	lsrs	r0, r0, #16
 800d0c0:	4463      	add	r3, ip
 800d0c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d0c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d0d0:	4576      	cmp	r6, lr
 800d0d2:	f849 3b04 	str.w	r3, [r9], #4
 800d0d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0da:	d8e5      	bhi.n	800d0a8 <__mdiff+0x88>
 800d0dc:	1b33      	subs	r3, r6, r4
 800d0de:	3b15      	subs	r3, #21
 800d0e0:	f023 0303 	bic.w	r3, r3, #3
 800d0e4:	3415      	adds	r4, #21
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	42a6      	cmp	r6, r4
 800d0ea:	bf38      	it	cc
 800d0ec:	2304      	movcc	r3, #4
 800d0ee:	441d      	add	r5, r3
 800d0f0:	445b      	add	r3, fp
 800d0f2:	461e      	mov	r6, r3
 800d0f4:	462c      	mov	r4, r5
 800d0f6:	4544      	cmp	r4, r8
 800d0f8:	d30e      	bcc.n	800d118 <__mdiff+0xf8>
 800d0fa:	f108 0103 	add.w	r1, r8, #3
 800d0fe:	1b49      	subs	r1, r1, r5
 800d100:	f021 0103 	bic.w	r1, r1, #3
 800d104:	3d03      	subs	r5, #3
 800d106:	45a8      	cmp	r8, r5
 800d108:	bf38      	it	cc
 800d10a:	2100      	movcc	r1, #0
 800d10c:	440b      	add	r3, r1
 800d10e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d112:	b191      	cbz	r1, 800d13a <__mdiff+0x11a>
 800d114:	6117      	str	r7, [r2, #16]
 800d116:	e79d      	b.n	800d054 <__mdiff+0x34>
 800d118:	f854 1b04 	ldr.w	r1, [r4], #4
 800d11c:	46e6      	mov	lr, ip
 800d11e:	0c08      	lsrs	r0, r1, #16
 800d120:	fa1c fc81 	uxtah	ip, ip, r1
 800d124:	4471      	add	r1, lr
 800d126:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d12a:	b289      	uxth	r1, r1
 800d12c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d130:	f846 1b04 	str.w	r1, [r6], #4
 800d134:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d138:	e7dd      	b.n	800d0f6 <__mdiff+0xd6>
 800d13a:	3f01      	subs	r7, #1
 800d13c:	e7e7      	b.n	800d10e <__mdiff+0xee>
 800d13e:	bf00      	nop
 800d140:	0800f5e5 	.word	0x0800f5e5
 800d144:	0800f5f6 	.word	0x0800f5f6

0800d148 <__ulp>:
 800d148:	b082      	sub	sp, #8
 800d14a:	ed8d 0b00 	vstr	d0, [sp]
 800d14e:	9a01      	ldr	r2, [sp, #4]
 800d150:	4b0f      	ldr	r3, [pc, #60]	@ (800d190 <__ulp+0x48>)
 800d152:	4013      	ands	r3, r2
 800d154:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	dc08      	bgt.n	800d16e <__ulp+0x26>
 800d15c:	425b      	negs	r3, r3
 800d15e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d162:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d166:	da04      	bge.n	800d172 <__ulp+0x2a>
 800d168:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d16c:	4113      	asrs	r3, r2
 800d16e:	2200      	movs	r2, #0
 800d170:	e008      	b.n	800d184 <__ulp+0x3c>
 800d172:	f1a2 0314 	sub.w	r3, r2, #20
 800d176:	2b1e      	cmp	r3, #30
 800d178:	bfda      	itte	le
 800d17a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d17e:	40da      	lsrle	r2, r3
 800d180:	2201      	movgt	r2, #1
 800d182:	2300      	movs	r3, #0
 800d184:	4619      	mov	r1, r3
 800d186:	4610      	mov	r0, r2
 800d188:	ec41 0b10 	vmov	d0, r0, r1
 800d18c:	b002      	add	sp, #8
 800d18e:	4770      	bx	lr
 800d190:	7ff00000 	.word	0x7ff00000

0800d194 <__b2d>:
 800d194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d198:	6906      	ldr	r6, [r0, #16]
 800d19a:	f100 0814 	add.w	r8, r0, #20
 800d19e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d1a2:	1f37      	subs	r7, r6, #4
 800d1a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	f7ff fd4b 	bl	800cc44 <__hi0bits>
 800d1ae:	f1c0 0320 	rsb	r3, r0, #32
 800d1b2:	280a      	cmp	r0, #10
 800d1b4:	600b      	str	r3, [r1, #0]
 800d1b6:	491b      	ldr	r1, [pc, #108]	@ (800d224 <__b2d+0x90>)
 800d1b8:	dc15      	bgt.n	800d1e6 <__b2d+0x52>
 800d1ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800d1be:	fa22 f30c 	lsr.w	r3, r2, ip
 800d1c2:	45b8      	cmp	r8, r7
 800d1c4:	ea43 0501 	orr.w	r5, r3, r1
 800d1c8:	bf34      	ite	cc
 800d1ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1ce:	2300      	movcs	r3, #0
 800d1d0:	3015      	adds	r0, #21
 800d1d2:	fa02 f000 	lsl.w	r0, r2, r0
 800d1d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d1da:	4303      	orrs	r3, r0
 800d1dc:	461c      	mov	r4, r3
 800d1de:	ec45 4b10 	vmov	d0, r4, r5
 800d1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e6:	45b8      	cmp	r8, r7
 800d1e8:	bf3a      	itte	cc
 800d1ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800d1f2:	2300      	movcs	r3, #0
 800d1f4:	380b      	subs	r0, #11
 800d1f6:	d012      	beq.n	800d21e <__b2d+0x8a>
 800d1f8:	f1c0 0120 	rsb	r1, r0, #32
 800d1fc:	fa23 f401 	lsr.w	r4, r3, r1
 800d200:	4082      	lsls	r2, r0
 800d202:	4322      	orrs	r2, r4
 800d204:	4547      	cmp	r7, r8
 800d206:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d20a:	bf8c      	ite	hi
 800d20c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d210:	2200      	movls	r2, #0
 800d212:	4083      	lsls	r3, r0
 800d214:	40ca      	lsrs	r2, r1
 800d216:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d21a:	4313      	orrs	r3, r2
 800d21c:	e7de      	b.n	800d1dc <__b2d+0x48>
 800d21e:	ea42 0501 	orr.w	r5, r2, r1
 800d222:	e7db      	b.n	800d1dc <__b2d+0x48>
 800d224:	3ff00000 	.word	0x3ff00000

0800d228 <__d2b>:
 800d228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d22c:	460f      	mov	r7, r1
 800d22e:	2101      	movs	r1, #1
 800d230:	ec59 8b10 	vmov	r8, r9, d0
 800d234:	4616      	mov	r6, r2
 800d236:	f7ff fc13 	bl	800ca60 <_Balloc>
 800d23a:	4604      	mov	r4, r0
 800d23c:	b930      	cbnz	r0, 800d24c <__d2b+0x24>
 800d23e:	4602      	mov	r2, r0
 800d240:	4b23      	ldr	r3, [pc, #140]	@ (800d2d0 <__d2b+0xa8>)
 800d242:	4824      	ldr	r0, [pc, #144]	@ (800d2d4 <__d2b+0xac>)
 800d244:	f240 310f 	movw	r1, #783	@ 0x30f
 800d248:	f001 f98a 	bl	800e560 <__assert_func>
 800d24c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d254:	b10d      	cbz	r5, 800d25a <__d2b+0x32>
 800d256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d25a:	9301      	str	r3, [sp, #4]
 800d25c:	f1b8 0300 	subs.w	r3, r8, #0
 800d260:	d023      	beq.n	800d2aa <__d2b+0x82>
 800d262:	4668      	mov	r0, sp
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	f7ff fd0c 	bl	800cc82 <__lo0bits>
 800d26a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d26e:	b1d0      	cbz	r0, 800d2a6 <__d2b+0x7e>
 800d270:	f1c0 0320 	rsb	r3, r0, #32
 800d274:	fa02 f303 	lsl.w	r3, r2, r3
 800d278:	430b      	orrs	r3, r1
 800d27a:	40c2      	lsrs	r2, r0
 800d27c:	6163      	str	r3, [r4, #20]
 800d27e:	9201      	str	r2, [sp, #4]
 800d280:	9b01      	ldr	r3, [sp, #4]
 800d282:	61a3      	str	r3, [r4, #24]
 800d284:	2b00      	cmp	r3, #0
 800d286:	bf0c      	ite	eq
 800d288:	2201      	moveq	r2, #1
 800d28a:	2202      	movne	r2, #2
 800d28c:	6122      	str	r2, [r4, #16]
 800d28e:	b1a5      	cbz	r5, 800d2ba <__d2b+0x92>
 800d290:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d294:	4405      	add	r5, r0
 800d296:	603d      	str	r5, [r7, #0]
 800d298:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d29c:	6030      	str	r0, [r6, #0]
 800d29e:	4620      	mov	r0, r4
 800d2a0:	b003      	add	sp, #12
 800d2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2a6:	6161      	str	r1, [r4, #20]
 800d2a8:	e7ea      	b.n	800d280 <__d2b+0x58>
 800d2aa:	a801      	add	r0, sp, #4
 800d2ac:	f7ff fce9 	bl	800cc82 <__lo0bits>
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	6163      	str	r3, [r4, #20]
 800d2b4:	3020      	adds	r0, #32
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	e7e8      	b.n	800d28c <__d2b+0x64>
 800d2ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2c2:	6038      	str	r0, [r7, #0]
 800d2c4:	6918      	ldr	r0, [r3, #16]
 800d2c6:	f7ff fcbd 	bl	800cc44 <__hi0bits>
 800d2ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2ce:	e7e5      	b.n	800d29c <__d2b+0x74>
 800d2d0:	0800f5e5 	.word	0x0800f5e5
 800d2d4:	0800f5f6 	.word	0x0800f5f6

0800d2d8 <__ratio>:
 800d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2dc:	b085      	sub	sp, #20
 800d2de:	e9cd 1000 	strd	r1, r0, [sp]
 800d2e2:	a902      	add	r1, sp, #8
 800d2e4:	f7ff ff56 	bl	800d194 <__b2d>
 800d2e8:	9800      	ldr	r0, [sp, #0]
 800d2ea:	a903      	add	r1, sp, #12
 800d2ec:	ec55 4b10 	vmov	r4, r5, d0
 800d2f0:	f7ff ff50 	bl	800d194 <__b2d>
 800d2f4:	9b01      	ldr	r3, [sp, #4]
 800d2f6:	6919      	ldr	r1, [r3, #16]
 800d2f8:	9b00      	ldr	r3, [sp, #0]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	1ac9      	subs	r1, r1, r3
 800d2fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d302:	1a9b      	subs	r3, r3, r2
 800d304:	ec5b ab10 	vmov	sl, fp, d0
 800d308:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	bfce      	itee	gt
 800d310:	462a      	movgt	r2, r5
 800d312:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d316:	465a      	movle	r2, fp
 800d318:	462f      	mov	r7, r5
 800d31a:	46d9      	mov	r9, fp
 800d31c:	bfcc      	ite	gt
 800d31e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d322:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d326:	464b      	mov	r3, r9
 800d328:	4652      	mov	r2, sl
 800d32a:	4620      	mov	r0, r4
 800d32c:	4639      	mov	r1, r7
 800d32e:	f7f3 fabd 	bl	80008ac <__aeabi_ddiv>
 800d332:	ec41 0b10 	vmov	d0, r0, r1
 800d336:	b005      	add	sp, #20
 800d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d33c <__copybits>:
 800d33c:	3901      	subs	r1, #1
 800d33e:	b570      	push	{r4, r5, r6, lr}
 800d340:	1149      	asrs	r1, r1, #5
 800d342:	6914      	ldr	r4, [r2, #16]
 800d344:	3101      	adds	r1, #1
 800d346:	f102 0314 	add.w	r3, r2, #20
 800d34a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d34e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d352:	1f05      	subs	r5, r0, #4
 800d354:	42a3      	cmp	r3, r4
 800d356:	d30c      	bcc.n	800d372 <__copybits+0x36>
 800d358:	1aa3      	subs	r3, r4, r2
 800d35a:	3b11      	subs	r3, #17
 800d35c:	f023 0303 	bic.w	r3, r3, #3
 800d360:	3211      	adds	r2, #17
 800d362:	42a2      	cmp	r2, r4
 800d364:	bf88      	it	hi
 800d366:	2300      	movhi	r3, #0
 800d368:	4418      	add	r0, r3
 800d36a:	2300      	movs	r3, #0
 800d36c:	4288      	cmp	r0, r1
 800d36e:	d305      	bcc.n	800d37c <__copybits+0x40>
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	f853 6b04 	ldr.w	r6, [r3], #4
 800d376:	f845 6f04 	str.w	r6, [r5, #4]!
 800d37a:	e7eb      	b.n	800d354 <__copybits+0x18>
 800d37c:	f840 3b04 	str.w	r3, [r0], #4
 800d380:	e7f4      	b.n	800d36c <__copybits+0x30>

0800d382 <__any_on>:
 800d382:	f100 0214 	add.w	r2, r0, #20
 800d386:	6900      	ldr	r0, [r0, #16]
 800d388:	114b      	asrs	r3, r1, #5
 800d38a:	4298      	cmp	r0, r3
 800d38c:	b510      	push	{r4, lr}
 800d38e:	db11      	blt.n	800d3b4 <__any_on+0x32>
 800d390:	dd0a      	ble.n	800d3a8 <__any_on+0x26>
 800d392:	f011 011f 	ands.w	r1, r1, #31
 800d396:	d007      	beq.n	800d3a8 <__any_on+0x26>
 800d398:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d39c:	fa24 f001 	lsr.w	r0, r4, r1
 800d3a0:	fa00 f101 	lsl.w	r1, r0, r1
 800d3a4:	428c      	cmp	r4, r1
 800d3a6:	d10b      	bne.n	800d3c0 <__any_on+0x3e>
 800d3a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d803      	bhi.n	800d3b8 <__any_on+0x36>
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	bd10      	pop	{r4, pc}
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	e7f7      	b.n	800d3a8 <__any_on+0x26>
 800d3b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3bc:	2900      	cmp	r1, #0
 800d3be:	d0f5      	beq.n	800d3ac <__any_on+0x2a>
 800d3c0:	2001      	movs	r0, #1
 800d3c2:	e7f6      	b.n	800d3b2 <__any_on+0x30>

0800d3c4 <sulp>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	460d      	mov	r5, r1
 800d3ca:	ec45 4b10 	vmov	d0, r4, r5
 800d3ce:	4616      	mov	r6, r2
 800d3d0:	f7ff feba 	bl	800d148 <__ulp>
 800d3d4:	ec51 0b10 	vmov	r0, r1, d0
 800d3d8:	b17e      	cbz	r6, 800d3fa <sulp+0x36>
 800d3da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d3de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	dd09      	ble.n	800d3fa <sulp+0x36>
 800d3e6:	051b      	lsls	r3, r3, #20
 800d3e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d3ec:	2400      	movs	r4, #0
 800d3ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	462b      	mov	r3, r5
 800d3f6:	f7f3 f92f 	bl	8000658 <__aeabi_dmul>
 800d3fa:	ec41 0b10 	vmov	d0, r0, r1
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}

0800d400 <_strtod_l>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	b09f      	sub	sp, #124	@ 0x7c
 800d406:	460c      	mov	r4, r1
 800d408:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d40a:	2200      	movs	r2, #0
 800d40c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d40e:	9005      	str	r0, [sp, #20]
 800d410:	f04f 0a00 	mov.w	sl, #0
 800d414:	f04f 0b00 	mov.w	fp, #0
 800d418:	460a      	mov	r2, r1
 800d41a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d41c:	7811      	ldrb	r1, [r2, #0]
 800d41e:	292b      	cmp	r1, #43	@ 0x2b
 800d420:	d04a      	beq.n	800d4b8 <_strtod_l+0xb8>
 800d422:	d838      	bhi.n	800d496 <_strtod_l+0x96>
 800d424:	290d      	cmp	r1, #13
 800d426:	d832      	bhi.n	800d48e <_strtod_l+0x8e>
 800d428:	2908      	cmp	r1, #8
 800d42a:	d832      	bhi.n	800d492 <_strtod_l+0x92>
 800d42c:	2900      	cmp	r1, #0
 800d42e:	d03b      	beq.n	800d4a8 <_strtod_l+0xa8>
 800d430:	2200      	movs	r2, #0
 800d432:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d434:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d436:	782a      	ldrb	r2, [r5, #0]
 800d438:	2a30      	cmp	r2, #48	@ 0x30
 800d43a:	f040 80b3 	bne.w	800d5a4 <_strtod_l+0x1a4>
 800d43e:	786a      	ldrb	r2, [r5, #1]
 800d440:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d444:	2a58      	cmp	r2, #88	@ 0x58
 800d446:	d16e      	bne.n	800d526 <_strtod_l+0x126>
 800d448:	9302      	str	r3, [sp, #8]
 800d44a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	4a8e      	ldr	r2, [pc, #568]	@ (800d68c <_strtod_l+0x28c>)
 800d454:	9805      	ldr	r0, [sp, #20]
 800d456:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d458:	a919      	add	r1, sp, #100	@ 0x64
 800d45a:	f001 f91b 	bl	800e694 <__gethex>
 800d45e:	f010 060f 	ands.w	r6, r0, #15
 800d462:	4604      	mov	r4, r0
 800d464:	d005      	beq.n	800d472 <_strtod_l+0x72>
 800d466:	2e06      	cmp	r6, #6
 800d468:	d128      	bne.n	800d4bc <_strtod_l+0xbc>
 800d46a:	3501      	adds	r5, #1
 800d46c:	2300      	movs	r3, #0
 800d46e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d470:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d474:	2b00      	cmp	r3, #0
 800d476:	f040 858e 	bne.w	800df96 <_strtod_l+0xb96>
 800d47a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d47c:	b1cb      	cbz	r3, 800d4b2 <_strtod_l+0xb2>
 800d47e:	4652      	mov	r2, sl
 800d480:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d484:	ec43 2b10 	vmov	d0, r2, r3
 800d488:	b01f      	add	sp, #124	@ 0x7c
 800d48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48e:	2920      	cmp	r1, #32
 800d490:	d1ce      	bne.n	800d430 <_strtod_l+0x30>
 800d492:	3201      	adds	r2, #1
 800d494:	e7c1      	b.n	800d41a <_strtod_l+0x1a>
 800d496:	292d      	cmp	r1, #45	@ 0x2d
 800d498:	d1ca      	bne.n	800d430 <_strtod_l+0x30>
 800d49a:	2101      	movs	r1, #1
 800d49c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d49e:	1c51      	adds	r1, r2, #1
 800d4a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d4a2:	7852      	ldrb	r2, [r2, #1]
 800d4a4:	2a00      	cmp	r2, #0
 800d4a6:	d1c5      	bne.n	800d434 <_strtod_l+0x34>
 800d4a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f040 8570 	bne.w	800df92 <_strtod_l+0xb92>
 800d4b2:	4652      	mov	r2, sl
 800d4b4:	465b      	mov	r3, fp
 800d4b6:	e7e5      	b.n	800d484 <_strtod_l+0x84>
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	e7ef      	b.n	800d49c <_strtod_l+0x9c>
 800d4bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d4be:	b13a      	cbz	r2, 800d4d0 <_strtod_l+0xd0>
 800d4c0:	2135      	movs	r1, #53	@ 0x35
 800d4c2:	a81c      	add	r0, sp, #112	@ 0x70
 800d4c4:	f7ff ff3a 	bl	800d33c <__copybits>
 800d4c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4ca:	9805      	ldr	r0, [sp, #20]
 800d4cc:	f7ff fb08 	bl	800cae0 <_Bfree>
 800d4d0:	3e01      	subs	r6, #1
 800d4d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d4d4:	2e04      	cmp	r6, #4
 800d4d6:	d806      	bhi.n	800d4e6 <_strtod_l+0xe6>
 800d4d8:	e8df f006 	tbb	[pc, r6]
 800d4dc:	201d0314 	.word	0x201d0314
 800d4e0:	14          	.byte	0x14
 800d4e1:	00          	.byte	0x00
 800d4e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d4e6:	05e1      	lsls	r1, r4, #23
 800d4e8:	bf48      	it	mi
 800d4ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d4ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4f2:	0d1b      	lsrs	r3, r3, #20
 800d4f4:	051b      	lsls	r3, r3, #20
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1bb      	bne.n	800d472 <_strtod_l+0x72>
 800d4fa:	f7fe fb23 	bl	800bb44 <__errno>
 800d4fe:	2322      	movs	r3, #34	@ 0x22
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	e7b6      	b.n	800d472 <_strtod_l+0x72>
 800d504:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d508:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d50c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d510:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d514:	e7e7      	b.n	800d4e6 <_strtod_l+0xe6>
 800d516:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d694 <_strtod_l+0x294>
 800d51a:	e7e4      	b.n	800d4e6 <_strtod_l+0xe6>
 800d51c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d520:	f04f 3aff 	mov.w	sl, #4294967295
 800d524:	e7df      	b.n	800d4e6 <_strtod_l+0xe6>
 800d526:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d52c:	785b      	ldrb	r3, [r3, #1]
 800d52e:	2b30      	cmp	r3, #48	@ 0x30
 800d530:	d0f9      	beq.n	800d526 <_strtod_l+0x126>
 800d532:	2b00      	cmp	r3, #0
 800d534:	d09d      	beq.n	800d472 <_strtod_l+0x72>
 800d536:	2301      	movs	r3, #1
 800d538:	9309      	str	r3, [sp, #36]	@ 0x24
 800d53a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d53c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d53e:	2300      	movs	r3, #0
 800d540:	9308      	str	r3, [sp, #32]
 800d542:	930a      	str	r3, [sp, #40]	@ 0x28
 800d544:	461f      	mov	r7, r3
 800d546:	220a      	movs	r2, #10
 800d548:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d54a:	7805      	ldrb	r5, [r0, #0]
 800d54c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d550:	b2d9      	uxtb	r1, r3
 800d552:	2909      	cmp	r1, #9
 800d554:	d928      	bls.n	800d5a8 <_strtod_l+0x1a8>
 800d556:	494e      	ldr	r1, [pc, #312]	@ (800d690 <_strtod_l+0x290>)
 800d558:	2201      	movs	r2, #1
 800d55a:	f000 ffd5 	bl	800e508 <strncmp>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d032      	beq.n	800d5c8 <_strtod_l+0x1c8>
 800d562:	2000      	movs	r0, #0
 800d564:	462a      	mov	r2, r5
 800d566:	4681      	mov	r9, r0
 800d568:	463d      	mov	r5, r7
 800d56a:	4603      	mov	r3, r0
 800d56c:	2a65      	cmp	r2, #101	@ 0x65
 800d56e:	d001      	beq.n	800d574 <_strtod_l+0x174>
 800d570:	2a45      	cmp	r2, #69	@ 0x45
 800d572:	d114      	bne.n	800d59e <_strtod_l+0x19e>
 800d574:	b91d      	cbnz	r5, 800d57e <_strtod_l+0x17e>
 800d576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d578:	4302      	orrs	r2, r0
 800d57a:	d095      	beq.n	800d4a8 <_strtod_l+0xa8>
 800d57c:	2500      	movs	r5, #0
 800d57e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d580:	1c62      	adds	r2, r4, #1
 800d582:	9219      	str	r2, [sp, #100]	@ 0x64
 800d584:	7862      	ldrb	r2, [r4, #1]
 800d586:	2a2b      	cmp	r2, #43	@ 0x2b
 800d588:	d077      	beq.n	800d67a <_strtod_l+0x27a>
 800d58a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d58c:	d07b      	beq.n	800d686 <_strtod_l+0x286>
 800d58e:	f04f 0c00 	mov.w	ip, #0
 800d592:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d596:	2909      	cmp	r1, #9
 800d598:	f240 8082 	bls.w	800d6a0 <_strtod_l+0x2a0>
 800d59c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d59e:	f04f 0800 	mov.w	r8, #0
 800d5a2:	e0a2      	b.n	800d6ea <_strtod_l+0x2ea>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e7c7      	b.n	800d538 <_strtod_l+0x138>
 800d5a8:	2f08      	cmp	r7, #8
 800d5aa:	bfd5      	itete	le
 800d5ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d5ae:	9908      	ldrgt	r1, [sp, #32]
 800d5b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d5b8:	f100 0001 	add.w	r0, r0, #1
 800d5bc:	bfd4      	ite	le
 800d5be:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d5c0:	9308      	strgt	r3, [sp, #32]
 800d5c2:	3701      	adds	r7, #1
 800d5c4:	9019      	str	r0, [sp, #100]	@ 0x64
 800d5c6:	e7bf      	b.n	800d548 <_strtod_l+0x148>
 800d5c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5ce:	785a      	ldrb	r2, [r3, #1]
 800d5d0:	b37f      	cbz	r7, 800d632 <_strtod_l+0x232>
 800d5d2:	4681      	mov	r9, r0
 800d5d4:	463d      	mov	r5, r7
 800d5d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d5da:	2b09      	cmp	r3, #9
 800d5dc:	d912      	bls.n	800d604 <_strtod_l+0x204>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e7c4      	b.n	800d56c <_strtod_l+0x16c>
 800d5e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5e8:	785a      	ldrb	r2, [r3, #1]
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	2a30      	cmp	r2, #48	@ 0x30
 800d5ee:	d0f8      	beq.n	800d5e2 <_strtod_l+0x1e2>
 800d5f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d5f4:	2b08      	cmp	r3, #8
 800d5f6:	f200 84d3 	bhi.w	800dfa0 <_strtod_l+0xba0>
 800d5fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5fe:	4681      	mov	r9, r0
 800d600:	2000      	movs	r0, #0
 800d602:	4605      	mov	r5, r0
 800d604:	3a30      	subs	r2, #48	@ 0x30
 800d606:	f100 0301 	add.w	r3, r0, #1
 800d60a:	d02a      	beq.n	800d662 <_strtod_l+0x262>
 800d60c:	4499      	add	r9, r3
 800d60e:	eb00 0c05 	add.w	ip, r0, r5
 800d612:	462b      	mov	r3, r5
 800d614:	210a      	movs	r1, #10
 800d616:	4563      	cmp	r3, ip
 800d618:	d10d      	bne.n	800d636 <_strtod_l+0x236>
 800d61a:	1c69      	adds	r1, r5, #1
 800d61c:	4401      	add	r1, r0
 800d61e:	4428      	add	r0, r5
 800d620:	2808      	cmp	r0, #8
 800d622:	dc16      	bgt.n	800d652 <_strtod_l+0x252>
 800d624:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d626:	230a      	movs	r3, #10
 800d628:	fb03 2300 	mla	r3, r3, r0, r2
 800d62c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d62e:	2300      	movs	r3, #0
 800d630:	e018      	b.n	800d664 <_strtod_l+0x264>
 800d632:	4638      	mov	r0, r7
 800d634:	e7da      	b.n	800d5ec <_strtod_l+0x1ec>
 800d636:	2b08      	cmp	r3, #8
 800d638:	f103 0301 	add.w	r3, r3, #1
 800d63c:	dc03      	bgt.n	800d646 <_strtod_l+0x246>
 800d63e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d640:	434e      	muls	r6, r1
 800d642:	960a      	str	r6, [sp, #40]	@ 0x28
 800d644:	e7e7      	b.n	800d616 <_strtod_l+0x216>
 800d646:	2b10      	cmp	r3, #16
 800d648:	bfde      	ittt	le
 800d64a:	9e08      	ldrle	r6, [sp, #32]
 800d64c:	434e      	mulle	r6, r1
 800d64e:	9608      	strle	r6, [sp, #32]
 800d650:	e7e1      	b.n	800d616 <_strtod_l+0x216>
 800d652:	280f      	cmp	r0, #15
 800d654:	dceb      	bgt.n	800d62e <_strtod_l+0x22e>
 800d656:	9808      	ldr	r0, [sp, #32]
 800d658:	230a      	movs	r3, #10
 800d65a:	fb03 2300 	mla	r3, r3, r0, r2
 800d65e:	9308      	str	r3, [sp, #32]
 800d660:	e7e5      	b.n	800d62e <_strtod_l+0x22e>
 800d662:	4629      	mov	r1, r5
 800d664:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d666:	1c50      	adds	r0, r2, #1
 800d668:	9019      	str	r0, [sp, #100]	@ 0x64
 800d66a:	7852      	ldrb	r2, [r2, #1]
 800d66c:	4618      	mov	r0, r3
 800d66e:	460d      	mov	r5, r1
 800d670:	e7b1      	b.n	800d5d6 <_strtod_l+0x1d6>
 800d672:	f04f 0900 	mov.w	r9, #0
 800d676:	2301      	movs	r3, #1
 800d678:	e77d      	b.n	800d576 <_strtod_l+0x176>
 800d67a:	f04f 0c00 	mov.w	ip, #0
 800d67e:	1ca2      	adds	r2, r4, #2
 800d680:	9219      	str	r2, [sp, #100]	@ 0x64
 800d682:	78a2      	ldrb	r2, [r4, #2]
 800d684:	e785      	b.n	800d592 <_strtod_l+0x192>
 800d686:	f04f 0c01 	mov.w	ip, #1
 800d68a:	e7f8      	b.n	800d67e <_strtod_l+0x27e>
 800d68c:	0800f768 	.word	0x0800f768
 800d690:	0800f750 	.word	0x0800f750
 800d694:	7ff00000 	.word	0x7ff00000
 800d698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d69a:	1c51      	adds	r1, r2, #1
 800d69c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d69e:	7852      	ldrb	r2, [r2, #1]
 800d6a0:	2a30      	cmp	r2, #48	@ 0x30
 800d6a2:	d0f9      	beq.n	800d698 <_strtod_l+0x298>
 800d6a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d6a8:	2908      	cmp	r1, #8
 800d6aa:	f63f af78 	bhi.w	800d59e <_strtod_l+0x19e>
 800d6ae:	3a30      	subs	r2, #48	@ 0x30
 800d6b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d6b6:	f04f 080a 	mov.w	r8, #10
 800d6ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6bc:	1c56      	adds	r6, r2, #1
 800d6be:	9619      	str	r6, [sp, #100]	@ 0x64
 800d6c0:	7852      	ldrb	r2, [r2, #1]
 800d6c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d6c6:	f1be 0f09 	cmp.w	lr, #9
 800d6ca:	d939      	bls.n	800d740 <_strtod_l+0x340>
 800d6cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d6ce:	1a76      	subs	r6, r6, r1
 800d6d0:	2e08      	cmp	r6, #8
 800d6d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d6d6:	dc03      	bgt.n	800d6e0 <_strtod_l+0x2e0>
 800d6d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d6da:	4588      	cmp	r8, r1
 800d6dc:	bfa8      	it	ge
 800d6de:	4688      	movge	r8, r1
 800d6e0:	f1bc 0f00 	cmp.w	ip, #0
 800d6e4:	d001      	beq.n	800d6ea <_strtod_l+0x2ea>
 800d6e6:	f1c8 0800 	rsb	r8, r8, #0
 800d6ea:	2d00      	cmp	r5, #0
 800d6ec:	d14e      	bne.n	800d78c <_strtod_l+0x38c>
 800d6ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6f0:	4308      	orrs	r0, r1
 800d6f2:	f47f aebe 	bne.w	800d472 <_strtod_l+0x72>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f47f aed6 	bne.w	800d4a8 <_strtod_l+0xa8>
 800d6fc:	2a69      	cmp	r2, #105	@ 0x69
 800d6fe:	d028      	beq.n	800d752 <_strtod_l+0x352>
 800d700:	dc25      	bgt.n	800d74e <_strtod_l+0x34e>
 800d702:	2a49      	cmp	r2, #73	@ 0x49
 800d704:	d025      	beq.n	800d752 <_strtod_l+0x352>
 800d706:	2a4e      	cmp	r2, #78	@ 0x4e
 800d708:	f47f aece 	bne.w	800d4a8 <_strtod_l+0xa8>
 800d70c:	499b      	ldr	r1, [pc, #620]	@ (800d97c <_strtod_l+0x57c>)
 800d70e:	a819      	add	r0, sp, #100	@ 0x64
 800d710:	f001 f9e2 	bl	800ead8 <__match>
 800d714:	2800      	cmp	r0, #0
 800d716:	f43f aec7 	beq.w	800d4a8 <_strtod_l+0xa8>
 800d71a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b28      	cmp	r3, #40	@ 0x28
 800d720:	d12e      	bne.n	800d780 <_strtod_l+0x380>
 800d722:	4997      	ldr	r1, [pc, #604]	@ (800d980 <_strtod_l+0x580>)
 800d724:	aa1c      	add	r2, sp, #112	@ 0x70
 800d726:	a819      	add	r0, sp, #100	@ 0x64
 800d728:	f001 f9ea 	bl	800eb00 <__hexnan>
 800d72c:	2805      	cmp	r0, #5
 800d72e:	d127      	bne.n	800d780 <_strtod_l+0x380>
 800d730:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d732:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d736:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d73a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d73e:	e698      	b.n	800d472 <_strtod_l+0x72>
 800d740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d742:	fb08 2101 	mla	r1, r8, r1, r2
 800d746:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d74a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d74c:	e7b5      	b.n	800d6ba <_strtod_l+0x2ba>
 800d74e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d750:	e7da      	b.n	800d708 <_strtod_l+0x308>
 800d752:	498c      	ldr	r1, [pc, #560]	@ (800d984 <_strtod_l+0x584>)
 800d754:	a819      	add	r0, sp, #100	@ 0x64
 800d756:	f001 f9bf 	bl	800ead8 <__match>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	f43f aea4 	beq.w	800d4a8 <_strtod_l+0xa8>
 800d760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d762:	4989      	ldr	r1, [pc, #548]	@ (800d988 <_strtod_l+0x588>)
 800d764:	3b01      	subs	r3, #1
 800d766:	a819      	add	r0, sp, #100	@ 0x64
 800d768:	9319      	str	r3, [sp, #100]	@ 0x64
 800d76a:	f001 f9b5 	bl	800ead8 <__match>
 800d76e:	b910      	cbnz	r0, 800d776 <_strtod_l+0x376>
 800d770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d772:	3301      	adds	r3, #1
 800d774:	9319      	str	r3, [sp, #100]	@ 0x64
 800d776:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d998 <_strtod_l+0x598>
 800d77a:	f04f 0a00 	mov.w	sl, #0
 800d77e:	e678      	b.n	800d472 <_strtod_l+0x72>
 800d780:	4882      	ldr	r0, [pc, #520]	@ (800d98c <_strtod_l+0x58c>)
 800d782:	f000 fee5 	bl	800e550 <nan>
 800d786:	ec5b ab10 	vmov	sl, fp, d0
 800d78a:	e672      	b.n	800d472 <_strtod_l+0x72>
 800d78c:	eba8 0309 	sub.w	r3, r8, r9
 800d790:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d792:	9309      	str	r3, [sp, #36]	@ 0x24
 800d794:	2f00      	cmp	r7, #0
 800d796:	bf08      	it	eq
 800d798:	462f      	moveq	r7, r5
 800d79a:	2d10      	cmp	r5, #16
 800d79c:	462c      	mov	r4, r5
 800d79e:	bfa8      	it	ge
 800d7a0:	2410      	movge	r4, #16
 800d7a2:	f7f2 fedf 	bl	8000564 <__aeabi_ui2d>
 800d7a6:	2d09      	cmp	r5, #9
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	468b      	mov	fp, r1
 800d7ac:	dc13      	bgt.n	800d7d6 <_strtod_l+0x3d6>
 800d7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f43f ae5e 	beq.w	800d472 <_strtod_l+0x72>
 800d7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b8:	dd78      	ble.n	800d8ac <_strtod_l+0x4ac>
 800d7ba:	2b16      	cmp	r3, #22
 800d7bc:	dc5f      	bgt.n	800d87e <_strtod_l+0x47e>
 800d7be:	4974      	ldr	r1, [pc, #464]	@ (800d990 <_strtod_l+0x590>)
 800d7c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7c8:	4652      	mov	r2, sl
 800d7ca:	465b      	mov	r3, fp
 800d7cc:	f7f2 ff44 	bl	8000658 <__aeabi_dmul>
 800d7d0:	4682      	mov	sl, r0
 800d7d2:	468b      	mov	fp, r1
 800d7d4:	e64d      	b.n	800d472 <_strtod_l+0x72>
 800d7d6:	4b6e      	ldr	r3, [pc, #440]	@ (800d990 <_strtod_l+0x590>)
 800d7d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d7e0:	f7f2 ff3a 	bl	8000658 <__aeabi_dmul>
 800d7e4:	4682      	mov	sl, r0
 800d7e6:	9808      	ldr	r0, [sp, #32]
 800d7e8:	468b      	mov	fp, r1
 800d7ea:	f7f2 febb 	bl	8000564 <__aeabi_ui2d>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4650      	mov	r0, sl
 800d7f4:	4659      	mov	r1, fp
 800d7f6:	f7f2 fd79 	bl	80002ec <__adddf3>
 800d7fa:	2d0f      	cmp	r5, #15
 800d7fc:	4682      	mov	sl, r0
 800d7fe:	468b      	mov	fp, r1
 800d800:	ddd5      	ble.n	800d7ae <_strtod_l+0x3ae>
 800d802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d804:	1b2c      	subs	r4, r5, r4
 800d806:	441c      	add	r4, r3
 800d808:	2c00      	cmp	r4, #0
 800d80a:	f340 8096 	ble.w	800d93a <_strtod_l+0x53a>
 800d80e:	f014 030f 	ands.w	r3, r4, #15
 800d812:	d00a      	beq.n	800d82a <_strtod_l+0x42a>
 800d814:	495e      	ldr	r1, [pc, #376]	@ (800d990 <_strtod_l+0x590>)
 800d816:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d81a:	4652      	mov	r2, sl
 800d81c:	465b      	mov	r3, fp
 800d81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d822:	f7f2 ff19 	bl	8000658 <__aeabi_dmul>
 800d826:	4682      	mov	sl, r0
 800d828:	468b      	mov	fp, r1
 800d82a:	f034 040f 	bics.w	r4, r4, #15
 800d82e:	d073      	beq.n	800d918 <_strtod_l+0x518>
 800d830:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d834:	dd48      	ble.n	800d8c8 <_strtod_l+0x4c8>
 800d836:	2400      	movs	r4, #0
 800d838:	46a0      	mov	r8, r4
 800d83a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d83c:	46a1      	mov	r9, r4
 800d83e:	9a05      	ldr	r2, [sp, #20]
 800d840:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d998 <_strtod_l+0x598>
 800d844:	2322      	movs	r3, #34	@ 0x22
 800d846:	6013      	str	r3, [r2, #0]
 800d848:	f04f 0a00 	mov.w	sl, #0
 800d84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f43f ae0f 	beq.w	800d472 <_strtod_l+0x72>
 800d854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d856:	9805      	ldr	r0, [sp, #20]
 800d858:	f7ff f942 	bl	800cae0 <_Bfree>
 800d85c:	9805      	ldr	r0, [sp, #20]
 800d85e:	4649      	mov	r1, r9
 800d860:	f7ff f93e 	bl	800cae0 <_Bfree>
 800d864:	9805      	ldr	r0, [sp, #20]
 800d866:	4641      	mov	r1, r8
 800d868:	f7ff f93a 	bl	800cae0 <_Bfree>
 800d86c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d86e:	9805      	ldr	r0, [sp, #20]
 800d870:	f7ff f936 	bl	800cae0 <_Bfree>
 800d874:	9805      	ldr	r0, [sp, #20]
 800d876:	4621      	mov	r1, r4
 800d878:	f7ff f932 	bl	800cae0 <_Bfree>
 800d87c:	e5f9      	b.n	800d472 <_strtod_l+0x72>
 800d87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d880:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d884:	4293      	cmp	r3, r2
 800d886:	dbbc      	blt.n	800d802 <_strtod_l+0x402>
 800d888:	4c41      	ldr	r4, [pc, #260]	@ (800d990 <_strtod_l+0x590>)
 800d88a:	f1c5 050f 	rsb	r5, r5, #15
 800d88e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d892:	4652      	mov	r2, sl
 800d894:	465b      	mov	r3, fp
 800d896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d89a:	f7f2 fedd 	bl	8000658 <__aeabi_dmul>
 800d89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a0:	1b5d      	subs	r5, r3, r5
 800d8a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d8a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8aa:	e78f      	b.n	800d7cc <_strtod_l+0x3cc>
 800d8ac:	3316      	adds	r3, #22
 800d8ae:	dba8      	blt.n	800d802 <_strtod_l+0x402>
 800d8b0:	4b37      	ldr	r3, [pc, #220]	@ (800d990 <_strtod_l+0x590>)
 800d8b2:	eba9 0808 	sub.w	r8, r9, r8
 800d8b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d8ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d8be:	4650      	mov	r0, sl
 800d8c0:	4659      	mov	r1, fp
 800d8c2:	f7f2 fff3 	bl	80008ac <__aeabi_ddiv>
 800d8c6:	e783      	b.n	800d7d0 <_strtod_l+0x3d0>
 800d8c8:	4b32      	ldr	r3, [pc, #200]	@ (800d994 <_strtod_l+0x594>)
 800d8ca:	9308      	str	r3, [sp, #32]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	1124      	asrs	r4, r4, #4
 800d8d0:	4650      	mov	r0, sl
 800d8d2:	4659      	mov	r1, fp
 800d8d4:	461e      	mov	r6, r3
 800d8d6:	2c01      	cmp	r4, #1
 800d8d8:	dc21      	bgt.n	800d91e <_strtod_l+0x51e>
 800d8da:	b10b      	cbz	r3, 800d8e0 <_strtod_l+0x4e0>
 800d8dc:	4682      	mov	sl, r0
 800d8de:	468b      	mov	fp, r1
 800d8e0:	492c      	ldr	r1, [pc, #176]	@ (800d994 <_strtod_l+0x594>)
 800d8e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d8e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d8ea:	4652      	mov	r2, sl
 800d8ec:	465b      	mov	r3, fp
 800d8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8f2:	f7f2 feb1 	bl	8000658 <__aeabi_dmul>
 800d8f6:	4b28      	ldr	r3, [pc, #160]	@ (800d998 <_strtod_l+0x598>)
 800d8f8:	460a      	mov	r2, r1
 800d8fa:	400b      	ands	r3, r1
 800d8fc:	4927      	ldr	r1, [pc, #156]	@ (800d99c <_strtod_l+0x59c>)
 800d8fe:	428b      	cmp	r3, r1
 800d900:	4682      	mov	sl, r0
 800d902:	d898      	bhi.n	800d836 <_strtod_l+0x436>
 800d904:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d908:	428b      	cmp	r3, r1
 800d90a:	bf86      	itte	hi
 800d90c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d9a0 <_strtod_l+0x5a0>
 800d910:	f04f 3aff 	movhi.w	sl, #4294967295
 800d914:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d918:	2300      	movs	r3, #0
 800d91a:	9308      	str	r3, [sp, #32]
 800d91c:	e07a      	b.n	800da14 <_strtod_l+0x614>
 800d91e:	07e2      	lsls	r2, r4, #31
 800d920:	d505      	bpl.n	800d92e <_strtod_l+0x52e>
 800d922:	9b08      	ldr	r3, [sp, #32]
 800d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d928:	f7f2 fe96 	bl	8000658 <__aeabi_dmul>
 800d92c:	2301      	movs	r3, #1
 800d92e:	9a08      	ldr	r2, [sp, #32]
 800d930:	3208      	adds	r2, #8
 800d932:	3601      	adds	r6, #1
 800d934:	1064      	asrs	r4, r4, #1
 800d936:	9208      	str	r2, [sp, #32]
 800d938:	e7cd      	b.n	800d8d6 <_strtod_l+0x4d6>
 800d93a:	d0ed      	beq.n	800d918 <_strtod_l+0x518>
 800d93c:	4264      	negs	r4, r4
 800d93e:	f014 020f 	ands.w	r2, r4, #15
 800d942:	d00a      	beq.n	800d95a <_strtod_l+0x55a>
 800d944:	4b12      	ldr	r3, [pc, #72]	@ (800d990 <_strtod_l+0x590>)
 800d946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d94a:	4650      	mov	r0, sl
 800d94c:	4659      	mov	r1, fp
 800d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d952:	f7f2 ffab 	bl	80008ac <__aeabi_ddiv>
 800d956:	4682      	mov	sl, r0
 800d958:	468b      	mov	fp, r1
 800d95a:	1124      	asrs	r4, r4, #4
 800d95c:	d0dc      	beq.n	800d918 <_strtod_l+0x518>
 800d95e:	2c1f      	cmp	r4, #31
 800d960:	dd20      	ble.n	800d9a4 <_strtod_l+0x5a4>
 800d962:	2400      	movs	r4, #0
 800d964:	46a0      	mov	r8, r4
 800d966:	940a      	str	r4, [sp, #40]	@ 0x28
 800d968:	46a1      	mov	r9, r4
 800d96a:	9a05      	ldr	r2, [sp, #20]
 800d96c:	2322      	movs	r3, #34	@ 0x22
 800d96e:	f04f 0a00 	mov.w	sl, #0
 800d972:	f04f 0b00 	mov.w	fp, #0
 800d976:	6013      	str	r3, [r2, #0]
 800d978:	e768      	b.n	800d84c <_strtod_l+0x44c>
 800d97a:	bf00      	nop
 800d97c:	0800f53d 	.word	0x0800f53d
 800d980:	0800f754 	.word	0x0800f754
 800d984:	0800f535 	.word	0x0800f535
 800d988:	0800f56c 	.word	0x0800f56c
 800d98c:	0800f8fd 	.word	0x0800f8fd
 800d990:	0800f688 	.word	0x0800f688
 800d994:	0800f660 	.word	0x0800f660
 800d998:	7ff00000 	.word	0x7ff00000
 800d99c:	7ca00000 	.word	0x7ca00000
 800d9a0:	7fefffff 	.word	0x7fefffff
 800d9a4:	f014 0310 	ands.w	r3, r4, #16
 800d9a8:	bf18      	it	ne
 800d9aa:	236a      	movne	r3, #106	@ 0x6a
 800d9ac:	4ea9      	ldr	r6, [pc, #676]	@ (800dc54 <_strtod_l+0x854>)
 800d9ae:	9308      	str	r3, [sp, #32]
 800d9b0:	4650      	mov	r0, sl
 800d9b2:	4659      	mov	r1, fp
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	07e2      	lsls	r2, r4, #31
 800d9b8:	d504      	bpl.n	800d9c4 <_strtod_l+0x5c4>
 800d9ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9be:	f7f2 fe4b 	bl	8000658 <__aeabi_dmul>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	1064      	asrs	r4, r4, #1
 800d9c6:	f106 0608 	add.w	r6, r6, #8
 800d9ca:	d1f4      	bne.n	800d9b6 <_strtod_l+0x5b6>
 800d9cc:	b10b      	cbz	r3, 800d9d2 <_strtod_l+0x5d2>
 800d9ce:	4682      	mov	sl, r0
 800d9d0:	468b      	mov	fp, r1
 800d9d2:	9b08      	ldr	r3, [sp, #32]
 800d9d4:	b1b3      	cbz	r3, 800da04 <_strtod_l+0x604>
 800d9d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d9da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	4659      	mov	r1, fp
 800d9e2:	dd0f      	ble.n	800da04 <_strtod_l+0x604>
 800d9e4:	2b1f      	cmp	r3, #31
 800d9e6:	dd55      	ble.n	800da94 <_strtod_l+0x694>
 800d9e8:	2b34      	cmp	r3, #52	@ 0x34
 800d9ea:	bfde      	ittt	le
 800d9ec:	f04f 33ff 	movle.w	r3, #4294967295
 800d9f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d9f4:	4093      	lslle	r3, r2
 800d9f6:	f04f 0a00 	mov.w	sl, #0
 800d9fa:	bfcc      	ite	gt
 800d9fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da00:	ea03 0b01 	andle.w	fp, r3, r1
 800da04:	2200      	movs	r2, #0
 800da06:	2300      	movs	r3, #0
 800da08:	4650      	mov	r0, sl
 800da0a:	4659      	mov	r1, fp
 800da0c:	f7f3 f88c 	bl	8000b28 <__aeabi_dcmpeq>
 800da10:	2800      	cmp	r0, #0
 800da12:	d1a6      	bne.n	800d962 <_strtod_l+0x562>
 800da14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800da1a:	9805      	ldr	r0, [sp, #20]
 800da1c:	462b      	mov	r3, r5
 800da1e:	463a      	mov	r2, r7
 800da20:	f7ff f8c6 	bl	800cbb0 <__s2b>
 800da24:	900a      	str	r0, [sp, #40]	@ 0x28
 800da26:	2800      	cmp	r0, #0
 800da28:	f43f af05 	beq.w	800d836 <_strtod_l+0x436>
 800da2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da2e:	2a00      	cmp	r2, #0
 800da30:	eba9 0308 	sub.w	r3, r9, r8
 800da34:	bfa8      	it	ge
 800da36:	2300      	movge	r3, #0
 800da38:	9312      	str	r3, [sp, #72]	@ 0x48
 800da3a:	2400      	movs	r4, #0
 800da3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da40:	9316      	str	r3, [sp, #88]	@ 0x58
 800da42:	46a0      	mov	r8, r4
 800da44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da46:	9805      	ldr	r0, [sp, #20]
 800da48:	6859      	ldr	r1, [r3, #4]
 800da4a:	f7ff f809 	bl	800ca60 <_Balloc>
 800da4e:	4681      	mov	r9, r0
 800da50:	2800      	cmp	r0, #0
 800da52:	f43f aef4 	beq.w	800d83e <_strtod_l+0x43e>
 800da56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da58:	691a      	ldr	r2, [r3, #16]
 800da5a:	3202      	adds	r2, #2
 800da5c:	f103 010c 	add.w	r1, r3, #12
 800da60:	0092      	lsls	r2, r2, #2
 800da62:	300c      	adds	r0, #12
 800da64:	f7fe f89b 	bl	800bb9e <memcpy>
 800da68:	ec4b ab10 	vmov	d0, sl, fp
 800da6c:	9805      	ldr	r0, [sp, #20]
 800da6e:	aa1c      	add	r2, sp, #112	@ 0x70
 800da70:	a91b      	add	r1, sp, #108	@ 0x6c
 800da72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800da76:	f7ff fbd7 	bl	800d228 <__d2b>
 800da7a:	901a      	str	r0, [sp, #104]	@ 0x68
 800da7c:	2800      	cmp	r0, #0
 800da7e:	f43f aede 	beq.w	800d83e <_strtod_l+0x43e>
 800da82:	9805      	ldr	r0, [sp, #20]
 800da84:	2101      	movs	r1, #1
 800da86:	f7ff f929 	bl	800ccdc <__i2b>
 800da8a:	4680      	mov	r8, r0
 800da8c:	b948      	cbnz	r0, 800daa2 <_strtod_l+0x6a2>
 800da8e:	f04f 0800 	mov.w	r8, #0
 800da92:	e6d4      	b.n	800d83e <_strtod_l+0x43e>
 800da94:	f04f 32ff 	mov.w	r2, #4294967295
 800da98:	fa02 f303 	lsl.w	r3, r2, r3
 800da9c:	ea03 0a0a 	and.w	sl, r3, sl
 800daa0:	e7b0      	b.n	800da04 <_strtod_l+0x604>
 800daa2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800daa4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800daa6:	2d00      	cmp	r5, #0
 800daa8:	bfab      	itete	ge
 800daaa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800daac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800daae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dab0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dab2:	bfac      	ite	ge
 800dab4:	18ef      	addge	r7, r5, r3
 800dab6:	1b5e      	sublt	r6, r3, r5
 800dab8:	9b08      	ldr	r3, [sp, #32]
 800daba:	1aed      	subs	r5, r5, r3
 800dabc:	4415      	add	r5, r2
 800dabe:	4b66      	ldr	r3, [pc, #408]	@ (800dc58 <_strtod_l+0x858>)
 800dac0:	3d01      	subs	r5, #1
 800dac2:	429d      	cmp	r5, r3
 800dac4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dac8:	da50      	bge.n	800db6c <_strtod_l+0x76c>
 800daca:	1b5b      	subs	r3, r3, r5
 800dacc:	2b1f      	cmp	r3, #31
 800dace:	eba2 0203 	sub.w	r2, r2, r3
 800dad2:	f04f 0101 	mov.w	r1, #1
 800dad6:	dc3d      	bgt.n	800db54 <_strtod_l+0x754>
 800dad8:	fa01 f303 	lsl.w	r3, r1, r3
 800dadc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dade:	2300      	movs	r3, #0
 800dae0:	9310      	str	r3, [sp, #64]	@ 0x40
 800dae2:	18bd      	adds	r5, r7, r2
 800dae4:	9b08      	ldr	r3, [sp, #32]
 800dae6:	42af      	cmp	r7, r5
 800dae8:	4416      	add	r6, r2
 800daea:	441e      	add	r6, r3
 800daec:	463b      	mov	r3, r7
 800daee:	bfa8      	it	ge
 800daf0:	462b      	movge	r3, r5
 800daf2:	42b3      	cmp	r3, r6
 800daf4:	bfa8      	it	ge
 800daf6:	4633      	movge	r3, r6
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	bfc2      	ittt	gt
 800dafc:	1aed      	subgt	r5, r5, r3
 800dafe:	1af6      	subgt	r6, r6, r3
 800db00:	1aff      	subgt	r7, r7, r3
 800db02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db04:	2b00      	cmp	r3, #0
 800db06:	dd16      	ble.n	800db36 <_strtod_l+0x736>
 800db08:	4641      	mov	r1, r8
 800db0a:	9805      	ldr	r0, [sp, #20]
 800db0c:	461a      	mov	r2, r3
 800db0e:	f7ff f9a5 	bl	800ce5c <__pow5mult>
 800db12:	4680      	mov	r8, r0
 800db14:	2800      	cmp	r0, #0
 800db16:	d0ba      	beq.n	800da8e <_strtod_l+0x68e>
 800db18:	4601      	mov	r1, r0
 800db1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db1c:	9805      	ldr	r0, [sp, #20]
 800db1e:	f7ff f8f3 	bl	800cd08 <__multiply>
 800db22:	900e      	str	r0, [sp, #56]	@ 0x38
 800db24:	2800      	cmp	r0, #0
 800db26:	f43f ae8a 	beq.w	800d83e <_strtod_l+0x43e>
 800db2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db2c:	9805      	ldr	r0, [sp, #20]
 800db2e:	f7fe ffd7 	bl	800cae0 <_Bfree>
 800db32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db34:	931a      	str	r3, [sp, #104]	@ 0x68
 800db36:	2d00      	cmp	r5, #0
 800db38:	dc1d      	bgt.n	800db76 <_strtod_l+0x776>
 800db3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	dd23      	ble.n	800db88 <_strtod_l+0x788>
 800db40:	4649      	mov	r1, r9
 800db42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800db44:	9805      	ldr	r0, [sp, #20]
 800db46:	f7ff f989 	bl	800ce5c <__pow5mult>
 800db4a:	4681      	mov	r9, r0
 800db4c:	b9e0      	cbnz	r0, 800db88 <_strtod_l+0x788>
 800db4e:	f04f 0900 	mov.w	r9, #0
 800db52:	e674      	b.n	800d83e <_strtod_l+0x43e>
 800db54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800db58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800db5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800db60:	35e2      	adds	r5, #226	@ 0xe2
 800db62:	fa01 f305 	lsl.w	r3, r1, r5
 800db66:	9310      	str	r3, [sp, #64]	@ 0x40
 800db68:	9113      	str	r1, [sp, #76]	@ 0x4c
 800db6a:	e7ba      	b.n	800dae2 <_strtod_l+0x6e2>
 800db6c:	2300      	movs	r3, #0
 800db6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800db70:	2301      	movs	r3, #1
 800db72:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db74:	e7b5      	b.n	800dae2 <_strtod_l+0x6e2>
 800db76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db78:	9805      	ldr	r0, [sp, #20]
 800db7a:	462a      	mov	r2, r5
 800db7c:	f7ff f9c8 	bl	800cf10 <__lshift>
 800db80:	901a      	str	r0, [sp, #104]	@ 0x68
 800db82:	2800      	cmp	r0, #0
 800db84:	d1d9      	bne.n	800db3a <_strtod_l+0x73a>
 800db86:	e65a      	b.n	800d83e <_strtod_l+0x43e>
 800db88:	2e00      	cmp	r6, #0
 800db8a:	dd07      	ble.n	800db9c <_strtod_l+0x79c>
 800db8c:	4649      	mov	r1, r9
 800db8e:	9805      	ldr	r0, [sp, #20]
 800db90:	4632      	mov	r2, r6
 800db92:	f7ff f9bd 	bl	800cf10 <__lshift>
 800db96:	4681      	mov	r9, r0
 800db98:	2800      	cmp	r0, #0
 800db9a:	d0d8      	beq.n	800db4e <_strtod_l+0x74e>
 800db9c:	2f00      	cmp	r7, #0
 800db9e:	dd08      	ble.n	800dbb2 <_strtod_l+0x7b2>
 800dba0:	4641      	mov	r1, r8
 800dba2:	9805      	ldr	r0, [sp, #20]
 800dba4:	463a      	mov	r2, r7
 800dba6:	f7ff f9b3 	bl	800cf10 <__lshift>
 800dbaa:	4680      	mov	r8, r0
 800dbac:	2800      	cmp	r0, #0
 800dbae:	f43f ae46 	beq.w	800d83e <_strtod_l+0x43e>
 800dbb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbb4:	9805      	ldr	r0, [sp, #20]
 800dbb6:	464a      	mov	r2, r9
 800dbb8:	f7ff fa32 	bl	800d020 <__mdiff>
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	f43f ae3d 	beq.w	800d83e <_strtod_l+0x43e>
 800dbc4:	68c3      	ldr	r3, [r0, #12]
 800dbc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbc8:	2300      	movs	r3, #0
 800dbca:	60c3      	str	r3, [r0, #12]
 800dbcc:	4641      	mov	r1, r8
 800dbce:	f7ff fa0b 	bl	800cfe8 <__mcmp>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	da46      	bge.n	800dc64 <_strtod_l+0x864>
 800dbd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbd8:	ea53 030a 	orrs.w	r3, r3, sl
 800dbdc:	d16c      	bne.n	800dcb8 <_strtod_l+0x8b8>
 800dbde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d168      	bne.n	800dcb8 <_strtod_l+0x8b8>
 800dbe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbea:	0d1b      	lsrs	r3, r3, #20
 800dbec:	051b      	lsls	r3, r3, #20
 800dbee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dbf2:	d961      	bls.n	800dcb8 <_strtod_l+0x8b8>
 800dbf4:	6963      	ldr	r3, [r4, #20]
 800dbf6:	b913      	cbnz	r3, 800dbfe <_strtod_l+0x7fe>
 800dbf8:	6923      	ldr	r3, [r4, #16]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	dd5c      	ble.n	800dcb8 <_strtod_l+0x8b8>
 800dbfe:	4621      	mov	r1, r4
 800dc00:	2201      	movs	r2, #1
 800dc02:	9805      	ldr	r0, [sp, #20]
 800dc04:	f7ff f984 	bl	800cf10 <__lshift>
 800dc08:	4641      	mov	r1, r8
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	f7ff f9ec 	bl	800cfe8 <__mcmp>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	dd51      	ble.n	800dcb8 <_strtod_l+0x8b8>
 800dc14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc18:	9a08      	ldr	r2, [sp, #32]
 800dc1a:	0d1b      	lsrs	r3, r3, #20
 800dc1c:	051b      	lsls	r3, r3, #20
 800dc1e:	2a00      	cmp	r2, #0
 800dc20:	d06b      	beq.n	800dcfa <_strtod_l+0x8fa>
 800dc22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc26:	d868      	bhi.n	800dcfa <_strtod_l+0x8fa>
 800dc28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dc2c:	f67f ae9d 	bls.w	800d96a <_strtod_l+0x56a>
 800dc30:	4b0a      	ldr	r3, [pc, #40]	@ (800dc5c <_strtod_l+0x85c>)
 800dc32:	4650      	mov	r0, sl
 800dc34:	4659      	mov	r1, fp
 800dc36:	2200      	movs	r2, #0
 800dc38:	f7f2 fd0e 	bl	8000658 <__aeabi_dmul>
 800dc3c:	4b08      	ldr	r3, [pc, #32]	@ (800dc60 <_strtod_l+0x860>)
 800dc3e:	400b      	ands	r3, r1
 800dc40:	4682      	mov	sl, r0
 800dc42:	468b      	mov	fp, r1
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f47f ae05 	bne.w	800d854 <_strtod_l+0x454>
 800dc4a:	9a05      	ldr	r2, [sp, #20]
 800dc4c:	2322      	movs	r3, #34	@ 0x22
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	e600      	b.n	800d854 <_strtod_l+0x454>
 800dc52:	bf00      	nop
 800dc54:	0800f780 	.word	0x0800f780
 800dc58:	fffffc02 	.word	0xfffffc02
 800dc5c:	39500000 	.word	0x39500000
 800dc60:	7ff00000 	.word	0x7ff00000
 800dc64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dc68:	d165      	bne.n	800dd36 <_strtod_l+0x936>
 800dc6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc70:	b35a      	cbz	r2, 800dcca <_strtod_l+0x8ca>
 800dc72:	4a9f      	ldr	r2, [pc, #636]	@ (800def0 <_strtod_l+0xaf0>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d12b      	bne.n	800dcd0 <_strtod_l+0x8d0>
 800dc78:	9b08      	ldr	r3, [sp, #32]
 800dc7a:	4651      	mov	r1, sl
 800dc7c:	b303      	cbz	r3, 800dcc0 <_strtod_l+0x8c0>
 800dc7e:	4b9d      	ldr	r3, [pc, #628]	@ (800def4 <_strtod_l+0xaf4>)
 800dc80:	465a      	mov	r2, fp
 800dc82:	4013      	ands	r3, r2
 800dc84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dc88:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8c:	d81b      	bhi.n	800dcc6 <_strtod_l+0x8c6>
 800dc8e:	0d1b      	lsrs	r3, r3, #20
 800dc90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dc94:	fa02 f303 	lsl.w	r3, r2, r3
 800dc98:	4299      	cmp	r1, r3
 800dc9a:	d119      	bne.n	800dcd0 <_strtod_l+0x8d0>
 800dc9c:	4b96      	ldr	r3, [pc, #600]	@ (800def8 <_strtod_l+0xaf8>)
 800dc9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d102      	bne.n	800dcaa <_strtod_l+0x8aa>
 800dca4:	3101      	adds	r1, #1
 800dca6:	f43f adca 	beq.w	800d83e <_strtod_l+0x43e>
 800dcaa:	4b92      	ldr	r3, [pc, #584]	@ (800def4 <_strtod_l+0xaf4>)
 800dcac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcae:	401a      	ands	r2, r3
 800dcb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dcb4:	f04f 0a00 	mov.w	sl, #0
 800dcb8:	9b08      	ldr	r3, [sp, #32]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1b8      	bne.n	800dc30 <_strtod_l+0x830>
 800dcbe:	e5c9      	b.n	800d854 <_strtod_l+0x454>
 800dcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc4:	e7e8      	b.n	800dc98 <_strtod_l+0x898>
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	e7e6      	b.n	800dc98 <_strtod_l+0x898>
 800dcca:	ea53 030a 	orrs.w	r3, r3, sl
 800dcce:	d0a1      	beq.n	800dc14 <_strtod_l+0x814>
 800dcd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dcd2:	b1db      	cbz	r3, 800dd0c <_strtod_l+0x90c>
 800dcd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcd6:	4213      	tst	r3, r2
 800dcd8:	d0ee      	beq.n	800dcb8 <_strtod_l+0x8b8>
 800dcda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcdc:	9a08      	ldr	r2, [sp, #32]
 800dcde:	4650      	mov	r0, sl
 800dce0:	4659      	mov	r1, fp
 800dce2:	b1bb      	cbz	r3, 800dd14 <_strtod_l+0x914>
 800dce4:	f7ff fb6e 	bl	800d3c4 <sulp>
 800dce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcec:	ec53 2b10 	vmov	r2, r3, d0
 800dcf0:	f7f2 fafc 	bl	80002ec <__adddf3>
 800dcf4:	4682      	mov	sl, r0
 800dcf6:	468b      	mov	fp, r1
 800dcf8:	e7de      	b.n	800dcb8 <_strtod_l+0x8b8>
 800dcfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dcfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd06:	f04f 3aff 	mov.w	sl, #4294967295
 800dd0a:	e7d5      	b.n	800dcb8 <_strtod_l+0x8b8>
 800dd0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd0e:	ea13 0f0a 	tst.w	r3, sl
 800dd12:	e7e1      	b.n	800dcd8 <_strtod_l+0x8d8>
 800dd14:	f7ff fb56 	bl	800d3c4 <sulp>
 800dd18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd1c:	ec53 2b10 	vmov	r2, r3, d0
 800dd20:	f7f2 fae2 	bl	80002e8 <__aeabi_dsub>
 800dd24:	2200      	movs	r2, #0
 800dd26:	2300      	movs	r3, #0
 800dd28:	4682      	mov	sl, r0
 800dd2a:	468b      	mov	fp, r1
 800dd2c:	f7f2 fefc 	bl	8000b28 <__aeabi_dcmpeq>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d0c1      	beq.n	800dcb8 <_strtod_l+0x8b8>
 800dd34:	e619      	b.n	800d96a <_strtod_l+0x56a>
 800dd36:	4641      	mov	r1, r8
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f7ff facd 	bl	800d2d8 <__ratio>
 800dd3e:	ec57 6b10 	vmov	r6, r7, d0
 800dd42:	2200      	movs	r2, #0
 800dd44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd48:	4630      	mov	r0, r6
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	f7f2 ff00 	bl	8000b50 <__aeabi_dcmple>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d06f      	beq.n	800de34 <_strtod_l+0xa34>
 800dd54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d17a      	bne.n	800de50 <_strtod_l+0xa50>
 800dd5a:	f1ba 0f00 	cmp.w	sl, #0
 800dd5e:	d158      	bne.n	800de12 <_strtod_l+0xa12>
 800dd60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d15a      	bne.n	800de20 <_strtod_l+0xa20>
 800dd6a:	4b64      	ldr	r3, [pc, #400]	@ (800defc <_strtod_l+0xafc>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	4630      	mov	r0, r6
 800dd70:	4639      	mov	r1, r7
 800dd72:	f7f2 fee3 	bl	8000b3c <__aeabi_dcmplt>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d159      	bne.n	800de2e <_strtod_l+0xa2e>
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	4639      	mov	r1, r7
 800dd7e:	4b60      	ldr	r3, [pc, #384]	@ (800df00 <_strtod_l+0xb00>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	f7f2 fc69 	bl	8000658 <__aeabi_dmul>
 800dd86:	4606      	mov	r6, r0
 800dd88:	460f      	mov	r7, r1
 800dd8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dd8e:	9606      	str	r6, [sp, #24]
 800dd90:	9307      	str	r3, [sp, #28]
 800dd92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd96:	4d57      	ldr	r5, [pc, #348]	@ (800def4 <_strtod_l+0xaf4>)
 800dd98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dd9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd9e:	401d      	ands	r5, r3
 800dda0:	4b58      	ldr	r3, [pc, #352]	@ (800df04 <_strtod_l+0xb04>)
 800dda2:	429d      	cmp	r5, r3
 800dda4:	f040 80b2 	bne.w	800df0c <_strtod_l+0xb0c>
 800dda8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ddae:	ec4b ab10 	vmov	d0, sl, fp
 800ddb2:	f7ff f9c9 	bl	800d148 <__ulp>
 800ddb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddba:	ec51 0b10 	vmov	r0, r1, d0
 800ddbe:	f7f2 fc4b 	bl	8000658 <__aeabi_dmul>
 800ddc2:	4652      	mov	r2, sl
 800ddc4:	465b      	mov	r3, fp
 800ddc6:	f7f2 fa91 	bl	80002ec <__adddf3>
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4949      	ldr	r1, [pc, #292]	@ (800def4 <_strtod_l+0xaf4>)
 800ddce:	4a4e      	ldr	r2, [pc, #312]	@ (800df08 <_strtod_l+0xb08>)
 800ddd0:	4019      	ands	r1, r3
 800ddd2:	4291      	cmp	r1, r2
 800ddd4:	4682      	mov	sl, r0
 800ddd6:	d942      	bls.n	800de5e <_strtod_l+0xa5e>
 800ddd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ddda:	4b47      	ldr	r3, [pc, #284]	@ (800def8 <_strtod_l+0xaf8>)
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d103      	bne.n	800dde8 <_strtod_l+0x9e8>
 800dde0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dde2:	3301      	adds	r3, #1
 800dde4:	f43f ad2b 	beq.w	800d83e <_strtod_l+0x43e>
 800dde8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800def8 <_strtod_l+0xaf8>
 800ddec:	f04f 3aff 	mov.w	sl, #4294967295
 800ddf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddf2:	9805      	ldr	r0, [sp, #20]
 800ddf4:	f7fe fe74 	bl	800cae0 <_Bfree>
 800ddf8:	9805      	ldr	r0, [sp, #20]
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	f7fe fe70 	bl	800cae0 <_Bfree>
 800de00:	9805      	ldr	r0, [sp, #20]
 800de02:	4641      	mov	r1, r8
 800de04:	f7fe fe6c 	bl	800cae0 <_Bfree>
 800de08:	9805      	ldr	r0, [sp, #20]
 800de0a:	4621      	mov	r1, r4
 800de0c:	f7fe fe68 	bl	800cae0 <_Bfree>
 800de10:	e618      	b.n	800da44 <_strtod_l+0x644>
 800de12:	f1ba 0f01 	cmp.w	sl, #1
 800de16:	d103      	bne.n	800de20 <_strtod_l+0xa20>
 800de18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f43f ada5 	beq.w	800d96a <_strtod_l+0x56a>
 800de20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ded0 <_strtod_l+0xad0>
 800de24:	4f35      	ldr	r7, [pc, #212]	@ (800defc <_strtod_l+0xafc>)
 800de26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de2a:	2600      	movs	r6, #0
 800de2c:	e7b1      	b.n	800dd92 <_strtod_l+0x992>
 800de2e:	4f34      	ldr	r7, [pc, #208]	@ (800df00 <_strtod_l+0xb00>)
 800de30:	2600      	movs	r6, #0
 800de32:	e7aa      	b.n	800dd8a <_strtod_l+0x98a>
 800de34:	4b32      	ldr	r3, [pc, #200]	@ (800df00 <_strtod_l+0xb00>)
 800de36:	4630      	mov	r0, r6
 800de38:	4639      	mov	r1, r7
 800de3a:	2200      	movs	r2, #0
 800de3c:	f7f2 fc0c 	bl	8000658 <__aeabi_dmul>
 800de40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de42:	4606      	mov	r6, r0
 800de44:	460f      	mov	r7, r1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d09f      	beq.n	800dd8a <_strtod_l+0x98a>
 800de4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800de4e:	e7a0      	b.n	800dd92 <_strtod_l+0x992>
 800de50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ded8 <_strtod_l+0xad8>
 800de54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de58:	ec57 6b17 	vmov	r6, r7, d7
 800de5c:	e799      	b.n	800dd92 <_strtod_l+0x992>
 800de5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800de62:	9b08      	ldr	r3, [sp, #32]
 800de64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1c1      	bne.n	800ddf0 <_strtod_l+0x9f0>
 800de6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de70:	0d1b      	lsrs	r3, r3, #20
 800de72:	051b      	lsls	r3, r3, #20
 800de74:	429d      	cmp	r5, r3
 800de76:	d1bb      	bne.n	800ddf0 <_strtod_l+0x9f0>
 800de78:	4630      	mov	r0, r6
 800de7a:	4639      	mov	r1, r7
 800de7c:	f7f2 ff4c 	bl	8000d18 <__aeabi_d2lz>
 800de80:	f7f2 fbbc 	bl	80005fc <__aeabi_l2d>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	4630      	mov	r0, r6
 800de8a:	4639      	mov	r1, r7
 800de8c:	f7f2 fa2c 	bl	80002e8 <__aeabi_dsub>
 800de90:	460b      	mov	r3, r1
 800de92:	4602      	mov	r2, r0
 800de94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800de98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800de9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de9e:	ea46 060a 	orr.w	r6, r6, sl
 800dea2:	431e      	orrs	r6, r3
 800dea4:	d06f      	beq.n	800df86 <_strtod_l+0xb86>
 800dea6:	a30e      	add	r3, pc, #56	@ (adr r3, 800dee0 <_strtod_l+0xae0>)
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	f7f2 fe46 	bl	8000b3c <__aeabi_dcmplt>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	f47f accf 	bne.w	800d854 <_strtod_l+0x454>
 800deb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800dee8 <_strtod_l+0xae8>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dec0:	f7f2 fe5a 	bl	8000b78 <__aeabi_dcmpgt>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d093      	beq.n	800ddf0 <_strtod_l+0x9f0>
 800dec8:	e4c4      	b.n	800d854 <_strtod_l+0x454>
 800deca:	bf00      	nop
 800decc:	f3af 8000 	nop.w
 800ded0:	00000000 	.word	0x00000000
 800ded4:	bff00000 	.word	0xbff00000
 800ded8:	00000000 	.word	0x00000000
 800dedc:	3ff00000 	.word	0x3ff00000
 800dee0:	94a03595 	.word	0x94a03595
 800dee4:	3fdfffff 	.word	0x3fdfffff
 800dee8:	35afe535 	.word	0x35afe535
 800deec:	3fe00000 	.word	0x3fe00000
 800def0:	000fffff 	.word	0x000fffff
 800def4:	7ff00000 	.word	0x7ff00000
 800def8:	7fefffff 	.word	0x7fefffff
 800defc:	3ff00000 	.word	0x3ff00000
 800df00:	3fe00000 	.word	0x3fe00000
 800df04:	7fe00000 	.word	0x7fe00000
 800df08:	7c9fffff 	.word	0x7c9fffff
 800df0c:	9b08      	ldr	r3, [sp, #32]
 800df0e:	b323      	cbz	r3, 800df5a <_strtod_l+0xb5a>
 800df10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800df14:	d821      	bhi.n	800df5a <_strtod_l+0xb5a>
 800df16:	a328      	add	r3, pc, #160	@ (adr r3, 800dfb8 <_strtod_l+0xbb8>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	4630      	mov	r0, r6
 800df1e:	4639      	mov	r1, r7
 800df20:	f7f2 fe16 	bl	8000b50 <__aeabi_dcmple>
 800df24:	b1a0      	cbz	r0, 800df50 <_strtod_l+0xb50>
 800df26:	4639      	mov	r1, r7
 800df28:	4630      	mov	r0, r6
 800df2a:	f7f2 fe6d 	bl	8000c08 <__aeabi_d2uiz>
 800df2e:	2801      	cmp	r0, #1
 800df30:	bf38      	it	cc
 800df32:	2001      	movcc	r0, #1
 800df34:	f7f2 fb16 	bl	8000564 <__aeabi_ui2d>
 800df38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df3a:	4606      	mov	r6, r0
 800df3c:	460f      	mov	r7, r1
 800df3e:	b9fb      	cbnz	r3, 800df80 <_strtod_l+0xb80>
 800df40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df44:	9014      	str	r0, [sp, #80]	@ 0x50
 800df46:	9315      	str	r3, [sp, #84]	@ 0x54
 800df48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800df4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800df50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800df56:	1b5b      	subs	r3, r3, r5
 800df58:	9311      	str	r3, [sp, #68]	@ 0x44
 800df5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800df62:	f7ff f8f1 	bl	800d148 <__ulp>
 800df66:	4650      	mov	r0, sl
 800df68:	ec53 2b10 	vmov	r2, r3, d0
 800df6c:	4659      	mov	r1, fp
 800df6e:	f7f2 fb73 	bl	8000658 <__aeabi_dmul>
 800df72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800df76:	f7f2 f9b9 	bl	80002ec <__adddf3>
 800df7a:	4682      	mov	sl, r0
 800df7c:	468b      	mov	fp, r1
 800df7e:	e770      	b.n	800de62 <_strtod_l+0xa62>
 800df80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800df84:	e7e0      	b.n	800df48 <_strtod_l+0xb48>
 800df86:	a30e      	add	r3, pc, #56	@ (adr r3, 800dfc0 <_strtod_l+0xbc0>)
 800df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8c:	f7f2 fdd6 	bl	8000b3c <__aeabi_dcmplt>
 800df90:	e798      	b.n	800dec4 <_strtod_l+0xac4>
 800df92:	2300      	movs	r3, #0
 800df94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800df98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df9a:	6013      	str	r3, [r2, #0]
 800df9c:	f7ff ba6d 	b.w	800d47a <_strtod_l+0x7a>
 800dfa0:	2a65      	cmp	r2, #101	@ 0x65
 800dfa2:	f43f ab66 	beq.w	800d672 <_strtod_l+0x272>
 800dfa6:	2a45      	cmp	r2, #69	@ 0x45
 800dfa8:	f43f ab63 	beq.w	800d672 <_strtod_l+0x272>
 800dfac:	2301      	movs	r3, #1
 800dfae:	f7ff bb9e 	b.w	800d6ee <_strtod_l+0x2ee>
 800dfb2:	bf00      	nop
 800dfb4:	f3af 8000 	nop.w
 800dfb8:	ffc00000 	.word	0xffc00000
 800dfbc:	41dfffff 	.word	0x41dfffff
 800dfc0:	94a03595 	.word	0x94a03595
 800dfc4:	3fcfffff 	.word	0x3fcfffff

0800dfc8 <_strtod_r>:
 800dfc8:	4b01      	ldr	r3, [pc, #4]	@ (800dfd0 <_strtod_r+0x8>)
 800dfca:	f7ff ba19 	b.w	800d400 <_strtod_l>
 800dfce:	bf00      	nop
 800dfd0:	200001cc 	.word	0x200001cc

0800dfd4 <_strtol_l.constprop.0>:
 800dfd4:	2b24      	cmp	r3, #36	@ 0x24
 800dfd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfda:	4686      	mov	lr, r0
 800dfdc:	4690      	mov	r8, r2
 800dfde:	d801      	bhi.n	800dfe4 <_strtol_l.constprop.0+0x10>
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d106      	bne.n	800dff2 <_strtol_l.constprop.0+0x1e>
 800dfe4:	f7fd fdae 	bl	800bb44 <__errno>
 800dfe8:	2316      	movs	r3, #22
 800dfea:	6003      	str	r3, [r0, #0]
 800dfec:	2000      	movs	r0, #0
 800dfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff2:	4834      	ldr	r0, [pc, #208]	@ (800e0c4 <_strtol_l.constprop.0+0xf0>)
 800dff4:	460d      	mov	r5, r1
 800dff6:	462a      	mov	r2, r5
 800dff8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dffc:	5d06      	ldrb	r6, [r0, r4]
 800dffe:	f016 0608 	ands.w	r6, r6, #8
 800e002:	d1f8      	bne.n	800dff6 <_strtol_l.constprop.0+0x22>
 800e004:	2c2d      	cmp	r4, #45	@ 0x2d
 800e006:	d12d      	bne.n	800e064 <_strtol_l.constprop.0+0x90>
 800e008:	782c      	ldrb	r4, [r5, #0]
 800e00a:	2601      	movs	r6, #1
 800e00c:	1c95      	adds	r5, r2, #2
 800e00e:	f033 0210 	bics.w	r2, r3, #16
 800e012:	d109      	bne.n	800e028 <_strtol_l.constprop.0+0x54>
 800e014:	2c30      	cmp	r4, #48	@ 0x30
 800e016:	d12a      	bne.n	800e06e <_strtol_l.constprop.0+0x9a>
 800e018:	782a      	ldrb	r2, [r5, #0]
 800e01a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e01e:	2a58      	cmp	r2, #88	@ 0x58
 800e020:	d125      	bne.n	800e06e <_strtol_l.constprop.0+0x9a>
 800e022:	786c      	ldrb	r4, [r5, #1]
 800e024:	2310      	movs	r3, #16
 800e026:	3502      	adds	r5, #2
 800e028:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e02c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e030:	2200      	movs	r2, #0
 800e032:	fbbc f9f3 	udiv	r9, ip, r3
 800e036:	4610      	mov	r0, r2
 800e038:	fb03 ca19 	mls	sl, r3, r9, ip
 800e03c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e040:	2f09      	cmp	r7, #9
 800e042:	d81b      	bhi.n	800e07c <_strtol_l.constprop.0+0xa8>
 800e044:	463c      	mov	r4, r7
 800e046:	42a3      	cmp	r3, r4
 800e048:	dd27      	ble.n	800e09a <_strtol_l.constprop.0+0xc6>
 800e04a:	1c57      	adds	r7, r2, #1
 800e04c:	d007      	beq.n	800e05e <_strtol_l.constprop.0+0x8a>
 800e04e:	4581      	cmp	r9, r0
 800e050:	d320      	bcc.n	800e094 <_strtol_l.constprop.0+0xc0>
 800e052:	d101      	bne.n	800e058 <_strtol_l.constprop.0+0x84>
 800e054:	45a2      	cmp	sl, r4
 800e056:	db1d      	blt.n	800e094 <_strtol_l.constprop.0+0xc0>
 800e058:	fb00 4003 	mla	r0, r0, r3, r4
 800e05c:	2201      	movs	r2, #1
 800e05e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e062:	e7eb      	b.n	800e03c <_strtol_l.constprop.0+0x68>
 800e064:	2c2b      	cmp	r4, #43	@ 0x2b
 800e066:	bf04      	itt	eq
 800e068:	782c      	ldrbeq	r4, [r5, #0]
 800e06a:	1c95      	addeq	r5, r2, #2
 800e06c:	e7cf      	b.n	800e00e <_strtol_l.constprop.0+0x3a>
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1da      	bne.n	800e028 <_strtol_l.constprop.0+0x54>
 800e072:	2c30      	cmp	r4, #48	@ 0x30
 800e074:	bf0c      	ite	eq
 800e076:	2308      	moveq	r3, #8
 800e078:	230a      	movne	r3, #10
 800e07a:	e7d5      	b.n	800e028 <_strtol_l.constprop.0+0x54>
 800e07c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e080:	2f19      	cmp	r7, #25
 800e082:	d801      	bhi.n	800e088 <_strtol_l.constprop.0+0xb4>
 800e084:	3c37      	subs	r4, #55	@ 0x37
 800e086:	e7de      	b.n	800e046 <_strtol_l.constprop.0+0x72>
 800e088:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e08c:	2f19      	cmp	r7, #25
 800e08e:	d804      	bhi.n	800e09a <_strtol_l.constprop.0+0xc6>
 800e090:	3c57      	subs	r4, #87	@ 0x57
 800e092:	e7d8      	b.n	800e046 <_strtol_l.constprop.0+0x72>
 800e094:	f04f 32ff 	mov.w	r2, #4294967295
 800e098:	e7e1      	b.n	800e05e <_strtol_l.constprop.0+0x8a>
 800e09a:	1c53      	adds	r3, r2, #1
 800e09c:	d108      	bne.n	800e0b0 <_strtol_l.constprop.0+0xdc>
 800e09e:	2322      	movs	r3, #34	@ 0x22
 800e0a0:	f8ce 3000 	str.w	r3, [lr]
 800e0a4:	4660      	mov	r0, ip
 800e0a6:	f1b8 0f00 	cmp.w	r8, #0
 800e0aa:	d0a0      	beq.n	800dfee <_strtol_l.constprop.0+0x1a>
 800e0ac:	1e69      	subs	r1, r5, #1
 800e0ae:	e006      	b.n	800e0be <_strtol_l.constprop.0+0xea>
 800e0b0:	b106      	cbz	r6, 800e0b4 <_strtol_l.constprop.0+0xe0>
 800e0b2:	4240      	negs	r0, r0
 800e0b4:	f1b8 0f00 	cmp.w	r8, #0
 800e0b8:	d099      	beq.n	800dfee <_strtol_l.constprop.0+0x1a>
 800e0ba:	2a00      	cmp	r2, #0
 800e0bc:	d1f6      	bne.n	800e0ac <_strtol_l.constprop.0+0xd8>
 800e0be:	f8c8 1000 	str.w	r1, [r8]
 800e0c2:	e794      	b.n	800dfee <_strtol_l.constprop.0+0x1a>
 800e0c4:	0800f7a9 	.word	0x0800f7a9

0800e0c8 <_strtol_r>:
 800e0c8:	f7ff bf84 	b.w	800dfd4 <_strtol_l.constprop.0>

0800e0cc <__ssputs_r>:
 800e0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d0:	688e      	ldr	r6, [r1, #8]
 800e0d2:	461f      	mov	r7, r3
 800e0d4:	42be      	cmp	r6, r7
 800e0d6:	680b      	ldr	r3, [r1, #0]
 800e0d8:	4682      	mov	sl, r0
 800e0da:	460c      	mov	r4, r1
 800e0dc:	4690      	mov	r8, r2
 800e0de:	d82d      	bhi.n	800e13c <__ssputs_r+0x70>
 800e0e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0e8:	d026      	beq.n	800e138 <__ssputs_r+0x6c>
 800e0ea:	6965      	ldr	r5, [r4, #20]
 800e0ec:	6909      	ldr	r1, [r1, #16]
 800e0ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0f2:	eba3 0901 	sub.w	r9, r3, r1
 800e0f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0fa:	1c7b      	adds	r3, r7, #1
 800e0fc:	444b      	add	r3, r9
 800e0fe:	106d      	asrs	r5, r5, #1
 800e100:	429d      	cmp	r5, r3
 800e102:	bf38      	it	cc
 800e104:	461d      	movcc	r5, r3
 800e106:	0553      	lsls	r3, r2, #21
 800e108:	d527      	bpl.n	800e15a <__ssputs_r+0x8e>
 800e10a:	4629      	mov	r1, r5
 800e10c:	f7fe fc1c 	bl	800c948 <_malloc_r>
 800e110:	4606      	mov	r6, r0
 800e112:	b360      	cbz	r0, 800e16e <__ssputs_r+0xa2>
 800e114:	6921      	ldr	r1, [r4, #16]
 800e116:	464a      	mov	r2, r9
 800e118:	f7fd fd41 	bl	800bb9e <memcpy>
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e126:	81a3      	strh	r3, [r4, #12]
 800e128:	6126      	str	r6, [r4, #16]
 800e12a:	6165      	str	r5, [r4, #20]
 800e12c:	444e      	add	r6, r9
 800e12e:	eba5 0509 	sub.w	r5, r5, r9
 800e132:	6026      	str	r6, [r4, #0]
 800e134:	60a5      	str	r5, [r4, #8]
 800e136:	463e      	mov	r6, r7
 800e138:	42be      	cmp	r6, r7
 800e13a:	d900      	bls.n	800e13e <__ssputs_r+0x72>
 800e13c:	463e      	mov	r6, r7
 800e13e:	6820      	ldr	r0, [r4, #0]
 800e140:	4632      	mov	r2, r6
 800e142:	4641      	mov	r1, r8
 800e144:	f000 f9c6 	bl	800e4d4 <memmove>
 800e148:	68a3      	ldr	r3, [r4, #8]
 800e14a:	1b9b      	subs	r3, r3, r6
 800e14c:	60a3      	str	r3, [r4, #8]
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	4433      	add	r3, r6
 800e152:	6023      	str	r3, [r4, #0]
 800e154:	2000      	movs	r0, #0
 800e156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15a:	462a      	mov	r2, r5
 800e15c:	f000 fd7d 	bl	800ec5a <_realloc_r>
 800e160:	4606      	mov	r6, r0
 800e162:	2800      	cmp	r0, #0
 800e164:	d1e0      	bne.n	800e128 <__ssputs_r+0x5c>
 800e166:	6921      	ldr	r1, [r4, #16]
 800e168:	4650      	mov	r0, sl
 800e16a:	f7fe fb79 	bl	800c860 <_free_r>
 800e16e:	230c      	movs	r3, #12
 800e170:	f8ca 3000 	str.w	r3, [sl]
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e17a:	81a3      	strh	r3, [r4, #12]
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	e7e9      	b.n	800e156 <__ssputs_r+0x8a>
	...

0800e184 <_svfiprintf_r>:
 800e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e188:	4698      	mov	r8, r3
 800e18a:	898b      	ldrh	r3, [r1, #12]
 800e18c:	061b      	lsls	r3, r3, #24
 800e18e:	b09d      	sub	sp, #116	@ 0x74
 800e190:	4607      	mov	r7, r0
 800e192:	460d      	mov	r5, r1
 800e194:	4614      	mov	r4, r2
 800e196:	d510      	bpl.n	800e1ba <_svfiprintf_r+0x36>
 800e198:	690b      	ldr	r3, [r1, #16]
 800e19a:	b973      	cbnz	r3, 800e1ba <_svfiprintf_r+0x36>
 800e19c:	2140      	movs	r1, #64	@ 0x40
 800e19e:	f7fe fbd3 	bl	800c948 <_malloc_r>
 800e1a2:	6028      	str	r0, [r5, #0]
 800e1a4:	6128      	str	r0, [r5, #16]
 800e1a6:	b930      	cbnz	r0, 800e1b6 <_svfiprintf_r+0x32>
 800e1a8:	230c      	movs	r3, #12
 800e1aa:	603b      	str	r3, [r7, #0]
 800e1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b0:	b01d      	add	sp, #116	@ 0x74
 800e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b6:	2340      	movs	r3, #64	@ 0x40
 800e1b8:	616b      	str	r3, [r5, #20]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1be:	2320      	movs	r3, #32
 800e1c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c8:	2330      	movs	r3, #48	@ 0x30
 800e1ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e368 <_svfiprintf_r+0x1e4>
 800e1ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1d2:	f04f 0901 	mov.w	r9, #1
 800e1d6:	4623      	mov	r3, r4
 800e1d8:	469a      	mov	sl, r3
 800e1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1de:	b10a      	cbz	r2, 800e1e4 <_svfiprintf_r+0x60>
 800e1e0:	2a25      	cmp	r2, #37	@ 0x25
 800e1e2:	d1f9      	bne.n	800e1d8 <_svfiprintf_r+0x54>
 800e1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1e8:	d00b      	beq.n	800e202 <_svfiprintf_r+0x7e>
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f7ff ff6b 	bl	800e0cc <__ssputs_r>
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	f000 80a7 	beq.w	800e34a <_svfiprintf_r+0x1c6>
 800e1fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1fe:	445a      	add	r2, fp
 800e200:	9209      	str	r2, [sp, #36]	@ 0x24
 800e202:	f89a 3000 	ldrb.w	r3, [sl]
 800e206:	2b00      	cmp	r3, #0
 800e208:	f000 809f 	beq.w	800e34a <_svfiprintf_r+0x1c6>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295
 800e212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e216:	f10a 0a01 	add.w	sl, sl, #1
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	9307      	str	r3, [sp, #28]
 800e21e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e222:	931a      	str	r3, [sp, #104]	@ 0x68
 800e224:	4654      	mov	r4, sl
 800e226:	2205      	movs	r2, #5
 800e228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22c:	484e      	ldr	r0, [pc, #312]	@ (800e368 <_svfiprintf_r+0x1e4>)
 800e22e:	f7f1 ffff 	bl	8000230 <memchr>
 800e232:	9a04      	ldr	r2, [sp, #16]
 800e234:	b9d8      	cbnz	r0, 800e26e <_svfiprintf_r+0xea>
 800e236:	06d0      	lsls	r0, r2, #27
 800e238:	bf44      	itt	mi
 800e23a:	2320      	movmi	r3, #32
 800e23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e240:	0711      	lsls	r1, r2, #28
 800e242:	bf44      	itt	mi
 800e244:	232b      	movmi	r3, #43	@ 0x2b
 800e246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e24a:	f89a 3000 	ldrb.w	r3, [sl]
 800e24e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e250:	d015      	beq.n	800e27e <_svfiprintf_r+0xfa>
 800e252:	9a07      	ldr	r2, [sp, #28]
 800e254:	4654      	mov	r4, sl
 800e256:	2000      	movs	r0, #0
 800e258:	f04f 0c0a 	mov.w	ip, #10
 800e25c:	4621      	mov	r1, r4
 800e25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e262:	3b30      	subs	r3, #48	@ 0x30
 800e264:	2b09      	cmp	r3, #9
 800e266:	d94b      	bls.n	800e300 <_svfiprintf_r+0x17c>
 800e268:	b1b0      	cbz	r0, 800e298 <_svfiprintf_r+0x114>
 800e26a:	9207      	str	r2, [sp, #28]
 800e26c:	e014      	b.n	800e298 <_svfiprintf_r+0x114>
 800e26e:	eba0 0308 	sub.w	r3, r0, r8
 800e272:	fa09 f303 	lsl.w	r3, r9, r3
 800e276:	4313      	orrs	r3, r2
 800e278:	9304      	str	r3, [sp, #16]
 800e27a:	46a2      	mov	sl, r4
 800e27c:	e7d2      	b.n	800e224 <_svfiprintf_r+0xa0>
 800e27e:	9b03      	ldr	r3, [sp, #12]
 800e280:	1d19      	adds	r1, r3, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	9103      	str	r1, [sp, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	bfbb      	ittet	lt
 800e28a:	425b      	neglt	r3, r3
 800e28c:	f042 0202 	orrlt.w	r2, r2, #2
 800e290:	9307      	strge	r3, [sp, #28]
 800e292:	9307      	strlt	r3, [sp, #28]
 800e294:	bfb8      	it	lt
 800e296:	9204      	strlt	r2, [sp, #16]
 800e298:	7823      	ldrb	r3, [r4, #0]
 800e29a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e29c:	d10a      	bne.n	800e2b4 <_svfiprintf_r+0x130>
 800e29e:	7863      	ldrb	r3, [r4, #1]
 800e2a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2a2:	d132      	bne.n	800e30a <_svfiprintf_r+0x186>
 800e2a4:	9b03      	ldr	r3, [sp, #12]
 800e2a6:	1d1a      	adds	r2, r3, #4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	9203      	str	r2, [sp, #12]
 800e2ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2b0:	3402      	adds	r4, #2
 800e2b2:	9305      	str	r3, [sp, #20]
 800e2b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e378 <_svfiprintf_r+0x1f4>
 800e2b8:	7821      	ldrb	r1, [r4, #0]
 800e2ba:	2203      	movs	r2, #3
 800e2bc:	4650      	mov	r0, sl
 800e2be:	f7f1 ffb7 	bl	8000230 <memchr>
 800e2c2:	b138      	cbz	r0, 800e2d4 <_svfiprintf_r+0x150>
 800e2c4:	9b04      	ldr	r3, [sp, #16]
 800e2c6:	eba0 000a 	sub.w	r0, r0, sl
 800e2ca:	2240      	movs	r2, #64	@ 0x40
 800e2cc:	4082      	lsls	r2, r0
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	3401      	adds	r4, #1
 800e2d2:	9304      	str	r3, [sp, #16]
 800e2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d8:	4824      	ldr	r0, [pc, #144]	@ (800e36c <_svfiprintf_r+0x1e8>)
 800e2da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2de:	2206      	movs	r2, #6
 800e2e0:	f7f1 ffa6 	bl	8000230 <memchr>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d036      	beq.n	800e356 <_svfiprintf_r+0x1d2>
 800e2e8:	4b21      	ldr	r3, [pc, #132]	@ (800e370 <_svfiprintf_r+0x1ec>)
 800e2ea:	bb1b      	cbnz	r3, 800e334 <_svfiprintf_r+0x1b0>
 800e2ec:	9b03      	ldr	r3, [sp, #12]
 800e2ee:	3307      	adds	r3, #7
 800e2f0:	f023 0307 	bic.w	r3, r3, #7
 800e2f4:	3308      	adds	r3, #8
 800e2f6:	9303      	str	r3, [sp, #12]
 800e2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2fa:	4433      	add	r3, r6
 800e2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2fe:	e76a      	b.n	800e1d6 <_svfiprintf_r+0x52>
 800e300:	fb0c 3202 	mla	r2, ip, r2, r3
 800e304:	460c      	mov	r4, r1
 800e306:	2001      	movs	r0, #1
 800e308:	e7a8      	b.n	800e25c <_svfiprintf_r+0xd8>
 800e30a:	2300      	movs	r3, #0
 800e30c:	3401      	adds	r4, #1
 800e30e:	9305      	str	r3, [sp, #20]
 800e310:	4619      	mov	r1, r3
 800e312:	f04f 0c0a 	mov.w	ip, #10
 800e316:	4620      	mov	r0, r4
 800e318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e31c:	3a30      	subs	r2, #48	@ 0x30
 800e31e:	2a09      	cmp	r2, #9
 800e320:	d903      	bls.n	800e32a <_svfiprintf_r+0x1a6>
 800e322:	2b00      	cmp	r3, #0
 800e324:	d0c6      	beq.n	800e2b4 <_svfiprintf_r+0x130>
 800e326:	9105      	str	r1, [sp, #20]
 800e328:	e7c4      	b.n	800e2b4 <_svfiprintf_r+0x130>
 800e32a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e32e:	4604      	mov	r4, r0
 800e330:	2301      	movs	r3, #1
 800e332:	e7f0      	b.n	800e316 <_svfiprintf_r+0x192>
 800e334:	ab03      	add	r3, sp, #12
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	462a      	mov	r2, r5
 800e33a:	4b0e      	ldr	r3, [pc, #56]	@ (800e374 <_svfiprintf_r+0x1f0>)
 800e33c:	a904      	add	r1, sp, #16
 800e33e:	4638      	mov	r0, r7
 800e340:	f7fc fc54 	bl	800abec <_printf_float>
 800e344:	1c42      	adds	r2, r0, #1
 800e346:	4606      	mov	r6, r0
 800e348:	d1d6      	bne.n	800e2f8 <_svfiprintf_r+0x174>
 800e34a:	89ab      	ldrh	r3, [r5, #12]
 800e34c:	065b      	lsls	r3, r3, #25
 800e34e:	f53f af2d 	bmi.w	800e1ac <_svfiprintf_r+0x28>
 800e352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e354:	e72c      	b.n	800e1b0 <_svfiprintf_r+0x2c>
 800e356:	ab03      	add	r3, sp, #12
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	462a      	mov	r2, r5
 800e35c:	4b05      	ldr	r3, [pc, #20]	@ (800e374 <_svfiprintf_r+0x1f0>)
 800e35e:	a904      	add	r1, sp, #16
 800e360:	4638      	mov	r0, r7
 800e362:	f7fc fedb 	bl	800b11c <_printf_i>
 800e366:	e7ed      	b.n	800e344 <_svfiprintf_r+0x1c0>
 800e368:	0800f8a9 	.word	0x0800f8a9
 800e36c:	0800f8b3 	.word	0x0800f8b3
 800e370:	0800abed 	.word	0x0800abed
 800e374:	0800e0cd 	.word	0x0800e0cd
 800e378:	0800f8af 	.word	0x0800f8af

0800e37c <__sflush_r>:
 800e37c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e384:	0716      	lsls	r6, r2, #28
 800e386:	4605      	mov	r5, r0
 800e388:	460c      	mov	r4, r1
 800e38a:	d454      	bmi.n	800e436 <__sflush_r+0xba>
 800e38c:	684b      	ldr	r3, [r1, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dc02      	bgt.n	800e398 <__sflush_r+0x1c>
 800e392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e394:	2b00      	cmp	r3, #0
 800e396:	dd48      	ble.n	800e42a <__sflush_r+0xae>
 800e398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e39a:	2e00      	cmp	r6, #0
 800e39c:	d045      	beq.n	800e42a <__sflush_r+0xae>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e3a4:	682f      	ldr	r7, [r5, #0]
 800e3a6:	6a21      	ldr	r1, [r4, #32]
 800e3a8:	602b      	str	r3, [r5, #0]
 800e3aa:	d030      	beq.n	800e40e <__sflush_r+0x92>
 800e3ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	0759      	lsls	r1, r3, #29
 800e3b2:	d505      	bpl.n	800e3c0 <__sflush_r+0x44>
 800e3b4:	6863      	ldr	r3, [r4, #4]
 800e3b6:	1ad2      	subs	r2, r2, r3
 800e3b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e3ba:	b10b      	cbz	r3, 800e3c0 <__sflush_r+0x44>
 800e3bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e3be:	1ad2      	subs	r2, r2, r3
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e3c4:	6a21      	ldr	r1, [r4, #32]
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	47b0      	blx	r6
 800e3ca:	1c43      	adds	r3, r0, #1
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	d106      	bne.n	800e3de <__sflush_r+0x62>
 800e3d0:	6829      	ldr	r1, [r5, #0]
 800e3d2:	291d      	cmp	r1, #29
 800e3d4:	d82b      	bhi.n	800e42e <__sflush_r+0xb2>
 800e3d6:	4a2a      	ldr	r2, [pc, #168]	@ (800e480 <__sflush_r+0x104>)
 800e3d8:	410a      	asrs	r2, r1
 800e3da:	07d6      	lsls	r6, r2, #31
 800e3dc:	d427      	bmi.n	800e42e <__sflush_r+0xb2>
 800e3de:	2200      	movs	r2, #0
 800e3e0:	6062      	str	r2, [r4, #4]
 800e3e2:	04d9      	lsls	r1, r3, #19
 800e3e4:	6922      	ldr	r2, [r4, #16]
 800e3e6:	6022      	str	r2, [r4, #0]
 800e3e8:	d504      	bpl.n	800e3f4 <__sflush_r+0x78>
 800e3ea:	1c42      	adds	r2, r0, #1
 800e3ec:	d101      	bne.n	800e3f2 <__sflush_r+0x76>
 800e3ee:	682b      	ldr	r3, [r5, #0]
 800e3f0:	b903      	cbnz	r3, 800e3f4 <__sflush_r+0x78>
 800e3f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3f6:	602f      	str	r7, [r5, #0]
 800e3f8:	b1b9      	cbz	r1, 800e42a <__sflush_r+0xae>
 800e3fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3fe:	4299      	cmp	r1, r3
 800e400:	d002      	beq.n	800e408 <__sflush_r+0x8c>
 800e402:	4628      	mov	r0, r5
 800e404:	f7fe fa2c 	bl	800c860 <_free_r>
 800e408:	2300      	movs	r3, #0
 800e40a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e40c:	e00d      	b.n	800e42a <__sflush_r+0xae>
 800e40e:	2301      	movs	r3, #1
 800e410:	4628      	mov	r0, r5
 800e412:	47b0      	blx	r6
 800e414:	4602      	mov	r2, r0
 800e416:	1c50      	adds	r0, r2, #1
 800e418:	d1c9      	bne.n	800e3ae <__sflush_r+0x32>
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d0c6      	beq.n	800e3ae <__sflush_r+0x32>
 800e420:	2b1d      	cmp	r3, #29
 800e422:	d001      	beq.n	800e428 <__sflush_r+0xac>
 800e424:	2b16      	cmp	r3, #22
 800e426:	d11e      	bne.n	800e466 <__sflush_r+0xea>
 800e428:	602f      	str	r7, [r5, #0]
 800e42a:	2000      	movs	r0, #0
 800e42c:	e022      	b.n	800e474 <__sflush_r+0xf8>
 800e42e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e432:	b21b      	sxth	r3, r3
 800e434:	e01b      	b.n	800e46e <__sflush_r+0xf2>
 800e436:	690f      	ldr	r7, [r1, #16]
 800e438:	2f00      	cmp	r7, #0
 800e43a:	d0f6      	beq.n	800e42a <__sflush_r+0xae>
 800e43c:	0793      	lsls	r3, r2, #30
 800e43e:	680e      	ldr	r6, [r1, #0]
 800e440:	bf08      	it	eq
 800e442:	694b      	ldreq	r3, [r1, #20]
 800e444:	600f      	str	r7, [r1, #0]
 800e446:	bf18      	it	ne
 800e448:	2300      	movne	r3, #0
 800e44a:	eba6 0807 	sub.w	r8, r6, r7
 800e44e:	608b      	str	r3, [r1, #8]
 800e450:	f1b8 0f00 	cmp.w	r8, #0
 800e454:	dde9      	ble.n	800e42a <__sflush_r+0xae>
 800e456:	6a21      	ldr	r1, [r4, #32]
 800e458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e45a:	4643      	mov	r3, r8
 800e45c:	463a      	mov	r2, r7
 800e45e:	4628      	mov	r0, r5
 800e460:	47b0      	blx	r6
 800e462:	2800      	cmp	r0, #0
 800e464:	dc08      	bgt.n	800e478 <__sflush_r+0xfc>
 800e466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e46e:	81a3      	strh	r3, [r4, #12]
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e478:	4407      	add	r7, r0
 800e47a:	eba8 0800 	sub.w	r8, r8, r0
 800e47e:	e7e7      	b.n	800e450 <__sflush_r+0xd4>
 800e480:	dfbffffe 	.word	0xdfbffffe

0800e484 <_fflush_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	690b      	ldr	r3, [r1, #16]
 800e488:	4605      	mov	r5, r0
 800e48a:	460c      	mov	r4, r1
 800e48c:	b913      	cbnz	r3, 800e494 <_fflush_r+0x10>
 800e48e:	2500      	movs	r5, #0
 800e490:	4628      	mov	r0, r5
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	b118      	cbz	r0, 800e49e <_fflush_r+0x1a>
 800e496:	6a03      	ldr	r3, [r0, #32]
 800e498:	b90b      	cbnz	r3, 800e49e <_fflush_r+0x1a>
 800e49a:	f7fd f9ff 	bl	800b89c <__sinit>
 800e49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d0f3      	beq.n	800e48e <_fflush_r+0xa>
 800e4a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e4a8:	07d0      	lsls	r0, r2, #31
 800e4aa:	d404      	bmi.n	800e4b6 <_fflush_r+0x32>
 800e4ac:	0599      	lsls	r1, r3, #22
 800e4ae:	d402      	bmi.n	800e4b6 <_fflush_r+0x32>
 800e4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4b2:	f7fd fb72 	bl	800bb9a <__retarget_lock_acquire_recursive>
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	f7ff ff5f 	bl	800e37c <__sflush_r>
 800e4be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4c0:	07da      	lsls	r2, r3, #31
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	d4e4      	bmi.n	800e490 <_fflush_r+0xc>
 800e4c6:	89a3      	ldrh	r3, [r4, #12]
 800e4c8:	059b      	lsls	r3, r3, #22
 800e4ca:	d4e1      	bmi.n	800e490 <_fflush_r+0xc>
 800e4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4ce:	f7fd fb65 	bl	800bb9c <__retarget_lock_release_recursive>
 800e4d2:	e7dd      	b.n	800e490 <_fflush_r+0xc>

0800e4d4 <memmove>:
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	b510      	push	{r4, lr}
 800e4d8:	eb01 0402 	add.w	r4, r1, r2
 800e4dc:	d902      	bls.n	800e4e4 <memmove+0x10>
 800e4de:	4284      	cmp	r4, r0
 800e4e0:	4623      	mov	r3, r4
 800e4e2:	d807      	bhi.n	800e4f4 <memmove+0x20>
 800e4e4:	1e43      	subs	r3, r0, #1
 800e4e6:	42a1      	cmp	r1, r4
 800e4e8:	d008      	beq.n	800e4fc <memmove+0x28>
 800e4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4f2:	e7f8      	b.n	800e4e6 <memmove+0x12>
 800e4f4:	4402      	add	r2, r0
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	d100      	bne.n	800e4fe <memmove+0x2a>
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e506:	e7f7      	b.n	800e4f8 <memmove+0x24>

0800e508 <strncmp>:
 800e508:	b510      	push	{r4, lr}
 800e50a:	b16a      	cbz	r2, 800e528 <strncmp+0x20>
 800e50c:	3901      	subs	r1, #1
 800e50e:	1884      	adds	r4, r0, r2
 800e510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e514:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e518:	429a      	cmp	r2, r3
 800e51a:	d103      	bne.n	800e524 <strncmp+0x1c>
 800e51c:	42a0      	cmp	r0, r4
 800e51e:	d001      	beq.n	800e524 <strncmp+0x1c>
 800e520:	2a00      	cmp	r2, #0
 800e522:	d1f5      	bne.n	800e510 <strncmp+0x8>
 800e524:	1ad0      	subs	r0, r2, r3
 800e526:	bd10      	pop	{r4, pc}
 800e528:	4610      	mov	r0, r2
 800e52a:	e7fc      	b.n	800e526 <strncmp+0x1e>

0800e52c <_sbrk_r>:
 800e52c:	b538      	push	{r3, r4, r5, lr}
 800e52e:	4d06      	ldr	r5, [pc, #24]	@ (800e548 <_sbrk_r+0x1c>)
 800e530:	2300      	movs	r3, #0
 800e532:	4604      	mov	r4, r0
 800e534:	4608      	mov	r0, r1
 800e536:	602b      	str	r3, [r5, #0]
 800e538:	f7f4 fe46 	bl	80031c8 <_sbrk>
 800e53c:	1c43      	adds	r3, r0, #1
 800e53e:	d102      	bne.n	800e546 <_sbrk_r+0x1a>
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	b103      	cbz	r3, 800e546 <_sbrk_r+0x1a>
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	bd38      	pop	{r3, r4, r5, pc}
 800e548:	20005fd0 	.word	0x20005fd0
 800e54c:	00000000 	.word	0x00000000

0800e550 <nan>:
 800e550:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e558 <nan+0x8>
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	00000000 	.word	0x00000000
 800e55c:	7ff80000 	.word	0x7ff80000

0800e560 <__assert_func>:
 800e560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e562:	4614      	mov	r4, r2
 800e564:	461a      	mov	r2, r3
 800e566:	4b09      	ldr	r3, [pc, #36]	@ (800e58c <__assert_func+0x2c>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4605      	mov	r5, r0
 800e56c:	68d8      	ldr	r0, [r3, #12]
 800e56e:	b954      	cbnz	r4, 800e586 <__assert_func+0x26>
 800e570:	4b07      	ldr	r3, [pc, #28]	@ (800e590 <__assert_func+0x30>)
 800e572:	461c      	mov	r4, r3
 800e574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e578:	9100      	str	r1, [sp, #0]
 800e57a:	462b      	mov	r3, r5
 800e57c:	4905      	ldr	r1, [pc, #20]	@ (800e594 <__assert_func+0x34>)
 800e57e:	f000 fba7 	bl	800ecd0 <fiprintf>
 800e582:	f000 fbb7 	bl	800ecf4 <abort>
 800e586:	4b04      	ldr	r3, [pc, #16]	@ (800e598 <__assert_func+0x38>)
 800e588:	e7f4      	b.n	800e574 <__assert_func+0x14>
 800e58a:	bf00      	nop
 800e58c:	2000017c 	.word	0x2000017c
 800e590:	0800f8fd 	.word	0x0800f8fd
 800e594:	0800f8cf 	.word	0x0800f8cf
 800e598:	0800f8c2 	.word	0x0800f8c2

0800e59c <_calloc_r>:
 800e59c:	b570      	push	{r4, r5, r6, lr}
 800e59e:	fba1 5402 	umull	r5, r4, r1, r2
 800e5a2:	b93c      	cbnz	r4, 800e5b4 <_calloc_r+0x18>
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	f7fe f9cf 	bl	800c948 <_malloc_r>
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	b928      	cbnz	r0, 800e5ba <_calloc_r+0x1e>
 800e5ae:	2600      	movs	r6, #0
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	220c      	movs	r2, #12
 800e5b6:	6002      	str	r2, [r0, #0]
 800e5b8:	e7f9      	b.n	800e5ae <_calloc_r+0x12>
 800e5ba:	462a      	mov	r2, r5
 800e5bc:	4621      	mov	r1, r4
 800e5be:	f7fd fa06 	bl	800b9ce <memset>
 800e5c2:	e7f5      	b.n	800e5b0 <_calloc_r+0x14>

0800e5c4 <rshift>:
 800e5c4:	6903      	ldr	r3, [r0, #16]
 800e5c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e5ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e5d2:	f100 0414 	add.w	r4, r0, #20
 800e5d6:	dd45      	ble.n	800e664 <rshift+0xa0>
 800e5d8:	f011 011f 	ands.w	r1, r1, #31
 800e5dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e5e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5e4:	d10c      	bne.n	800e600 <rshift+0x3c>
 800e5e6:	f100 0710 	add.w	r7, r0, #16
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	42b1      	cmp	r1, r6
 800e5ee:	d334      	bcc.n	800e65a <rshift+0x96>
 800e5f0:	1a9b      	subs	r3, r3, r2
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	1eea      	subs	r2, r5, #3
 800e5f6:	4296      	cmp	r6, r2
 800e5f8:	bf38      	it	cc
 800e5fa:	2300      	movcc	r3, #0
 800e5fc:	4423      	add	r3, r4
 800e5fe:	e015      	b.n	800e62c <rshift+0x68>
 800e600:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e604:	f1c1 0820 	rsb	r8, r1, #32
 800e608:	40cf      	lsrs	r7, r1
 800e60a:	f105 0e04 	add.w	lr, r5, #4
 800e60e:	46a1      	mov	r9, r4
 800e610:	4576      	cmp	r6, lr
 800e612:	46f4      	mov	ip, lr
 800e614:	d815      	bhi.n	800e642 <rshift+0x7e>
 800e616:	1a9a      	subs	r2, r3, r2
 800e618:	0092      	lsls	r2, r2, #2
 800e61a:	3a04      	subs	r2, #4
 800e61c:	3501      	adds	r5, #1
 800e61e:	42ae      	cmp	r6, r5
 800e620:	bf38      	it	cc
 800e622:	2200      	movcc	r2, #0
 800e624:	18a3      	adds	r3, r4, r2
 800e626:	50a7      	str	r7, [r4, r2]
 800e628:	b107      	cbz	r7, 800e62c <rshift+0x68>
 800e62a:	3304      	adds	r3, #4
 800e62c:	1b1a      	subs	r2, r3, r4
 800e62e:	42a3      	cmp	r3, r4
 800e630:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e634:	bf08      	it	eq
 800e636:	2300      	moveq	r3, #0
 800e638:	6102      	str	r2, [r0, #16]
 800e63a:	bf08      	it	eq
 800e63c:	6143      	streq	r3, [r0, #20]
 800e63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e642:	f8dc c000 	ldr.w	ip, [ip]
 800e646:	fa0c fc08 	lsl.w	ip, ip, r8
 800e64a:	ea4c 0707 	orr.w	r7, ip, r7
 800e64e:	f849 7b04 	str.w	r7, [r9], #4
 800e652:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e656:	40cf      	lsrs	r7, r1
 800e658:	e7da      	b.n	800e610 <rshift+0x4c>
 800e65a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e65e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e662:	e7c3      	b.n	800e5ec <rshift+0x28>
 800e664:	4623      	mov	r3, r4
 800e666:	e7e1      	b.n	800e62c <rshift+0x68>

0800e668 <__hexdig_fun>:
 800e668:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e66c:	2b09      	cmp	r3, #9
 800e66e:	d802      	bhi.n	800e676 <__hexdig_fun+0xe>
 800e670:	3820      	subs	r0, #32
 800e672:	b2c0      	uxtb	r0, r0
 800e674:	4770      	bx	lr
 800e676:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e67a:	2b05      	cmp	r3, #5
 800e67c:	d801      	bhi.n	800e682 <__hexdig_fun+0x1a>
 800e67e:	3847      	subs	r0, #71	@ 0x47
 800e680:	e7f7      	b.n	800e672 <__hexdig_fun+0xa>
 800e682:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e686:	2b05      	cmp	r3, #5
 800e688:	d801      	bhi.n	800e68e <__hexdig_fun+0x26>
 800e68a:	3827      	subs	r0, #39	@ 0x27
 800e68c:	e7f1      	b.n	800e672 <__hexdig_fun+0xa>
 800e68e:	2000      	movs	r0, #0
 800e690:	4770      	bx	lr
	...

0800e694 <__gethex>:
 800e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e698:	b085      	sub	sp, #20
 800e69a:	468a      	mov	sl, r1
 800e69c:	9302      	str	r3, [sp, #8]
 800e69e:	680b      	ldr	r3, [r1, #0]
 800e6a0:	9001      	str	r0, [sp, #4]
 800e6a2:	4690      	mov	r8, r2
 800e6a4:	1c9c      	adds	r4, r3, #2
 800e6a6:	46a1      	mov	r9, r4
 800e6a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e6ac:	2830      	cmp	r0, #48	@ 0x30
 800e6ae:	d0fa      	beq.n	800e6a6 <__gethex+0x12>
 800e6b0:	eba9 0303 	sub.w	r3, r9, r3
 800e6b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e6b8:	f7ff ffd6 	bl	800e668 <__hexdig_fun>
 800e6bc:	4605      	mov	r5, r0
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d168      	bne.n	800e794 <__gethex+0x100>
 800e6c2:	49a0      	ldr	r1, [pc, #640]	@ (800e944 <__gethex+0x2b0>)
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	4648      	mov	r0, r9
 800e6c8:	f7ff ff1e 	bl	800e508 <strncmp>
 800e6cc:	4607      	mov	r7, r0
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d167      	bne.n	800e7a2 <__gethex+0x10e>
 800e6d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e6d6:	4626      	mov	r6, r4
 800e6d8:	f7ff ffc6 	bl	800e668 <__hexdig_fun>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d062      	beq.n	800e7a6 <__gethex+0x112>
 800e6e0:	4623      	mov	r3, r4
 800e6e2:	7818      	ldrb	r0, [r3, #0]
 800e6e4:	2830      	cmp	r0, #48	@ 0x30
 800e6e6:	4699      	mov	r9, r3
 800e6e8:	f103 0301 	add.w	r3, r3, #1
 800e6ec:	d0f9      	beq.n	800e6e2 <__gethex+0x4e>
 800e6ee:	f7ff ffbb 	bl	800e668 <__hexdig_fun>
 800e6f2:	fab0 f580 	clz	r5, r0
 800e6f6:	096d      	lsrs	r5, r5, #5
 800e6f8:	f04f 0b01 	mov.w	fp, #1
 800e6fc:	464a      	mov	r2, r9
 800e6fe:	4616      	mov	r6, r2
 800e700:	3201      	adds	r2, #1
 800e702:	7830      	ldrb	r0, [r6, #0]
 800e704:	f7ff ffb0 	bl	800e668 <__hexdig_fun>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d1f8      	bne.n	800e6fe <__gethex+0x6a>
 800e70c:	498d      	ldr	r1, [pc, #564]	@ (800e944 <__gethex+0x2b0>)
 800e70e:	2201      	movs	r2, #1
 800e710:	4630      	mov	r0, r6
 800e712:	f7ff fef9 	bl	800e508 <strncmp>
 800e716:	2800      	cmp	r0, #0
 800e718:	d13f      	bne.n	800e79a <__gethex+0x106>
 800e71a:	b944      	cbnz	r4, 800e72e <__gethex+0x9a>
 800e71c:	1c74      	adds	r4, r6, #1
 800e71e:	4622      	mov	r2, r4
 800e720:	4616      	mov	r6, r2
 800e722:	3201      	adds	r2, #1
 800e724:	7830      	ldrb	r0, [r6, #0]
 800e726:	f7ff ff9f 	bl	800e668 <__hexdig_fun>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d1f8      	bne.n	800e720 <__gethex+0x8c>
 800e72e:	1ba4      	subs	r4, r4, r6
 800e730:	00a7      	lsls	r7, r4, #2
 800e732:	7833      	ldrb	r3, [r6, #0]
 800e734:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e738:	2b50      	cmp	r3, #80	@ 0x50
 800e73a:	d13e      	bne.n	800e7ba <__gethex+0x126>
 800e73c:	7873      	ldrb	r3, [r6, #1]
 800e73e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e740:	d033      	beq.n	800e7aa <__gethex+0x116>
 800e742:	2b2d      	cmp	r3, #45	@ 0x2d
 800e744:	d034      	beq.n	800e7b0 <__gethex+0x11c>
 800e746:	1c71      	adds	r1, r6, #1
 800e748:	2400      	movs	r4, #0
 800e74a:	7808      	ldrb	r0, [r1, #0]
 800e74c:	f7ff ff8c 	bl	800e668 <__hexdig_fun>
 800e750:	1e43      	subs	r3, r0, #1
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b18      	cmp	r3, #24
 800e756:	d830      	bhi.n	800e7ba <__gethex+0x126>
 800e758:	f1a0 0210 	sub.w	r2, r0, #16
 800e75c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e760:	f7ff ff82 	bl	800e668 <__hexdig_fun>
 800e764:	f100 3cff 	add.w	ip, r0, #4294967295
 800e768:	fa5f fc8c 	uxtb.w	ip, ip
 800e76c:	f1bc 0f18 	cmp.w	ip, #24
 800e770:	f04f 030a 	mov.w	r3, #10
 800e774:	d91e      	bls.n	800e7b4 <__gethex+0x120>
 800e776:	b104      	cbz	r4, 800e77a <__gethex+0xe6>
 800e778:	4252      	negs	r2, r2
 800e77a:	4417      	add	r7, r2
 800e77c:	f8ca 1000 	str.w	r1, [sl]
 800e780:	b1ed      	cbz	r5, 800e7be <__gethex+0x12a>
 800e782:	f1bb 0f00 	cmp.w	fp, #0
 800e786:	bf0c      	ite	eq
 800e788:	2506      	moveq	r5, #6
 800e78a:	2500      	movne	r5, #0
 800e78c:	4628      	mov	r0, r5
 800e78e:	b005      	add	sp, #20
 800e790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e794:	2500      	movs	r5, #0
 800e796:	462c      	mov	r4, r5
 800e798:	e7b0      	b.n	800e6fc <__gethex+0x68>
 800e79a:	2c00      	cmp	r4, #0
 800e79c:	d1c7      	bne.n	800e72e <__gethex+0x9a>
 800e79e:	4627      	mov	r7, r4
 800e7a0:	e7c7      	b.n	800e732 <__gethex+0x9e>
 800e7a2:	464e      	mov	r6, r9
 800e7a4:	462f      	mov	r7, r5
 800e7a6:	2501      	movs	r5, #1
 800e7a8:	e7c3      	b.n	800e732 <__gethex+0x9e>
 800e7aa:	2400      	movs	r4, #0
 800e7ac:	1cb1      	adds	r1, r6, #2
 800e7ae:	e7cc      	b.n	800e74a <__gethex+0xb6>
 800e7b0:	2401      	movs	r4, #1
 800e7b2:	e7fb      	b.n	800e7ac <__gethex+0x118>
 800e7b4:	fb03 0002 	mla	r0, r3, r2, r0
 800e7b8:	e7ce      	b.n	800e758 <__gethex+0xc4>
 800e7ba:	4631      	mov	r1, r6
 800e7bc:	e7de      	b.n	800e77c <__gethex+0xe8>
 800e7be:	eba6 0309 	sub.w	r3, r6, r9
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	2b07      	cmp	r3, #7
 800e7c8:	dc0a      	bgt.n	800e7e0 <__gethex+0x14c>
 800e7ca:	9801      	ldr	r0, [sp, #4]
 800e7cc:	f7fe f948 	bl	800ca60 <_Balloc>
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	b940      	cbnz	r0, 800e7e6 <__gethex+0x152>
 800e7d4:	4b5c      	ldr	r3, [pc, #368]	@ (800e948 <__gethex+0x2b4>)
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	21e4      	movs	r1, #228	@ 0xe4
 800e7da:	485c      	ldr	r0, [pc, #368]	@ (800e94c <__gethex+0x2b8>)
 800e7dc:	f7ff fec0 	bl	800e560 <__assert_func>
 800e7e0:	3101      	adds	r1, #1
 800e7e2:	105b      	asrs	r3, r3, #1
 800e7e4:	e7ef      	b.n	800e7c6 <__gethex+0x132>
 800e7e6:	f100 0a14 	add.w	sl, r0, #20
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	4655      	mov	r5, sl
 800e7ee:	469b      	mov	fp, r3
 800e7f0:	45b1      	cmp	r9, r6
 800e7f2:	d337      	bcc.n	800e864 <__gethex+0x1d0>
 800e7f4:	f845 bb04 	str.w	fp, [r5], #4
 800e7f8:	eba5 050a 	sub.w	r5, r5, sl
 800e7fc:	10ad      	asrs	r5, r5, #2
 800e7fe:	6125      	str	r5, [r4, #16]
 800e800:	4658      	mov	r0, fp
 800e802:	f7fe fa1f 	bl	800cc44 <__hi0bits>
 800e806:	016d      	lsls	r5, r5, #5
 800e808:	f8d8 6000 	ldr.w	r6, [r8]
 800e80c:	1a2d      	subs	r5, r5, r0
 800e80e:	42b5      	cmp	r5, r6
 800e810:	dd54      	ble.n	800e8bc <__gethex+0x228>
 800e812:	1bad      	subs	r5, r5, r6
 800e814:	4629      	mov	r1, r5
 800e816:	4620      	mov	r0, r4
 800e818:	f7fe fdb3 	bl	800d382 <__any_on>
 800e81c:	4681      	mov	r9, r0
 800e81e:	b178      	cbz	r0, 800e840 <__gethex+0x1ac>
 800e820:	1e6b      	subs	r3, r5, #1
 800e822:	1159      	asrs	r1, r3, #5
 800e824:	f003 021f 	and.w	r2, r3, #31
 800e828:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e82c:	f04f 0901 	mov.w	r9, #1
 800e830:	fa09 f202 	lsl.w	r2, r9, r2
 800e834:	420a      	tst	r2, r1
 800e836:	d003      	beq.n	800e840 <__gethex+0x1ac>
 800e838:	454b      	cmp	r3, r9
 800e83a:	dc36      	bgt.n	800e8aa <__gethex+0x216>
 800e83c:	f04f 0902 	mov.w	r9, #2
 800e840:	4629      	mov	r1, r5
 800e842:	4620      	mov	r0, r4
 800e844:	f7ff febe 	bl	800e5c4 <rshift>
 800e848:	442f      	add	r7, r5
 800e84a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e84e:	42bb      	cmp	r3, r7
 800e850:	da42      	bge.n	800e8d8 <__gethex+0x244>
 800e852:	9801      	ldr	r0, [sp, #4]
 800e854:	4621      	mov	r1, r4
 800e856:	f7fe f943 	bl	800cae0 <_Bfree>
 800e85a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e85c:	2300      	movs	r3, #0
 800e85e:	6013      	str	r3, [r2, #0]
 800e860:	25a3      	movs	r5, #163	@ 0xa3
 800e862:	e793      	b.n	800e78c <__gethex+0xf8>
 800e864:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e868:	2a2e      	cmp	r2, #46	@ 0x2e
 800e86a:	d012      	beq.n	800e892 <__gethex+0x1fe>
 800e86c:	2b20      	cmp	r3, #32
 800e86e:	d104      	bne.n	800e87a <__gethex+0x1e6>
 800e870:	f845 bb04 	str.w	fp, [r5], #4
 800e874:	f04f 0b00 	mov.w	fp, #0
 800e878:	465b      	mov	r3, fp
 800e87a:	7830      	ldrb	r0, [r6, #0]
 800e87c:	9303      	str	r3, [sp, #12]
 800e87e:	f7ff fef3 	bl	800e668 <__hexdig_fun>
 800e882:	9b03      	ldr	r3, [sp, #12]
 800e884:	f000 000f 	and.w	r0, r0, #15
 800e888:	4098      	lsls	r0, r3
 800e88a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e88e:	3304      	adds	r3, #4
 800e890:	e7ae      	b.n	800e7f0 <__gethex+0x15c>
 800e892:	45b1      	cmp	r9, r6
 800e894:	d8ea      	bhi.n	800e86c <__gethex+0x1d8>
 800e896:	492b      	ldr	r1, [pc, #172]	@ (800e944 <__gethex+0x2b0>)
 800e898:	9303      	str	r3, [sp, #12]
 800e89a:	2201      	movs	r2, #1
 800e89c:	4630      	mov	r0, r6
 800e89e:	f7ff fe33 	bl	800e508 <strncmp>
 800e8a2:	9b03      	ldr	r3, [sp, #12]
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d1e1      	bne.n	800e86c <__gethex+0x1d8>
 800e8a8:	e7a2      	b.n	800e7f0 <__gethex+0x15c>
 800e8aa:	1ea9      	subs	r1, r5, #2
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f7fe fd68 	bl	800d382 <__any_on>
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d0c2      	beq.n	800e83c <__gethex+0x1a8>
 800e8b6:	f04f 0903 	mov.w	r9, #3
 800e8ba:	e7c1      	b.n	800e840 <__gethex+0x1ac>
 800e8bc:	da09      	bge.n	800e8d2 <__gethex+0x23e>
 800e8be:	1b75      	subs	r5, r6, r5
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	9801      	ldr	r0, [sp, #4]
 800e8c4:	462a      	mov	r2, r5
 800e8c6:	f7fe fb23 	bl	800cf10 <__lshift>
 800e8ca:	1b7f      	subs	r7, r7, r5
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	f100 0a14 	add.w	sl, r0, #20
 800e8d2:	f04f 0900 	mov.w	r9, #0
 800e8d6:	e7b8      	b.n	800e84a <__gethex+0x1b6>
 800e8d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e8dc:	42bd      	cmp	r5, r7
 800e8de:	dd6f      	ble.n	800e9c0 <__gethex+0x32c>
 800e8e0:	1bed      	subs	r5, r5, r7
 800e8e2:	42ae      	cmp	r6, r5
 800e8e4:	dc34      	bgt.n	800e950 <__gethex+0x2bc>
 800e8e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	d022      	beq.n	800e934 <__gethex+0x2a0>
 800e8ee:	2b03      	cmp	r3, #3
 800e8f0:	d024      	beq.n	800e93c <__gethex+0x2a8>
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d115      	bne.n	800e922 <__gethex+0x28e>
 800e8f6:	42ae      	cmp	r6, r5
 800e8f8:	d113      	bne.n	800e922 <__gethex+0x28e>
 800e8fa:	2e01      	cmp	r6, #1
 800e8fc:	d10b      	bne.n	800e916 <__gethex+0x282>
 800e8fe:	9a02      	ldr	r2, [sp, #8]
 800e900:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e904:	6013      	str	r3, [r2, #0]
 800e906:	2301      	movs	r3, #1
 800e908:	6123      	str	r3, [r4, #16]
 800e90a:	f8ca 3000 	str.w	r3, [sl]
 800e90e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e910:	2562      	movs	r5, #98	@ 0x62
 800e912:	601c      	str	r4, [r3, #0]
 800e914:	e73a      	b.n	800e78c <__gethex+0xf8>
 800e916:	1e71      	subs	r1, r6, #1
 800e918:	4620      	mov	r0, r4
 800e91a:	f7fe fd32 	bl	800d382 <__any_on>
 800e91e:	2800      	cmp	r0, #0
 800e920:	d1ed      	bne.n	800e8fe <__gethex+0x26a>
 800e922:	9801      	ldr	r0, [sp, #4]
 800e924:	4621      	mov	r1, r4
 800e926:	f7fe f8db 	bl	800cae0 <_Bfree>
 800e92a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e92c:	2300      	movs	r3, #0
 800e92e:	6013      	str	r3, [r2, #0]
 800e930:	2550      	movs	r5, #80	@ 0x50
 800e932:	e72b      	b.n	800e78c <__gethex+0xf8>
 800e934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1f3      	bne.n	800e922 <__gethex+0x28e>
 800e93a:	e7e0      	b.n	800e8fe <__gethex+0x26a>
 800e93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1dd      	bne.n	800e8fe <__gethex+0x26a>
 800e942:	e7ee      	b.n	800e922 <__gethex+0x28e>
 800e944:	0800f750 	.word	0x0800f750
 800e948:	0800f5e5 	.word	0x0800f5e5
 800e94c:	0800f8fe 	.word	0x0800f8fe
 800e950:	1e6f      	subs	r7, r5, #1
 800e952:	f1b9 0f00 	cmp.w	r9, #0
 800e956:	d130      	bne.n	800e9ba <__gethex+0x326>
 800e958:	b127      	cbz	r7, 800e964 <__gethex+0x2d0>
 800e95a:	4639      	mov	r1, r7
 800e95c:	4620      	mov	r0, r4
 800e95e:	f7fe fd10 	bl	800d382 <__any_on>
 800e962:	4681      	mov	r9, r0
 800e964:	117a      	asrs	r2, r7, #5
 800e966:	2301      	movs	r3, #1
 800e968:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e96c:	f007 071f 	and.w	r7, r7, #31
 800e970:	40bb      	lsls	r3, r7
 800e972:	4213      	tst	r3, r2
 800e974:	4629      	mov	r1, r5
 800e976:	4620      	mov	r0, r4
 800e978:	bf18      	it	ne
 800e97a:	f049 0902 	orrne.w	r9, r9, #2
 800e97e:	f7ff fe21 	bl	800e5c4 <rshift>
 800e982:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e986:	1b76      	subs	r6, r6, r5
 800e988:	2502      	movs	r5, #2
 800e98a:	f1b9 0f00 	cmp.w	r9, #0
 800e98e:	d047      	beq.n	800ea20 <__gethex+0x38c>
 800e990:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e994:	2b02      	cmp	r3, #2
 800e996:	d015      	beq.n	800e9c4 <__gethex+0x330>
 800e998:	2b03      	cmp	r3, #3
 800e99a:	d017      	beq.n	800e9cc <__gethex+0x338>
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d109      	bne.n	800e9b4 <__gethex+0x320>
 800e9a0:	f019 0f02 	tst.w	r9, #2
 800e9a4:	d006      	beq.n	800e9b4 <__gethex+0x320>
 800e9a6:	f8da 3000 	ldr.w	r3, [sl]
 800e9aa:	ea49 0903 	orr.w	r9, r9, r3
 800e9ae:	f019 0f01 	tst.w	r9, #1
 800e9b2:	d10e      	bne.n	800e9d2 <__gethex+0x33e>
 800e9b4:	f045 0510 	orr.w	r5, r5, #16
 800e9b8:	e032      	b.n	800ea20 <__gethex+0x38c>
 800e9ba:	f04f 0901 	mov.w	r9, #1
 800e9be:	e7d1      	b.n	800e964 <__gethex+0x2d0>
 800e9c0:	2501      	movs	r5, #1
 800e9c2:	e7e2      	b.n	800e98a <__gethex+0x2f6>
 800e9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9c6:	f1c3 0301 	rsb	r3, r3, #1
 800e9ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d0f0      	beq.n	800e9b4 <__gethex+0x320>
 800e9d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e9d6:	f104 0314 	add.w	r3, r4, #20
 800e9da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e9de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9e2:	f04f 0c00 	mov.w	ip, #0
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9f0:	d01b      	beq.n	800ea2a <__gethex+0x396>
 800e9f2:	3201      	adds	r2, #1
 800e9f4:	6002      	str	r2, [r0, #0]
 800e9f6:	2d02      	cmp	r5, #2
 800e9f8:	f104 0314 	add.w	r3, r4, #20
 800e9fc:	d13c      	bne.n	800ea78 <__gethex+0x3e4>
 800e9fe:	f8d8 2000 	ldr.w	r2, [r8]
 800ea02:	3a01      	subs	r2, #1
 800ea04:	42b2      	cmp	r2, r6
 800ea06:	d109      	bne.n	800ea1c <__gethex+0x388>
 800ea08:	1171      	asrs	r1, r6, #5
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea10:	f006 061f 	and.w	r6, r6, #31
 800ea14:	fa02 f606 	lsl.w	r6, r2, r6
 800ea18:	421e      	tst	r6, r3
 800ea1a:	d13a      	bne.n	800ea92 <__gethex+0x3fe>
 800ea1c:	f045 0520 	orr.w	r5, r5, #32
 800ea20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea22:	601c      	str	r4, [r3, #0]
 800ea24:	9b02      	ldr	r3, [sp, #8]
 800ea26:	601f      	str	r7, [r3, #0]
 800ea28:	e6b0      	b.n	800e78c <__gethex+0xf8>
 800ea2a:	4299      	cmp	r1, r3
 800ea2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea30:	d8d9      	bhi.n	800e9e6 <__gethex+0x352>
 800ea32:	68a3      	ldr	r3, [r4, #8]
 800ea34:	459b      	cmp	fp, r3
 800ea36:	db17      	blt.n	800ea68 <__gethex+0x3d4>
 800ea38:	6861      	ldr	r1, [r4, #4]
 800ea3a:	9801      	ldr	r0, [sp, #4]
 800ea3c:	3101      	adds	r1, #1
 800ea3e:	f7fe f80f 	bl	800ca60 <_Balloc>
 800ea42:	4681      	mov	r9, r0
 800ea44:	b918      	cbnz	r0, 800ea4e <__gethex+0x3ba>
 800ea46:	4b1a      	ldr	r3, [pc, #104]	@ (800eab0 <__gethex+0x41c>)
 800ea48:	4602      	mov	r2, r0
 800ea4a:	2184      	movs	r1, #132	@ 0x84
 800ea4c:	e6c5      	b.n	800e7da <__gethex+0x146>
 800ea4e:	6922      	ldr	r2, [r4, #16]
 800ea50:	3202      	adds	r2, #2
 800ea52:	f104 010c 	add.w	r1, r4, #12
 800ea56:	0092      	lsls	r2, r2, #2
 800ea58:	300c      	adds	r0, #12
 800ea5a:	f7fd f8a0 	bl	800bb9e <memcpy>
 800ea5e:	4621      	mov	r1, r4
 800ea60:	9801      	ldr	r0, [sp, #4]
 800ea62:	f7fe f83d 	bl	800cae0 <_Bfree>
 800ea66:	464c      	mov	r4, r9
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea70:	6122      	str	r2, [r4, #16]
 800ea72:	2201      	movs	r2, #1
 800ea74:	615a      	str	r2, [r3, #20]
 800ea76:	e7be      	b.n	800e9f6 <__gethex+0x362>
 800ea78:	6922      	ldr	r2, [r4, #16]
 800ea7a:	455a      	cmp	r2, fp
 800ea7c:	dd0b      	ble.n	800ea96 <__gethex+0x402>
 800ea7e:	2101      	movs	r1, #1
 800ea80:	4620      	mov	r0, r4
 800ea82:	f7ff fd9f 	bl	800e5c4 <rshift>
 800ea86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea8a:	3701      	adds	r7, #1
 800ea8c:	42bb      	cmp	r3, r7
 800ea8e:	f6ff aee0 	blt.w	800e852 <__gethex+0x1be>
 800ea92:	2501      	movs	r5, #1
 800ea94:	e7c2      	b.n	800ea1c <__gethex+0x388>
 800ea96:	f016 061f 	ands.w	r6, r6, #31
 800ea9a:	d0fa      	beq.n	800ea92 <__gethex+0x3fe>
 800ea9c:	4453      	add	r3, sl
 800ea9e:	f1c6 0620 	rsb	r6, r6, #32
 800eaa2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eaa6:	f7fe f8cd 	bl	800cc44 <__hi0bits>
 800eaaa:	42b0      	cmp	r0, r6
 800eaac:	dbe7      	blt.n	800ea7e <__gethex+0x3ea>
 800eaae:	e7f0      	b.n	800ea92 <__gethex+0x3fe>
 800eab0:	0800f5e5 	.word	0x0800f5e5

0800eab4 <L_shift>:
 800eab4:	f1c2 0208 	rsb	r2, r2, #8
 800eab8:	0092      	lsls	r2, r2, #2
 800eaba:	b570      	push	{r4, r5, r6, lr}
 800eabc:	f1c2 0620 	rsb	r6, r2, #32
 800eac0:	6843      	ldr	r3, [r0, #4]
 800eac2:	6804      	ldr	r4, [r0, #0]
 800eac4:	fa03 f506 	lsl.w	r5, r3, r6
 800eac8:	432c      	orrs	r4, r5
 800eaca:	40d3      	lsrs	r3, r2
 800eacc:	6004      	str	r4, [r0, #0]
 800eace:	f840 3f04 	str.w	r3, [r0, #4]!
 800ead2:	4288      	cmp	r0, r1
 800ead4:	d3f4      	bcc.n	800eac0 <L_shift+0xc>
 800ead6:	bd70      	pop	{r4, r5, r6, pc}

0800ead8 <__match>:
 800ead8:	b530      	push	{r4, r5, lr}
 800eada:	6803      	ldr	r3, [r0, #0]
 800eadc:	3301      	adds	r3, #1
 800eade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eae2:	b914      	cbnz	r4, 800eaea <__match+0x12>
 800eae4:	6003      	str	r3, [r0, #0]
 800eae6:	2001      	movs	r0, #1
 800eae8:	bd30      	pop	{r4, r5, pc}
 800eaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eaf2:	2d19      	cmp	r5, #25
 800eaf4:	bf98      	it	ls
 800eaf6:	3220      	addls	r2, #32
 800eaf8:	42a2      	cmp	r2, r4
 800eafa:	d0f0      	beq.n	800eade <__match+0x6>
 800eafc:	2000      	movs	r0, #0
 800eafe:	e7f3      	b.n	800eae8 <__match+0x10>

0800eb00 <__hexnan>:
 800eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	680b      	ldr	r3, [r1, #0]
 800eb06:	6801      	ldr	r1, [r0, #0]
 800eb08:	115e      	asrs	r6, r3, #5
 800eb0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb0e:	f013 031f 	ands.w	r3, r3, #31
 800eb12:	b087      	sub	sp, #28
 800eb14:	bf18      	it	ne
 800eb16:	3604      	addne	r6, #4
 800eb18:	2500      	movs	r5, #0
 800eb1a:	1f37      	subs	r7, r6, #4
 800eb1c:	4682      	mov	sl, r0
 800eb1e:	4690      	mov	r8, r2
 800eb20:	9301      	str	r3, [sp, #4]
 800eb22:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb26:	46b9      	mov	r9, r7
 800eb28:	463c      	mov	r4, r7
 800eb2a:	9502      	str	r5, [sp, #8]
 800eb2c:	46ab      	mov	fp, r5
 800eb2e:	784a      	ldrb	r2, [r1, #1]
 800eb30:	1c4b      	adds	r3, r1, #1
 800eb32:	9303      	str	r3, [sp, #12]
 800eb34:	b342      	cbz	r2, 800eb88 <__hexnan+0x88>
 800eb36:	4610      	mov	r0, r2
 800eb38:	9105      	str	r1, [sp, #20]
 800eb3a:	9204      	str	r2, [sp, #16]
 800eb3c:	f7ff fd94 	bl	800e668 <__hexdig_fun>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d151      	bne.n	800ebe8 <__hexnan+0xe8>
 800eb44:	9a04      	ldr	r2, [sp, #16]
 800eb46:	9905      	ldr	r1, [sp, #20]
 800eb48:	2a20      	cmp	r2, #32
 800eb4a:	d818      	bhi.n	800eb7e <__hexnan+0x7e>
 800eb4c:	9b02      	ldr	r3, [sp, #8]
 800eb4e:	459b      	cmp	fp, r3
 800eb50:	dd13      	ble.n	800eb7a <__hexnan+0x7a>
 800eb52:	454c      	cmp	r4, r9
 800eb54:	d206      	bcs.n	800eb64 <__hexnan+0x64>
 800eb56:	2d07      	cmp	r5, #7
 800eb58:	dc04      	bgt.n	800eb64 <__hexnan+0x64>
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	4649      	mov	r1, r9
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f7ff ffa8 	bl	800eab4 <L_shift>
 800eb64:	4544      	cmp	r4, r8
 800eb66:	d952      	bls.n	800ec0e <__hexnan+0x10e>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f1a4 0904 	sub.w	r9, r4, #4
 800eb6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb72:	f8cd b008 	str.w	fp, [sp, #8]
 800eb76:	464c      	mov	r4, r9
 800eb78:	461d      	mov	r5, r3
 800eb7a:	9903      	ldr	r1, [sp, #12]
 800eb7c:	e7d7      	b.n	800eb2e <__hexnan+0x2e>
 800eb7e:	2a29      	cmp	r2, #41	@ 0x29
 800eb80:	d157      	bne.n	800ec32 <__hexnan+0x132>
 800eb82:	3102      	adds	r1, #2
 800eb84:	f8ca 1000 	str.w	r1, [sl]
 800eb88:	f1bb 0f00 	cmp.w	fp, #0
 800eb8c:	d051      	beq.n	800ec32 <__hexnan+0x132>
 800eb8e:	454c      	cmp	r4, r9
 800eb90:	d206      	bcs.n	800eba0 <__hexnan+0xa0>
 800eb92:	2d07      	cmp	r5, #7
 800eb94:	dc04      	bgt.n	800eba0 <__hexnan+0xa0>
 800eb96:	462a      	mov	r2, r5
 800eb98:	4649      	mov	r1, r9
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7ff ff8a 	bl	800eab4 <L_shift>
 800eba0:	4544      	cmp	r4, r8
 800eba2:	d936      	bls.n	800ec12 <__hexnan+0x112>
 800eba4:	f1a8 0204 	sub.w	r2, r8, #4
 800eba8:	4623      	mov	r3, r4
 800ebaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800ebae:	f842 1f04 	str.w	r1, [r2, #4]!
 800ebb2:	429f      	cmp	r7, r3
 800ebb4:	d2f9      	bcs.n	800ebaa <__hexnan+0xaa>
 800ebb6:	1b3b      	subs	r3, r7, r4
 800ebb8:	f023 0303 	bic.w	r3, r3, #3
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	3401      	adds	r4, #1
 800ebc0:	3e03      	subs	r6, #3
 800ebc2:	42b4      	cmp	r4, r6
 800ebc4:	bf88      	it	hi
 800ebc6:	2304      	movhi	r3, #4
 800ebc8:	4443      	add	r3, r8
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f843 2b04 	str.w	r2, [r3], #4
 800ebd0:	429f      	cmp	r7, r3
 800ebd2:	d2fb      	bcs.n	800ebcc <__hexnan+0xcc>
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	b91b      	cbnz	r3, 800ebe0 <__hexnan+0xe0>
 800ebd8:	4547      	cmp	r7, r8
 800ebda:	d128      	bne.n	800ec2e <__hexnan+0x12e>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	603b      	str	r3, [r7, #0]
 800ebe0:	2005      	movs	r0, #5
 800ebe2:	b007      	add	sp, #28
 800ebe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe8:	3501      	adds	r5, #1
 800ebea:	2d08      	cmp	r5, #8
 800ebec:	f10b 0b01 	add.w	fp, fp, #1
 800ebf0:	dd06      	ble.n	800ec00 <__hexnan+0x100>
 800ebf2:	4544      	cmp	r4, r8
 800ebf4:	d9c1      	bls.n	800eb7a <__hexnan+0x7a>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebfc:	2501      	movs	r5, #1
 800ebfe:	3c04      	subs	r4, #4
 800ec00:	6822      	ldr	r2, [r4, #0]
 800ec02:	f000 000f 	and.w	r0, r0, #15
 800ec06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec0a:	6020      	str	r0, [r4, #0]
 800ec0c:	e7b5      	b.n	800eb7a <__hexnan+0x7a>
 800ec0e:	2508      	movs	r5, #8
 800ec10:	e7b3      	b.n	800eb7a <__hexnan+0x7a>
 800ec12:	9b01      	ldr	r3, [sp, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d0dd      	beq.n	800ebd4 <__hexnan+0xd4>
 800ec18:	f1c3 0320 	rsb	r3, r3, #32
 800ec1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec20:	40da      	lsrs	r2, r3
 800ec22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ec26:	4013      	ands	r3, r2
 800ec28:	f846 3c04 	str.w	r3, [r6, #-4]
 800ec2c:	e7d2      	b.n	800ebd4 <__hexnan+0xd4>
 800ec2e:	3f04      	subs	r7, #4
 800ec30:	e7d0      	b.n	800ebd4 <__hexnan+0xd4>
 800ec32:	2004      	movs	r0, #4
 800ec34:	e7d5      	b.n	800ebe2 <__hexnan+0xe2>

0800ec36 <__ascii_mbtowc>:
 800ec36:	b082      	sub	sp, #8
 800ec38:	b901      	cbnz	r1, 800ec3c <__ascii_mbtowc+0x6>
 800ec3a:	a901      	add	r1, sp, #4
 800ec3c:	b142      	cbz	r2, 800ec50 <__ascii_mbtowc+0x1a>
 800ec3e:	b14b      	cbz	r3, 800ec54 <__ascii_mbtowc+0x1e>
 800ec40:	7813      	ldrb	r3, [r2, #0]
 800ec42:	600b      	str	r3, [r1, #0]
 800ec44:	7812      	ldrb	r2, [r2, #0]
 800ec46:	1e10      	subs	r0, r2, #0
 800ec48:	bf18      	it	ne
 800ec4a:	2001      	movne	r0, #1
 800ec4c:	b002      	add	sp, #8
 800ec4e:	4770      	bx	lr
 800ec50:	4610      	mov	r0, r2
 800ec52:	e7fb      	b.n	800ec4c <__ascii_mbtowc+0x16>
 800ec54:	f06f 0001 	mvn.w	r0, #1
 800ec58:	e7f8      	b.n	800ec4c <__ascii_mbtowc+0x16>

0800ec5a <_realloc_r>:
 800ec5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5e:	4680      	mov	r8, r0
 800ec60:	4615      	mov	r5, r2
 800ec62:	460c      	mov	r4, r1
 800ec64:	b921      	cbnz	r1, 800ec70 <_realloc_r+0x16>
 800ec66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	f7fd be6c 	b.w	800c948 <_malloc_r>
 800ec70:	b92a      	cbnz	r2, 800ec7e <_realloc_r+0x24>
 800ec72:	f7fd fdf5 	bl	800c860 <_free_r>
 800ec76:	2400      	movs	r4, #0
 800ec78:	4620      	mov	r0, r4
 800ec7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec7e:	f000 f840 	bl	800ed02 <_malloc_usable_size_r>
 800ec82:	4285      	cmp	r5, r0
 800ec84:	4606      	mov	r6, r0
 800ec86:	d802      	bhi.n	800ec8e <_realloc_r+0x34>
 800ec88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec8c:	d8f4      	bhi.n	800ec78 <_realloc_r+0x1e>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4640      	mov	r0, r8
 800ec92:	f7fd fe59 	bl	800c948 <_malloc_r>
 800ec96:	4607      	mov	r7, r0
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d0ec      	beq.n	800ec76 <_realloc_r+0x1c>
 800ec9c:	42b5      	cmp	r5, r6
 800ec9e:	462a      	mov	r2, r5
 800eca0:	4621      	mov	r1, r4
 800eca2:	bf28      	it	cs
 800eca4:	4632      	movcs	r2, r6
 800eca6:	f7fc ff7a 	bl	800bb9e <memcpy>
 800ecaa:	4621      	mov	r1, r4
 800ecac:	4640      	mov	r0, r8
 800ecae:	f7fd fdd7 	bl	800c860 <_free_r>
 800ecb2:	463c      	mov	r4, r7
 800ecb4:	e7e0      	b.n	800ec78 <_realloc_r+0x1e>

0800ecb6 <__ascii_wctomb>:
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	4608      	mov	r0, r1
 800ecba:	b141      	cbz	r1, 800ecce <__ascii_wctomb+0x18>
 800ecbc:	2aff      	cmp	r2, #255	@ 0xff
 800ecbe:	d904      	bls.n	800ecca <__ascii_wctomb+0x14>
 800ecc0:	228a      	movs	r2, #138	@ 0x8a
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc8:	4770      	bx	lr
 800ecca:	700a      	strb	r2, [r1, #0]
 800eccc:	2001      	movs	r0, #1
 800ecce:	4770      	bx	lr

0800ecd0 <fiprintf>:
 800ecd0:	b40e      	push	{r1, r2, r3}
 800ecd2:	b503      	push	{r0, r1, lr}
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	ab03      	add	r3, sp, #12
 800ecd8:	4805      	ldr	r0, [pc, #20]	@ (800ecf0 <fiprintf+0x20>)
 800ecda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecde:	6800      	ldr	r0, [r0, #0]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	f000 f83f 	bl	800ed64 <_vfiprintf_r>
 800ece6:	b002      	add	sp, #8
 800ece8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecec:	b003      	add	sp, #12
 800ecee:	4770      	bx	lr
 800ecf0:	2000017c 	.word	0x2000017c

0800ecf4 <abort>:
 800ecf4:	b508      	push	{r3, lr}
 800ecf6:	2006      	movs	r0, #6
 800ecf8:	f000 fa08 	bl	800f10c <raise>
 800ecfc:	2001      	movs	r0, #1
 800ecfe:	f7f4 f9eb 	bl	80030d8 <_exit>

0800ed02 <_malloc_usable_size_r>:
 800ed02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed06:	1f18      	subs	r0, r3, #4
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	bfbc      	itt	lt
 800ed0c:	580b      	ldrlt	r3, [r1, r0]
 800ed0e:	18c0      	addlt	r0, r0, r3
 800ed10:	4770      	bx	lr

0800ed12 <__sfputc_r>:
 800ed12:	6893      	ldr	r3, [r2, #8]
 800ed14:	3b01      	subs	r3, #1
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	b410      	push	{r4}
 800ed1a:	6093      	str	r3, [r2, #8]
 800ed1c:	da08      	bge.n	800ed30 <__sfputc_r+0x1e>
 800ed1e:	6994      	ldr	r4, [r2, #24]
 800ed20:	42a3      	cmp	r3, r4
 800ed22:	db01      	blt.n	800ed28 <__sfputc_r+0x16>
 800ed24:	290a      	cmp	r1, #10
 800ed26:	d103      	bne.n	800ed30 <__sfputc_r+0x1e>
 800ed28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed2c:	f000 b932 	b.w	800ef94 <__swbuf_r>
 800ed30:	6813      	ldr	r3, [r2, #0]
 800ed32:	1c58      	adds	r0, r3, #1
 800ed34:	6010      	str	r0, [r2, #0]
 800ed36:	7019      	strb	r1, [r3, #0]
 800ed38:	4608      	mov	r0, r1
 800ed3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <__sfputs_r>:
 800ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed42:	4606      	mov	r6, r0
 800ed44:	460f      	mov	r7, r1
 800ed46:	4614      	mov	r4, r2
 800ed48:	18d5      	adds	r5, r2, r3
 800ed4a:	42ac      	cmp	r4, r5
 800ed4c:	d101      	bne.n	800ed52 <__sfputs_r+0x12>
 800ed4e:	2000      	movs	r0, #0
 800ed50:	e007      	b.n	800ed62 <__sfputs_r+0x22>
 800ed52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed56:	463a      	mov	r2, r7
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7ff ffda 	bl	800ed12 <__sfputc_r>
 800ed5e:	1c43      	adds	r3, r0, #1
 800ed60:	d1f3      	bne.n	800ed4a <__sfputs_r+0xa>
 800ed62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed64 <_vfiprintf_r>:
 800ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed68:	460d      	mov	r5, r1
 800ed6a:	b09d      	sub	sp, #116	@ 0x74
 800ed6c:	4614      	mov	r4, r2
 800ed6e:	4698      	mov	r8, r3
 800ed70:	4606      	mov	r6, r0
 800ed72:	b118      	cbz	r0, 800ed7c <_vfiprintf_r+0x18>
 800ed74:	6a03      	ldr	r3, [r0, #32]
 800ed76:	b90b      	cbnz	r3, 800ed7c <_vfiprintf_r+0x18>
 800ed78:	f7fc fd90 	bl	800b89c <__sinit>
 800ed7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed7e:	07d9      	lsls	r1, r3, #31
 800ed80:	d405      	bmi.n	800ed8e <_vfiprintf_r+0x2a>
 800ed82:	89ab      	ldrh	r3, [r5, #12]
 800ed84:	059a      	lsls	r2, r3, #22
 800ed86:	d402      	bmi.n	800ed8e <_vfiprintf_r+0x2a>
 800ed88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed8a:	f7fc ff06 	bl	800bb9a <__retarget_lock_acquire_recursive>
 800ed8e:	89ab      	ldrh	r3, [r5, #12]
 800ed90:	071b      	lsls	r3, r3, #28
 800ed92:	d501      	bpl.n	800ed98 <_vfiprintf_r+0x34>
 800ed94:	692b      	ldr	r3, [r5, #16]
 800ed96:	b99b      	cbnz	r3, 800edc0 <_vfiprintf_r+0x5c>
 800ed98:	4629      	mov	r1, r5
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f000 f938 	bl	800f010 <__swsetup_r>
 800eda0:	b170      	cbz	r0, 800edc0 <_vfiprintf_r+0x5c>
 800eda2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eda4:	07dc      	lsls	r4, r3, #31
 800eda6:	d504      	bpl.n	800edb2 <_vfiprintf_r+0x4e>
 800eda8:	f04f 30ff 	mov.w	r0, #4294967295
 800edac:	b01d      	add	sp, #116	@ 0x74
 800edae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb2:	89ab      	ldrh	r3, [r5, #12]
 800edb4:	0598      	lsls	r0, r3, #22
 800edb6:	d4f7      	bmi.n	800eda8 <_vfiprintf_r+0x44>
 800edb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edba:	f7fc feef 	bl	800bb9c <__retarget_lock_release_recursive>
 800edbe:	e7f3      	b.n	800eda8 <_vfiprintf_r+0x44>
 800edc0:	2300      	movs	r3, #0
 800edc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc4:	2320      	movs	r3, #32
 800edc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edca:	f8cd 800c 	str.w	r8, [sp, #12]
 800edce:	2330      	movs	r3, #48	@ 0x30
 800edd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef80 <_vfiprintf_r+0x21c>
 800edd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edd8:	f04f 0901 	mov.w	r9, #1
 800eddc:	4623      	mov	r3, r4
 800edde:	469a      	mov	sl, r3
 800ede0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede4:	b10a      	cbz	r2, 800edea <_vfiprintf_r+0x86>
 800ede6:	2a25      	cmp	r2, #37	@ 0x25
 800ede8:	d1f9      	bne.n	800edde <_vfiprintf_r+0x7a>
 800edea:	ebba 0b04 	subs.w	fp, sl, r4
 800edee:	d00b      	beq.n	800ee08 <_vfiprintf_r+0xa4>
 800edf0:	465b      	mov	r3, fp
 800edf2:	4622      	mov	r2, r4
 800edf4:	4629      	mov	r1, r5
 800edf6:	4630      	mov	r0, r6
 800edf8:	f7ff ffa2 	bl	800ed40 <__sfputs_r>
 800edfc:	3001      	adds	r0, #1
 800edfe:	f000 80a7 	beq.w	800ef50 <_vfiprintf_r+0x1ec>
 800ee02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee04:	445a      	add	r2, fp
 800ee06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee08:	f89a 3000 	ldrb.w	r3, [sl]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f000 809f 	beq.w	800ef50 <_vfiprintf_r+0x1ec>
 800ee12:	2300      	movs	r3, #0
 800ee14:	f04f 32ff 	mov.w	r2, #4294967295
 800ee18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee1c:	f10a 0a01 	add.w	sl, sl, #1
 800ee20:	9304      	str	r3, [sp, #16]
 800ee22:	9307      	str	r3, [sp, #28]
 800ee24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee2a:	4654      	mov	r4, sl
 800ee2c:	2205      	movs	r2, #5
 800ee2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee32:	4853      	ldr	r0, [pc, #332]	@ (800ef80 <_vfiprintf_r+0x21c>)
 800ee34:	f7f1 f9fc 	bl	8000230 <memchr>
 800ee38:	9a04      	ldr	r2, [sp, #16]
 800ee3a:	b9d8      	cbnz	r0, 800ee74 <_vfiprintf_r+0x110>
 800ee3c:	06d1      	lsls	r1, r2, #27
 800ee3e:	bf44      	itt	mi
 800ee40:	2320      	movmi	r3, #32
 800ee42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee46:	0713      	lsls	r3, r2, #28
 800ee48:	bf44      	itt	mi
 800ee4a:	232b      	movmi	r3, #43	@ 0x2b
 800ee4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee50:	f89a 3000 	ldrb.w	r3, [sl]
 800ee54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee56:	d015      	beq.n	800ee84 <_vfiprintf_r+0x120>
 800ee58:	9a07      	ldr	r2, [sp, #28]
 800ee5a:	4654      	mov	r4, sl
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	f04f 0c0a 	mov.w	ip, #10
 800ee62:	4621      	mov	r1, r4
 800ee64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee68:	3b30      	subs	r3, #48	@ 0x30
 800ee6a:	2b09      	cmp	r3, #9
 800ee6c:	d94b      	bls.n	800ef06 <_vfiprintf_r+0x1a2>
 800ee6e:	b1b0      	cbz	r0, 800ee9e <_vfiprintf_r+0x13a>
 800ee70:	9207      	str	r2, [sp, #28]
 800ee72:	e014      	b.n	800ee9e <_vfiprintf_r+0x13a>
 800ee74:	eba0 0308 	sub.w	r3, r0, r8
 800ee78:	fa09 f303 	lsl.w	r3, r9, r3
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	9304      	str	r3, [sp, #16]
 800ee80:	46a2      	mov	sl, r4
 800ee82:	e7d2      	b.n	800ee2a <_vfiprintf_r+0xc6>
 800ee84:	9b03      	ldr	r3, [sp, #12]
 800ee86:	1d19      	adds	r1, r3, #4
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	9103      	str	r1, [sp, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	bfbb      	ittet	lt
 800ee90:	425b      	neglt	r3, r3
 800ee92:	f042 0202 	orrlt.w	r2, r2, #2
 800ee96:	9307      	strge	r3, [sp, #28]
 800ee98:	9307      	strlt	r3, [sp, #28]
 800ee9a:	bfb8      	it	lt
 800ee9c:	9204      	strlt	r2, [sp, #16]
 800ee9e:	7823      	ldrb	r3, [r4, #0]
 800eea0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eea2:	d10a      	bne.n	800eeba <_vfiprintf_r+0x156>
 800eea4:	7863      	ldrb	r3, [r4, #1]
 800eea6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eea8:	d132      	bne.n	800ef10 <_vfiprintf_r+0x1ac>
 800eeaa:	9b03      	ldr	r3, [sp, #12]
 800eeac:	1d1a      	adds	r2, r3, #4
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	9203      	str	r2, [sp, #12]
 800eeb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eeb6:	3402      	adds	r4, #2
 800eeb8:	9305      	str	r3, [sp, #20]
 800eeba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef90 <_vfiprintf_r+0x22c>
 800eebe:	7821      	ldrb	r1, [r4, #0]
 800eec0:	2203      	movs	r2, #3
 800eec2:	4650      	mov	r0, sl
 800eec4:	f7f1 f9b4 	bl	8000230 <memchr>
 800eec8:	b138      	cbz	r0, 800eeda <_vfiprintf_r+0x176>
 800eeca:	9b04      	ldr	r3, [sp, #16]
 800eecc:	eba0 000a 	sub.w	r0, r0, sl
 800eed0:	2240      	movs	r2, #64	@ 0x40
 800eed2:	4082      	lsls	r2, r0
 800eed4:	4313      	orrs	r3, r2
 800eed6:	3401      	adds	r4, #1
 800eed8:	9304      	str	r3, [sp, #16]
 800eeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eede:	4829      	ldr	r0, [pc, #164]	@ (800ef84 <_vfiprintf_r+0x220>)
 800eee0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eee4:	2206      	movs	r2, #6
 800eee6:	f7f1 f9a3 	bl	8000230 <memchr>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d03f      	beq.n	800ef6e <_vfiprintf_r+0x20a>
 800eeee:	4b26      	ldr	r3, [pc, #152]	@ (800ef88 <_vfiprintf_r+0x224>)
 800eef0:	bb1b      	cbnz	r3, 800ef3a <_vfiprintf_r+0x1d6>
 800eef2:	9b03      	ldr	r3, [sp, #12]
 800eef4:	3307      	adds	r3, #7
 800eef6:	f023 0307 	bic.w	r3, r3, #7
 800eefa:	3308      	adds	r3, #8
 800eefc:	9303      	str	r3, [sp, #12]
 800eefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef00:	443b      	add	r3, r7
 800ef02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef04:	e76a      	b.n	800eddc <_vfiprintf_r+0x78>
 800ef06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	2001      	movs	r0, #1
 800ef0e:	e7a8      	b.n	800ee62 <_vfiprintf_r+0xfe>
 800ef10:	2300      	movs	r3, #0
 800ef12:	3401      	adds	r4, #1
 800ef14:	9305      	str	r3, [sp, #20]
 800ef16:	4619      	mov	r1, r3
 800ef18:	f04f 0c0a 	mov.w	ip, #10
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef22:	3a30      	subs	r2, #48	@ 0x30
 800ef24:	2a09      	cmp	r2, #9
 800ef26:	d903      	bls.n	800ef30 <_vfiprintf_r+0x1cc>
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d0c6      	beq.n	800eeba <_vfiprintf_r+0x156>
 800ef2c:	9105      	str	r1, [sp, #20]
 800ef2e:	e7c4      	b.n	800eeba <_vfiprintf_r+0x156>
 800ef30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef34:	4604      	mov	r4, r0
 800ef36:	2301      	movs	r3, #1
 800ef38:	e7f0      	b.n	800ef1c <_vfiprintf_r+0x1b8>
 800ef3a:	ab03      	add	r3, sp, #12
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	462a      	mov	r2, r5
 800ef40:	4b12      	ldr	r3, [pc, #72]	@ (800ef8c <_vfiprintf_r+0x228>)
 800ef42:	a904      	add	r1, sp, #16
 800ef44:	4630      	mov	r0, r6
 800ef46:	f7fb fe51 	bl	800abec <_printf_float>
 800ef4a:	4607      	mov	r7, r0
 800ef4c:	1c78      	adds	r0, r7, #1
 800ef4e:	d1d6      	bne.n	800eefe <_vfiprintf_r+0x19a>
 800ef50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef52:	07d9      	lsls	r1, r3, #31
 800ef54:	d405      	bmi.n	800ef62 <_vfiprintf_r+0x1fe>
 800ef56:	89ab      	ldrh	r3, [r5, #12]
 800ef58:	059a      	lsls	r2, r3, #22
 800ef5a:	d402      	bmi.n	800ef62 <_vfiprintf_r+0x1fe>
 800ef5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef5e:	f7fc fe1d 	bl	800bb9c <__retarget_lock_release_recursive>
 800ef62:	89ab      	ldrh	r3, [r5, #12]
 800ef64:	065b      	lsls	r3, r3, #25
 800ef66:	f53f af1f 	bmi.w	800eda8 <_vfiprintf_r+0x44>
 800ef6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef6c:	e71e      	b.n	800edac <_vfiprintf_r+0x48>
 800ef6e:	ab03      	add	r3, sp, #12
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	462a      	mov	r2, r5
 800ef74:	4b05      	ldr	r3, [pc, #20]	@ (800ef8c <_vfiprintf_r+0x228>)
 800ef76:	a904      	add	r1, sp, #16
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f7fc f8cf 	bl	800b11c <_printf_i>
 800ef7e:	e7e4      	b.n	800ef4a <_vfiprintf_r+0x1e6>
 800ef80:	0800f8a9 	.word	0x0800f8a9
 800ef84:	0800f8b3 	.word	0x0800f8b3
 800ef88:	0800abed 	.word	0x0800abed
 800ef8c:	0800ed41 	.word	0x0800ed41
 800ef90:	0800f8af 	.word	0x0800f8af

0800ef94 <__swbuf_r>:
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	460e      	mov	r6, r1
 800ef98:	4614      	mov	r4, r2
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	b118      	cbz	r0, 800efa6 <__swbuf_r+0x12>
 800ef9e:	6a03      	ldr	r3, [r0, #32]
 800efa0:	b90b      	cbnz	r3, 800efa6 <__swbuf_r+0x12>
 800efa2:	f7fc fc7b 	bl	800b89c <__sinit>
 800efa6:	69a3      	ldr	r3, [r4, #24]
 800efa8:	60a3      	str	r3, [r4, #8]
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	071a      	lsls	r2, r3, #28
 800efae:	d501      	bpl.n	800efb4 <__swbuf_r+0x20>
 800efb0:	6923      	ldr	r3, [r4, #16]
 800efb2:	b943      	cbnz	r3, 800efc6 <__swbuf_r+0x32>
 800efb4:	4621      	mov	r1, r4
 800efb6:	4628      	mov	r0, r5
 800efb8:	f000 f82a 	bl	800f010 <__swsetup_r>
 800efbc:	b118      	cbz	r0, 800efc6 <__swbuf_r+0x32>
 800efbe:	f04f 37ff 	mov.w	r7, #4294967295
 800efc2:	4638      	mov	r0, r7
 800efc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	6922      	ldr	r2, [r4, #16]
 800efca:	1a98      	subs	r0, r3, r2
 800efcc:	6963      	ldr	r3, [r4, #20]
 800efce:	b2f6      	uxtb	r6, r6
 800efd0:	4283      	cmp	r3, r0
 800efd2:	4637      	mov	r7, r6
 800efd4:	dc05      	bgt.n	800efe2 <__swbuf_r+0x4e>
 800efd6:	4621      	mov	r1, r4
 800efd8:	4628      	mov	r0, r5
 800efda:	f7ff fa53 	bl	800e484 <_fflush_r>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d1ed      	bne.n	800efbe <__swbuf_r+0x2a>
 800efe2:	68a3      	ldr	r3, [r4, #8]
 800efe4:	3b01      	subs	r3, #1
 800efe6:	60a3      	str	r3, [r4, #8]
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	1c5a      	adds	r2, r3, #1
 800efec:	6022      	str	r2, [r4, #0]
 800efee:	701e      	strb	r6, [r3, #0]
 800eff0:	6962      	ldr	r2, [r4, #20]
 800eff2:	1c43      	adds	r3, r0, #1
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d004      	beq.n	800f002 <__swbuf_r+0x6e>
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	07db      	lsls	r3, r3, #31
 800effc:	d5e1      	bpl.n	800efc2 <__swbuf_r+0x2e>
 800effe:	2e0a      	cmp	r6, #10
 800f000:	d1df      	bne.n	800efc2 <__swbuf_r+0x2e>
 800f002:	4621      	mov	r1, r4
 800f004:	4628      	mov	r0, r5
 800f006:	f7ff fa3d 	bl	800e484 <_fflush_r>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	d0d9      	beq.n	800efc2 <__swbuf_r+0x2e>
 800f00e:	e7d6      	b.n	800efbe <__swbuf_r+0x2a>

0800f010 <__swsetup_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4b29      	ldr	r3, [pc, #164]	@ (800f0b8 <__swsetup_r+0xa8>)
 800f014:	4605      	mov	r5, r0
 800f016:	6818      	ldr	r0, [r3, #0]
 800f018:	460c      	mov	r4, r1
 800f01a:	b118      	cbz	r0, 800f024 <__swsetup_r+0x14>
 800f01c:	6a03      	ldr	r3, [r0, #32]
 800f01e:	b90b      	cbnz	r3, 800f024 <__swsetup_r+0x14>
 800f020:	f7fc fc3c 	bl	800b89c <__sinit>
 800f024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f028:	0719      	lsls	r1, r3, #28
 800f02a:	d422      	bmi.n	800f072 <__swsetup_r+0x62>
 800f02c:	06da      	lsls	r2, r3, #27
 800f02e:	d407      	bmi.n	800f040 <__swsetup_r+0x30>
 800f030:	2209      	movs	r2, #9
 800f032:	602a      	str	r2, [r5, #0]
 800f034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f038:	81a3      	strh	r3, [r4, #12]
 800f03a:	f04f 30ff 	mov.w	r0, #4294967295
 800f03e:	e033      	b.n	800f0a8 <__swsetup_r+0x98>
 800f040:	0758      	lsls	r0, r3, #29
 800f042:	d512      	bpl.n	800f06a <__swsetup_r+0x5a>
 800f044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f046:	b141      	cbz	r1, 800f05a <__swsetup_r+0x4a>
 800f048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f04c:	4299      	cmp	r1, r3
 800f04e:	d002      	beq.n	800f056 <__swsetup_r+0x46>
 800f050:	4628      	mov	r0, r5
 800f052:	f7fd fc05 	bl	800c860 <_free_r>
 800f056:	2300      	movs	r3, #0
 800f058:	6363      	str	r3, [r4, #52]	@ 0x34
 800f05a:	89a3      	ldrh	r3, [r4, #12]
 800f05c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	2300      	movs	r3, #0
 800f064:	6063      	str	r3, [r4, #4]
 800f066:	6923      	ldr	r3, [r4, #16]
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	f043 0308 	orr.w	r3, r3, #8
 800f070:	81a3      	strh	r3, [r4, #12]
 800f072:	6923      	ldr	r3, [r4, #16]
 800f074:	b94b      	cbnz	r3, 800f08a <__swsetup_r+0x7a>
 800f076:	89a3      	ldrh	r3, [r4, #12]
 800f078:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f07c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f080:	d003      	beq.n	800f08a <__swsetup_r+0x7a>
 800f082:	4621      	mov	r1, r4
 800f084:	4628      	mov	r0, r5
 800f086:	f000 f883 	bl	800f190 <__smakebuf_r>
 800f08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08e:	f013 0201 	ands.w	r2, r3, #1
 800f092:	d00a      	beq.n	800f0aa <__swsetup_r+0x9a>
 800f094:	2200      	movs	r2, #0
 800f096:	60a2      	str	r2, [r4, #8]
 800f098:	6962      	ldr	r2, [r4, #20]
 800f09a:	4252      	negs	r2, r2
 800f09c:	61a2      	str	r2, [r4, #24]
 800f09e:	6922      	ldr	r2, [r4, #16]
 800f0a0:	b942      	cbnz	r2, 800f0b4 <__swsetup_r+0xa4>
 800f0a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0a6:	d1c5      	bne.n	800f034 <__swsetup_r+0x24>
 800f0a8:	bd38      	pop	{r3, r4, r5, pc}
 800f0aa:	0799      	lsls	r1, r3, #30
 800f0ac:	bf58      	it	pl
 800f0ae:	6962      	ldrpl	r2, [r4, #20]
 800f0b0:	60a2      	str	r2, [r4, #8]
 800f0b2:	e7f4      	b.n	800f09e <__swsetup_r+0x8e>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	e7f7      	b.n	800f0a8 <__swsetup_r+0x98>
 800f0b8:	2000017c 	.word	0x2000017c

0800f0bc <_raise_r>:
 800f0bc:	291f      	cmp	r1, #31
 800f0be:	b538      	push	{r3, r4, r5, lr}
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	d904      	bls.n	800f0d0 <_raise_r+0x14>
 800f0c6:	2316      	movs	r3, #22
 800f0c8:	6003      	str	r3, [r0, #0]
 800f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f0d2:	b112      	cbz	r2, 800f0da <_raise_r+0x1e>
 800f0d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0d8:	b94b      	cbnz	r3, 800f0ee <_raise_r+0x32>
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f000 f830 	bl	800f140 <_getpid_r>
 800f0e0:	4622      	mov	r2, r4
 800f0e2:	4601      	mov	r1, r0
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ea:	f000 b817 	b.w	800f11c <_kill_r>
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d00a      	beq.n	800f108 <_raise_r+0x4c>
 800f0f2:	1c59      	adds	r1, r3, #1
 800f0f4:	d103      	bne.n	800f0fe <_raise_r+0x42>
 800f0f6:	2316      	movs	r3, #22
 800f0f8:	6003      	str	r3, [r0, #0]
 800f0fa:	2001      	movs	r0, #1
 800f0fc:	e7e7      	b.n	800f0ce <_raise_r+0x12>
 800f0fe:	2100      	movs	r1, #0
 800f100:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f104:	4620      	mov	r0, r4
 800f106:	4798      	blx	r3
 800f108:	2000      	movs	r0, #0
 800f10a:	e7e0      	b.n	800f0ce <_raise_r+0x12>

0800f10c <raise>:
 800f10c:	4b02      	ldr	r3, [pc, #8]	@ (800f118 <raise+0xc>)
 800f10e:	4601      	mov	r1, r0
 800f110:	6818      	ldr	r0, [r3, #0]
 800f112:	f7ff bfd3 	b.w	800f0bc <_raise_r>
 800f116:	bf00      	nop
 800f118:	2000017c 	.word	0x2000017c

0800f11c <_kill_r>:
 800f11c:	b538      	push	{r3, r4, r5, lr}
 800f11e:	4d07      	ldr	r5, [pc, #28]	@ (800f13c <_kill_r+0x20>)
 800f120:	2300      	movs	r3, #0
 800f122:	4604      	mov	r4, r0
 800f124:	4608      	mov	r0, r1
 800f126:	4611      	mov	r1, r2
 800f128:	602b      	str	r3, [r5, #0]
 800f12a:	f7f3 ffc5 	bl	80030b8 <_kill>
 800f12e:	1c43      	adds	r3, r0, #1
 800f130:	d102      	bne.n	800f138 <_kill_r+0x1c>
 800f132:	682b      	ldr	r3, [r5, #0]
 800f134:	b103      	cbz	r3, 800f138 <_kill_r+0x1c>
 800f136:	6023      	str	r3, [r4, #0]
 800f138:	bd38      	pop	{r3, r4, r5, pc}
 800f13a:	bf00      	nop
 800f13c:	20005fd0 	.word	0x20005fd0

0800f140 <_getpid_r>:
 800f140:	f7f3 bfb2 	b.w	80030a8 <_getpid>

0800f144 <__swhatbuf_r>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	460c      	mov	r4, r1
 800f148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f14c:	2900      	cmp	r1, #0
 800f14e:	b096      	sub	sp, #88	@ 0x58
 800f150:	4615      	mov	r5, r2
 800f152:	461e      	mov	r6, r3
 800f154:	da0d      	bge.n	800f172 <__swhatbuf_r+0x2e>
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f15c:	f04f 0100 	mov.w	r1, #0
 800f160:	bf14      	ite	ne
 800f162:	2340      	movne	r3, #64	@ 0x40
 800f164:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f168:	2000      	movs	r0, #0
 800f16a:	6031      	str	r1, [r6, #0]
 800f16c:	602b      	str	r3, [r5, #0]
 800f16e:	b016      	add	sp, #88	@ 0x58
 800f170:	bd70      	pop	{r4, r5, r6, pc}
 800f172:	466a      	mov	r2, sp
 800f174:	f000 f848 	bl	800f208 <_fstat_r>
 800f178:	2800      	cmp	r0, #0
 800f17a:	dbec      	blt.n	800f156 <__swhatbuf_r+0x12>
 800f17c:	9901      	ldr	r1, [sp, #4]
 800f17e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f182:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f186:	4259      	negs	r1, r3
 800f188:	4159      	adcs	r1, r3
 800f18a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f18e:	e7eb      	b.n	800f168 <__swhatbuf_r+0x24>

0800f190 <__smakebuf_r>:
 800f190:	898b      	ldrh	r3, [r1, #12]
 800f192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f194:	079d      	lsls	r5, r3, #30
 800f196:	4606      	mov	r6, r0
 800f198:	460c      	mov	r4, r1
 800f19a:	d507      	bpl.n	800f1ac <__smakebuf_r+0x1c>
 800f19c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	6123      	str	r3, [r4, #16]
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	6163      	str	r3, [r4, #20]
 800f1a8:	b003      	add	sp, #12
 800f1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ac:	ab01      	add	r3, sp, #4
 800f1ae:	466a      	mov	r2, sp
 800f1b0:	f7ff ffc8 	bl	800f144 <__swhatbuf_r>
 800f1b4:	9f00      	ldr	r7, [sp, #0]
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	f7fd fbc4 	bl	800c948 <_malloc_r>
 800f1c0:	b948      	cbnz	r0, 800f1d6 <__smakebuf_r+0x46>
 800f1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1c6:	059a      	lsls	r2, r3, #22
 800f1c8:	d4ee      	bmi.n	800f1a8 <__smakebuf_r+0x18>
 800f1ca:	f023 0303 	bic.w	r3, r3, #3
 800f1ce:	f043 0302 	orr.w	r3, r3, #2
 800f1d2:	81a3      	strh	r3, [r4, #12]
 800f1d4:	e7e2      	b.n	800f19c <__smakebuf_r+0xc>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	6020      	str	r0, [r4, #0]
 800f1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	9b01      	ldr	r3, [sp, #4]
 800f1e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f1e6:	b15b      	cbz	r3, 800f200 <__smakebuf_r+0x70>
 800f1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f000 f81d 	bl	800f22c <_isatty_r>
 800f1f2:	b128      	cbz	r0, 800f200 <__smakebuf_r+0x70>
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	f023 0303 	bic.w	r3, r3, #3
 800f1fa:	f043 0301 	orr.w	r3, r3, #1
 800f1fe:	81a3      	strh	r3, [r4, #12]
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	431d      	orrs	r5, r3
 800f204:	81a5      	strh	r5, [r4, #12]
 800f206:	e7cf      	b.n	800f1a8 <__smakebuf_r+0x18>

0800f208 <_fstat_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d07      	ldr	r5, [pc, #28]	@ (800f228 <_fstat_r+0x20>)
 800f20c:	2300      	movs	r3, #0
 800f20e:	4604      	mov	r4, r0
 800f210:	4608      	mov	r0, r1
 800f212:	4611      	mov	r1, r2
 800f214:	602b      	str	r3, [r5, #0]
 800f216:	f7f3 ffaf 	bl	8003178 <_fstat>
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	d102      	bne.n	800f224 <_fstat_r+0x1c>
 800f21e:	682b      	ldr	r3, [r5, #0]
 800f220:	b103      	cbz	r3, 800f224 <_fstat_r+0x1c>
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	bd38      	pop	{r3, r4, r5, pc}
 800f226:	bf00      	nop
 800f228:	20005fd0 	.word	0x20005fd0

0800f22c <_isatty_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	4d06      	ldr	r5, [pc, #24]	@ (800f248 <_isatty_r+0x1c>)
 800f230:	2300      	movs	r3, #0
 800f232:	4604      	mov	r4, r0
 800f234:	4608      	mov	r0, r1
 800f236:	602b      	str	r3, [r5, #0]
 800f238:	f7f3 ffae 	bl	8003198 <_isatty>
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	d102      	bne.n	800f246 <_isatty_r+0x1a>
 800f240:	682b      	ldr	r3, [r5, #0]
 800f242:	b103      	cbz	r3, 800f246 <_isatty_r+0x1a>
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	20005fd0 	.word	0x20005fd0

0800f24c <_init>:
 800f24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24e:	bf00      	nop
 800f250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f252:	bc08      	pop	{r3}
 800f254:	469e      	mov	lr, r3
 800f256:	4770      	bx	lr

0800f258 <_fini>:
 800f258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25a:	bf00      	nop
 800f25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25e:	bc08      	pop	{r3}
 800f260:	469e      	mov	lr, r3
 800f262:	4770      	bx	lr
