
AirQualityDetectorRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800f2b8  0800f2b8  000102b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9f0  0800f9f0  00011334  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9f0  0800f9f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9f8  0800f9f8  00011334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9f8  0800f9f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f9fc  0800f9fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000334  20000000  0800fa00  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cb0  20000334  0800fd34  00011334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005fe4  0800fd34  00011fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011334  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216b9  00000000  00000000  00011364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000528c  00000000  00000000  00032a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00037cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001402  00000000  00000000  000396d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cde5  00000000  00000000  0003aada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258d6  00000000  00000000  000678bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010704c  00000000  00000000  0008d195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001941e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e2c  00000000  00000000  00194224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0019c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000334 	.word	0x20000334
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f29c 	.word	0x0800f29c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000338 	.word	0x20000338
 800020c:	0800f29c 	.word	0x0800f29c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f965 	bl	8001344 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000350 	.word	0x20000350

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f97e 	bl	80013a8 <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000350 	.word	0x20000350

080010b8 <SetIndicatorLEDsNum>:

void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 fa20 	bl	800150c <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000350 	.word	0x20000350

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f8a5 	bl	8001230 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	20000380 	.word	0x20000380

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f8ab 	bl	8001256 <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000380 	.word	0x20000380

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f8a1 	bl	8001256 <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000380 	.word	0x20000380

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d051      	beq.n	800121e <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	899b      	ldrh	r3, [r3, #12]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f003 f95f 	bl	8004448 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d843      	bhi.n	800121e <ReadButton+0xb6>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <ReadButton+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011fb 	.word	0x080011fb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d130      	bne.n	8001218 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80011c2:	e029      	b.n	8001218 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]

                break;
 80011d0:	e025      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10a      	bne.n	80011f2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	739a      	strb	r2, [r3, #14]
                break;
 80011f8:	e011      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d005      	beq.n	800121c <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	739a      	strb	r2, [r3, #14]
                }
                break;
 8001216:	e001      	b.n	800121c <ReadButton+0xb4>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <ReadButton+0xb6>
                break;
 800121c:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	73bb      	strb	r3, [r7, #14]
    return retval;
 8001224:	7bbb      	ldrb	r3, [r7, #14]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	809a      	strh	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	f003 f903 	bl	8004478 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001280:	f000 f9ca 	bl	8001618 <MQ9_GetRawValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f9dc 	bl	8001648 <MQ9_ConverRaw2Real>
 8001290:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f003 f8c6 	bl	8004478 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ec:	e007      	b.n	80012fe <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f003 f8bd 	bl	8004478 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800130c:	2208      	movs	r2, #8
 800130e:	4903      	ldr	r1, [pc, #12]	@ (800131c <LED_init+0x14>)
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <LED_init+0x18>)
 8001312:	f7ff ffc7 	bl	80012a4 <CreateNewSingleLED>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	20000388 	.word	0x20000388

08001324 <LED_Drive>:

void LED_Drive(bool state)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <LED_Drive+0x1c>)
 8001334:	f7ff ffc9 	bl	80012ca <UpdateSingleLED>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000388 	.word	0x20000388

08001344 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8b3a      	ldrh	r2, [r7, #24]
 800136a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8c3a      	ldrh	r2, [r7, #32]
 8001376:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001382:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800138e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800139a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014f4 <LedRowWrite+0x14c>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f003 f851 	bl	8004478 <HAL_GPIO_WritePin>
 80013d6:	e007      	b.n	80013e8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f003 f848 	bl	8004478 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 800)
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014f8 <LedRowWrite+0x150>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd08      	ble.n	800140c <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f003 f837 	bl	8004478 <HAL_GPIO_WritePin>
 800140a:	e007      	b.n	800141c <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f003 f82e 	bl	8004478 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1500)
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014fc <LedRowWrite+0x154>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	dd08      	ble.n	8001440 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f003 f81d 	bl	8004478 <HAL_GPIO_WritePin>
 800143e:	e007      	b.n	8001450 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6918      	ldr	r0, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f003 f814 	bl	8004478 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2200)
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001500 <LedRowWrite+0x158>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6998      	ldr	r0, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f003 f803 	bl	8004478 <HAL_GPIO_WritePin>
 8001472:	e007      	b.n	8001484 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6998      	ldr	r0, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b9b      	ldrh	r3, [r3, #28]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f002 fffa 	bl	8004478 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 8001484:	edd7 7a00 	vldr	s15, [r7]
 8001488:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001504 <LedRowWrite+0x15c>
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd08      	ble.n	80014a8 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f002 ffe9 	bl	8004478 <HAL_GPIO_WritePin>
 80014a6:	e007      	b.n	80014b8 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a18      	ldr	r0, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 ffe0 	bl	8004478 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 4000)
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001508 <LedRowWrite+0x160>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd08      	ble.n	80014dc <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 ffcf 	bl	8004478 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 80014da:	e007      	b.n	80014ec <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 ffc6 	bl	8004478 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	43c80000 	.word	0x43c80000
 80014f8:	44480000 	.word	0x44480000
 80014fc:	44bb8000 	.word	0x44bb8000
 8001500:	45098000 	.word	0x45098000
 8001504:	453b8000 	.word	0x453b8000
 8001508:	457a0000 	.word	0x457a0000

0800150c <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d877      	bhi.n	800160e <LedRowWriteNum+0x102>
	{
		if(num > 0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f002 ffa2 	bl	8004478 <HAL_GPIO_WritePin>
 8001534:	e007      	b.n	8001546 <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 ff99 	bl	8004478 <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d908      	bls.n	800155e <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f002 ff8e 	bl	8004478 <HAL_GPIO_WritePin>
 800155c:	e007      	b.n	800156e <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f002 ff85 	bl	8004478 <HAL_GPIO_WritePin>
		}

		if(num > 2)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d908      	bls.n	8001586 <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6918      	ldr	r0, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a9b      	ldrh	r3, [r3, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f002 ff7a 	bl	8004478 <HAL_GPIO_WritePin>
 8001584:	e007      	b.n	8001596 <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6918      	ldr	r0, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8a9b      	ldrh	r3, [r3, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 ff71 	bl	8004478 <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d908      	bls.n	80015ae <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8b9b      	ldrh	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 ff66 	bl	8004478 <HAL_GPIO_WritePin>
 80015ac:	e007      	b.n	80015be <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6998      	ldr	r0, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8b9b      	ldrh	r3, [r3, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f002 ff5d 	bl	8004478 <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d908      	bls.n	80015d6 <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a18      	ldr	r0, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 ff52 	bl	8004478 <HAL_GPIO_WritePin>
 80015d4:	e007      	b.n	80015e6 <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f002 ff49 	bl	8004478 <HAL_GPIO_WritePin>
		}

		if(num > 5)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 ff3e 	bl	8004478 <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 80015fc:	e007      	b.n	800160e <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f002 ff35 	bl	8004478 <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001620:	f001 ff52 	bl	80034c8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 800162a:	f002 f81b 	bl	8003664 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001630:	f002 f8a3 	bl	800377a <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001638:	88fb      	ldrh	r3, [r7, #6]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003dc 	.word	0x200003dc

08001648 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MQ9_ConverRaw2Real+0x48>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MQ9_ConverRaw2Real+0x4c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000

08001698 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800169c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a0:	4902      	ldr	r1, [pc, #8]	@ (80016ac <SignalSystemInit+0x14>)
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SignalSystemInit+0x18>)
 80016a4:	f7ff fd3a 	bl	800111c <CreateNewButton>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	20000390 	.word	0x20000390

080016b4 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ReadSignal+0x20>)
 80016c0:	f7ff fd52 	bl	8001168 <ReadButton>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	return Status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000390 	.word	0x20000390

080016d8 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe fdf5 	bl	80002d0 <strlen>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	480e      	ldr	r0, [pc, #56]	@ (800172c <UART_TransmitString+0x54>)
 80016f2:	f004 fb15 	bl	8005d20 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <UART_TransmitString+0x58>)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4611      	mov	r1, r2
 8001700:	8019      	strh	r1, [r3, #0]
 8001702:	3302      	adds	r3, #2
 8001704:	0c12      	lsrs	r2, r2, #16
 8001706:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fddf 	bl	80002d0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 010c 	add.w	r1, r7, #12
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <UART_TransmitString+0x54>)
 8001720:	f004 fafe 	bl	8005d20 <HAL_UART_Transmit>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000448 	.word	0x20000448
 8001730:	0800f2b8 	.word	0x0800f2b8

08001734 <UART_TransmitStringWithoutNewLine>:

void UART_TransmitStringWithoutNewLine(char* str)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7fe fdc7 	bl	80002d0 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <UART_TransmitStringWithoutNewLine+0x28>)
 800174e:	f004 fae7 	bl	8005d20 <HAL_UART_Transmit>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000448 	.word	0x20000448

08001760 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	@ 0x40
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe ff1c 	bl	80005a8 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	f107 000c 	add.w	r0, r7, #12
 8001778:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <UART_TransmitFloat+0x44>)
 800177a:	f00a f8ed 	bl	800b958 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fda4 	bl	80002d0 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	f107 010c 	add.w	r1, r7, #12
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <UART_TransmitFloat+0x48>)
 8001796:	f004 fac3 	bl	8005d20 <HAL_UART_Transmit>
}
 800179a:	bf00      	nop
 800179c:	3740      	adds	r7, #64	@ 0x40
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800f2bc 	.word	0x0800f2bc
 80017a8:	20000448 	.word	0x20000448

080017ac <HelpSendUART>:

void HelpSendUART(uint16_t NumOfElements, char** CommandMatrix)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	80fb      	strh	r3, [r7, #6]
	uint16_t iterator = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	81fb      	strh	r3, [r7, #14]
	UART_TransmitString("\n===  UART Commands ===\n");
 80017bc:	480e      	ldr	r0, [pc, #56]	@ (80017f8 <HelpSendUART+0x4c>)
 80017be:	f7ff ff8b 	bl	80016d8 <UART_TransmitString>
	while(iterator < NumOfElements)
 80017c2:	e00d      	b.n	80017e0 <HelpSendUART+0x34>
	{
		UART_TransmitStringWithoutNewLine("\t");
 80017c4:	480d      	ldr	r0, [pc, #52]	@ (80017fc <HelpSendUART+0x50>)
 80017c6:	f7ff ffb5 	bl	8001734 <UART_TransmitStringWithoutNewLine>
		UART_TransmitString(CommandMatrix[iterator]);
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff7f 	bl	80016d8 <UART_TransmitString>

		iterator++;
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	3301      	adds	r3, #1
 80017de:	81fb      	strh	r3, [r7, #14]
	while(iterator < NumOfElements)
 80017e0:	89fa      	ldrh	r2, [r7, #14]
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d3ed      	bcc.n	80017c4 <HelpSendUART+0x18>
	}
	UART_TransmitString("\n==========\n");
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HelpSendUART+0x54>)
 80017ea:	f7ff ff75 	bl	80016d8 <UART_TransmitString>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800f2c4 	.word	0x0800f2c4
 80017fc:	0800f2e0 	.word	0x0800f2e0
 8001800:	0800f2e4 	.word	0x0800f2e4

08001804 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 800180c:	4a36      	ldr	r2, [pc, #216]	@ (80018e8 <TerminalHandler+0xe4>)
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	8019      	strh	r1, [r3, #0]
 8001818:	3302      	adds	r3, #2
 800181a:	0c12      	lsrs	r2, r2, #16
 800181c:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 800181e:	4a33      	ldr	r2, [pc, #204]	@ (80018ec <TerminalHandler+0xe8>)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	7019      	strb	r1, [r3, #0]
	//HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));

	if(huart->Instance == USART1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <TerminalHandler+0xec>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d14d      	bne.n	80018d4 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <TerminalHandler+0xf0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8001840:	f000 f872 	bl	8001928 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <TerminalHandler+0xf4>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b0d      	cmp	r3, #13
 800184a:	d02f      	beq.n	80018ac <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <TerminalHandler+0xf4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d117      	bne.n	8001884 <TerminalHandler+0x80>
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <TerminalHandler+0xf0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <TerminalHandler+0xf0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <TerminalHandler+0xf8>)
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <TerminalHandler+0xf0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <TerminalHandler+0xf0>)
 8001872:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8001874:	f107 010c 	add.w	r1, r7, #12
 8001878:	230a      	movs	r3, #10
 800187a:	2205      	movs	r2, #5
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f004 fa4f 	bl	8005d20 <HAL_UART_Transmit>
 8001882:	e00c      	b.n	800189e <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <TerminalHandler+0xf0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <TerminalHandler+0xf4>)
 800188c:	7819      	ldrb	r1, [r3, #0]
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <TerminalHandler+0xf8>)
 8001890:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <TerminalHandler+0xf0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <TerminalHandler+0xf0>)
 800189c:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 800189e:	230a      	movs	r3, #10
 80018a0:	2201      	movs	r2, #1
 80018a2:	4915      	ldr	r1, [pc, #84]	@ (80018f8 <TerminalHandler+0xf4>)
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f004 fa3b 	bl	8005d20 <HAL_UART_Transmit>
 80018aa:	e013      	b.n	80018d4 <TerminalHandler+0xd0>
			//RxData[0] = '\0'; //added while debbuging
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <TerminalHandler+0xf0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <TerminalHandler+0xf4>)
 80018b4:	7819      	ldrb	r1, [r3, #0]
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <TerminalHandler+0xf8>)
 80018b8:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <TerminalHandler+0xf0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <TerminalHandler+0xfc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 80018c6:	f107 0114 	add.w	r1, r7, #20
 80018ca:	230a      	movs	r3, #10
 80018cc:	2203      	movs	r2, #3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f004 fa26 	bl	8005d20 <HAL_UART_Transmit>
			//RxData[0] = '\0'; //added while debbuging
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 80018d4:	2201      	movs	r2, #1
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <TerminalHandler+0xf4>)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f004 faa4 	bl	8005e26 <HAL_UART_Receive_IT>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800f2f4 	.word	0x0800f2f4
 80018ec:	0800f2f8 	.word	0x0800f2f8
 80018f0:	40011000 	.word	0x40011000
 80018f4:	200003a0 	.word	0x200003a0
 80018f8:	200003a4 	.word	0x200003a4
 80018fc:	200003a8 	.word	0x200003a8
 8001900:	200003da 	.word	0x200003da

08001904 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 800190c:	2201      	movs	r2, #1
 800190e:	4905      	ldr	r1, [pc, #20]	@ (8001924 <TerminalInit+0x20>)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f004 fa88 	bl	8005e26 <HAL_UART_Receive_IT>
	ClearRxBuffer();
 8001916:	f000 f807 	bl	8001928 <ClearRxBuffer>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003a4 	.word	0x200003a4

08001928 <ClearRxBuffer>:

void ClearRxBuffer()
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 50; counter++)
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e007      	b.n	8001944 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8001934:	4a09      	ldr	r2, [pc, #36]	@ (800195c <ClearRxBuffer+0x34>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 50; counter++)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b31      	cmp	r3, #49	@ 0x31
 8001948:	ddf4      	ble.n	8001934 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <ClearRxBuffer+0x38>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200003a8 	.word	0x200003a8
 8001960:	200003da 	.word	0x200003da

08001964 <IsTransferComplete>:

bool IsTransferComplete()
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	return transferCompleteFlag;
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <IsTransferComplete+0x14>)
 800196a:	781b      	ldrb	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200003da 	.word	0x200003da

0800197c <GetRxBuffer>:

char* GetRxBuffer()
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	return (char*)RxBuffer;
 8001980:	4b02      	ldr	r3, [pc, #8]	@ (800198c <GetRxBuffer+0x10>)
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	200003a8 	.word	0x200003a8

08001990 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff33 	bl	8001804 <TerminalHandler>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <StringCompareFromUART>:


bool StringCompareFromUART(char* cmd_string, char** matrix,  uint16_t numOfStrings, uint16_t* index)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]

	    uint16_t count = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	82fb      	strh	r3, [r7, #22]
	    bool foundIt = false;
 80019ba:	2300      	movs	r3, #0
 80019bc:	757b      	strb	r3, [r7, #21]
	    bool retval;
	    cmd_string = strupr(cmd_string);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f00a f836 	bl	800ba30 <strupr>
 80019c4:	60f8      	str	r0, [r7, #12]
	    while((count < numOfStrings) && (foundIt == false))
 80019c6:	e013      	b.n	80019f0 <StringCompareFromUART+0x4a>
	    {

	        if(strcmp(cmd_string, matrix[count]) == 0)
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	4413      	add	r3, r2
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7fe fc1b 	bl	8000210 <strcmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <StringCompareFromUART+0x44>
	        {
	            *index = count;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	8afa      	ldrh	r2, [r7, #22]
 80019e4:	801a      	strh	r2, [r3, #0]
	            foundIt = true;
 80019e6:	2301      	movs	r3, #1
 80019e8:	757b      	strb	r3, [r7, #21]

	        }
	        count++;
 80019ea:	8afb      	ldrh	r3, [r7, #22]
 80019ec:	3301      	adds	r3, #1
 80019ee:	82fb      	strh	r3, [r7, #22]
	    while((count < numOfStrings) && (foundIt == false))
 80019f0:	8afa      	ldrh	r2, [r7, #22]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d205      	bcs.n	8001a04 <StringCompareFromUART+0x5e>
 80019f8:	7d7b      	ldrb	r3, [r7, #21]
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e1      	bne.n	80019c8 <StringCompareFromUART+0x22>
	    }

	    if(foundIt)
 8001a04:	7d7b      	ldrb	r3, [r7, #21]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <StringCompareFromUART+0x6a>
	    {
	        retval = true;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	753b      	strb	r3, [r7, #20]
 8001a0e:	e001      	b.n	8001a14 <StringCompareFromUART+0x6e>
	    }
	    else
	    {
	        retval = false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	753b      	strb	r3, [r7, #20]
	    }

	    return retval;
 8001a14:	7d3b      	ldrb	r3, [r7, #20]

}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <DevicesInit>:
#include "Variables.h"

extern UART_HandleTypeDef huart1;

void DevicesInit()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	AlarmInit();
 8001a24:	f7ff fb58 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 8001a28:	f7ff fe36 	bl	8001698 <SignalSystemInit>
	AirQualityIncicatorInit();
 8001a2c:	f7ff fb0a 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 8001a30:	f7ff fc6a 	bl	8001308 <LED_init>
	TerminalInit(&huart1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <DevicesInit+0x20>)
 8001a36:	f7ff ff65 	bl	8001904 <TerminalInit>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000448 	.word	0x20000448

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f001 fccd 	bl	80033e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f894 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f000 f9a6 	bl	8001da0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001a54:	f000 f900 	bl	8001c58 <MX_ADC3_Init>
  MX_CRC_Init();
 8001a58:	f000 f950 	bl	8001cfc <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001a5c:	f000 f970 	bl	8001d40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DevicesInit(); // Function that initializes all of systems components
 8001a60:	f7ff ffde 	bl	8001a20 <DevicesInit>
//  osTimerStart(LEDTimerHandle, 3000);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a64:	f005 fbf2 	bl	800724c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RegimeMutex */
  RegimeMutexHandle = osMutexNew(&RegimeMutex_attributes);
 8001a68:	4828      	ldr	r0, [pc, #160]	@ (8001b0c <main+0xc8>)
 8001a6a:	f005 fe07 	bl	800767c <osMutexNew>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <main+0xcc>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* creation of LED_Blink_Mutex */
  LED_Blink_MutexHandle = osMutexNew(&LED_Blink_Mutex_attributes);
 8001a74:	4827      	ldr	r0, [pc, #156]	@ (8001b14 <main+0xd0>)
 8001a76:	f005 fe01 	bl	800767c <osMutexNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <main+0xd4>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8001a80:	4826      	ldr	r0, [pc, #152]	@ (8001b1c <main+0xd8>)
 8001a82:	f005 fdfb 	bl	800767c <osMutexNew>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a25      	ldr	r2, [pc, #148]	@ (8001b20 <main+0xdc>)
 8001a8a:	6013      	str	r3, [r2, #0]

  /* creation of LED_FSM_Mutex */
  LED_FSM_MutexHandle = osMutexNew(&LED_FSM_Mutex_attributes);
 8001a8c:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <main+0xe0>)
 8001a8e:	f005 fdf5 	bl	800767c <osMutexNew>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a24      	ldr	r2, [pc, #144]	@ (8001b28 <main+0xe4>)
 8001a96:	6013      	str	r3, [r2, #0]

  /* creation of ButtonCountMutex */
  ButtonCountMutexHandle = osMutexNew(&ButtonCountMutex_attributes);
 8001a98:	4824      	ldr	r0, [pc, #144]	@ (8001b2c <main+0xe8>)
 8001a9a:	f005 fdef 	bl	800767c <osMutexNew>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a23      	ldr	r2, [pc, #140]	@ (8001b30 <main+0xec>)
 8001aa2:	6013      	str	r3, [r2, #0]

  /* creation of SystemWorkStateMutex */
  SystemWorkStateMutexHandle = osMutexNew(&SystemWorkStateMutex_attributes);
 8001aa4:	4823      	ldr	r0, [pc, #140]	@ (8001b34 <main+0xf0>)
 8001aa6:	f005 fde9 	bl	800767c <osMutexNew>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a22      	ldr	r2, [pc, #136]	@ (8001b38 <main+0xf4>)
 8001aae:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(ButtonTimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 8001ab0:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <main+0xf8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4822      	ldr	r0, [pc, #136]	@ (8001b40 <main+0xfc>)
 8001ab8:	f005 fd1c 	bl	80074f4 <osTimerNew>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <main+0x100>)
 8001ac0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8001ac2:	4a21      	ldr	r2, [pc, #132]	@ (8001b48 <main+0x104>)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4821      	ldr	r0, [pc, #132]	@ (8001b4c <main+0x108>)
 8001ac8:	f005 fc2a 	bl	8007320 <osThreadNew>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <main+0x10c>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* creation of TerminalTask */
  TerminalTaskHandle = osThreadNew(StartTerminalTask, NULL, &TerminalTask_attributes);
 8001ad2:	4a20      	ldr	r2, [pc, #128]	@ (8001b54 <main+0x110>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4820      	ldr	r0, [pc, #128]	@ (8001b58 <main+0x114>)
 8001ad8:	f005 fc22 	bl	8007320 <osThreadNew>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a1f      	ldr	r2, [pc, #124]	@ (8001b5c <main+0x118>)
 8001ae0:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b60 <main+0x11c>)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	481f      	ldr	r0, [pc, #124]	@ (8001b64 <main+0x120>)
 8001ae8:	f005 fc1a 	bl	8007320 <osThreadNew>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <main+0x124>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* creation of SingleLEDTask */
  SingleLEDTaskHandle = osThreadNew(StartSingleLEDTask, NULL, &SingleLEDTask_attributes);
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <main+0x128>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	481e      	ldr	r0, [pc, #120]	@ (8001b70 <main+0x12c>)
 8001af8:	f005 fc12 	bl	8007320 <osThreadNew>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <main+0x130>)
 8001b00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b02:	f005 fbd7 	bl	80072b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b06:	bf00      	nop
 8001b08:	e7fd      	b.n	8001b06 <main+0xc2>
 8001b0a:	bf00      	nop
 8001b0c:	0800f548 	.word	0x0800f548
 8001b10:	200004e4 	.word	0x200004e4
 8001b14:	0800f558 	.word	0x0800f558
 8001b18:	200004e8 	.word	0x200004e8
 8001b1c:	0800f568 	.word	0x0800f568
 8001b20:	200004ec 	.word	0x200004ec
 8001b24:	0800f578 	.word	0x0800f578
 8001b28:	200004f0 	.word	0x200004f0
 8001b2c:	0800f588 	.word	0x0800f588
 8001b30:	200004f4 	.word	0x200004f4
 8001b34:	0800f598 	.word	0x0800f598
 8001b38:	200004f8 	.word	0x200004f8
 8001b3c:	0800f538 	.word	0x0800f538
 8001b40:	08002d2d 	.word	0x08002d2d
 8001b44:	200004e0 	.word	0x200004e0
 8001b48:	0800f4a8 	.word	0x0800f4a8
 8001b4c:	08002659 	.word	0x08002659
 8001b50:	200004d0 	.word	0x200004d0
 8001b54:	0800f4cc 	.word	0x0800f4cc
 8001b58:	08002939 	.word	0x08002939
 8001b5c:	200004d4 	.word	0x200004d4
 8001b60:	0800f4f0 	.word	0x0800f4f0
 8001b64:	08002b49 	.word	0x08002b49
 8001b68:	200004d8 	.word	0x200004d8
 8001b6c:	0800f514 	.word	0x0800f514
 8001b70:	08002bb9 	.word	0x08002bb9
 8001b74:	200004dc 	.word	0x200004dc

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	@ 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	2230      	movs	r2, #48	@ 0x30
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f009 ff49 	bl	800ba1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b9c:	f002 fc86 	bl	80044ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <SystemClock_Config+0xd8>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c50 <SystemClock_Config+0xd8>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bac:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <SystemClock_Config+0xd8>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a25      	ldr	r2, [pc, #148]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001be4:	2319      	movs	r3, #25
 8001be6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001be8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fcb6 	bl	800456c <HAL_RCC_OscConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c06:	f001 f911 	bl	8002e2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c0a:	f002 fc5f 	bl	80044cc <HAL_PWREx_EnableOverDrive>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c14:	f001 f90a 	bl	8002e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c18:	230f      	movs	r3, #15
 8001c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2106      	movs	r1, #6
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 ff3c 	bl	8004ab4 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001c42:	f001 f8f3 	bl	8002e2c <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3750      	adds	r7, #80	@ 0x50
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c6c:	4a21      	ldr	r2, [pc, #132]	@ (8001cf4 <MX_ADC3_Init+0x9c>)
 8001c6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c9a:	4a17      	ldr	r2, [pc, #92]	@ (8001cf8 <MX_ADC3_Init+0xa0>)
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cb8:	480d      	ldr	r0, [pc, #52]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cba:	f001 fbc1 	bl	8003440 <HAL_ADC_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001cc4:	f001 f8b2 	bl	8002e2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cda:	f001 fd5b 	bl	8003794 <HAL_ADC_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001ce4:	f001 f8a2 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200003dc 	.word	0x200003dc
 8001cf4:	40012200 	.word	0x40012200
 8001cf8:	0f000001 	.word	0x0f000001

08001cfc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d02:	4a0e      	ldr	r2, [pc, #56]	@ (8001d3c <MX_CRC_Init+0x40>)
 8001d04:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d26:	f002 f867 	bl	8003df8 <HAL_CRC_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001d30:	f001 f87c 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000424 	.word	0x20000424
 8001d3c:	40023000 	.word	0x40023000

08001d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <MX_USART1_UART_Init+0x5c>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d84:	f003 ff7e 	bl	8005c84 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d8e:	f001 f84d 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000448 	.word	0x20000448
 8001d9c:	40011000 	.word	0x40011000

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b090      	sub	sp, #64	@ 0x40
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db6:	4baf      	ldr	r3, [pc, #700]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4aae      	ldr	r2, [pc, #696]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4bac      	ldr	r3, [pc, #688]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dce:	4ba9      	ldr	r3, [pc, #676]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4aa8      	ldr	r2, [pc, #672]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4ba6      	ldr	r3, [pc, #664]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4ba3      	ldr	r3, [pc, #652]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4aa2      	ldr	r2, [pc, #648]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4ba0      	ldr	r3, [pc, #640]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	4b9d      	ldr	r3, [pc, #628]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a9c      	ldr	r2, [pc, #624]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b9a      	ldr	r3, [pc, #616]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b97      	ldr	r3, [pc, #604]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a96      	ldr	r2, [pc, #600]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b94      	ldr	r3, [pc, #592]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b91      	ldr	r3, [pc, #580]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a90      	ldr	r2, [pc, #576]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e46:	4b8b      	ldr	r3, [pc, #556]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a8a      	ldr	r2, [pc, #552]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e5e:	4b85      	ldr	r3, [pc, #532]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a84      	ldr	r2, [pc, #528]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b82      	ldr	r3, [pc, #520]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e76:	4b7f      	ldr	r3, [pc, #508]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b7c      	ldr	r3, [pc, #496]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	4b79      	ldr	r3, [pc, #484]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a78      	ldr	r2, [pc, #480]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b76      	ldr	r3, [pc, #472]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea6:	4b73      	ldr	r3, [pc, #460]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a72      	ldr	r2, [pc, #456]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b70      	ldr	r3, [pc, #448]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	486d      	ldr	r0, [pc, #436]	@ (8002078 <MX_GPIO_Init+0x2d8>)
 8001ec4:	f002 fad8 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2120      	movs	r1, #32
 8001ecc:	486b      	ldr	r0, [pc, #428]	@ (800207c <MX_GPIO_Init+0x2dc>)
 8001ece:	f002 fad3 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	210d      	movs	r1, #13
 8001ed6:	486a      	ldr	r0, [pc, #424]	@ (8002080 <MX_GPIO_Init+0x2e0>)
 8001ed8:	f002 face 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2108      	movs	r1, #8
 8001ee0:	4868      	ldr	r0, [pc, #416]	@ (8002084 <MX_GPIO_Init+0x2e4>)
 8001ee2:	f002 fac9 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001eec:	4864      	ldr	r0, [pc, #400]	@ (8002080 <MX_GPIO_Init+0x2e0>)
 8001eee:	f002 fac3 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001ef8:	4863      	ldr	r0, [pc, #396]	@ (8002088 <MX_GPIO_Init+0x2e8>)
 8001efa:	f002 fabd 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	4862      	ldr	r0, [pc, #392]	@ (800208c <MX_GPIO_Init+0x2ec>)
 8001f04:	f002 fab8 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	21c8      	movs	r1, #200	@ 0xc8
 8001f0c:	4860      	ldr	r0, [pc, #384]	@ (8002090 <MX_GPIO_Init+0x2f0>)
 8001f0e:	f002 fab3 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001f12:	2310      	movs	r3, #16
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f22:	230e      	movs	r3, #14
 8001f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4859      	ldr	r0, [pc, #356]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001f2e:	f002 f8df 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001f32:	2308      	movs	r3, #8
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f42:	4619      	mov	r1, r3
 8001f44:	4853      	ldr	r0, [pc, #332]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001f46:	f002 f8d3 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f5a:	2309      	movs	r3, #9
 8001f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f62:	4619      	mov	r1, r3
 8001f64:	484b      	ldr	r0, [pc, #300]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001f66:	f002 f8c3 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f6a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f7c:	230b      	movs	r3, #11
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4842      	ldr	r0, [pc, #264]	@ (8002090 <MX_GPIO_Init+0x2f0>)
 8001f88:	f002 f8b2 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001f8c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	483a      	ldr	r0, [pc, #232]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001faa:	f002 f8a1 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001fae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb4:	2312      	movs	r3, #18
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fc8:	4619      	mov	r1, r3
 8001fca:	482b      	ldr	r0, [pc, #172]	@ (8002078 <MX_GPIO_Init+0x2d8>)
 8001fcc:	f002 f890 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4824      	ldr	r0, [pc, #144]	@ (8002078 <MX_GPIO_Init+0x2d8>)
 8001fe8:	f002 f882 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002004:	4619      	mov	r1, r3
 8002006:	481d      	ldr	r0, [pc, #116]	@ (800207c <MX_GPIO_Init+0x2dc>)
 8002008:	f002 f872 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800200c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800201e:	230c      	movs	r3, #12
 8002020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002026:	4619      	mov	r1, r3
 8002028:	4818      	ldr	r0, [pc, #96]	@ (800208c <MX_GPIO_Init+0x2ec>)
 800202a:	f002 f861 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800202e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002040:	2301      	movs	r3, #1
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002048:	4619      	mov	r1, r3
 800204a:	4813      	ldr	r0, [pc, #76]	@ (8002098 <MX_GPIO_Init+0x2f8>)
 800204c:	f002 f850 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002050:	2360      	movs	r3, #96	@ 0x60
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002060:	230d      	movs	r3, #13
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002068:	4619      	mov	r1, r3
 800206a:	480a      	ldr	r0, [pc, #40]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 800206c:	f002 f840 	bl	80040f0 <HAL_GPIO_Init>
 8002070:	e014      	b.n	800209c <MX_GPIO_Init+0x2fc>
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40022000 	.word	0x40022000
 8002084:	40022800 	.word	0x40022800
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40020800 	.word	0x40020800
 8002090:	40021800 	.word	0x40021800
 8002094:	40021000 	.word	0x40021000
 8002098:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800209c:	2340      	movs	r3, #64	@ 0x40
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020ac:	230a      	movs	r3, #10
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	48bc      	ldr	r0, [pc, #752]	@ (80023a8 <MX_GPIO_Init+0x608>)
 80020b8:	f002 f81a 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80020bc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020ce:	230c      	movs	r3, #12
 80020d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d6:	4619      	mov	r1, r3
 80020d8:	48b4      	ldr	r0, [pc, #720]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80020da:	f002 f809 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020de:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f0:	230e      	movs	r3, #14
 80020f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f8:	4619      	mov	r1, r3
 80020fa:	48ad      	ldr	r0, [pc, #692]	@ (80023b0 <MX_GPIO_Init+0x610>)
 80020fc:	f001 fff8 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002112:	4619      	mov	r1, r3
 8002114:	48a6      	ldr	r0, [pc, #664]	@ (80023b0 <MX_GPIO_Init+0x610>)
 8002116:	f001 ffeb 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800211a:	2340      	movs	r3, #64	@ 0x40
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800211e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212c:	4619      	mov	r1, r3
 800212e:	48a1      	ldr	r0, [pc, #644]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002130:	f001 ffde 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002134:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002146:	230c      	movs	r3, #12
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800214e:	4619      	mov	r1, r3
 8002150:	4898      	ldr	r0, [pc, #608]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002152:	f001 ffcd 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002156:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800215a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002168:	230a      	movs	r3, #10
 800216a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002170:	4619      	mov	r1, r3
 8002172:	4891      	ldr	r0, [pc, #580]	@ (80023b8 <MX_GPIO_Init+0x618>)
 8002174:	f001 ffbc 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002178:	23f0      	movs	r3, #240	@ 0xf0
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002188:	230a      	movs	r3, #10
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800218c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002190:	4619      	mov	r1, r3
 8002192:	488a      	ldr	r0, [pc, #552]	@ (80023bc <MX_GPIO_Init+0x61c>)
 8002194:	f001 ffac 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002198:	23f7      	movs	r3, #247	@ 0xf7
 800219a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021a8:	230e      	movs	r3, #14
 80021aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80021ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021b0:	4619      	mov	r1, r3
 80021b2:	4883      	ldr	r0, [pc, #524]	@ (80023c0 <MX_GPIO_Init+0x620>)
 80021b4:	f001 ff9c 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80021b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021ca:	2309      	movs	r3, #9
 80021cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4875      	ldr	r0, [pc, #468]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80021d6:	f001 ff8b 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80021da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80021ec:	230a      	movs	r3, #10
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	486d      	ldr	r0, [pc, #436]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80021f8:	f001 ff7a 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021fc:	2320      	movs	r3, #32
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002210:	4619      	mov	r1, r3
 8002212:	4868      	ldr	r0, [pc, #416]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002214:	f001 ff6c 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002218:	2308      	movs	r3, #8
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002228:	230d      	movs	r3, #13
 800222a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002230:	4619      	mov	r1, r3
 8002232:	4860      	ldr	r0, [pc, #384]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002234:	f001 ff5c 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8002238:	230d      	movs	r3, #13
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002240:	2302      	movs	r3, #2
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002248:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800224c:	4619      	mov	r1, r3
 800224e:	485b      	ldr	r0, [pc, #364]	@ (80023bc <MX_GPIO_Init+0x61c>)
 8002250:	f001 ff4e 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225a:	2300      	movs	r3, #0
 800225c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002266:	4619      	mov	r1, r3
 8002268:	4856      	ldr	r0, [pc, #344]	@ (80023c4 <MX_GPIO_Init+0x624>)
 800226a:	f001 ff41 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800226e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002280:	230c      	movs	r3, #12
 8002282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002284:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	484f      	ldr	r0, [pc, #316]	@ (80023c8 <MX_GPIO_Init+0x628>)
 800228c:	f001 ff30 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002290:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022a2:	230e      	movs	r3, #14
 80022a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	4843      	ldr	r0, [pc, #268]	@ (80023bc <MX_GPIO_Init+0x61c>)
 80022ae:	f001 ff1f 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80022b2:	2308      	movs	r3, #8
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c6:	4619      	mov	r1, r3
 80022c8:	483d      	ldr	r0, [pc, #244]	@ (80023c0 <MX_GPIO_Init+0x620>)
 80022ca:	f001 ff11 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80022ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022e0:	230d      	movs	r3, #13
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e8:	4619      	mov	r1, r3
 80022ea:	4830      	ldr	r0, [pc, #192]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80022ec:	f001 ff00 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022f0:	2310      	movs	r3, #16
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002300:	4619      	mov	r1, r3
 8002302:	482c      	ldr	r0, [pc, #176]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002304:	f001 fef4 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002308:	2304      	movs	r3, #4
 800230a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002318:	230c      	movs	r3, #12
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002320:	4619      	mov	r1, r3
 8002322:	4824      	ldr	r0, [pc, #144]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002324:	f001 fee4 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002328:	f248 0304 	movw	r3, #32772	@ 0x8004
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232e:	2300      	movs	r3, #0
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233a:	4619      	mov	r1, r3
 800233c:	4823      	ldr	r0, [pc, #140]	@ (80023cc <MX_GPIO_Init+0x62c>)
 800233e:	f001 fed7 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002342:	2302      	movs	r3, #2
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002352:	2305      	movs	r3, #5
 8002354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800235a:	4619      	mov	r1, r3
 800235c:	4817      	ldr	r0, [pc, #92]	@ (80023bc <MX_GPIO_Init+0x61c>)
 800235e:	f001 fec7 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	4810      	ldr	r0, [pc, #64]	@ (80023bc <MX_GPIO_Init+0x61c>)
 800237c:	f001 feb8 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002380:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	480c      	ldr	r0, [pc, #48]	@ (80023cc <MX_GPIO_Init+0x62c>)
 800239a:	f001 fea9 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800239e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e013      	b.n	80023d0 <MX_GPIO_Init+0x630>
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40022400 	.word	0x40022400
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40022800 	.word	0x40022800
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023da:	230d      	movs	r3, #13
 80023dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	4895      	ldr	r0, [pc, #596]	@ (800263c <MX_GPIO_Init+0x89c>)
 80023e6:	f001 fe83 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80023ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023f4:	2302      	movs	r3, #2
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 80023f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023fc:	4619      	mov	r1, r3
 80023fe:	4890      	ldr	r0, [pc, #576]	@ (8002640 <MX_GPIO_Init+0x8a0>)
 8002400:	f001 fe76 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002416:	2301      	movs	r3, #1
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800241a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800241e:	4619      	mov	r1, r3
 8002420:	4888      	ldr	r0, [pc, #544]	@ (8002644 <MX_GPIO_Init+0x8a4>)
 8002422:	f001 fe65 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800242c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	4880      	ldr	r0, [pc, #512]	@ (8002640 <MX_GPIO_Init+0x8a0>)
 800243e:	f001 fe57 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002452:	2308      	movs	r3, #8
 8002454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800245a:	4619      	mov	r1, r3
 800245c:	487a      	ldr	r0, [pc, #488]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 800245e:	f001 fe47 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8002462:	2340      	movs	r3, #64	@ 0x40
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002466:	2301      	movs	r3, #1
 8002468:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800246a:	2302      	movs	r3, #2
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	4873      	ldr	r0, [pc, #460]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 800247a:	f001 fe39 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800247e:	2328      	movs	r3, #40	@ 0x28
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800248e:	230c      	movs	r3, #12
 8002490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002492:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	4868      	ldr	r0, [pc, #416]	@ (800263c <MX_GPIO_Init+0x89c>)
 800249a:	f001 fe29 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 800249e:	23c0      	movs	r3, #192	@ 0xc0
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024a6:	2302      	movs	r3, #2
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	4865      	ldr	r0, [pc, #404]	@ (800264c <MX_GPIO_Init+0x8ac>)
 80024b6:	f001 fe1b 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80024ba:	2308      	movs	r3, #8
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ca:	230c      	movs	r3, #12
 80024cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d2:	4619      	mov	r1, r3
 80024d4:	485c      	ldr	r0, [pc, #368]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 80024d6:	f001 fe0b 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024da:	2332      	movs	r3, #50	@ 0x32
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024ea:	230b      	movs	r3, #11
 80024ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	4854      	ldr	r0, [pc, #336]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 80024f6:	f001 fdfb 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024fa:	2304      	movs	r3, #4
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800250a:	2309      	movs	r3, #9
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	484e      	ldr	r0, [pc, #312]	@ (8002650 <MX_GPIO_Init+0x8b0>)
 8002516:	f001 fdeb 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800251a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800252c:	2309      	movs	r3, #9
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	4847      	ldr	r0, [pc, #284]	@ (8002654 <MX_GPIO_Init+0x8b4>)
 8002538:	f001 fdda 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800253c:	2308      	movs	r3, #8
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002550:	4619      	mov	r1, r3
 8002552:	483e      	ldr	r0, [pc, #248]	@ (800264c <MX_GPIO_Init+0x8ac>)
 8002554:	f001 fdcc 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002558:	2304      	movs	r3, #4
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255c:	2300      	movs	r3, #0
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002568:	4619      	mov	r1, r3
 800256a:	4838      	ldr	r0, [pc, #224]	@ (800264c <MX_GPIO_Init+0x8ac>)
 800256c:	f001 fdc0 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002570:	2386      	movs	r3, #134	@ 0x86
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002580:	230b      	movs	r3, #11
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002588:	4619      	mov	r1, r3
 800258a:	482e      	ldr	r0, [pc, #184]	@ (8002644 <MX_GPIO_Init+0x8a4>)
 800258c:	f001 fdb0 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002590:	2350      	movs	r3, #80	@ 0x50
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80025a0:	230d      	movs	r3, #13
 80025a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a8:	4619      	mov	r1, r3
 80025aa:	4826      	ldr	r0, [pc, #152]	@ (8002644 <MX_GPIO_Init+0x8a4>)
 80025ac:	f001 fda0 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80025b0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b6:	2312      	movs	r3, #18
 80025b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025c2:	2304      	movs	r3, #4
 80025c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ca:	4619      	mov	r1, r3
 80025cc:	481b      	ldr	r0, [pc, #108]	@ (800263c <MX_GPIO_Init+0x89c>)
 80025ce:	f001 fd8f 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80025d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025e4:	230a      	movs	r3, #10
 80025e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4818      	ldr	r0, [pc, #96]	@ (8002650 <MX_GPIO_Init+0x8b0>)
 80025f0:	f001 fd7e 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 80025f4:	2340      	movs	r3, #64	@ 0x40
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025fc:	2302      	movs	r3, #2
 80025fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002608:	4619      	mov	r1, r3
 800260a:	480c      	ldr	r0, [pc, #48]	@ (800263c <MX_GPIO_Init+0x89c>)
 800260c:	f001 fd70 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002610:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002622:	2305      	movs	r3, #5
 8002624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	4808      	ldr	r0, [pc, #32]	@ (8002650 <MX_GPIO_Init+0x8b0>)
 800262e:	f001 fd5f 	bl	80040f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002632:	bf00      	nop
 8002634:	3740      	adds	r7, #64	@ 0x40
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40022000 	.word	0x40022000
 8002644:	40020000 	.word	0x40020000
 8002648:	40020800 	.word	0x40020800
 800264c:	40021800 	.word	0x40021800
 8002650:	40020400 	.word	0x40020400
 8002654:	40020c00 	.word	0x40020c00

08002658 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Setup code
	ProgramStateFSM progStateLocal;
	float PPMValue;
	bool sentAlarmMSG = false; // flag to transmit alarm msg only once
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
	bool meassuring = false;
 8002664:	2300      	movs	r3, #0
 8002666:	73bb      	strb	r3, [r7, #14]

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002668:	4ba5      	ldr	r3, [pc, #660]	@ (8002900 <StartMainTask+0x2a8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	4618      	mov	r0, r3
 8002672:	f005 f89d 	bl	80077b0 <osMutexAcquire>
	  progStateLocal = progState;
 8002676:	4ba3      	ldr	r3, [pc, #652]	@ (8002904 <StartMainTask+0x2ac>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	737b      	strb	r3, [r7, #13]
	  osMutexRelease(RegimeMutexHandle);
 800267c:	4ba0      	ldr	r3, [pc, #640]	@ (8002900 <StartMainTask+0x2a8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f005 f8f3 	bl	800786c <osMutexRelease>

	  PPMValue = ReadGasSensor();
 8002686:	f7fe fdf8 	bl	800127a <ReadGasSensor>
 800268a:	ed87 0a02 	vstr	s0, [r7, #8]

	  switch(progStateLocal)
 800268e:	7b7b      	ldrb	r3, [r7, #13]
 8002690:	2b04      	cmp	r3, #4
 8002692:	f200 80e2 	bhi.w	800285a <StartMainTask+0x202>
 8002696:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <StartMainTask+0x44>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026b1 	.word	0x080026b1
 80026a0:	08002741 	.word	0x08002741
 80026a4:	0800274d 	.word	0x0800274d
 80026a8:	080027a7 	.word	0x080027a7
 80026ac:	08002801 	.word	0x08002801
	  {
	  	  case P_IDLE_START:

	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80026b0:	4b95      	ldr	r3, [pc, #596]	@ (8002908 <StartMainTask+0x2b0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	4618      	mov	r0, r3
 80026ba:	f005 f879 	bl	80077b0 <osMutexAcquire>

	  		  HelpSendUART(len_of_array, cmdStrings);
 80026be:	2314      	movs	r3, #20
 80026c0:	4992      	ldr	r1, [pc, #584]	@ (800290c <StartMainTask+0x2b4>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f872 	bl	80017ac <HelpSendUART>
	  		  UART_TransmitString(IdleMSG);
 80026c8:	4891      	ldr	r0, [pc, #580]	@ (8002910 <StartMainTask+0x2b8>)
 80026ca:	f7ff f805 	bl	80016d8 <UART_TransmitString>
	  		  osMutexRelease(UARTMutexHandle);
 80026ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002908 <StartMainTask+0x2b0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 f8ca 	bl	800786c <osMutexRelease>

	  		  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 80026d8:	4b89      	ldr	r3, [pc, #548]	@ (8002900 <StartMainTask+0x2a8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295
 80026e0:	4618      	mov	r0, r3
 80026e2:	f005 f865 	bl	80077b0 <osMutexAcquire>
	  		  progState = P_IDLE;
 80026e6:	4b87      	ldr	r3, [pc, #540]	@ (8002904 <StartMainTask+0x2ac>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(RegimeMutexHandle);
 80026ec:	4b84      	ldr	r3, [pc, #528]	@ (8002900 <StartMainTask+0x2a8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f005 f8bb 	bl	800786c <osMutexRelease>

	  		  // LED Blink logic //
	  		  //osTimerStart(LEDTimerCallback,500);

	  		  osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 80026f6:	4b87      	ldr	r3, [pc, #540]	@ (8002914 <StartMainTask+0x2bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f04f 31ff 	mov.w	r1, #4294967295
 80026fe:	4618      	mov	r0, r3
 8002700:	f005 f856 	bl	80077b0 <osMutexAcquire>
	  		  ledState = LED_OFF;
 8002704:	4b84      	ldr	r3, [pc, #528]	@ (8002918 <StartMainTask+0x2c0>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(LED_FSM_MutexHandle);
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <StartMainTask+0x2bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f005 f8ac 	bl	800786c <osMutexRelease>

	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 8002714:	4b81      	ldr	r3, [pc, #516]	@ (800291c <StartMainTask+0x2c4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	4618      	mov	r0, r3
 800271e:	f005 f847 	bl	80077b0 <osMutexAcquire>
	  		  progChangeState = PC_IDLE;
 8002722:	4b7f      	ldr	r3, [pc, #508]	@ (8002920 <StartMainTask+0x2c8>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(SystemWorkStateMutexHandle);
 8002728:	4b7c      	ldr	r3, [pc, #496]	@ (800291c <StartMainTask+0x2c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f005 f89d 	bl	800786c <osMutexRelease>

	  		  meassuring = false;
 8002732:	2300      	movs	r3, #0
 8002734:	73bb      	strb	r3, [r7, #14]
	  		  SetIndicatorLEDs(0); // resets the indicator
 8002736:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8002924 <StartMainTask+0x2cc>
 800273a:	f7fe fcad 	bl	8001098 <SetIndicatorLEDs>

		  break;
 800273e:	e08c      	b.n	800285a <StartMainTask+0x202>

	  	  case P_IDLE:

	  		  //System waits for configuration
	  		  meassuring = false;
 8002740:	2300      	movs	r3, #0
 8002742:	73bb      	strb	r3, [r7, #14]
	  		  osDelay(5);
 8002744:	2005      	movs	r0, #5
 8002746:	f004 fe91 	bl	800746c <osDelay>

		  break;
 800274a:	e086      	b.n	800285a <StartMainTask+0x202>

	  	  case P_WORK_S1:

	  		  meassuring = true;
 800274c:	2301      	movs	r3, #1
 800274e:	73bb      	strb	r3, [r7, #14]

	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002750:	4b6d      	ldr	r3, [pc, #436]	@ (8002908 <StartMainTask+0x2b0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	4618      	mov	r0, r3
 800275a:	f005 f829 	bl	80077b0 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 800275e:	4872      	ldr	r0, [pc, #456]	@ (8002928 <StartMainTask+0x2d0>)
 8002760:	f7fe ffba 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002764:	ed97 0a02 	vldr	s0, [r7, #8]
 8002768:	f7fe fffa 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 800276c:	4b66      	ldr	r3, [pc, #408]	@ (8002908 <StartMainTask+0x2b0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f005 f87b 	bl	800786c <osMutexRelease>
	  		  osDelay(1000);
 8002776:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800277a:	f004 fe77 	bl	800746c <osDelay>

	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 800277e:	4b67      	ldr	r3, [pc, #412]	@ (800291c <StartMainTask+0x2c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f04f 31ff 	mov.w	r1, #4294967295
 8002786:	4618      	mov	r0, r3
 8002788:	f005 f812 	bl	80077b0 <osMutexAcquire>
	  		  if(progChangeState == PC_IDLE)
 800278c:	4b64      	ldr	r3, [pc, #400]	@ (8002920 <StartMainTask+0x2c8>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <StartMainTask+0x142>
	  		  {
		  		  progChangeState = PC_WORK_START;
 8002794:	4b62      	ldr	r3, [pc, #392]	@ (8002920 <StartMainTask+0x2c8>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
	  		  }
	  	      osMutexRelease(SystemWorkStateMutexHandle);
 800279a:	4b60      	ldr	r3, [pc, #384]	@ (800291c <StartMainTask+0x2c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f005 f864 	bl	800786c <osMutexRelease>

		  break;
 80027a4:	e059      	b.n	800285a <StartMainTask+0x202>

	  	  case P_WORK_S3:

	  		  meassuring = true;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80027aa:	4b57      	ldr	r3, [pc, #348]	@ (8002908 <StartMainTask+0x2b0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f04f 31ff 	mov.w	r1, #4294967295
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fffc 	bl	80077b0 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 80027b8:	485b      	ldr	r0, [pc, #364]	@ (8002928 <StartMainTask+0x2d0>)
 80027ba:	f7fe ff8d 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 80027be:	ed97 0a02 	vldr	s0, [r7, #8]
 80027c2:	f7fe ffcd 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 80027c6:	4b50      	ldr	r3, [pc, #320]	@ (8002908 <StartMainTask+0x2b0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 f84e 	bl	800786c <osMutexRelease>
	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 80027d0:	4b52      	ldr	r3, [pc, #328]	@ (800291c <StartMainTask+0x2c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 ffe9 	bl	80077b0 <osMutexAcquire>
	  		  if(progChangeState == PC_IDLE)
 80027de:	4b50      	ldr	r3, [pc, #320]	@ (8002920 <StartMainTask+0x2c8>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <StartMainTask+0x194>
	  		  {
		  		  progChangeState = PC_WORK_START;
 80027e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <StartMainTask+0x2c8>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
	  		  }
	  	      osMutexRelease(SystemWorkStateMutexHandle);
 80027ec:	4b4b      	ldr	r3, [pc, #300]	@ (800291c <StartMainTask+0x2c4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f005 f83b 	bl	800786c <osMutexRelease>
	  		  osDelay(3000);
 80027f6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80027fa:	f004 fe37 	bl	800746c <osDelay>

		  break;
 80027fe:	e02c      	b.n	800285a <StartMainTask+0x202>

	  	  case P_WORK_S5:

	  		  meassuring = true;
 8002800:	2301      	movs	r3, #1
 8002802:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002804:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <StartMainTask+0x2b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	4618      	mov	r0, r3
 800280e:	f004 ffcf 	bl	80077b0 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 8002812:	4845      	ldr	r0, [pc, #276]	@ (8002928 <StartMainTask+0x2d0>)
 8002814:	f7fe ff60 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002818:	ed97 0a02 	vldr	s0, [r7, #8]
 800281c:	f7fe ffa0 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 8002820:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <StartMainTask+0x2b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f005 f821 	bl	800786c <osMutexRelease>
	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 800282a:	4b3c      	ldr	r3, [pc, #240]	@ (800291c <StartMainTask+0x2c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 31ff 	mov.w	r1, #4294967295
 8002832:	4618      	mov	r0, r3
 8002834:	f004 ffbc 	bl	80077b0 <osMutexAcquire>
	  		  if(progChangeState == PC_IDLE)
 8002838:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <StartMainTask+0x2c8>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <StartMainTask+0x1ee>
	  		  {
		  		  progChangeState = PC_WORK_START;
 8002840:	4b37      	ldr	r3, [pc, #220]	@ (8002920 <StartMainTask+0x2c8>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
	  		  }
	  	      osMutexRelease(SystemWorkStateMutexHandle);
 8002846:	4b35      	ldr	r3, [pc, #212]	@ (800291c <StartMainTask+0x2c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f005 f80e 	bl	800786c <osMutexRelease>

	  		  osDelay(5000);
 8002850:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002854:	f004 fe0a 	bl	800746c <osDelay>

		  break;
 8002858:	bf00      	nop
	  }
		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 800285a:	4b30      	ldr	r3, [pc, #192]	@ (800291c <StartMainTask+0x2c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f04f 31ff 	mov.w	r1, #4294967295
 8002862:	4618      	mov	r0, r3
 8002864:	f004 ffa4 	bl	80077b0 <osMutexAcquire>
		  if(progChangeState == PC_WORK_START)
 8002868:	4b2d      	ldr	r3, [pc, #180]	@ (8002920 <StartMainTask+0x2c8>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <StartMainTask+0x21e>
		  {
			  progChangeState = PC_WORK;
 8002870:	4b2b      	ldr	r3, [pc, #172]	@ (8002920 <StartMainTask+0x2c8>)
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
		  }
	      osMutexRelease(SystemWorkStateMutexHandle);
 8002876:	4b29      	ldr	r3, [pc, #164]	@ (800291c <StartMainTask+0x2c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fff6 	bl	800786c <osMutexRelease>

	  //Take action
	  //Setting the indicator system
	  if(meassuring == true)
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <StartMainTask+0x236>
	  {
		  SetIndicatorLEDs(PPMValue);
 8002886:	ed97 0a02 	vldr	s0, [r7, #8]
 800288a:	f7fe fc05 	bl	8001098 <SetIndicatorLEDs>
	  }

	  //Check for contamination
	  if(meassuring == true)
 800288e:	7bbb      	ldrb	r3, [r7, #14]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f43f aee9 	beq.w	8002668 <StartMainTask+0x10>
	  {
		  if(PPMValue > DangerousPPM)
 8002896:	edd7 7a02 	vldr	s15, [r7, #8]
 800289a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800292c <StartMainTask+0x2d4>
 800289e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	dd13      	ble.n	80028d0 <StartMainTask+0x278>
		  {
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80028a8:	4b17      	ldr	r3, [pc, #92]	@ (8002908 <StartMainTask+0x2b0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 ff7d 	bl	80077b0 <osMutexAcquire>
			  UART_TransmitString(AlertMSG);
 80028b6:	481e      	ldr	r0, [pc, #120]	@ (8002930 <StartMainTask+0x2d8>)
 80028b8:	f7fe ff0e 	bl	80016d8 <UART_TransmitString>
			  osMutexRelease(UARTMutexHandle);
 80028bc:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <StartMainTask+0x2b0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 ffd3 	bl	800786c <osMutexRelease>
			  sentAlarmMSG = true;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
			  AlarmON();
 80028ca:	f7fe fc13 	bl	80010f4 <AlarmON>
 80028ce:	e6cb      	b.n	8002668 <StartMainTask+0x10>
		  }
		  else
		  {
			  AlarmOFF();
 80028d0:	f7fe fc1a 	bl	8001108 <AlarmOFF>
			  if(sentAlarmMSG == true)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f43f aec6 	beq.w	8002668 <StartMainTask+0x10>
			  {
				  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80028dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <StartMainTask+0x2b0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 ff63 	bl	80077b0 <osMutexAcquire>
				  UART_TransmitString(RoomClearedMSG);
 80028ea:	4812      	ldr	r0, [pc, #72]	@ (8002934 <StartMainTask+0x2dc>)
 80028ec:	f7fe fef4 	bl	80016d8 <UART_TransmitString>
				  osMutexRelease(UARTMutexHandle);
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <StartMainTask+0x2b0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 ffb9 	bl	800786c <osMutexRelease>
				  sentAlarmMSG = false; // to be avaliable for next time danger happens
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 80028fe:	e6b3      	b.n	8002668 <StartMainTask+0x10>
 8002900:	200004e4 	.word	0x200004e4
 8002904:	200004fe 	.word	0x200004fe
 8002908:	200004ec 	.word	0x200004ec
 800290c:	2000010c 	.word	0x2000010c
 8002910:	20000008 	.word	0x20000008
 8002914:	200004f0 	.word	0x200004f0
 8002918:	20000500 	.word	0x20000500
 800291c:	200004f8 	.word	0x200004f8
 8002920:	200004ff 	.word	0x200004ff
 8002924:	00000000 	.word	0x00000000
 8002928:	20000028 	.word	0x20000028
 800292c:	45160000 	.word	0x45160000
 8002930:	20000030 	.word	0x20000030
 8002934:	20000054 	.word	0x20000054

08002938 <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void *argument)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	bool CommandStatus;
	float LocalPPM;
  /* Infinite loop */
  for(;;)
  {
	  if(IsTransferComplete() == true)
 8002940:	f7ff f810 	bl	8001964 <IsTransferComplete>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80e3 	beq.w	8002b12 <StartTerminalTask+0x1da>
	  {
		  CommandStatus = StringCompareFromUART(GetRxBuffer(), cmdStrings, len_of_array, &CommandIndex);
 800294c:	f7ff f816 	bl	800197c <GetRxBuffer>
 8002950:	2214      	movs	r2, #20
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	4971      	ldr	r1, [pc, #452]	@ (8002b1c <StartTerminalTask+0x1e4>)
 8002958:	f7ff f825 	bl	80019a6 <StringCompareFromUART>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]
		  if(CommandStatus == false)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	f083 0301 	eor.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d018      	beq.n	800299e <StartTerminalTask+0x66>
		  {
			  UART_TransmitString(ErrorMSG);
 800296c:	486c      	ldr	r0, [pc, #432]	@ (8002b20 <StartTerminalTask+0x1e8>)
 800296e:	f7fe feb3 	bl	80016d8 <UART_TransmitString>
			  ClearRxBuffer();
 8002972:	f7fe ffd9 	bl	8001928 <ClearRxBuffer>
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002976:	4b6b      	ldr	r3, [pc, #428]	@ (8002b24 <StartTerminalTask+0x1ec>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f04f 31ff 	mov.w	r1, #4294967295
 800297e:	4618      	mov	r0, r3
 8002980:	f004 ff16 	bl	80077b0 <osMutexAcquire>
			  HelpSendUART(len_of_array, cmdStrings);
 8002984:	2314      	movs	r3, #20
 8002986:	4965      	ldr	r1, [pc, #404]	@ (8002b1c <StartTerminalTask+0x1e4>)
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe ff0f 	bl	80017ac <HelpSendUART>
			  osMutexRelease(UARTMutexHandle);
 800298e:	4b65      	ldr	r3, [pc, #404]	@ (8002b24 <StartTerminalTask+0x1ec>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 ff6a 	bl	800786c <osMutexRelease>
			  progStateLocal = P_IDLE;
 8002998:	2301      	movs	r3, #1
 800299a:	75fb      	strb	r3, [r7, #23]
 800299c:	e0b9      	b.n	8002b12 <StartTerminalTask+0x1da>
		  }
		  else
		  {
			  ClearRxBuffer();
 800299e:	f7fe ffc3 	bl	8001928 <ClearRxBuffer>
				uartCmdState = CommandIndex;
 80029a2:	89bb      	ldrh	r3, [r7, #12]
 80029a4:	73bb      	strb	r3, [r7, #14]

				switch(uartCmdState)
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	2b14      	cmp	r3, #20
 80029aa:	f200 80a3 	bhi.w	8002af4 <StartTerminalTask+0x1bc>
 80029ae:	a201      	add	r2, pc, #4	@ (adr r2, 80029b4 <StartTerminalTask+0x7c>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	08002a09 	.word	0x08002a09
 80029b8:	08002a0f 	.word	0x08002a0f
 80029bc:	08002a1b 	.word	0x08002a1b
 80029c0:	08002a27 	.word	0x08002a27
 80029c4:	08002a33 	.word	0x08002a33
 80029c8:	08002a3d 	.word	0x08002a3d
 80029cc:	08002a4d 	.word	0x08002a4d
 80029d0:	08002a59 	.word	0x08002a59
 80029d4:	08002a65 	.word	0x08002a65
 80029d8:	08002a6f 	.word	0x08002a6f
 80029dc:	08002a79 	.word	0x08002a79
 80029e0:	08002a85 	.word	0x08002a85
 80029e4:	08002a91 	.word	0x08002a91
 80029e8:	08002a9d 	.word	0x08002a9d
 80029ec:	08002aa9 	.word	0x08002aa9
 80029f0:	08002ab5 	.word	0x08002ab5
 80029f4:	08002ac1 	.word	0x08002ac1
 80029f8:	08002acd 	.word	0x08002acd
 80029fc:	08002ad9 	.word	0x08002ad9
 8002a00:	08002ae5 	.word	0x08002ae5
 8002a04:	08002af5 	.word	0x08002af5
				{
					case cmd_0:

						progStateLocal = P_IDLE_START;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	75fb      	strb	r3, [r7, #23]

						break;
 8002a0c:	e072      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_1:

						progStateLocal = P_WORK_S1;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S1WorkStateMSG);
 8002a12:	4845      	ldr	r0, [pc, #276]	@ (8002b28 <StartTerminalTask+0x1f0>)
 8002a14:	f7fe fe60 	bl	80016d8 <UART_TransmitString>

						break;
 8002a18:	e06c      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_2:

						progStateLocal = P_WORK_S3;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S3WorkStateMSG);
 8002a1e:	4843      	ldr	r0, [pc, #268]	@ (8002b2c <StartTerminalTask+0x1f4>)
 8002a20:	f7fe fe5a 	bl	80016d8 <UART_TransmitString>

						break;
 8002a24:	e066      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_3:

						progStateLocal = P_WORK_S5;
 8002a26:	2304      	movs	r3, #4
 8002a28:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S5WorkStateMSG);
 8002a2a:	4841      	ldr	r0, [pc, #260]	@ (8002b30 <StartTerminalTask+0x1f8>)
 8002a2c:	f7fe fe54 	bl	80016d8 <UART_TransmitString>

						break;
 8002a30:	e060      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_4:

						LocalPPM = ReadGasSensor();
 8002a32:	f7fe fc22 	bl	800127a <ReadGasSensor>
 8002a36:	ed87 0a04 	vstr	s0, [r7, #16]

						break;
 8002a3a:	e05b      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_5:

						UART_TransmitString(PPM_MSG);
 8002a3c:	483d      	ldr	r0, [pc, #244]	@ (8002b34 <StartTerminalTask+0x1fc>)
 8002a3e:	f7fe fe4b 	bl	80016d8 <UART_TransmitString>
						UART_TransmitFloat(LocalPPM);
 8002a42:	ed97 0a04 	vldr	s0, [r7, #16]
 8002a46:	f7fe fe8b 	bl	8001760 <UART_TransmitFloat>

						break;
 8002a4a:	e053      	b.n	8002af4 <StartTerminalTask+0x1bc>


					case cmd_6:

						UART_TransmitString(FAN_ON);
 8002a4c:	483a      	ldr	r0, [pc, #232]	@ (8002b38 <StartTerminalTask+0x200>)
 8002a4e:	f7fe fe43 	bl	80016d8 <UART_TransmitString>


						progStateLocal = P_IDLE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]

						break;
 8002a56:	e04d      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_7:

						UART_TransmitString(FAN_OFF);
 8002a58:	4838      	ldr	r0, [pc, #224]	@ (8002b3c <StartTerminalTask+0x204>)
 8002a5a:	f7fe fe3d 	bl	80016d8 <UART_TransmitString>
						progStateLocal = P_IDLE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]

						break;
 8002a62:	e047      	b.n	8002af4 <StartTerminalTask+0x1bc>


					case cmd_8:

						AlarmON();
 8002a64:	f7fe fb46 	bl	80010f4 <AlarmON>
						progStateLocal = P_IDLE;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	75fb      	strb	r3, [r7, #23]

						break;
 8002a6c:	e042      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_9:

						AlarmOFF();
 8002a6e:	f7fe fb4b 	bl	8001108 <AlarmOFF>
						progStateLocal = P_IDLE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]

						break;
 8002a76:	e03d      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_10:

						LED_Drive(true);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f7fe fc53 	bl	8001324 <LED_Drive>
						progStateLocal = P_IDLE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]

						break;
 8002a82:	e037      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_11:

						LED_Drive(false);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fe fc4d 	bl	8001324 <LED_Drive>
						progStateLocal = P_IDLE;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]

						break;
 8002a8e:	e031      	b.n	8002af4 <StartTerminalTask+0x1bc>


					case cmd_12:

						SetIndicatorLEDsNum(0);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fe fb11 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]

						break;
 8002a9a:	e02b      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_13:

						SetIndicatorLEDsNum(1);
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7fe fb0b 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]

						break;
 8002aa6:	e025      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_14:

						SetIndicatorLEDsNum(2);
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f7fe fb05 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]

						break;
 8002ab2:	e01f      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_15:

						SetIndicatorLEDsNum(3);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f7fe faff 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]

						break;
 8002abe:	e019      	b.n	8002af4 <StartTerminalTask+0x1bc>


					case cmd_16:

						SetIndicatorLEDsNum(4);
 8002ac0:	2004      	movs	r0, #4
 8002ac2:	f7fe faf9 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]

						break;
 8002aca:	e013      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_17:

						SetIndicatorLEDsNum(5);
 8002acc:	2005      	movs	r0, #5
 8002ace:	f7fe faf3 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]

						break;
 8002ad6:	e00d      	b.n	8002af4 <StartTerminalTask+0x1bc>


					case cmd_18:

						SetIndicatorLEDsNum(6);
 8002ad8:	2006      	movs	r0, #6
 8002ada:	f7fe faed 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]

						break;
 8002ae2:	e007      	b.n	8002af4 <StartTerminalTask+0x1bc>

					case cmd_19:

						HelpSendUART(len_of_array, cmdStrings);
 8002ae4:	2314      	movs	r3, #20
 8002ae6:	490d      	ldr	r1, [pc, #52]	@ (8002b1c <StartTerminalTask+0x1e4>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fe5f 	bl	80017ac <HelpSendUART>
						progStateLocal = P_IDLE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]

						break;
 8002af2:	bf00      	nop
						break;
				}

				//ClearRxBuffer();

				osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <StartTerminalTask+0x208>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 fe57 	bl	80077b0 <osMutexAcquire>
				progState = progStateLocal;
 8002b02:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <StartTerminalTask+0x20c>)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	7013      	strb	r3, [r2, #0]
				osMutexRelease(RegimeMutexHandle);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <StartTerminalTask+0x208>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fead 	bl	800786c <osMutexRelease>
		  }
	  }

    osDelay(100);
 8002b12:	2064      	movs	r0, #100	@ 0x64
 8002b14:	f004 fcaa 	bl	800746c <osDelay>
	  if(IsTransferComplete() == true)
 8002b18:	e712      	b.n	8002940 <StartTerminalTask+0x8>
 8002b1a:	bf00      	nop
 8002b1c:	2000010c 	.word	0x2000010c
 8002b20:	200000dc 	.word	0x200000dc
 8002b24:	200004ec 	.word	0x200004ec
 8002b28:	2000007c 	.word	0x2000007c
 8002b2c:	20000094 	.word	0x20000094
 8002b30:	200000ac 	.word	0x200000ac
 8002b34:	20000028 	.word	0x20000028
 8002b38:	200000c4 	.word	0x200000c4
 8002b3c:	200000d0 	.word	0x200000d0
 8002b40:	200004e4 	.word	0x200004e4
 8002b44:	200004fe 	.word	0x200004fe

08002b48 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
	bool read_button_flag = true;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73bb      	strb	r3, [r7, #14]
	bool press_button_flag = false;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
	press_button_flag = ReadSignal(&read_button_flag);
 8002b58:	f107 030e 	add.w	r3, r7, #14
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fda9 	bl	80016b4 <ReadSignal>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]
    if(press_button_flag == true)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01b      	beq.n	8002ba4 <StartButtonTask+0x5c>
    {
    	osTimerStart(ButtonTimerHandle, 3000);
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <StartButtonTask+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8002b74:	4618      	mov	r0, r3
 8002b76:	f004 fd41 	bl	80075fc <osTimerStart>

    	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <StartButtonTask+0x68>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fe14 	bl	80077b0 <osMutexAcquire>
    	button_press_counter++;
 8002b88:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <StartButtonTask+0x6c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <StartButtonTask+0x6c>)
 8002b94:	701a      	strb	r2, [r3, #0]
    	osMutexRelease(ButtonCountMutexHandle);
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <StartButtonTask+0x68>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fe66 	bl	800786c <osMutexRelease>

    	press_button_flag = false;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
    }
    osDelay(5);
 8002ba4:	2005      	movs	r0, #5
 8002ba6:	f004 fc61 	bl	800746c <osDelay>
	press_button_flag = ReadSignal(&read_button_flag);
 8002baa:	e7d5      	b.n	8002b58 <StartButtonTask+0x10>
 8002bac:	200004e0 	.word	0x200004e0
 8002bb0:	200004f4 	.word	0x200004f4
 8002bb4:	200004fc 	.word	0x200004fc

08002bb8 <StartSingleLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSingleLEDTask */
void StartSingleLEDTask(void *argument)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSingleLEDTask */

	LED_StatusFSM ledStateLocal;
	bool quality_status_local;
	ProgramStateFSM progStateLocal;
	bool local_task_enable = false;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73bb      	strb	r3, [r7, #14]

	uint16_t delay_time = 10000;
 8002bc4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002bc8:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//============ Checking does system first time in work state after idle state ============//
	osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 8002bca:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <StartSingleLEDTask+0x154>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fdec 	bl	80077b0 <osMutexAcquire>
	if(progChangeState == PC_WORK)
 8002bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d10 <StartSingleLEDTask+0x158>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d105      	bne.n	8002bec <StartSingleLEDTask+0x34>
	{
		local_task_enable = true;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73bb      	strb	r3, [r7, #14]
		progChangeState = PC_WORK_CHECK;
 8002be4:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <StartSingleLEDTask+0x158>)
 8002be6:	2203      	movs	r2, #3
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e001      	b.n	8002bf0 <StartSingleLEDTask+0x38>
	}
	else
	{
		local_task_enable = false;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73bb      	strb	r3, [r7, #14]
	}
	osMutexRelease(SystemWorkStateMutexHandle);
 8002bf0:	4b46      	ldr	r3, [pc, #280]	@ (8002d0c <StartSingleLEDTask+0x154>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 fe39 	bl	800786c <osMutexRelease>
	//========= END  Checking does system first time in work state after idle state =========//


	//============ Update from mutex ============//
	osMutexAcquire(LED_Blink_MutexHandle, osWaitForever);
 8002bfa:	4b46      	ldr	r3, [pc, #280]	@ (8002d14 <StartSingleLEDTask+0x15c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 fdd4 	bl	80077b0 <osMutexAcquire>
		quality_status_local = quality_status;
 8002c08:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <StartSingleLEDTask+0x160>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	72fb      	strb	r3, [r7, #11]
	osMutexRelease(LED_Blink_MutexHandle);
 8002c0e:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <StartSingleLEDTask+0x15c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 fe2a 	bl	800786c <osMutexRelease>

	osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002c18:	4b40      	ldr	r3, [pc, #256]	@ (8002d1c <StartSingleLEDTask+0x164>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 fdc5 	bl	80077b0 <osMutexAcquire>
		progStateLocal = progState;
 8002c26:	4b3e      	ldr	r3, [pc, #248]	@ (8002d20 <StartSingleLEDTask+0x168>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	72bb      	strb	r3, [r7, #10]
	osMutexRelease(RegimeMutexHandle);
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d1c <StartSingleLEDTask+0x164>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 fe1b 	bl	800786c <osMutexRelease>

	osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8002c36:	4b3b      	ldr	r3, [pc, #236]	@ (8002d24 <StartSingleLEDTask+0x16c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 fdb6 	bl	80077b0 <osMutexAcquire>
		ledStateLocal = ledState;
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <StartSingleLEDTask+0x170>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(LED_FSM_MutexHandle);
 8002c4a:	4b36      	ldr	r3, [pc, #216]	@ (8002d24 <StartSingleLEDTask+0x16c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 fe0c 	bl	800786c <osMutexRelease>
	//========== END Update from mutex ==========//


	//============ Update logic state ===================//

	if(local_task_enable == true)
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <StartSingleLEDTask+0xbe>
	{
		if(quality_status_local == true)
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <StartSingleLEDTask+0xae>
		{
			ledStateLocal = LED_ON_CORRECT;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e007      	b.n	8002c76 <StartSingleLEDTask+0xbe>
		}
		else if(quality_status_local == false)
 8002c66:	7afb      	ldrb	r3, [r7, #11]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <StartSingleLEDTask+0xbe>
		{
			ledStateLocal = LED_ON_INCORRECT;
 8002c72:	2302      	movs	r3, #2
 8002c74:	73fb      	strb	r3, [r7, #15]
	else
	{
		//....
	}

	if((progStateLocal == P_IDLE_START) || (progStateLocal == P_IDLE))
 8002c76:	7abb      	ldrb	r3, [r7, #10]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <StartSingleLEDTask+0xca>
 8002c7c:	7abb      	ldrb	r3, [r7, #10]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <StartSingleLEDTask+0xd6>
	{
		LED_Drive(false);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7fe fb4e 	bl	8001324 <LED_Drive>
		ledStateLocal = LED_OFF;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e02a      	b.n	8002ce4 <StartSingleLEDTask+0x12c>
	}
	else
	{
		switch(ledStateLocal)
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d01e      	beq.n	8002cd2 <StartSingleLEDTask+0x11a>
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	dc25      	bgt.n	8002ce4 <StartSingleLEDTask+0x12c>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <StartSingleLEDTask+0xea>
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d00f      	beq.n	8002cc0 <StartSingleLEDTask+0x108>
 8002ca0:	e020      	b.n	8002ce4 <StartSingleLEDTask+0x12c>
		{
			case LED_OFF:
				LED_Drive(false);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fe fb3e 	bl	8001324 <LED_Drive>
				delay_time = 3000;
 8002ca8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002cac:	81bb      	strh	r3, [r7, #12]
				if(quality_status_local == true)
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <StartSingleLEDTask+0x102>
				{
					ledStateLocal = LED_ON_CORRECT;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
				else
				{
					ledStateLocal = LED_ON_INCORRECT;
				}

				break;
 8002cb8:	e014      	b.n	8002ce4 <StartSingleLEDTask+0x12c>
					ledStateLocal = LED_ON_INCORRECT;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	73fb      	strb	r3, [r7, #15]
				break;
 8002cbe:	e011      	b.n	8002ce4 <StartSingleLEDTask+0x12c>

			case LED_ON_CORRECT:
				LED_Drive(true);
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	f7fe fb2f 	bl	8001324 <LED_Drive>
				delay_time = 1000;
 8002cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cca:	81bb      	strh	r3, [r7, #12]
				ledStateLocal = LED_OFF;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]

				break;
 8002cd0:	e008      	b.n	8002ce4 <StartSingleLEDTask+0x12c>

			case LED_ON_INCORRECT:

				LED_Drive(true);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f7fe fb26 	bl	8001324 <LED_Drive>
				delay_time = 500;
 8002cd8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cdc:	81bb      	strh	r3, [r7, #12]
				ledStateLocal = LED_OFF;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]

				break;
 8002ce2:	bf00      	nop
		}
	}

	//========== Keep LED state for delay_time ===========//
	osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <StartSingleLEDTask+0x16c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 fd5f 	bl	80077b0 <osMutexAcquire>
		ledState = ledStateLocal;
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <StartSingleLEDTask+0x170>)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	7013      	strb	r3, [r2, #0]
	osMutexRelease(LED_FSM_MutexHandle);
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <StartSingleLEDTask+0x16c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 fdb5 	bl	800786c <osMutexRelease>
	//========== END Keep LED state for delay_time ===========//

	//============ Keep LED state for delay_time =============//
	osDelay(delay_time);
 8002d02:	89bb      	ldrh	r3, [r7, #12]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fbb1 	bl	800746c <osDelay>
	osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 8002d0a:	e75e      	b.n	8002bca <StartSingleLEDTask+0x12>
 8002d0c:	200004f8 	.word	0x200004f8
 8002d10:	200004ff 	.word	0x200004ff
 8002d14:	200004e8 	.word	0x200004e8
 8002d18:	200004fd 	.word	0x200004fd
 8002d1c:	200004e4 	.word	0x200004e4
 8002d20:	200004fe 	.word	0x200004fe
 8002d24:	200004f0 	.word	0x200004f0
 8002d28:	20000500 	.word	0x20000500

08002d2c <ButtonTimerCallback>:
  /* USER CODE END StartSingleLEDTask */
}

/* ButtonTimerCallback function */
void ButtonTimerCallback(void *argument)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTimerCallback */
	ProgramStateFSM progStateLocal;
	uint8_t ButtonCountLocal;

	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002d34:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <ButtonTimerCallback+0xc0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 fd37 	bl	80077b0 <osMutexAcquire>
	ButtonCountLocal = button_press_counter;
 8002d42:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <ButtonTimerCallback+0xc4>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	73bb      	strb	r3, [r7, #14]
	osMutexRelease(ButtonCountMutexHandle);
 8002d48:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <ButtonTimerCallback+0xc0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 fd8d 	bl	800786c <osMutexRelease>

	switch(ButtonCountLocal)
 8002d52:	7bbb      	ldrb	r3, [r7, #14]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d827      	bhi.n	8002da8 <ButtonTimerCallback+0x7c>
 8002d58:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <ButtonTimerCallback+0x34>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d79 	.word	0x08002d79
 8002d64:	08002d7f 	.word	0x08002d7f
 8002d68:	08002d8b 	.word	0x08002d8b
 8002d6c:	08002d97 	.word	0x08002d97
 8002d70:	08002da9 	.word	0x08002da9
 8002d74:	08002da3 	.word	0x08002da3
	{
		case 0:

			progStateLocal = P_IDLE_START;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]

			break;
 8002d7c:	e014      	b.n	8002da8 <ButtonTimerCallback+0x7c>

		case 1:

			progStateLocal = P_WORK_S1;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S1WorkStateMSG);
 8002d82:	481c      	ldr	r0, [pc, #112]	@ (8002df4 <ButtonTimerCallback+0xc8>)
 8002d84:	f7fe fca8 	bl	80016d8 <UART_TransmitString>

			break;
 8002d88:	e00e      	b.n	8002da8 <ButtonTimerCallback+0x7c>

		case 2:

			progStateLocal = P_WORK_S3;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S3WorkStateMSG);
 8002d8e:	481a      	ldr	r0, [pc, #104]	@ (8002df8 <ButtonTimerCallback+0xcc>)
 8002d90:	f7fe fca2 	bl	80016d8 <UART_TransmitString>

			break;
 8002d94:	e008      	b.n	8002da8 <ButtonTimerCallback+0x7c>

		case 3:

			progStateLocal = P_WORK_S5;
 8002d96:	2304      	movs	r3, #4
 8002d98:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S5WorkStateMSG);
 8002d9a:	4818      	ldr	r0, [pc, #96]	@ (8002dfc <ButtonTimerCallback+0xd0>)
 8002d9c:	f7fe fc9c 	bl	80016d8 <UART_TransmitString>

			break;
 8002da0:	e002      	b.n	8002da8 <ButtonTimerCallback+0x7c>

			break;

		case 5:

			progStateLocal = P_IDLE_START;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]

			break;
 8002da6:	bf00      	nop

	}

	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002da8:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <ButtonTimerCallback+0xc0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 fcfd 	bl	80077b0 <osMutexAcquire>
	button_press_counter = 0;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <ButtonTimerCallback+0xc4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
	osMutexRelease(ButtonCountMutexHandle);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <ButtonTimerCallback+0xc0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f004 fd53 	bl	800786c <osMutexRelease>

    osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <ButtonTimerCallback+0xd4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f04f 31ff 	mov.w	r1, #4294967295
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fcee 	bl	80077b0 <osMutexAcquire>
    progState = progStateLocal;
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002e04 <ButtonTimerCallback+0xd8>)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	7013      	strb	r3, [r2, #0]
	osMutexRelease(RegimeMutexHandle);
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <ButtonTimerCallback+0xd4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fd44 	bl	800786c <osMutexRelease>

   //osTimerStop(ButtonTimerHandle);
  /* USER CODE END ButtonTimerCallback */
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200004f4 	.word	0x200004f4
 8002df0:	200004fc 	.word	0x200004fc
 8002df4:	2000007c 	.word	0x2000007c
 8002df8:	20000094 	.word	0x20000094
 8002dfc:	200000ac 	.word	0x200000ac
 8002e00:	200004e4 	.word	0x200004e4
 8002e04:	200004fe 	.word	0x200004fe

08002e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a04      	ldr	r2, [pc, #16]	@ (8002e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e1a:	f000 faf1 	bl	8003400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40002000 	.word	0x40002000

08002e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e30:	b672      	cpsid	i
}
 8002e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <Error_Handler+0x8>

08002e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_MspInit+0x4c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	4a10      	ldr	r2, [pc, #64]	@ (8002e84 <HAL_MspInit+0x4c>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <HAL_MspInit+0x4c>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <HAL_MspInit+0x4c>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <HAL_MspInit+0x4c>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <HAL_MspInit+0x4c>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	210f      	movs	r1, #15
 8002e72:	f06f 0001 	mvn.w	r0, #1
 8002e76:	f000 ff95 	bl	8003da4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a21      	ldr	r2, [pc, #132]	@ (8002f2c <HAL_ADC_MspInit+0xa4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d13c      	bne.n	8002f24 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002eaa:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	4a20      	ldr	r2, [pc, #128]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002eb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002ec8:	f043 0320 	orr.w	r3, r3, #32
 8002ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ece:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b12      	ldr	r3, [pc, #72]	@ (8002f30 <HAL_ADC_MspInit+0xa8>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002ef2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002ef6:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	480b      	ldr	r0, [pc, #44]	@ (8002f34 <HAL_ADC_MspInit+0xac>)
 8002f08:	f001 f8f2 	bl	80040f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f10:	2303      	movs	r3, #3
 8002f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4806      	ldr	r0, [pc, #24]	@ (8002f38 <HAL_ADC_MspInit+0xb0>)
 8002f20:	f001 f8e6 	bl	80040f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	@ 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40012200 	.word	0x40012200
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40021400 	.word	0x40021400
 8002f38:	40020000 	.word	0x40020000

08002f3c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <HAL_CRC_MspInit+0x38>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10b      	bne.n	8002f66 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <HAL_CRC_MspInit+0x3c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <HAL_CRC_MspInit+0x3c>)
 8002f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5a:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <HAL_CRC_MspInit+0x3c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023000 	.word	0x40023000
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0ac      	sub	sp, #176	@ 0xb0
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f94:	f107 0318 	add.w	r3, r7, #24
 8002f98:	2284      	movs	r2, #132	@ 0x84
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f008 fd3e 	bl	800ba1e <memset>
  if(huart->Instance==USART1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a36      	ldr	r2, [pc, #216]	@ (8003080 <HAL_UART_MspInit+0x104>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d164      	bne.n	8003076 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fac:	2340      	movs	r3, #64	@ 0x40
 8002fae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb4:	f107 0318 	add.w	r3, r7, #24
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 ff93 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fc4:	f7ff ff32 	bl	8002e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002fce:	f043 0310 	orr.w	r3, r3, #16
 8002fd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe0:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	4a27      	ldr	r2, [pc, #156]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fec:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b22      	ldr	r3, [pc, #136]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffc:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6313      	str	r3, [r2, #48]	@ 0x30
 8003004:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <HAL_UART_MspInit+0x108>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003028:	2307      	movs	r3, #7
 800302a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003032:	4619      	mov	r1, r3
 8003034:	4814      	ldr	r0, [pc, #80]	@ (8003088 <HAL_UART_MspInit+0x10c>)
 8003036:	f001 f85b 	bl	80040f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800303a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800303e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003054:	2307      	movs	r3, #7
 8003056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800305a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800305e:	4619      	mov	r1, r3
 8003060:	480a      	ldr	r0, [pc, #40]	@ (800308c <HAL_UART_MspInit+0x110>)
 8003062:	f001 f845 	bl	80040f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2105      	movs	r1, #5
 800306a:	2025      	movs	r0, #37	@ 0x25
 800306c:	f000 fe9a 	bl	8003da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003070:	2025      	movs	r0, #37	@ 0x25
 8003072:	f000 feb3 	bl	8003ddc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003076:	bf00      	nop
 8003078:	37b0      	adds	r7, #176	@ 0xb0
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40011000 	.word	0x40011000
 8003084:	40023800 	.word	0x40023800
 8003088:	40020400 	.word	0x40020400
 800308c:	40020000 	.word	0x40020000

08003090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08e      	sub	sp, #56	@ 0x38
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80030a0:	4b33      	ldr	r3, [pc, #204]	@ (8003170 <HAL_InitTick+0xe0>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	4a32      	ldr	r2, [pc, #200]	@ (8003170 <HAL_InitTick+0xe0>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ac:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <HAL_InitTick+0xe0>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030b8:	f107 0210 	add.w	r2, r7, #16
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 fedc 	bl	8004e80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030d2:	f001 fead 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80030d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80030d8:	e004      	b.n	80030e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030da:	f001 fea9 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80030de:	4603      	mov	r3, r0
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e6:	4a23      	ldr	r2, [pc, #140]	@ (8003174 <HAL_InitTick+0xe4>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	3b01      	subs	r3, #1
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <HAL_InitTick+0xe8>)
 80030f4:	4a21      	ldr	r2, [pc, #132]	@ (800317c <HAL_InitTick+0xec>)
 80030f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80030f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003178 <HAL_InitTick+0xe8>)
 80030fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80030fe:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003100:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_InitTick+0xe8>)
 8003102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003104:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003106:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <HAL_InitTick+0xe8>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b1a      	ldr	r3, [pc, #104]	@ (8003178 <HAL_InitTick+0xe8>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003112:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <HAL_InitTick+0xe8>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003118:	4817      	ldr	r0, [pc, #92]	@ (8003178 <HAL_InitTick+0xe8>)
 800311a:	f002 fad3 	bl	80056c4 <HAL_TIM_Base_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003124:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11b      	bne.n	8003164 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800312c:	4812      	ldr	r0, [pc, #72]	@ (8003178 <HAL_InitTick+0xe8>)
 800312e:	f002 fb2b 	bl	8005788 <HAL_TIM_Base_Start_IT>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003138:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003140:	202d      	movs	r0, #45	@ 0x2d
 8003142:	f000 fe4b 	bl	8003ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d808      	bhi.n	800315e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800314c:	2200      	movs	r2, #0
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	202d      	movs	r0, #45	@ 0x2d
 8003152:	f000 fe27 	bl	8003da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003156:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <HAL_InitTick+0xf0>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e002      	b.n	8003164 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003164:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003168:	4618      	mov	r0, r3
 800316a:	3738      	adds	r7, #56	@ 0x38
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	431bde83 	.word	0x431bde83
 8003178:	20000504 	.word	0x20000504
 800317c:	40002000 	.word	0x40002000
 8003180:	20000160 	.word	0x20000160

08003184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <NMI_Handler+0x4>

0800318c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <HardFault_Handler+0x4>

08003194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <MemManage_Handler+0x4>

0800319c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <BusFault_Handler+0x4>

080031a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <UsageFault_Handler+0x4>

080031ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c0:	4802      	ldr	r0, [pc, #8]	@ (80031cc <USART1_IRQHandler+0x10>)
 80031c2:	f002 fe75 	bl	8005eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000448 	.word	0x20000448

080031d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80031d4:	4802      	ldr	r0, [pc, #8]	@ (80031e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80031d6:	f002 fb4f 	bl	8005878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000504 	.word	0x20000504

080031e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return 1;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_kill>:

int _kill(int pid, int sig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031fe:	f008 fcc9 	bl	800bb94 <__errno>
 8003202:	4603      	mov	r3, r0
 8003204:	2216      	movs	r2, #22
 8003206:	601a      	str	r2, [r3, #0]
  return -1;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_exit>:

void _exit (int status)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ffe7 	bl	80031f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003226:	bf00      	nop
 8003228:	e7fd      	b.n	8003226 <_exit+0x12>

0800322a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e00a      	b.n	8003252 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800323c:	f3af 8000 	nop.w
 8003240:	4601      	mov	r1, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	60ba      	str	r2, [r7, #8]
 8003248:	b2ca      	uxtb	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3301      	adds	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	429a      	cmp	r2, r3
 8003258:	dbf0      	blt.n	800323c <_read+0x12>
  }

  return len;
 800325a:	687b      	ldr	r3, [r7, #4]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e009      	b.n	800328a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	60ba      	str	r2, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	429a      	cmp	r2, r3
 8003290:	dbf1      	blt.n	8003276 <_write+0x12>
  }
  return len;
 8003292:	687b      	ldr	r3, [r7, #4]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_close>:

int _close(int file)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032c4:	605a      	str	r2, [r3, #4]
  return 0;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_isatty>:

int _isatty(int file)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032dc:	2301      	movs	r3, #1
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800330c:	4a14      	ldr	r2, [pc, #80]	@ (8003360 <_sbrk+0x5c>)
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <_sbrk+0x60>)
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003318:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	@ (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003326:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003334:	f008 fc2e 	bl	800bb94 <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20050000 	.word	0x20050000
 8003364:	00000400 	.word	0x00000400
 8003368:	20000550 	.word	0x20000550
 800336c:	20005fe8 	.word	0x20005fe8

08003370 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003374:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <SystemInit+0x20>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	4a05      	ldr	r2, [pc, #20]	@ (8003390 <SystemInit+0x20>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003398:	480d      	ldr	r0, [pc, #52]	@ (80033d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800339a:	490e      	ldr	r1, [pc, #56]	@ (80033d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800339c:	4a0e      	ldr	r2, [pc, #56]	@ (80033d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a0:	e002      	b.n	80033a8 <LoopCopyDataInit>

080033a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033a6:	3304      	adds	r3, #4

080033a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ac:	d3f9      	bcc.n	80033a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ae:	4a0b      	ldr	r2, [pc, #44]	@ (80033dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033b0:	4c0b      	ldr	r4, [pc, #44]	@ (80033e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b4:	e001      	b.n	80033ba <LoopFillZerobss>

080033b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b8:	3204      	adds	r2, #4

080033ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033bc:	d3fb      	bcc.n	80033b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033be:	f7ff ffd7 	bl	8003370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033c2:	f008 fbed 	bl	800bba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033c6:	f7fe fb3d 	bl	8001a44 <main>
  bx  lr    
 80033ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 80033d8:	0800fa00 	.word	0x0800fa00
  ldr r2, =_sbss
 80033dc:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 80033e0:	20005fe4 	.word	0x20005fe4

080033e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC_IRQHandler>

080033e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ea:	2003      	movs	r0, #3
 80033ec:	f000 fccf 	bl	8003d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033f0:	200f      	movs	r0, #15
 80033f2:	f7ff fe4d 	bl	8003090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033f6:	f7ff fd1f 	bl	8002e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_IncTick+0x20>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <HAL_IncTick+0x24>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4413      	add	r3, r2
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_IncTick+0x24>)
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000164 	.word	0x20000164
 8003424:	20000554 	.word	0x20000554

08003428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return uwTick;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_GetTick+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000554 	.word	0x20000554

08003440 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e031      	b.n	80034ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fd12 	bl	8002e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <HAL_ADC_Init+0x84>)
 8003484:	4013      	ands	r3, r2
 8003486:	f043 0202 	orr.w	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fad6 	bl	8003a40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f023 0303 	bic.w	r3, r3, #3
 80034a2:	f043 0201 	orr.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80034aa:	e001      	b.n	80034b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	ffffeefd 	.word	0xffffeefd

080034c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_Start+0x1a>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0ad      	b.n	800363e <HAL_ADC_Start+0x176>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d018      	beq.n	800352a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003508:	4b50      	ldr	r3, [pc, #320]	@ (800364c <HAL_ADC_Start+0x184>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a50      	ldr	r2, [pc, #320]	@ (8003650 <HAL_ADC_Start+0x188>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0c9a      	lsrs	r2, r3, #18
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800351c:	e002      	b.n	8003524 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3b01      	subs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d175      	bne.n	8003624 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800353c:	4b45      	ldr	r3, [pc, #276]	@ (8003654 <HAL_ADC_Start+0x18c>)
 800353e:	4013      	ands	r3, r2
 8003540:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800355e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003572:	d106      	bne.n	8003582 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003578:	f023 0206 	bic.w	r2, r3, #6
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003580:	e002      	b.n	8003588 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003598:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800359a:	4b2f      	ldr	r3, [pc, #188]	@ (8003658 <HAL_ADC_Start+0x190>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d143      	bne.n	800363c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	e03a      	b.n	800363c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a24      	ldr	r2, [pc, #144]	@ (800365c <HAL_ADC_Start+0x194>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10e      	bne.n	80035ee <HAL_ADC_Start+0x126>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035ec:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80035ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <HAL_ADC_Start+0x190>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d120      	bne.n	800363c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <HAL_ADC_Start+0x198>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d11b      	bne.n	800363c <HAL_ADC_Start+0x174>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	e00b      	b.n	800363c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	f043 0210 	orr.w	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	2000015c 	.word	0x2000015c
 8003650:	431bde83 	.word	0x431bde83
 8003654:	fffff8fe 	.word	0xfffff8fe
 8003658:	40012300 	.word	0x40012300
 800365c:	40012000 	.word	0x40012000
 8003660:	40012200 	.word	0x40012200

08003664 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003680:	d113      	bne.n	80036aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800368c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003690:	d10b      	bne.n	80036aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f043 0220 	orr.w	r2, r3, #32
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e063      	b.n	8003772 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80036aa:	f7ff febd 	bl	8003428 <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036b0:	e021      	b.n	80036f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d01d      	beq.n	80036f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_ADC_PollForConversion+0x6c>
 80036c0:	f7ff feb2 	bl	8003428 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d212      	bcs.n	80036f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d00b      	beq.n	80036f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e03d      	b.n	8003772 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d1d6      	bne.n	80036b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0212 	mvn.w	r2, #18
 800370c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d123      	bne.n	8003770 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11f      	bne.n	8003770 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003748:	2b00      	cmp	r3, #0
 800374a:	d111      	bne.n	8003770 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1c>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e136      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x28a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d93a      	bls.n	8003836 <HAL_ADC_ConfigChannel+0xa2>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037c8:	d035      	beq.n	8003836 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68d9      	ldr	r1, [r3, #12]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	3b1e      	subs	r3, #30
 80037e0:	2207      	movs	r2, #7
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	400a      	ands	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a8d      	ldr	r2, [pc, #564]	@ (8003a2c <HAL_ADC_ConfigChannel+0x298>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10a      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68d9      	ldr	r1, [r3, #12]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	061a      	lsls	r2, r3, #24
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800380e:	e035      	b.n	800387c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68d9      	ldr	r1, [r3, #12]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	b29b      	uxth	r3, r3
 8003820:	4618      	mov	r0, r3
 8003822:	4603      	mov	r3, r0
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4403      	add	r3, r0
 8003828:	3b1e      	subs	r3, #30
 800382a:	409a      	lsls	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003834:	e022      	b.n	800387c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6919      	ldr	r1, [r3, #16]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	2207      	movs	r2, #7
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43da      	mvns	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	400a      	ands	r2, r1
 8003858:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6919      	ldr	r1, [r3, #16]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	4618      	mov	r0, r3
 800386c:	4603      	mov	r3, r0
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4403      	add	r3, r0
 8003872:	409a      	lsls	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b06      	cmp	r3, #6
 8003882:	d824      	bhi.n	80038ce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3b05      	subs	r3, #5
 8003896:	221f      	movs	r2, #31
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43da      	mvns	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	400a      	ands	r2, r1
 80038a4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	3b05      	subs	r3, #5
 80038c0:	fa00 f203 	lsl.w	r2, r0, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80038cc:	e04c      	b.n	8003968 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d824      	bhi.n	8003920 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3b23      	subs	r3, #35	@ 0x23
 80038e8:	221f      	movs	r2, #31
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	400a      	ands	r2, r1
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	3b23      	subs	r3, #35	@ 0x23
 8003912:	fa00 f203 	lsl.w	r2, r0, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
 800391e:	e023      	b.n	8003968 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3b41      	subs	r3, #65	@ 0x41
 8003932:	221f      	movs	r2, #31
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43da      	mvns	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	400a      	ands	r2, r1
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	4618      	mov	r0, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	3b41      	subs	r3, #65	@ 0x41
 800395c:	fa00 f203 	lsl.w	r2, r0, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a30      	ldr	r2, [pc, #192]	@ (8003a30 <HAL_ADC_ConfigChannel+0x29c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10a      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1f4>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800397a:	d105      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800397c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a2c      	ldr	r2, [pc, #176]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003982:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003986:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a28      	ldr	r2, [pc, #160]	@ (8003a30 <HAL_ADC_ConfigChannel+0x29c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10f      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x21e>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b12      	cmp	r3, #18
 8003998:	d10b      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a25      	ldr	r2, [pc, #148]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039a4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039a6:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a22      	ldr	r2, [pc, #136]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 80039ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039b0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a30 <HAL_ADC_ConfigChannel+0x29c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d12b      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x280>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a2c <HAL_ADC_ConfigChannel+0x298>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x23a>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b11      	cmp	r3, #17
 80039cc:	d122      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80039ce:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80039d8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039da:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a15      	ldr	r2, [pc, #84]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039e4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a10      	ldr	r2, [pc, #64]	@ (8003a2c <HAL_ADC_ConfigChannel+0x298>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d111      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80039f0:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <HAL_ADC_ConfigChannel+0x2a4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a11      	ldr	r2, [pc, #68]	@ (8003a3c <HAL_ADC_ConfigChannel+0x2a8>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0c9a      	lsrs	r2, r3, #18
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a06:	e002      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f9      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	10000012 	.word	0x10000012
 8003a30:	40012000 	.word	0x40012000
 8003a34:	40012300 	.word	0x40012300
 8003a38:	2000015c 	.word	0x2000015c
 8003a3c:	431bde83 	.word	0x431bde83

08003a40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a48:	4b78      	ldr	r3, [pc, #480]	@ (8003c2c <ADC_Init+0x1ec>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a77      	ldr	r2, [pc, #476]	@ (8003c2c <ADC_Init+0x1ec>)
 8003a4e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003a52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a54:	4b75      	ldr	r3, [pc, #468]	@ (8003c2c <ADC_Init+0x1ec>)
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4973      	ldr	r1, [pc, #460]	@ (8003c2c <ADC_Init+0x1ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	4a58      	ldr	r2, [pc, #352]	@ (8003c30 <ADC_Init+0x1f0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ae2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6899      	ldr	r1, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	e00f      	b.n	8003b3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0202 	bic.w	r2, r2, #2
 8003b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01b      	beq.n	8003ba0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	3b01      	subs	r3, #1
 8003b94:	035a      	lsls	r2, r3, #13
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	e007      	b.n	8003bb0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	051a      	lsls	r2, r3, #20
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6899      	ldr	r1, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bf2:	025a      	lsls	r2, r3, #9
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6899      	ldr	r1, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	029a      	lsls	r2, r3, #10
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40012300 	.word	0x40012300
 8003c30:	0f000001 	.word	0x0f000001

08003c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c44:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <__NVIC_SetPriorityGrouping+0x40>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c50:	4013      	ands	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c62:	4a04      	ldr	r2, [pc, #16]	@ (8003c74 <__NVIC_SetPriorityGrouping+0x40>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	60d3      	str	r3, [r2, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000ed00 	.word	0xe000ed00
 8003c78:	05fa0000 	.word	0x05fa0000

08003c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <__NVIC_GetPriorityGrouping+0x18>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 0307 	and.w	r3, r3, #7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db0b      	blt.n	8003cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	4907      	ldr	r1, [pc, #28]	@ (8003cd0 <__NVIC_EnableIRQ+0x38>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	@ (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	@ (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff4c 	bl	8003c34 <__NVIC_SetPriorityGrouping>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db6:	f7ff ff61 	bl	8003c7c <__NVIC_GetPriorityGrouping>
 8003dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	6978      	ldr	r0, [r7, #20]
 8003dc2:	f7ff ffb1 	bl	8003d28 <NVIC_EncodePriority>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff80 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003dd4:	bf00      	nop
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff54 	bl	8003c98 <__NVIC_EnableIRQ>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e054      	b.n	8003eb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7f5b      	ldrb	r3, [r3, #29]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff f88e 	bl	8002f3c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	791b      	ldrb	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10c      	bne.n	8003e48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a22      	ldr	r2, [pc, #136]	@ (8003ebc <HAL_CRC_Init+0xc4>)
 8003e34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0218 	bic.w	r2, r2, #24
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	e00c      	b.n	8003e62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6899      	ldr	r1, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f834 	bl	8003ec0 <HAL_CRCEx_Polynomial_Set>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e028      	b.n	8003eb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	795b      	ldrb	r3, [r3, #5]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e72:	611a      	str	r2, [r3, #16]
 8003e74:	e004      	b.n	8003e80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6912      	ldr	r2, [r2, #16]
 8003e7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	04c11db7 	.word	0x04c11db7

08003ec0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003ed0:	231f      	movs	r3, #31
 8003ed2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003ed4:	bf00      	nop
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	613a      	str	r2, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <HAL_CRCEx_Polynomial_Set+0x34>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b18      	cmp	r3, #24
 8003ef8:	d846      	bhi.n	8003f88 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f8f 	.word	0x08003f8f
 8003f04:	08003f89 	.word	0x08003f89
 8003f08:	08003f89 	.word	0x08003f89
 8003f0c:	08003f89 	.word	0x08003f89
 8003f10:	08003f89 	.word	0x08003f89
 8003f14:	08003f89 	.word	0x08003f89
 8003f18:	08003f89 	.word	0x08003f89
 8003f1c:	08003f89 	.word	0x08003f89
 8003f20:	08003f7d 	.word	0x08003f7d
 8003f24:	08003f89 	.word	0x08003f89
 8003f28:	08003f89 	.word	0x08003f89
 8003f2c:	08003f89 	.word	0x08003f89
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	08003f89 	.word	0x08003f89
 8003f3c:	08003f89 	.word	0x08003f89
 8003f40:	08003f71 	.word	0x08003f71
 8003f44:	08003f89 	.word	0x08003f89
 8003f48:	08003f89 	.word	0x08003f89
 8003f4c:	08003f89 	.word	0x08003f89
 8003f50:	08003f89 	.word	0x08003f89
 8003f54:	08003f89 	.word	0x08003f89
 8003f58:	08003f89 	.word	0x08003f89
 8003f5c:	08003f89 	.word	0x08003f89
 8003f60:	08003f65 	.word	0x08003f65
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d913      	bls.n	8003f92 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f6e:	e010      	b.n	8003f92 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b07      	cmp	r3, #7
 8003f74:	d90f      	bls.n	8003f96 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f7a:	e00c      	b.n	8003f96 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d90b      	bls.n	8003f9a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f86:	e008      	b.n	8003f9a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8c:	e006      	b.n	8003f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e004      	b.n	8003f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f9a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 0118 	bic.w	r1, r3, #24
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fda:	f7ff fa25 	bl	8003428 <HAL_GetTick>
 8003fde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d008      	beq.n	8003ffe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	@ 0x80
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e052      	b.n	80040a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0216 	bic.w	r2, r2, #22
 800400c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800401c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_DMA_Abort+0x62>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0208 	bic.w	r2, r2, #8
 800403c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800404e:	e013      	b.n	8004078 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004050:	f7ff f9ea 	bl	8003428 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b05      	cmp	r3, #5
 800405c:	d90c      	bls.n	8004078 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2203      	movs	r2, #3
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e015      	b.n	80040a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e4      	bne.n	8004050 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408a:	223f      	movs	r2, #63	@ 0x3f
 800408c:	409a      	lsls	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d004      	beq.n	80040ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2280      	movs	r2, #128	@ 0x80
 80040c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e00c      	b.n	80040e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2205      	movs	r2, #5
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	@ 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	e175      	b.n	80043fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004110:	2201      	movs	r2, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	f040 8164 	bne.w	80043f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d005      	beq.n	8004146 <HAL_GPIO_Init+0x56>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d130      	bne.n	80041a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	2203      	movs	r2, #3
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800417c:	2201      	movs	r2, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 0201 	and.w	r2, r3, #1
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d017      	beq.n	80041e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	2203      	movs	r2, #3
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d123      	bne.n	8004238 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	08da      	lsrs	r2, r3, #3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3208      	adds	r2, #8
 80041f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	220f      	movs	r2, #15
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	08da      	lsrs	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3208      	adds	r2, #8
 8004232:	69b9      	ldr	r1, [r7, #24]
 8004234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2203      	movs	r2, #3
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0203 	and.w	r2, r3, #3
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80be 	beq.w	80043f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427a:	4b66      	ldr	r3, [pc, #408]	@ (8004414 <HAL_GPIO_Init+0x324>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	4a65      	ldr	r2, [pc, #404]	@ (8004414 <HAL_GPIO_Init+0x324>)
 8004280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004284:	6453      	str	r3, [r2, #68]	@ 0x44
 8004286:	4b63      	ldr	r3, [pc, #396]	@ (8004414 <HAL_GPIO_Init+0x324>)
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004292:	4a61      	ldr	r2, [pc, #388]	@ (8004418 <HAL_GPIO_Init+0x328>)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	089b      	lsrs	r3, r3, #2
 8004298:	3302      	adds	r3, #2
 800429a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	220f      	movs	r2, #15
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a58      	ldr	r2, [pc, #352]	@ (800441c <HAL_GPIO_Init+0x32c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d037      	beq.n	800432e <HAL_GPIO_Init+0x23e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a57      	ldr	r2, [pc, #348]	@ (8004420 <HAL_GPIO_Init+0x330>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <HAL_GPIO_Init+0x23a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a56      	ldr	r2, [pc, #344]	@ (8004424 <HAL_GPIO_Init+0x334>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02b      	beq.n	8004326 <HAL_GPIO_Init+0x236>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a55      	ldr	r2, [pc, #340]	@ (8004428 <HAL_GPIO_Init+0x338>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d025      	beq.n	8004322 <HAL_GPIO_Init+0x232>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a54      	ldr	r2, [pc, #336]	@ (800442c <HAL_GPIO_Init+0x33c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01f      	beq.n	800431e <HAL_GPIO_Init+0x22e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a53      	ldr	r2, [pc, #332]	@ (8004430 <HAL_GPIO_Init+0x340>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d019      	beq.n	800431a <HAL_GPIO_Init+0x22a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a52      	ldr	r2, [pc, #328]	@ (8004434 <HAL_GPIO_Init+0x344>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_GPIO_Init+0x226>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a51      	ldr	r2, [pc, #324]	@ (8004438 <HAL_GPIO_Init+0x348>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00d      	beq.n	8004312 <HAL_GPIO_Init+0x222>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a50      	ldr	r2, [pc, #320]	@ (800443c <HAL_GPIO_Init+0x34c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <HAL_GPIO_Init+0x21e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a4f      	ldr	r2, [pc, #316]	@ (8004440 <HAL_GPIO_Init+0x350>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_GPIO_Init+0x21a>
 8004306:	2309      	movs	r3, #9
 8004308:	e012      	b.n	8004330 <HAL_GPIO_Init+0x240>
 800430a:	230a      	movs	r3, #10
 800430c:	e010      	b.n	8004330 <HAL_GPIO_Init+0x240>
 800430e:	2308      	movs	r3, #8
 8004310:	e00e      	b.n	8004330 <HAL_GPIO_Init+0x240>
 8004312:	2307      	movs	r3, #7
 8004314:	e00c      	b.n	8004330 <HAL_GPIO_Init+0x240>
 8004316:	2306      	movs	r3, #6
 8004318:	e00a      	b.n	8004330 <HAL_GPIO_Init+0x240>
 800431a:	2305      	movs	r3, #5
 800431c:	e008      	b.n	8004330 <HAL_GPIO_Init+0x240>
 800431e:	2304      	movs	r3, #4
 8004320:	e006      	b.n	8004330 <HAL_GPIO_Init+0x240>
 8004322:	2303      	movs	r3, #3
 8004324:	e004      	b.n	8004330 <HAL_GPIO_Init+0x240>
 8004326:	2302      	movs	r3, #2
 8004328:	e002      	b.n	8004330 <HAL_GPIO_Init+0x240>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_GPIO_Init+0x240>
 800432e:	2300      	movs	r3, #0
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	f002 0203 	and.w	r2, r2, #3
 8004336:	0092      	lsls	r2, r2, #2
 8004338:	4093      	lsls	r3, r2
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004340:	4935      	ldr	r1, [pc, #212]	@ (8004418 <HAL_GPIO_Init+0x328>)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800434e:	4b3d      	ldr	r3, [pc, #244]	@ (8004444 <HAL_GPIO_Init+0x354>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004372:	4a34      	ldr	r2, [pc, #208]	@ (8004444 <HAL_GPIO_Init+0x354>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004378:	4b32      	ldr	r3, [pc, #200]	@ (8004444 <HAL_GPIO_Init+0x354>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800439c:	4a29      	ldr	r2, [pc, #164]	@ (8004444 <HAL_GPIO_Init+0x354>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043a2:	4b28      	ldr	r3, [pc, #160]	@ (8004444 <HAL_GPIO_Init+0x354>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004444 <HAL_GPIO_Init+0x354>)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <HAL_GPIO_Init+0x354>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043f0:	4a14      	ldr	r2, [pc, #80]	@ (8004444 <HAL_GPIO_Init+0x354>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3301      	adds	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	f67f ae86 	bls.w	8004110 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	3724      	adds	r7, #36	@ 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	40013800 	.word	0x40013800
 800441c:	40020000 	.word	0x40020000
 8004420:	40020400 	.word	0x40020400
 8004424:	40020800 	.word	0x40020800
 8004428:	40020c00 	.word	0x40020c00
 800442c:	40021000 	.word	0x40021000
 8004430:	40021400 	.word	0x40021400
 8004434:	40021800 	.word	0x40021800
 8004438:	40021c00 	.word	0x40021c00
 800443c:	40022000 	.word	0x40022000
 8004440:	40022400 	.word	0x40022400
 8004444:	40013c00 	.word	0x40013c00

08004448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e001      	b.n	800446a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
 8004484:	4613      	mov	r3, r2
 8004486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004488:	787b      	ldrb	r3, [r7, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004494:	e003      	b.n	800449e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	041a      	lsls	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	619a      	str	r2, [r3, #24]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a04      	ldr	r2, [pc, #16]	@ (80044c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40007000 	.word	0x40007000

080044cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	4b23      	ldr	r3, [pc, #140]	@ (8004564 <HAL_PWREx_EnableOverDrive+0x98>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	4a22      	ldr	r2, [pc, #136]	@ (8004564 <HAL_PWREx_EnableOverDrive+0x98>)
 80044dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044e2:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <HAL_PWREx_EnableOverDrive+0x98>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044fa:	f7fe ff95 	bl	8003428 <HAL_GetTick>
 80044fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004500:	e009      	b.n	8004516 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004502:	f7fe ff91 	bl	8003428 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004510:	d901      	bls.n	8004516 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e022      	b.n	800455c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004516:	4b14      	ldr	r3, [pc, #80]	@ (8004568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004522:	d1ee      	bne.n	8004502 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004524:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0f      	ldr	r2, [pc, #60]	@ (8004568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004530:	f7fe ff7a 	bl	8003428 <HAL_GetTick>
 8004534:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004536:	e009      	b.n	800454c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004538:	f7fe ff76 	bl	8003428 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004546:	d901      	bls.n	800454c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e007      	b.n	800455c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004558:	d1ee      	bne.n	8004538 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40023800 	.word	0x40023800
 8004568:	40007000 	.word	0x40007000

0800456c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e291      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8087 	beq.w	800469e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004590:	4b96      	ldr	r3, [pc, #600]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b04      	cmp	r3, #4
 800459a:	d00c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459c:	4b93      	ldr	r3, [pc, #588]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d112      	bne.n	80045ce <HAL_RCC_OscConfig+0x62>
 80045a8:	4b90      	ldr	r3, [pc, #576]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045b4:	d10b      	bne.n	80045ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b6:	4b8d      	ldr	r3, [pc, #564]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d06c      	beq.n	800469c <HAL_RCC_OscConfig+0x130>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d168      	bne.n	800469c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e26b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_OscConfig+0x7a>
 80045d8:	4b84      	ldr	r3, [pc, #528]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a83      	ldr	r2, [pc, #524]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e02e      	b.n	8004644 <HAL_RCC_OscConfig+0xd8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x9c>
 80045ee:	4b7f      	ldr	r3, [pc, #508]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7e      	ldr	r2, [pc, #504]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80045f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b7c      	ldr	r3, [pc, #496]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7b      	ldr	r2, [pc, #492]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e01d      	b.n	8004644 <HAL_RCC_OscConfig+0xd8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0xc0>
 8004612:	4b76      	ldr	r3, [pc, #472]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a75      	ldr	r2, [pc, #468]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b73      	ldr	r3, [pc, #460]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a72      	ldr	r2, [pc, #456]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0xd8>
 800462c:	4b6f      	ldr	r3, [pc, #444]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6e      	ldr	r2, [pc, #440]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	4b6c      	ldr	r3, [pc, #432]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6b      	ldr	r2, [pc, #428]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 800463e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d013      	beq.n	8004674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fe feec 	bl	8003428 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004654:	f7fe fee8 	bl	8003428 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	@ 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e21f      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004666:	4b61      	ldr	r3, [pc, #388]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0xe8>
 8004672:	e014      	b.n	800469e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fe fed8 	bl	8003428 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800467c:	f7fe fed4 	bl	8003428 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	@ 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e20b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468e:	4b57      	ldr	r3, [pc, #348]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x110>
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d069      	beq.n	800477e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046aa:	4b50      	ldr	r3, [pc, #320]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b6:	4b4d      	ldr	r3, [pc, #308]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d11c      	bne.n	80046fc <HAL_RCC_OscConfig+0x190>
 80046c2:	4b4a      	ldr	r3, [pc, #296]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d116      	bne.n	80046fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ce:	4b47      	ldr	r3, [pc, #284]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_RCC_OscConfig+0x17a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e1df      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e6:	4b41      	ldr	r3, [pc, #260]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	493d      	ldr	r1, [pc, #244]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fa:	e040      	b.n	800477e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d023      	beq.n	800474c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004704:	4b39      	ldr	r3, [pc, #228]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a38      	ldr	r2, [pc, #224]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fe fe8a 	bl	8003428 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004718:	f7fe fe86 	bl	8003428 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1bd      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472a:	4b30      	ldr	r3, [pc, #192]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004736:	4b2d      	ldr	r3, [pc, #180]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4929      	ldr	r1, [pc, #164]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]
 800474a:	e018      	b.n	800477e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474c:	4b27      	ldr	r3, [pc, #156]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a26      	ldr	r2, [pc, #152]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fe fe66 	bl	8003428 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004760:	f7fe fe62 	bl	8003428 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e199      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	4b1e      	ldr	r3, [pc, #120]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d038      	beq.n	80047fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d019      	beq.n	80047c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004792:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004796:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fe fe43 	bl	8003428 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a6:	f7fe fe3f 	bl	8003428 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e176      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b8:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80047ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x23a>
 80047c4:	e01a      	b.n	80047fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c6:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80047c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ca:	4a08      	ldr	r2, [pc, #32]	@ (80047ec <HAL_RCC_OscConfig+0x280>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d2:	f7fe fe29 	bl	8003428 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047da:	f7fe fe25 	bl	8003428 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d903      	bls.n	80047f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e15c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
 80047ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f0:	4b91      	ldr	r3, [pc, #580]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80047f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ee      	bne.n	80047da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a4 	beq.w	8004952 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	4b88      	ldr	r3, [pc, #544]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	4a87      	ldr	r2, [pc, #540]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800481c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004820:	6413      	str	r3, [r2, #64]	@ 0x40
 8004822:	4b85      	ldr	r3, [pc, #532]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004832:	4b82      	ldr	r3, [pc, #520]	@ (8004a3c <HAL_RCC_OscConfig+0x4d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d118      	bne.n	8004870 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800483e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a3c <HAL_RCC_OscConfig+0x4d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a7e      	ldr	r2, [pc, #504]	@ (8004a3c <HAL_RCC_OscConfig+0x4d0>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484a:	f7fe fded 	bl	8003428 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7fe fde9 	bl	8003428 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b64      	cmp	r3, #100	@ 0x64
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e120      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004864:	4b75      	ldr	r3, [pc, #468]	@ (8004a3c <HAL_RCC_OscConfig+0x4d0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <HAL_RCC_OscConfig+0x31a>
 8004878:	4b6f      	ldr	r3, [pc, #444]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487c:	4a6e      	ldr	r2, [pc, #440]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6713      	str	r3, [r2, #112]	@ 0x70
 8004884:	e02d      	b.n	80048e2 <HAL_RCC_OscConfig+0x376>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x33c>
 800488e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	4a69      	ldr	r2, [pc, #420]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	@ 0x70
 800489a:	4b67      	ldr	r3, [pc, #412]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489e:	4a66      	ldr	r2, [pc, #408]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a6:	e01c      	b.n	80048e2 <HAL_RCC_OscConfig+0x376>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d10c      	bne.n	80048ca <HAL_RCC_OscConfig+0x35e>
 80048b0:	4b61      	ldr	r3, [pc, #388]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a60      	ldr	r2, [pc, #384]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048b6:	f043 0304 	orr.w	r3, r3, #4
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80048bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c8:	e00b      	b.n	80048e2 <HAL_RCC_OscConfig+0x376>
 80048ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	4a5a      	ldr	r2, [pc, #360]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d6:	4b58      	ldr	r3, [pc, #352]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	4a57      	ldr	r2, [pc, #348]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80048dc:	f023 0304 	bic.w	r3, r3, #4
 80048e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d015      	beq.n	8004916 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ea:	f7fe fd9d 	bl	8003428 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f0:	e00a      	b.n	8004908 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fe fd99 	bl	8003428 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e0ce      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	4b4b      	ldr	r3, [pc, #300]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ee      	beq.n	80048f2 <HAL_RCC_OscConfig+0x386>
 8004914:	e014      	b.n	8004940 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fe fd87 	bl	8003428 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491c:	e00a      	b.n	8004934 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491e:	f7fe fd83 	bl	8003428 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492c:	4293      	cmp	r3, r2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e0b8      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004934:	4b40      	ldr	r3, [pc, #256]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004946:	4b3c      	ldr	r3, [pc, #240]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800494c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004950:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a4 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800495c:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d06b      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d149      	bne.n	8004a04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004970:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a30      	ldr	r2, [pc, #192]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe fd54 	bl	8003428 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fe fd50 	bl	8003428 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e087      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	4b28      	ldr	r3, [pc, #160]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	3b01      	subs	r3, #1
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	4313      	orrs	r3, r2
 80049c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d0:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a18      	ldr	r2, [pc, #96]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80049d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fe fd24 	bl	8003428 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fe fd20 	bl	8003428 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e057      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f6:	4b10      	ldr	r3, [pc, #64]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x478>
 8004a02:	e04f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0b      	ldr	r2, [pc, #44]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe fd0a 	bl	8003428 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fe fd06 	bl	8003428 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e03d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	4b03      	ldr	r3, [pc, #12]	@ (8004a38 <HAL_RCC_OscConfig+0x4cc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x4ac>
 8004a36:	e035      	b.n	8004aa4 <HAL_RCC_OscConfig+0x538>
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <HAL_RCC_OscConfig+0x544>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d028      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d121      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d11a      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a70:	4013      	ands	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d111      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0d0      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b6a      	ldr	r3, [pc, #424]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b67      	ldr	r3, [pc, #412]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	4965      	ldr	r1, [pc, #404]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b63      	ldr	r3, [pc, #396]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b8      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b14:	4b59      	ldr	r3, [pc, #356]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a58      	ldr	r2, [pc, #352]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a52      	ldr	r2, [pc, #328]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	494d      	ldr	r1, [pc, #308]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d040      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d115      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b76:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e073      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b86:	4b3d      	ldr	r3, [pc, #244]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06b      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b96:	4b39      	ldr	r3, [pc, #228]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4936      	ldr	r1, [pc, #216]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba8:	f7fe fc3e 	bl	8003428 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb0:	f7fe fc3a 	bl	8003428 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e053      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 020c 	and.w	r2, r3, #12
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1eb      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b27      	ldr	r3, [pc, #156]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d210      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 020f 	bic.w	r2, r3, #15
 8004bee:	4922      	ldr	r1, [pc, #136]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b20      	ldr	r3, [pc, #128]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e032      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4916      	ldr	r1, [pc, #88]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	490e      	ldr	r1, [pc, #56]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c46:	f000 f821 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	490a      	ldr	r1, [pc, #40]	@ (8004c80 <HAL_RCC_ClockConfig+0x1cc>)
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <HAL_RCC_ClockConfig+0x1d0>)
 8004c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c62:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_ClockConfig+0x1d4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fa12 	bl	8003090 <HAL_InitTick>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023c00 	.word	0x40023c00
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	0800f5a8 	.word	0x0800f5a8
 8004c84:	2000015c 	.word	0x2000015c
 8004c88:	20000160 	.word	0x20000160

08004c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c90:	b090      	sub	sp, #64	@ 0x40
 8004c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c98:	2300      	movs	r3, #0
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca4:	4b59      	ldr	r3, [pc, #356]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d00d      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x40>
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	f200 80a1 	bhi.w	8004df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cbe:	e09b      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b53      	ldr	r3, [pc, #332]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cc4:	e09b      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cc6:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cca:	e098      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d028      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	2200      	movs	r2, #0
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cf8:	fb03 f201 	mul.w	r2, r3, r1
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	fb00 f303 	mul.w	r3, r0, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	4a43      	ldr	r2, [pc, #268]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d06:	fba0 1202 	umull	r1, r2, r0, r2
 8004d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d0c:	460a      	mov	r2, r1
 8004d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d12:	4413      	add	r3, r2
 8004d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d18:	2200      	movs	r2, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d26:	f7fb ffdf 	bl	8000ce8 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4613      	mov	r3, r2
 8004d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d32:	e053      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d34:	4b35      	ldr	r3, [pc, #212]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	099b      	lsrs	r3, r3, #6
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	617a      	str	r2, [r7, #20]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d46:	f04f 0b00 	mov.w	fp, #0
 8004d4a:	4652      	mov	r2, sl
 8004d4c:	465b      	mov	r3, fp
 8004d4e:	f04f 0000 	mov.w	r0, #0
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	0159      	lsls	r1, r3, #5
 8004d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5c:	0150      	lsls	r0, r2, #5
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	ebb2 080a 	subs.w	r8, r2, sl
 8004d66:	eb63 090b 	sbc.w	r9, r3, fp
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8004d82:	eb63 0509 	sbc.w	r5, r3, r9
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	00eb      	lsls	r3, r5, #3
 8004d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d94:	00e2      	lsls	r2, r4, #3
 8004d96:	4614      	mov	r4, r2
 8004d98:	461d      	mov	r5, r3
 8004d9a:	eb14 030a 	adds.w	r3, r4, sl
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	eb45 030b 	adc.w	r3, r5, fp
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004db2:	4629      	mov	r1, r5
 8004db4:	028b      	lsls	r3, r1, #10
 8004db6:	4621      	mov	r1, r4
 8004db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	028a      	lsls	r2, r1, #10
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	60fa      	str	r2, [r7, #12]
 8004dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dd0:	f7fb ff8a 	bl	8000ce8 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4613      	mov	r3, r2
 8004dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	3301      	adds	r3, #1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004dec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004df6:	e002      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3740      	adds	r7, #64	@ 0x40
 8004e04:	46bd      	mov	sp, r7
 8004e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	017d7840 	.word	0x017d7840

08004e18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	2000015c 	.word	0x2000015c

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e34:	f7ff fff0 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a9b      	lsrs	r3, r3, #10
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4903      	ldr	r1, [pc, #12]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40023800 	.word	0x40023800
 8004e54:	0800f5b8 	.word	0x0800f5b8

08004e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e5c:	f7ff ffdc 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0b5b      	lsrs	r3, r3, #13
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	@ (8004e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	0800f5b8 	.word	0x0800f5b8

08004e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e90:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0203 	and.w	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ec2:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <HAL_RCC_GetClockConfig+0x60>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 020f 	and.w	r2, r3, #15
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40023c00 	.word	0x40023c00

08004ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d012      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f0c:	4b69      	ldr	r3, [pc, #420]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a68      	ldr	r2, [pc, #416]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f16:	6093      	str	r3, [r2, #8]
 8004f18:	4b66      	ldr	r3, [pc, #408]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f20:	4964      	ldr	r1, [pc, #400]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	4959      	ldr	r1, [pc, #356]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d017      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	494a      	ldr	r1, [pc, #296]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f98:	d101      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 808b 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	4a39      	ldr	r2, [pc, #228]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fd4:	4b37      	ldr	r3, [pc, #220]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fe0:	4b35      	ldr	r3, [pc, #212]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a34      	ldr	r2, [pc, #208]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fec:	f7fe fa1c 	bl	8003428 <HAL_GetTick>
 8004ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff4:	f7fe fa18 	bl	8003428 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	@ 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e357      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005006:	4b2c      	ldr	r3, [pc, #176]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005012:	4b28      	ldr	r3, [pc, #160]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d035      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	429a      	cmp	r2, r3
 800502e:	d02e      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005030:	4b20      	ldr	r3, [pc, #128]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800503a:	4b1e      	ldr	r3, [pc, #120]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005044:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005046:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005050:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005052:	4a18      	ldr	r2, [pc, #96]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005058:	4b16      	ldr	r3, [pc, #88]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d114      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fe f9e0 	bl	8003428 <HAL_GetTick>
 8005068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506a:	e00a      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fe f9dc 	bl	8003428 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e319      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005082:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ee      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800509a:	d111      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800509c:	4b05      	ldr	r3, [pc, #20]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050a8:	4b04      	ldr	r3, [pc, #16]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	4901      	ldr	r1, [pc, #4]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
 80050b2:	e00b      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40007000 	.word	0x40007000
 80050bc:	0ffffcff 	.word	0x0ffffcff
 80050c0:	4baa      	ldr	r3, [pc, #680]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4aa9      	ldr	r2, [pc, #676]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050ca:	6093      	str	r3, [r2, #8]
 80050cc:	4ba7      	ldr	r3, [pc, #668]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d8:	49a4      	ldr	r1, [pc, #656]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ea:	4ba0      	ldr	r3, [pc, #640]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050f0:	4a9e      	ldr	r2, [pc, #632]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80050fa:	4b9c      	ldr	r3, [pc, #624]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	4999      	ldr	r1, [pc, #612]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005118:	4b94      	ldr	r3, [pc, #592]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005126:	4991      	ldr	r1, [pc, #580]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800513a:	4b8c      	ldr	r3, [pc, #560]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005140:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005148:	4988      	ldr	r1, [pc, #544]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800515c:	4b83      	ldr	r3, [pc, #524]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005162:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800516a:	4980      	ldr	r1, [pc, #512]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800517e:	4b7b      	ldr	r3, [pc, #492]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005184:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	4977      	ldr	r1, [pc, #476]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051a0:	4b72      	ldr	r3, [pc, #456]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	496f      	ldr	r1, [pc, #444]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051c2:	4b6a      	ldr	r3, [pc, #424]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c8:	f023 020c 	bic.w	r2, r3, #12
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d0:	4966      	ldr	r1, [pc, #408]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051e4:	4b61      	ldr	r3, [pc, #388]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f2:	495e      	ldr	r1, [pc, #376]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005206:	4b59      	ldr	r3, [pc, #356]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005214:	4955      	ldr	r1, [pc, #340]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005228:	4b50      	ldr	r3, [pc, #320]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005236:	494d      	ldr	r1, [pc, #308]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800524a:	4b48      	ldr	r3, [pc, #288]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005258:	4944      	ldr	r1, [pc, #272]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800526c:	4b3f      	ldr	r3, [pc, #252]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527a:	493c      	ldr	r1, [pc, #240]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800528e:	4b37      	ldr	r3, [pc, #220]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005294:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529c:	4933      	ldr	r1, [pc, #204]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052b0:	4b2e      	ldr	r3, [pc, #184]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052be:	492b      	ldr	r1, [pc, #172]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052d2:	4b26      	ldr	r3, [pc, #152]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052e0:	4922      	ldr	r1, [pc, #136]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f0:	d101      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052f2:	2301      	movs	r3, #1
 80052f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005312:	4b16      	ldr	r3, [pc, #88]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005318:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005320:	4912      	ldr	r1, [pc, #72]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005334:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005344:	4909      	ldr	r1, [pc, #36]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d006      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80d9 	beq.w	8005512 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005360:	4b02      	ldr	r3, [pc, #8]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a01      	ldr	r2, [pc, #4]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800536a:	e001      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800536c:	40023800 	.word	0x40023800
 8005370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fe f859 	bl	8003428 <HAL_GetTick>
 8005376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005378:	e008      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800537a:	f7fe f855 	bl	8003428 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b64      	cmp	r3, #100	@ 0x64
 8005386:	d901      	bls.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e194      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800538c:	4b6c      	ldr	r3, [pc, #432]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d021      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11d      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053ac:	4b64      	ldr	r3, [pc, #400]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ba:	4b61      	ldr	r3, [pc, #388]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	019a      	lsls	r2, r3, #6
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	061b      	lsls	r3, r3, #24
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	071b      	lsls	r3, r3, #28
 80053e0:	4957      	ldr	r1, [pc, #348]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02e      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005412:	d129      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005414:	4b4a      	ldr	r3, [pc, #296]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005422:	4b47      	ldr	r3, [pc, #284]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005428:	0f1b      	lsrs	r3, r3, #28
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	019a      	lsls	r2, r3, #6
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	431a      	orrs	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	071b      	lsls	r3, r3, #28
 8005448:	493d      	ldr	r1, [pc, #244]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005450:	4b3b      	ldr	r3, [pc, #236]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005456:	f023 021f 	bic.w	r2, r3, #31
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	3b01      	subs	r3, #1
 8005460:	4937      	ldr	r1, [pc, #220]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01d      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005474:	4b32      	ldr	r3, [pc, #200]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547a:	0e1b      	lsrs	r3, r3, #24
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005482:	4b2f      	ldr	r3, [pc, #188]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005488:	0f1b      	lsrs	r3, r3, #28
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	019a      	lsls	r2, r3, #6
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	071b      	lsls	r3, r3, #28
 80054a8:	4925      	ldr	r1, [pc, #148]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d011      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	019a      	lsls	r2, r3, #6
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	071b      	lsls	r3, r3, #28
 80054d8:	4919      	ldr	r1, [pc, #100]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054e0:	4b17      	ldr	r3, [pc, #92]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a16      	ldr	r2, [pc, #88]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ec:	f7fd ff9c 	bl	8003428 <HAL_GetTick>
 80054f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054f4:	f7fd ff98 	bl	8003428 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	@ 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0d7      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005506:	4b0e      	ldr	r3, [pc, #56]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b01      	cmp	r3, #1
 8005516:	f040 80cd 	bne.w	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800551a:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a08      	ldr	r2, [pc, #32]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fd ff7f 	bl	8003428 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800552e:	f7fd ff7b 	bl	8003428 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b64      	cmp	r3, #100	@ 0x64
 800553a:	d903      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e0ba      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005544:	4b5e      	ldr	r3, [pc, #376]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800554c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005550:	d0ed      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02e      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d12a      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800557a:	4b51      	ldr	r3, [pc, #324]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005588:	4b4d      	ldr	r3, [pc, #308]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	0f1b      	lsrs	r3, r3, #28
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	019a      	lsls	r2, r3, #6
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	071b      	lsls	r3, r3, #28
 80055ae:	4944      	ldr	r1, [pc, #272]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055b6:	4b42      	ldr	r3, [pc, #264]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	3b01      	subs	r3, #1
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	493d      	ldr	r1, [pc, #244]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d022      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055e4:	d11d      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055e6:	4b36      	ldr	r3, [pc, #216]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ec:	0e1b      	lsrs	r3, r3, #24
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055f4:	4b32      	ldr	r3, [pc, #200]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fa:	0f1b      	lsrs	r3, r3, #28
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	019a      	lsls	r2, r3, #6
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	061b      	lsls	r3, r3, #24
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	071b      	lsls	r3, r3, #28
 800561a:	4929      	ldr	r1, [pc, #164]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d028      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800562e:	4b24      	ldr	r3, [pc, #144]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005634:	0e1b      	lsrs	r3, r3, #24
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800563c:	4b20      	ldr	r3, [pc, #128]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005642:	0c1b      	lsrs	r3, r3, #16
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	019a      	lsls	r2, r3, #6
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	431a      	orrs	r2, r3
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	061b      	lsls	r3, r3, #24
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	071b      	lsls	r3, r3, #28
 8005662:	4917      	ldr	r1, [pc, #92]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800566a:	4b15      	ldr	r3, [pc, #84]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	4911      	ldr	r1, [pc, #68]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005680:	4b0f      	ldr	r3, [pc, #60]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0e      	ldr	r2, [pc, #56]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800568a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568c:	f7fd fecc 	bl	8003428 <HAL_GetTick>
 8005690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005694:	f7fd fec8 	bl	8003428 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	@ 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e007      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056a6:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056b2:	d1ef      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800

080056c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e049      	b.n	800576a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f841 	bl	8005772 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 fa00 	bl	8005b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	d001      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e054      	b.n	800584a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a26      	ldr	r2, [pc, #152]	@ (8005858 <HAL_TIM_Base_Start_IT+0xd0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d022      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x80>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ca:	d01d      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x80>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a22      	ldr	r2, [pc, #136]	@ (800585c <HAL_TIM_Base_Start_IT+0xd4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d018      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x80>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a21      	ldr	r2, [pc, #132]	@ (8005860 <HAL_TIM_Base_Start_IT+0xd8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d013      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x80>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005864 <HAL_TIM_Base_Start_IT+0xdc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00e      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x80>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005868 <HAL_TIM_Base_Start_IT+0xe0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d009      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x80>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1c      	ldr	r2, [pc, #112]	@ (800586c <HAL_TIM_Base_Start_IT+0xe4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x80>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1b      	ldr	r2, [pc, #108]	@ (8005870 <HAL_TIM_Base_Start_IT+0xe8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d115      	bne.n	8005834 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	4b19      	ldr	r3, [pc, #100]	@ (8005874 <HAL_TIM_Base_Start_IT+0xec>)
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b06      	cmp	r3, #6
 8005818:	d015      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0xbe>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005820:	d011      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	e008      	b.n	8005846 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e000      	b.n	8005848 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40010000 	.word	0x40010000
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40010400 	.word	0x40010400
 800586c:	40014000 	.word	0x40014000
 8005870:	40001800 	.word	0x40001800
 8005874:	00010007 	.word	0x00010007

08005878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b02      	cmp	r3, #2
 800588c:	d122      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b02      	cmp	r3, #2
 800589a:	d11b      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0202 	mvn.w	r2, #2
 80058a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f905 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8f7 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f908 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d122      	bne.n	8005928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d11b      	bne.n	8005928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0204 	mvn.w	r2, #4
 80058f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8db 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8cd 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8de 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b08      	cmp	r3, #8
 8005934:	d122      	bne.n	800597c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b08      	cmp	r3, #8
 8005942:	d11b      	bne.n	800597c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0208 	mvn.w	r2, #8
 800594c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2204      	movs	r2, #4
 8005952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8b1 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 8005968:	e005      	b.n	8005976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8a3 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8b4 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b10      	cmp	r3, #16
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0210 	mvn.w	r2, #16
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2208      	movs	r2, #8
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f887 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f879 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f88a 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d10e      	bne.n	80059fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d107      	bne.n	80059fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0201 	mvn.w	r2, #1
 80059f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fd fa06 	bl	8002e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a06:	2b80      	cmp	r3, #128	@ 0x80
 8005a08:	d10e      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a14:	2b80      	cmp	r3, #128	@ 0x80
 8005a16:	d107      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f91a 	bl	8005c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f90d 	bl	8005c70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	d10e      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6e:	2b40      	cmp	r3, #64	@ 0x40
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f838 	bl	8005af2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d10e      	bne.n	8005aae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d107      	bne.n	8005aae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0220 	mvn.w	r2, #32
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8cd 	bl	8005c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	@ (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b26:	d00f      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3c      	ldr	r2, [pc, #240]	@ (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3a      	ldr	r2, [pc, #232]	@ (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b68:	d027      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d023      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2b      	ldr	r2, [pc, #172]	@ (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01f      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a29      	ldr	r2, [pc, #164]	@ (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d017      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	@ (8005c30 <TIM_Base_SetConfig+0x128>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a27      	ldr	r2, [pc, #156]	@ (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00f      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	@ (8005c38 <TIM_Base_SetConfig+0x130>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a25      	ldr	r2, [pc, #148]	@ (8005c3c <TIM_Base_SetConfig+0x134>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d007      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a24      	ldr	r2, [pc, #144]	@ (8005c40 <TIM_Base_SetConfig+0x138>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a23      	ldr	r2, [pc, #140]	@ (8005c44 <TIM_Base_SetConfig+0x13c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <TIM_Base_SetConfig+0x114>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8005c2c <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	615a      	str	r2, [r3, #20]
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800
 8005c3c:	40001800 	.word	0x40001800
 8005c40:	40001c00 	.word	0x40001c00
 8005c44:	40002000 	.word	0x40002000

08005c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e040      	b.n	8005d18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fd f968 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2224      	movs	r2, #36	@ 0x24
 8005cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fbe6 	bl	8006494 <UART_SetConfig>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e022      	b.n	8005d18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fe3e 	bl	800695c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fec5 	bl	8006aa0 <UART_CheckIdleState>
 8005d16:	4603      	mov	r3, r0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	@ 0x28
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d171      	bne.n	8005e1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_UART_Transmit+0x24>
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e06a      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2221      	movs	r2, #33	@ 0x21
 8005d54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d56:	f7fd fb67 	bl	8003428 <HAL_GetTick>
 8005d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d74:	d108      	bne.n	8005d88 <HAL_UART_Transmit+0x68>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e003      	b.n	8005d90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d90:	e02c      	b.n	8005dec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2180      	movs	r1, #128	@ 0x80
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 feb6 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e038      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e007      	b.n	8005dda <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1cc      	bne.n	8005d92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2140      	movs	r1, #64	@ 0x40
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fe83 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e005      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2220      	movs	r2, #32
 8005e16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08a      	sub	sp, #40	@ 0x28
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d132      	bne.n	8005ea4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_UART_Receive_IT+0x24>
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e02b      	b.n	8005ea6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d018      	beq.n	8005e94 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	623b      	str	r3, [r7, #32]
 8005e82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e6      	bne.n	8005e62 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fefe 	bl	8006c9c <UART_Start_Receive_IT>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	e000      	b.n	8005ea6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3728      	adds	r7, #40	@ 0x28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ed6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005eda:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ede:	4013      	ands	r3, r2
 8005ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d115      	bne.n	8005f18 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00f      	beq.n	8005f18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8297 	beq.w	800643c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
      }
      return;
 8005f16:	e291      	b.n	800643c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8117 	beq.w	8006150 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f32:	4b85      	ldr	r3, [pc, #532]	@ (8006148 <HAL_UART_IRQHandler+0x298>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 810a 	beq.w	8006150 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d011      	beq.n	8005f6c <HAL_UART_IRQHandler+0xbc>
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f62:	f043 0201 	orr.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d011      	beq.n	8005f9c <HAL_UART_IRQHandler+0xec>
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d011      	beq.n	8005fcc <HAL_UART_IRQHandler+0x11c>
 8005fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d017      	beq.n	8006008 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fe8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ffe:	f043 0208 	orr.w	r2, r3, #8
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <HAL_UART_IRQHandler+0x18a>
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006018:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 81fd 	beq.w	8006440 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00d      	beq.n	800606e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006074:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b40      	cmp	r3, #64	@ 0x40
 8006084:	d005      	beq.n	8006092 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800608a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800608e:	2b00      	cmp	r3, #0
 8006090:	d04f      	beq.n	8006132 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fec8 	bl	8006e28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a2:	2b40      	cmp	r3, #64	@ 0x40
 80060a4:	d141      	bne.n	800612a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1d9      	bne.n	80060a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d013      	beq.n	8006122 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fe:	4a13      	ldr	r2, [pc, #76]	@ (800614c <HAL_UART_IRQHandler+0x29c>)
 8006100:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006106:	4618      	mov	r0, r3
 8006108:	f7fd ffd0 	bl	80040ac <HAL_DMA_Abort_IT>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d017      	beq.n	8006142 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	e00f      	b.n	8006142 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9a0 	bl	8006468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006128:	e00b      	b.n	8006142 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f99c 	bl	8006468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	e007      	b.n	8006142 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f998 	bl	8006468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006140:	e17e      	b.n	8006440 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	bf00      	nop
    return;
 8006144:	e17c      	b.n	8006440 <HAL_UART_IRQHandler+0x590>
 8006146:	bf00      	nop
 8006148:	04000120 	.word	0x04000120
 800614c:	08006ef1 	.word	0x08006ef1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006154:	2b01      	cmp	r3, #1
 8006156:	f040 814c 	bne.w	80063f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8145 	beq.w	80063f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 813e 	beq.w	80063f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2210      	movs	r2, #16
 800617c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006188:	2b40      	cmp	r3, #64	@ 0x40
 800618a:	f040 80b6 	bne.w	80062fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800619a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8150 	beq.w	8006444 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ae:	429a      	cmp	r2, r3
 80061b0:	f080 8148 	bcs.w	8006444 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c8:	f000 8086 	beq.w	80062d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006202:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800620e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1da      	bne.n	80061cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800623a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800623e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006242:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800624c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e1      	bne.n	8006216 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006276:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006278:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800627c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e3      	bne.n	8006252 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a8:	f023 0310 	bic.w	r3, r3, #16
 80062ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e4      	bne.n	8006298 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fd fe7a 	bl	8003fcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f8c2 	bl	800647c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062f8:	e0a4      	b.n	8006444 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006306:	b29b      	uxth	r3, r3
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8096 	beq.w	8006448 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800631c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8091 	beq.w	8006448 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006336:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800633a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006348:	647b      	str	r3, [r7, #68]	@ 0x44
 800634a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800634e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e4      	bne.n	8006326 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3308      	adds	r3, #8
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	623b      	str	r3, [r7, #32]
   return(result);
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006380:	633a      	str	r2, [r7, #48]	@ 0x30
 8006382:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e3      	bne.n	800635c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f023 0310 	bic.w	r3, r3, #16
 80063bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	69b9      	ldr	r1, [r7, #24]
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	617b      	str	r3, [r7, #20]
   return(result);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e4      	bne.n	80063a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f846 	bl	800647c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063f0:	e02a      	b.n	8006448 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01c      	beq.n	800644c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
    }
    return;
 800641a:	e017      	b.n	800644c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800641c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d012      	beq.n	800644e <HAL_UART_IRQHandler+0x59e>
 8006428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800642c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00c      	beq.n	800644e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fd71 	bl	8006f1c <UART_EndTransmit_IT>
    return;
 800643a:	e008      	b.n	800644e <HAL_UART_IRQHandler+0x59e>
      return;
 800643c:	bf00      	nop
 800643e:	e006      	b.n	800644e <HAL_UART_IRQHandler+0x59e>
    return;
 8006440:	bf00      	nop
 8006442:	e004      	b.n	800644e <HAL_UART_IRQHandler+0x59e>
      return;
 8006444:	bf00      	nop
 8006446:	e002      	b.n	800644e <HAL_UART_IRQHandler+0x59e>
      return;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <HAL_UART_IRQHandler+0x59e>
    return;
 800644c:	bf00      	nop
  }

}
 800644e:	37e8      	adds	r7, #232	@ 0xe8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4ba6      	ldr	r3, [pc, #664]	@ (8006758 <UART_SetConfig+0x2c4>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	6979      	ldr	r1, [r7, #20]
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a94      	ldr	r2, [pc, #592]	@ (800675c <UART_SetConfig+0x2c8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d120      	bne.n	8006552 <UART_SetConfig+0xbe>
 8006510:	4b93      	ldr	r3, [pc, #588]	@ (8006760 <UART_SetConfig+0x2cc>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b03      	cmp	r3, #3
 800651c:	d816      	bhi.n	800654c <UART_SetConfig+0xb8>
 800651e:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <UART_SetConfig+0x90>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006535 	.word	0x08006535
 8006528:	08006541 	.word	0x08006541
 800652c:	0800653b 	.word	0x0800653b
 8006530:	08006547 	.word	0x08006547
 8006534:	2301      	movs	r3, #1
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e150      	b.n	80067dc <UART_SetConfig+0x348>
 800653a:	2302      	movs	r3, #2
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e14d      	b.n	80067dc <UART_SetConfig+0x348>
 8006540:	2304      	movs	r3, #4
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e14a      	b.n	80067dc <UART_SetConfig+0x348>
 8006546:	2308      	movs	r3, #8
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e147      	b.n	80067dc <UART_SetConfig+0x348>
 800654c:	2310      	movs	r3, #16
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	e144      	b.n	80067dc <UART_SetConfig+0x348>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a83      	ldr	r2, [pc, #524]	@ (8006764 <UART_SetConfig+0x2d0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d132      	bne.n	80065c2 <UART_SetConfig+0x12e>
 800655c:	4b80      	ldr	r3, [pc, #512]	@ (8006760 <UART_SetConfig+0x2cc>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d828      	bhi.n	80065bc <UART_SetConfig+0x128>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <UART_SetConfig+0xdc>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065bd 	.word	0x080065bd
 8006578:	080065bd 	.word	0x080065bd
 800657c:	080065bd 	.word	0x080065bd
 8006580:	080065b1 	.word	0x080065b1
 8006584:	080065bd 	.word	0x080065bd
 8006588:	080065bd 	.word	0x080065bd
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065ab 	.word	0x080065ab
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065bd 	.word	0x080065bd
 80065a0:	080065b7 	.word	0x080065b7
 80065a4:	2300      	movs	r3, #0
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e118      	b.n	80067dc <UART_SetConfig+0x348>
 80065aa:	2302      	movs	r3, #2
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e115      	b.n	80067dc <UART_SetConfig+0x348>
 80065b0:	2304      	movs	r3, #4
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e112      	b.n	80067dc <UART_SetConfig+0x348>
 80065b6:	2308      	movs	r3, #8
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e10f      	b.n	80067dc <UART_SetConfig+0x348>
 80065bc:	2310      	movs	r3, #16
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e10c      	b.n	80067dc <UART_SetConfig+0x348>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a68      	ldr	r2, [pc, #416]	@ (8006768 <UART_SetConfig+0x2d4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d120      	bne.n	800660e <UART_SetConfig+0x17a>
 80065cc:	4b64      	ldr	r3, [pc, #400]	@ (8006760 <UART_SetConfig+0x2cc>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065d6:	2b30      	cmp	r3, #48	@ 0x30
 80065d8:	d013      	beq.n	8006602 <UART_SetConfig+0x16e>
 80065da:	2b30      	cmp	r3, #48	@ 0x30
 80065dc:	d814      	bhi.n	8006608 <UART_SetConfig+0x174>
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d009      	beq.n	80065f6 <UART_SetConfig+0x162>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d810      	bhi.n	8006608 <UART_SetConfig+0x174>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <UART_SetConfig+0x15c>
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d006      	beq.n	80065fc <UART_SetConfig+0x168>
 80065ee:	e00b      	b.n	8006608 <UART_SetConfig+0x174>
 80065f0:	2300      	movs	r3, #0
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e0f2      	b.n	80067dc <UART_SetConfig+0x348>
 80065f6:	2302      	movs	r3, #2
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e0ef      	b.n	80067dc <UART_SetConfig+0x348>
 80065fc:	2304      	movs	r3, #4
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e0ec      	b.n	80067dc <UART_SetConfig+0x348>
 8006602:	2308      	movs	r3, #8
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e0e9      	b.n	80067dc <UART_SetConfig+0x348>
 8006608:	2310      	movs	r3, #16
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e0e6      	b.n	80067dc <UART_SetConfig+0x348>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a56      	ldr	r2, [pc, #344]	@ (800676c <UART_SetConfig+0x2d8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d120      	bne.n	800665a <UART_SetConfig+0x1c6>
 8006618:	4b51      	ldr	r3, [pc, #324]	@ (8006760 <UART_SetConfig+0x2cc>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006622:	2bc0      	cmp	r3, #192	@ 0xc0
 8006624:	d013      	beq.n	800664e <UART_SetConfig+0x1ba>
 8006626:	2bc0      	cmp	r3, #192	@ 0xc0
 8006628:	d814      	bhi.n	8006654 <UART_SetConfig+0x1c0>
 800662a:	2b80      	cmp	r3, #128	@ 0x80
 800662c:	d009      	beq.n	8006642 <UART_SetConfig+0x1ae>
 800662e:	2b80      	cmp	r3, #128	@ 0x80
 8006630:	d810      	bhi.n	8006654 <UART_SetConfig+0x1c0>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <UART_SetConfig+0x1a8>
 8006636:	2b40      	cmp	r3, #64	@ 0x40
 8006638:	d006      	beq.n	8006648 <UART_SetConfig+0x1b4>
 800663a:	e00b      	b.n	8006654 <UART_SetConfig+0x1c0>
 800663c:	2300      	movs	r3, #0
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e0cc      	b.n	80067dc <UART_SetConfig+0x348>
 8006642:	2302      	movs	r3, #2
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e0c9      	b.n	80067dc <UART_SetConfig+0x348>
 8006648:	2304      	movs	r3, #4
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e0c6      	b.n	80067dc <UART_SetConfig+0x348>
 800664e:	2308      	movs	r3, #8
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e0c3      	b.n	80067dc <UART_SetConfig+0x348>
 8006654:	2310      	movs	r3, #16
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e0c0      	b.n	80067dc <UART_SetConfig+0x348>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a44      	ldr	r2, [pc, #272]	@ (8006770 <UART_SetConfig+0x2dc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d125      	bne.n	80066b0 <UART_SetConfig+0x21c>
 8006664:	4b3e      	ldr	r3, [pc, #248]	@ (8006760 <UART_SetConfig+0x2cc>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800666e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006672:	d017      	beq.n	80066a4 <UART_SetConfig+0x210>
 8006674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006678:	d817      	bhi.n	80066aa <UART_SetConfig+0x216>
 800667a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800667e:	d00b      	beq.n	8006698 <UART_SetConfig+0x204>
 8006680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006684:	d811      	bhi.n	80066aa <UART_SetConfig+0x216>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <UART_SetConfig+0x1fe>
 800668a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668e:	d006      	beq.n	800669e <UART_SetConfig+0x20a>
 8006690:	e00b      	b.n	80066aa <UART_SetConfig+0x216>
 8006692:	2300      	movs	r3, #0
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e0a1      	b.n	80067dc <UART_SetConfig+0x348>
 8006698:	2302      	movs	r3, #2
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e09e      	b.n	80067dc <UART_SetConfig+0x348>
 800669e:	2304      	movs	r3, #4
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e09b      	b.n	80067dc <UART_SetConfig+0x348>
 80066a4:	2308      	movs	r3, #8
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e098      	b.n	80067dc <UART_SetConfig+0x348>
 80066aa:	2310      	movs	r3, #16
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e095      	b.n	80067dc <UART_SetConfig+0x348>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006774 <UART_SetConfig+0x2e0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d125      	bne.n	8006706 <UART_SetConfig+0x272>
 80066ba:	4b29      	ldr	r3, [pc, #164]	@ (8006760 <UART_SetConfig+0x2cc>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c8:	d017      	beq.n	80066fa <UART_SetConfig+0x266>
 80066ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ce:	d817      	bhi.n	8006700 <UART_SetConfig+0x26c>
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d4:	d00b      	beq.n	80066ee <UART_SetConfig+0x25a>
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066da:	d811      	bhi.n	8006700 <UART_SetConfig+0x26c>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <UART_SetConfig+0x254>
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e4:	d006      	beq.n	80066f4 <UART_SetConfig+0x260>
 80066e6:	e00b      	b.n	8006700 <UART_SetConfig+0x26c>
 80066e8:	2301      	movs	r3, #1
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e076      	b.n	80067dc <UART_SetConfig+0x348>
 80066ee:	2302      	movs	r3, #2
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e073      	b.n	80067dc <UART_SetConfig+0x348>
 80066f4:	2304      	movs	r3, #4
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e070      	b.n	80067dc <UART_SetConfig+0x348>
 80066fa:	2308      	movs	r3, #8
 80066fc:	77fb      	strb	r3, [r7, #31]
 80066fe:	e06d      	b.n	80067dc <UART_SetConfig+0x348>
 8006700:	2310      	movs	r3, #16
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	e06a      	b.n	80067dc <UART_SetConfig+0x348>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1b      	ldr	r2, [pc, #108]	@ (8006778 <UART_SetConfig+0x2e4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d138      	bne.n	8006782 <UART_SetConfig+0x2ee>
 8006710:	4b13      	ldr	r3, [pc, #76]	@ (8006760 <UART_SetConfig+0x2cc>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006716:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800671a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800671e:	d017      	beq.n	8006750 <UART_SetConfig+0x2bc>
 8006720:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006724:	d82a      	bhi.n	800677c <UART_SetConfig+0x2e8>
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672a:	d00b      	beq.n	8006744 <UART_SetConfig+0x2b0>
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006730:	d824      	bhi.n	800677c <UART_SetConfig+0x2e8>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <UART_SetConfig+0x2aa>
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673a:	d006      	beq.n	800674a <UART_SetConfig+0x2b6>
 800673c:	e01e      	b.n	800677c <UART_SetConfig+0x2e8>
 800673e:	2300      	movs	r3, #0
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e04b      	b.n	80067dc <UART_SetConfig+0x348>
 8006744:	2302      	movs	r3, #2
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e048      	b.n	80067dc <UART_SetConfig+0x348>
 800674a:	2304      	movs	r3, #4
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e045      	b.n	80067dc <UART_SetConfig+0x348>
 8006750:	2308      	movs	r3, #8
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e042      	b.n	80067dc <UART_SetConfig+0x348>
 8006756:	bf00      	nop
 8006758:	efff69f3 	.word	0xefff69f3
 800675c:	40011000 	.word	0x40011000
 8006760:	40023800 	.word	0x40023800
 8006764:	40004400 	.word	0x40004400
 8006768:	40004800 	.word	0x40004800
 800676c:	40004c00 	.word	0x40004c00
 8006770:	40005000 	.word	0x40005000
 8006774:	40011400 	.word	0x40011400
 8006778:	40007800 	.word	0x40007800
 800677c:	2310      	movs	r3, #16
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e02c      	b.n	80067dc <UART_SetConfig+0x348>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a72      	ldr	r2, [pc, #456]	@ (8006950 <UART_SetConfig+0x4bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d125      	bne.n	80067d8 <UART_SetConfig+0x344>
 800678c:	4b71      	ldr	r3, [pc, #452]	@ (8006954 <UART_SetConfig+0x4c0>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006792:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006796:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800679a:	d017      	beq.n	80067cc <UART_SetConfig+0x338>
 800679c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067a0:	d817      	bhi.n	80067d2 <UART_SetConfig+0x33e>
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a6:	d00b      	beq.n	80067c0 <UART_SetConfig+0x32c>
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ac:	d811      	bhi.n	80067d2 <UART_SetConfig+0x33e>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <UART_SetConfig+0x326>
 80067b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067b6:	d006      	beq.n	80067c6 <UART_SetConfig+0x332>
 80067b8:	e00b      	b.n	80067d2 <UART_SetConfig+0x33e>
 80067ba:	2300      	movs	r3, #0
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e00d      	b.n	80067dc <UART_SetConfig+0x348>
 80067c0:	2302      	movs	r3, #2
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e00a      	b.n	80067dc <UART_SetConfig+0x348>
 80067c6:	2304      	movs	r3, #4
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e007      	b.n	80067dc <UART_SetConfig+0x348>
 80067cc:	2308      	movs	r3, #8
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e004      	b.n	80067dc <UART_SetConfig+0x348>
 80067d2:	2310      	movs	r3, #16
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e001      	b.n	80067dc <UART_SetConfig+0x348>
 80067d8:	2310      	movs	r3, #16
 80067da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e4:	d15b      	bne.n	800689e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067e6:	7ffb      	ldrb	r3, [r7, #31]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d828      	bhi.n	800683e <UART_SetConfig+0x3aa>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <UART_SetConfig+0x360>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006829 	.word	0x08006829
 8006800:	0800683f 	.word	0x0800683f
 8006804:	0800682f 	.word	0x0800682f
 8006808:	0800683f 	.word	0x0800683f
 800680c:	0800683f 	.word	0x0800683f
 8006810:	0800683f 	.word	0x0800683f
 8006814:	08006837 	.word	0x08006837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fe fb0a 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 800681c:	61b8      	str	r0, [r7, #24]
        break;
 800681e:	e013      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006820:	f7fe fb1a 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 8006824:	61b8      	str	r0, [r7, #24]
        break;
 8006826:	e00f      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006828:	4b4b      	ldr	r3, [pc, #300]	@ (8006958 <UART_SetConfig+0x4c4>)
 800682a:	61bb      	str	r3, [r7, #24]
        break;
 800682c:	e00c      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682e:	f7fe fa2d 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8006832:	61b8      	str	r0, [r7, #24]
        break;
 8006834:	e008      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800683a:	61bb      	str	r3, [r7, #24]
        break;
 800683c:	e004      	b.n	8006848 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	77bb      	strb	r3, [r7, #30]
        break;
 8006846:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d074      	beq.n	8006938 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	005a      	lsls	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	d916      	bls.n	8006898 <UART_SetConfig+0x404>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006870:	d212      	bcs.n	8006898 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f023 030f 	bic.w	r3, r3, #15
 800687a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	b29b      	uxth	r3, r3
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	b29a      	uxth	r2, r3
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	4313      	orrs	r3, r2
 800688c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	89fa      	ldrh	r2, [r7, #14]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	e04f      	b.n	8006938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	77bb      	strb	r3, [r7, #30]
 800689c:	e04c      	b.n	8006938 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800689e:	7ffb      	ldrb	r3, [r7, #31]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d828      	bhi.n	80068f6 <UART_SetConfig+0x462>
 80068a4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ac <UART_SetConfig+0x418>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068d9 	.word	0x080068d9
 80068b4:	080068e1 	.word	0x080068e1
 80068b8:	080068f7 	.word	0x080068f7
 80068bc:	080068e7 	.word	0x080068e7
 80068c0:	080068f7 	.word	0x080068f7
 80068c4:	080068f7 	.word	0x080068f7
 80068c8:	080068f7 	.word	0x080068f7
 80068cc:	080068ef 	.word	0x080068ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fe faae 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80068d4:	61b8      	str	r0, [r7, #24]
        break;
 80068d6:	e013      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d8:	f7fe fabe 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 80068dc:	61b8      	str	r0, [r7, #24]
        break;
 80068de:	e00f      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <UART_SetConfig+0x4c4>)
 80068e2:	61bb      	str	r3, [r7, #24]
        break;
 80068e4:	e00c      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e6:	f7fe f9d1 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 80068ea:	61b8      	str	r0, [r7, #24]
        break;
 80068ec:	e008      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f2:	61bb      	str	r3, [r7, #24]
        break;
 80068f4:	e004      	b.n	8006900 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	77bb      	strb	r3, [r7, #30]
        break;
 80068fe:	bf00      	nop
    }

    if (pclk != 0U)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d018      	beq.n	8006938 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	085a      	lsrs	r2, r3, #1
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	441a      	add	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b0f      	cmp	r3, #15
 800691e:	d909      	bls.n	8006934 <UART_SetConfig+0x4a0>
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006926:	d205      	bcs.n	8006934 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	b29a      	uxth	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60da      	str	r2, [r3, #12]
 8006932:	e001      	b.n	8006938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006944:	7fbb      	ldrb	r3, [r7, #30]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40007c00 	.word	0x40007c00
 8006954:	40023800 	.word	0x40023800
 8006958:	00f42400 	.word	0x00f42400

0800695c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5a:	d10a      	bne.n	8006a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ab0:	f7fc fcba 	bl	8003428 <HAL_GetTick>
 8006ab4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d10e      	bne.n	8006ae2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f81b 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e011      	b.n	8006b06 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b09c      	sub	sp, #112	@ 0x70
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1e:	e0a7      	b.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	f000 80a3 	beq.w	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fc fc7d 	bl	8003428 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d13f      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b50:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006b54:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b60:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e6      	bne.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b92:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006b94:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e068      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d050      	beq.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bdc:	d148      	bne.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006be6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c08:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e6      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c3a:	623a      	str	r2, [r7, #32]
 8006c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	69f9      	ldr	r1, [r7, #28]
 8006c40:	6a3a      	ldr	r2, [r7, #32]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e010      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	f43f af48 	beq.w	8006b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3770      	adds	r7, #112	@ 0x70
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b097      	sub	sp, #92	@ 0x5c
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cce:	d10e      	bne.n	8006cee <UART_Start_Receive_IT+0x52>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <UART_Start_Receive_IT+0x48>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006cde:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ce2:	e02d      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	22ff      	movs	r2, #255	@ 0xff
 8006ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cec:	e028      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10d      	bne.n	8006d12 <UART_Start_Receive_IT+0x76>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <UART_Start_Receive_IT+0x6c>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	22ff      	movs	r2, #255	@ 0xff
 8006d02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d06:	e01b      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	227f      	movs	r2, #127	@ 0x7f
 8006d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d10:	e016      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d1a:	d10d      	bne.n	8006d38 <UART_Start_Receive_IT+0x9c>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <UART_Start_Receive_IT+0x92>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	227f      	movs	r2, #127	@ 0x7f
 8006d28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d2c:	e008      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	223f      	movs	r2, #63	@ 0x3f
 8006d32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d36:	e003      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2222      	movs	r2, #34	@ 0x22
 8006d4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d70:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d72:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e5      	bne.n	8006d50 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8c:	d107      	bne.n	8006d9e <UART_Start_Receive_IT+0x102>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a21      	ldr	r2, [pc, #132]	@ (8006e20 <UART_Start_Receive_IT+0x184>)
 8006d9a:	669a      	str	r2, [r3, #104]	@ 0x68
 8006d9c:	e002      	b.n	8006da4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4a20      	ldr	r2, [pc, #128]	@ (8006e24 <UART_Start_Receive_IT+0x188>)
 8006da2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d019      	beq.n	8006de0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dcc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e6      	bne.n	8006dac <UART_Start_Receive_IT+0x110>
 8006dde:	e018      	b.n	8006e12 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	613b      	str	r3, [r7, #16]
   return(result);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f043 0320 	orr.w	r3, r3, #32
 8006df4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	69f9      	ldr	r1, [r7, #28]
 8006e04:	6a3a      	ldr	r2, [r7, #32]
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	375c      	adds	r7, #92	@ 0x5c
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	080070d7 	.word	0x080070d7
 8006e24:	08006f71 	.word	0x08006f71

08006e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b095      	sub	sp, #84	@ 0x54
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d118      	bne.n	8006ed0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ee4:	bf00      	nop
 8006ee6:	3754      	adds	r7, #84	@ 0x54
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff faaa 	bl	8006468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	61bb      	str	r3, [r7, #24]
 8006f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e6      	bne.n	8006f24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fa76 	bl	8006454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f68:	bf00      	nop
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b096      	sub	sp, #88	@ 0x58
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f7e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f88:	2b22      	cmp	r3, #34	@ 0x22
 8006f8a:	f040 8098 	bne.w	80070be <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006f9c:	b2d9      	uxtb	r1, r3
 8006f9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa8:	400a      	ands	r2, r1
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d17b      	bne.n	80070ce <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ff6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	623b      	str	r3, [r7, #32]
   return(result);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3308      	adds	r3, #8
 8007026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007028:	633a      	str	r2, [r7, #48]	@ 0x30
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800702e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007054:	2b01      	cmp	r3, #1
 8007056:	d12e      	bne.n	80070b6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	60fb      	str	r3, [r7, #12]
   return(result);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0310 	bic.w	r3, r3, #16
 8007072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	69b9      	ldr	r1, [r7, #24]
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	617b      	str	r3, [r7, #20]
   return(result);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b10      	cmp	r3, #16
 800709c:	d103      	bne.n	80070a6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2210      	movs	r2, #16
 80070a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff f9e4 	bl	800647c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070b4:	e00b      	b.n	80070ce <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fa fc6a 	bl	8001990 <HAL_UART_RxCpltCallback>
}
 80070bc:	e007      	b.n	80070ce <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0208 	orr.w	r2, r2, #8
 80070cc:	619a      	str	r2, [r3, #24]
}
 80070ce:	bf00      	nop
 80070d0:	3758      	adds	r7, #88	@ 0x58
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b096      	sub	sp, #88	@ 0x58
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070e4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ee:	2b22      	cmp	r3, #34	@ 0x22
 80070f0:	f040 8098 	bne.w	8007224 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007102:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007104:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007108:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800710c:	4013      	ands	r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007112:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d17b      	bne.n	8007234 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715a:	643b      	str	r3, [r7, #64]	@ 0x40
 800715c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007160:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	61fb      	str	r3, [r7, #28]
   return(result);
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007190:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d12e      	bne.n	800721c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 0310 	bic.w	r3, r3, #16
 80071d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	613b      	str	r3, [r7, #16]
   return(result);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e6      	bne.n	80071c4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b10      	cmp	r3, #16
 8007202:	d103      	bne.n	800720c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2210      	movs	r2, #16
 800720a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff f931 	bl	800647c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800721a:	e00b      	b.n	8007234 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fa fbb7 	bl	8001990 <HAL_UART_RxCpltCallback>
}
 8007222:	e007      	b.n	8007234 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	619a      	str	r2, [r3, #24]
}
 8007234:	bf00      	nop
 8007236:	3758      	adds	r7, #88	@ 0x58
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007252:	f3ef 8305 	mrs	r3, IPSR
 8007256:	60bb      	str	r3, [r7, #8]
  return(result);
 8007258:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10f      	bne.n	800727e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800725e:	f3ef 8310 	mrs	r3, PRIMASK
 8007262:	607b      	str	r3, [r7, #4]
  return(result);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d105      	bne.n	8007276 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800726a:	f3ef 8311 	mrs	r3, BASEPRI
 800726e:	603b      	str	r3, [r7, #0]
  return(result);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <osKernelInitialize+0x3a>
 8007276:	4b0e      	ldr	r3, [pc, #56]	@ (80072b0 <osKernelInitialize+0x64>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d103      	bne.n	8007286 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800727e:	f06f 0305 	mvn.w	r3, #5
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e00c      	b.n	80072a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007286:	4b0a      	ldr	r3, [pc, #40]	@ (80072b0 <osKernelInitialize+0x64>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800728e:	4b08      	ldr	r3, [pc, #32]	@ (80072b0 <osKernelInitialize+0x64>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e002      	b.n	80072a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800729a:	f04f 33ff 	mov.w	r3, #4294967295
 800729e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072a0:	68fb      	ldr	r3, [r7, #12]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000558 	.word	0x20000558

080072b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ba:	f3ef 8305 	mrs	r3, IPSR
 80072be:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10f      	bne.n	80072e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c6:	f3ef 8310 	mrs	r3, PRIMASK
 80072ca:	607b      	str	r3, [r7, #4]
  return(result);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072d2:	f3ef 8311 	mrs	r3, BASEPRI
 80072d6:	603b      	str	r3, [r7, #0]
  return(result);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <osKernelStart+0x3a>
 80072de:	4b0f      	ldr	r3, [pc, #60]	@ (800731c <osKernelStart+0x68>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d103      	bne.n	80072ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80072e6:	f06f 0305 	mvn.w	r3, #5
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	e010      	b.n	8007310 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072ee:	4b0b      	ldr	r3, [pc, #44]	@ (800731c <osKernelStart+0x68>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d109      	bne.n	800730a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072f6:	f7ff ffa1 	bl	800723c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072fa:	4b08      	ldr	r3, [pc, #32]	@ (800731c <osKernelStart+0x68>)
 80072fc:	2202      	movs	r2, #2
 80072fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007300:	f001 fd34 	bl	8008d6c <vTaskStartScheduler>
      stat = osOK;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e002      	b.n	8007310 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295
 800730e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007310:	68fb      	ldr	r3, [r7, #12]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000558 	.word	0x20000558

08007320 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b090      	sub	sp, #64	@ 0x40
 8007324:	af04      	add	r7, sp, #16
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007330:	f3ef 8305 	mrs	r3, IPSR
 8007334:	61fb      	str	r3, [r7, #28]
  return(result);
 8007336:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007338:	2b00      	cmp	r3, #0
 800733a:	f040 808f 	bne.w	800745c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733e:	f3ef 8310 	mrs	r3, PRIMASK
 8007342:	61bb      	str	r3, [r7, #24]
  return(result);
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800734a:	f3ef 8311 	mrs	r3, BASEPRI
 800734e:	617b      	str	r3, [r7, #20]
  return(result);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <osThreadNew+0x3e>
 8007356:	4b44      	ldr	r3, [pc, #272]	@ (8007468 <osThreadNew+0x148>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d07e      	beq.n	800745c <osThreadNew+0x13c>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d07b      	beq.n	800745c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007364:	2380      	movs	r3, #128	@ 0x80
 8007366:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007368:	2318      	movs	r3, #24
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007370:	f04f 33ff 	mov.w	r3, #4294967295
 8007374:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d045      	beq.n	8007408 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <osThreadNew+0x6a>
        name = attr->name;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	2b00      	cmp	r3, #0
 800739c:	d008      	beq.n	80073b0 <osThreadNew+0x90>
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	2b38      	cmp	r3, #56	@ 0x38
 80073a2:	d805      	bhi.n	80073b0 <osThreadNew+0x90>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <osThreadNew+0x94>
        return (NULL);
 80073b0:	2300      	movs	r3, #0
 80073b2:	e054      	b.n	800745e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	089b      	lsrs	r3, r3, #2
 80073c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00e      	beq.n	80073ea <osThreadNew+0xca>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2ba7      	cmp	r3, #167	@ 0xa7
 80073d2:	d90a      	bls.n	80073ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d006      	beq.n	80073ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <osThreadNew+0xca>
        mem = 1;
 80073e4:	2301      	movs	r3, #1
 80073e6:	623b      	str	r3, [r7, #32]
 80073e8:	e010      	b.n	800740c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10c      	bne.n	800740c <osThreadNew+0xec>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d108      	bne.n	800740c <osThreadNew+0xec>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <osThreadNew+0xec>
          mem = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	623b      	str	r3, [r7, #32]
 8007406:	e001      	b.n	800740c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d110      	bne.n	8007434 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800741a:	9202      	str	r2, [sp, #8]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f001 faa1 	bl	8008970 <xTaskCreateStatic>
 800742e:	4603      	mov	r3, r0
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	e013      	b.n	800745c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d110      	bne.n	800745c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800743a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743c:	b29a      	uxth	r2, r3
 800743e:	f107 0310 	add.w	r3, r7, #16
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f001 faf5 	bl	8008a3c <xTaskCreate>
 8007452:	4603      	mov	r3, r0
 8007454:	2b01      	cmp	r3, #1
 8007456:	d001      	beq.n	800745c <osThreadNew+0x13c>
          hTask = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800745c:	693b      	ldr	r3, [r7, #16]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3730      	adds	r7, #48	@ 0x30
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000558 	.word	0x20000558

0800746c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007474:	f3ef 8305 	mrs	r3, IPSR
 8007478:	613b      	str	r3, [r7, #16]
  return(result);
 800747a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10f      	bne.n	80074a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007480:	f3ef 8310 	mrs	r3, PRIMASK
 8007484:	60fb      	str	r3, [r7, #12]
  return(result);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d105      	bne.n	8007498 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800748c:	f3ef 8311 	mrs	r3, BASEPRI
 8007490:	60bb      	str	r3, [r7, #8]
  return(result);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <osDelay+0x3c>
 8007498:	4b0a      	ldr	r3, [pc, #40]	@ (80074c4 <osDelay+0x58>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d103      	bne.n	80074a8 <osDelay+0x3c>
    stat = osErrorISR;
 80074a0:	f06f 0305 	mvn.w	r3, #5
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	e007      	b.n	80074b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fc22 	bl	8008cfc <vTaskDelay>
    }
  }

  return (stat);
 80074b8:	697b      	ldr	r3, [r7, #20]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20000558 	.word	0x20000558

080074c8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f002 fecb 	bl	800a26c <pvTimerGetTimerID>
 80074d6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <TimerCallback+0x22>
    callb->func (callb->arg);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	6852      	ldr	r2, [r2, #4]
 80074e6:	4610      	mov	r0, r2
 80074e8:	4798      	blx	r3
  }
}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08e      	sub	sp, #56	@ 0x38
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	460b      	mov	r3, r1
 8007502:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007504:	2300      	movs	r3, #0
 8007506:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007508:	f3ef 8305 	mrs	r3, IPSR
 800750c:	61bb      	str	r3, [r7, #24]
  return(result);
 800750e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007510:	2b00      	cmp	r3, #0
 8007512:	d16a      	bne.n	80075ea <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007514:	f3ef 8310 	mrs	r3, PRIMASK
 8007518:	617b      	str	r3, [r7, #20]
  return(result);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007520:	f3ef 8311 	mrs	r3, BASEPRI
 8007524:	613b      	str	r3, [r7, #16]
  return(result);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <osTimerNew+0x40>
 800752c:	4b31      	ldr	r3, [pc, #196]	@ (80075f4 <osTimerNew+0x100>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d05a      	beq.n	80075ea <osTimerNew+0xf6>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d057      	beq.n	80075ea <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800753a:	2008      	movs	r0, #8
 800753c:	f003 f8f4 	bl	800a728 <pvPortMalloc>
 8007540:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d050      	beq.n	80075ea <osTimerNew+0xf6>
      callb->func = func;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <osTimerNew+0x6c>
        reload = pdFALSE;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
 800755e:	e001      	b.n	8007564 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007560:	2301      	movs	r3, #1
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 8007564:	f04f 33ff 	mov.w	r3, #4294967295
 8007568:	623b      	str	r3, [r7, #32]
      name = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01c      	beq.n	80075ae <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <osTimerNew+0x8e>
          name = attr->name;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <osTimerNew+0xa4>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007590:	d902      	bls.n	8007598 <osTimerNew+0xa4>
          mem = 1;
 8007592:	2301      	movs	r3, #1
 8007594:	623b      	str	r3, [r7, #32]
 8007596:	e00c      	b.n	80075b2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <osTimerNew+0xbe>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <osTimerNew+0xbe>
            mem = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	623b      	str	r3, [r7, #32]
 80075ac:	e001      	b.n	80075b2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10c      	bne.n	80075d2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	4b0e      	ldr	r3, [pc, #56]	@ (80075f8 <osTimerNew+0x104>)
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c6:	2101      	movs	r1, #1
 80075c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075ca:	f002 fab0 	bl	8009b2e <xTimerCreateStatic>
 80075ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075d0:	e00b      	b.n	80075ea <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80075d8:	4b07      	ldr	r3, [pc, #28]	@ (80075f8 <osTimerNew+0x104>)
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e0:	2101      	movs	r1, #1
 80075e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075e4:	f002 fa82 	bl	8009aec <xTimerCreate>
 80075e8:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3730      	adds	r7, #48	@ 0x30
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000558 	.word	0x20000558
 80075f8:	080074c9 	.word	0x080074c9

080075fc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	@ 0x28
 8007600:	af02      	add	r7, sp, #8
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800760a:	f3ef 8305 	mrs	r3, IPSR
 800760e:	617b      	str	r3, [r7, #20]
  return(result);
 8007610:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10f      	bne.n	8007636 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007616:	f3ef 8310 	mrs	r3, PRIMASK
 800761a:	613b      	str	r3, [r7, #16]
  return(result);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007622:	f3ef 8311 	mrs	r3, BASEPRI
 8007626:	60fb      	str	r3, [r7, #12]
  return(result);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <osTimerStart+0x42>
 800762e:	4b12      	ldr	r3, [pc, #72]	@ (8007678 <osTimerStart+0x7c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d103      	bne.n	800763e <osTimerStart+0x42>
    stat = osErrorISR;
 8007636:	f06f 0305 	mvn.w	r3, #5
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	e017      	b.n	800766e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <osTimerStart+0x50>
    stat = osErrorParameter;
 8007644:	f06f 0303 	mvn.w	r3, #3
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	e010      	b.n	800766e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800764c:	2300      	movs	r3, #0
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	2300      	movs	r3, #0
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	2104      	movs	r1, #4
 8007656:	69b8      	ldr	r0, [r7, #24]
 8007658:	f002 faec 	bl	8009c34 <xTimerGenericCommand>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d102      	bne.n	8007668 <osTimerStart+0x6c>
      stat = osOK;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	e002      	b.n	800766e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007668:	f06f 0302 	mvn.w	r3, #2
 800766c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800766e:	69fb      	ldr	r3, [r7, #28]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3720      	adds	r7, #32
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000558 	.word	0x20000558

0800767c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	@ 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007688:	f3ef 8305 	mrs	r3, IPSR
 800768c:	613b      	str	r3, [r7, #16]
  return(result);
 800768e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 8085 	bne.w	80077a0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007696:	f3ef 8310 	mrs	r3, PRIMASK
 800769a:	60fb      	str	r3, [r7, #12]
  return(result);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076a2:	f3ef 8311 	mrs	r3, BASEPRI
 80076a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <osMutexNew+0x3a>
 80076ae:	4b3f      	ldr	r3, [pc, #252]	@ (80077ac <osMutexNew+0x130>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d074      	beq.n	80077a0 <osMutexNew+0x124>
    if (attr != NULL) {
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <osMutexNew+0x48>
      type = attr->attr_bits;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	623b      	str	r3, [r7, #32]
 80076c2:	e001      	b.n	80076c8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <osMutexNew+0x5c>
      rmtx = 1U;
 80076d2:	2301      	movs	r3, #1
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	e001      	b.n	80076dc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d15c      	bne.n	80077a0 <osMutexNew+0x124>
      mem = -1;
 80076e6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ea:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d015      	beq.n	800771e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d006      	beq.n	8007708 <osMutexNew+0x8c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	2b4f      	cmp	r3, #79	@ 0x4f
 8007700:	d902      	bls.n	8007708 <osMutexNew+0x8c>
          mem = 1;
 8007702:	2301      	movs	r3, #1
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e00c      	b.n	8007722 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d108      	bne.n	8007722 <osMutexNew+0xa6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <osMutexNew+0xa6>
            mem = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	e001      	b.n	8007722 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d112      	bne.n	800774e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	4619      	mov	r1, r3
 8007734:	2004      	movs	r0, #4
 8007736:	f000 fb5c 	bl	8007df2 <xQueueCreateMutexStatic>
 800773a:	6278      	str	r0, [r7, #36]	@ 0x24
 800773c:	e016      	b.n	800776c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	4619      	mov	r1, r3
 8007744:	2001      	movs	r0, #1
 8007746:	f000 fb54 	bl	8007df2 <xQueueCreateMutexStatic>
 800774a:	6278      	str	r0, [r7, #36]	@ 0x24
 800774c:	e00e      	b.n	800776c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10b      	bne.n	800776c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800775a:	2004      	movs	r0, #4
 800775c:	f000 fb31 	bl	8007dc2 <xQueueCreateMutex>
 8007760:	6278      	str	r0, [r7, #36]	@ 0x24
 8007762:	e003      	b.n	800776c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007764:	2001      	movs	r0, #1
 8007766:	f000 fb2c 	bl	8007dc2 <xQueueCreateMutex>
 800776a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00c      	beq.n	800778c <osMutexNew+0x110>
        if (attr != NULL) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <osMutexNew+0x104>
          name = attr->name;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	e001      	b.n	8007784 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007784:	6979      	ldr	r1, [r7, #20]
 8007786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007788:	f001 f894 	bl	80088b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d006      	beq.n	80077a0 <osMutexNew+0x124>
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	f043 0301 	orr.w	r3, r3, #1
 800779e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3728      	adds	r7, #40	@ 0x28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000558 	.word	0x20000558

080077b0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ce:	f3ef 8305 	mrs	r3, IPSR
 80077d2:	613b      	str	r3, [r7, #16]
  return(result);
 80077d4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10f      	bne.n	80077fa <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077da:	f3ef 8310 	mrs	r3, PRIMASK
 80077de:	60fb      	str	r3, [r7, #12]
  return(result);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d105      	bne.n	80077f2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077e6:	f3ef 8311 	mrs	r3, BASEPRI
 80077ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <osMutexAcquire+0x52>
 80077f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <osMutexAcquire+0xb8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d103      	bne.n	8007802 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80077fa:	f06f 0305 	mvn.w	r3, #5
 80077fe:	61fb      	str	r3, [r7, #28]
 8007800:	e02c      	b.n	800785c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007808:	f06f 0303 	mvn.w	r3, #3
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	e025      	b.n	800785c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	69b8      	ldr	r0, [r7, #24]
 800781a:	f000 fb3c 	bl	8007e96 <xQueueTakeMutexRecursive>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d01b      	beq.n	800785c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800782a:	f06f 0301 	mvn.w	r3, #1
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e014      	b.n	800785c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007832:	f06f 0302 	mvn.w	r3, #2
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e010      	b.n	800785c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	69b8      	ldr	r0, [r7, #24]
 800783e:	f000 fdf9 	bl	8008434 <xQueueSemaphoreTake>
 8007842:	4603      	mov	r3, r0
 8007844:	2b01      	cmp	r3, #1
 8007846:	d009      	beq.n	800785c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800784e:	f06f 0301 	mvn.w	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	e002      	b.n	800785c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007856:	f06f 0302 	mvn.w	r3, #2
 800785a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800785c:	69fb      	ldr	r3, [r7, #28]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000558 	.word	0x20000558

0800786c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007884:	2300      	movs	r3, #0
 8007886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007888:	f3ef 8305 	mrs	r3, IPSR
 800788c:	613b      	str	r3, [r7, #16]
  return(result);
 800788e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10f      	bne.n	80078b4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007894:	f3ef 8310 	mrs	r3, PRIMASK
 8007898:	60fb      	str	r3, [r7, #12]
  return(result);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d105      	bne.n	80078ac <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078a0:	f3ef 8311 	mrs	r3, BASEPRI
 80078a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <osMutexRelease+0x50>
 80078ac:	4b16      	ldr	r3, [pc, #88]	@ (8007908 <osMutexRelease+0x9c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d103      	bne.n	80078bc <osMutexRelease+0x50>
    stat = osErrorISR;
 80078b4:	f06f 0305 	mvn.w	r3, #5
 80078b8:	61fb      	str	r3, [r7, #28]
 80078ba:	e01f      	b.n	80078fc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80078c2:	f06f 0303 	mvn.w	r3, #3
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	e018      	b.n	80078fc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80078d0:	69b8      	ldr	r0, [r7, #24]
 80078d2:	f000 faa9 	bl	8007e28 <xQueueGiveMutexRecursive>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d00f      	beq.n	80078fc <osMutexRelease+0x90>
        stat = osErrorResource;
 80078dc:	f06f 0302 	mvn.w	r3, #2
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	e00b      	b.n	80078fc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80078e4:	2300      	movs	r3, #0
 80078e6:	2200      	movs	r2, #0
 80078e8:	2100      	movs	r1, #0
 80078ea:	69b8      	ldr	r0, [r7, #24]
 80078ec:	f000 fb0c 	bl	8007f08 <xQueueGenericSend>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d002      	beq.n	80078fc <osMutexRelease+0x90>
        stat = osErrorResource;
 80078f6:	f06f 0302 	mvn.w	r3, #2
 80078fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80078fc:	69fb      	ldr	r3, [r7, #28]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000558 	.word	0x20000558

0800790c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a07      	ldr	r2, [pc, #28]	@ (8007938 <vApplicationGetIdleTaskMemory+0x2c>)
 800791c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4a06      	ldr	r2, [pc, #24]	@ (800793c <vApplicationGetIdleTaskMemory+0x30>)
 8007922:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2280      	movs	r2, #128	@ 0x80
 8007928:	601a      	str	r2, [r3, #0]
}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	2000055c 	.word	0x2000055c
 800793c:	20000604 	.word	0x20000604

08007940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4a07      	ldr	r2, [pc, #28]	@ (800796c <vApplicationGetTimerTaskMemory+0x2c>)
 8007950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	4a06      	ldr	r2, [pc, #24]	@ (8007970 <vApplicationGetTimerTaskMemory+0x30>)
 8007956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800795e:	601a      	str	r2, [r3, #0]
}
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000804 	.word	0x20000804
 8007970:	200008ac 	.word	0x200008ac

08007974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f103 0208 	add.w	r2, r3, #8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f04f 32ff 	mov.w	r2, #4294967295
 800798c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f103 0208 	add.w	r2, r3, #8
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f103 0208 	add.w	r2, r3, #8
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	601a      	str	r2, [r3, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2c:	d103      	bne.n	8007a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	e00c      	b.n	8007a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e002      	b.n	8007a44 <vListInsert+0x2e>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d2f6      	bcs.n	8007a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	601a      	str	r2, [r3, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6892      	ldr	r2, [r2, #8]
 8007a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6852      	ldr	r2, [r2, #4]
 8007aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d103      	bne.n	8007abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	1e5a      	subs	r2, r3, #1
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10d      	bne.n	8007b0c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	b672      	cpsid	i
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	b662      	cpsie	i
 8007b04:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007b0c:	f002 fcde 	bl	800a4cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b1c:	fb01 f303 	mul.w	r3, r1, r3
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	68f9      	ldr	r1, [r7, #12]
 8007b40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b42:	fb01 f303 	mul.w	r3, r1, r3
 8007b46:	441a      	add	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	22ff      	movs	r2, #255	@ 0xff
 8007b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	22ff      	movs	r2, #255	@ 0xff
 8007b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d114      	bne.n	8007b8c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d01a      	beq.n	8007ba0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 fba8 	bl	80092c4 <xTaskRemoveFromEventList>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d012      	beq.n	8007ba0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb0 <xQueueGenericReset+0xd4>)
 8007b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	e009      	b.n	8007ba0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3310      	adds	r3, #16
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff feef 	bl	8007974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3324      	adds	r3, #36	@ 0x24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff feea 	bl	8007974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ba0:	f002 fcca 	bl	800a538 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ba4:	2301      	movs	r3, #1
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08e      	sub	sp, #56	@ 0x38
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10d      	bne.n	8007be4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10d      	bne.n	8007c06 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	b672      	cpsid	i
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	b662      	cpsie	i
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	e7fd      	b.n	8007c02 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <xQueueGenericCreateStatic+0x5e>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <xQueueGenericCreateStatic+0x62>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <xQueueGenericCreateStatic+0x64>
 8007c16:	2300      	movs	r3, #0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10d      	bne.n	8007c38 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	b672      	cpsid	i
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	b662      	cpsie	i
 8007c30:	623b      	str	r3, [r7, #32]
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <xQueueGenericCreateStatic+0x90>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <xQueueGenericCreateStatic+0x94>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <xQueueGenericCreateStatic+0x96>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	b672      	cpsid	i
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	b662      	cpsie	i
 8007c62:	61fb      	str	r3, [r7, #28]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c6a:	2350      	movs	r3, #80	@ 0x50
 8007c6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b50      	cmp	r3, #80	@ 0x50
 8007c72:	d00d      	beq.n	8007c90 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	b672      	cpsid	i
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	b662      	cpsie	i
 8007c88:	61bb      	str	r3, [r7, #24]
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00d      	beq.n	8007cb8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ca4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f848 	bl	8007d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3730      	adds	r7, #48	@ 0x30
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b08a      	sub	sp, #40	@ 0x28
 8007cc6:	af02      	add	r7, sp, #8
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10d      	bne.n	8007cf2 <xQueueGenericCreate+0x30>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	613b      	str	r3, [r7, #16]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61fb      	str	r3, [r7, #28]
 8007cfc:	e004      	b.n	8007d08 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	fb02 f303 	mul.w	r3, r2, r3
 8007d06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3350      	adds	r3, #80	@ 0x50
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f002 fd0b 	bl	800a728 <pvPortMalloc>
 8007d12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d011      	beq.n	8007d3e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	3350      	adds	r3, #80	@ 0x50
 8007d22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d2c:	79fa      	ldrb	r2, [r7, #7]
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4613      	mov	r3, r2
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f805 	bl	8007d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3720      	adds	r7, #32
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e002      	b.n	8007d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d76:	2101      	movs	r1, #1
 8007d78:	69b8      	ldr	r0, [r7, #24]
 8007d7a:	f7ff feaf 	bl	8007adc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00e      	beq.n	8007dba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007dae:	2300      	movs	r3, #0
 8007db0:	2200      	movs	r2, #0
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f8a7 	bl	8007f08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b086      	sub	sp, #24
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	4603      	mov	r3, r0
 8007dca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6939      	ldr	r1, [r7, #16]
 8007dda:	6978      	ldr	r0, [r7, #20]
 8007ddc:	f7ff ff71 	bl	8007cc2 <xQueueGenericCreate>
 8007de0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff ffd3 	bl	8007d8e <prvInitialiseMutex>

		return xNewQueue;
 8007de8:	68fb      	ldr	r3, [r7, #12]
	}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b088      	sub	sp, #32
 8007df6:	af02      	add	r7, sp, #8
 8007df8:	4603      	mov	r3, r0
 8007dfa:	6039      	str	r1, [r7, #0]
 8007dfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	6939      	ldr	r1, [r7, #16]
 8007e10:	6978      	ldr	r0, [r7, #20]
 8007e12:	f7ff fecf 	bl	8007bb4 <xQueueGenericCreateStatic>
 8007e16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff ffb8 	bl	8007d8e <prvInitialiseMutex>

		return xNewQueue;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10d      	bne.n	8007e56 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3e:	b672      	cpsid	i
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	b662      	cpsie	i
 8007e4e:	60fb      	str	r3, [r7, #12]
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	e7fd      	b.n	8007e52 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	689c      	ldr	r4, [r3, #8]
 8007e5a:	f001 fc01 	bl	8009660 <xTaskGetCurrentTaskHandle>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d111      	bne.n	8007e88 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	1e5a      	subs	r2, r3, #1
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d105      	bne.n	8007e82 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007e76:	2300      	movs	r3, #0
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6938      	ldr	r0, [r7, #16]
 8007e7e:	f000 f843 	bl	8007f08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007e82:	2301      	movs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	e001      	b.n	8007e8c <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007e8c:	697b      	ldr	r3, [r7, #20]
	}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd90      	pop	{r4, r7, pc}

08007e96 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007e96:	b590      	push	{r4, r7, lr}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10d      	bne.n	8007ec6 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eae:	b672      	cpsid	i
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	b662      	cpsie	i
 8007ebe:	60fb      	str	r3, [r7, #12]
}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	e7fd      	b.n	8007ec2 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	689c      	ldr	r4, [r3, #8]
 8007eca:	f001 fbc9 	bl	8009660 <xTaskGetCurrentTaskHandle>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d107      	bne.n	8007ee4 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e00c      	b.n	8007efe <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6938      	ldr	r0, [r7, #16]
 8007ee8:	f000 faa4 	bl	8008434 <xQueueSemaphoreTake>
 8007eec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007efe:	697b      	ldr	r3, [r7, #20]
	}
 8007f00:	4618      	mov	r0, r3
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd90      	pop	{r4, r7, pc}

08007f08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08e      	sub	sp, #56	@ 0x38
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f16:	2300      	movs	r3, #0
 8007f18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <xQueueGenericSend+0x38>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <xQueueGenericSend+0x46>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <xQueueGenericSend+0x4a>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <xQueueGenericSend+0x4c>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10d      	bne.n	8007f74 <xQueueGenericSend+0x6c>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5c:	b672      	cpsid	i
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	b662      	cpsie	i
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	e7fd      	b.n	8007f70 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d103      	bne.n	8007f82 <xQueueGenericSend+0x7a>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <xQueueGenericSend+0x7e>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <xQueueGenericSend+0x80>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10d      	bne.n	8007fa8 <xQueueGenericSend+0xa0>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f90:	b672      	cpsid	i
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	b662      	cpsie	i
 8007fa0:	623b      	str	r3, [r7, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fa8:	f001 fb6a 	bl	8009680 <xTaskGetSchedulerState>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <xQueueGenericSend+0xb0>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <xQueueGenericSend+0xb4>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <xQueueGenericSend+0xb6>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <xQueueGenericSend+0xd6>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	b672      	cpsid	i
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	b662      	cpsie	i
 8007fd6:	61fb      	str	r3, [r7, #28]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fde:	f002 fa75 	bl	800a4cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d302      	bcc.n	8007ff4 <xQueueGenericSend+0xec>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d129      	bne.n	8008048 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ffa:	f000 fb4b 	bl	8008694 <prvCopyDataToQueue>
 8007ffe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d010      	beq.n	800802a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	3324      	adds	r3, #36	@ 0x24
 800800c:	4618      	mov	r0, r3
 800800e:	f001 f959 	bl	80092c4 <xTaskRemoveFromEventList>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d013      	beq.n	8008040 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008018:	4b3f      	ldr	r3, [pc, #252]	@ (8008118 <xQueueGenericSend+0x210>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	e00a      	b.n	8008040 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008030:	4b39      	ldr	r3, [pc, #228]	@ (8008118 <xQueueGenericSend+0x210>)
 8008032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008040:	f002 fa7a 	bl	800a538 <vPortExitCritical>
				return pdPASS;
 8008044:	2301      	movs	r3, #1
 8008046:	e063      	b.n	8008110 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d103      	bne.n	8008056 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800804e:	f002 fa73 	bl	800a538 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008052:	2300      	movs	r3, #0
 8008054:	e05c      	b.n	8008110 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008058:	2b00      	cmp	r3, #0
 800805a:	d106      	bne.n	800806a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800805c:	f107 0314 	add.w	r3, r7, #20
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f995 	bl	8009390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008066:	2301      	movs	r3, #1
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800806a:	f002 fa65 	bl	800a538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800806e:	f000 fef1 	bl	8008e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008072:	f002 fa2b 	bl	800a4cc <vPortEnterCritical>
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800807c:	b25b      	sxtb	r3, r3
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d103      	bne.n	800808c <xQueueGenericSend+0x184>
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008092:	b25b      	sxtb	r3, r3
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d103      	bne.n	80080a2 <xQueueGenericSend+0x19a>
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080a2:	f002 fa49 	bl	800a538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080a6:	1d3a      	adds	r2, r7, #4
 80080a8:	f107 0314 	add.w	r3, r7, #20
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 f984 	bl	80093bc <xTaskCheckForTimeOut>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d124      	bne.n	8008104 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080bc:	f000 fbe2 	bl	8008884 <prvIsQueueFull>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d018      	beq.n	80080f8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	3310      	adds	r3, #16
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 f8a2 	bl	8009218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080d6:	f000 fb6d 	bl	80087b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080da:	f000 fec9 	bl	8008e70 <xTaskResumeAll>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f47f af7c 	bne.w	8007fde <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80080e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <xQueueGenericSend+0x210>)
 80080e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	e772      	b.n	8007fde <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080fa:	f000 fb5b 	bl	80087b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080fe:	f000 feb7 	bl	8008e70 <xTaskResumeAll>
 8008102:	e76c      	b.n	8007fde <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008106:	f000 fb55 	bl	80087b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800810a:	f000 feb1 	bl	8008e70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800810e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008110:	4618      	mov	r0, r3
 8008112:	3738      	adds	r7, #56	@ 0x38
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08e      	sub	sp, #56	@ 0x38
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10d      	bne.n	8008150 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008138:	b672      	cpsid	i
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	b662      	cpsie	i
 8008148:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <xQueueGenericSendFromISR+0x42>
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <xQueueGenericSendFromISR+0x46>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <xQueueGenericSendFromISR+0x48>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10d      	bne.n	8008184 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816c:	b672      	cpsid	i
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	b662      	cpsie	i
 800817c:	623b      	str	r3, [r7, #32]
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b02      	cmp	r3, #2
 8008188:	d103      	bne.n	8008192 <xQueueGenericSendFromISR+0x76>
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <xQueueGenericSendFromISR+0x7a>
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <xQueueGenericSendFromISR+0x7c>
 8008196:	2300      	movs	r3, #0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10d      	bne.n	80081b8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a0:	b672      	cpsid	i
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	b662      	cpsie	i
 80081b0:	61fb      	str	r3, [r7, #28]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081b8:	f002 fa70 	bl	800a69c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081bc:	f3ef 8211 	mrs	r2, BASEPRI
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	61ba      	str	r2, [r7, #24]
 80081d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d302      	bcc.n	80081ee <xQueueGenericSendFromISR+0xd2>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d12c      	bne.n	8008248 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	68b9      	ldr	r1, [r7, #8]
 80081fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081fe:	f000 fa49 	bl	8008694 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008202:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d112      	bne.n	8008232 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d016      	beq.n	8008242 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	3324      	adds	r3, #36	@ 0x24
 8008218:	4618      	mov	r0, r3
 800821a:	f001 f853 	bl	80092c4 <xTaskRemoveFromEventList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00e      	beq.n	8008242 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e007      	b.n	8008242 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008232:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008236:	3301      	adds	r3, #1
 8008238:	b2db      	uxtb	r3, r3
 800823a:	b25a      	sxtb	r2, r3
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008242:	2301      	movs	r3, #1
 8008244:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008246:	e001      	b.n	800824c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008248:	2300      	movs	r3, #0
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008256:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800825a:	4618      	mov	r0, r3
 800825c:	3738      	adds	r7, #56	@ 0x38
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08c      	sub	sp, #48	@ 0x30
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008270:	2300      	movs	r3, #0
 8008272:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10d      	bne.n	800829a <xQueueReceive+0x36>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	b672      	cpsid	i
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	b662      	cpsie	i
 8008292:	623b      	str	r3, [r7, #32]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <xQueueReceive+0x44>
 80082a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <xQueueReceive+0x48>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <xQueueReceive+0x4a>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10d      	bne.n	80082ce <xQueueReceive+0x6a>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b6:	b672      	cpsid	i
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	b662      	cpsie	i
 80082c6:	61fb      	str	r3, [r7, #28]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082ce:	f001 f9d7 	bl	8009680 <xTaskGetSchedulerState>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <xQueueReceive+0x7a>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <xQueueReceive+0x7e>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <xQueueReceive+0x80>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10d      	bne.n	8008304 <xQueueReceive+0xa0>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	b672      	cpsid	i
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	b662      	cpsie	i
 80082fc:	61bb      	str	r3, [r7, #24]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008304:	f002 f8e2 	bl	800a4cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01f      	beq.n	8008354 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008318:	f000 fa26 	bl	8008768 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800831c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831e:	1e5a      	subs	r2, r3, #1
 8008320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008322:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00f      	beq.n	800834c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832e:	3310      	adds	r3, #16
 8008330:	4618      	mov	r0, r3
 8008332:	f000 ffc7 	bl	80092c4 <xTaskRemoveFromEventList>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800833c:	4b3c      	ldr	r3, [pc, #240]	@ (8008430 <xQueueReceive+0x1cc>)
 800833e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800834c:	f002 f8f4 	bl	800a538 <vPortExitCritical>
				return pdPASS;
 8008350:	2301      	movs	r3, #1
 8008352:	e069      	b.n	8008428 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d103      	bne.n	8008362 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800835a:	f002 f8ed 	bl	800a538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800835e:	2300      	movs	r3, #0
 8008360:	e062      	b.n	8008428 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008368:	f107 0310 	add.w	r3, r7, #16
 800836c:	4618      	mov	r0, r3
 800836e:	f001 f80f 	bl	8009390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008372:	2301      	movs	r3, #1
 8008374:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008376:	f002 f8df 	bl	800a538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800837a:	f000 fd6b 	bl	8008e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800837e:	f002 f8a5 	bl	800a4cc <vPortEnterCritical>
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008388:	b25b      	sxtb	r3, r3
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d103      	bne.n	8008398 <xQueueReceive+0x134>
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a4:	d103      	bne.n	80083ae <xQueueReceive+0x14a>
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083ae:	f002 f8c3 	bl	800a538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083b2:	1d3a      	adds	r2, r7, #4
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	4611      	mov	r1, r2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fffe 	bl	80093bc <xTaskCheckForTimeOut>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d123      	bne.n	800840e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083c8:	f000 fa46 	bl	8008858 <prvIsQueueEmpty>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d017      	beq.n	8008402 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d4:	3324      	adds	r3, #36	@ 0x24
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 ff1c 	bl	8009218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e2:	f000 f9e7 	bl	80087b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083e6:	f000 fd43 	bl	8008e70 <xTaskResumeAll>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d189      	bne.n	8008304 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80083f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008430 <xQueueReceive+0x1cc>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	e780      	b.n	8008304 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008404:	f000 f9d6 	bl	80087b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008408:	f000 fd32 	bl	8008e70 <xTaskResumeAll>
 800840c:	e77a      	b.n	8008304 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800840e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008410:	f000 f9d0 	bl	80087b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008414:	f000 fd2c 	bl	8008e70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800841a:	f000 fa1d 	bl	8008858 <prvIsQueueEmpty>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	f43f af6f 	beq.w	8008304 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008426:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008428:	4618      	mov	r0, r3
 800842a:	3730      	adds	r7, #48	@ 0x30
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	e000ed04 	.word	0xe000ed04

08008434 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	@ 0x38
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008446:	2300      	movs	r3, #0
 8008448:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800844a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10d      	bne.n	800846c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	b672      	cpsid	i
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	b662      	cpsie	i
 8008464:	623b      	str	r3, [r7, #32]
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00d      	beq.n	8008490 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	b672      	cpsid	i
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	b662      	cpsie	i
 8008488:	61fb      	str	r3, [r7, #28]
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008490:	f001 f8f6 	bl	8009680 <xTaskGetSchedulerState>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <xQueueSemaphoreTake+0x6c>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <xQueueSemaphoreTake+0x70>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <xQueueSemaphoreTake+0x72>
 80084a4:	2300      	movs	r3, #0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10d      	bne.n	80084c6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ae:	b672      	cpsid	i
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	b662      	cpsie	i
 80084be:	61bb      	str	r3, [r7, #24]
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084c6:	f002 f801 	bl	800a4cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80084d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d024      	beq.n	8008520 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80084d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d8:	1e5a      	subs	r2, r3, #1
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80084e6:	f001 fa4d 	bl	8009984 <pvTaskIncrementMutexHeldCount>
 80084ea:	4602      	mov	r2, r0
 80084ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00f      	beq.n	8008518 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	3310      	adds	r3, #16
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fee1 	bl	80092c4 <xTaskRemoveFromEventList>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008508:	4b55      	ldr	r3, [pc, #340]	@ (8008660 <xQueueSemaphoreTake+0x22c>)
 800850a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008518:	f002 f80e 	bl	800a538 <vPortExitCritical>
				return pdPASS;
 800851c:	2301      	movs	r3, #1
 800851e:	e09a      	b.n	8008656 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d114      	bne.n	8008550 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00d      	beq.n	8008548 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	b672      	cpsid	i
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	b662      	cpsie	i
 8008540:	617b      	str	r3, [r7, #20]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008548:	f001 fff6 	bl	800a538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800854c:	2300      	movs	r3, #0
 800854e:	e082      	b.n	8008656 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008556:	f107 030c 	add.w	r3, r7, #12
 800855a:	4618      	mov	r0, r3
 800855c:	f000 ff18 	bl	8009390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008560:	2301      	movs	r3, #1
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008564:	f001 ffe8 	bl	800a538 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008568:	f000 fc74 	bl	8008e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800856c:	f001 ffae 	bl	800a4cc <vPortEnterCritical>
 8008570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008572:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008576:	b25b      	sxtb	r3, r3
 8008578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857c:	d103      	bne.n	8008586 <xQueueSemaphoreTake+0x152>
 800857e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008588:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800858c:	b25b      	sxtb	r3, r3
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d103      	bne.n	800859c <xQueueSemaphoreTake+0x168>
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800859c:	f001 ffcc 	bl	800a538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085a0:	463a      	mov	r2, r7
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 ff07 	bl	80093bc <xTaskCheckForTimeOut>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d132      	bne.n	800861a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085b6:	f000 f94f 	bl	8008858 <prvIsQueueEmpty>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d026      	beq.n	800860e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d109      	bne.n	80085dc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80085c8:	f001 ff80 	bl	800a4cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 f873 	bl	80096bc <xTaskPriorityInherit>
 80085d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80085d8:	f001 ffae 	bl	800a538 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085de:	3324      	adds	r3, #36	@ 0x24
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fe17 	bl	8009218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085ec:	f000 f8e2 	bl	80087b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085f0:	f000 fc3e 	bl	8008e70 <xTaskResumeAll>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f47f af65 	bne.w	80084c6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80085fc:	4b18      	ldr	r3, [pc, #96]	@ (8008660 <xQueueSemaphoreTake+0x22c>)
 80085fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	e75b      	b.n	80084c6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800860e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008610:	f000 f8d0 	bl	80087b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008614:	f000 fc2c 	bl	8008e70 <xTaskResumeAll>
 8008618:	e755      	b.n	80084c6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800861a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800861c:	f000 f8ca 	bl	80087b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008620:	f000 fc26 	bl	8008e70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008624:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008626:	f000 f917 	bl	8008858 <prvIsQueueEmpty>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	f43f af4a 	beq.w	80084c6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00d      	beq.n	8008654 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008638:	f001 ff48 	bl	800a4cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800863c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800863e:	f000 f811 	bl	8008664 <prvGetDisinheritPriorityAfterTimeout>
 8008642:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800864a:	4618      	mov	r0, r3
 800864c:	f001 f912 	bl	8009874 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008650:	f001 ff72 	bl	800a538 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008656:	4618      	mov	r0, r3
 8008658:	3738      	adds	r7, #56	@ 0x38
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	e000ed04 	.word	0xe000ed04

08008664 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e001      	b.n	8008686 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008686:	68fb      	ldr	r3, [r7, #12]
	}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10d      	bne.n	80086ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d14d      	bne.n	8008756 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 f864 	bl	800978c <xTaskPriorityDisinherit>
 80086c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	609a      	str	r2, [r3, #8]
 80086cc:	e043      	b.n	8008756 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d119      	bne.n	8008708 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6858      	ldr	r0, [r3, #4]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086dc:	461a      	mov	r2, r3
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	f003 fa85 	bl	800bbee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ec:	441a      	add	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d32b      	bcc.n	8008756 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]
 8008706:	e026      	b.n	8008756 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68d8      	ldr	r0, [r3, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008710:	461a      	mov	r2, r3
 8008712:	68b9      	ldr	r1, [r7, #8]
 8008714:	f003 fa6b 	bl	800bbee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008720:	425b      	negs	r3, r3
 8008722:	441a      	add	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	68da      	ldr	r2, [r3, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d207      	bcs.n	8008744 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873c:	425b      	negs	r3, r3
 800873e:	441a      	add	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d105      	bne.n	8008756 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3b01      	subs	r3, #1
 8008754:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800875e:	697b      	ldr	r3, [r7, #20]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d018      	beq.n	80087ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	441a      	add	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	429a      	cmp	r2, r3
 8008792:	d303      	bcc.n	800879c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68d9      	ldr	r1, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a4:	461a      	mov	r2, r3
 80087a6:	6838      	ldr	r0, [r7, #0]
 80087a8:	f003 fa21 	bl	800bbee <memcpy>
	}
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087bc:	f001 fe86 	bl	800a4cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087c8:	e011      	b.n	80087ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d012      	beq.n	80087f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3324      	adds	r3, #36	@ 0x24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fd74 	bl	80092c4 <xTaskRemoveFromEventList>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087e2:	f000 fe53 	bl	800948c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dce9      	bgt.n	80087ca <prvUnlockQueue+0x16>
 80087f6:	e000      	b.n	80087fa <prvUnlockQueue+0x46>
					break;
 80087f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	22ff      	movs	r2, #255	@ 0xff
 80087fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008802:	f001 fe99 	bl	800a538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008806:	f001 fe61 	bl	800a4cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008810:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008812:	e011      	b.n	8008838 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d012      	beq.n	8008842 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3310      	adds	r3, #16
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fd4f 	bl	80092c4 <xTaskRemoveFromEventList>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800882c:	f000 fe2e 	bl	800948c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	3b01      	subs	r3, #1
 8008834:	b2db      	uxtb	r3, r3
 8008836:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	dce9      	bgt.n	8008814 <prvUnlockQueue+0x60>
 8008840:	e000      	b.n	8008844 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008842:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	22ff      	movs	r2, #255	@ 0xff
 8008848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800884c:	f001 fe74 	bl	800a538 <vPortExitCritical>
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008860:	f001 fe34 	bl	800a4cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e001      	b.n	8008876 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008876:	f001 fe5f 	bl	800a538 <vPortExitCritical>

	return xReturn;
 800887a:	68fb      	ldr	r3, [r7, #12]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800888c:	f001 fe1e 	bl	800a4cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008898:	429a      	cmp	r2, r3
 800889a:	d102      	bne.n	80088a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e001      	b.n	80088a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088a6:	f001 fe47 	bl	800a538 <vPortExitCritical>

	return xReturn;
 80088aa:	68fb      	ldr	r3, [r7, #12]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e014      	b.n	80088ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008904 <vQueueAddToRegistry+0x50>)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088d0:	490c      	ldr	r1, [pc, #48]	@ (8008904 <vQueueAddToRegistry+0x50>)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088da:	4a0a      	ldr	r2, [pc, #40]	@ (8008904 <vQueueAddToRegistry+0x50>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088e6:	e006      	b.n	80088f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b07      	cmp	r3, #7
 80088f2:	d9e7      	bls.n	80088c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	200018ac 	.word	0x200018ac

08008908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008918:	f001 fdd8 	bl	800a4cc <vPortEnterCritical>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008922:	b25b      	sxtb	r3, r3
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d103      	bne.n	8008932 <vQueueWaitForMessageRestricted+0x2a>
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008938:	b25b      	sxtb	r3, r3
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d103      	bne.n	8008948 <vQueueWaitForMessageRestricted+0x40>
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008948:	f001 fdf6 	bl	800a538 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	3324      	adds	r3, #36	@ 0x24
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fc83 	bl	8009268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008962:	6978      	ldr	r0, [r7, #20]
 8008964:	f7ff ff26 	bl	80087b4 <prvUnlockQueue>
	}
 8008968:	bf00      	nop
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08e      	sub	sp, #56	@ 0x38
 8008974:	af04      	add	r7, sp, #16
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800897e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10d      	bne.n	80089a0 <xTaskCreateStatic+0x30>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	b672      	cpsid	i
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	b662      	cpsie	i
 8008998:	623b      	str	r3, [r7, #32]
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	e7fd      	b.n	800899c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10d      	bne.n	80089c2 <xTaskCreateStatic+0x52>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	b672      	cpsid	i
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	b662      	cpsie	i
 80089ba:	61fb      	str	r3, [r7, #28]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089c2:	23a8      	movs	r3, #168	@ 0xa8
 80089c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80089ca:	d00d      	beq.n	80089e8 <xTaskCreateStatic+0x78>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	b672      	cpsid	i
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	b662      	cpsie	i
 80089e0:	61bb      	str	r3, [r7, #24]
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01e      	beq.n	8008a2e <xTaskCreateStatic+0xbe>
 80089f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d01b      	beq.n	8008a2e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0e:	9302      	str	r3, [sp, #8]
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 f851 	bl	8008ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a28:	f000 f8f8 	bl	8008c1c <prvAddNewTaskToReadyList>
 8008a2c:	e001      	b.n	8008a32 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a32:	697b      	ldr	r3, [r7, #20]
	}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3728      	adds	r7, #40	@ 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08c      	sub	sp, #48	@ 0x30
 8008a40:	af04      	add	r7, sp, #16
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fe69 	bl	800a728 <pvPortMalloc>
 8008a56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00e      	beq.n	8008a7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a5e:	20a8      	movs	r0, #168	@ 0xa8
 8008a60:	f001 fe62 	bl	800a728 <pvPortMalloc>
 8008a64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d003      	beq.n	8008a74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a72:	e005      	b.n	8008a80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a74:	6978      	ldr	r0, [r7, #20]
 8008a76:	f001 ff25 	bl	800a8c4 <vPortFree>
 8008a7a:	e001      	b.n	8008a80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d017      	beq.n	8008ab6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a8e:	88fa      	ldrh	r2, [r7, #6]
 8008a90:	2300      	movs	r3, #0
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 f80f 	bl	8008ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aaa:	69f8      	ldr	r0, [r7, #28]
 8008aac:	f000 f8b6 	bl	8008c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	e002      	b.n	8008abc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008abc:	69bb      	ldr	r3, [r7, #24]
	}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	461a      	mov	r2, r3
 8008ae0:	21a5      	movs	r1, #165	@ 0xa5
 8008ae2:	f002 ff9c 	bl	800ba1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008af0:	440b      	add	r3, r1
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00d      	beq.n	8008b26 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0e:	b672      	cpsid	i
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	b662      	cpsie	i
 8008b1e:	617b      	str	r3, [r7, #20]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01f      	beq.n	8008b6c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e012      	b.n	8008b58 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	7819      	ldrb	r1, [r3, #0]
 8008b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	3334      	adds	r3, #52	@ 0x34
 8008b42:	460a      	mov	r2, r1
 8008b44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d006      	beq.n	8008b60 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3301      	adds	r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2b0f      	cmp	r3, #15
 8008b5c:	d9e9      	bls.n	8008b32 <prvInitialiseNewTask+0x6a>
 8008b5e:	e000      	b.n	8008b62 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008b60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b6a:	e003      	b.n	8008b74 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	2b37      	cmp	r3, #55	@ 0x37
 8008b78:	d901      	bls.n	8008b7e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b7a:	2337      	movs	r3, #55	@ 0x37
 8008b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b88:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	3304      	adds	r3, #4
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe ff0d 	bl	80079b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9c:	3318      	adds	r3, #24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe ff08 	bl	80079b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bcc:	3354      	adds	r3, #84	@ 0x54
 8008bce:	224c      	movs	r2, #76	@ 0x4c
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f002 ff23 	bl	800ba1e <memset>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	4a0d      	ldr	r2, [pc, #52]	@ (8008c10 <prvInitialiseNewTask+0x148>)
 8008bdc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	4a0c      	ldr	r2, [pc, #48]	@ (8008c14 <prvInitialiseNewTask+0x14c>)
 8008be2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	4a0c      	ldr	r2, [pc, #48]	@ (8008c18 <prvInitialiseNewTask+0x150>)
 8008be8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	68f9      	ldr	r1, [r7, #12]
 8008bee:	69b8      	ldr	r0, [r7, #24]
 8008bf0:	f001 fb60 	bl	800a2b4 <pxPortInitialiseStack>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c06:	bf00      	nop
 8008c08:	3720      	adds	r7, #32
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20005e98 	.word	0x20005e98
 8008c14:	20005f00 	.word	0x20005f00
 8008c18:	20005f68 	.word	0x20005f68

08008c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c24:	f001 fc52 	bl	800a4cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c28:	4b2d      	ldr	r3, [pc, #180]	@ (8008ce0 <prvAddNewTaskToReadyList+0xc4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ce0 <prvAddNewTaskToReadyList+0xc4>)
 8008c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c32:	4b2c      	ldr	r3, [pc, #176]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc8>)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c40:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <prvAddNewTaskToReadyList+0xc4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d110      	bne.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c48:	f000 fc44 	bl	80094d4 <prvInitialiseTaskLists>
 8008c4c:	e00d      	b.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ce8 <prvAddNewTaskToReadyList+0xcc>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c56:	4b23      	ldr	r3, [pc, #140]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d802      	bhi.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c64:	4a1f      	ldr	r2, [pc, #124]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc8>)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c6a:	4b20      	ldr	r3, [pc, #128]	@ (8008cec <prvAddNewTaskToReadyList+0xd0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	4a1e      	ldr	r2, [pc, #120]	@ (8008cec <prvAddNewTaskToReadyList+0xd0>)
 8008c72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c74:	4b1d      	ldr	r3, [pc, #116]	@ (8008cec <prvAddNewTaskToReadyList+0xd0>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c80:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf0 <prvAddNewTaskToReadyList+0xd4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d903      	bls.n	8008c90 <prvAddNewTaskToReadyList+0x74>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	4a18      	ldr	r2, [pc, #96]	@ (8008cf0 <prvAddNewTaskToReadyList+0xd4>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4a15      	ldr	r2, [pc, #84]	@ (8008cf4 <prvAddNewTaskToReadyList+0xd8>)
 8008c9e:	441a      	add	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f7fe fe91 	bl	80079ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cac:	f001 fc44 	bl	800a538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce8 <prvAddNewTaskToReadyList+0xcc>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00e      	beq.n	8008cd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d207      	bcs.n	8008cd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf8 <prvAddNewTaskToReadyList+0xdc>)
 8008cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20001dc0 	.word	0x20001dc0
 8008ce4:	200018ec 	.word	0x200018ec
 8008ce8:	20001dcc 	.word	0x20001dcc
 8008cec:	20001ddc 	.word	0x20001ddc
 8008cf0:	20001dc8 	.word	0x20001dc8
 8008cf4:	200018f0 	.word	0x200018f0
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d01a      	beq.n	8008d44 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d0e:	4b15      	ldr	r3, [pc, #84]	@ (8008d64 <vTaskDelay+0x68>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00d      	beq.n	8008d32 <vTaskDelay+0x36>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	b672      	cpsid	i
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	b662      	cpsie	i
 8008d2a:	60bb      	str	r3, [r7, #8]
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008d32:	f000 f88f 	bl	8008e54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fe37 	bl	80099ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d3e:	f000 f897 	bl	8008e70 <xTaskResumeAll>
 8008d42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008d4a:	4b07      	ldr	r3, [pc, #28]	@ (8008d68 <vTaskDelay+0x6c>)
 8008d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20001de8 	.word	0x20001de8
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	@ 0x28
 8008d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d7a:	463a      	mov	r2, r7
 8008d7c:	1d39      	adds	r1, r7, #4
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fdc2 	bl	800790c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	9202      	str	r2, [sp, #8]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2300      	movs	r3, #0
 8008d98:	460a      	mov	r2, r1
 8008d9a:	4926      	ldr	r1, [pc, #152]	@ (8008e34 <vTaskStartScheduler+0xc8>)
 8008d9c:	4826      	ldr	r0, [pc, #152]	@ (8008e38 <vTaskStartScheduler+0xcc>)
 8008d9e:	f7ff fde7 	bl	8008970 <xTaskCreateStatic>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4a25      	ldr	r2, [pc, #148]	@ (8008e3c <vTaskStartScheduler+0xd0>)
 8008da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008da8:	4b24      	ldr	r3, [pc, #144]	@ (8008e3c <vTaskStartScheduler+0xd0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008db0:	2301      	movs	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	e001      	b.n	8008dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d102      	bne.n	8008dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dc0:	f000 fe48 	bl	8009a54 <xTimerCreateTimerTask>
 8008dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d11d      	bne.n	8008e08 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd0:	b672      	cpsid	i
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	b662      	cpsie	i
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008de4:	4b16      	ldr	r3, [pc, #88]	@ (8008e40 <vTaskStartScheduler+0xd4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3354      	adds	r3, #84	@ 0x54
 8008dea:	4a16      	ldr	r2, [pc, #88]	@ (8008e44 <vTaskStartScheduler+0xd8>)
 8008dec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dee:	4b16      	ldr	r3, [pc, #88]	@ (8008e48 <vTaskStartScheduler+0xdc>)
 8008df0:	f04f 32ff 	mov.w	r2, #4294967295
 8008df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008df6:	4b15      	ldr	r3, [pc, #84]	@ (8008e4c <vTaskStartScheduler+0xe0>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dfc:	4b14      	ldr	r3, [pc, #80]	@ (8008e50 <vTaskStartScheduler+0xe4>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e02:	f001 fae5 	bl	800a3d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e06:	e011      	b.n	8008e2c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0e:	d10d      	bne.n	8008e2c <vTaskStartScheduler+0xc0>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e14:	b672      	cpsid	i
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	b662      	cpsie	i
 8008e24:	60fb      	str	r3, [r7, #12]
}
 8008e26:	bf00      	nop
 8008e28:	bf00      	nop
 8008e2a:	e7fd      	b.n	8008e28 <vTaskStartScheduler+0xbc>
}
 8008e2c:	bf00      	nop
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	0800f490 	.word	0x0800f490
 8008e38:	080094a5 	.word	0x080094a5
 8008e3c:	20001de4 	.word	0x20001de4
 8008e40:	200018ec 	.word	0x200018ec
 8008e44:	20000178 	.word	0x20000178
 8008e48:	20001de0 	.word	0x20001de0
 8008e4c:	20001dcc 	.word	0x20001dcc
 8008e50:	20001dc4 	.word	0x20001dc4

08008e54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e58:	4b04      	ldr	r3, [pc, #16]	@ (8008e6c <vTaskSuspendAll+0x18>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	4a03      	ldr	r2, [pc, #12]	@ (8008e6c <vTaskSuspendAll+0x18>)
 8008e60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008e62:	bf00      	nop
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20001de8 	.word	0x20001de8

08008e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e7e:	4b43      	ldr	r3, [pc, #268]	@ (8008f8c <xTaskResumeAll+0x11c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10d      	bne.n	8008ea2 <xTaskResumeAll+0x32>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	b672      	cpsid	i
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	b662      	cpsie	i
 8008e9a:	603b      	str	r3, [r7, #0]
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	e7fd      	b.n	8008e9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ea2:	f001 fb13 	bl	800a4cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ea6:	4b39      	ldr	r3, [pc, #228]	@ (8008f8c <xTaskResumeAll+0x11c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	4a37      	ldr	r2, [pc, #220]	@ (8008f8c <xTaskResumeAll+0x11c>)
 8008eae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb0:	4b36      	ldr	r3, [pc, #216]	@ (8008f8c <xTaskResumeAll+0x11c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d162      	bne.n	8008f7e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eb8:	4b35      	ldr	r3, [pc, #212]	@ (8008f90 <xTaskResumeAll+0x120>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d05e      	beq.n	8008f7e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ec0:	e02f      	b.n	8008f22 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ec2:	4b34      	ldr	r3, [pc, #208]	@ (8008f94 <xTaskResumeAll+0x124>)
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3318      	adds	r3, #24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fdda 	bl	8007a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe fdd5 	bl	8007a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8008f98 <xTaskResumeAll+0x128>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d903      	bls.n	8008ef2 <xTaskResumeAll+0x82>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eee:	4a2a      	ldr	r2, [pc, #168]	@ (8008f98 <xTaskResumeAll+0x128>)
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a27      	ldr	r2, [pc, #156]	@ (8008f9c <xTaskResumeAll+0x12c>)
 8008f00:	441a      	add	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fe fd60 	bl	80079ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f12:	4b23      	ldr	r3, [pc, #140]	@ (8008fa0 <xTaskResumeAll+0x130>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d302      	bcc.n	8008f22 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008f1c:	4b21      	ldr	r3, [pc, #132]	@ (8008fa4 <xTaskResumeAll+0x134>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f22:	4b1c      	ldr	r3, [pc, #112]	@ (8008f94 <xTaskResumeAll+0x124>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1cb      	bne.n	8008ec2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f30:	f000 fb76 	bl	8009620 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f34:	4b1c      	ldr	r3, [pc, #112]	@ (8008fa8 <xTaskResumeAll+0x138>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d010      	beq.n	8008f62 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f40:	f000 f846 	bl	8008fd0 <xTaskIncrementTick>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008f4a:	4b16      	ldr	r3, [pc, #88]	@ (8008fa4 <xTaskResumeAll+0x134>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1f1      	bne.n	8008f40 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008f5c:	4b12      	ldr	r3, [pc, #72]	@ (8008fa8 <xTaskResumeAll+0x138>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f62:	4b10      	ldr	r3, [pc, #64]	@ (8008fa4 <xTaskResumeAll+0x134>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d009      	beq.n	8008f7e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fac <xTaskResumeAll+0x13c>)
 8008f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f7e:	f001 fadb 	bl	800a538 <vPortExitCritical>

	return xAlreadyYielded;
 8008f82:	68bb      	ldr	r3, [r7, #8]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20001de8 	.word	0x20001de8
 8008f90:	20001dc0 	.word	0x20001dc0
 8008f94:	20001d80 	.word	0x20001d80
 8008f98:	20001dc8 	.word	0x20001dc8
 8008f9c:	200018f0 	.word	0x200018f0
 8008fa0:	200018ec 	.word	0x200018ec
 8008fa4:	20001dd4 	.word	0x20001dd4
 8008fa8:	20001dd0 	.word	0x20001dd0
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fb6:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <xTaskGetTickCount+0x1c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fbc:	687b      	ldr	r3, [r7, #4]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20001dc4 	.word	0x20001dc4

08008fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fda:	4b50      	ldr	r3, [pc, #320]	@ (800911c <xTaskIncrementTick+0x14c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f040 808c 	bne.w	80090fc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8009120 <xTaskIncrementTick+0x150>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fec:	4a4c      	ldr	r2, [pc, #304]	@ (8009120 <xTaskIncrementTick+0x150>)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d123      	bne.n	8009040 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8009124 <xTaskIncrementTick+0x154>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <xTaskIncrementTick+0x4e>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	b672      	cpsid	i
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	b662      	cpsie	i
 8009016:	603b      	str	r3, [r7, #0]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <xTaskIncrementTick+0x4a>
 800901e:	4b41      	ldr	r3, [pc, #260]	@ (8009124 <xTaskIncrementTick+0x154>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	4b40      	ldr	r3, [pc, #256]	@ (8009128 <xTaskIncrementTick+0x158>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a3e      	ldr	r2, [pc, #248]	@ (8009124 <xTaskIncrementTick+0x154>)
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	4a3e      	ldr	r2, [pc, #248]	@ (8009128 <xTaskIncrementTick+0x158>)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	4b3e      	ldr	r3, [pc, #248]	@ (800912c <xTaskIncrementTick+0x15c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3301      	adds	r3, #1
 8009038:	4a3c      	ldr	r2, [pc, #240]	@ (800912c <xTaskIncrementTick+0x15c>)
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	f000 faf0 	bl	8009620 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009040:	4b3b      	ldr	r3, [pc, #236]	@ (8009130 <xTaskIncrementTick+0x160>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	429a      	cmp	r2, r3
 8009048:	d349      	bcc.n	80090de <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800904a:	4b36      	ldr	r3, [pc, #216]	@ (8009124 <xTaskIncrementTick+0x154>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d104      	bne.n	800905e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009054:	4b36      	ldr	r3, [pc, #216]	@ (8009130 <xTaskIncrementTick+0x160>)
 8009056:	f04f 32ff 	mov.w	r2, #4294967295
 800905a:	601a      	str	r2, [r3, #0]
					break;
 800905c:	e03f      	b.n	80090de <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905e:	4b31      	ldr	r3, [pc, #196]	@ (8009124 <xTaskIncrementTick+0x154>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	429a      	cmp	r2, r3
 8009074:	d203      	bcs.n	800907e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009076:	4a2e      	ldr	r2, [pc, #184]	@ (8009130 <xTaskIncrementTick+0x160>)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800907c:	e02f      	b.n	80090de <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	3304      	adds	r3, #4
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fd00 	bl	8007a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3318      	adds	r3, #24
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fcf7 	bl	8007a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909e:	4b25      	ldr	r3, [pc, #148]	@ (8009134 <xTaskIncrementTick+0x164>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d903      	bls.n	80090ae <xTaskIncrementTick+0xde>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090aa:	4a22      	ldr	r2, [pc, #136]	@ (8009134 <xTaskIncrementTick+0x164>)
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009138 <xTaskIncrementTick+0x168>)
 80090bc:	441a      	add	r2, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	3304      	adds	r3, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fe fc82 	bl	80079ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ce:	4b1b      	ldr	r3, [pc, #108]	@ (800913c <xTaskIncrementTick+0x16c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d3b8      	bcc.n	800904a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80090d8:	2301      	movs	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090dc:	e7b5      	b.n	800904a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090de:	4b17      	ldr	r3, [pc, #92]	@ (800913c <xTaskIncrementTick+0x16c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e4:	4914      	ldr	r1, [pc, #80]	@ (8009138 <xTaskIncrementTick+0x168>)
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	440b      	add	r3, r1
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d907      	bls.n	8009106 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80090f6:	2301      	movs	r3, #1
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	e004      	b.n	8009106 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80090fc:	4b10      	ldr	r3, [pc, #64]	@ (8009140 <xTaskIncrementTick+0x170>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	4a0f      	ldr	r2, [pc, #60]	@ (8009140 <xTaskIncrementTick+0x170>)
 8009104:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009106:	4b0f      	ldr	r3, [pc, #60]	@ (8009144 <xTaskIncrementTick+0x174>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800910e:	2301      	movs	r3, #1
 8009110:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009112:	697b      	ldr	r3, [r7, #20]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20001de8 	.word	0x20001de8
 8009120:	20001dc4 	.word	0x20001dc4
 8009124:	20001d78 	.word	0x20001d78
 8009128:	20001d7c 	.word	0x20001d7c
 800912c:	20001dd8 	.word	0x20001dd8
 8009130:	20001de0 	.word	0x20001de0
 8009134:	20001dc8 	.word	0x20001dc8
 8009138:	200018f0 	.word	0x200018f0
 800913c:	200018ec 	.word	0x200018ec
 8009140:	20001dd0 	.word	0x20001dd0
 8009144:	20001dd4 	.word	0x20001dd4

08009148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800914e:	4b2c      	ldr	r3, [pc, #176]	@ (8009200 <vTaskSwitchContext+0xb8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009156:	4b2b      	ldr	r3, [pc, #172]	@ (8009204 <vTaskSwitchContext+0xbc>)
 8009158:	2201      	movs	r2, #1
 800915a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800915c:	e049      	b.n	80091f2 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800915e:	4b29      	ldr	r3, [pc, #164]	@ (8009204 <vTaskSwitchContext+0xbc>)
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009164:	4b28      	ldr	r3, [pc, #160]	@ (8009208 <vTaskSwitchContext+0xc0>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	e013      	b.n	8009194 <vTaskSwitchContext+0x4c>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10d      	bne.n	800918e <vTaskSwitchContext+0x46>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	b672      	cpsid	i
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	b662      	cpsie	i
 8009186:	607b      	str	r3, [r7, #4]
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	e7fd      	b.n	800918a <vTaskSwitchContext+0x42>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3b01      	subs	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	491d      	ldr	r1, [pc, #116]	@ (800920c <vTaskSwitchContext+0xc4>)
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0e1      	beq.n	800916c <vTaskSwitchContext+0x24>
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4a16      	ldr	r2, [pc, #88]	@ (800920c <vTaskSwitchContext+0xc4>)
 80091b4:	4413      	add	r3, r2
 80091b6:	60bb      	str	r3, [r7, #8]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	605a      	str	r2, [r3, #4]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	3308      	adds	r3, #8
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d104      	bne.n	80091d8 <vTaskSwitchContext+0x90>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	605a      	str	r2, [r3, #4]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	4a0c      	ldr	r2, [pc, #48]	@ (8009210 <vTaskSwitchContext+0xc8>)
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	4a09      	ldr	r2, [pc, #36]	@ (8009208 <vTaskSwitchContext+0xc0>)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091e8:	4b09      	ldr	r3, [pc, #36]	@ (8009210 <vTaskSwitchContext+0xc8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3354      	adds	r3, #84	@ 0x54
 80091ee:	4a09      	ldr	r2, [pc, #36]	@ (8009214 <vTaskSwitchContext+0xcc>)
 80091f0:	6013      	str	r3, [r2, #0]
}
 80091f2:	bf00      	nop
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	20001de8 	.word	0x20001de8
 8009204:	20001dd4 	.word	0x20001dd4
 8009208:	20001dc8 	.word	0x20001dc8
 800920c:	200018f0 	.word	0x200018f0
 8009210:	200018ec 	.word	0x200018ec
 8009214:	20000178 	.word	0x20000178

08009218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10d      	bne.n	8009244 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	b672      	cpsid	i
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	b662      	cpsie	i
 800923c:	60fb      	str	r3, [r7, #12]
}
 800923e:	bf00      	nop
 8009240:	bf00      	nop
 8009242:	e7fd      	b.n	8009240 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009244:	4b07      	ldr	r3, [pc, #28]	@ (8009264 <vTaskPlaceOnEventList+0x4c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3318      	adds	r3, #24
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fe fbe2 	bl	8007a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009252:	2101      	movs	r1, #1
 8009254:	6838      	ldr	r0, [r7, #0]
 8009256:	f000 fba9 	bl	80099ac <prvAddCurrentTaskToDelayedList>
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200018ec 	.word	0x200018ec

08009268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10d      	bne.n	8009296 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927e:	b672      	cpsid	i
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	b662      	cpsie	i
 800928e:	617b      	str	r3, [r7, #20]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009296:	4b0a      	ldr	r3, [pc, #40]	@ (80092c0 <vTaskPlaceOnEventListRestricted+0x58>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3318      	adds	r3, #24
 800929c:	4619      	mov	r1, r3
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f7fe fb95 	bl	80079ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80092aa:	f04f 33ff 	mov.w	r3, #4294967295
 80092ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	68b8      	ldr	r0, [r7, #8]
 80092b4:	f000 fb7a 	bl	80099ac <prvAddCurrentTaskToDelayedList>
	}
 80092b8:	bf00      	nop
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	200018ec 	.word	0x200018ec

080092c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10d      	bne.n	80092f6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	b672      	cpsid	i
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	b662      	cpsie	i
 80092ee:	60fb      	str	r3, [r7, #12]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3318      	adds	r3, #24
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fbc4 	bl	8007a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009300:	4b1d      	ldr	r3, [pc, #116]	@ (8009378 <xTaskRemoveFromEventList+0xb4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d11d      	bne.n	8009344 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fbbb 	bl	8007a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	4b19      	ldr	r3, [pc, #100]	@ (800937c <xTaskRemoveFromEventList+0xb8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d903      	bls.n	8009326 <xTaskRemoveFromEventList+0x62>
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009322:	4a16      	ldr	r2, [pc, #88]	@ (800937c <xTaskRemoveFromEventList+0xb8>)
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a13      	ldr	r2, [pc, #76]	@ (8009380 <xTaskRemoveFromEventList+0xbc>)
 8009334:	441a      	add	r2, r3
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3304      	adds	r3, #4
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7fe fb46 	bl	80079ce <vListInsertEnd>
 8009342:	e005      	b.n	8009350 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3318      	adds	r3, #24
 8009348:	4619      	mov	r1, r3
 800934a:	480e      	ldr	r0, [pc, #56]	@ (8009384 <xTaskRemoveFromEventList+0xc0>)
 800934c:	f7fe fb3f 	bl	80079ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009354:	4b0c      	ldr	r3, [pc, #48]	@ (8009388 <xTaskRemoveFromEventList+0xc4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935a:	429a      	cmp	r2, r3
 800935c:	d905      	bls.n	800936a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800935e:	2301      	movs	r3, #1
 8009360:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009362:	4b0a      	ldr	r3, [pc, #40]	@ (800938c <xTaskRemoveFromEventList+0xc8>)
 8009364:	2201      	movs	r2, #1
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	e001      	b.n	800936e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800936e:	697b      	ldr	r3, [r7, #20]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20001de8 	.word	0x20001de8
 800937c:	20001dc8 	.word	0x20001dc8
 8009380:	200018f0 	.word	0x200018f0
 8009384:	20001d80 	.word	0x20001d80
 8009388:	200018ec 	.word	0x200018ec
 800938c:	20001dd4 	.word	0x20001dd4

08009390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009398:	4b06      	ldr	r3, [pc, #24]	@ (80093b4 <vTaskInternalSetTimeOutState+0x24>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093a0:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <vTaskInternalSetTimeOutState+0x28>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	605a      	str	r2, [r3, #4]
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	20001dd8 	.word	0x20001dd8
 80093b8:	20001dc4 	.word	0x20001dc4

080093bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10d      	bne.n	80093e8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	b672      	cpsid	i
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	b662      	cpsie	i
 80093e0:	613b      	str	r3, [r7, #16]
}
 80093e2:	bf00      	nop
 80093e4:	bf00      	nop
 80093e6:	e7fd      	b.n	80093e4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10d      	bne.n	800940a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f2:	b672      	cpsid	i
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	b662      	cpsie	i
 8009402:	60fb      	str	r3, [r7, #12]
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	e7fd      	b.n	8009406 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800940a:	f001 f85f 	bl	800a4cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800940e:	4b1d      	ldr	r3, [pc, #116]	@ (8009484 <xTaskCheckForTimeOut+0xc8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009426:	d102      	bne.n	800942e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009428:	2300      	movs	r3, #0
 800942a:	61fb      	str	r3, [r7, #28]
 800942c:	e023      	b.n	8009476 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4b15      	ldr	r3, [pc, #84]	@ (8009488 <xTaskCheckForTimeOut+0xcc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d007      	beq.n	800944a <xTaskCheckForTimeOut+0x8e>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	429a      	cmp	r2, r3
 8009442:	d302      	bcc.n	800944a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009444:	2301      	movs	r3, #1
 8009446:	61fb      	str	r3, [r7, #28]
 8009448:	e015      	b.n	8009476 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	429a      	cmp	r2, r3
 8009452:	d20b      	bcs.n	800946c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff ff95 	bl	8009390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	61fb      	str	r3, [r7, #28]
 800946a:	e004      	b.n	8009476 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009472:	2301      	movs	r3, #1
 8009474:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009476:	f001 f85f 	bl	800a538 <vPortExitCritical>

	return xReturn;
 800947a:	69fb      	ldr	r3, [r7, #28]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20001dc4 	.word	0x20001dc4
 8009488:	20001dd8 	.word	0x20001dd8

0800948c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009490:	4b03      	ldr	r3, [pc, #12]	@ (80094a0 <vTaskMissedYield+0x14>)
 8009492:	2201      	movs	r2, #1
 8009494:	601a      	str	r2, [r3, #0]
}
 8009496:	bf00      	nop
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20001dd4 	.word	0x20001dd4

080094a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094ac:	f000 f852 	bl	8009554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094b0:	4b06      	ldr	r3, [pc, #24]	@ (80094cc <prvIdleTask+0x28>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d9f9      	bls.n	80094ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80094b8:	4b05      	ldr	r3, [pc, #20]	@ (80094d0 <prvIdleTask+0x2c>)
 80094ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094c8:	e7f0      	b.n	80094ac <prvIdleTask+0x8>
 80094ca:	bf00      	nop
 80094cc:	200018f0 	.word	0x200018f0
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094da:	2300      	movs	r3, #0
 80094dc:	607b      	str	r3, [r7, #4]
 80094de:	e00c      	b.n	80094fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4a12      	ldr	r2, [pc, #72]	@ (8009534 <prvInitialiseTaskLists+0x60>)
 80094ec:	4413      	add	r3, r2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fa40 	bl	8007974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3301      	adds	r3, #1
 80094f8:	607b      	str	r3, [r7, #4]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b37      	cmp	r3, #55	@ 0x37
 80094fe:	d9ef      	bls.n	80094e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009500:	480d      	ldr	r0, [pc, #52]	@ (8009538 <prvInitialiseTaskLists+0x64>)
 8009502:	f7fe fa37 	bl	8007974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009506:	480d      	ldr	r0, [pc, #52]	@ (800953c <prvInitialiseTaskLists+0x68>)
 8009508:	f7fe fa34 	bl	8007974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800950c:	480c      	ldr	r0, [pc, #48]	@ (8009540 <prvInitialiseTaskLists+0x6c>)
 800950e:	f7fe fa31 	bl	8007974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009512:	480c      	ldr	r0, [pc, #48]	@ (8009544 <prvInitialiseTaskLists+0x70>)
 8009514:	f7fe fa2e 	bl	8007974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009518:	480b      	ldr	r0, [pc, #44]	@ (8009548 <prvInitialiseTaskLists+0x74>)
 800951a:	f7fe fa2b 	bl	8007974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800951e:	4b0b      	ldr	r3, [pc, #44]	@ (800954c <prvInitialiseTaskLists+0x78>)
 8009520:	4a05      	ldr	r2, [pc, #20]	@ (8009538 <prvInitialiseTaskLists+0x64>)
 8009522:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009524:	4b0a      	ldr	r3, [pc, #40]	@ (8009550 <prvInitialiseTaskLists+0x7c>)
 8009526:	4a05      	ldr	r2, [pc, #20]	@ (800953c <prvInitialiseTaskLists+0x68>)
 8009528:	601a      	str	r2, [r3, #0]
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200018f0 	.word	0x200018f0
 8009538:	20001d50 	.word	0x20001d50
 800953c:	20001d64 	.word	0x20001d64
 8009540:	20001d80 	.word	0x20001d80
 8009544:	20001d94 	.word	0x20001d94
 8009548:	20001dac 	.word	0x20001dac
 800954c:	20001d78 	.word	0x20001d78
 8009550:	20001d7c 	.word	0x20001d7c

08009554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800955a:	e019      	b.n	8009590 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800955c:	f000 ffb6 	bl	800a4cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009560:	4b10      	ldr	r3, [pc, #64]	@ (80095a4 <prvCheckTasksWaitingTermination+0x50>)
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3304      	adds	r3, #4
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe fa8b 	bl	8007a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009572:	4b0d      	ldr	r3, [pc, #52]	@ (80095a8 <prvCheckTasksWaitingTermination+0x54>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3b01      	subs	r3, #1
 8009578:	4a0b      	ldr	r2, [pc, #44]	@ (80095a8 <prvCheckTasksWaitingTermination+0x54>)
 800957a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800957c:	4b0b      	ldr	r3, [pc, #44]	@ (80095ac <prvCheckTasksWaitingTermination+0x58>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3b01      	subs	r3, #1
 8009582:	4a0a      	ldr	r2, [pc, #40]	@ (80095ac <prvCheckTasksWaitingTermination+0x58>)
 8009584:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009586:	f000 ffd7 	bl	800a538 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f810 	bl	80095b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009590:	4b06      	ldr	r3, [pc, #24]	@ (80095ac <prvCheckTasksWaitingTermination+0x58>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e1      	bne.n	800955c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20001d94 	.word	0x20001d94
 80095a8:	20001dc0 	.word	0x20001dc0
 80095ac:	20001da8 	.word	0x20001da8

080095b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3354      	adds	r3, #84	@ 0x54
 80095bc:	4618      	mov	r0, r3
 80095be:	f002 fa5d 	bl	800ba7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d108      	bne.n	80095de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	4618      	mov	r0, r3
 80095d2:	f001 f977 	bl	800a8c4 <vPortFree>
				vPortFree( pxTCB );
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 f974 	bl	800a8c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095dc:	e01b      	b.n	8009616 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d103      	bne.n	80095f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f96b 	bl	800a8c4 <vPortFree>
	}
 80095ee:	e012      	b.n	8009616 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d00d      	beq.n	8009616 <prvDeleteTCB+0x66>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fe:	b672      	cpsid	i
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	b662      	cpsie	i
 800960e:	60fb      	str	r3, [r7, #12]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <prvDeleteTCB+0x62>
	}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009626:	4b0c      	ldr	r3, [pc, #48]	@ (8009658 <prvResetNextTaskUnblockTime+0x38>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d104      	bne.n	800963a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009630:	4b0a      	ldr	r3, [pc, #40]	@ (800965c <prvResetNextTaskUnblockTime+0x3c>)
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009638:	e008      	b.n	800964c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963a:	4b07      	ldr	r3, [pc, #28]	@ (8009658 <prvResetNextTaskUnblockTime+0x38>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4a04      	ldr	r2, [pc, #16]	@ (800965c <prvResetNextTaskUnblockTime+0x3c>)
 800964a:	6013      	str	r3, [r2, #0]
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	20001d78 	.word	0x20001d78
 800965c:	20001de0 	.word	0x20001de0

08009660 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009666:	4b05      	ldr	r3, [pc, #20]	@ (800967c <xTaskGetCurrentTaskHandle+0x1c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800966c:	687b      	ldr	r3, [r7, #4]
	}
 800966e:	4618      	mov	r0, r3
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	200018ec 	.word	0x200018ec

08009680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009686:	4b0b      	ldr	r3, [pc, #44]	@ (80096b4 <xTaskGetSchedulerState+0x34>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800968e:	2301      	movs	r3, #1
 8009690:	607b      	str	r3, [r7, #4]
 8009692:	e008      	b.n	80096a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009694:	4b08      	ldr	r3, [pc, #32]	@ (80096b8 <xTaskGetSchedulerState+0x38>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800969c:	2302      	movs	r3, #2
 800969e:	607b      	str	r3, [r7, #4]
 80096a0:	e001      	b.n	80096a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096a2:	2300      	movs	r3, #0
 80096a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096a6:	687b      	ldr	r3, [r7, #4]
	}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	20001dcc 	.word	0x20001dcc
 80096b8:	20001de8 	.word	0x20001de8

080096bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d051      	beq.n	8009776 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009780 <xTaskPriorityInherit+0xc4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096dc:	429a      	cmp	r2, r3
 80096de:	d241      	bcs.n	8009764 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	db06      	blt.n	80096f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e8:	4b25      	ldr	r3, [pc, #148]	@ (8009780 <xTaskPriorityInherit+0xc4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6959      	ldr	r1, [r3, #20]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4a1f      	ldr	r2, [pc, #124]	@ (8009784 <xTaskPriorityInherit+0xc8>)
 8009708:	4413      	add	r3, r2
 800970a:	4299      	cmp	r1, r3
 800970c:	d122      	bne.n	8009754 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	3304      	adds	r3, #4
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe f9b8 	bl	8007a88 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009718:	4b19      	ldr	r3, [pc, #100]	@ (8009780 <xTaskPriorityInherit+0xc4>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009726:	4b18      	ldr	r3, [pc, #96]	@ (8009788 <xTaskPriorityInherit+0xcc>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d903      	bls.n	8009736 <xTaskPriorityInherit+0x7a>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009732:	4a15      	ldr	r2, [pc, #84]	@ (8009788 <xTaskPriorityInherit+0xcc>)
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4a10      	ldr	r2, [pc, #64]	@ (8009784 <xTaskPriorityInherit+0xc8>)
 8009744:	441a      	add	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	3304      	adds	r3, #4
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7fe f93e 	bl	80079ce <vListInsertEnd>
 8009752:	e004      	b.n	800975e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009754:	4b0a      	ldr	r3, [pc, #40]	@ (8009780 <xTaskPriorityInherit+0xc4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800975e:	2301      	movs	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e008      	b.n	8009776 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009768:	4b05      	ldr	r3, [pc, #20]	@ (8009780 <xTaskPriorityInherit+0xc4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976e:	429a      	cmp	r2, r3
 8009770:	d201      	bcs.n	8009776 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009776:	68fb      	ldr	r3, [r7, #12]
	}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	200018ec 	.word	0x200018ec
 8009784:	200018f0 	.word	0x200018f0
 8009788:	20001dc8 	.word	0x20001dc8

0800978c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d05c      	beq.n	800985c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097a2:	4b31      	ldr	r3, [pc, #196]	@ (8009868 <xTaskPriorityDisinherit+0xdc>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d00d      	beq.n	80097c8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	b672      	cpsid	i
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	b662      	cpsie	i
 80097c0:	60fb      	str	r3, [r7, #12]
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	e7fd      	b.n	80097c4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10d      	bne.n	80097ec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d4:	b672      	cpsid	i
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	b662      	cpsie	i
 80097e4:	60bb      	str	r3, [r7, #8]
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f0:	1e5a      	subs	r2, r3, #1
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097fe:	429a      	cmp	r2, r3
 8009800:	d02c      	beq.n	800985c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009806:	2b00      	cmp	r3, #0
 8009808:	d128      	bne.n	800985c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	3304      	adds	r3, #4
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe f93a 	bl	8007a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009820:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800982c:	4b0f      	ldr	r3, [pc, #60]	@ (800986c <xTaskPriorityDisinherit+0xe0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <xTaskPriorityDisinherit+0xb0>
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009838:	4a0c      	ldr	r2, [pc, #48]	@ (800986c <xTaskPriorityDisinherit+0xe0>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4a09      	ldr	r2, [pc, #36]	@ (8009870 <xTaskPriorityDisinherit+0xe4>)
 800984a:	441a      	add	r2, r3
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3304      	adds	r3, #4
 8009850:	4619      	mov	r1, r3
 8009852:	4610      	mov	r0, r2
 8009854:	f7fe f8bb 	bl	80079ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800985c:	697b      	ldr	r3, [r7, #20]
	}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	200018ec 	.word	0x200018ec
 800986c:	20001dc8 	.word	0x20001dc8
 8009870:	200018f0 	.word	0x200018f0

08009874 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009882:	2301      	movs	r3, #1
 8009884:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d070      	beq.n	800996e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10d      	bne.n	80098b0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009898:	b672      	cpsid	i
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	b662      	cpsie	i
 80098a8:	60fb      	str	r3, [r7, #12]
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	e7fd      	b.n	80098ac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d902      	bls.n	80098c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	61fb      	str	r3, [r7, #28]
 80098be:	e002      	b.n	80098c6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d04e      	beq.n	800996e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d149      	bne.n	800996e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098da:	4b27      	ldr	r3, [pc, #156]	@ (8009978 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d10d      	bne.n	8009900 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e8:	b672      	cpsid	i
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	b662      	cpsie	i
 80098f8:	60bb      	str	r3, [r7, #8]
}
 80098fa:	bf00      	nop
 80098fc:	bf00      	nop
 80098fe:	e7fd      	b.n	80098fc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009904:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	db04      	blt.n	800991e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	6959      	ldr	r1, [r3, #20]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4a13      	ldr	r2, [pc, #76]	@ (800997c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800992e:	4413      	add	r3, r2
 8009930:	4299      	cmp	r1, r3
 8009932:	d11c      	bne.n	800996e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	3304      	adds	r3, #4
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe f8a5 	bl	8007a88 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009942:	4b0f      	ldr	r3, [pc, #60]	@ (8009980 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d903      	bls.n	8009952 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994e:	4a0c      	ldr	r2, [pc, #48]	@ (8009980 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4a07      	ldr	r2, [pc, #28]	@ (800997c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009960:	441a      	add	r2, r3
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	3304      	adds	r3, #4
 8009966:	4619      	mov	r1, r3
 8009968:	4610      	mov	r0, r2
 800996a:	f7fe f830 	bl	80079ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800996e:	bf00      	nop
 8009970:	3720      	adds	r7, #32
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200018ec 	.word	0x200018ec
 800997c:	200018f0 	.word	0x200018f0
 8009980:	20001dc8 	.word	0x20001dc8

08009984 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009988:	4b07      	ldr	r3, [pc, #28]	@ (80099a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009990:	4b05      	ldr	r3, [pc, #20]	@ (80099a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009996:	3201      	adds	r2, #1
 8009998:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800999a:	4b03      	ldr	r3, [pc, #12]	@ (80099a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800999c:	681b      	ldr	r3, [r3, #0]
	}
 800999e:	4618      	mov	r0, r3
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	200018ec 	.word	0x200018ec

080099ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099b6:	4b21      	ldr	r3, [pc, #132]	@ (8009a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099bc:	4b20      	ldr	r3, [pc, #128]	@ (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe f860 	bl	8007a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ce:	d10a      	bne.n	80099e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	4819      	ldr	r0, [pc, #100]	@ (8009a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80099e0:	f7fd fff5 	bl	80079ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099e4:	e026      	b.n	8009a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4413      	add	r3, r2
 80099ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099ee:	4b14      	ldr	r3, [pc, #80]	@ (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d209      	bcs.n	8009a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099fe:	4b12      	ldr	r3, [pc, #72]	@ (8009a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b0f      	ldr	r3, [pc, #60]	@ (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fe f803 	bl	8007a16 <vListInsert>
}
 8009a10:	e010      	b.n	8009a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a12:	4b0e      	ldr	r3, [pc, #56]	@ (8009a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	4b0a      	ldr	r3, [pc, #40]	@ (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7fd fff9 	bl	8007a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a24:	4b0a      	ldr	r3, [pc, #40]	@ (8009a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d202      	bcs.n	8009a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a2e:	4a08      	ldr	r2, [pc, #32]	@ (8009a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	6013      	str	r3, [r2, #0]
}
 8009a34:	bf00      	nop
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20001dc4 	.word	0x20001dc4
 8009a40:	200018ec 	.word	0x200018ec
 8009a44:	20001dac 	.word	0x20001dac
 8009a48:	20001d7c 	.word	0x20001d7c
 8009a4c:	20001d78 	.word	0x20001d78
 8009a50:	20001de0 	.word	0x20001de0

08009a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08a      	sub	sp, #40	@ 0x28
 8009a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a5e:	f000 fbc5 	bl	800a1ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a62:	4b1e      	ldr	r3, [pc, #120]	@ (8009adc <xTimerCreateTimerTask+0x88>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d021      	beq.n	8009aae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a72:	1d3a      	adds	r2, r7, #4
 8009a74:	f107 0108 	add.w	r1, r7, #8
 8009a78:	f107 030c 	add.w	r3, r7, #12
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fd ff5f 	bl	8007940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	9202      	str	r2, [sp, #8]
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	2313      	movs	r3, #19
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	460a      	mov	r2, r1
 8009a94:	4912      	ldr	r1, [pc, #72]	@ (8009ae0 <xTimerCreateTimerTask+0x8c>)
 8009a96:	4813      	ldr	r0, [pc, #76]	@ (8009ae4 <xTimerCreateTimerTask+0x90>)
 8009a98:	f7fe ff6a 	bl	8008970 <xTaskCreateStatic>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4a12      	ldr	r2, [pc, #72]	@ (8009ae8 <xTimerCreateTimerTask+0x94>)
 8009aa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009aa2:	4b11      	ldr	r3, [pc, #68]	@ (8009ae8 <xTimerCreateTimerTask+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10d      	bne.n	8009ad0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab8:	b672      	cpsid	i
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	b662      	cpsie	i
 8009ac8:	613b      	str	r3, [r7, #16]
}
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	e7fd      	b.n	8009acc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009ad0:	697b      	ldr	r3, [r7, #20]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20001e1c 	.word	0x20001e1c
 8009ae0:	0800f498 	.word	0x0800f498
 8009ae4:	08009d75 	.word	0x08009d75
 8009ae8:	20001e20 	.word	0x20001e20

08009aec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009afa:	202c      	movs	r0, #44	@ 0x2c
 8009afc:	f000 fe14 	bl	800a728 <pvPortMalloc>
 8009b00:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f849 	bl	8009bb6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009b24:	697b      	ldr	r3, [r7, #20]
	}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b08a      	sub	sp, #40	@ 0x28
 8009b32:	af02      	add	r7, sp, #8
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009b3c:	232c      	movs	r3, #44	@ 0x2c
 8009b3e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	2b2c      	cmp	r3, #44	@ 0x2c
 8009b44:	d00d      	beq.n	8009b62 <xTimerCreateStatic+0x34>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4a:	b672      	cpsid	i
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	b662      	cpsie	i
 8009b5a:	61bb      	str	r3, [r7, #24]
}
 8009b5c:	bf00      	nop
 8009b5e:	bf00      	nop
 8009b60:	e7fd      	b.n	8009b5e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10d      	bne.n	8009b86 <xTimerCreateStatic+0x58>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6e:	b672      	cpsid	i
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	b662      	cpsie	i
 8009b7e:	617b      	str	r3, [r7, #20]
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	e7fd      	b.n	8009b82 <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b88:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00d      	beq.n	8009bac <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2202      	movs	r2, #2
 8009b94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	9301      	str	r3, [sp, #4]
 8009b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f805 	bl	8009bb6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009bac:	69fb      	ldr	r3, [r7, #28]
	}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3720      	adds	r7, #32
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b086      	sub	sp, #24
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	607a      	str	r2, [r7, #4]
 8009bc2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10d      	bne.n	8009be6 <prvInitialiseNewTimer+0x30>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bce:	b672      	cpsid	i
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	b662      	cpsie	i
 8009bde:	617b      	str	r3, [r7, #20]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d01e      	beq.n	8009c2a <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009bec:	f000 fafe 	bl	800a1ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	6a3a      	ldr	r2, [r7, #32]
 8009c06:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fd fed1 	bl	80079b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d008      	beq.n	8009c2a <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c1e:	f043 0304 	orr.w	r3, r3, #4
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009c2a:	bf00      	nop
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	@ 0x28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10d      	bne.n	8009c68 <xTimerGenericCommand+0x34>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c50:	b672      	cpsid	i
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	b662      	cpsie	i
 8009c60:	623b      	str	r3, [r7, #32]
}
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	e7fd      	b.n	8009c64 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c68:	4b19      	ldr	r3, [pc, #100]	@ (8009cd0 <xTimerGenericCommand+0x9c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d02a      	beq.n	8009cc6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b05      	cmp	r3, #5
 8009c80:	dc18      	bgt.n	8009cb4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c82:	f7ff fcfd 	bl	8009680 <xTaskGetSchedulerState>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d109      	bne.n	8009ca0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c8c:	4b10      	ldr	r3, [pc, #64]	@ (8009cd0 <xTimerGenericCommand+0x9c>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	f107 0110 	add.w	r1, r7, #16
 8009c94:	2300      	movs	r3, #0
 8009c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c98:	f7fe f936 	bl	8007f08 <xQueueGenericSend>
 8009c9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c9e:	e012      	b.n	8009cc6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd0 <xTimerGenericCommand+0x9c>)
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	f107 0110 	add.w	r1, r7, #16
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2200      	movs	r2, #0
 8009cac:	f7fe f92c 	bl	8007f08 <xQueueGenericSend>
 8009cb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009cb2:	e008      	b.n	8009cc6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cb4:	4b06      	ldr	r3, [pc, #24]	@ (8009cd0 <xTimerGenericCommand+0x9c>)
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	f107 0110 	add.w	r1, r7, #16
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	f7fe fa2c 	bl	800811c <xQueueGenericSendFromISR>
 8009cc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3728      	adds	r7, #40	@ 0x28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	20001e1c 	.word	0x20001e1c

08009cd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b088      	sub	sp, #32
 8009cd8:	af02      	add	r7, sp, #8
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cde:	4b24      	ldr	r3, [pc, #144]	@ (8009d70 <prvProcessExpiredTimer+0x9c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd fecb 	bl	8007a88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf8:	f003 0304 	and.w	r3, r3, #4
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d025      	beq.n	8009d4c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	18d1      	adds	r1, r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	6978      	ldr	r0, [r7, #20]
 8009d0e:	f000 f8d7 	bl	8009ec0 <prvInsertTimerInActiveList>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d022      	beq.n	8009d5e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	2100      	movs	r1, #0
 8009d22:	6978      	ldr	r0, [r7, #20]
 8009d24:	f7ff ff86 	bl	8009c34 <xTimerGenericCommand>
 8009d28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d116      	bne.n	8009d5e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	b672      	cpsid	i
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	b662      	cpsie	i
 8009d44:	60fb      	str	r3, [r7, #12]
}
 8009d46:	bf00      	nop
 8009d48:	bf00      	nop
 8009d4a:	e7fd      	b.n	8009d48 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d52:	f023 0301 	bic.w	r3, r3, #1
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	6978      	ldr	r0, [r7, #20]
 8009d64:	4798      	blx	r3
}
 8009d66:	bf00      	nop
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20001e14 	.word	0x20001e14

08009d74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d7c:	f107 0308 	add.w	r3, r7, #8
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f859 	bl	8009e38 <prvGetNextExpireTime>
 8009d86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f805 	bl	8009d9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d92:	f000 f8d7 	bl	8009f44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d96:	bf00      	nop
 8009d98:	e7f0      	b.n	8009d7c <prvTimerTask+0x8>
	...

08009d9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009da6:	f7ff f855 	bl	8008e54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 f866 	bl	8009e80 <prvSampleTimeNow>
 8009db4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d130      	bne.n	8009e1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10a      	bne.n	8009dd8 <prvProcessTimerOrBlockTask+0x3c>
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d806      	bhi.n	8009dd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dca:	f7ff f851 	bl	8008e70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009dce:	68f9      	ldr	r1, [r7, #12]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ff7f 	bl	8009cd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dd6:	e024      	b.n	8009e22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d008      	beq.n	8009df0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dde:	4b13      	ldr	r3, [pc, #76]	@ (8009e2c <prvProcessTimerOrBlockTask+0x90>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <prvProcessTimerOrBlockTask+0x50>
 8009de8:	2301      	movs	r3, #1
 8009dea:	e000      	b.n	8009dee <prvProcessTimerOrBlockTask+0x52>
 8009dec:	2300      	movs	r3, #0
 8009dee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009df0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e30 <prvProcessTimerOrBlockTask+0x94>)
 8009df2:	6818      	ldr	r0, [r3, #0]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	f7fe fd83 	bl	8008908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e02:	f7ff f835 	bl	8008e70 <xTaskResumeAll>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e0c:	4b09      	ldr	r3, [pc, #36]	@ (8009e34 <prvProcessTimerOrBlockTask+0x98>)
 8009e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	f3bf 8f6f 	isb	sy
}
 8009e1c:	e001      	b.n	8009e22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e1e:	f7ff f827 	bl	8008e70 <xTaskResumeAll>
}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20001e18 	.word	0x20001e18
 8009e30:	20001e1c 	.word	0x20001e1c
 8009e34:	e000ed04 	.word	0xe000ed04

08009e38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e40:	4b0e      	ldr	r3, [pc, #56]	@ (8009e7c <prvGetNextExpireTime+0x44>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <prvGetNextExpireTime+0x16>
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	e000      	b.n	8009e50 <prvGetNextExpireTime+0x18>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e5c:	4b07      	ldr	r3, [pc, #28]	@ (8009e7c <prvGetNextExpireTime+0x44>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	60fb      	str	r3, [r7, #12]
 8009e66:	e001      	b.n	8009e6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	20001e14 	.word	0x20001e14

08009e80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e88:	f7ff f892 	bl	8008fb0 <xTaskGetTickCount>
 8009e8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ebc <prvSampleTimeNow+0x3c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d205      	bcs.n	8009ea4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e98:	f000 f940 	bl	800a11c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	e002      	b.n	8009eaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009eaa:	4a04      	ldr	r2, [pc, #16]	@ (8009ebc <prvSampleTimeNow+0x3c>)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20001e24 	.word	0x20001e24

08009ec0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d812      	bhi.n	8009f0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	1ad2      	subs	r2, r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d302      	bcc.n	8009efa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e01b      	b.n	8009f32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009efa:	4b10      	ldr	r3, [pc, #64]	@ (8009f3c <prvInsertTimerInActiveList+0x7c>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	4610      	mov	r0, r2
 8009f06:	f7fd fd86 	bl	8007a16 <vListInsert>
 8009f0a:	e012      	b.n	8009f32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d206      	bcs.n	8009f22 <prvInsertTimerInActiveList+0x62>
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d302      	bcc.n	8009f22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	e007      	b.n	8009f32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f22:	4b07      	ldr	r3, [pc, #28]	@ (8009f40 <prvInsertTimerInActiveList+0x80>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f7fd fd72 	bl	8007a16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f32:	697b      	ldr	r3, [r7, #20]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20001e18 	.word	0x20001e18
 8009f40:	20001e14 	.word	0x20001e14

08009f44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08e      	sub	sp, #56	@ 0x38
 8009f48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f4a:	e0d4      	b.n	800a0f6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	da1b      	bge.n	8009f8a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f52:	1d3b      	adds	r3, r7, #4
 8009f54:	3304      	adds	r3, #4
 8009f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10d      	bne.n	8009f7a <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	b672      	cpsid	i
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	b662      	cpsie	i
 8009f72:	61fb      	str	r3, [r7, #28]
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	e7fd      	b.n	8009f76 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f80:	6850      	ldr	r0, [r2, #4]
 8009f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f84:	6892      	ldr	r2, [r2, #8]
 8009f86:	4611      	mov	r1, r2
 8009f88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f2c0 80b2 	blt.w	800a0f6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d004      	beq.n	8009fa8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fd fd70 	bl	8007a88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fa8:	463b      	mov	r3, r7
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff ff68 	bl	8009e80 <prvSampleTimeNow>
 8009fb0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	f200 809b 	bhi.w	800a0f0 <prvProcessReceivedCommands+0x1ac>
 8009fba:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc0 <prvProcessReceivedCommands+0x7c>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009fe9 	.word	0x08009fe9
 8009fc4:	08009fe9 	.word	0x08009fe9
 8009fc8:	08009fe9 	.word	0x08009fe9
 8009fcc:	0800a063 	.word	0x0800a063
 8009fd0:	0800a077 	.word	0x0800a077
 8009fd4:	0800a0c7 	.word	0x0800a0c7
 8009fd8:	08009fe9 	.word	0x08009fe9
 8009fdc:	08009fe9 	.word	0x08009fe9
 8009fe0:	0800a063 	.word	0x0800a063
 8009fe4:	0800a077 	.word	0x0800a077
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	18d1      	adds	r1, r2, r3
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a008:	f7ff ff5a 	bl	8009ec0 <prvInsertTimerInActiveList>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d070      	beq.n	800a0f4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a018:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d065      	beq.n	800a0f4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	441a      	add	r2, r3
 800a030:	2300      	movs	r3, #0
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	2100      	movs	r1, #0
 800a038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a03a:	f7ff fdfb 	bl	8009c34 <xTimerGenericCommand>
 800a03e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d156      	bne.n	800a0f4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	b672      	cpsid	i
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	b662      	cpsie	i
 800a05a:	61bb      	str	r3, [r7, #24]
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	e7fd      	b.n	800a05e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a068:	f023 0301 	bic.w	r3, r3, #1
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a074:	e03f      	b.n	800a0f6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a07c:	f043 0301 	orr.w	r3, r3, #1
 800a080:	b2da      	uxtb	r2, r3
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10d      	bne.n	800a0b2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09a:	b672      	cpsid	i
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	b662      	cpsie	i
 800a0aa:	617b      	str	r3, [r7, #20]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b4:	699a      	ldr	r2, [r3, #24]
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b8:	18d1      	adds	r1, r2, r3
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0c0:	f7ff fefe 	bl	8009ec0 <prvInsertTimerInActiveList>
					break;
 800a0c4:	e017      	b.n	800a0f6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0cc:	f003 0302 	and.w	r3, r3, #2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a0d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0d6:	f000 fbf5 	bl	800a8c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0da:	e00c      	b.n	800a0f6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0e2:	f023 0301 	bic.w	r3, r3, #1
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a0ee:	e002      	b.n	800a0f6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a0f0:	bf00      	nop
 800a0f2:	e000      	b.n	800a0f6 <prvProcessReceivedCommands+0x1b2>
					break;
 800a0f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0f6:	4b08      	ldr	r3, [pc, #32]	@ (800a118 <prvProcessReceivedCommands+0x1d4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	1d39      	adds	r1, r7, #4
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe f8b0 	bl	8008264 <xQueueReceive>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	f47f af20 	bne.w	8009f4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	3730      	adds	r7, #48	@ 0x30
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20001e1c 	.word	0x20001e1c

0800a11c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a122:	e04b      	b.n	800a1bc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a124:	4b2f      	ldr	r3, [pc, #188]	@ (800a1e4 <prvSwitchTimerLists+0xc8>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a12e:	4b2d      	ldr	r3, [pc, #180]	@ (800a1e4 <prvSwitchTimerLists+0xc8>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fd fca3 	bl	8007a88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a150:	f003 0304 	and.w	r3, r3, #4
 800a154:	2b00      	cmp	r3, #0
 800a156:	d031      	beq.n	800a1bc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4413      	add	r3, r2
 800a160:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	429a      	cmp	r2, r3
 800a168:	d90e      	bls.n	800a188 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a176:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e4 <prvSwitchTimerLists+0xc8>)
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f7fd fc48 	bl	8007a16 <vListInsert>
 800a186:	e019      	b.n	800a1bc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a188:	2300      	movs	r3, #0
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	2300      	movs	r3, #0
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	2100      	movs	r1, #0
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff fd4e 	bl	8009c34 <xTimerGenericCommand>
 800a198:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10d      	bne.n	800a1bc <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a4:	b672      	cpsid	i
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	b662      	cpsie	i
 800a1b4:	603b      	str	r3, [r7, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	bf00      	nop
 800a1ba:	e7fd      	b.n	800a1b8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1bc:	4b09      	ldr	r3, [pc, #36]	@ (800a1e4 <prvSwitchTimerLists+0xc8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1ae      	bne.n	800a124 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1c6:	4b07      	ldr	r3, [pc, #28]	@ (800a1e4 <prvSwitchTimerLists+0xc8>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1cc:	4b06      	ldr	r3, [pc, #24]	@ (800a1e8 <prvSwitchTimerLists+0xcc>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a04      	ldr	r2, [pc, #16]	@ (800a1e4 <prvSwitchTimerLists+0xc8>)
 800a1d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1d4:	4a04      	ldr	r2, [pc, #16]	@ (800a1e8 <prvSwitchTimerLists+0xcc>)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	6013      	str	r3, [r2, #0]
}
 800a1da:	bf00      	nop
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20001e14 	.word	0x20001e14
 800a1e8:	20001e18 	.word	0x20001e18

0800a1ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1f2:	f000 f96b 	bl	800a4cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1f6:	4b15      	ldr	r3, [pc, #84]	@ (800a24c <prvCheckForValidListAndQueue+0x60>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d120      	bne.n	800a240 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1fe:	4814      	ldr	r0, [pc, #80]	@ (800a250 <prvCheckForValidListAndQueue+0x64>)
 800a200:	f7fd fbb8 	bl	8007974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a204:	4813      	ldr	r0, [pc, #76]	@ (800a254 <prvCheckForValidListAndQueue+0x68>)
 800a206:	f7fd fbb5 	bl	8007974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a20a:	4b13      	ldr	r3, [pc, #76]	@ (800a258 <prvCheckForValidListAndQueue+0x6c>)
 800a20c:	4a10      	ldr	r2, [pc, #64]	@ (800a250 <prvCheckForValidListAndQueue+0x64>)
 800a20e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a210:	4b12      	ldr	r3, [pc, #72]	@ (800a25c <prvCheckForValidListAndQueue+0x70>)
 800a212:	4a10      	ldr	r2, [pc, #64]	@ (800a254 <prvCheckForValidListAndQueue+0x68>)
 800a214:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a216:	2300      	movs	r3, #0
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	4b11      	ldr	r3, [pc, #68]	@ (800a260 <prvCheckForValidListAndQueue+0x74>)
 800a21c:	4a11      	ldr	r2, [pc, #68]	@ (800a264 <prvCheckForValidListAndQueue+0x78>)
 800a21e:	2110      	movs	r1, #16
 800a220:	2040      	movs	r0, #64	@ 0x40
 800a222:	f7fd fcc7 	bl	8007bb4 <xQueueGenericCreateStatic>
 800a226:	4603      	mov	r3, r0
 800a228:	4a08      	ldr	r2, [pc, #32]	@ (800a24c <prvCheckForValidListAndQueue+0x60>)
 800a22a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a22c:	4b07      	ldr	r3, [pc, #28]	@ (800a24c <prvCheckForValidListAndQueue+0x60>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d005      	beq.n	800a240 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a234:	4b05      	ldr	r3, [pc, #20]	@ (800a24c <prvCheckForValidListAndQueue+0x60>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	490b      	ldr	r1, [pc, #44]	@ (800a268 <prvCheckForValidListAndQueue+0x7c>)
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fb3a 	bl	80088b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a240:	f000 f97a 	bl	800a538 <vPortExitCritical>
}
 800a244:	bf00      	nop
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20001e1c 	.word	0x20001e1c
 800a250:	20001dec 	.word	0x20001dec
 800a254:	20001e00 	.word	0x20001e00
 800a258:	20001e14 	.word	0x20001e14
 800a25c:	20001e18 	.word	0x20001e18
 800a260:	20002228 	.word	0x20002228
 800a264:	20001e28 	.word	0x20001e28
 800a268:	0800f4a0 	.word	0x0800f4a0

0800a26c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10d      	bne.n	800a29a <pvTimerGetTimerID+0x2e>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a282:	b672      	cpsid	i
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	b662      	cpsie	i
 800a292:	60fb      	str	r3, [r7, #12]
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	e7fd      	b.n	800a296 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800a29a:	f000 f917 	bl	800a4cc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a2a4:	f000 f948 	bl	800a538 <vPortExitCritical>

	return pvReturn;
 800a2a8:	693b      	ldr	r3, [r7, #16]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3b04      	subs	r3, #4
 800a2c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a2cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3b04      	subs	r3, #4
 800a2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f023 0201 	bic.w	r2, r3, #1
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2e4:	4a0c      	ldr	r2, [pc, #48]	@ (800a318 <pxPortInitialiseStack+0x64>)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3b14      	subs	r3, #20
 800a2ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f06f 0202 	mvn.w	r2, #2
 800a302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3b20      	subs	r3, #32
 800a308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a30a:	68fb      	ldr	r3, [r7, #12]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	0800a31d 	.word	0x0800a31d

0800a31c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a326:	4b15      	ldr	r3, [pc, #84]	@ (800a37c <prvTaskExitError+0x60>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d00d      	beq.n	800a34c <prvTaskExitError+0x30>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	b672      	cpsid	i
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	b662      	cpsie	i
 800a344:	60fb      	str	r3, [r7, #12]
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	e7fd      	b.n	800a348 <prvTaskExitError+0x2c>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a350:	b672      	cpsid	i
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	b662      	cpsie	i
 800a360:	60bb      	str	r3, [r7, #8]
}
 800a362:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a364:	bf00      	nop
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d0fc      	beq.n	800a366 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a36c:	bf00      	nop
 800a36e:	bf00      	nop
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000168 	.word	0x20000168

0800a380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a380:	4b07      	ldr	r3, [pc, #28]	@ (800a3a0 <pxCurrentTCBConst2>)
 800a382:	6819      	ldr	r1, [r3, #0]
 800a384:	6808      	ldr	r0, [r1, #0]
 800a386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38a:	f380 8809 	msr	PSP, r0
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f380 8811 	msr	BASEPRI, r0
 800a39a:	4770      	bx	lr
 800a39c:	f3af 8000 	nop.w

0800a3a0 <pxCurrentTCBConst2>:
 800a3a0:	200018ec 	.word	0x200018ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop

0800a3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3a8:	4808      	ldr	r0, [pc, #32]	@ (800a3cc <prvPortStartFirstTask+0x24>)
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	6800      	ldr	r0, [r0, #0]
 800a3ae:	f380 8808 	msr	MSP, r0
 800a3b2:	f04f 0000 	mov.w	r0, #0
 800a3b6:	f380 8814 	msr	CONTROL, r0
 800a3ba:	b662      	cpsie	i
 800a3bc:	b661      	cpsie	f
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	df00      	svc	0
 800a3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3ca:	bf00      	nop
 800a3cc:	e000ed08 	.word	0xe000ed08

0800a3d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3d6:	4b37      	ldr	r3, [pc, #220]	@ (800a4b4 <xPortStartScheduler+0xe4>)
 800a3d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	22ff      	movs	r2, #255	@ 0xff
 800a3e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a4b8 <xPortStartScheduler+0xe8>)
 800a3fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3fe:	4b2f      	ldr	r3, [pc, #188]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a400:	2207      	movs	r2, #7
 800a402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a404:	e009      	b.n	800a41a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a406:	4b2d      	ldr	r3, [pc, #180]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	4a2b      	ldr	r2, [pc, #172]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a40e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	b2db      	uxtb	r3, r3
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	b2db      	uxtb	r3, r3
 800a418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a422:	2b80      	cmp	r3, #128	@ 0x80
 800a424:	d0ef      	beq.n	800a406 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a426:	4b25      	ldr	r3, [pc, #148]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f1c3 0307 	rsb	r3, r3, #7
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d00d      	beq.n	800a44e <xPortStartScheduler+0x7e>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a436:	b672      	cpsid	i
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	b662      	cpsie	i
 800a446:	60bb      	str	r3, [r7, #8]
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a44e:	4b1b      	ldr	r3, [pc, #108]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	4a19      	ldr	r2, [pc, #100]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a458:	4b18      	ldr	r3, [pc, #96]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a460:	4a16      	ldr	r2, [pc, #88]	@ (800a4bc <xPortStartScheduler+0xec>)
 800a462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a46c:	4b14      	ldr	r3, [pc, #80]	@ (800a4c0 <xPortStartScheduler+0xf0>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a13      	ldr	r2, [pc, #76]	@ (800a4c0 <xPortStartScheduler+0xf0>)
 800a472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a478:	4b11      	ldr	r3, [pc, #68]	@ (800a4c0 <xPortStartScheduler+0xf0>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a10      	ldr	r2, [pc, #64]	@ (800a4c0 <xPortStartScheduler+0xf0>)
 800a47e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a484:	f000 f8dc 	bl	800a640 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a488:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c4 <xPortStartScheduler+0xf4>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a48e:	f000 f8fb 	bl	800a688 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a492:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c8 <xPortStartScheduler+0xf8>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c8 <xPortStartScheduler+0xf8>)
 800a498:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a49c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a49e:	f7ff ff83 	bl	800a3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4a2:	f7fe fe51 	bl	8009148 <vTaskSwitchContext>
	prvTaskExitError();
 800a4a6:	f7ff ff39 	bl	800a31c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	e000e400 	.word	0xe000e400
 800a4b8:	20002278 	.word	0x20002278
 800a4bc:	2000227c 	.word	0x2000227c
 800a4c0:	e000ed20 	.word	0xe000ed20
 800a4c4:	20000168 	.word	0x20000168
 800a4c8:	e000ef34 	.word	0xe000ef34

0800a4cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d6:	b672      	cpsid	i
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	b662      	cpsie	i
 800a4e6:	607b      	str	r3, [r7, #4]
}
 800a4e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4ea:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <vPortEnterCritical+0x64>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	4a0f      	ldr	r2, [pc, #60]	@ (800a530 <vPortEnterCritical+0x64>)
 800a4f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a530 <vPortEnterCritical+0x64>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d112      	bne.n	800a522 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <vPortEnterCritical+0x68>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00d      	beq.n	800a522 <vPortEnterCritical+0x56>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	b672      	cpsid	i
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	b662      	cpsie	i
 800a51a:	603b      	str	r3, [r7, #0]
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	e7fd      	b.n	800a51e <vPortEnterCritical+0x52>
	}
}
 800a522:	bf00      	nop
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	20000168 	.word	0x20000168
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a53e:	4b13      	ldr	r3, [pc, #76]	@ (800a58c <vPortExitCritical+0x54>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10d      	bne.n	800a562 <vPortExitCritical+0x2a>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	b672      	cpsid	i
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	b662      	cpsie	i
 800a55a:	607b      	str	r3, [r7, #4]
}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	e7fd      	b.n	800a55e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a562:	4b0a      	ldr	r3, [pc, #40]	@ (800a58c <vPortExitCritical+0x54>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3b01      	subs	r3, #1
 800a568:	4a08      	ldr	r2, [pc, #32]	@ (800a58c <vPortExitCritical+0x54>)
 800a56a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a56c:	4b07      	ldr	r3, [pc, #28]	@ (800a58c <vPortExitCritical+0x54>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d105      	bne.n	800a580 <vPortExitCritical+0x48>
 800a574:	2300      	movs	r3, #0
 800a576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f383 8811 	msr	BASEPRI, r3
}
 800a57e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20000168 	.word	0x20000168

0800a590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a590:	f3ef 8009 	mrs	r0, PSP
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	4b15      	ldr	r3, [pc, #84]	@ (800a5f0 <pxCurrentTCBConst>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	f01e 0f10 	tst.w	lr, #16
 800a5a0:	bf08      	it	eq
 800a5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5aa:	6010      	str	r0, [r2, #0]
 800a5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a5b4:	b672      	cpsid	i
 800a5b6:	f380 8811 	msr	BASEPRI, r0
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	b662      	cpsie	i
 800a5c4:	f7fe fdc0 	bl	8009148 <vTaskSwitchContext>
 800a5c8:	f04f 0000 	mov.w	r0, #0
 800a5cc:	f380 8811 	msr	BASEPRI, r0
 800a5d0:	bc09      	pop	{r0, r3}
 800a5d2:	6819      	ldr	r1, [r3, #0]
 800a5d4:	6808      	ldr	r0, [r1, #0]
 800a5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5da:	f01e 0f10 	tst.w	lr, #16
 800a5de:	bf08      	it	eq
 800a5e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5e4:	f380 8809 	msr	PSP, r0
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop

0800a5f0 <pxCurrentTCBConst>:
 800a5f0:	200018ec 	.word	0x200018ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop

0800a5f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	b672      	cpsid	i
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	b662      	cpsie	i
 800a612:	607b      	str	r3, [r7, #4]
}
 800a614:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a616:	f7fe fcdb 	bl	8008fd0 <xTaskIncrementTick>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a620:	4b06      	ldr	r3, [pc, #24]	@ (800a63c <SysTick_Handler+0x44>)
 800a622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	2300      	movs	r3, #0
 800a62a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	f383 8811 	msr	BASEPRI, r3
}
 800a632:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	e000ed04 	.word	0xe000ed04

0800a640 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a644:	4b0b      	ldr	r3, [pc, #44]	@ (800a674 <vPortSetupTimerInterrupt+0x34>)
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a64a:	4b0b      	ldr	r3, [pc, #44]	@ (800a678 <vPortSetupTimerInterrupt+0x38>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a650:	4b0a      	ldr	r3, [pc, #40]	@ (800a67c <vPortSetupTimerInterrupt+0x3c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a0a      	ldr	r2, [pc, #40]	@ (800a680 <vPortSetupTimerInterrupt+0x40>)
 800a656:	fba2 2303 	umull	r2, r3, r2, r3
 800a65a:	099b      	lsrs	r3, r3, #6
 800a65c:	4a09      	ldr	r2, [pc, #36]	@ (800a684 <vPortSetupTimerInterrupt+0x44>)
 800a65e:	3b01      	subs	r3, #1
 800a660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a662:	4b04      	ldr	r3, [pc, #16]	@ (800a674 <vPortSetupTimerInterrupt+0x34>)
 800a664:	2207      	movs	r2, #7
 800a666:	601a      	str	r2, [r3, #0]
}
 800a668:	bf00      	nop
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	e000e010 	.word	0xe000e010
 800a678:	e000e018 	.word	0xe000e018
 800a67c:	2000015c 	.word	0x2000015c
 800a680:	10624dd3 	.word	0x10624dd3
 800a684:	e000e014 	.word	0xe000e014

0800a688 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a688:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a698 <vPortEnableVFP+0x10>
 800a68c:	6801      	ldr	r1, [r0, #0]
 800a68e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a692:	6001      	str	r1, [r0, #0]
 800a694:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a696:	bf00      	nop
 800a698:	e000ed88 	.word	0xe000ed88

0800a69c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6a2:	f3ef 8305 	mrs	r3, IPSR
 800a6a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b0f      	cmp	r3, #15
 800a6ac:	d917      	bls.n	800a6de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a718 <vPortValidateInterruptPriority+0x7c>)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6b8:	4b18      	ldr	r3, [pc, #96]	@ (800a71c <vPortValidateInterruptPriority+0x80>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	7afa      	ldrb	r2, [r7, #11]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d20d      	bcs.n	800a6de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c6:	b672      	cpsid	i
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	b662      	cpsie	i
 800a6d6:	607b      	str	r3, [r7, #4]
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	e7fd      	b.n	800a6da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6de:	4b10      	ldr	r3, [pc, #64]	@ (800a720 <vPortValidateInterruptPriority+0x84>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a724 <vPortValidateInterruptPriority+0x88>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d90d      	bls.n	800a70a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	b672      	cpsid	i
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	b662      	cpsie	i
 800a702:	603b      	str	r3, [r7, #0]
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	e7fd      	b.n	800a706 <vPortValidateInterruptPriority+0x6a>
	}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	e000e3f0 	.word	0xe000e3f0
 800a71c:	20002278 	.word	0x20002278
 800a720:	e000ed0c 	.word	0xe000ed0c
 800a724:	2000227c 	.word	0x2000227c

0800a728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b08a      	sub	sp, #40	@ 0x28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a730:	2300      	movs	r3, #0
 800a732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a734:	f7fe fb8e 	bl	8008e54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a738:	4b5d      	ldr	r3, [pc, #372]	@ (800a8b0 <pvPortMalloc+0x188>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a740:	f000 f920 	bl	800a984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a744:	4b5b      	ldr	r3, [pc, #364]	@ (800a8b4 <pvPortMalloc+0x18c>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 8094 	bne.w	800a87a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d020      	beq.n	800a79a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a758:	2208      	movs	r2, #8
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f003 0307 	and.w	r3, r3, #7
 800a766:	2b00      	cmp	r3, #0
 800a768:	d017      	beq.n	800a79a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f023 0307 	bic.w	r3, r3, #7
 800a770:	3308      	adds	r3, #8
 800a772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00d      	beq.n	800a79a <pvPortMalloc+0x72>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	b672      	cpsid	i
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	b662      	cpsie	i
 800a792:	617b      	str	r3, [r7, #20]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d06c      	beq.n	800a87a <pvPortMalloc+0x152>
 800a7a0:	4b45      	ldr	r3, [pc, #276]	@ (800a8b8 <pvPortMalloc+0x190>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d867      	bhi.n	800a87a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7aa:	4b44      	ldr	r3, [pc, #272]	@ (800a8bc <pvPortMalloc+0x194>)
 800a7ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7ae:	4b43      	ldr	r3, [pc, #268]	@ (800a8bc <pvPortMalloc+0x194>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7b4:	e004      	b.n	800a7c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d903      	bls.n	800a7d2 <pvPortMalloc+0xaa>
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f1      	bne.n	800a7b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7d2:	4b37      	ldr	r3, [pc, #220]	@ (800a8b0 <pvPortMalloc+0x188>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d04e      	beq.n	800a87a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	4413      	add	r3, r2
 800a7e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	1ad2      	subs	r2, r2, r3
 800a7f6:	2308      	movs	r3, #8
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d922      	bls.n	800a844 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4413      	add	r3, r2
 800a804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	f003 0307 	and.w	r3, r3, #7
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00d      	beq.n	800a82c <pvPortMalloc+0x104>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a814:	b672      	cpsid	i
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	b662      	cpsie	i
 800a824:	613b      	str	r3, [r7, #16]
}
 800a826:	bf00      	nop
 800a828:	bf00      	nop
 800a82a:	e7fd      	b.n	800a828 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a83e:	69b8      	ldr	r0, [r7, #24]
 800a840:	f000 f902 	bl	800aa48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a844:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b8 <pvPortMalloc+0x190>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8b8 <pvPortMalloc+0x190>)
 800a850:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a852:	4b19      	ldr	r3, [pc, #100]	@ (800a8b8 <pvPortMalloc+0x190>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c0 <pvPortMalloc+0x198>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d203      	bcs.n	800a866 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a85e:	4b16      	ldr	r3, [pc, #88]	@ (800a8b8 <pvPortMalloc+0x190>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a17      	ldr	r2, [pc, #92]	@ (800a8c0 <pvPortMalloc+0x198>)
 800a864:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	4b12      	ldr	r3, [pc, #72]	@ (800a8b4 <pvPortMalloc+0x18c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	431a      	orrs	r2, r3
 800a870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a872:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a87a:	f7fe faf9 	bl	8008e70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	f003 0307 	and.w	r3, r3, #7
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00d      	beq.n	800a8a4 <pvPortMalloc+0x17c>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88c:	b672      	cpsid	i
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	b662      	cpsie	i
 800a89c:	60fb      	str	r3, [r7, #12]
}
 800a89e:	bf00      	nop
 800a8a0:	bf00      	nop
 800a8a2:	e7fd      	b.n	800a8a0 <pvPortMalloc+0x178>
	return pvReturn;
 800a8a4:	69fb      	ldr	r3, [r7, #28]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3728      	adds	r7, #40	@ 0x28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20005e88 	.word	0x20005e88
 800a8b4:	20005e94 	.word	0x20005e94
 800a8b8:	20005e8c 	.word	0x20005e8c
 800a8bc:	20005e80 	.word	0x20005e80
 800a8c0:	20005e90 	.word	0x20005e90

0800a8c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d04e      	beq.n	800a974 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8d6:	2308      	movs	r3, #8
 800a8d8:	425b      	negs	r3, r3
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	4413      	add	r3, r2
 800a8de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	4b24      	ldr	r3, [pc, #144]	@ (800a97c <vPortFree+0xb8>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10d      	bne.n	800a90e <vPortFree+0x4a>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f6:	b672      	cpsid	i
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	b662      	cpsie	i
 800a906:	60fb      	str	r3, [r7, #12]
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00d      	beq.n	800a932 <vPortFree+0x6e>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	b672      	cpsid	i
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	b662      	cpsie	i
 800a92a:	60bb      	str	r3, [r7, #8]
}
 800a92c:	bf00      	nop
 800a92e:	bf00      	nop
 800a930:	e7fd      	b.n	800a92e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	4b11      	ldr	r3, [pc, #68]	@ (800a97c <vPortFree+0xb8>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4013      	ands	r3, r2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d019      	beq.n	800a974 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d115      	bne.n	800a974 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	4b0b      	ldr	r3, [pc, #44]	@ (800a97c <vPortFree+0xb8>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	43db      	mvns	r3, r3
 800a952:	401a      	ands	r2, r3
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a958:	f7fe fa7c 	bl	8008e54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	4b07      	ldr	r3, [pc, #28]	@ (800a980 <vPortFree+0xbc>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4413      	add	r3, r2
 800a966:	4a06      	ldr	r2, [pc, #24]	@ (800a980 <vPortFree+0xbc>)
 800a968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a96a:	6938      	ldr	r0, [r7, #16]
 800a96c:	f000 f86c 	bl	800aa48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a970:	f7fe fa7e 	bl	8008e70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a974:	bf00      	nop
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20005e94 	.word	0x20005e94
 800a980:	20005e8c 	.word	0x20005e8c

0800a984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a98a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a98e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a990:	4b27      	ldr	r3, [pc, #156]	@ (800aa30 <prvHeapInit+0xac>)
 800a992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00c      	beq.n	800a9b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3307      	adds	r3, #7
 800a9a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	@ (800aa30 <prvHeapInit+0xac>)
 800a9b4:	4413      	add	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800aa34 <prvHeapInit+0xb0>)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9c2:	4b1c      	ldr	r3, [pc, #112]	@ (800aa34 <prvHeapInit+0xb0>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9d0:	2208      	movs	r2, #8
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a15      	ldr	r2, [pc, #84]	@ (800aa38 <prvHeapInit+0xb4>)
 800a9e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9e6:	4b14      	ldr	r3, [pc, #80]	@ (800aa38 <prvHeapInit+0xb4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9ee:	4b12      	ldr	r3, [pc, #72]	@ (800aa38 <prvHeapInit+0xb4>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa04:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <prvHeapInit+0xb4>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	4a0a      	ldr	r2, [pc, #40]	@ (800aa3c <prvHeapInit+0xb8>)
 800aa12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	4a09      	ldr	r2, [pc, #36]	@ (800aa40 <prvHeapInit+0xbc>)
 800aa1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa1c:	4b09      	ldr	r3, [pc, #36]	@ (800aa44 <prvHeapInit+0xc0>)
 800aa1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa22:	601a      	str	r2, [r3, #0]
}
 800aa24:	bf00      	nop
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	20002280 	.word	0x20002280
 800aa34:	20005e80 	.word	0x20005e80
 800aa38:	20005e88 	.word	0x20005e88
 800aa3c:	20005e90 	.word	0x20005e90
 800aa40:	20005e8c 	.word	0x20005e8c
 800aa44:	20005e94 	.word	0x20005e94

0800aa48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa50:	4b28      	ldr	r3, [pc, #160]	@ (800aaf4 <prvInsertBlockIntoFreeList+0xac>)
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e002      	b.n	800aa5c <prvInsertBlockIntoFreeList+0x14>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d8f7      	bhi.n	800aa56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4413      	add	r3, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d108      	bne.n	800aa8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	441a      	add	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d118      	bne.n	800aad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4b15      	ldr	r3, [pc, #84]	@ (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d00d      	beq.n	800aac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	441a      	add	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	e008      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aac6:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	e003      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d002      	beq.n	800aae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aae6:	bf00      	nop
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	20005e80 	.word	0x20005e80
 800aaf8:	20005e88 	.word	0x20005e88

0800aafc <__cvt>:
 800aafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	ec57 6b10 	vmov	r6, r7, d0
 800ab04:	2f00      	cmp	r7, #0
 800ab06:	460c      	mov	r4, r1
 800ab08:	4619      	mov	r1, r3
 800ab0a:	463b      	mov	r3, r7
 800ab0c:	bfbb      	ittet	lt
 800ab0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab12:	461f      	movlt	r7, r3
 800ab14:	2300      	movge	r3, #0
 800ab16:	232d      	movlt	r3, #45	@ 0x2d
 800ab18:	700b      	strb	r3, [r1, #0]
 800ab1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab20:	4691      	mov	r9, r2
 800ab22:	f023 0820 	bic.w	r8, r3, #32
 800ab26:	bfbc      	itt	lt
 800ab28:	4632      	movlt	r2, r6
 800ab2a:	4616      	movlt	r6, r2
 800ab2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab30:	d005      	beq.n	800ab3e <__cvt+0x42>
 800ab32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab36:	d100      	bne.n	800ab3a <__cvt+0x3e>
 800ab38:	3401      	adds	r4, #1
 800ab3a:	2102      	movs	r1, #2
 800ab3c:	e000      	b.n	800ab40 <__cvt+0x44>
 800ab3e:	2103      	movs	r1, #3
 800ab40:	ab03      	add	r3, sp, #12
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	ab02      	add	r3, sp, #8
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	ec47 6b10 	vmov	d0, r6, r7
 800ab4c:	4653      	mov	r3, sl
 800ab4e:	4622      	mov	r2, r4
 800ab50:	f001 f8ea 	bl	800bd28 <_dtoa_r>
 800ab54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab58:	4605      	mov	r5, r0
 800ab5a:	d119      	bne.n	800ab90 <__cvt+0x94>
 800ab5c:	f019 0f01 	tst.w	r9, #1
 800ab60:	d00e      	beq.n	800ab80 <__cvt+0x84>
 800ab62:	eb00 0904 	add.w	r9, r0, r4
 800ab66:	2200      	movs	r2, #0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	f7f5 ffdb 	bl	8000b28 <__aeabi_dcmpeq>
 800ab72:	b108      	cbz	r0, 800ab78 <__cvt+0x7c>
 800ab74:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab78:	2230      	movs	r2, #48	@ 0x30
 800ab7a:	9b03      	ldr	r3, [sp, #12]
 800ab7c:	454b      	cmp	r3, r9
 800ab7e:	d31e      	bcc.n	800abbe <__cvt+0xc2>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab84:	1b5b      	subs	r3, r3, r5
 800ab86:	4628      	mov	r0, r5
 800ab88:	6013      	str	r3, [r2, #0]
 800ab8a:	b004      	add	sp, #16
 800ab8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab94:	eb00 0904 	add.w	r9, r0, r4
 800ab98:	d1e5      	bne.n	800ab66 <__cvt+0x6a>
 800ab9a:	7803      	ldrb	r3, [r0, #0]
 800ab9c:	2b30      	cmp	r3, #48	@ 0x30
 800ab9e:	d10a      	bne.n	800abb6 <__cvt+0xba>
 800aba0:	2200      	movs	r2, #0
 800aba2:	2300      	movs	r3, #0
 800aba4:	4630      	mov	r0, r6
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f5 ffbe 	bl	8000b28 <__aeabi_dcmpeq>
 800abac:	b918      	cbnz	r0, 800abb6 <__cvt+0xba>
 800abae:	f1c4 0401 	rsb	r4, r4, #1
 800abb2:	f8ca 4000 	str.w	r4, [sl]
 800abb6:	f8da 3000 	ldr.w	r3, [sl]
 800abba:	4499      	add	r9, r3
 800abbc:	e7d3      	b.n	800ab66 <__cvt+0x6a>
 800abbe:	1c59      	adds	r1, r3, #1
 800abc0:	9103      	str	r1, [sp, #12]
 800abc2:	701a      	strb	r2, [r3, #0]
 800abc4:	e7d9      	b.n	800ab7a <__cvt+0x7e>

0800abc6 <__exponent>:
 800abc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abc8:	2900      	cmp	r1, #0
 800abca:	bfba      	itte	lt
 800abcc:	4249      	neglt	r1, r1
 800abce:	232d      	movlt	r3, #45	@ 0x2d
 800abd0:	232b      	movge	r3, #43	@ 0x2b
 800abd2:	2909      	cmp	r1, #9
 800abd4:	7002      	strb	r2, [r0, #0]
 800abd6:	7043      	strb	r3, [r0, #1]
 800abd8:	dd29      	ble.n	800ac2e <__exponent+0x68>
 800abda:	f10d 0307 	add.w	r3, sp, #7
 800abde:	461d      	mov	r5, r3
 800abe0:	270a      	movs	r7, #10
 800abe2:	461a      	mov	r2, r3
 800abe4:	fbb1 f6f7 	udiv	r6, r1, r7
 800abe8:	fb07 1416 	mls	r4, r7, r6, r1
 800abec:	3430      	adds	r4, #48	@ 0x30
 800abee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abf2:	460c      	mov	r4, r1
 800abf4:	2c63      	cmp	r4, #99	@ 0x63
 800abf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800abfa:	4631      	mov	r1, r6
 800abfc:	dcf1      	bgt.n	800abe2 <__exponent+0x1c>
 800abfe:	3130      	adds	r1, #48	@ 0x30
 800ac00:	1e94      	subs	r4, r2, #2
 800ac02:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac06:	1c41      	adds	r1, r0, #1
 800ac08:	4623      	mov	r3, r4
 800ac0a:	42ab      	cmp	r3, r5
 800ac0c:	d30a      	bcc.n	800ac24 <__exponent+0x5e>
 800ac0e:	f10d 0309 	add.w	r3, sp, #9
 800ac12:	1a9b      	subs	r3, r3, r2
 800ac14:	42ac      	cmp	r4, r5
 800ac16:	bf88      	it	hi
 800ac18:	2300      	movhi	r3, #0
 800ac1a:	3302      	adds	r3, #2
 800ac1c:	4403      	add	r3, r0
 800ac1e:	1a18      	subs	r0, r3, r0
 800ac20:	b003      	add	sp, #12
 800ac22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac24:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac28:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac2c:	e7ed      	b.n	800ac0a <__exponent+0x44>
 800ac2e:	2330      	movs	r3, #48	@ 0x30
 800ac30:	3130      	adds	r1, #48	@ 0x30
 800ac32:	7083      	strb	r3, [r0, #2]
 800ac34:	70c1      	strb	r1, [r0, #3]
 800ac36:	1d03      	adds	r3, r0, #4
 800ac38:	e7f1      	b.n	800ac1e <__exponent+0x58>
	...

0800ac3c <_printf_float>:
 800ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac40:	b08d      	sub	sp, #52	@ 0x34
 800ac42:	460c      	mov	r4, r1
 800ac44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac48:	4616      	mov	r6, r2
 800ac4a:	461f      	mov	r7, r3
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	f000 ff01 	bl	800ba54 <_localeconv_r>
 800ac52:	6803      	ldr	r3, [r0, #0]
 800ac54:	9304      	str	r3, [sp, #16]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7f5 fb3a 	bl	80002d0 <strlen>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac60:	f8d8 3000 	ldr.w	r3, [r8]
 800ac64:	9005      	str	r0, [sp, #20]
 800ac66:	3307      	adds	r3, #7
 800ac68:	f023 0307 	bic.w	r3, r3, #7
 800ac6c:	f103 0208 	add.w	r2, r3, #8
 800ac70:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac74:	f8d4 b000 	ldr.w	fp, [r4]
 800ac78:	f8c8 2000 	str.w	r2, [r8]
 800ac7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac84:	9307      	str	r3, [sp, #28]
 800ac86:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac92:	4b9c      	ldr	r3, [pc, #624]	@ (800af04 <_printf_float+0x2c8>)
 800ac94:	f04f 32ff 	mov.w	r2, #4294967295
 800ac98:	f7f5 ff78 	bl	8000b8c <__aeabi_dcmpun>
 800ac9c:	bb70      	cbnz	r0, 800acfc <_printf_float+0xc0>
 800ac9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aca2:	4b98      	ldr	r3, [pc, #608]	@ (800af04 <_printf_float+0x2c8>)
 800aca4:	f04f 32ff 	mov.w	r2, #4294967295
 800aca8:	f7f5 ff52 	bl	8000b50 <__aeabi_dcmple>
 800acac:	bb30      	cbnz	r0, 800acfc <_printf_float+0xc0>
 800acae:	2200      	movs	r2, #0
 800acb0:	2300      	movs	r3, #0
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	f7f5 ff41 	bl	8000b3c <__aeabi_dcmplt>
 800acba:	b110      	cbz	r0, 800acc2 <_printf_float+0x86>
 800acbc:	232d      	movs	r3, #45	@ 0x2d
 800acbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acc2:	4a91      	ldr	r2, [pc, #580]	@ (800af08 <_printf_float+0x2cc>)
 800acc4:	4b91      	ldr	r3, [pc, #580]	@ (800af0c <_printf_float+0x2d0>)
 800acc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800acca:	bf94      	ite	ls
 800accc:	4690      	movls	r8, r2
 800acce:	4698      	movhi	r8, r3
 800acd0:	2303      	movs	r3, #3
 800acd2:	6123      	str	r3, [r4, #16]
 800acd4:	f02b 0304 	bic.w	r3, fp, #4
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	f04f 0900 	mov.w	r9, #0
 800acde:	9700      	str	r7, [sp, #0]
 800ace0:	4633      	mov	r3, r6
 800ace2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ace4:	4621      	mov	r1, r4
 800ace6:	4628      	mov	r0, r5
 800ace8:	f000 f9d2 	bl	800b090 <_printf_common>
 800acec:	3001      	adds	r0, #1
 800acee:	f040 808d 	bne.w	800ae0c <_printf_float+0x1d0>
 800acf2:	f04f 30ff 	mov.w	r0, #4294967295
 800acf6:	b00d      	add	sp, #52	@ 0x34
 800acf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfc:	4642      	mov	r2, r8
 800acfe:	464b      	mov	r3, r9
 800ad00:	4640      	mov	r0, r8
 800ad02:	4649      	mov	r1, r9
 800ad04:	f7f5 ff42 	bl	8000b8c <__aeabi_dcmpun>
 800ad08:	b140      	cbz	r0, 800ad1c <_printf_float+0xe0>
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	bfbc      	itt	lt
 800ad10:	232d      	movlt	r3, #45	@ 0x2d
 800ad12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad16:	4a7e      	ldr	r2, [pc, #504]	@ (800af10 <_printf_float+0x2d4>)
 800ad18:	4b7e      	ldr	r3, [pc, #504]	@ (800af14 <_printf_float+0x2d8>)
 800ad1a:	e7d4      	b.n	800acc6 <_printf_float+0x8a>
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad22:	9206      	str	r2, [sp, #24]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	d13b      	bne.n	800ada0 <_printf_float+0x164>
 800ad28:	2306      	movs	r3, #6
 800ad2a:	6063      	str	r3, [r4, #4]
 800ad2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad30:	2300      	movs	r3, #0
 800ad32:	6022      	str	r2, [r4, #0]
 800ad34:	9303      	str	r3, [sp, #12]
 800ad36:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad38:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad3c:	ab09      	add	r3, sp, #36	@ 0x24
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	6861      	ldr	r1, [r4, #4]
 800ad42:	ec49 8b10 	vmov	d0, r8, r9
 800ad46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f7ff fed6 	bl	800aafc <__cvt>
 800ad50:	9b06      	ldr	r3, [sp, #24]
 800ad52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad54:	2b47      	cmp	r3, #71	@ 0x47
 800ad56:	4680      	mov	r8, r0
 800ad58:	d129      	bne.n	800adae <_printf_float+0x172>
 800ad5a:	1cc8      	adds	r0, r1, #3
 800ad5c:	db02      	blt.n	800ad64 <_printf_float+0x128>
 800ad5e:	6863      	ldr	r3, [r4, #4]
 800ad60:	4299      	cmp	r1, r3
 800ad62:	dd41      	ble.n	800ade8 <_printf_float+0x1ac>
 800ad64:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad68:	fa5f fa8a 	uxtb.w	sl, sl
 800ad6c:	3901      	subs	r1, #1
 800ad6e:	4652      	mov	r2, sl
 800ad70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad74:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad76:	f7ff ff26 	bl	800abc6 <__exponent>
 800ad7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad7c:	1813      	adds	r3, r2, r0
 800ad7e:	2a01      	cmp	r2, #1
 800ad80:	4681      	mov	r9, r0
 800ad82:	6123      	str	r3, [r4, #16]
 800ad84:	dc02      	bgt.n	800ad8c <_printf_float+0x150>
 800ad86:	6822      	ldr	r2, [r4, #0]
 800ad88:	07d2      	lsls	r2, r2, #31
 800ad8a:	d501      	bpl.n	800ad90 <_printf_float+0x154>
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	6123      	str	r3, [r4, #16]
 800ad90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0a2      	beq.n	800acde <_printf_float+0xa2>
 800ad98:	232d      	movs	r3, #45	@ 0x2d
 800ad9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad9e:	e79e      	b.n	800acde <_printf_float+0xa2>
 800ada0:	9a06      	ldr	r2, [sp, #24]
 800ada2:	2a47      	cmp	r2, #71	@ 0x47
 800ada4:	d1c2      	bne.n	800ad2c <_printf_float+0xf0>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1c0      	bne.n	800ad2c <_printf_float+0xf0>
 800adaa:	2301      	movs	r3, #1
 800adac:	e7bd      	b.n	800ad2a <_printf_float+0xee>
 800adae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adb2:	d9db      	bls.n	800ad6c <_printf_float+0x130>
 800adb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800adb8:	d118      	bne.n	800adec <_printf_float+0x1b0>
 800adba:	2900      	cmp	r1, #0
 800adbc:	6863      	ldr	r3, [r4, #4]
 800adbe:	dd0b      	ble.n	800add8 <_printf_float+0x19c>
 800adc0:	6121      	str	r1, [r4, #16]
 800adc2:	b913      	cbnz	r3, 800adca <_printf_float+0x18e>
 800adc4:	6822      	ldr	r2, [r4, #0]
 800adc6:	07d0      	lsls	r0, r2, #31
 800adc8:	d502      	bpl.n	800add0 <_printf_float+0x194>
 800adca:	3301      	adds	r3, #1
 800adcc:	440b      	add	r3, r1
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800add2:	f04f 0900 	mov.w	r9, #0
 800add6:	e7db      	b.n	800ad90 <_printf_float+0x154>
 800add8:	b913      	cbnz	r3, 800ade0 <_printf_float+0x1a4>
 800adda:	6822      	ldr	r2, [r4, #0]
 800addc:	07d2      	lsls	r2, r2, #31
 800adde:	d501      	bpl.n	800ade4 <_printf_float+0x1a8>
 800ade0:	3302      	adds	r3, #2
 800ade2:	e7f4      	b.n	800adce <_printf_float+0x192>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e7f2      	b.n	800adce <_printf_float+0x192>
 800ade8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800adec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adee:	4299      	cmp	r1, r3
 800adf0:	db05      	blt.n	800adfe <_printf_float+0x1c2>
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	6121      	str	r1, [r4, #16]
 800adf6:	07d8      	lsls	r0, r3, #31
 800adf8:	d5ea      	bpl.n	800add0 <_printf_float+0x194>
 800adfa:	1c4b      	adds	r3, r1, #1
 800adfc:	e7e7      	b.n	800adce <_printf_float+0x192>
 800adfe:	2900      	cmp	r1, #0
 800ae00:	bfd4      	ite	le
 800ae02:	f1c1 0202 	rsble	r2, r1, #2
 800ae06:	2201      	movgt	r2, #1
 800ae08:	4413      	add	r3, r2
 800ae0a:	e7e0      	b.n	800adce <_printf_float+0x192>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	055a      	lsls	r2, r3, #21
 800ae10:	d407      	bmi.n	800ae22 <_printf_float+0x1e6>
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	4642      	mov	r2, r8
 800ae16:	4631      	mov	r1, r6
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b8      	blx	r7
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d12b      	bne.n	800ae78 <_printf_float+0x23c>
 800ae20:	e767      	b.n	800acf2 <_printf_float+0xb6>
 800ae22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae26:	f240 80dd 	bls.w	800afe4 <_printf_float+0x3a8>
 800ae2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	f7f5 fe79 	bl	8000b28 <__aeabi_dcmpeq>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d033      	beq.n	800aea2 <_printf_float+0x266>
 800ae3a:	4a37      	ldr	r2, [pc, #220]	@ (800af18 <_printf_float+0x2dc>)
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	f43f af54 	beq.w	800acf2 <_printf_float+0xb6>
 800ae4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae4e:	4543      	cmp	r3, r8
 800ae50:	db02      	blt.n	800ae58 <_printf_float+0x21c>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	07d8      	lsls	r0, r3, #31
 800ae56:	d50f      	bpl.n	800ae78 <_printf_float+0x23c>
 800ae58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f af45 	beq.w	800acf2 <_printf_float+0xb6>
 800ae68:	f04f 0900 	mov.w	r9, #0
 800ae6c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae70:	f104 0a1a 	add.w	sl, r4, #26
 800ae74:	45c8      	cmp	r8, r9
 800ae76:	dc09      	bgt.n	800ae8c <_printf_float+0x250>
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	079b      	lsls	r3, r3, #30
 800ae7c:	f100 8103 	bmi.w	800b086 <_printf_float+0x44a>
 800ae80:	68e0      	ldr	r0, [r4, #12]
 800ae82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae84:	4298      	cmp	r0, r3
 800ae86:	bfb8      	it	lt
 800ae88:	4618      	movlt	r0, r3
 800ae8a:	e734      	b.n	800acf6 <_printf_float+0xba>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	4652      	mov	r2, sl
 800ae90:	4631      	mov	r1, r6
 800ae92:	4628      	mov	r0, r5
 800ae94:	47b8      	blx	r7
 800ae96:	3001      	adds	r0, #1
 800ae98:	f43f af2b 	beq.w	800acf2 <_printf_float+0xb6>
 800ae9c:	f109 0901 	add.w	r9, r9, #1
 800aea0:	e7e8      	b.n	800ae74 <_printf_float+0x238>
 800aea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dc39      	bgt.n	800af1c <_printf_float+0x2e0>
 800aea8:	4a1b      	ldr	r2, [pc, #108]	@ (800af18 <_printf_float+0x2dc>)
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4631      	mov	r1, r6
 800aeae:	4628      	mov	r0, r5
 800aeb0:	47b8      	blx	r7
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	f43f af1d 	beq.w	800acf2 <_printf_float+0xb6>
 800aeb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aebc:	ea59 0303 	orrs.w	r3, r9, r3
 800aec0:	d102      	bne.n	800aec8 <_printf_float+0x28c>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	07d9      	lsls	r1, r3, #31
 800aec6:	d5d7      	bpl.n	800ae78 <_printf_float+0x23c>
 800aec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aecc:	4631      	mov	r1, r6
 800aece:	4628      	mov	r0, r5
 800aed0:	47b8      	blx	r7
 800aed2:	3001      	adds	r0, #1
 800aed4:	f43f af0d 	beq.w	800acf2 <_printf_float+0xb6>
 800aed8:	f04f 0a00 	mov.w	sl, #0
 800aedc:	f104 0b1a 	add.w	fp, r4, #26
 800aee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee2:	425b      	negs	r3, r3
 800aee4:	4553      	cmp	r3, sl
 800aee6:	dc01      	bgt.n	800aeec <_printf_float+0x2b0>
 800aee8:	464b      	mov	r3, r9
 800aeea:	e793      	b.n	800ae14 <_printf_float+0x1d8>
 800aeec:	2301      	movs	r3, #1
 800aeee:	465a      	mov	r2, fp
 800aef0:	4631      	mov	r1, r6
 800aef2:	4628      	mov	r0, r5
 800aef4:	47b8      	blx	r7
 800aef6:	3001      	adds	r0, #1
 800aef8:	f43f aefb 	beq.w	800acf2 <_printf_float+0xb6>
 800aefc:	f10a 0a01 	add.w	sl, sl, #1
 800af00:	e7ee      	b.n	800aee0 <_printf_float+0x2a4>
 800af02:	bf00      	nop
 800af04:	7fefffff 	.word	0x7fefffff
 800af08:	0800f5c0 	.word	0x0800f5c0
 800af0c:	0800f5c4 	.word	0x0800f5c4
 800af10:	0800f5c8 	.word	0x0800f5c8
 800af14:	0800f5cc 	.word	0x0800f5cc
 800af18:	0800f5d0 	.word	0x0800f5d0
 800af1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af22:	4553      	cmp	r3, sl
 800af24:	bfa8      	it	ge
 800af26:	4653      	movge	r3, sl
 800af28:	2b00      	cmp	r3, #0
 800af2a:	4699      	mov	r9, r3
 800af2c:	dc36      	bgt.n	800af9c <_printf_float+0x360>
 800af2e:	f04f 0b00 	mov.w	fp, #0
 800af32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af36:	f104 021a 	add.w	r2, r4, #26
 800af3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af3c:	9306      	str	r3, [sp, #24]
 800af3e:	eba3 0309 	sub.w	r3, r3, r9
 800af42:	455b      	cmp	r3, fp
 800af44:	dc31      	bgt.n	800afaa <_printf_float+0x36e>
 800af46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af48:	459a      	cmp	sl, r3
 800af4a:	dc3a      	bgt.n	800afc2 <_printf_float+0x386>
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	07da      	lsls	r2, r3, #31
 800af50:	d437      	bmi.n	800afc2 <_printf_float+0x386>
 800af52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af54:	ebaa 0903 	sub.w	r9, sl, r3
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	ebaa 0303 	sub.w	r3, sl, r3
 800af5e:	4599      	cmp	r9, r3
 800af60:	bfa8      	it	ge
 800af62:	4699      	movge	r9, r3
 800af64:	f1b9 0f00 	cmp.w	r9, #0
 800af68:	dc33      	bgt.n	800afd2 <_printf_float+0x396>
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af72:	f104 0b1a 	add.w	fp, r4, #26
 800af76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af78:	ebaa 0303 	sub.w	r3, sl, r3
 800af7c:	eba3 0309 	sub.w	r3, r3, r9
 800af80:	4543      	cmp	r3, r8
 800af82:	f77f af79 	ble.w	800ae78 <_printf_float+0x23c>
 800af86:	2301      	movs	r3, #1
 800af88:	465a      	mov	r2, fp
 800af8a:	4631      	mov	r1, r6
 800af8c:	4628      	mov	r0, r5
 800af8e:	47b8      	blx	r7
 800af90:	3001      	adds	r0, #1
 800af92:	f43f aeae 	beq.w	800acf2 <_printf_float+0xb6>
 800af96:	f108 0801 	add.w	r8, r8, #1
 800af9a:	e7ec      	b.n	800af76 <_printf_float+0x33a>
 800af9c:	4642      	mov	r2, r8
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	d1c2      	bne.n	800af2e <_printf_float+0x2f2>
 800afa8:	e6a3      	b.n	800acf2 <_printf_float+0xb6>
 800afaa:	2301      	movs	r3, #1
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	9206      	str	r2, [sp, #24]
 800afb2:	47b8      	blx	r7
 800afb4:	3001      	adds	r0, #1
 800afb6:	f43f ae9c 	beq.w	800acf2 <_printf_float+0xb6>
 800afba:	9a06      	ldr	r2, [sp, #24]
 800afbc:	f10b 0b01 	add.w	fp, fp, #1
 800afc0:	e7bb      	b.n	800af3a <_printf_float+0x2fe>
 800afc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc6:	4631      	mov	r1, r6
 800afc8:	4628      	mov	r0, r5
 800afca:	47b8      	blx	r7
 800afcc:	3001      	adds	r0, #1
 800afce:	d1c0      	bne.n	800af52 <_printf_float+0x316>
 800afd0:	e68f      	b.n	800acf2 <_printf_float+0xb6>
 800afd2:	9a06      	ldr	r2, [sp, #24]
 800afd4:	464b      	mov	r3, r9
 800afd6:	4442      	add	r2, r8
 800afd8:	4631      	mov	r1, r6
 800afda:	4628      	mov	r0, r5
 800afdc:	47b8      	blx	r7
 800afde:	3001      	adds	r0, #1
 800afe0:	d1c3      	bne.n	800af6a <_printf_float+0x32e>
 800afe2:	e686      	b.n	800acf2 <_printf_float+0xb6>
 800afe4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afe8:	f1ba 0f01 	cmp.w	sl, #1
 800afec:	dc01      	bgt.n	800aff2 <_printf_float+0x3b6>
 800afee:	07db      	lsls	r3, r3, #31
 800aff0:	d536      	bpl.n	800b060 <_printf_float+0x424>
 800aff2:	2301      	movs	r3, #1
 800aff4:	4642      	mov	r2, r8
 800aff6:	4631      	mov	r1, r6
 800aff8:	4628      	mov	r0, r5
 800affa:	47b8      	blx	r7
 800affc:	3001      	adds	r0, #1
 800affe:	f43f ae78 	beq.w	800acf2 <_printf_float+0xb6>
 800b002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	f43f ae70 	beq.w	800acf2 <_printf_float+0xb6>
 800b012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b016:	2200      	movs	r2, #0
 800b018:	2300      	movs	r3, #0
 800b01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b01e:	f7f5 fd83 	bl	8000b28 <__aeabi_dcmpeq>
 800b022:	b9c0      	cbnz	r0, 800b056 <_printf_float+0x41a>
 800b024:	4653      	mov	r3, sl
 800b026:	f108 0201 	add.w	r2, r8, #1
 800b02a:	4631      	mov	r1, r6
 800b02c:	4628      	mov	r0, r5
 800b02e:	47b8      	blx	r7
 800b030:	3001      	adds	r0, #1
 800b032:	d10c      	bne.n	800b04e <_printf_float+0x412>
 800b034:	e65d      	b.n	800acf2 <_printf_float+0xb6>
 800b036:	2301      	movs	r3, #1
 800b038:	465a      	mov	r2, fp
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f ae56 	beq.w	800acf2 <_printf_float+0xb6>
 800b046:	f108 0801 	add.w	r8, r8, #1
 800b04a:	45d0      	cmp	r8, sl
 800b04c:	dbf3      	blt.n	800b036 <_printf_float+0x3fa>
 800b04e:	464b      	mov	r3, r9
 800b050:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b054:	e6df      	b.n	800ae16 <_printf_float+0x1da>
 800b056:	f04f 0800 	mov.w	r8, #0
 800b05a:	f104 0b1a 	add.w	fp, r4, #26
 800b05e:	e7f4      	b.n	800b04a <_printf_float+0x40e>
 800b060:	2301      	movs	r3, #1
 800b062:	4642      	mov	r2, r8
 800b064:	e7e1      	b.n	800b02a <_printf_float+0x3ee>
 800b066:	2301      	movs	r3, #1
 800b068:	464a      	mov	r2, r9
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b8      	blx	r7
 800b070:	3001      	adds	r0, #1
 800b072:	f43f ae3e 	beq.w	800acf2 <_printf_float+0xb6>
 800b076:	f108 0801 	add.w	r8, r8, #1
 800b07a:	68e3      	ldr	r3, [r4, #12]
 800b07c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b07e:	1a5b      	subs	r3, r3, r1
 800b080:	4543      	cmp	r3, r8
 800b082:	dcf0      	bgt.n	800b066 <_printf_float+0x42a>
 800b084:	e6fc      	b.n	800ae80 <_printf_float+0x244>
 800b086:	f04f 0800 	mov.w	r8, #0
 800b08a:	f104 0919 	add.w	r9, r4, #25
 800b08e:	e7f4      	b.n	800b07a <_printf_float+0x43e>

0800b090 <_printf_common>:
 800b090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b094:	4616      	mov	r6, r2
 800b096:	4698      	mov	r8, r3
 800b098:	688a      	ldr	r2, [r1, #8]
 800b09a:	690b      	ldr	r3, [r1, #16]
 800b09c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	bfb8      	it	lt
 800b0a4:	4613      	movlt	r3, r2
 800b0a6:	6033      	str	r3, [r6, #0]
 800b0a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	b10a      	cbz	r2, 800b0b6 <_printf_common+0x26>
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	6033      	str	r3, [r6, #0]
 800b0b6:	6823      	ldr	r3, [r4, #0]
 800b0b8:	0699      	lsls	r1, r3, #26
 800b0ba:	bf42      	ittt	mi
 800b0bc:	6833      	ldrmi	r3, [r6, #0]
 800b0be:	3302      	addmi	r3, #2
 800b0c0:	6033      	strmi	r3, [r6, #0]
 800b0c2:	6825      	ldr	r5, [r4, #0]
 800b0c4:	f015 0506 	ands.w	r5, r5, #6
 800b0c8:	d106      	bne.n	800b0d8 <_printf_common+0x48>
 800b0ca:	f104 0a19 	add.w	sl, r4, #25
 800b0ce:	68e3      	ldr	r3, [r4, #12]
 800b0d0:	6832      	ldr	r2, [r6, #0]
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	42ab      	cmp	r3, r5
 800b0d6:	dc26      	bgt.n	800b126 <_printf_common+0x96>
 800b0d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0dc:	6822      	ldr	r2, [r4, #0]
 800b0de:	3b00      	subs	r3, #0
 800b0e0:	bf18      	it	ne
 800b0e2:	2301      	movne	r3, #1
 800b0e4:	0692      	lsls	r2, r2, #26
 800b0e6:	d42b      	bmi.n	800b140 <_printf_common+0xb0>
 800b0e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	47c8      	blx	r9
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	d01e      	beq.n	800b134 <_printf_common+0xa4>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	6922      	ldr	r2, [r4, #16]
 800b0fa:	f003 0306 	and.w	r3, r3, #6
 800b0fe:	2b04      	cmp	r3, #4
 800b100:	bf02      	ittt	eq
 800b102:	68e5      	ldreq	r5, [r4, #12]
 800b104:	6833      	ldreq	r3, [r6, #0]
 800b106:	1aed      	subeq	r5, r5, r3
 800b108:	68a3      	ldr	r3, [r4, #8]
 800b10a:	bf0c      	ite	eq
 800b10c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b110:	2500      	movne	r5, #0
 800b112:	4293      	cmp	r3, r2
 800b114:	bfc4      	itt	gt
 800b116:	1a9b      	subgt	r3, r3, r2
 800b118:	18ed      	addgt	r5, r5, r3
 800b11a:	2600      	movs	r6, #0
 800b11c:	341a      	adds	r4, #26
 800b11e:	42b5      	cmp	r5, r6
 800b120:	d11a      	bne.n	800b158 <_printf_common+0xc8>
 800b122:	2000      	movs	r0, #0
 800b124:	e008      	b.n	800b138 <_printf_common+0xa8>
 800b126:	2301      	movs	r3, #1
 800b128:	4652      	mov	r2, sl
 800b12a:	4641      	mov	r1, r8
 800b12c:	4638      	mov	r0, r7
 800b12e:	47c8      	blx	r9
 800b130:	3001      	adds	r0, #1
 800b132:	d103      	bne.n	800b13c <_printf_common+0xac>
 800b134:	f04f 30ff 	mov.w	r0, #4294967295
 800b138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13c:	3501      	adds	r5, #1
 800b13e:	e7c6      	b.n	800b0ce <_printf_common+0x3e>
 800b140:	18e1      	adds	r1, r4, r3
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	2030      	movs	r0, #48	@ 0x30
 800b146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b14a:	4422      	add	r2, r4
 800b14c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b154:	3302      	adds	r3, #2
 800b156:	e7c7      	b.n	800b0e8 <_printf_common+0x58>
 800b158:	2301      	movs	r3, #1
 800b15a:	4622      	mov	r2, r4
 800b15c:	4641      	mov	r1, r8
 800b15e:	4638      	mov	r0, r7
 800b160:	47c8      	blx	r9
 800b162:	3001      	adds	r0, #1
 800b164:	d0e6      	beq.n	800b134 <_printf_common+0xa4>
 800b166:	3601      	adds	r6, #1
 800b168:	e7d9      	b.n	800b11e <_printf_common+0x8e>
	...

0800b16c <_printf_i>:
 800b16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b170:	7e0f      	ldrb	r7, [r1, #24]
 800b172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b174:	2f78      	cmp	r7, #120	@ 0x78
 800b176:	4691      	mov	r9, r2
 800b178:	4680      	mov	r8, r0
 800b17a:	460c      	mov	r4, r1
 800b17c:	469a      	mov	sl, r3
 800b17e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b182:	d807      	bhi.n	800b194 <_printf_i+0x28>
 800b184:	2f62      	cmp	r7, #98	@ 0x62
 800b186:	d80a      	bhi.n	800b19e <_printf_i+0x32>
 800b188:	2f00      	cmp	r7, #0
 800b18a:	f000 80d2 	beq.w	800b332 <_printf_i+0x1c6>
 800b18e:	2f58      	cmp	r7, #88	@ 0x58
 800b190:	f000 80b9 	beq.w	800b306 <_printf_i+0x19a>
 800b194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b19c:	e03a      	b.n	800b214 <_printf_i+0xa8>
 800b19e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1a2:	2b15      	cmp	r3, #21
 800b1a4:	d8f6      	bhi.n	800b194 <_printf_i+0x28>
 800b1a6:	a101      	add	r1, pc, #4	@ (adr r1, 800b1ac <_printf_i+0x40>)
 800b1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1ac:	0800b205 	.word	0x0800b205
 800b1b0:	0800b219 	.word	0x0800b219
 800b1b4:	0800b195 	.word	0x0800b195
 800b1b8:	0800b195 	.word	0x0800b195
 800b1bc:	0800b195 	.word	0x0800b195
 800b1c0:	0800b195 	.word	0x0800b195
 800b1c4:	0800b219 	.word	0x0800b219
 800b1c8:	0800b195 	.word	0x0800b195
 800b1cc:	0800b195 	.word	0x0800b195
 800b1d0:	0800b195 	.word	0x0800b195
 800b1d4:	0800b195 	.word	0x0800b195
 800b1d8:	0800b319 	.word	0x0800b319
 800b1dc:	0800b243 	.word	0x0800b243
 800b1e0:	0800b2d3 	.word	0x0800b2d3
 800b1e4:	0800b195 	.word	0x0800b195
 800b1e8:	0800b195 	.word	0x0800b195
 800b1ec:	0800b33b 	.word	0x0800b33b
 800b1f0:	0800b195 	.word	0x0800b195
 800b1f4:	0800b243 	.word	0x0800b243
 800b1f8:	0800b195 	.word	0x0800b195
 800b1fc:	0800b195 	.word	0x0800b195
 800b200:	0800b2db 	.word	0x0800b2db
 800b204:	6833      	ldr	r3, [r6, #0]
 800b206:	1d1a      	adds	r2, r3, #4
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6032      	str	r2, [r6, #0]
 800b20c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b214:	2301      	movs	r3, #1
 800b216:	e09d      	b.n	800b354 <_printf_i+0x1e8>
 800b218:	6833      	ldr	r3, [r6, #0]
 800b21a:	6820      	ldr	r0, [r4, #0]
 800b21c:	1d19      	adds	r1, r3, #4
 800b21e:	6031      	str	r1, [r6, #0]
 800b220:	0606      	lsls	r6, r0, #24
 800b222:	d501      	bpl.n	800b228 <_printf_i+0xbc>
 800b224:	681d      	ldr	r5, [r3, #0]
 800b226:	e003      	b.n	800b230 <_printf_i+0xc4>
 800b228:	0645      	lsls	r5, r0, #25
 800b22a:	d5fb      	bpl.n	800b224 <_printf_i+0xb8>
 800b22c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b230:	2d00      	cmp	r5, #0
 800b232:	da03      	bge.n	800b23c <_printf_i+0xd0>
 800b234:	232d      	movs	r3, #45	@ 0x2d
 800b236:	426d      	negs	r5, r5
 800b238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b23c:	4859      	ldr	r0, [pc, #356]	@ (800b3a4 <_printf_i+0x238>)
 800b23e:	230a      	movs	r3, #10
 800b240:	e011      	b.n	800b266 <_printf_i+0xfa>
 800b242:	6821      	ldr	r1, [r4, #0]
 800b244:	6833      	ldr	r3, [r6, #0]
 800b246:	0608      	lsls	r0, r1, #24
 800b248:	f853 5b04 	ldr.w	r5, [r3], #4
 800b24c:	d402      	bmi.n	800b254 <_printf_i+0xe8>
 800b24e:	0649      	lsls	r1, r1, #25
 800b250:	bf48      	it	mi
 800b252:	b2ad      	uxthmi	r5, r5
 800b254:	2f6f      	cmp	r7, #111	@ 0x6f
 800b256:	4853      	ldr	r0, [pc, #332]	@ (800b3a4 <_printf_i+0x238>)
 800b258:	6033      	str	r3, [r6, #0]
 800b25a:	bf14      	ite	ne
 800b25c:	230a      	movne	r3, #10
 800b25e:	2308      	moveq	r3, #8
 800b260:	2100      	movs	r1, #0
 800b262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b266:	6866      	ldr	r6, [r4, #4]
 800b268:	60a6      	str	r6, [r4, #8]
 800b26a:	2e00      	cmp	r6, #0
 800b26c:	bfa2      	ittt	ge
 800b26e:	6821      	ldrge	r1, [r4, #0]
 800b270:	f021 0104 	bicge.w	r1, r1, #4
 800b274:	6021      	strge	r1, [r4, #0]
 800b276:	b90d      	cbnz	r5, 800b27c <_printf_i+0x110>
 800b278:	2e00      	cmp	r6, #0
 800b27a:	d04b      	beq.n	800b314 <_printf_i+0x1a8>
 800b27c:	4616      	mov	r6, r2
 800b27e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b282:	fb03 5711 	mls	r7, r3, r1, r5
 800b286:	5dc7      	ldrb	r7, [r0, r7]
 800b288:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b28c:	462f      	mov	r7, r5
 800b28e:	42bb      	cmp	r3, r7
 800b290:	460d      	mov	r5, r1
 800b292:	d9f4      	bls.n	800b27e <_printf_i+0x112>
 800b294:	2b08      	cmp	r3, #8
 800b296:	d10b      	bne.n	800b2b0 <_printf_i+0x144>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	07df      	lsls	r7, r3, #31
 800b29c:	d508      	bpl.n	800b2b0 <_printf_i+0x144>
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	bfde      	ittt	le
 800b2a6:	2330      	movle	r3, #48	@ 0x30
 800b2a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2b0:	1b92      	subs	r2, r2, r6
 800b2b2:	6122      	str	r2, [r4, #16]
 800b2b4:	f8cd a000 	str.w	sl, [sp]
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	aa03      	add	r2, sp, #12
 800b2bc:	4621      	mov	r1, r4
 800b2be:	4640      	mov	r0, r8
 800b2c0:	f7ff fee6 	bl	800b090 <_printf_common>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d14a      	bne.n	800b35e <_printf_i+0x1f2>
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2cc:	b004      	add	sp, #16
 800b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	f043 0320 	orr.w	r3, r3, #32
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	4833      	ldr	r0, [pc, #204]	@ (800b3a8 <_printf_i+0x23c>)
 800b2dc:	2778      	movs	r7, #120	@ 0x78
 800b2de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	6831      	ldr	r1, [r6, #0]
 800b2e6:	061f      	lsls	r7, r3, #24
 800b2e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2ec:	d402      	bmi.n	800b2f4 <_printf_i+0x188>
 800b2ee:	065f      	lsls	r7, r3, #25
 800b2f0:	bf48      	it	mi
 800b2f2:	b2ad      	uxthmi	r5, r5
 800b2f4:	6031      	str	r1, [r6, #0]
 800b2f6:	07d9      	lsls	r1, r3, #31
 800b2f8:	bf44      	itt	mi
 800b2fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b2fe:	6023      	strmi	r3, [r4, #0]
 800b300:	b11d      	cbz	r5, 800b30a <_printf_i+0x19e>
 800b302:	2310      	movs	r3, #16
 800b304:	e7ac      	b.n	800b260 <_printf_i+0xf4>
 800b306:	4827      	ldr	r0, [pc, #156]	@ (800b3a4 <_printf_i+0x238>)
 800b308:	e7e9      	b.n	800b2de <_printf_i+0x172>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f023 0320 	bic.w	r3, r3, #32
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	e7f6      	b.n	800b302 <_printf_i+0x196>
 800b314:	4616      	mov	r6, r2
 800b316:	e7bd      	b.n	800b294 <_printf_i+0x128>
 800b318:	6833      	ldr	r3, [r6, #0]
 800b31a:	6825      	ldr	r5, [r4, #0]
 800b31c:	6961      	ldr	r1, [r4, #20]
 800b31e:	1d18      	adds	r0, r3, #4
 800b320:	6030      	str	r0, [r6, #0]
 800b322:	062e      	lsls	r6, r5, #24
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	d501      	bpl.n	800b32c <_printf_i+0x1c0>
 800b328:	6019      	str	r1, [r3, #0]
 800b32a:	e002      	b.n	800b332 <_printf_i+0x1c6>
 800b32c:	0668      	lsls	r0, r5, #25
 800b32e:	d5fb      	bpl.n	800b328 <_printf_i+0x1bc>
 800b330:	8019      	strh	r1, [r3, #0]
 800b332:	2300      	movs	r3, #0
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	4616      	mov	r6, r2
 800b338:	e7bc      	b.n	800b2b4 <_printf_i+0x148>
 800b33a:	6833      	ldr	r3, [r6, #0]
 800b33c:	1d1a      	adds	r2, r3, #4
 800b33e:	6032      	str	r2, [r6, #0]
 800b340:	681e      	ldr	r6, [r3, #0]
 800b342:	6862      	ldr	r2, [r4, #4]
 800b344:	2100      	movs	r1, #0
 800b346:	4630      	mov	r0, r6
 800b348:	f7f4 ff72 	bl	8000230 <memchr>
 800b34c:	b108      	cbz	r0, 800b352 <_printf_i+0x1e6>
 800b34e:	1b80      	subs	r0, r0, r6
 800b350:	6060      	str	r0, [r4, #4]
 800b352:	6863      	ldr	r3, [r4, #4]
 800b354:	6123      	str	r3, [r4, #16]
 800b356:	2300      	movs	r3, #0
 800b358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b35c:	e7aa      	b.n	800b2b4 <_printf_i+0x148>
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	4632      	mov	r2, r6
 800b362:	4649      	mov	r1, r9
 800b364:	4640      	mov	r0, r8
 800b366:	47d0      	blx	sl
 800b368:	3001      	adds	r0, #1
 800b36a:	d0ad      	beq.n	800b2c8 <_printf_i+0x15c>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	079b      	lsls	r3, r3, #30
 800b370:	d413      	bmi.n	800b39a <_printf_i+0x22e>
 800b372:	68e0      	ldr	r0, [r4, #12]
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	4298      	cmp	r0, r3
 800b378:	bfb8      	it	lt
 800b37a:	4618      	movlt	r0, r3
 800b37c:	e7a6      	b.n	800b2cc <_printf_i+0x160>
 800b37e:	2301      	movs	r3, #1
 800b380:	4632      	mov	r2, r6
 800b382:	4649      	mov	r1, r9
 800b384:	4640      	mov	r0, r8
 800b386:	47d0      	blx	sl
 800b388:	3001      	adds	r0, #1
 800b38a:	d09d      	beq.n	800b2c8 <_printf_i+0x15c>
 800b38c:	3501      	adds	r5, #1
 800b38e:	68e3      	ldr	r3, [r4, #12]
 800b390:	9903      	ldr	r1, [sp, #12]
 800b392:	1a5b      	subs	r3, r3, r1
 800b394:	42ab      	cmp	r3, r5
 800b396:	dcf2      	bgt.n	800b37e <_printf_i+0x212>
 800b398:	e7eb      	b.n	800b372 <_printf_i+0x206>
 800b39a:	2500      	movs	r5, #0
 800b39c:	f104 0619 	add.w	r6, r4, #25
 800b3a0:	e7f5      	b.n	800b38e <_printf_i+0x222>
 800b3a2:	bf00      	nop
 800b3a4:	0800f5d2 	.word	0x0800f5d2
 800b3a8:	0800f5e3 	.word	0x0800f5e3

0800b3ac <_scanf_float>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	b087      	sub	sp, #28
 800b3b2:	4617      	mov	r7, r2
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	688b      	ldr	r3, [r1, #8]
 800b3b8:	1e5a      	subs	r2, r3, #1
 800b3ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b3be:	bf81      	itttt	hi
 800b3c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b3c4:	eb03 0b05 	addhi.w	fp, r3, r5
 800b3c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b3cc:	608b      	strhi	r3, [r1, #8]
 800b3ce:	680b      	ldr	r3, [r1, #0]
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	f04f 0500 	mov.w	r5, #0
 800b3d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b3da:	f842 3b1c 	str.w	r3, [r2], #28
 800b3de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	bf98      	it	ls
 800b3e8:	f04f 0b00 	movls.w	fp, #0
 800b3ec:	9201      	str	r2, [sp, #4]
 800b3ee:	4616      	mov	r6, r2
 800b3f0:	46aa      	mov	sl, r5
 800b3f2:	46a9      	mov	r9, r5
 800b3f4:	9502      	str	r5, [sp, #8]
 800b3f6:	68a2      	ldr	r2, [r4, #8]
 800b3f8:	b152      	cbz	r2, 800b410 <_scanf_float+0x64>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b4e      	cmp	r3, #78	@ 0x4e
 800b400:	d864      	bhi.n	800b4cc <_scanf_float+0x120>
 800b402:	2b40      	cmp	r3, #64	@ 0x40
 800b404:	d83c      	bhi.n	800b480 <_scanf_float+0xd4>
 800b406:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b40a:	b2c8      	uxtb	r0, r1
 800b40c:	280e      	cmp	r0, #14
 800b40e:	d93a      	bls.n	800b486 <_scanf_float+0xda>
 800b410:	f1b9 0f00 	cmp.w	r9, #0
 800b414:	d003      	beq.n	800b41e <_scanf_float+0x72>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b422:	f1ba 0f01 	cmp.w	sl, #1
 800b426:	f200 8117 	bhi.w	800b658 <_scanf_float+0x2ac>
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	429e      	cmp	r6, r3
 800b42e:	f200 8108 	bhi.w	800b642 <_scanf_float+0x296>
 800b432:	2001      	movs	r0, #1
 800b434:	b007      	add	sp, #28
 800b436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b43e:	2a0d      	cmp	r2, #13
 800b440:	d8e6      	bhi.n	800b410 <_scanf_float+0x64>
 800b442:	a101      	add	r1, pc, #4	@ (adr r1, 800b448 <_scanf_float+0x9c>)
 800b444:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b448:	0800b58f 	.word	0x0800b58f
 800b44c:	0800b411 	.word	0x0800b411
 800b450:	0800b411 	.word	0x0800b411
 800b454:	0800b411 	.word	0x0800b411
 800b458:	0800b5ef 	.word	0x0800b5ef
 800b45c:	0800b5c7 	.word	0x0800b5c7
 800b460:	0800b411 	.word	0x0800b411
 800b464:	0800b411 	.word	0x0800b411
 800b468:	0800b59d 	.word	0x0800b59d
 800b46c:	0800b411 	.word	0x0800b411
 800b470:	0800b411 	.word	0x0800b411
 800b474:	0800b411 	.word	0x0800b411
 800b478:	0800b411 	.word	0x0800b411
 800b47c:	0800b555 	.word	0x0800b555
 800b480:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b484:	e7db      	b.n	800b43e <_scanf_float+0x92>
 800b486:	290e      	cmp	r1, #14
 800b488:	d8c2      	bhi.n	800b410 <_scanf_float+0x64>
 800b48a:	a001      	add	r0, pc, #4	@ (adr r0, 800b490 <_scanf_float+0xe4>)
 800b48c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b490:	0800b545 	.word	0x0800b545
 800b494:	0800b411 	.word	0x0800b411
 800b498:	0800b545 	.word	0x0800b545
 800b49c:	0800b5db 	.word	0x0800b5db
 800b4a0:	0800b411 	.word	0x0800b411
 800b4a4:	0800b4ed 	.word	0x0800b4ed
 800b4a8:	0800b52b 	.word	0x0800b52b
 800b4ac:	0800b52b 	.word	0x0800b52b
 800b4b0:	0800b52b 	.word	0x0800b52b
 800b4b4:	0800b52b 	.word	0x0800b52b
 800b4b8:	0800b52b 	.word	0x0800b52b
 800b4bc:	0800b52b 	.word	0x0800b52b
 800b4c0:	0800b52b 	.word	0x0800b52b
 800b4c4:	0800b52b 	.word	0x0800b52b
 800b4c8:	0800b52b 	.word	0x0800b52b
 800b4cc:	2b6e      	cmp	r3, #110	@ 0x6e
 800b4ce:	d809      	bhi.n	800b4e4 <_scanf_float+0x138>
 800b4d0:	2b60      	cmp	r3, #96	@ 0x60
 800b4d2:	d8b2      	bhi.n	800b43a <_scanf_float+0x8e>
 800b4d4:	2b54      	cmp	r3, #84	@ 0x54
 800b4d6:	d07b      	beq.n	800b5d0 <_scanf_float+0x224>
 800b4d8:	2b59      	cmp	r3, #89	@ 0x59
 800b4da:	d199      	bne.n	800b410 <_scanf_float+0x64>
 800b4dc:	2d07      	cmp	r5, #7
 800b4de:	d197      	bne.n	800b410 <_scanf_float+0x64>
 800b4e0:	2508      	movs	r5, #8
 800b4e2:	e02c      	b.n	800b53e <_scanf_float+0x192>
 800b4e4:	2b74      	cmp	r3, #116	@ 0x74
 800b4e6:	d073      	beq.n	800b5d0 <_scanf_float+0x224>
 800b4e8:	2b79      	cmp	r3, #121	@ 0x79
 800b4ea:	e7f6      	b.n	800b4da <_scanf_float+0x12e>
 800b4ec:	6821      	ldr	r1, [r4, #0]
 800b4ee:	05c8      	lsls	r0, r1, #23
 800b4f0:	d51b      	bpl.n	800b52a <_scanf_float+0x17e>
 800b4f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b4f6:	6021      	str	r1, [r4, #0]
 800b4f8:	f109 0901 	add.w	r9, r9, #1
 800b4fc:	f1bb 0f00 	cmp.w	fp, #0
 800b500:	d003      	beq.n	800b50a <_scanf_float+0x15e>
 800b502:	3201      	adds	r2, #1
 800b504:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b508:	60a2      	str	r2, [r4, #8]
 800b50a:	68a3      	ldr	r3, [r4, #8]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	60a3      	str	r3, [r4, #8]
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	3301      	adds	r3, #1
 800b514:	6123      	str	r3, [r4, #16]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3b01      	subs	r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	607b      	str	r3, [r7, #4]
 800b51e:	f340 8087 	ble.w	800b630 <_scanf_float+0x284>
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	3301      	adds	r3, #1
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	e765      	b.n	800b3f6 <_scanf_float+0x4a>
 800b52a:	eb1a 0105 	adds.w	r1, sl, r5
 800b52e:	f47f af6f 	bne.w	800b410 <_scanf_float+0x64>
 800b532:	6822      	ldr	r2, [r4, #0]
 800b534:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b538:	6022      	str	r2, [r4, #0]
 800b53a:	460d      	mov	r5, r1
 800b53c:	468a      	mov	sl, r1
 800b53e:	f806 3b01 	strb.w	r3, [r6], #1
 800b542:	e7e2      	b.n	800b50a <_scanf_float+0x15e>
 800b544:	6822      	ldr	r2, [r4, #0]
 800b546:	0610      	lsls	r0, r2, #24
 800b548:	f57f af62 	bpl.w	800b410 <_scanf_float+0x64>
 800b54c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b550:	6022      	str	r2, [r4, #0]
 800b552:	e7f4      	b.n	800b53e <_scanf_float+0x192>
 800b554:	f1ba 0f00 	cmp.w	sl, #0
 800b558:	d10e      	bne.n	800b578 <_scanf_float+0x1cc>
 800b55a:	f1b9 0f00 	cmp.w	r9, #0
 800b55e:	d10e      	bne.n	800b57e <_scanf_float+0x1d2>
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b566:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b56a:	d108      	bne.n	800b57e <_scanf_float+0x1d2>
 800b56c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b570:	6022      	str	r2, [r4, #0]
 800b572:	f04f 0a01 	mov.w	sl, #1
 800b576:	e7e2      	b.n	800b53e <_scanf_float+0x192>
 800b578:	f1ba 0f02 	cmp.w	sl, #2
 800b57c:	d055      	beq.n	800b62a <_scanf_float+0x27e>
 800b57e:	2d01      	cmp	r5, #1
 800b580:	d002      	beq.n	800b588 <_scanf_float+0x1dc>
 800b582:	2d04      	cmp	r5, #4
 800b584:	f47f af44 	bne.w	800b410 <_scanf_float+0x64>
 800b588:	3501      	adds	r5, #1
 800b58a:	b2ed      	uxtb	r5, r5
 800b58c:	e7d7      	b.n	800b53e <_scanf_float+0x192>
 800b58e:	f1ba 0f01 	cmp.w	sl, #1
 800b592:	f47f af3d 	bne.w	800b410 <_scanf_float+0x64>
 800b596:	f04f 0a02 	mov.w	sl, #2
 800b59a:	e7d0      	b.n	800b53e <_scanf_float+0x192>
 800b59c:	b97d      	cbnz	r5, 800b5be <_scanf_float+0x212>
 800b59e:	f1b9 0f00 	cmp.w	r9, #0
 800b5a2:	f47f af38 	bne.w	800b416 <_scanf_float+0x6a>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5b0:	f040 8108 	bne.w	800b7c4 <_scanf_float+0x418>
 800b5b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5b8:	6022      	str	r2, [r4, #0]
 800b5ba:	2501      	movs	r5, #1
 800b5bc:	e7bf      	b.n	800b53e <_scanf_float+0x192>
 800b5be:	2d03      	cmp	r5, #3
 800b5c0:	d0e2      	beq.n	800b588 <_scanf_float+0x1dc>
 800b5c2:	2d05      	cmp	r5, #5
 800b5c4:	e7de      	b.n	800b584 <_scanf_float+0x1d8>
 800b5c6:	2d02      	cmp	r5, #2
 800b5c8:	f47f af22 	bne.w	800b410 <_scanf_float+0x64>
 800b5cc:	2503      	movs	r5, #3
 800b5ce:	e7b6      	b.n	800b53e <_scanf_float+0x192>
 800b5d0:	2d06      	cmp	r5, #6
 800b5d2:	f47f af1d 	bne.w	800b410 <_scanf_float+0x64>
 800b5d6:	2507      	movs	r5, #7
 800b5d8:	e7b1      	b.n	800b53e <_scanf_float+0x192>
 800b5da:	6822      	ldr	r2, [r4, #0]
 800b5dc:	0591      	lsls	r1, r2, #22
 800b5de:	f57f af17 	bpl.w	800b410 <_scanf_float+0x64>
 800b5e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b5e6:	6022      	str	r2, [r4, #0]
 800b5e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5ec:	e7a7      	b.n	800b53e <_scanf_float+0x192>
 800b5ee:	6822      	ldr	r2, [r4, #0]
 800b5f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b5f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b5f8:	d006      	beq.n	800b608 <_scanf_float+0x25c>
 800b5fa:	0550      	lsls	r0, r2, #21
 800b5fc:	f57f af08 	bpl.w	800b410 <_scanf_float+0x64>
 800b600:	f1b9 0f00 	cmp.w	r9, #0
 800b604:	f000 80de 	beq.w	800b7c4 <_scanf_float+0x418>
 800b608:	0591      	lsls	r1, r2, #22
 800b60a:	bf58      	it	pl
 800b60c:	9902      	ldrpl	r1, [sp, #8]
 800b60e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b612:	bf58      	it	pl
 800b614:	eba9 0101 	subpl.w	r1, r9, r1
 800b618:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b61c:	bf58      	it	pl
 800b61e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	f04f 0900 	mov.w	r9, #0
 800b628:	e789      	b.n	800b53e <_scanf_float+0x192>
 800b62a:	f04f 0a03 	mov.w	sl, #3
 800b62e:	e786      	b.n	800b53e <_scanf_float+0x192>
 800b630:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b634:	4639      	mov	r1, r7
 800b636:	4640      	mov	r0, r8
 800b638:	4798      	blx	r3
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f43f aedb 	beq.w	800b3f6 <_scanf_float+0x4a>
 800b640:	e6e6      	b.n	800b410 <_scanf_float+0x64>
 800b642:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b64a:	463a      	mov	r2, r7
 800b64c:	4640      	mov	r0, r8
 800b64e:	4798      	blx	r3
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	3b01      	subs	r3, #1
 800b654:	6123      	str	r3, [r4, #16]
 800b656:	e6e8      	b.n	800b42a <_scanf_float+0x7e>
 800b658:	1e6b      	subs	r3, r5, #1
 800b65a:	2b06      	cmp	r3, #6
 800b65c:	d824      	bhi.n	800b6a8 <_scanf_float+0x2fc>
 800b65e:	2d02      	cmp	r5, #2
 800b660:	d836      	bhi.n	800b6d0 <_scanf_float+0x324>
 800b662:	9b01      	ldr	r3, [sp, #4]
 800b664:	429e      	cmp	r6, r3
 800b666:	f67f aee4 	bls.w	800b432 <_scanf_float+0x86>
 800b66a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b66e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b672:	463a      	mov	r2, r7
 800b674:	4640      	mov	r0, r8
 800b676:	4798      	blx	r3
 800b678:	6923      	ldr	r3, [r4, #16]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	6123      	str	r3, [r4, #16]
 800b67e:	e7f0      	b.n	800b662 <_scanf_float+0x2b6>
 800b680:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b684:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b688:	463a      	mov	r2, r7
 800b68a:	4640      	mov	r0, r8
 800b68c:	4798      	blx	r3
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	3b01      	subs	r3, #1
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b698:	fa5f fa8a 	uxtb.w	sl, sl
 800b69c:	f1ba 0f02 	cmp.w	sl, #2
 800b6a0:	d1ee      	bne.n	800b680 <_scanf_float+0x2d4>
 800b6a2:	3d03      	subs	r5, #3
 800b6a4:	b2ed      	uxtb	r5, r5
 800b6a6:	1b76      	subs	r6, r6, r5
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	05da      	lsls	r2, r3, #23
 800b6ac:	d530      	bpl.n	800b710 <_scanf_float+0x364>
 800b6ae:	055b      	lsls	r3, r3, #21
 800b6b0:	d511      	bpl.n	800b6d6 <_scanf_float+0x32a>
 800b6b2:	9b01      	ldr	r3, [sp, #4]
 800b6b4:	429e      	cmp	r6, r3
 800b6b6:	f67f aebc 	bls.w	800b432 <_scanf_float+0x86>
 800b6ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6c2:	463a      	mov	r2, r7
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	4798      	blx	r3
 800b6c8:	6923      	ldr	r3, [r4, #16]
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	6123      	str	r3, [r4, #16]
 800b6ce:	e7f0      	b.n	800b6b2 <_scanf_float+0x306>
 800b6d0:	46aa      	mov	sl, r5
 800b6d2:	46b3      	mov	fp, r6
 800b6d4:	e7de      	b.n	800b694 <_scanf_float+0x2e8>
 800b6d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	2965      	cmp	r1, #101	@ 0x65
 800b6de:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6e2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b6e6:	6123      	str	r3, [r4, #16]
 800b6e8:	d00c      	beq.n	800b704 <_scanf_float+0x358>
 800b6ea:	2945      	cmp	r1, #69	@ 0x45
 800b6ec:	d00a      	beq.n	800b704 <_scanf_float+0x358>
 800b6ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6f2:	463a      	mov	r2, r7
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	4798      	blx	r3
 800b6f8:	6923      	ldr	r3, [r4, #16]
 800b6fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b6fe:	3b01      	subs	r3, #1
 800b700:	1eb5      	subs	r5, r6, #2
 800b702:	6123      	str	r3, [r4, #16]
 800b704:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b708:	463a      	mov	r2, r7
 800b70a:	4640      	mov	r0, r8
 800b70c:	4798      	blx	r3
 800b70e:	462e      	mov	r6, r5
 800b710:	6822      	ldr	r2, [r4, #0]
 800b712:	f012 0210 	ands.w	r2, r2, #16
 800b716:	d001      	beq.n	800b71c <_scanf_float+0x370>
 800b718:	2000      	movs	r0, #0
 800b71a:	e68b      	b.n	800b434 <_scanf_float+0x88>
 800b71c:	7032      	strb	r2, [r6, #0]
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b728:	d11c      	bne.n	800b764 <_scanf_float+0x3b8>
 800b72a:	9b02      	ldr	r3, [sp, #8]
 800b72c:	454b      	cmp	r3, r9
 800b72e:	eba3 0209 	sub.w	r2, r3, r9
 800b732:	d123      	bne.n	800b77c <_scanf_float+0x3d0>
 800b734:	9901      	ldr	r1, [sp, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	4640      	mov	r0, r8
 800b73a:	f002 fc6d 	bl	800e018 <_strtod_r>
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	6821      	ldr	r1, [r4, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f011 0f02 	tst.w	r1, #2
 800b748:	ec57 6b10 	vmov	r6, r7, d0
 800b74c:	f103 0204 	add.w	r2, r3, #4
 800b750:	d01f      	beq.n	800b792 <_scanf_float+0x3e6>
 800b752:	9903      	ldr	r1, [sp, #12]
 800b754:	600a      	str	r2, [r1, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	e9c3 6700 	strd	r6, r7, [r3]
 800b75c:	68e3      	ldr	r3, [r4, #12]
 800b75e:	3301      	adds	r3, #1
 800b760:	60e3      	str	r3, [r4, #12]
 800b762:	e7d9      	b.n	800b718 <_scanf_float+0x36c>
 800b764:	9b04      	ldr	r3, [sp, #16]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0e4      	beq.n	800b734 <_scanf_float+0x388>
 800b76a:	9905      	ldr	r1, [sp, #20]
 800b76c:	230a      	movs	r3, #10
 800b76e:	3101      	adds	r1, #1
 800b770:	4640      	mov	r0, r8
 800b772:	f002 fcd1 	bl	800e118 <_strtol_r>
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	9e05      	ldr	r6, [sp, #20]
 800b77a:	1ac2      	subs	r2, r0, r3
 800b77c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b780:	429e      	cmp	r6, r3
 800b782:	bf28      	it	cs
 800b784:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b788:	4910      	ldr	r1, [pc, #64]	@ (800b7cc <_scanf_float+0x420>)
 800b78a:	4630      	mov	r0, r6
 800b78c:	f000 f8e4 	bl	800b958 <siprintf>
 800b790:	e7d0      	b.n	800b734 <_scanf_float+0x388>
 800b792:	f011 0f04 	tst.w	r1, #4
 800b796:	9903      	ldr	r1, [sp, #12]
 800b798:	600a      	str	r2, [r1, #0]
 800b79a:	d1dc      	bne.n	800b756 <_scanf_float+0x3aa>
 800b79c:	681d      	ldr	r5, [r3, #0]
 800b79e:	4632      	mov	r2, r6
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	f7f5 f9f1 	bl	8000b8c <__aeabi_dcmpun>
 800b7aa:	b128      	cbz	r0, 800b7b8 <_scanf_float+0x40c>
 800b7ac:	4808      	ldr	r0, [pc, #32]	@ (800b7d0 <_scanf_float+0x424>)
 800b7ae:	f000 fa2d 	bl	800bc0c <nanf>
 800b7b2:	ed85 0a00 	vstr	s0, [r5]
 800b7b6:	e7d1      	b.n	800b75c <_scanf_float+0x3b0>
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f5 fa44 	bl	8000c48 <__aeabi_d2f>
 800b7c0:	6028      	str	r0, [r5, #0]
 800b7c2:	e7cb      	b.n	800b75c <_scanf_float+0x3b0>
 800b7c4:	f04f 0900 	mov.w	r9, #0
 800b7c8:	e629      	b.n	800b41e <_scanf_float+0x72>
 800b7ca:	bf00      	nop
 800b7cc:	0800f5f4 	.word	0x0800f5f4
 800b7d0:	0800f98d 	.word	0x0800f98d

0800b7d4 <std>:
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	4604      	mov	r4, r0
 800b7da:	e9c0 3300 	strd	r3, r3, [r0]
 800b7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7e2:	6083      	str	r3, [r0, #8]
 800b7e4:	8181      	strh	r1, [r0, #12]
 800b7e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7e8:	81c2      	strh	r2, [r0, #14]
 800b7ea:	6183      	str	r3, [r0, #24]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	305c      	adds	r0, #92	@ 0x5c
 800b7f2:	f000 f914 	bl	800ba1e <memset>
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b82c <std+0x58>)
 800b7f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b830 <std+0x5c>)
 800b7fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b834 <std+0x60>)
 800b800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b802:	4b0d      	ldr	r3, [pc, #52]	@ (800b838 <std+0x64>)
 800b804:	6323      	str	r3, [r4, #48]	@ 0x30
 800b806:	4b0d      	ldr	r3, [pc, #52]	@ (800b83c <std+0x68>)
 800b808:	6224      	str	r4, [r4, #32]
 800b80a:	429c      	cmp	r4, r3
 800b80c:	d006      	beq.n	800b81c <std+0x48>
 800b80e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b812:	4294      	cmp	r4, r2
 800b814:	d002      	beq.n	800b81c <std+0x48>
 800b816:	33d0      	adds	r3, #208	@ 0xd0
 800b818:	429c      	cmp	r4, r3
 800b81a:	d105      	bne.n	800b828 <std+0x54>
 800b81c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b824:	f000 b9e0 	b.w	800bbe8 <__retarget_lock_init_recursive>
 800b828:	bd10      	pop	{r4, pc}
 800b82a:	bf00      	nop
 800b82c:	0800b999 	.word	0x0800b999
 800b830:	0800b9bb 	.word	0x0800b9bb
 800b834:	0800b9f3 	.word	0x0800b9f3
 800b838:	0800ba17 	.word	0x0800ba17
 800b83c:	20005e98 	.word	0x20005e98

0800b840 <stdio_exit_handler>:
 800b840:	4a02      	ldr	r2, [pc, #8]	@ (800b84c <stdio_exit_handler+0xc>)
 800b842:	4903      	ldr	r1, [pc, #12]	@ (800b850 <stdio_exit_handler+0x10>)
 800b844:	4803      	ldr	r0, [pc, #12]	@ (800b854 <stdio_exit_handler+0x14>)
 800b846:	f000 b869 	b.w	800b91c <_fwalk_sglue>
 800b84a:	bf00      	nop
 800b84c:	2000016c 	.word	0x2000016c
 800b850:	0800e4d5 	.word	0x0800e4d5
 800b854:	2000017c 	.word	0x2000017c

0800b858 <cleanup_stdio>:
 800b858:	6841      	ldr	r1, [r0, #4]
 800b85a:	4b0c      	ldr	r3, [pc, #48]	@ (800b88c <cleanup_stdio+0x34>)
 800b85c:	4299      	cmp	r1, r3
 800b85e:	b510      	push	{r4, lr}
 800b860:	4604      	mov	r4, r0
 800b862:	d001      	beq.n	800b868 <cleanup_stdio+0x10>
 800b864:	f002 fe36 	bl	800e4d4 <_fflush_r>
 800b868:	68a1      	ldr	r1, [r4, #8]
 800b86a:	4b09      	ldr	r3, [pc, #36]	@ (800b890 <cleanup_stdio+0x38>)
 800b86c:	4299      	cmp	r1, r3
 800b86e:	d002      	beq.n	800b876 <cleanup_stdio+0x1e>
 800b870:	4620      	mov	r0, r4
 800b872:	f002 fe2f 	bl	800e4d4 <_fflush_r>
 800b876:	68e1      	ldr	r1, [r4, #12]
 800b878:	4b06      	ldr	r3, [pc, #24]	@ (800b894 <cleanup_stdio+0x3c>)
 800b87a:	4299      	cmp	r1, r3
 800b87c:	d004      	beq.n	800b888 <cleanup_stdio+0x30>
 800b87e:	4620      	mov	r0, r4
 800b880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b884:	f002 be26 	b.w	800e4d4 <_fflush_r>
 800b888:	bd10      	pop	{r4, pc}
 800b88a:	bf00      	nop
 800b88c:	20005e98 	.word	0x20005e98
 800b890:	20005f00 	.word	0x20005f00
 800b894:	20005f68 	.word	0x20005f68

0800b898 <global_stdio_init.part.0>:
 800b898:	b510      	push	{r4, lr}
 800b89a:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c8 <global_stdio_init.part.0+0x30>)
 800b89c:	4c0b      	ldr	r4, [pc, #44]	@ (800b8cc <global_stdio_init.part.0+0x34>)
 800b89e:	4a0c      	ldr	r2, [pc, #48]	@ (800b8d0 <global_stdio_init.part.0+0x38>)
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2104      	movs	r1, #4
 800b8a8:	f7ff ff94 	bl	800b7d4 <std>
 800b8ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	2109      	movs	r1, #9
 800b8b4:	f7ff ff8e 	bl	800b7d4 <std>
 800b8b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b8bc:	2202      	movs	r2, #2
 800b8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c2:	2112      	movs	r1, #18
 800b8c4:	f7ff bf86 	b.w	800b7d4 <std>
 800b8c8:	20005fd0 	.word	0x20005fd0
 800b8cc:	20005e98 	.word	0x20005e98
 800b8d0:	0800b841 	.word	0x0800b841

0800b8d4 <__sfp_lock_acquire>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	@ (800b8dc <__sfp_lock_acquire+0x8>)
 800b8d6:	f000 b988 	b.w	800bbea <__retarget_lock_acquire_recursive>
 800b8da:	bf00      	nop
 800b8dc:	20005fd9 	.word	0x20005fd9

0800b8e0 <__sfp_lock_release>:
 800b8e0:	4801      	ldr	r0, [pc, #4]	@ (800b8e8 <__sfp_lock_release+0x8>)
 800b8e2:	f000 b983 	b.w	800bbec <__retarget_lock_release_recursive>
 800b8e6:	bf00      	nop
 800b8e8:	20005fd9 	.word	0x20005fd9

0800b8ec <__sinit>:
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	f7ff fff0 	bl	800b8d4 <__sfp_lock_acquire>
 800b8f4:	6a23      	ldr	r3, [r4, #32]
 800b8f6:	b11b      	cbz	r3, 800b900 <__sinit+0x14>
 800b8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8fc:	f7ff bff0 	b.w	800b8e0 <__sfp_lock_release>
 800b900:	4b04      	ldr	r3, [pc, #16]	@ (800b914 <__sinit+0x28>)
 800b902:	6223      	str	r3, [r4, #32]
 800b904:	4b04      	ldr	r3, [pc, #16]	@ (800b918 <__sinit+0x2c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1f5      	bne.n	800b8f8 <__sinit+0xc>
 800b90c:	f7ff ffc4 	bl	800b898 <global_stdio_init.part.0>
 800b910:	e7f2      	b.n	800b8f8 <__sinit+0xc>
 800b912:	bf00      	nop
 800b914:	0800b859 	.word	0x0800b859
 800b918:	20005fd0 	.word	0x20005fd0

0800b91c <_fwalk_sglue>:
 800b91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b920:	4607      	mov	r7, r0
 800b922:	4688      	mov	r8, r1
 800b924:	4614      	mov	r4, r2
 800b926:	2600      	movs	r6, #0
 800b928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b92c:	f1b9 0901 	subs.w	r9, r9, #1
 800b930:	d505      	bpl.n	800b93e <_fwalk_sglue+0x22>
 800b932:	6824      	ldr	r4, [r4, #0]
 800b934:	2c00      	cmp	r4, #0
 800b936:	d1f7      	bne.n	800b928 <_fwalk_sglue+0xc>
 800b938:	4630      	mov	r0, r6
 800b93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d907      	bls.n	800b954 <_fwalk_sglue+0x38>
 800b944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b948:	3301      	adds	r3, #1
 800b94a:	d003      	beq.n	800b954 <_fwalk_sglue+0x38>
 800b94c:	4629      	mov	r1, r5
 800b94e:	4638      	mov	r0, r7
 800b950:	47c0      	blx	r8
 800b952:	4306      	orrs	r6, r0
 800b954:	3568      	adds	r5, #104	@ 0x68
 800b956:	e7e9      	b.n	800b92c <_fwalk_sglue+0x10>

0800b958 <siprintf>:
 800b958:	b40e      	push	{r1, r2, r3}
 800b95a:	b500      	push	{lr}
 800b95c:	b09c      	sub	sp, #112	@ 0x70
 800b95e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b960:	9002      	str	r0, [sp, #8]
 800b962:	9006      	str	r0, [sp, #24]
 800b964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b968:	4809      	ldr	r0, [pc, #36]	@ (800b990 <siprintf+0x38>)
 800b96a:	9107      	str	r1, [sp, #28]
 800b96c:	9104      	str	r1, [sp, #16]
 800b96e:	4909      	ldr	r1, [pc, #36]	@ (800b994 <siprintf+0x3c>)
 800b970:	f853 2b04 	ldr.w	r2, [r3], #4
 800b974:	9105      	str	r1, [sp, #20]
 800b976:	6800      	ldr	r0, [r0, #0]
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	a902      	add	r1, sp, #8
 800b97c:	f002 fc2a 	bl	800e1d4 <_svfiprintf_r>
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	2200      	movs	r2, #0
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	b01c      	add	sp, #112	@ 0x70
 800b988:	f85d eb04 	ldr.w	lr, [sp], #4
 800b98c:	b003      	add	sp, #12
 800b98e:	4770      	bx	lr
 800b990:	20000178 	.word	0x20000178
 800b994:	ffff0208 	.word	0xffff0208

0800b998 <__sread>:
 800b998:	b510      	push	{r4, lr}
 800b99a:	460c      	mov	r4, r1
 800b99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a0:	f000 f8d4 	bl	800bb4c <_read_r>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	bfab      	itete	ge
 800b9a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b9ac:	181b      	addge	r3, r3, r0
 800b9ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9b2:	bfac      	ite	ge
 800b9b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9b6:	81a3      	strhlt	r3, [r4, #12]
 800b9b8:	bd10      	pop	{r4, pc}

0800b9ba <__swrite>:
 800b9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9be:	461f      	mov	r7, r3
 800b9c0:	898b      	ldrh	r3, [r1, #12]
 800b9c2:	05db      	lsls	r3, r3, #23
 800b9c4:	4605      	mov	r5, r0
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	4616      	mov	r6, r2
 800b9ca:	d505      	bpl.n	800b9d8 <__swrite+0x1e>
 800b9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f000 f8a8 	bl	800bb28 <_lseek_r>
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	4632      	mov	r2, r6
 800b9e6:	463b      	mov	r3, r7
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ee:	f000 b8bf 	b.w	800bb70 <_write_r>

0800b9f2 <__sseek>:
 800b9f2:	b510      	push	{r4, lr}
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fa:	f000 f895 	bl	800bb28 <_lseek_r>
 800b9fe:	1c43      	adds	r3, r0, #1
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	bf15      	itete	ne
 800ba04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba0e:	81a3      	strheq	r3, [r4, #12]
 800ba10:	bf18      	it	ne
 800ba12:	81a3      	strhne	r3, [r4, #12]
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <__sclose>:
 800ba16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1a:	f000 b81f 	b.w	800ba5c <_close_r>

0800ba1e <memset>:
 800ba1e:	4402      	add	r2, r0
 800ba20:	4603      	mov	r3, r0
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d100      	bne.n	800ba28 <memset+0xa>
 800ba26:	4770      	bx	lr
 800ba28:	f803 1b01 	strb.w	r1, [r3], #1
 800ba2c:	e7f9      	b.n	800ba22 <memset+0x4>
	...

0800ba30 <strupr>:
 800ba30:	b510      	push	{r4, lr}
 800ba32:	4c07      	ldr	r4, [pc, #28]	@ (800ba50 <strupr+0x20>)
 800ba34:	1e42      	subs	r2, r0, #1
 800ba36:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ba3a:	b903      	cbnz	r3, 800ba3e <strupr+0xe>
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	5ce1      	ldrb	r1, [r4, r3]
 800ba40:	f001 0103 	and.w	r1, r1, #3
 800ba44:	2902      	cmp	r1, #2
 800ba46:	bf08      	it	eq
 800ba48:	3b20      	subeq	r3, #32
 800ba4a:	7013      	strb	r3, [r2, #0]
 800ba4c:	e7f3      	b.n	800ba36 <strupr+0x6>
 800ba4e:	bf00      	nop
 800ba50:	0800f839 	.word	0x0800f839

0800ba54 <_localeconv_r>:
 800ba54:	4800      	ldr	r0, [pc, #0]	@ (800ba58 <_localeconv_r+0x4>)
 800ba56:	4770      	bx	lr
 800ba58:	200002b8 	.word	0x200002b8

0800ba5c <_close_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d06      	ldr	r5, [pc, #24]	@ (800ba78 <_close_r+0x1c>)
 800ba60:	2300      	movs	r3, #0
 800ba62:	4604      	mov	r4, r0
 800ba64:	4608      	mov	r0, r1
 800ba66:	602b      	str	r3, [r5, #0]
 800ba68:	f7f7 fc18 	bl	800329c <_close>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_close_r+0x1a>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_close_r+0x1a>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	20005fd4 	.word	0x20005fd4

0800ba7c <_reclaim_reent>:
 800ba7c:	4b29      	ldr	r3, [pc, #164]	@ (800bb24 <_reclaim_reent+0xa8>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4283      	cmp	r3, r0
 800ba82:	b570      	push	{r4, r5, r6, lr}
 800ba84:	4604      	mov	r4, r0
 800ba86:	d04b      	beq.n	800bb20 <_reclaim_reent+0xa4>
 800ba88:	69c3      	ldr	r3, [r0, #28]
 800ba8a:	b1ab      	cbz	r3, 800bab8 <_reclaim_reent+0x3c>
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	b16b      	cbz	r3, 800baac <_reclaim_reent+0x30>
 800ba90:	2500      	movs	r5, #0
 800ba92:	69e3      	ldr	r3, [r4, #28]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	5959      	ldr	r1, [r3, r5]
 800ba98:	2900      	cmp	r1, #0
 800ba9a:	d13b      	bne.n	800bb14 <_reclaim_reent+0x98>
 800ba9c:	3504      	adds	r5, #4
 800ba9e:	2d80      	cmp	r5, #128	@ 0x80
 800baa0:	d1f7      	bne.n	800ba92 <_reclaim_reent+0x16>
 800baa2:	69e3      	ldr	r3, [r4, #28]
 800baa4:	4620      	mov	r0, r4
 800baa6:	68d9      	ldr	r1, [r3, #12]
 800baa8:	f000 ff02 	bl	800c8b0 <_free_r>
 800baac:	69e3      	ldr	r3, [r4, #28]
 800baae:	6819      	ldr	r1, [r3, #0]
 800bab0:	b111      	cbz	r1, 800bab8 <_reclaim_reent+0x3c>
 800bab2:	4620      	mov	r0, r4
 800bab4:	f000 fefc 	bl	800c8b0 <_free_r>
 800bab8:	6961      	ldr	r1, [r4, #20]
 800baba:	b111      	cbz	r1, 800bac2 <_reclaim_reent+0x46>
 800babc:	4620      	mov	r0, r4
 800babe:	f000 fef7 	bl	800c8b0 <_free_r>
 800bac2:	69e1      	ldr	r1, [r4, #28]
 800bac4:	b111      	cbz	r1, 800bacc <_reclaim_reent+0x50>
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 fef2 	bl	800c8b0 <_free_r>
 800bacc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bace:	b111      	cbz	r1, 800bad6 <_reclaim_reent+0x5a>
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 feed 	bl	800c8b0 <_free_r>
 800bad6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bad8:	b111      	cbz	r1, 800bae0 <_reclaim_reent+0x64>
 800bada:	4620      	mov	r0, r4
 800badc:	f000 fee8 	bl	800c8b0 <_free_r>
 800bae0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bae2:	b111      	cbz	r1, 800baea <_reclaim_reent+0x6e>
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 fee3 	bl	800c8b0 <_free_r>
 800baea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800baec:	b111      	cbz	r1, 800baf4 <_reclaim_reent+0x78>
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 fede 	bl	800c8b0 <_free_r>
 800baf4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800baf6:	b111      	cbz	r1, 800bafe <_reclaim_reent+0x82>
 800baf8:	4620      	mov	r0, r4
 800bafa:	f000 fed9 	bl	800c8b0 <_free_r>
 800bafe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bb00:	b111      	cbz	r1, 800bb08 <_reclaim_reent+0x8c>
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fed4 	bl	800c8b0 <_free_r>
 800bb08:	6a23      	ldr	r3, [r4, #32]
 800bb0a:	b14b      	cbz	r3, 800bb20 <_reclaim_reent+0xa4>
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb12:	4718      	bx	r3
 800bb14:	680e      	ldr	r6, [r1, #0]
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 feca 	bl	800c8b0 <_free_r>
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	e7bb      	b.n	800ba98 <_reclaim_reent+0x1c>
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	bf00      	nop
 800bb24:	20000178 	.word	0x20000178

0800bb28 <_lseek_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d07      	ldr	r5, [pc, #28]	@ (800bb48 <_lseek_r+0x20>)
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4611      	mov	r1, r2
 800bb32:	2200      	movs	r2, #0
 800bb34:	602a      	str	r2, [r5, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	f7f7 fbd7 	bl	80032ea <_lseek>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_lseek_r+0x1e>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_lseek_r+0x1e>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	20005fd4 	.word	0x20005fd4

0800bb4c <_read_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d07      	ldr	r5, [pc, #28]	@ (800bb6c <_read_r+0x20>)
 800bb50:	4604      	mov	r4, r0
 800bb52:	4608      	mov	r0, r1
 800bb54:	4611      	mov	r1, r2
 800bb56:	2200      	movs	r2, #0
 800bb58:	602a      	str	r2, [r5, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f7f7 fb65 	bl	800322a <_read>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_read_r+0x1e>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_read_r+0x1e>
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	20005fd4 	.word	0x20005fd4

0800bb70 <_write_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d07      	ldr	r5, [pc, #28]	@ (800bb90 <_write_r+0x20>)
 800bb74:	4604      	mov	r4, r0
 800bb76:	4608      	mov	r0, r1
 800bb78:	4611      	mov	r1, r2
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	602a      	str	r2, [r5, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f7f7 fb70 	bl	8003264 <_write>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_write_r+0x1e>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_write_r+0x1e>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	20005fd4 	.word	0x20005fd4

0800bb94 <__errno>:
 800bb94:	4b01      	ldr	r3, [pc, #4]	@ (800bb9c <__errno+0x8>)
 800bb96:	6818      	ldr	r0, [r3, #0]
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20000178 	.word	0x20000178

0800bba0 <__libc_init_array>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	4d0d      	ldr	r5, [pc, #52]	@ (800bbd8 <__libc_init_array+0x38>)
 800bba4:	4c0d      	ldr	r4, [pc, #52]	@ (800bbdc <__libc_init_array+0x3c>)
 800bba6:	1b64      	subs	r4, r4, r5
 800bba8:	10a4      	asrs	r4, r4, #2
 800bbaa:	2600      	movs	r6, #0
 800bbac:	42a6      	cmp	r6, r4
 800bbae:	d109      	bne.n	800bbc4 <__libc_init_array+0x24>
 800bbb0:	4d0b      	ldr	r5, [pc, #44]	@ (800bbe0 <__libc_init_array+0x40>)
 800bbb2:	4c0c      	ldr	r4, [pc, #48]	@ (800bbe4 <__libc_init_array+0x44>)
 800bbb4:	f003 fb72 	bl	800f29c <_init>
 800bbb8:	1b64      	subs	r4, r4, r5
 800bbba:	10a4      	asrs	r4, r4, #2
 800bbbc:	2600      	movs	r6, #0
 800bbbe:	42a6      	cmp	r6, r4
 800bbc0:	d105      	bne.n	800bbce <__libc_init_array+0x2e>
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbc8:	4798      	blx	r3
 800bbca:	3601      	adds	r6, #1
 800bbcc:	e7ee      	b.n	800bbac <__libc_init_array+0xc>
 800bbce:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd2:	4798      	blx	r3
 800bbd4:	3601      	adds	r6, #1
 800bbd6:	e7f2      	b.n	800bbbe <__libc_init_array+0x1e>
 800bbd8:	0800f9f8 	.word	0x0800f9f8
 800bbdc:	0800f9f8 	.word	0x0800f9f8
 800bbe0:	0800f9f8 	.word	0x0800f9f8
 800bbe4:	0800f9fc 	.word	0x0800f9fc

0800bbe8 <__retarget_lock_init_recursive>:
 800bbe8:	4770      	bx	lr

0800bbea <__retarget_lock_acquire_recursive>:
 800bbea:	4770      	bx	lr

0800bbec <__retarget_lock_release_recursive>:
 800bbec:	4770      	bx	lr

0800bbee <memcpy>:
 800bbee:	440a      	add	r2, r1
 800bbf0:	4291      	cmp	r1, r2
 800bbf2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbf6:	d100      	bne.n	800bbfa <memcpy+0xc>
 800bbf8:	4770      	bx	lr
 800bbfa:	b510      	push	{r4, lr}
 800bbfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc04:	4291      	cmp	r1, r2
 800bc06:	d1f9      	bne.n	800bbfc <memcpy+0xe>
 800bc08:	bd10      	pop	{r4, pc}
	...

0800bc0c <nanf>:
 800bc0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc14 <nanf+0x8>
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	7fc00000 	.word	0x7fc00000

0800bc18 <quorem>:
 800bc18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	6903      	ldr	r3, [r0, #16]
 800bc1e:	690c      	ldr	r4, [r1, #16]
 800bc20:	42a3      	cmp	r3, r4
 800bc22:	4607      	mov	r7, r0
 800bc24:	db7e      	blt.n	800bd24 <quorem+0x10c>
 800bc26:	3c01      	subs	r4, #1
 800bc28:	f101 0814 	add.w	r8, r1, #20
 800bc2c:	00a3      	lsls	r3, r4, #2
 800bc2e:	f100 0514 	add.w	r5, r0, #20
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc42:	3301      	adds	r3, #1
 800bc44:	429a      	cmp	r2, r3
 800bc46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc4a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc4e:	d32e      	bcc.n	800bcae <quorem+0x96>
 800bc50:	f04f 0a00 	mov.w	sl, #0
 800bc54:	46c4      	mov	ip, r8
 800bc56:	46ae      	mov	lr, r5
 800bc58:	46d3      	mov	fp, sl
 800bc5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc5e:	b298      	uxth	r0, r3
 800bc60:	fb06 a000 	mla	r0, r6, r0, sl
 800bc64:	0c02      	lsrs	r2, r0, #16
 800bc66:	0c1b      	lsrs	r3, r3, #16
 800bc68:	fb06 2303 	mla	r3, r6, r3, r2
 800bc6c:	f8de 2000 	ldr.w	r2, [lr]
 800bc70:	b280      	uxth	r0, r0
 800bc72:	b292      	uxth	r2, r2
 800bc74:	1a12      	subs	r2, r2, r0
 800bc76:	445a      	add	r2, fp
 800bc78:	f8de 0000 	ldr.w	r0, [lr]
 800bc7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc8a:	b292      	uxth	r2, r2
 800bc8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc90:	45e1      	cmp	r9, ip
 800bc92:	f84e 2b04 	str.w	r2, [lr], #4
 800bc96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc9a:	d2de      	bcs.n	800bc5a <quorem+0x42>
 800bc9c:	9b00      	ldr	r3, [sp, #0]
 800bc9e:	58eb      	ldr	r3, [r5, r3]
 800bca0:	b92b      	cbnz	r3, 800bcae <quorem+0x96>
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	3b04      	subs	r3, #4
 800bca6:	429d      	cmp	r5, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	d32f      	bcc.n	800bd0c <quorem+0xf4>
 800bcac:	613c      	str	r4, [r7, #16]
 800bcae:	4638      	mov	r0, r7
 800bcb0:	f001 f9c2 	bl	800d038 <__mcmp>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	db25      	blt.n	800bd04 <quorem+0xec>
 800bcb8:	4629      	mov	r1, r5
 800bcba:	2000      	movs	r0, #0
 800bcbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcc0:	f8d1 c000 	ldr.w	ip, [r1]
 800bcc4:	fa1f fe82 	uxth.w	lr, r2
 800bcc8:	fa1f f38c 	uxth.w	r3, ip
 800bccc:	eba3 030e 	sub.w	r3, r3, lr
 800bcd0:	4403      	add	r3, r0
 800bcd2:	0c12      	lsrs	r2, r2, #16
 800bcd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bcd8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bce2:	45c1      	cmp	r9, r8
 800bce4:	f841 3b04 	str.w	r3, [r1], #4
 800bce8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcec:	d2e6      	bcs.n	800bcbc <quorem+0xa4>
 800bcee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcf6:	b922      	cbnz	r2, 800bd02 <quorem+0xea>
 800bcf8:	3b04      	subs	r3, #4
 800bcfa:	429d      	cmp	r5, r3
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	d30b      	bcc.n	800bd18 <quorem+0x100>
 800bd00:	613c      	str	r4, [r7, #16]
 800bd02:	3601      	adds	r6, #1
 800bd04:	4630      	mov	r0, r6
 800bd06:	b003      	add	sp, #12
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	3b04      	subs	r3, #4
 800bd10:	2a00      	cmp	r2, #0
 800bd12:	d1cb      	bne.n	800bcac <quorem+0x94>
 800bd14:	3c01      	subs	r4, #1
 800bd16:	e7c6      	b.n	800bca6 <quorem+0x8e>
 800bd18:	6812      	ldr	r2, [r2, #0]
 800bd1a:	3b04      	subs	r3, #4
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	d1ef      	bne.n	800bd00 <quorem+0xe8>
 800bd20:	3c01      	subs	r4, #1
 800bd22:	e7ea      	b.n	800bcfa <quorem+0xe2>
 800bd24:	2000      	movs	r0, #0
 800bd26:	e7ee      	b.n	800bd06 <quorem+0xee>

0800bd28 <_dtoa_r>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	69c7      	ldr	r7, [r0, #28]
 800bd2e:	b099      	sub	sp, #100	@ 0x64
 800bd30:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd34:	ec55 4b10 	vmov	r4, r5, d0
 800bd38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bd3a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd3c:	4683      	mov	fp, r0
 800bd3e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd42:	b97f      	cbnz	r7, 800bd64 <_dtoa_r+0x3c>
 800bd44:	2010      	movs	r0, #16
 800bd46:	f000 fdfd 	bl	800c944 <malloc>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd50:	b920      	cbnz	r0, 800bd5c <_dtoa_r+0x34>
 800bd52:	4ba7      	ldr	r3, [pc, #668]	@ (800bff0 <_dtoa_r+0x2c8>)
 800bd54:	21ef      	movs	r1, #239	@ 0xef
 800bd56:	48a7      	ldr	r0, [pc, #668]	@ (800bff4 <_dtoa_r+0x2cc>)
 800bd58:	f002 fc2a 	bl	800e5b0 <__assert_func>
 800bd5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd60:	6007      	str	r7, [r0, #0]
 800bd62:	60c7      	str	r7, [r0, #12]
 800bd64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd68:	6819      	ldr	r1, [r3, #0]
 800bd6a:	b159      	cbz	r1, 800bd84 <_dtoa_r+0x5c>
 800bd6c:	685a      	ldr	r2, [r3, #4]
 800bd6e:	604a      	str	r2, [r1, #4]
 800bd70:	2301      	movs	r3, #1
 800bd72:	4093      	lsls	r3, r2
 800bd74:	608b      	str	r3, [r1, #8]
 800bd76:	4658      	mov	r0, fp
 800bd78:	f000 feda 	bl	800cb30 <_Bfree>
 800bd7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd80:	2200      	movs	r2, #0
 800bd82:	601a      	str	r2, [r3, #0]
 800bd84:	1e2b      	subs	r3, r5, #0
 800bd86:	bfb9      	ittee	lt
 800bd88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd8c:	9303      	strlt	r3, [sp, #12]
 800bd8e:	2300      	movge	r3, #0
 800bd90:	6033      	strge	r3, [r6, #0]
 800bd92:	9f03      	ldr	r7, [sp, #12]
 800bd94:	4b98      	ldr	r3, [pc, #608]	@ (800bff8 <_dtoa_r+0x2d0>)
 800bd96:	bfbc      	itt	lt
 800bd98:	2201      	movlt	r2, #1
 800bd9a:	6032      	strlt	r2, [r6, #0]
 800bd9c:	43bb      	bics	r3, r7
 800bd9e:	d112      	bne.n	800bdc6 <_dtoa_r+0x9e>
 800bda0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bda2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdac:	4323      	orrs	r3, r4
 800bdae:	f000 854d 	beq.w	800c84c <_dtoa_r+0xb24>
 800bdb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c00c <_dtoa_r+0x2e4>
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 854f 	beq.w	800c85c <_dtoa_r+0xb34>
 800bdbe:	f10a 0303 	add.w	r3, sl, #3
 800bdc2:	f000 bd49 	b.w	800c858 <_dtoa_r+0xb30>
 800bdc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	ec51 0b17 	vmov	r0, r1, d7
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bdd6:	f7f4 fea7 	bl	8000b28 <__aeabi_dcmpeq>
 800bdda:	4680      	mov	r8, r0
 800bddc:	b158      	cbz	r0, 800bdf6 <_dtoa_r+0xce>
 800bdde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bde0:	2301      	movs	r3, #1
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bde6:	b113      	cbz	r3, 800bdee <_dtoa_r+0xc6>
 800bde8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bdea:	4b84      	ldr	r3, [pc, #528]	@ (800bffc <_dtoa_r+0x2d4>)
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c010 <_dtoa_r+0x2e8>
 800bdf2:	f000 bd33 	b.w	800c85c <_dtoa_r+0xb34>
 800bdf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bdfa:	aa16      	add	r2, sp, #88	@ 0x58
 800bdfc:	a917      	add	r1, sp, #92	@ 0x5c
 800bdfe:	4658      	mov	r0, fp
 800be00:	f001 fa3a 	bl	800d278 <__d2b>
 800be04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800be08:	4681      	mov	r9, r0
 800be0a:	2e00      	cmp	r6, #0
 800be0c:	d077      	beq.n	800befe <_dtoa_r+0x1d6>
 800be0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800be14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be28:	4619      	mov	r1, r3
 800be2a:	2200      	movs	r2, #0
 800be2c:	4b74      	ldr	r3, [pc, #464]	@ (800c000 <_dtoa_r+0x2d8>)
 800be2e:	f7f4 fa5b 	bl	80002e8 <__aeabi_dsub>
 800be32:	a369      	add	r3, pc, #420	@ (adr r3, 800bfd8 <_dtoa_r+0x2b0>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f7f4 fc0e 	bl	8000658 <__aeabi_dmul>
 800be3c:	a368      	add	r3, pc, #416	@ (adr r3, 800bfe0 <_dtoa_r+0x2b8>)
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f7f4 fa53 	bl	80002ec <__adddf3>
 800be46:	4604      	mov	r4, r0
 800be48:	4630      	mov	r0, r6
 800be4a:	460d      	mov	r5, r1
 800be4c:	f7f4 fb9a 	bl	8000584 <__aeabi_i2d>
 800be50:	a365      	add	r3, pc, #404	@ (adr r3, 800bfe8 <_dtoa_r+0x2c0>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 fbff 	bl	8000658 <__aeabi_dmul>
 800be5a:	4602      	mov	r2, r0
 800be5c:	460b      	mov	r3, r1
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	f7f4 fa43 	bl	80002ec <__adddf3>
 800be66:	4604      	mov	r4, r0
 800be68:	460d      	mov	r5, r1
 800be6a:	f7f4 fea5 	bl	8000bb8 <__aeabi_d2iz>
 800be6e:	2200      	movs	r2, #0
 800be70:	4607      	mov	r7, r0
 800be72:	2300      	movs	r3, #0
 800be74:	4620      	mov	r0, r4
 800be76:	4629      	mov	r1, r5
 800be78:	f7f4 fe60 	bl	8000b3c <__aeabi_dcmplt>
 800be7c:	b140      	cbz	r0, 800be90 <_dtoa_r+0x168>
 800be7e:	4638      	mov	r0, r7
 800be80:	f7f4 fb80 	bl	8000584 <__aeabi_i2d>
 800be84:	4622      	mov	r2, r4
 800be86:	462b      	mov	r3, r5
 800be88:	f7f4 fe4e 	bl	8000b28 <__aeabi_dcmpeq>
 800be8c:	b900      	cbnz	r0, 800be90 <_dtoa_r+0x168>
 800be8e:	3f01      	subs	r7, #1
 800be90:	2f16      	cmp	r7, #22
 800be92:	d851      	bhi.n	800bf38 <_dtoa_r+0x210>
 800be94:	4b5b      	ldr	r3, [pc, #364]	@ (800c004 <_dtoa_r+0x2dc>)
 800be96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bea2:	f7f4 fe4b 	bl	8000b3c <__aeabi_dcmplt>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d048      	beq.n	800bf3c <_dtoa_r+0x214>
 800beaa:	3f01      	subs	r7, #1
 800beac:	2300      	movs	r3, #0
 800beae:	9312      	str	r3, [sp, #72]	@ 0x48
 800beb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800beb2:	1b9b      	subs	r3, r3, r6
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	bf44      	itt	mi
 800beb8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bebc:	2300      	movmi	r3, #0
 800bebe:	9208      	str	r2, [sp, #32]
 800bec0:	bf54      	ite	pl
 800bec2:	f04f 0800 	movpl.w	r8, #0
 800bec6:	9308      	strmi	r3, [sp, #32]
 800bec8:	2f00      	cmp	r7, #0
 800beca:	db39      	blt.n	800bf40 <_dtoa_r+0x218>
 800becc:	9b08      	ldr	r3, [sp, #32]
 800bece:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bed0:	443b      	add	r3, r7
 800bed2:	9308      	str	r3, [sp, #32]
 800bed4:	2300      	movs	r3, #0
 800bed6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beda:	2b09      	cmp	r3, #9
 800bedc:	d864      	bhi.n	800bfa8 <_dtoa_r+0x280>
 800bede:	2b05      	cmp	r3, #5
 800bee0:	bfc4      	itt	gt
 800bee2:	3b04      	subgt	r3, #4
 800bee4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee8:	f1a3 0302 	sub.w	r3, r3, #2
 800beec:	bfcc      	ite	gt
 800beee:	2400      	movgt	r4, #0
 800bef0:	2401      	movle	r4, #1
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d863      	bhi.n	800bfbe <_dtoa_r+0x296>
 800bef6:	e8df f003 	tbb	[pc, r3]
 800befa:	372a      	.short	0x372a
 800befc:	5535      	.short	0x5535
 800befe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bf02:	441e      	add	r6, r3
 800bf04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bf08:	2b20      	cmp	r3, #32
 800bf0a:	bfc1      	itttt	gt
 800bf0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf10:	409f      	lslgt	r7, r3
 800bf12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf16:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf1a:	bfd6      	itet	le
 800bf1c:	f1c3 0320 	rsble	r3, r3, #32
 800bf20:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf24:	fa04 f003 	lslle.w	r0, r4, r3
 800bf28:	f7f4 fb1c 	bl	8000564 <__aeabi_ui2d>
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf32:	3e01      	subs	r6, #1
 800bf34:	9214      	str	r2, [sp, #80]	@ 0x50
 800bf36:	e777      	b.n	800be28 <_dtoa_r+0x100>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e7b8      	b.n	800beae <_dtoa_r+0x186>
 800bf3c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bf3e:	e7b7      	b.n	800beb0 <_dtoa_r+0x188>
 800bf40:	427b      	negs	r3, r7
 800bf42:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf44:	2300      	movs	r3, #0
 800bf46:	eba8 0807 	sub.w	r8, r8, r7
 800bf4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf4c:	e7c4      	b.n	800bed8 <_dtoa_r+0x1b0>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dc35      	bgt.n	800bfc4 <_dtoa_r+0x29c>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	9307      	str	r3, [sp, #28]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf62:	e00b      	b.n	800bf7c <_dtoa_r+0x254>
 800bf64:	2301      	movs	r3, #1
 800bf66:	e7f3      	b.n	800bf50 <_dtoa_r+0x228>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf6e:	18fb      	adds	r3, r7, r3
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	3301      	adds	r3, #1
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	9307      	str	r3, [sp, #28]
 800bf78:	bfb8      	it	lt
 800bf7a:	2301      	movlt	r3, #1
 800bf7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf80:	2100      	movs	r1, #0
 800bf82:	2204      	movs	r2, #4
 800bf84:	f102 0514 	add.w	r5, r2, #20
 800bf88:	429d      	cmp	r5, r3
 800bf8a:	d91f      	bls.n	800bfcc <_dtoa_r+0x2a4>
 800bf8c:	6041      	str	r1, [r0, #4]
 800bf8e:	4658      	mov	r0, fp
 800bf90:	f000 fd8e 	bl	800cab0 <_Balloc>
 800bf94:	4682      	mov	sl, r0
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d13c      	bne.n	800c014 <_dtoa_r+0x2ec>
 800bf9a:	4b1b      	ldr	r3, [pc, #108]	@ (800c008 <_dtoa_r+0x2e0>)
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	f240 11af 	movw	r1, #431	@ 0x1af
 800bfa2:	e6d8      	b.n	800bd56 <_dtoa_r+0x2e>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e7e0      	b.n	800bf6a <_dtoa_r+0x242>
 800bfa8:	2401      	movs	r4, #1
 800bfaa:	2300      	movs	r3, #0
 800bfac:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	9307      	str	r3, [sp, #28]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2312      	movs	r3, #18
 800bfbc:	e7d0      	b.n	800bf60 <_dtoa_r+0x238>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfc2:	e7f5      	b.n	800bfb0 <_dtoa_r+0x288>
 800bfc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	9307      	str	r3, [sp, #28]
 800bfca:	e7d7      	b.n	800bf7c <_dtoa_r+0x254>
 800bfcc:	3101      	adds	r1, #1
 800bfce:	0052      	lsls	r2, r2, #1
 800bfd0:	e7d8      	b.n	800bf84 <_dtoa_r+0x25c>
 800bfd2:	bf00      	nop
 800bfd4:	f3af 8000 	nop.w
 800bfd8:	636f4361 	.word	0x636f4361
 800bfdc:	3fd287a7 	.word	0x3fd287a7
 800bfe0:	8b60c8b3 	.word	0x8b60c8b3
 800bfe4:	3fc68a28 	.word	0x3fc68a28
 800bfe8:	509f79fb 	.word	0x509f79fb
 800bfec:	3fd34413 	.word	0x3fd34413
 800bff0:	0800f606 	.word	0x0800f606
 800bff4:	0800f61d 	.word	0x0800f61d
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	0800f5d1 	.word	0x0800f5d1
 800c000:	3ff80000 	.word	0x3ff80000
 800c004:	0800f718 	.word	0x0800f718
 800c008:	0800f675 	.word	0x0800f675
 800c00c:	0800f602 	.word	0x0800f602
 800c010:	0800f5d0 	.word	0x0800f5d0
 800c014:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c018:	6018      	str	r0, [r3, #0]
 800c01a:	9b07      	ldr	r3, [sp, #28]
 800c01c:	2b0e      	cmp	r3, #14
 800c01e:	f200 80a4 	bhi.w	800c16a <_dtoa_r+0x442>
 800c022:	2c00      	cmp	r4, #0
 800c024:	f000 80a1 	beq.w	800c16a <_dtoa_r+0x442>
 800c028:	2f00      	cmp	r7, #0
 800c02a:	dd33      	ble.n	800c094 <_dtoa_r+0x36c>
 800c02c:	4bad      	ldr	r3, [pc, #692]	@ (800c2e4 <_dtoa_r+0x5bc>)
 800c02e:	f007 020f 	and.w	r2, r7, #15
 800c032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c036:	ed93 7b00 	vldr	d7, [r3]
 800c03a:	05f8      	lsls	r0, r7, #23
 800c03c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c040:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c044:	d516      	bpl.n	800c074 <_dtoa_r+0x34c>
 800c046:	4ba8      	ldr	r3, [pc, #672]	@ (800c2e8 <_dtoa_r+0x5c0>)
 800c048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c050:	f7f4 fc2c 	bl	80008ac <__aeabi_ddiv>
 800c054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c058:	f004 040f 	and.w	r4, r4, #15
 800c05c:	2603      	movs	r6, #3
 800c05e:	4da2      	ldr	r5, [pc, #648]	@ (800c2e8 <_dtoa_r+0x5c0>)
 800c060:	b954      	cbnz	r4, 800c078 <_dtoa_r+0x350>
 800c062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06a:	f7f4 fc1f 	bl	80008ac <__aeabi_ddiv>
 800c06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c072:	e028      	b.n	800c0c6 <_dtoa_r+0x39e>
 800c074:	2602      	movs	r6, #2
 800c076:	e7f2      	b.n	800c05e <_dtoa_r+0x336>
 800c078:	07e1      	lsls	r1, r4, #31
 800c07a:	d508      	bpl.n	800c08e <_dtoa_r+0x366>
 800c07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c080:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c084:	f7f4 fae8 	bl	8000658 <__aeabi_dmul>
 800c088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c08c:	3601      	adds	r6, #1
 800c08e:	1064      	asrs	r4, r4, #1
 800c090:	3508      	adds	r5, #8
 800c092:	e7e5      	b.n	800c060 <_dtoa_r+0x338>
 800c094:	f000 80d2 	beq.w	800c23c <_dtoa_r+0x514>
 800c098:	427c      	negs	r4, r7
 800c09a:	4b92      	ldr	r3, [pc, #584]	@ (800c2e4 <_dtoa_r+0x5bc>)
 800c09c:	4d92      	ldr	r5, [pc, #584]	@ (800c2e8 <_dtoa_r+0x5c0>)
 800c09e:	f004 020f 	and.w	r2, r4, #15
 800c0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0ae:	f7f4 fad3 	bl	8000658 <__aeabi_dmul>
 800c0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b6:	1124      	asrs	r4, r4, #4
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2602      	movs	r6, #2
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	f040 80b2 	bne.w	800c226 <_dtoa_r+0x4fe>
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1d3      	bne.n	800c06e <_dtoa_r+0x346>
 800c0c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c0c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 80b7 	beq.w	800c240 <_dtoa_r+0x518>
 800c0d2:	4b86      	ldr	r3, [pc, #536]	@ (800c2ec <_dtoa_r+0x5c4>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f7f4 fd2f 	bl	8000b3c <__aeabi_dcmplt>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f000 80ae 	beq.w	800c240 <_dtoa_r+0x518>
 800c0e4:	9b07      	ldr	r3, [sp, #28]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 80aa 	beq.w	800c240 <_dtoa_r+0x518>
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	dd37      	ble.n	800c162 <_dtoa_r+0x43a>
 800c0f2:	1e7b      	subs	r3, r7, #1
 800c0f4:	9304      	str	r3, [sp, #16]
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	4b7d      	ldr	r3, [pc, #500]	@ (800c2f0 <_dtoa_r+0x5c8>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	f7f4 faab 	bl	8000658 <__aeabi_dmul>
 800c102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c106:	9c00      	ldr	r4, [sp, #0]
 800c108:	3601      	adds	r6, #1
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7f4 fa3a 	bl	8000584 <__aeabi_i2d>
 800c110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c114:	f7f4 faa0 	bl	8000658 <__aeabi_dmul>
 800c118:	4b76      	ldr	r3, [pc, #472]	@ (800c2f4 <_dtoa_r+0x5cc>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	f7f4 f8e6 	bl	80002ec <__adddf3>
 800c120:	4605      	mov	r5, r0
 800c122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c126:	2c00      	cmp	r4, #0
 800c128:	f040 808d 	bne.w	800c246 <_dtoa_r+0x51e>
 800c12c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c130:	4b71      	ldr	r3, [pc, #452]	@ (800c2f8 <_dtoa_r+0x5d0>)
 800c132:	2200      	movs	r2, #0
 800c134:	f7f4 f8d8 	bl	80002e8 <__aeabi_dsub>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c140:	462a      	mov	r2, r5
 800c142:	4633      	mov	r3, r6
 800c144:	f7f4 fd18 	bl	8000b78 <__aeabi_dcmpgt>
 800c148:	2800      	cmp	r0, #0
 800c14a:	f040 828b 	bne.w	800c664 <_dtoa_r+0x93c>
 800c14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c152:	462a      	mov	r2, r5
 800c154:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c158:	f7f4 fcf0 	bl	8000b3c <__aeabi_dcmplt>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f040 8128 	bne.w	800c3b2 <_dtoa_r+0x68a>
 800c162:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c166:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c16a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f2c0 815a 	blt.w	800c426 <_dtoa_r+0x6fe>
 800c172:	2f0e      	cmp	r7, #14
 800c174:	f300 8157 	bgt.w	800c426 <_dtoa_r+0x6fe>
 800c178:	4b5a      	ldr	r3, [pc, #360]	@ (800c2e4 <_dtoa_r+0x5bc>)
 800c17a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c17e:	ed93 7b00 	vldr	d7, [r3]
 800c182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c184:	2b00      	cmp	r3, #0
 800c186:	ed8d 7b00 	vstr	d7, [sp]
 800c18a:	da03      	bge.n	800c194 <_dtoa_r+0x46c>
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f340 8101 	ble.w	800c396 <_dtoa_r+0x66e>
 800c194:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c198:	4656      	mov	r6, sl
 800c19a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 fb83 	bl	80008ac <__aeabi_ddiv>
 800c1a6:	f7f4 fd07 	bl	8000bb8 <__aeabi_d2iz>
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	f7f4 f9ea 	bl	8000584 <__aeabi_i2d>
 800c1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1b4:	f7f4 fa50 	bl	8000658 <__aeabi_dmul>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c1c4:	f7f4 f890 	bl	80002e8 <__aeabi_dsub>
 800c1c8:	f806 4b01 	strb.w	r4, [r6], #1
 800c1cc:	9d07      	ldr	r5, [sp, #28]
 800c1ce:	eba6 040a 	sub.w	r4, r6, sl
 800c1d2:	42a5      	cmp	r5, r4
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	f040 8117 	bne.w	800c40a <_dtoa_r+0x6e2>
 800c1dc:	f7f4 f886 	bl	80002ec <__adddf3>
 800c1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	f7f4 fcc6 	bl	8000b78 <__aeabi_dcmpgt>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	f040 80f9 	bne.w	800c3e4 <_dtoa_r+0x6bc>
 800c1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f4 fc95 	bl	8000b28 <__aeabi_dcmpeq>
 800c1fe:	b118      	cbz	r0, 800c208 <_dtoa_r+0x4e0>
 800c200:	f018 0f01 	tst.w	r8, #1
 800c204:	f040 80ee 	bne.w	800c3e4 <_dtoa_r+0x6bc>
 800c208:	4649      	mov	r1, r9
 800c20a:	4658      	mov	r0, fp
 800c20c:	f000 fc90 	bl	800cb30 <_Bfree>
 800c210:	2300      	movs	r3, #0
 800c212:	7033      	strb	r3, [r6, #0]
 800c214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c216:	3701      	adds	r7, #1
 800c218:	601f      	str	r7, [r3, #0]
 800c21a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 831d 	beq.w	800c85c <_dtoa_r+0xb34>
 800c222:	601e      	str	r6, [r3, #0]
 800c224:	e31a      	b.n	800c85c <_dtoa_r+0xb34>
 800c226:	07e2      	lsls	r2, r4, #31
 800c228:	d505      	bpl.n	800c236 <_dtoa_r+0x50e>
 800c22a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c22e:	f7f4 fa13 	bl	8000658 <__aeabi_dmul>
 800c232:	3601      	adds	r6, #1
 800c234:	2301      	movs	r3, #1
 800c236:	1064      	asrs	r4, r4, #1
 800c238:	3508      	adds	r5, #8
 800c23a:	e73f      	b.n	800c0bc <_dtoa_r+0x394>
 800c23c:	2602      	movs	r6, #2
 800c23e:	e742      	b.n	800c0c6 <_dtoa_r+0x39e>
 800c240:	9c07      	ldr	r4, [sp, #28]
 800c242:	9704      	str	r7, [sp, #16]
 800c244:	e761      	b.n	800c10a <_dtoa_r+0x3e2>
 800c246:	4b27      	ldr	r3, [pc, #156]	@ (800c2e4 <_dtoa_r+0x5bc>)
 800c248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c24a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c24e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c252:	4454      	add	r4, sl
 800c254:	2900      	cmp	r1, #0
 800c256:	d053      	beq.n	800c300 <_dtoa_r+0x5d8>
 800c258:	4928      	ldr	r1, [pc, #160]	@ (800c2fc <_dtoa_r+0x5d4>)
 800c25a:	2000      	movs	r0, #0
 800c25c:	f7f4 fb26 	bl	80008ac <__aeabi_ddiv>
 800c260:	4633      	mov	r3, r6
 800c262:	462a      	mov	r2, r5
 800c264:	f7f4 f840 	bl	80002e8 <__aeabi_dsub>
 800c268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c26c:	4656      	mov	r6, sl
 800c26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c272:	f7f4 fca1 	bl	8000bb8 <__aeabi_d2iz>
 800c276:	4605      	mov	r5, r0
 800c278:	f7f4 f984 	bl	8000584 <__aeabi_i2d>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c284:	f7f4 f830 	bl	80002e8 <__aeabi_dsub>
 800c288:	3530      	adds	r5, #48	@ 0x30
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c292:	f806 5b01 	strb.w	r5, [r6], #1
 800c296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c29a:	f7f4 fc4f 	bl	8000b3c <__aeabi_dcmplt>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d171      	bne.n	800c386 <_dtoa_r+0x65e>
 800c2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2a6:	4911      	ldr	r1, [pc, #68]	@ (800c2ec <_dtoa_r+0x5c4>)
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	f7f4 f81d 	bl	80002e8 <__aeabi_dsub>
 800c2ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2b2:	f7f4 fc43 	bl	8000b3c <__aeabi_dcmplt>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f040 8095 	bne.w	800c3e6 <_dtoa_r+0x6be>
 800c2bc:	42a6      	cmp	r6, r4
 800c2be:	f43f af50 	beq.w	800c162 <_dtoa_r+0x43a>
 800c2c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f0 <_dtoa_r+0x5c8>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f7f4 f9c5 	bl	8000658 <__aeabi_dmul>
 800c2ce:	4b08      	ldr	r3, [pc, #32]	@ (800c2f0 <_dtoa_r+0x5c8>)
 800c2d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2da:	f7f4 f9bd 	bl	8000658 <__aeabi_dmul>
 800c2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2e2:	e7c4      	b.n	800c26e <_dtoa_r+0x546>
 800c2e4:	0800f718 	.word	0x0800f718
 800c2e8:	0800f6f0 	.word	0x0800f6f0
 800c2ec:	3ff00000 	.word	0x3ff00000
 800c2f0:	40240000 	.word	0x40240000
 800c2f4:	401c0000 	.word	0x401c0000
 800c2f8:	40140000 	.word	0x40140000
 800c2fc:	3fe00000 	.word	0x3fe00000
 800c300:	4631      	mov	r1, r6
 800c302:	4628      	mov	r0, r5
 800c304:	f7f4 f9a8 	bl	8000658 <__aeabi_dmul>
 800c308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c30c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c30e:	4656      	mov	r6, sl
 800c310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c314:	f7f4 fc50 	bl	8000bb8 <__aeabi_d2iz>
 800c318:	4605      	mov	r5, r0
 800c31a:	f7f4 f933 	bl	8000584 <__aeabi_i2d>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c326:	f7f3 ffdf 	bl	80002e8 <__aeabi_dsub>
 800c32a:	3530      	adds	r5, #48	@ 0x30
 800c32c:	f806 5b01 	strb.w	r5, [r6], #1
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	42a6      	cmp	r6, r4
 800c336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c33a:	f04f 0200 	mov.w	r2, #0
 800c33e:	d124      	bne.n	800c38a <_dtoa_r+0x662>
 800c340:	4bac      	ldr	r3, [pc, #688]	@ (800c5f4 <_dtoa_r+0x8cc>)
 800c342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c346:	f7f3 ffd1 	bl	80002ec <__adddf3>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c352:	f7f4 fc11 	bl	8000b78 <__aeabi_dcmpgt>
 800c356:	2800      	cmp	r0, #0
 800c358:	d145      	bne.n	800c3e6 <_dtoa_r+0x6be>
 800c35a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c35e:	49a5      	ldr	r1, [pc, #660]	@ (800c5f4 <_dtoa_r+0x8cc>)
 800c360:	2000      	movs	r0, #0
 800c362:	f7f3 ffc1 	bl	80002e8 <__aeabi_dsub>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36e:	f7f4 fbe5 	bl	8000b3c <__aeabi_dcmplt>
 800c372:	2800      	cmp	r0, #0
 800c374:	f43f aef5 	beq.w	800c162 <_dtoa_r+0x43a>
 800c378:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c37a:	1e73      	subs	r3, r6, #1
 800c37c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c37e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c382:	2b30      	cmp	r3, #48	@ 0x30
 800c384:	d0f8      	beq.n	800c378 <_dtoa_r+0x650>
 800c386:	9f04      	ldr	r7, [sp, #16]
 800c388:	e73e      	b.n	800c208 <_dtoa_r+0x4e0>
 800c38a:	4b9b      	ldr	r3, [pc, #620]	@ (800c5f8 <_dtoa_r+0x8d0>)
 800c38c:	f7f4 f964 	bl	8000658 <__aeabi_dmul>
 800c390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c394:	e7bc      	b.n	800c310 <_dtoa_r+0x5e8>
 800c396:	d10c      	bne.n	800c3b2 <_dtoa_r+0x68a>
 800c398:	4b98      	ldr	r3, [pc, #608]	@ (800c5fc <_dtoa_r+0x8d4>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3a0:	f7f4 f95a 	bl	8000658 <__aeabi_dmul>
 800c3a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3a8:	f7f4 fbdc 	bl	8000b64 <__aeabi_dcmpge>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f000 8157 	beq.w	800c660 <_dtoa_r+0x938>
 800c3b2:	2400      	movs	r4, #0
 800c3b4:	4625      	mov	r5, r4
 800c3b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3b8:	43db      	mvns	r3, r3
 800c3ba:	9304      	str	r3, [sp, #16]
 800c3bc:	4656      	mov	r6, sl
 800c3be:	2700      	movs	r7, #0
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4658      	mov	r0, fp
 800c3c4:	f000 fbb4 	bl	800cb30 <_Bfree>
 800c3c8:	2d00      	cmp	r5, #0
 800c3ca:	d0dc      	beq.n	800c386 <_dtoa_r+0x65e>
 800c3cc:	b12f      	cbz	r7, 800c3da <_dtoa_r+0x6b2>
 800c3ce:	42af      	cmp	r7, r5
 800c3d0:	d003      	beq.n	800c3da <_dtoa_r+0x6b2>
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	4658      	mov	r0, fp
 800c3d6:	f000 fbab 	bl	800cb30 <_Bfree>
 800c3da:	4629      	mov	r1, r5
 800c3dc:	4658      	mov	r0, fp
 800c3de:	f000 fba7 	bl	800cb30 <_Bfree>
 800c3e2:	e7d0      	b.n	800c386 <_dtoa_r+0x65e>
 800c3e4:	9704      	str	r7, [sp, #16]
 800c3e6:	4633      	mov	r3, r6
 800c3e8:	461e      	mov	r6, r3
 800c3ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3ee:	2a39      	cmp	r2, #57	@ 0x39
 800c3f0:	d107      	bne.n	800c402 <_dtoa_r+0x6da>
 800c3f2:	459a      	cmp	sl, r3
 800c3f4:	d1f8      	bne.n	800c3e8 <_dtoa_r+0x6c0>
 800c3f6:	9a04      	ldr	r2, [sp, #16]
 800c3f8:	3201      	adds	r2, #1
 800c3fa:	9204      	str	r2, [sp, #16]
 800c3fc:	2230      	movs	r2, #48	@ 0x30
 800c3fe:	f88a 2000 	strb.w	r2, [sl]
 800c402:	781a      	ldrb	r2, [r3, #0]
 800c404:	3201      	adds	r2, #1
 800c406:	701a      	strb	r2, [r3, #0]
 800c408:	e7bd      	b.n	800c386 <_dtoa_r+0x65e>
 800c40a:	4b7b      	ldr	r3, [pc, #492]	@ (800c5f8 <_dtoa_r+0x8d0>)
 800c40c:	2200      	movs	r2, #0
 800c40e:	f7f4 f923 	bl	8000658 <__aeabi_dmul>
 800c412:	2200      	movs	r2, #0
 800c414:	2300      	movs	r3, #0
 800c416:	4604      	mov	r4, r0
 800c418:	460d      	mov	r5, r1
 800c41a:	f7f4 fb85 	bl	8000b28 <__aeabi_dcmpeq>
 800c41e:	2800      	cmp	r0, #0
 800c420:	f43f aebb 	beq.w	800c19a <_dtoa_r+0x472>
 800c424:	e6f0      	b.n	800c208 <_dtoa_r+0x4e0>
 800c426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c428:	2a00      	cmp	r2, #0
 800c42a:	f000 80db 	beq.w	800c5e4 <_dtoa_r+0x8bc>
 800c42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c430:	2a01      	cmp	r2, #1
 800c432:	f300 80bf 	bgt.w	800c5b4 <_dtoa_r+0x88c>
 800c436:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c438:	2a00      	cmp	r2, #0
 800c43a:	f000 80b7 	beq.w	800c5ac <_dtoa_r+0x884>
 800c43e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c442:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c444:	4646      	mov	r6, r8
 800c446:	9a08      	ldr	r2, [sp, #32]
 800c448:	2101      	movs	r1, #1
 800c44a:	441a      	add	r2, r3
 800c44c:	4658      	mov	r0, fp
 800c44e:	4498      	add	r8, r3
 800c450:	9208      	str	r2, [sp, #32]
 800c452:	f000 fc6b 	bl	800cd2c <__i2b>
 800c456:	4605      	mov	r5, r0
 800c458:	b15e      	cbz	r6, 800c472 <_dtoa_r+0x74a>
 800c45a:	9b08      	ldr	r3, [sp, #32]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dd08      	ble.n	800c472 <_dtoa_r+0x74a>
 800c460:	42b3      	cmp	r3, r6
 800c462:	9a08      	ldr	r2, [sp, #32]
 800c464:	bfa8      	it	ge
 800c466:	4633      	movge	r3, r6
 800c468:	eba8 0803 	sub.w	r8, r8, r3
 800c46c:	1af6      	subs	r6, r6, r3
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	9308      	str	r3, [sp, #32]
 800c472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c474:	b1f3      	cbz	r3, 800c4b4 <_dtoa_r+0x78c>
 800c476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 80b7 	beq.w	800c5ec <_dtoa_r+0x8c4>
 800c47e:	b18c      	cbz	r4, 800c4a4 <_dtoa_r+0x77c>
 800c480:	4629      	mov	r1, r5
 800c482:	4622      	mov	r2, r4
 800c484:	4658      	mov	r0, fp
 800c486:	f000 fd11 	bl	800ceac <__pow5mult>
 800c48a:	464a      	mov	r2, r9
 800c48c:	4601      	mov	r1, r0
 800c48e:	4605      	mov	r5, r0
 800c490:	4658      	mov	r0, fp
 800c492:	f000 fc61 	bl	800cd58 <__multiply>
 800c496:	4649      	mov	r1, r9
 800c498:	9004      	str	r0, [sp, #16]
 800c49a:	4658      	mov	r0, fp
 800c49c:	f000 fb48 	bl	800cb30 <_Bfree>
 800c4a0:	9b04      	ldr	r3, [sp, #16]
 800c4a2:	4699      	mov	r9, r3
 800c4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4a6:	1b1a      	subs	r2, r3, r4
 800c4a8:	d004      	beq.n	800c4b4 <_dtoa_r+0x78c>
 800c4aa:	4649      	mov	r1, r9
 800c4ac:	4658      	mov	r0, fp
 800c4ae:	f000 fcfd 	bl	800ceac <__pow5mult>
 800c4b2:	4681      	mov	r9, r0
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4658      	mov	r0, fp
 800c4b8:	f000 fc38 	bl	800cd2c <__i2b>
 800c4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4be:	4604      	mov	r4, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 81cf 	beq.w	800c864 <_dtoa_r+0xb3c>
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4601      	mov	r1, r0
 800c4ca:	4658      	mov	r0, fp
 800c4cc:	f000 fcee 	bl	800ceac <__pow5mult>
 800c4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	f300 8095 	bgt.w	800c604 <_dtoa_r+0x8dc>
 800c4da:	9b02      	ldr	r3, [sp, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f040 8087 	bne.w	800c5f0 <_dtoa_r+0x8c8>
 800c4e2:	9b03      	ldr	r3, [sp, #12]
 800c4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f040 8089 	bne.w	800c600 <_dtoa_r+0x8d8>
 800c4ee:	9b03      	ldr	r3, [sp, #12]
 800c4f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4f4:	0d1b      	lsrs	r3, r3, #20
 800c4f6:	051b      	lsls	r3, r3, #20
 800c4f8:	b12b      	cbz	r3, 800c506 <_dtoa_r+0x7de>
 800c4fa:	9b08      	ldr	r3, [sp, #32]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	9308      	str	r3, [sp, #32]
 800c500:	f108 0801 	add.w	r8, r8, #1
 800c504:	2301      	movs	r3, #1
 800c506:	930a      	str	r3, [sp, #40]	@ 0x28
 800c508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 81b0 	beq.w	800c870 <_dtoa_r+0xb48>
 800c510:	6923      	ldr	r3, [r4, #16]
 800c512:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c516:	6918      	ldr	r0, [r3, #16]
 800c518:	f000 fbbc 	bl	800cc94 <__hi0bits>
 800c51c:	f1c0 0020 	rsb	r0, r0, #32
 800c520:	9b08      	ldr	r3, [sp, #32]
 800c522:	4418      	add	r0, r3
 800c524:	f010 001f 	ands.w	r0, r0, #31
 800c528:	d077      	beq.n	800c61a <_dtoa_r+0x8f2>
 800c52a:	f1c0 0320 	rsb	r3, r0, #32
 800c52e:	2b04      	cmp	r3, #4
 800c530:	dd6b      	ble.n	800c60a <_dtoa_r+0x8e2>
 800c532:	9b08      	ldr	r3, [sp, #32]
 800c534:	f1c0 001c 	rsb	r0, r0, #28
 800c538:	4403      	add	r3, r0
 800c53a:	4480      	add	r8, r0
 800c53c:	4406      	add	r6, r0
 800c53e:	9308      	str	r3, [sp, #32]
 800c540:	f1b8 0f00 	cmp.w	r8, #0
 800c544:	dd05      	ble.n	800c552 <_dtoa_r+0x82a>
 800c546:	4649      	mov	r1, r9
 800c548:	4642      	mov	r2, r8
 800c54a:	4658      	mov	r0, fp
 800c54c:	f000 fd08 	bl	800cf60 <__lshift>
 800c550:	4681      	mov	r9, r0
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	2b00      	cmp	r3, #0
 800c556:	dd05      	ble.n	800c564 <_dtoa_r+0x83c>
 800c558:	4621      	mov	r1, r4
 800c55a:	461a      	mov	r2, r3
 800c55c:	4658      	mov	r0, fp
 800c55e:	f000 fcff 	bl	800cf60 <__lshift>
 800c562:	4604      	mov	r4, r0
 800c564:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c566:	2b00      	cmp	r3, #0
 800c568:	d059      	beq.n	800c61e <_dtoa_r+0x8f6>
 800c56a:	4621      	mov	r1, r4
 800c56c:	4648      	mov	r0, r9
 800c56e:	f000 fd63 	bl	800d038 <__mcmp>
 800c572:	2800      	cmp	r0, #0
 800c574:	da53      	bge.n	800c61e <_dtoa_r+0x8f6>
 800c576:	1e7b      	subs	r3, r7, #1
 800c578:	9304      	str	r3, [sp, #16]
 800c57a:	4649      	mov	r1, r9
 800c57c:	2300      	movs	r3, #0
 800c57e:	220a      	movs	r2, #10
 800c580:	4658      	mov	r0, fp
 800c582:	f000 faf7 	bl	800cb74 <__multadd>
 800c586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c588:	4681      	mov	r9, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f000 8172 	beq.w	800c874 <_dtoa_r+0xb4c>
 800c590:	2300      	movs	r3, #0
 800c592:	4629      	mov	r1, r5
 800c594:	220a      	movs	r2, #10
 800c596:	4658      	mov	r0, fp
 800c598:	f000 faec 	bl	800cb74 <__multadd>
 800c59c:	9b00      	ldr	r3, [sp, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	dc67      	bgt.n	800c674 <_dtoa_r+0x94c>
 800c5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	dc41      	bgt.n	800c62e <_dtoa_r+0x906>
 800c5aa:	e063      	b.n	800c674 <_dtoa_r+0x94c>
 800c5ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c5ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c5b2:	e746      	b.n	800c442 <_dtoa_r+0x71a>
 800c5b4:	9b07      	ldr	r3, [sp, #28]
 800c5b6:	1e5c      	subs	r4, r3, #1
 800c5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ba:	42a3      	cmp	r3, r4
 800c5bc:	bfbf      	itttt	lt
 800c5be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c5c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c5c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c5c4:	1ae3      	sublt	r3, r4, r3
 800c5c6:	bfb4      	ite	lt
 800c5c8:	18d2      	addlt	r2, r2, r3
 800c5ca:	1b1c      	subge	r4, r3, r4
 800c5cc:	9b07      	ldr	r3, [sp, #28]
 800c5ce:	bfbc      	itt	lt
 800c5d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c5d2:	2400      	movlt	r4, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bfb5      	itete	lt
 800c5d8:	eba8 0603 	sublt.w	r6, r8, r3
 800c5dc:	9b07      	ldrge	r3, [sp, #28]
 800c5de:	2300      	movlt	r3, #0
 800c5e0:	4646      	movge	r6, r8
 800c5e2:	e730      	b.n	800c446 <_dtoa_r+0x71e>
 800c5e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c5e8:	4646      	mov	r6, r8
 800c5ea:	e735      	b.n	800c458 <_dtoa_r+0x730>
 800c5ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5ee:	e75c      	b.n	800c4aa <_dtoa_r+0x782>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e788      	b.n	800c506 <_dtoa_r+0x7de>
 800c5f4:	3fe00000 	.word	0x3fe00000
 800c5f8:	40240000 	.word	0x40240000
 800c5fc:	40140000 	.word	0x40140000
 800c600:	9b02      	ldr	r3, [sp, #8]
 800c602:	e780      	b.n	800c506 <_dtoa_r+0x7de>
 800c604:	2300      	movs	r3, #0
 800c606:	930a      	str	r3, [sp, #40]	@ 0x28
 800c608:	e782      	b.n	800c510 <_dtoa_r+0x7e8>
 800c60a:	d099      	beq.n	800c540 <_dtoa_r+0x818>
 800c60c:	9a08      	ldr	r2, [sp, #32]
 800c60e:	331c      	adds	r3, #28
 800c610:	441a      	add	r2, r3
 800c612:	4498      	add	r8, r3
 800c614:	441e      	add	r6, r3
 800c616:	9208      	str	r2, [sp, #32]
 800c618:	e792      	b.n	800c540 <_dtoa_r+0x818>
 800c61a:	4603      	mov	r3, r0
 800c61c:	e7f6      	b.n	800c60c <_dtoa_r+0x8e4>
 800c61e:	9b07      	ldr	r3, [sp, #28]
 800c620:	9704      	str	r7, [sp, #16]
 800c622:	2b00      	cmp	r3, #0
 800c624:	dc20      	bgt.n	800c668 <_dtoa_r+0x940>
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	dd1e      	ble.n	800c66c <_dtoa_r+0x944>
 800c62e:	9b00      	ldr	r3, [sp, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f47f aec0 	bne.w	800c3b6 <_dtoa_r+0x68e>
 800c636:	4621      	mov	r1, r4
 800c638:	2205      	movs	r2, #5
 800c63a:	4658      	mov	r0, fp
 800c63c:	f000 fa9a 	bl	800cb74 <__multadd>
 800c640:	4601      	mov	r1, r0
 800c642:	4604      	mov	r4, r0
 800c644:	4648      	mov	r0, r9
 800c646:	f000 fcf7 	bl	800d038 <__mcmp>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	f77f aeb3 	ble.w	800c3b6 <_dtoa_r+0x68e>
 800c650:	4656      	mov	r6, sl
 800c652:	2331      	movs	r3, #49	@ 0x31
 800c654:	f806 3b01 	strb.w	r3, [r6], #1
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	3301      	adds	r3, #1
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	e6ae      	b.n	800c3be <_dtoa_r+0x696>
 800c660:	9c07      	ldr	r4, [sp, #28]
 800c662:	9704      	str	r7, [sp, #16]
 800c664:	4625      	mov	r5, r4
 800c666:	e7f3      	b.n	800c650 <_dtoa_r+0x928>
 800c668:	9b07      	ldr	r3, [sp, #28]
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 8104 	beq.w	800c87c <_dtoa_r+0xb54>
 800c674:	2e00      	cmp	r6, #0
 800c676:	dd05      	ble.n	800c684 <_dtoa_r+0x95c>
 800c678:	4629      	mov	r1, r5
 800c67a:	4632      	mov	r2, r6
 800c67c:	4658      	mov	r0, fp
 800c67e:	f000 fc6f 	bl	800cf60 <__lshift>
 800c682:	4605      	mov	r5, r0
 800c684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c686:	2b00      	cmp	r3, #0
 800c688:	d05a      	beq.n	800c740 <_dtoa_r+0xa18>
 800c68a:	6869      	ldr	r1, [r5, #4]
 800c68c:	4658      	mov	r0, fp
 800c68e:	f000 fa0f 	bl	800cab0 <_Balloc>
 800c692:	4606      	mov	r6, r0
 800c694:	b928      	cbnz	r0, 800c6a2 <_dtoa_r+0x97a>
 800c696:	4b84      	ldr	r3, [pc, #528]	@ (800c8a8 <_dtoa_r+0xb80>)
 800c698:	4602      	mov	r2, r0
 800c69a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c69e:	f7ff bb5a 	b.w	800bd56 <_dtoa_r+0x2e>
 800c6a2:	692a      	ldr	r2, [r5, #16]
 800c6a4:	3202      	adds	r2, #2
 800c6a6:	0092      	lsls	r2, r2, #2
 800c6a8:	f105 010c 	add.w	r1, r5, #12
 800c6ac:	300c      	adds	r0, #12
 800c6ae:	f7ff fa9e 	bl	800bbee <memcpy>
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4658      	mov	r0, fp
 800c6b8:	f000 fc52 	bl	800cf60 <__lshift>
 800c6bc:	f10a 0301 	add.w	r3, sl, #1
 800c6c0:	9307      	str	r3, [sp, #28]
 800c6c2:	9b00      	ldr	r3, [sp, #0]
 800c6c4:	4453      	add	r3, sl
 800c6c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6c8:	9b02      	ldr	r3, [sp, #8]
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	462f      	mov	r7, r5
 800c6d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d2:	4605      	mov	r5, r0
 800c6d4:	9b07      	ldr	r3, [sp, #28]
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	4648      	mov	r0, r9
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	f7ff fa9b 	bl	800bc18 <quorem>
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	9002      	str	r0, [sp, #8]
 800c6e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6ea:	4648      	mov	r0, r9
 800c6ec:	f000 fca4 	bl	800d038 <__mcmp>
 800c6f0:	462a      	mov	r2, r5
 800c6f2:	9008      	str	r0, [sp, #32]
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4658      	mov	r0, fp
 800c6f8:	f000 fcba 	bl	800d070 <__mdiff>
 800c6fc:	68c2      	ldr	r2, [r0, #12]
 800c6fe:	4606      	mov	r6, r0
 800c700:	bb02      	cbnz	r2, 800c744 <_dtoa_r+0xa1c>
 800c702:	4601      	mov	r1, r0
 800c704:	4648      	mov	r0, r9
 800c706:	f000 fc97 	bl	800d038 <__mcmp>
 800c70a:	4602      	mov	r2, r0
 800c70c:	4631      	mov	r1, r6
 800c70e:	4658      	mov	r0, fp
 800c710:	920e      	str	r2, [sp, #56]	@ 0x38
 800c712:	f000 fa0d 	bl	800cb30 <_Bfree>
 800c716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c71a:	9e07      	ldr	r6, [sp, #28]
 800c71c:	ea43 0102 	orr.w	r1, r3, r2
 800c720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c722:	4319      	orrs	r1, r3
 800c724:	d110      	bne.n	800c748 <_dtoa_r+0xa20>
 800c726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c72a:	d029      	beq.n	800c780 <_dtoa_r+0xa58>
 800c72c:	9b08      	ldr	r3, [sp, #32]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	dd02      	ble.n	800c738 <_dtoa_r+0xa10>
 800c732:	9b02      	ldr	r3, [sp, #8]
 800c734:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c738:	9b00      	ldr	r3, [sp, #0]
 800c73a:	f883 8000 	strb.w	r8, [r3]
 800c73e:	e63f      	b.n	800c3c0 <_dtoa_r+0x698>
 800c740:	4628      	mov	r0, r5
 800c742:	e7bb      	b.n	800c6bc <_dtoa_r+0x994>
 800c744:	2201      	movs	r2, #1
 800c746:	e7e1      	b.n	800c70c <_dtoa_r+0x9e4>
 800c748:	9b08      	ldr	r3, [sp, #32]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	db04      	blt.n	800c758 <_dtoa_r+0xa30>
 800c74e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c750:	430b      	orrs	r3, r1
 800c752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c754:	430b      	orrs	r3, r1
 800c756:	d120      	bne.n	800c79a <_dtoa_r+0xa72>
 800c758:	2a00      	cmp	r2, #0
 800c75a:	dded      	ble.n	800c738 <_dtoa_r+0xa10>
 800c75c:	4649      	mov	r1, r9
 800c75e:	2201      	movs	r2, #1
 800c760:	4658      	mov	r0, fp
 800c762:	f000 fbfd 	bl	800cf60 <__lshift>
 800c766:	4621      	mov	r1, r4
 800c768:	4681      	mov	r9, r0
 800c76a:	f000 fc65 	bl	800d038 <__mcmp>
 800c76e:	2800      	cmp	r0, #0
 800c770:	dc03      	bgt.n	800c77a <_dtoa_r+0xa52>
 800c772:	d1e1      	bne.n	800c738 <_dtoa_r+0xa10>
 800c774:	f018 0f01 	tst.w	r8, #1
 800c778:	d0de      	beq.n	800c738 <_dtoa_r+0xa10>
 800c77a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c77e:	d1d8      	bne.n	800c732 <_dtoa_r+0xa0a>
 800c780:	9a00      	ldr	r2, [sp, #0]
 800c782:	2339      	movs	r3, #57	@ 0x39
 800c784:	7013      	strb	r3, [r2, #0]
 800c786:	4633      	mov	r3, r6
 800c788:	461e      	mov	r6, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c790:	2a39      	cmp	r2, #57	@ 0x39
 800c792:	d052      	beq.n	800c83a <_dtoa_r+0xb12>
 800c794:	3201      	adds	r2, #1
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	e612      	b.n	800c3c0 <_dtoa_r+0x698>
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	dd07      	ble.n	800c7ae <_dtoa_r+0xa86>
 800c79e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7a2:	d0ed      	beq.n	800c780 <_dtoa_r+0xa58>
 800c7a4:	9a00      	ldr	r2, [sp, #0]
 800c7a6:	f108 0301 	add.w	r3, r8, #1
 800c7aa:	7013      	strb	r3, [r2, #0]
 800c7ac:	e608      	b.n	800c3c0 <_dtoa_r+0x698>
 800c7ae:	9b07      	ldr	r3, [sp, #28]
 800c7b0:	9a07      	ldr	r2, [sp, #28]
 800c7b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d028      	beq.n	800c80e <_dtoa_r+0xae6>
 800c7bc:	4649      	mov	r1, r9
 800c7be:	2300      	movs	r3, #0
 800c7c0:	220a      	movs	r2, #10
 800c7c2:	4658      	mov	r0, fp
 800c7c4:	f000 f9d6 	bl	800cb74 <__multadd>
 800c7c8:	42af      	cmp	r7, r5
 800c7ca:	4681      	mov	r9, r0
 800c7cc:	f04f 0300 	mov.w	r3, #0
 800c7d0:	f04f 020a 	mov.w	r2, #10
 800c7d4:	4639      	mov	r1, r7
 800c7d6:	4658      	mov	r0, fp
 800c7d8:	d107      	bne.n	800c7ea <_dtoa_r+0xac2>
 800c7da:	f000 f9cb 	bl	800cb74 <__multadd>
 800c7de:	4607      	mov	r7, r0
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	9b07      	ldr	r3, [sp, #28]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	9307      	str	r3, [sp, #28]
 800c7e8:	e774      	b.n	800c6d4 <_dtoa_r+0x9ac>
 800c7ea:	f000 f9c3 	bl	800cb74 <__multadd>
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	4607      	mov	r7, r0
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	220a      	movs	r2, #10
 800c7f6:	4658      	mov	r0, fp
 800c7f8:	f000 f9bc 	bl	800cb74 <__multadd>
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	e7f0      	b.n	800c7e2 <_dtoa_r+0xaba>
 800c800:	9b00      	ldr	r3, [sp, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	bfcc      	ite	gt
 800c806:	461e      	movgt	r6, r3
 800c808:	2601      	movle	r6, #1
 800c80a:	4456      	add	r6, sl
 800c80c:	2700      	movs	r7, #0
 800c80e:	4649      	mov	r1, r9
 800c810:	2201      	movs	r2, #1
 800c812:	4658      	mov	r0, fp
 800c814:	f000 fba4 	bl	800cf60 <__lshift>
 800c818:	4621      	mov	r1, r4
 800c81a:	4681      	mov	r9, r0
 800c81c:	f000 fc0c 	bl	800d038 <__mcmp>
 800c820:	2800      	cmp	r0, #0
 800c822:	dcb0      	bgt.n	800c786 <_dtoa_r+0xa5e>
 800c824:	d102      	bne.n	800c82c <_dtoa_r+0xb04>
 800c826:	f018 0f01 	tst.w	r8, #1
 800c82a:	d1ac      	bne.n	800c786 <_dtoa_r+0xa5e>
 800c82c:	4633      	mov	r3, r6
 800c82e:	461e      	mov	r6, r3
 800c830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c834:	2a30      	cmp	r2, #48	@ 0x30
 800c836:	d0fa      	beq.n	800c82e <_dtoa_r+0xb06>
 800c838:	e5c2      	b.n	800c3c0 <_dtoa_r+0x698>
 800c83a:	459a      	cmp	sl, r3
 800c83c:	d1a4      	bne.n	800c788 <_dtoa_r+0xa60>
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	3301      	adds	r3, #1
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	2331      	movs	r3, #49	@ 0x31
 800c846:	f88a 3000 	strb.w	r3, [sl]
 800c84a:	e5b9      	b.n	800c3c0 <_dtoa_r+0x698>
 800c84c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c84e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c8ac <_dtoa_r+0xb84>
 800c852:	b11b      	cbz	r3, 800c85c <_dtoa_r+0xb34>
 800c854:	f10a 0308 	add.w	r3, sl, #8
 800c858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	4650      	mov	r0, sl
 800c85e:	b019      	add	sp, #100	@ 0x64
 800c860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c866:	2b01      	cmp	r3, #1
 800c868:	f77f ae37 	ble.w	800c4da <_dtoa_r+0x7b2>
 800c86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c870:	2001      	movs	r0, #1
 800c872:	e655      	b.n	800c520 <_dtoa_r+0x7f8>
 800c874:	9b00      	ldr	r3, [sp, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f77f aed6 	ble.w	800c628 <_dtoa_r+0x900>
 800c87c:	4656      	mov	r6, sl
 800c87e:	4621      	mov	r1, r4
 800c880:	4648      	mov	r0, r9
 800c882:	f7ff f9c9 	bl	800bc18 <quorem>
 800c886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c88a:	f806 8b01 	strb.w	r8, [r6], #1
 800c88e:	9b00      	ldr	r3, [sp, #0]
 800c890:	eba6 020a 	sub.w	r2, r6, sl
 800c894:	4293      	cmp	r3, r2
 800c896:	ddb3      	ble.n	800c800 <_dtoa_r+0xad8>
 800c898:	4649      	mov	r1, r9
 800c89a:	2300      	movs	r3, #0
 800c89c:	220a      	movs	r2, #10
 800c89e:	4658      	mov	r0, fp
 800c8a0:	f000 f968 	bl	800cb74 <__multadd>
 800c8a4:	4681      	mov	r9, r0
 800c8a6:	e7ea      	b.n	800c87e <_dtoa_r+0xb56>
 800c8a8:	0800f675 	.word	0x0800f675
 800c8ac:	0800f5f9 	.word	0x0800f5f9

0800c8b0 <_free_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d041      	beq.n	800c93c <_free_r+0x8c>
 800c8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8bc:	1f0c      	subs	r4, r1, #4
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfb8      	it	lt
 800c8c2:	18e4      	addlt	r4, r4, r3
 800c8c4:	f000 f8e8 	bl	800ca98 <__malloc_lock>
 800c8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c940 <_free_r+0x90>)
 800c8ca:	6813      	ldr	r3, [r2, #0]
 800c8cc:	b933      	cbnz	r3, 800c8dc <_free_r+0x2c>
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	6014      	str	r4, [r2, #0]
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d8:	f000 b8e4 	b.w	800caa4 <__malloc_unlock>
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	d908      	bls.n	800c8f2 <_free_r+0x42>
 800c8e0:	6820      	ldr	r0, [r4, #0]
 800c8e2:	1821      	adds	r1, r4, r0
 800c8e4:	428b      	cmp	r3, r1
 800c8e6:	bf01      	itttt	eq
 800c8e8:	6819      	ldreq	r1, [r3, #0]
 800c8ea:	685b      	ldreq	r3, [r3, #4]
 800c8ec:	1809      	addeq	r1, r1, r0
 800c8ee:	6021      	streq	r1, [r4, #0]
 800c8f0:	e7ed      	b.n	800c8ce <_free_r+0x1e>
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b10b      	cbz	r3, 800c8fc <_free_r+0x4c>
 800c8f8:	42a3      	cmp	r3, r4
 800c8fa:	d9fa      	bls.n	800c8f2 <_free_r+0x42>
 800c8fc:	6811      	ldr	r1, [r2, #0]
 800c8fe:	1850      	adds	r0, r2, r1
 800c900:	42a0      	cmp	r0, r4
 800c902:	d10b      	bne.n	800c91c <_free_r+0x6c>
 800c904:	6820      	ldr	r0, [r4, #0]
 800c906:	4401      	add	r1, r0
 800c908:	1850      	adds	r0, r2, r1
 800c90a:	4283      	cmp	r3, r0
 800c90c:	6011      	str	r1, [r2, #0]
 800c90e:	d1e0      	bne.n	800c8d2 <_free_r+0x22>
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	6053      	str	r3, [r2, #4]
 800c916:	4408      	add	r0, r1
 800c918:	6010      	str	r0, [r2, #0]
 800c91a:	e7da      	b.n	800c8d2 <_free_r+0x22>
 800c91c:	d902      	bls.n	800c924 <_free_r+0x74>
 800c91e:	230c      	movs	r3, #12
 800c920:	602b      	str	r3, [r5, #0]
 800c922:	e7d6      	b.n	800c8d2 <_free_r+0x22>
 800c924:	6820      	ldr	r0, [r4, #0]
 800c926:	1821      	adds	r1, r4, r0
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf04      	itt	eq
 800c92c:	6819      	ldreq	r1, [r3, #0]
 800c92e:	685b      	ldreq	r3, [r3, #4]
 800c930:	6063      	str	r3, [r4, #4]
 800c932:	bf04      	itt	eq
 800c934:	1809      	addeq	r1, r1, r0
 800c936:	6021      	streq	r1, [r4, #0]
 800c938:	6054      	str	r4, [r2, #4]
 800c93a:	e7ca      	b.n	800c8d2 <_free_r+0x22>
 800c93c:	bd38      	pop	{r3, r4, r5, pc}
 800c93e:	bf00      	nop
 800c940:	20005fe0 	.word	0x20005fe0

0800c944 <malloc>:
 800c944:	4b02      	ldr	r3, [pc, #8]	@ (800c950 <malloc+0xc>)
 800c946:	4601      	mov	r1, r0
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	f000 b825 	b.w	800c998 <_malloc_r>
 800c94e:	bf00      	nop
 800c950:	20000178 	.word	0x20000178

0800c954 <sbrk_aligned>:
 800c954:	b570      	push	{r4, r5, r6, lr}
 800c956:	4e0f      	ldr	r6, [pc, #60]	@ (800c994 <sbrk_aligned+0x40>)
 800c958:	460c      	mov	r4, r1
 800c95a:	6831      	ldr	r1, [r6, #0]
 800c95c:	4605      	mov	r5, r0
 800c95e:	b911      	cbnz	r1, 800c966 <sbrk_aligned+0x12>
 800c960:	f001 fe0c 	bl	800e57c <_sbrk_r>
 800c964:	6030      	str	r0, [r6, #0]
 800c966:	4621      	mov	r1, r4
 800c968:	4628      	mov	r0, r5
 800c96a:	f001 fe07 	bl	800e57c <_sbrk_r>
 800c96e:	1c43      	adds	r3, r0, #1
 800c970:	d103      	bne.n	800c97a <sbrk_aligned+0x26>
 800c972:	f04f 34ff 	mov.w	r4, #4294967295
 800c976:	4620      	mov	r0, r4
 800c978:	bd70      	pop	{r4, r5, r6, pc}
 800c97a:	1cc4      	adds	r4, r0, #3
 800c97c:	f024 0403 	bic.w	r4, r4, #3
 800c980:	42a0      	cmp	r0, r4
 800c982:	d0f8      	beq.n	800c976 <sbrk_aligned+0x22>
 800c984:	1a21      	subs	r1, r4, r0
 800c986:	4628      	mov	r0, r5
 800c988:	f001 fdf8 	bl	800e57c <_sbrk_r>
 800c98c:	3001      	adds	r0, #1
 800c98e:	d1f2      	bne.n	800c976 <sbrk_aligned+0x22>
 800c990:	e7ef      	b.n	800c972 <sbrk_aligned+0x1e>
 800c992:	bf00      	nop
 800c994:	20005fdc 	.word	0x20005fdc

0800c998 <_malloc_r>:
 800c998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c99c:	1ccd      	adds	r5, r1, #3
 800c99e:	f025 0503 	bic.w	r5, r5, #3
 800c9a2:	3508      	adds	r5, #8
 800c9a4:	2d0c      	cmp	r5, #12
 800c9a6:	bf38      	it	cc
 800c9a8:	250c      	movcc	r5, #12
 800c9aa:	2d00      	cmp	r5, #0
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	db01      	blt.n	800c9b4 <_malloc_r+0x1c>
 800c9b0:	42a9      	cmp	r1, r5
 800c9b2:	d904      	bls.n	800c9be <_malloc_r+0x26>
 800c9b4:	230c      	movs	r3, #12
 800c9b6:	6033      	str	r3, [r6, #0]
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca94 <_malloc_r+0xfc>
 800c9c2:	f000 f869 	bl	800ca98 <__malloc_lock>
 800c9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ca:	461c      	mov	r4, r3
 800c9cc:	bb44      	cbnz	r4, 800ca20 <_malloc_r+0x88>
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f7ff ffbf 	bl	800c954 <sbrk_aligned>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	4604      	mov	r4, r0
 800c9da:	d158      	bne.n	800ca8e <_malloc_r+0xf6>
 800c9dc:	f8d8 4000 	ldr.w	r4, [r8]
 800c9e0:	4627      	mov	r7, r4
 800c9e2:	2f00      	cmp	r7, #0
 800c9e4:	d143      	bne.n	800ca6e <_malloc_r+0xd6>
 800c9e6:	2c00      	cmp	r4, #0
 800c9e8:	d04b      	beq.n	800ca82 <_malloc_r+0xea>
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	4639      	mov	r1, r7
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	eb04 0903 	add.w	r9, r4, r3
 800c9f4:	f001 fdc2 	bl	800e57c <_sbrk_r>
 800c9f8:	4581      	cmp	r9, r0
 800c9fa:	d142      	bne.n	800ca82 <_malloc_r+0xea>
 800c9fc:	6821      	ldr	r1, [r4, #0]
 800c9fe:	1a6d      	subs	r5, r5, r1
 800ca00:	4629      	mov	r1, r5
 800ca02:	4630      	mov	r0, r6
 800ca04:	f7ff ffa6 	bl	800c954 <sbrk_aligned>
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d03a      	beq.n	800ca82 <_malloc_r+0xea>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	442b      	add	r3, r5
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	f8d8 3000 	ldr.w	r3, [r8]
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	bb62      	cbnz	r2, 800ca74 <_malloc_r+0xdc>
 800ca1a:	f8c8 7000 	str.w	r7, [r8]
 800ca1e:	e00f      	b.n	800ca40 <_malloc_r+0xa8>
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	1b52      	subs	r2, r2, r5
 800ca24:	d420      	bmi.n	800ca68 <_malloc_r+0xd0>
 800ca26:	2a0b      	cmp	r2, #11
 800ca28:	d917      	bls.n	800ca5a <_malloc_r+0xc2>
 800ca2a:	1961      	adds	r1, r4, r5
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	6025      	str	r5, [r4, #0]
 800ca30:	bf18      	it	ne
 800ca32:	6059      	strne	r1, [r3, #4]
 800ca34:	6863      	ldr	r3, [r4, #4]
 800ca36:	bf08      	it	eq
 800ca38:	f8c8 1000 	streq.w	r1, [r8]
 800ca3c:	5162      	str	r2, [r4, r5]
 800ca3e:	604b      	str	r3, [r1, #4]
 800ca40:	4630      	mov	r0, r6
 800ca42:	f000 f82f 	bl	800caa4 <__malloc_unlock>
 800ca46:	f104 000b 	add.w	r0, r4, #11
 800ca4a:	1d23      	adds	r3, r4, #4
 800ca4c:	f020 0007 	bic.w	r0, r0, #7
 800ca50:	1ac2      	subs	r2, r0, r3
 800ca52:	bf1c      	itt	ne
 800ca54:	1a1b      	subne	r3, r3, r0
 800ca56:	50a3      	strne	r3, [r4, r2]
 800ca58:	e7af      	b.n	800c9ba <_malloc_r+0x22>
 800ca5a:	6862      	ldr	r2, [r4, #4]
 800ca5c:	42a3      	cmp	r3, r4
 800ca5e:	bf0c      	ite	eq
 800ca60:	f8c8 2000 	streq.w	r2, [r8]
 800ca64:	605a      	strne	r2, [r3, #4]
 800ca66:	e7eb      	b.n	800ca40 <_malloc_r+0xa8>
 800ca68:	4623      	mov	r3, r4
 800ca6a:	6864      	ldr	r4, [r4, #4]
 800ca6c:	e7ae      	b.n	800c9cc <_malloc_r+0x34>
 800ca6e:	463c      	mov	r4, r7
 800ca70:	687f      	ldr	r7, [r7, #4]
 800ca72:	e7b6      	b.n	800c9e2 <_malloc_r+0x4a>
 800ca74:	461a      	mov	r2, r3
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	d1fb      	bne.n	800ca74 <_malloc_r+0xdc>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	6053      	str	r3, [r2, #4]
 800ca80:	e7de      	b.n	800ca40 <_malloc_r+0xa8>
 800ca82:	230c      	movs	r3, #12
 800ca84:	6033      	str	r3, [r6, #0]
 800ca86:	4630      	mov	r0, r6
 800ca88:	f000 f80c 	bl	800caa4 <__malloc_unlock>
 800ca8c:	e794      	b.n	800c9b8 <_malloc_r+0x20>
 800ca8e:	6005      	str	r5, [r0, #0]
 800ca90:	e7d6      	b.n	800ca40 <_malloc_r+0xa8>
 800ca92:	bf00      	nop
 800ca94:	20005fe0 	.word	0x20005fe0

0800ca98 <__malloc_lock>:
 800ca98:	4801      	ldr	r0, [pc, #4]	@ (800caa0 <__malloc_lock+0x8>)
 800ca9a:	f7ff b8a6 	b.w	800bbea <__retarget_lock_acquire_recursive>
 800ca9e:	bf00      	nop
 800caa0:	20005fd8 	.word	0x20005fd8

0800caa4 <__malloc_unlock>:
 800caa4:	4801      	ldr	r0, [pc, #4]	@ (800caac <__malloc_unlock+0x8>)
 800caa6:	f7ff b8a1 	b.w	800bbec <__retarget_lock_release_recursive>
 800caaa:	bf00      	nop
 800caac:	20005fd8 	.word	0x20005fd8

0800cab0 <_Balloc>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	69c6      	ldr	r6, [r0, #28]
 800cab4:	4604      	mov	r4, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	b976      	cbnz	r6, 800cad8 <_Balloc+0x28>
 800caba:	2010      	movs	r0, #16
 800cabc:	f7ff ff42 	bl	800c944 <malloc>
 800cac0:	4602      	mov	r2, r0
 800cac2:	61e0      	str	r0, [r4, #28]
 800cac4:	b920      	cbnz	r0, 800cad0 <_Balloc+0x20>
 800cac6:	4b18      	ldr	r3, [pc, #96]	@ (800cb28 <_Balloc+0x78>)
 800cac8:	4818      	ldr	r0, [pc, #96]	@ (800cb2c <_Balloc+0x7c>)
 800caca:	216b      	movs	r1, #107	@ 0x6b
 800cacc:	f001 fd70 	bl	800e5b0 <__assert_func>
 800cad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cad4:	6006      	str	r6, [r0, #0]
 800cad6:	60c6      	str	r6, [r0, #12]
 800cad8:	69e6      	ldr	r6, [r4, #28]
 800cada:	68f3      	ldr	r3, [r6, #12]
 800cadc:	b183      	cbz	r3, 800cb00 <_Balloc+0x50>
 800cade:	69e3      	ldr	r3, [r4, #28]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cae6:	b9b8      	cbnz	r0, 800cb18 <_Balloc+0x68>
 800cae8:	2101      	movs	r1, #1
 800caea:	fa01 f605 	lsl.w	r6, r1, r5
 800caee:	1d72      	adds	r2, r6, #5
 800caf0:	0092      	lsls	r2, r2, #2
 800caf2:	4620      	mov	r0, r4
 800caf4:	f001 fd7a 	bl	800e5ec <_calloc_r>
 800caf8:	b160      	cbz	r0, 800cb14 <_Balloc+0x64>
 800cafa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cafe:	e00e      	b.n	800cb1e <_Balloc+0x6e>
 800cb00:	2221      	movs	r2, #33	@ 0x21
 800cb02:	2104      	movs	r1, #4
 800cb04:	4620      	mov	r0, r4
 800cb06:	f001 fd71 	bl	800e5ec <_calloc_r>
 800cb0a:	69e3      	ldr	r3, [r4, #28]
 800cb0c:	60f0      	str	r0, [r6, #12]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e4      	bne.n	800cade <_Balloc+0x2e>
 800cb14:	2000      	movs	r0, #0
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	6802      	ldr	r2, [r0, #0]
 800cb1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb24:	e7f7      	b.n	800cb16 <_Balloc+0x66>
 800cb26:	bf00      	nop
 800cb28:	0800f606 	.word	0x0800f606
 800cb2c:	0800f686 	.word	0x0800f686

0800cb30 <_Bfree>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	69c6      	ldr	r6, [r0, #28]
 800cb34:	4605      	mov	r5, r0
 800cb36:	460c      	mov	r4, r1
 800cb38:	b976      	cbnz	r6, 800cb58 <_Bfree+0x28>
 800cb3a:	2010      	movs	r0, #16
 800cb3c:	f7ff ff02 	bl	800c944 <malloc>
 800cb40:	4602      	mov	r2, r0
 800cb42:	61e8      	str	r0, [r5, #28]
 800cb44:	b920      	cbnz	r0, 800cb50 <_Bfree+0x20>
 800cb46:	4b09      	ldr	r3, [pc, #36]	@ (800cb6c <_Bfree+0x3c>)
 800cb48:	4809      	ldr	r0, [pc, #36]	@ (800cb70 <_Bfree+0x40>)
 800cb4a:	218f      	movs	r1, #143	@ 0x8f
 800cb4c:	f001 fd30 	bl	800e5b0 <__assert_func>
 800cb50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb54:	6006      	str	r6, [r0, #0]
 800cb56:	60c6      	str	r6, [r0, #12]
 800cb58:	b13c      	cbz	r4, 800cb6a <_Bfree+0x3a>
 800cb5a:	69eb      	ldr	r3, [r5, #28]
 800cb5c:	6862      	ldr	r2, [r4, #4]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb64:	6021      	str	r1, [r4, #0]
 800cb66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	0800f606 	.word	0x0800f606
 800cb70:	0800f686 	.word	0x0800f686

0800cb74 <__multadd>:
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	690d      	ldr	r5, [r1, #16]
 800cb7a:	4607      	mov	r7, r0
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	461e      	mov	r6, r3
 800cb80:	f101 0c14 	add.w	ip, r1, #20
 800cb84:	2000      	movs	r0, #0
 800cb86:	f8dc 3000 	ldr.w	r3, [ip]
 800cb8a:	b299      	uxth	r1, r3
 800cb8c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb90:	0c1e      	lsrs	r6, r3, #16
 800cb92:	0c0b      	lsrs	r3, r1, #16
 800cb94:	fb02 3306 	mla	r3, r2, r6, r3
 800cb98:	b289      	uxth	r1, r1
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cba0:	4285      	cmp	r5, r0
 800cba2:	f84c 1b04 	str.w	r1, [ip], #4
 800cba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbaa:	dcec      	bgt.n	800cb86 <__multadd+0x12>
 800cbac:	b30e      	cbz	r6, 800cbf2 <__multadd+0x7e>
 800cbae:	68a3      	ldr	r3, [r4, #8]
 800cbb0:	42ab      	cmp	r3, r5
 800cbb2:	dc19      	bgt.n	800cbe8 <__multadd+0x74>
 800cbb4:	6861      	ldr	r1, [r4, #4]
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	3101      	adds	r1, #1
 800cbba:	f7ff ff79 	bl	800cab0 <_Balloc>
 800cbbe:	4680      	mov	r8, r0
 800cbc0:	b928      	cbnz	r0, 800cbce <__multadd+0x5a>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf8 <__multadd+0x84>)
 800cbc6:	480d      	ldr	r0, [pc, #52]	@ (800cbfc <__multadd+0x88>)
 800cbc8:	21ba      	movs	r1, #186	@ 0xba
 800cbca:	f001 fcf1 	bl	800e5b0 <__assert_func>
 800cbce:	6922      	ldr	r2, [r4, #16]
 800cbd0:	3202      	adds	r2, #2
 800cbd2:	f104 010c 	add.w	r1, r4, #12
 800cbd6:	0092      	lsls	r2, r2, #2
 800cbd8:	300c      	adds	r0, #12
 800cbda:	f7ff f808 	bl	800bbee <memcpy>
 800cbde:	4621      	mov	r1, r4
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	f7ff ffa5 	bl	800cb30 <_Bfree>
 800cbe6:	4644      	mov	r4, r8
 800cbe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbec:	3501      	adds	r5, #1
 800cbee:	615e      	str	r6, [r3, #20]
 800cbf0:	6125      	str	r5, [r4, #16]
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf8:	0800f675 	.word	0x0800f675
 800cbfc:	0800f686 	.word	0x0800f686

0800cc00 <__s2b>:
 800cc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc04:	460c      	mov	r4, r1
 800cc06:	4615      	mov	r5, r2
 800cc08:	461f      	mov	r7, r3
 800cc0a:	2209      	movs	r2, #9
 800cc0c:	3308      	adds	r3, #8
 800cc0e:	4606      	mov	r6, r0
 800cc10:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc14:	2100      	movs	r1, #0
 800cc16:	2201      	movs	r2, #1
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	db09      	blt.n	800cc30 <__s2b+0x30>
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff ff47 	bl	800cab0 <_Balloc>
 800cc22:	b940      	cbnz	r0, 800cc36 <__s2b+0x36>
 800cc24:	4602      	mov	r2, r0
 800cc26:	4b19      	ldr	r3, [pc, #100]	@ (800cc8c <__s2b+0x8c>)
 800cc28:	4819      	ldr	r0, [pc, #100]	@ (800cc90 <__s2b+0x90>)
 800cc2a:	21d3      	movs	r1, #211	@ 0xd3
 800cc2c:	f001 fcc0 	bl	800e5b0 <__assert_func>
 800cc30:	0052      	lsls	r2, r2, #1
 800cc32:	3101      	adds	r1, #1
 800cc34:	e7f0      	b.n	800cc18 <__s2b+0x18>
 800cc36:	9b08      	ldr	r3, [sp, #32]
 800cc38:	6143      	str	r3, [r0, #20]
 800cc3a:	2d09      	cmp	r5, #9
 800cc3c:	f04f 0301 	mov.w	r3, #1
 800cc40:	6103      	str	r3, [r0, #16]
 800cc42:	dd16      	ble.n	800cc72 <__s2b+0x72>
 800cc44:	f104 0909 	add.w	r9, r4, #9
 800cc48:	46c8      	mov	r8, r9
 800cc4a:	442c      	add	r4, r5
 800cc4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc50:	4601      	mov	r1, r0
 800cc52:	3b30      	subs	r3, #48	@ 0x30
 800cc54:	220a      	movs	r2, #10
 800cc56:	4630      	mov	r0, r6
 800cc58:	f7ff ff8c 	bl	800cb74 <__multadd>
 800cc5c:	45a0      	cmp	r8, r4
 800cc5e:	d1f5      	bne.n	800cc4c <__s2b+0x4c>
 800cc60:	f1a5 0408 	sub.w	r4, r5, #8
 800cc64:	444c      	add	r4, r9
 800cc66:	1b2d      	subs	r5, r5, r4
 800cc68:	1963      	adds	r3, r4, r5
 800cc6a:	42bb      	cmp	r3, r7
 800cc6c:	db04      	blt.n	800cc78 <__s2b+0x78>
 800cc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc72:	340a      	adds	r4, #10
 800cc74:	2509      	movs	r5, #9
 800cc76:	e7f6      	b.n	800cc66 <__s2b+0x66>
 800cc78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc7c:	4601      	mov	r1, r0
 800cc7e:	3b30      	subs	r3, #48	@ 0x30
 800cc80:	220a      	movs	r2, #10
 800cc82:	4630      	mov	r0, r6
 800cc84:	f7ff ff76 	bl	800cb74 <__multadd>
 800cc88:	e7ee      	b.n	800cc68 <__s2b+0x68>
 800cc8a:	bf00      	nop
 800cc8c:	0800f675 	.word	0x0800f675
 800cc90:	0800f686 	.word	0x0800f686

0800cc94 <__hi0bits>:
 800cc94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc98:	4603      	mov	r3, r0
 800cc9a:	bf36      	itet	cc
 800cc9c:	0403      	lslcc	r3, r0, #16
 800cc9e:	2000      	movcs	r0, #0
 800cca0:	2010      	movcc	r0, #16
 800cca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cca6:	bf3c      	itt	cc
 800cca8:	021b      	lslcc	r3, r3, #8
 800ccaa:	3008      	addcc	r0, #8
 800ccac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccb0:	bf3c      	itt	cc
 800ccb2:	011b      	lslcc	r3, r3, #4
 800ccb4:	3004      	addcc	r0, #4
 800ccb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccba:	bf3c      	itt	cc
 800ccbc:	009b      	lslcc	r3, r3, #2
 800ccbe:	3002      	addcc	r0, #2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	db05      	blt.n	800ccd0 <__hi0bits+0x3c>
 800ccc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccc8:	f100 0001 	add.w	r0, r0, #1
 800cccc:	bf08      	it	eq
 800ccce:	2020      	moveq	r0, #32
 800ccd0:	4770      	bx	lr

0800ccd2 <__lo0bits>:
 800ccd2:	6803      	ldr	r3, [r0, #0]
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	f013 0007 	ands.w	r0, r3, #7
 800ccda:	d00b      	beq.n	800ccf4 <__lo0bits+0x22>
 800ccdc:	07d9      	lsls	r1, r3, #31
 800ccde:	d421      	bmi.n	800cd24 <__lo0bits+0x52>
 800cce0:	0798      	lsls	r0, r3, #30
 800cce2:	bf49      	itett	mi
 800cce4:	085b      	lsrmi	r3, r3, #1
 800cce6:	089b      	lsrpl	r3, r3, #2
 800cce8:	2001      	movmi	r0, #1
 800ccea:	6013      	strmi	r3, [r2, #0]
 800ccec:	bf5c      	itt	pl
 800ccee:	6013      	strpl	r3, [r2, #0]
 800ccf0:	2002      	movpl	r0, #2
 800ccf2:	4770      	bx	lr
 800ccf4:	b299      	uxth	r1, r3
 800ccf6:	b909      	cbnz	r1, 800ccfc <__lo0bits+0x2a>
 800ccf8:	0c1b      	lsrs	r3, r3, #16
 800ccfa:	2010      	movs	r0, #16
 800ccfc:	b2d9      	uxtb	r1, r3
 800ccfe:	b909      	cbnz	r1, 800cd04 <__lo0bits+0x32>
 800cd00:	3008      	adds	r0, #8
 800cd02:	0a1b      	lsrs	r3, r3, #8
 800cd04:	0719      	lsls	r1, r3, #28
 800cd06:	bf04      	itt	eq
 800cd08:	091b      	lsreq	r3, r3, #4
 800cd0a:	3004      	addeq	r0, #4
 800cd0c:	0799      	lsls	r1, r3, #30
 800cd0e:	bf04      	itt	eq
 800cd10:	089b      	lsreq	r3, r3, #2
 800cd12:	3002      	addeq	r0, #2
 800cd14:	07d9      	lsls	r1, r3, #31
 800cd16:	d403      	bmi.n	800cd20 <__lo0bits+0x4e>
 800cd18:	085b      	lsrs	r3, r3, #1
 800cd1a:	f100 0001 	add.w	r0, r0, #1
 800cd1e:	d003      	beq.n	800cd28 <__lo0bits+0x56>
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	4770      	bx	lr
 800cd24:	2000      	movs	r0, #0
 800cd26:	4770      	bx	lr
 800cd28:	2020      	movs	r0, #32
 800cd2a:	4770      	bx	lr

0800cd2c <__i2b>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	460c      	mov	r4, r1
 800cd30:	2101      	movs	r1, #1
 800cd32:	f7ff febd 	bl	800cab0 <_Balloc>
 800cd36:	4602      	mov	r2, r0
 800cd38:	b928      	cbnz	r0, 800cd46 <__i2b+0x1a>
 800cd3a:	4b05      	ldr	r3, [pc, #20]	@ (800cd50 <__i2b+0x24>)
 800cd3c:	4805      	ldr	r0, [pc, #20]	@ (800cd54 <__i2b+0x28>)
 800cd3e:	f240 1145 	movw	r1, #325	@ 0x145
 800cd42:	f001 fc35 	bl	800e5b0 <__assert_func>
 800cd46:	2301      	movs	r3, #1
 800cd48:	6144      	str	r4, [r0, #20]
 800cd4a:	6103      	str	r3, [r0, #16]
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	bf00      	nop
 800cd50:	0800f675 	.word	0x0800f675
 800cd54:	0800f686 	.word	0x0800f686

0800cd58 <__multiply>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	4614      	mov	r4, r2
 800cd5e:	690a      	ldr	r2, [r1, #16]
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	bfa8      	it	ge
 800cd66:	4623      	movge	r3, r4
 800cd68:	460f      	mov	r7, r1
 800cd6a:	bfa4      	itt	ge
 800cd6c:	460c      	movge	r4, r1
 800cd6e:	461f      	movge	r7, r3
 800cd70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd78:	68a3      	ldr	r3, [r4, #8]
 800cd7a:	6861      	ldr	r1, [r4, #4]
 800cd7c:	eb0a 0609 	add.w	r6, sl, r9
 800cd80:	42b3      	cmp	r3, r6
 800cd82:	b085      	sub	sp, #20
 800cd84:	bfb8      	it	lt
 800cd86:	3101      	addlt	r1, #1
 800cd88:	f7ff fe92 	bl	800cab0 <_Balloc>
 800cd8c:	b930      	cbnz	r0, 800cd9c <__multiply+0x44>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	4b44      	ldr	r3, [pc, #272]	@ (800cea4 <__multiply+0x14c>)
 800cd92:	4845      	ldr	r0, [pc, #276]	@ (800cea8 <__multiply+0x150>)
 800cd94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd98:	f001 fc0a 	bl	800e5b0 <__assert_func>
 800cd9c:	f100 0514 	add.w	r5, r0, #20
 800cda0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cda4:	462b      	mov	r3, r5
 800cda6:	2200      	movs	r2, #0
 800cda8:	4543      	cmp	r3, r8
 800cdaa:	d321      	bcc.n	800cdf0 <__multiply+0x98>
 800cdac:	f107 0114 	add.w	r1, r7, #20
 800cdb0:	f104 0214 	add.w	r2, r4, #20
 800cdb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdbc:	9302      	str	r3, [sp, #8]
 800cdbe:	1b13      	subs	r3, r2, r4
 800cdc0:	3b15      	subs	r3, #21
 800cdc2:	f023 0303 	bic.w	r3, r3, #3
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	f104 0715 	add.w	r7, r4, #21
 800cdcc:	42ba      	cmp	r2, r7
 800cdce:	bf38      	it	cc
 800cdd0:	2304      	movcc	r3, #4
 800cdd2:	9301      	str	r3, [sp, #4]
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	9103      	str	r1, [sp, #12]
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	d80c      	bhi.n	800cdf6 <__multiply+0x9e>
 800cddc:	2e00      	cmp	r6, #0
 800cdde:	dd03      	ble.n	800cde8 <__multiply+0x90>
 800cde0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d05b      	beq.n	800cea0 <__multiply+0x148>
 800cde8:	6106      	str	r6, [r0, #16]
 800cdea:	b005      	add	sp, #20
 800cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf0:	f843 2b04 	str.w	r2, [r3], #4
 800cdf4:	e7d8      	b.n	800cda8 <__multiply+0x50>
 800cdf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdfa:	f1ba 0f00 	cmp.w	sl, #0
 800cdfe:	d024      	beq.n	800ce4a <__multiply+0xf2>
 800ce00:	f104 0e14 	add.w	lr, r4, #20
 800ce04:	46a9      	mov	r9, r5
 800ce06:	f04f 0c00 	mov.w	ip, #0
 800ce0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce12:	fa1f fb87 	uxth.w	fp, r7
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce20:	f8d9 7000 	ldr.w	r7, [r9]
 800ce24:	4463      	add	r3, ip
 800ce26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce2a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce38:	4572      	cmp	r2, lr
 800ce3a:	f849 3b04 	str.w	r3, [r9], #4
 800ce3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce42:	d8e2      	bhi.n	800ce0a <__multiply+0xb2>
 800ce44:	9b01      	ldr	r3, [sp, #4]
 800ce46:	f845 c003 	str.w	ip, [r5, r3]
 800ce4a:	9b03      	ldr	r3, [sp, #12]
 800ce4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce50:	3104      	adds	r1, #4
 800ce52:	f1b9 0f00 	cmp.w	r9, #0
 800ce56:	d021      	beq.n	800ce9c <__multiply+0x144>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	f104 0c14 	add.w	ip, r4, #20
 800ce5e:	46ae      	mov	lr, r5
 800ce60:	f04f 0a00 	mov.w	sl, #0
 800ce64:	f8bc b000 	ldrh.w	fp, [ip]
 800ce68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce6c:	fb09 770b 	mla	r7, r9, fp, r7
 800ce70:	4457      	add	r7, sl
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce78:	f84e 3b04 	str.w	r3, [lr], #4
 800ce7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce84:	f8be 3000 	ldrh.w	r3, [lr]
 800ce88:	fb09 330a 	mla	r3, r9, sl, r3
 800ce8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce90:	4562      	cmp	r2, ip
 800ce92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce96:	d8e5      	bhi.n	800ce64 <__multiply+0x10c>
 800ce98:	9f01      	ldr	r7, [sp, #4]
 800ce9a:	51eb      	str	r3, [r5, r7]
 800ce9c:	3504      	adds	r5, #4
 800ce9e:	e799      	b.n	800cdd4 <__multiply+0x7c>
 800cea0:	3e01      	subs	r6, #1
 800cea2:	e79b      	b.n	800cddc <__multiply+0x84>
 800cea4:	0800f675 	.word	0x0800f675
 800cea8:	0800f686 	.word	0x0800f686

0800ceac <__pow5mult>:
 800ceac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceb0:	4615      	mov	r5, r2
 800ceb2:	f012 0203 	ands.w	r2, r2, #3
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	460e      	mov	r6, r1
 800ceba:	d007      	beq.n	800cecc <__pow5mult+0x20>
 800cebc:	4c25      	ldr	r4, [pc, #148]	@ (800cf54 <__pow5mult+0xa8>)
 800cebe:	3a01      	subs	r2, #1
 800cec0:	2300      	movs	r3, #0
 800cec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cec6:	f7ff fe55 	bl	800cb74 <__multadd>
 800ceca:	4606      	mov	r6, r0
 800cecc:	10ad      	asrs	r5, r5, #2
 800cece:	d03d      	beq.n	800cf4c <__pow5mult+0xa0>
 800ced0:	69fc      	ldr	r4, [r7, #28]
 800ced2:	b97c      	cbnz	r4, 800cef4 <__pow5mult+0x48>
 800ced4:	2010      	movs	r0, #16
 800ced6:	f7ff fd35 	bl	800c944 <malloc>
 800ceda:	4602      	mov	r2, r0
 800cedc:	61f8      	str	r0, [r7, #28]
 800cede:	b928      	cbnz	r0, 800ceec <__pow5mult+0x40>
 800cee0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf58 <__pow5mult+0xac>)
 800cee2:	481e      	ldr	r0, [pc, #120]	@ (800cf5c <__pow5mult+0xb0>)
 800cee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cee8:	f001 fb62 	bl	800e5b0 <__assert_func>
 800ceec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cef0:	6004      	str	r4, [r0, #0]
 800cef2:	60c4      	str	r4, [r0, #12]
 800cef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cefc:	b94c      	cbnz	r4, 800cf12 <__pow5mult+0x66>
 800cefe:	f240 2171 	movw	r1, #625	@ 0x271
 800cf02:	4638      	mov	r0, r7
 800cf04:	f7ff ff12 	bl	800cd2c <__i2b>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf0e:	4604      	mov	r4, r0
 800cf10:	6003      	str	r3, [r0, #0]
 800cf12:	f04f 0900 	mov.w	r9, #0
 800cf16:	07eb      	lsls	r3, r5, #31
 800cf18:	d50a      	bpl.n	800cf30 <__pow5mult+0x84>
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4622      	mov	r2, r4
 800cf1e:	4638      	mov	r0, r7
 800cf20:	f7ff ff1a 	bl	800cd58 <__multiply>
 800cf24:	4631      	mov	r1, r6
 800cf26:	4680      	mov	r8, r0
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff fe01 	bl	800cb30 <_Bfree>
 800cf2e:	4646      	mov	r6, r8
 800cf30:	106d      	asrs	r5, r5, #1
 800cf32:	d00b      	beq.n	800cf4c <__pow5mult+0xa0>
 800cf34:	6820      	ldr	r0, [r4, #0]
 800cf36:	b938      	cbnz	r0, 800cf48 <__pow5mult+0x9c>
 800cf38:	4622      	mov	r2, r4
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	f7ff ff0b 	bl	800cd58 <__multiply>
 800cf42:	6020      	str	r0, [r4, #0]
 800cf44:	f8c0 9000 	str.w	r9, [r0]
 800cf48:	4604      	mov	r4, r0
 800cf4a:	e7e4      	b.n	800cf16 <__pow5mult+0x6a>
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf52:	bf00      	nop
 800cf54:	0800f6e0 	.word	0x0800f6e0
 800cf58:	0800f606 	.word	0x0800f606
 800cf5c:	0800f686 	.word	0x0800f686

0800cf60 <__lshift>:
 800cf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf64:	460c      	mov	r4, r1
 800cf66:	6849      	ldr	r1, [r1, #4]
 800cf68:	6923      	ldr	r3, [r4, #16]
 800cf6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf6e:	68a3      	ldr	r3, [r4, #8]
 800cf70:	4607      	mov	r7, r0
 800cf72:	4691      	mov	r9, r2
 800cf74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf78:	f108 0601 	add.w	r6, r8, #1
 800cf7c:	42b3      	cmp	r3, r6
 800cf7e:	db0b      	blt.n	800cf98 <__lshift+0x38>
 800cf80:	4638      	mov	r0, r7
 800cf82:	f7ff fd95 	bl	800cab0 <_Balloc>
 800cf86:	4605      	mov	r5, r0
 800cf88:	b948      	cbnz	r0, 800cf9e <__lshift+0x3e>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	4b28      	ldr	r3, [pc, #160]	@ (800d030 <__lshift+0xd0>)
 800cf8e:	4829      	ldr	r0, [pc, #164]	@ (800d034 <__lshift+0xd4>)
 800cf90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf94:	f001 fb0c 	bl	800e5b0 <__assert_func>
 800cf98:	3101      	adds	r1, #1
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	e7ee      	b.n	800cf7c <__lshift+0x1c>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f100 0114 	add.w	r1, r0, #20
 800cfa4:	f100 0210 	add.w	r2, r0, #16
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	4553      	cmp	r3, sl
 800cfac:	db33      	blt.n	800d016 <__lshift+0xb6>
 800cfae:	6920      	ldr	r0, [r4, #16]
 800cfb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfb4:	f104 0314 	add.w	r3, r4, #20
 800cfb8:	f019 091f 	ands.w	r9, r9, #31
 800cfbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfc4:	d02b      	beq.n	800d01e <__lshift+0xbe>
 800cfc6:	f1c9 0e20 	rsb	lr, r9, #32
 800cfca:	468a      	mov	sl, r1
 800cfcc:	2200      	movs	r2, #0
 800cfce:	6818      	ldr	r0, [r3, #0]
 800cfd0:	fa00 f009 	lsl.w	r0, r0, r9
 800cfd4:	4310      	orrs	r0, r2
 800cfd6:	f84a 0b04 	str.w	r0, [sl], #4
 800cfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfde:	459c      	cmp	ip, r3
 800cfe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfe4:	d8f3      	bhi.n	800cfce <__lshift+0x6e>
 800cfe6:	ebac 0304 	sub.w	r3, ip, r4
 800cfea:	3b15      	subs	r3, #21
 800cfec:	f023 0303 	bic.w	r3, r3, #3
 800cff0:	3304      	adds	r3, #4
 800cff2:	f104 0015 	add.w	r0, r4, #21
 800cff6:	4584      	cmp	ip, r0
 800cff8:	bf38      	it	cc
 800cffa:	2304      	movcc	r3, #4
 800cffc:	50ca      	str	r2, [r1, r3]
 800cffe:	b10a      	cbz	r2, 800d004 <__lshift+0xa4>
 800d000:	f108 0602 	add.w	r6, r8, #2
 800d004:	3e01      	subs	r6, #1
 800d006:	4638      	mov	r0, r7
 800d008:	612e      	str	r6, [r5, #16]
 800d00a:	4621      	mov	r1, r4
 800d00c:	f7ff fd90 	bl	800cb30 <_Bfree>
 800d010:	4628      	mov	r0, r5
 800d012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d016:	f842 0f04 	str.w	r0, [r2, #4]!
 800d01a:	3301      	adds	r3, #1
 800d01c:	e7c5      	b.n	800cfaa <__lshift+0x4a>
 800d01e:	3904      	subs	r1, #4
 800d020:	f853 2b04 	ldr.w	r2, [r3], #4
 800d024:	f841 2f04 	str.w	r2, [r1, #4]!
 800d028:	459c      	cmp	ip, r3
 800d02a:	d8f9      	bhi.n	800d020 <__lshift+0xc0>
 800d02c:	e7ea      	b.n	800d004 <__lshift+0xa4>
 800d02e:	bf00      	nop
 800d030:	0800f675 	.word	0x0800f675
 800d034:	0800f686 	.word	0x0800f686

0800d038 <__mcmp>:
 800d038:	690a      	ldr	r2, [r1, #16]
 800d03a:	4603      	mov	r3, r0
 800d03c:	6900      	ldr	r0, [r0, #16]
 800d03e:	1a80      	subs	r0, r0, r2
 800d040:	b530      	push	{r4, r5, lr}
 800d042:	d10e      	bne.n	800d062 <__mcmp+0x2a>
 800d044:	3314      	adds	r3, #20
 800d046:	3114      	adds	r1, #20
 800d048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d04c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d058:	4295      	cmp	r5, r2
 800d05a:	d003      	beq.n	800d064 <__mcmp+0x2c>
 800d05c:	d205      	bcs.n	800d06a <__mcmp+0x32>
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295
 800d062:	bd30      	pop	{r4, r5, pc}
 800d064:	42a3      	cmp	r3, r4
 800d066:	d3f3      	bcc.n	800d050 <__mcmp+0x18>
 800d068:	e7fb      	b.n	800d062 <__mcmp+0x2a>
 800d06a:	2001      	movs	r0, #1
 800d06c:	e7f9      	b.n	800d062 <__mcmp+0x2a>
	...

0800d070 <__mdiff>:
 800d070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	4689      	mov	r9, r1
 800d076:	4606      	mov	r6, r0
 800d078:	4611      	mov	r1, r2
 800d07a:	4648      	mov	r0, r9
 800d07c:	4614      	mov	r4, r2
 800d07e:	f7ff ffdb 	bl	800d038 <__mcmp>
 800d082:	1e05      	subs	r5, r0, #0
 800d084:	d112      	bne.n	800d0ac <__mdiff+0x3c>
 800d086:	4629      	mov	r1, r5
 800d088:	4630      	mov	r0, r6
 800d08a:	f7ff fd11 	bl	800cab0 <_Balloc>
 800d08e:	4602      	mov	r2, r0
 800d090:	b928      	cbnz	r0, 800d09e <__mdiff+0x2e>
 800d092:	4b3f      	ldr	r3, [pc, #252]	@ (800d190 <__mdiff+0x120>)
 800d094:	f240 2137 	movw	r1, #567	@ 0x237
 800d098:	483e      	ldr	r0, [pc, #248]	@ (800d194 <__mdiff+0x124>)
 800d09a:	f001 fa89 	bl	800e5b0 <__assert_func>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	b003      	add	sp, #12
 800d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ac:	bfbc      	itt	lt
 800d0ae:	464b      	movlt	r3, r9
 800d0b0:	46a1      	movlt	r9, r4
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0b8:	bfba      	itte	lt
 800d0ba:	461c      	movlt	r4, r3
 800d0bc:	2501      	movlt	r5, #1
 800d0be:	2500      	movge	r5, #0
 800d0c0:	f7ff fcf6 	bl	800cab0 <_Balloc>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	b918      	cbnz	r0, 800d0d0 <__mdiff+0x60>
 800d0c8:	4b31      	ldr	r3, [pc, #196]	@ (800d190 <__mdiff+0x120>)
 800d0ca:	f240 2145 	movw	r1, #581	@ 0x245
 800d0ce:	e7e3      	b.n	800d098 <__mdiff+0x28>
 800d0d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0d4:	6926      	ldr	r6, [r4, #16]
 800d0d6:	60c5      	str	r5, [r0, #12]
 800d0d8:	f109 0310 	add.w	r3, r9, #16
 800d0dc:	f109 0514 	add.w	r5, r9, #20
 800d0e0:	f104 0e14 	add.w	lr, r4, #20
 800d0e4:	f100 0b14 	add.w	fp, r0, #20
 800d0e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	46d9      	mov	r9, fp
 800d0f4:	f04f 0c00 	mov.w	ip, #0
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	fa1f f38a 	uxth.w	r3, sl
 800d108:	4619      	mov	r1, r3
 800d10a:	b283      	uxth	r3, r0
 800d10c:	1acb      	subs	r3, r1, r3
 800d10e:	0c00      	lsrs	r0, r0, #16
 800d110:	4463      	add	r3, ip
 800d112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d120:	4576      	cmp	r6, lr
 800d122:	f849 3b04 	str.w	r3, [r9], #4
 800d126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d12a:	d8e5      	bhi.n	800d0f8 <__mdiff+0x88>
 800d12c:	1b33      	subs	r3, r6, r4
 800d12e:	3b15      	subs	r3, #21
 800d130:	f023 0303 	bic.w	r3, r3, #3
 800d134:	3415      	adds	r4, #21
 800d136:	3304      	adds	r3, #4
 800d138:	42a6      	cmp	r6, r4
 800d13a:	bf38      	it	cc
 800d13c:	2304      	movcc	r3, #4
 800d13e:	441d      	add	r5, r3
 800d140:	445b      	add	r3, fp
 800d142:	461e      	mov	r6, r3
 800d144:	462c      	mov	r4, r5
 800d146:	4544      	cmp	r4, r8
 800d148:	d30e      	bcc.n	800d168 <__mdiff+0xf8>
 800d14a:	f108 0103 	add.w	r1, r8, #3
 800d14e:	1b49      	subs	r1, r1, r5
 800d150:	f021 0103 	bic.w	r1, r1, #3
 800d154:	3d03      	subs	r5, #3
 800d156:	45a8      	cmp	r8, r5
 800d158:	bf38      	it	cc
 800d15a:	2100      	movcc	r1, #0
 800d15c:	440b      	add	r3, r1
 800d15e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d162:	b191      	cbz	r1, 800d18a <__mdiff+0x11a>
 800d164:	6117      	str	r7, [r2, #16]
 800d166:	e79d      	b.n	800d0a4 <__mdiff+0x34>
 800d168:	f854 1b04 	ldr.w	r1, [r4], #4
 800d16c:	46e6      	mov	lr, ip
 800d16e:	0c08      	lsrs	r0, r1, #16
 800d170:	fa1c fc81 	uxtah	ip, ip, r1
 800d174:	4471      	add	r1, lr
 800d176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d17a:	b289      	uxth	r1, r1
 800d17c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d180:	f846 1b04 	str.w	r1, [r6], #4
 800d184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d188:	e7dd      	b.n	800d146 <__mdiff+0xd6>
 800d18a:	3f01      	subs	r7, #1
 800d18c:	e7e7      	b.n	800d15e <__mdiff+0xee>
 800d18e:	bf00      	nop
 800d190:	0800f675 	.word	0x0800f675
 800d194:	0800f686 	.word	0x0800f686

0800d198 <__ulp>:
 800d198:	b082      	sub	sp, #8
 800d19a:	ed8d 0b00 	vstr	d0, [sp]
 800d19e:	9a01      	ldr	r2, [sp, #4]
 800d1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d1e0 <__ulp+0x48>)
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	dc08      	bgt.n	800d1be <__ulp+0x26>
 800d1ac:	425b      	negs	r3, r3
 800d1ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d1b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1b6:	da04      	bge.n	800d1c2 <__ulp+0x2a>
 800d1b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1bc:	4113      	asrs	r3, r2
 800d1be:	2200      	movs	r2, #0
 800d1c0:	e008      	b.n	800d1d4 <__ulp+0x3c>
 800d1c2:	f1a2 0314 	sub.w	r3, r2, #20
 800d1c6:	2b1e      	cmp	r3, #30
 800d1c8:	bfda      	itte	le
 800d1ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d1ce:	40da      	lsrle	r2, r3
 800d1d0:	2201      	movgt	r2, #1
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	ec41 0b10 	vmov	d0, r0, r1
 800d1dc:	b002      	add	sp, #8
 800d1de:	4770      	bx	lr
 800d1e0:	7ff00000 	.word	0x7ff00000

0800d1e4 <__b2d>:
 800d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e8:	6906      	ldr	r6, [r0, #16]
 800d1ea:	f100 0814 	add.w	r8, r0, #20
 800d1ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d1f2:	1f37      	subs	r7, r6, #4
 800d1f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	f7ff fd4b 	bl	800cc94 <__hi0bits>
 800d1fe:	f1c0 0320 	rsb	r3, r0, #32
 800d202:	280a      	cmp	r0, #10
 800d204:	600b      	str	r3, [r1, #0]
 800d206:	491b      	ldr	r1, [pc, #108]	@ (800d274 <__b2d+0x90>)
 800d208:	dc15      	bgt.n	800d236 <__b2d+0x52>
 800d20a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d20e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d212:	45b8      	cmp	r8, r7
 800d214:	ea43 0501 	orr.w	r5, r3, r1
 800d218:	bf34      	ite	cc
 800d21a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d21e:	2300      	movcs	r3, #0
 800d220:	3015      	adds	r0, #21
 800d222:	fa02 f000 	lsl.w	r0, r2, r0
 800d226:	fa23 f30c 	lsr.w	r3, r3, ip
 800d22a:	4303      	orrs	r3, r0
 800d22c:	461c      	mov	r4, r3
 800d22e:	ec45 4b10 	vmov	d0, r4, r5
 800d232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d236:	45b8      	cmp	r8, r7
 800d238:	bf3a      	itte	cc
 800d23a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d23e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d242:	2300      	movcs	r3, #0
 800d244:	380b      	subs	r0, #11
 800d246:	d012      	beq.n	800d26e <__b2d+0x8a>
 800d248:	f1c0 0120 	rsb	r1, r0, #32
 800d24c:	fa23 f401 	lsr.w	r4, r3, r1
 800d250:	4082      	lsls	r2, r0
 800d252:	4322      	orrs	r2, r4
 800d254:	4547      	cmp	r7, r8
 800d256:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d25a:	bf8c      	ite	hi
 800d25c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d260:	2200      	movls	r2, #0
 800d262:	4083      	lsls	r3, r0
 800d264:	40ca      	lsrs	r2, r1
 800d266:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d26a:	4313      	orrs	r3, r2
 800d26c:	e7de      	b.n	800d22c <__b2d+0x48>
 800d26e:	ea42 0501 	orr.w	r5, r2, r1
 800d272:	e7db      	b.n	800d22c <__b2d+0x48>
 800d274:	3ff00000 	.word	0x3ff00000

0800d278 <__d2b>:
 800d278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d27c:	460f      	mov	r7, r1
 800d27e:	2101      	movs	r1, #1
 800d280:	ec59 8b10 	vmov	r8, r9, d0
 800d284:	4616      	mov	r6, r2
 800d286:	f7ff fc13 	bl	800cab0 <_Balloc>
 800d28a:	4604      	mov	r4, r0
 800d28c:	b930      	cbnz	r0, 800d29c <__d2b+0x24>
 800d28e:	4602      	mov	r2, r0
 800d290:	4b23      	ldr	r3, [pc, #140]	@ (800d320 <__d2b+0xa8>)
 800d292:	4824      	ldr	r0, [pc, #144]	@ (800d324 <__d2b+0xac>)
 800d294:	f240 310f 	movw	r1, #783	@ 0x30f
 800d298:	f001 f98a 	bl	800e5b0 <__assert_func>
 800d29c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2a4:	b10d      	cbz	r5, 800d2aa <__d2b+0x32>
 800d2a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2aa:	9301      	str	r3, [sp, #4]
 800d2ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d2b0:	d023      	beq.n	800d2fa <__d2b+0x82>
 800d2b2:	4668      	mov	r0, sp
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	f7ff fd0c 	bl	800ccd2 <__lo0bits>
 800d2ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2be:	b1d0      	cbz	r0, 800d2f6 <__d2b+0x7e>
 800d2c0:	f1c0 0320 	rsb	r3, r0, #32
 800d2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c8:	430b      	orrs	r3, r1
 800d2ca:	40c2      	lsrs	r2, r0
 800d2cc:	6163      	str	r3, [r4, #20]
 800d2ce:	9201      	str	r2, [sp, #4]
 800d2d0:	9b01      	ldr	r3, [sp, #4]
 800d2d2:	61a3      	str	r3, [r4, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	bf0c      	ite	eq
 800d2d8:	2201      	moveq	r2, #1
 800d2da:	2202      	movne	r2, #2
 800d2dc:	6122      	str	r2, [r4, #16]
 800d2de:	b1a5      	cbz	r5, 800d30a <__d2b+0x92>
 800d2e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2e4:	4405      	add	r5, r0
 800d2e6:	603d      	str	r5, [r7, #0]
 800d2e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2ec:	6030      	str	r0, [r6, #0]
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	b003      	add	sp, #12
 800d2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2f6:	6161      	str	r1, [r4, #20]
 800d2f8:	e7ea      	b.n	800d2d0 <__d2b+0x58>
 800d2fa:	a801      	add	r0, sp, #4
 800d2fc:	f7ff fce9 	bl	800ccd2 <__lo0bits>
 800d300:	9b01      	ldr	r3, [sp, #4]
 800d302:	6163      	str	r3, [r4, #20]
 800d304:	3020      	adds	r0, #32
 800d306:	2201      	movs	r2, #1
 800d308:	e7e8      	b.n	800d2dc <__d2b+0x64>
 800d30a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d30e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d312:	6038      	str	r0, [r7, #0]
 800d314:	6918      	ldr	r0, [r3, #16]
 800d316:	f7ff fcbd 	bl	800cc94 <__hi0bits>
 800d31a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d31e:	e7e5      	b.n	800d2ec <__d2b+0x74>
 800d320:	0800f675 	.word	0x0800f675
 800d324:	0800f686 	.word	0x0800f686

0800d328 <__ratio>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	b085      	sub	sp, #20
 800d32e:	e9cd 1000 	strd	r1, r0, [sp]
 800d332:	a902      	add	r1, sp, #8
 800d334:	f7ff ff56 	bl	800d1e4 <__b2d>
 800d338:	9800      	ldr	r0, [sp, #0]
 800d33a:	a903      	add	r1, sp, #12
 800d33c:	ec55 4b10 	vmov	r4, r5, d0
 800d340:	f7ff ff50 	bl	800d1e4 <__b2d>
 800d344:	9b01      	ldr	r3, [sp, #4]
 800d346:	6919      	ldr	r1, [r3, #16]
 800d348:	9b00      	ldr	r3, [sp, #0]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	1ac9      	subs	r1, r1, r3
 800d34e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d352:	1a9b      	subs	r3, r3, r2
 800d354:	ec5b ab10 	vmov	sl, fp, d0
 800d358:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	bfce      	itee	gt
 800d360:	462a      	movgt	r2, r5
 800d362:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d366:	465a      	movle	r2, fp
 800d368:	462f      	mov	r7, r5
 800d36a:	46d9      	mov	r9, fp
 800d36c:	bfcc      	ite	gt
 800d36e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d372:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d376:	464b      	mov	r3, r9
 800d378:	4652      	mov	r2, sl
 800d37a:	4620      	mov	r0, r4
 800d37c:	4639      	mov	r1, r7
 800d37e:	f7f3 fa95 	bl	80008ac <__aeabi_ddiv>
 800d382:	ec41 0b10 	vmov	d0, r0, r1
 800d386:	b005      	add	sp, #20
 800d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d38c <__copybits>:
 800d38c:	3901      	subs	r1, #1
 800d38e:	b570      	push	{r4, r5, r6, lr}
 800d390:	1149      	asrs	r1, r1, #5
 800d392:	6914      	ldr	r4, [r2, #16]
 800d394:	3101      	adds	r1, #1
 800d396:	f102 0314 	add.w	r3, r2, #20
 800d39a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d39e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3a2:	1f05      	subs	r5, r0, #4
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d30c      	bcc.n	800d3c2 <__copybits+0x36>
 800d3a8:	1aa3      	subs	r3, r4, r2
 800d3aa:	3b11      	subs	r3, #17
 800d3ac:	f023 0303 	bic.w	r3, r3, #3
 800d3b0:	3211      	adds	r2, #17
 800d3b2:	42a2      	cmp	r2, r4
 800d3b4:	bf88      	it	hi
 800d3b6:	2300      	movhi	r3, #0
 800d3b8:	4418      	add	r0, r3
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	4288      	cmp	r0, r1
 800d3be:	d305      	bcc.n	800d3cc <__copybits+0x40>
 800d3c0:	bd70      	pop	{r4, r5, r6, pc}
 800d3c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d3ca:	e7eb      	b.n	800d3a4 <__copybits+0x18>
 800d3cc:	f840 3b04 	str.w	r3, [r0], #4
 800d3d0:	e7f4      	b.n	800d3bc <__copybits+0x30>

0800d3d2 <__any_on>:
 800d3d2:	f100 0214 	add.w	r2, r0, #20
 800d3d6:	6900      	ldr	r0, [r0, #16]
 800d3d8:	114b      	asrs	r3, r1, #5
 800d3da:	4298      	cmp	r0, r3
 800d3dc:	b510      	push	{r4, lr}
 800d3de:	db11      	blt.n	800d404 <__any_on+0x32>
 800d3e0:	dd0a      	ble.n	800d3f8 <__any_on+0x26>
 800d3e2:	f011 011f 	ands.w	r1, r1, #31
 800d3e6:	d007      	beq.n	800d3f8 <__any_on+0x26>
 800d3e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3ec:	fa24 f001 	lsr.w	r0, r4, r1
 800d3f0:	fa00 f101 	lsl.w	r1, r0, r1
 800d3f4:	428c      	cmp	r4, r1
 800d3f6:	d10b      	bne.n	800d410 <__any_on+0x3e>
 800d3f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d803      	bhi.n	800d408 <__any_on+0x36>
 800d400:	2000      	movs	r0, #0
 800d402:	bd10      	pop	{r4, pc}
 800d404:	4603      	mov	r3, r0
 800d406:	e7f7      	b.n	800d3f8 <__any_on+0x26>
 800d408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d40c:	2900      	cmp	r1, #0
 800d40e:	d0f5      	beq.n	800d3fc <__any_on+0x2a>
 800d410:	2001      	movs	r0, #1
 800d412:	e7f6      	b.n	800d402 <__any_on+0x30>

0800d414 <sulp>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	4604      	mov	r4, r0
 800d418:	460d      	mov	r5, r1
 800d41a:	ec45 4b10 	vmov	d0, r4, r5
 800d41e:	4616      	mov	r6, r2
 800d420:	f7ff feba 	bl	800d198 <__ulp>
 800d424:	ec51 0b10 	vmov	r0, r1, d0
 800d428:	b17e      	cbz	r6, 800d44a <sulp+0x36>
 800d42a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d42e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d432:	2b00      	cmp	r3, #0
 800d434:	dd09      	ble.n	800d44a <sulp+0x36>
 800d436:	051b      	lsls	r3, r3, #20
 800d438:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d43c:	2400      	movs	r4, #0
 800d43e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d442:	4622      	mov	r2, r4
 800d444:	462b      	mov	r3, r5
 800d446:	f7f3 f907 	bl	8000658 <__aeabi_dmul>
 800d44a:	ec41 0b10 	vmov	d0, r0, r1
 800d44e:	bd70      	pop	{r4, r5, r6, pc}

0800d450 <_strtod_l>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	b09f      	sub	sp, #124	@ 0x7c
 800d456:	460c      	mov	r4, r1
 800d458:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d45a:	2200      	movs	r2, #0
 800d45c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d45e:	9005      	str	r0, [sp, #20]
 800d460:	f04f 0a00 	mov.w	sl, #0
 800d464:	f04f 0b00 	mov.w	fp, #0
 800d468:	460a      	mov	r2, r1
 800d46a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d46c:	7811      	ldrb	r1, [r2, #0]
 800d46e:	292b      	cmp	r1, #43	@ 0x2b
 800d470:	d04a      	beq.n	800d508 <_strtod_l+0xb8>
 800d472:	d838      	bhi.n	800d4e6 <_strtod_l+0x96>
 800d474:	290d      	cmp	r1, #13
 800d476:	d832      	bhi.n	800d4de <_strtod_l+0x8e>
 800d478:	2908      	cmp	r1, #8
 800d47a:	d832      	bhi.n	800d4e2 <_strtod_l+0x92>
 800d47c:	2900      	cmp	r1, #0
 800d47e:	d03b      	beq.n	800d4f8 <_strtod_l+0xa8>
 800d480:	2200      	movs	r2, #0
 800d482:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d486:	782a      	ldrb	r2, [r5, #0]
 800d488:	2a30      	cmp	r2, #48	@ 0x30
 800d48a:	f040 80b3 	bne.w	800d5f4 <_strtod_l+0x1a4>
 800d48e:	786a      	ldrb	r2, [r5, #1]
 800d490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d494:	2a58      	cmp	r2, #88	@ 0x58
 800d496:	d16e      	bne.n	800d576 <_strtod_l+0x126>
 800d498:	9302      	str	r3, [sp, #8]
 800d49a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	4a8e      	ldr	r2, [pc, #568]	@ (800d6dc <_strtod_l+0x28c>)
 800d4a4:	9805      	ldr	r0, [sp, #20]
 800d4a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d4a8:	a919      	add	r1, sp, #100	@ 0x64
 800d4aa:	f001 f91b 	bl	800e6e4 <__gethex>
 800d4ae:	f010 060f 	ands.w	r6, r0, #15
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	d005      	beq.n	800d4c2 <_strtod_l+0x72>
 800d4b6:	2e06      	cmp	r6, #6
 800d4b8:	d128      	bne.n	800d50c <_strtod_l+0xbc>
 800d4ba:	3501      	adds	r5, #1
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9519      	str	r5, [sp, #100]	@ 0x64
 800d4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f040 858e 	bne.w	800dfe6 <_strtod_l+0xb96>
 800d4ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4cc:	b1cb      	cbz	r3, 800d502 <_strtod_l+0xb2>
 800d4ce:	4652      	mov	r2, sl
 800d4d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d4d4:	ec43 2b10 	vmov	d0, r2, r3
 800d4d8:	b01f      	add	sp, #124	@ 0x7c
 800d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4de:	2920      	cmp	r1, #32
 800d4e0:	d1ce      	bne.n	800d480 <_strtod_l+0x30>
 800d4e2:	3201      	adds	r2, #1
 800d4e4:	e7c1      	b.n	800d46a <_strtod_l+0x1a>
 800d4e6:	292d      	cmp	r1, #45	@ 0x2d
 800d4e8:	d1ca      	bne.n	800d480 <_strtod_l+0x30>
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d4ee:	1c51      	adds	r1, r2, #1
 800d4f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d4f2:	7852      	ldrb	r2, [r2, #1]
 800d4f4:	2a00      	cmp	r2, #0
 800d4f6:	d1c5      	bne.n	800d484 <_strtod_l+0x34>
 800d4f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f040 8570 	bne.w	800dfe2 <_strtod_l+0xb92>
 800d502:	4652      	mov	r2, sl
 800d504:	465b      	mov	r3, fp
 800d506:	e7e5      	b.n	800d4d4 <_strtod_l+0x84>
 800d508:	2100      	movs	r1, #0
 800d50a:	e7ef      	b.n	800d4ec <_strtod_l+0x9c>
 800d50c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d50e:	b13a      	cbz	r2, 800d520 <_strtod_l+0xd0>
 800d510:	2135      	movs	r1, #53	@ 0x35
 800d512:	a81c      	add	r0, sp, #112	@ 0x70
 800d514:	f7ff ff3a 	bl	800d38c <__copybits>
 800d518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d51a:	9805      	ldr	r0, [sp, #20]
 800d51c:	f7ff fb08 	bl	800cb30 <_Bfree>
 800d520:	3e01      	subs	r6, #1
 800d522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d524:	2e04      	cmp	r6, #4
 800d526:	d806      	bhi.n	800d536 <_strtod_l+0xe6>
 800d528:	e8df f006 	tbb	[pc, r6]
 800d52c:	201d0314 	.word	0x201d0314
 800d530:	14          	.byte	0x14
 800d531:	00          	.byte	0x00
 800d532:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d536:	05e1      	lsls	r1, r4, #23
 800d538:	bf48      	it	mi
 800d53a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d53e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d542:	0d1b      	lsrs	r3, r3, #20
 800d544:	051b      	lsls	r3, r3, #20
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1bb      	bne.n	800d4c2 <_strtod_l+0x72>
 800d54a:	f7fe fb23 	bl	800bb94 <__errno>
 800d54e:	2322      	movs	r3, #34	@ 0x22
 800d550:	6003      	str	r3, [r0, #0]
 800d552:	e7b6      	b.n	800d4c2 <_strtod_l+0x72>
 800d554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d558:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d55c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d560:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d564:	e7e7      	b.n	800d536 <_strtod_l+0xe6>
 800d566:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d6e4 <_strtod_l+0x294>
 800d56a:	e7e4      	b.n	800d536 <_strtod_l+0xe6>
 800d56c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d570:	f04f 3aff 	mov.w	sl, #4294967295
 800d574:	e7df      	b.n	800d536 <_strtod_l+0xe6>
 800d576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d57c:	785b      	ldrb	r3, [r3, #1]
 800d57e:	2b30      	cmp	r3, #48	@ 0x30
 800d580:	d0f9      	beq.n	800d576 <_strtod_l+0x126>
 800d582:	2b00      	cmp	r3, #0
 800d584:	d09d      	beq.n	800d4c2 <_strtod_l+0x72>
 800d586:	2301      	movs	r3, #1
 800d588:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d58c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d58e:	2300      	movs	r3, #0
 800d590:	9308      	str	r3, [sp, #32]
 800d592:	930a      	str	r3, [sp, #40]	@ 0x28
 800d594:	461f      	mov	r7, r3
 800d596:	220a      	movs	r2, #10
 800d598:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d59a:	7805      	ldrb	r5, [r0, #0]
 800d59c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d5a0:	b2d9      	uxtb	r1, r3
 800d5a2:	2909      	cmp	r1, #9
 800d5a4:	d928      	bls.n	800d5f8 <_strtod_l+0x1a8>
 800d5a6:	494e      	ldr	r1, [pc, #312]	@ (800d6e0 <_strtod_l+0x290>)
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f000 ffd5 	bl	800e558 <strncmp>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d032      	beq.n	800d618 <_strtod_l+0x1c8>
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	462a      	mov	r2, r5
 800d5b6:	4681      	mov	r9, r0
 800d5b8:	463d      	mov	r5, r7
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2a65      	cmp	r2, #101	@ 0x65
 800d5be:	d001      	beq.n	800d5c4 <_strtod_l+0x174>
 800d5c0:	2a45      	cmp	r2, #69	@ 0x45
 800d5c2:	d114      	bne.n	800d5ee <_strtod_l+0x19e>
 800d5c4:	b91d      	cbnz	r5, 800d5ce <_strtod_l+0x17e>
 800d5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5c8:	4302      	orrs	r2, r0
 800d5ca:	d095      	beq.n	800d4f8 <_strtod_l+0xa8>
 800d5cc:	2500      	movs	r5, #0
 800d5ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d5d0:	1c62      	adds	r2, r4, #1
 800d5d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5d4:	7862      	ldrb	r2, [r4, #1]
 800d5d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d5d8:	d077      	beq.n	800d6ca <_strtod_l+0x27a>
 800d5da:	2a2d      	cmp	r2, #45	@ 0x2d
 800d5dc:	d07b      	beq.n	800d6d6 <_strtod_l+0x286>
 800d5de:	f04f 0c00 	mov.w	ip, #0
 800d5e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d5e6:	2909      	cmp	r1, #9
 800d5e8:	f240 8082 	bls.w	800d6f0 <_strtod_l+0x2a0>
 800d5ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800d5ee:	f04f 0800 	mov.w	r8, #0
 800d5f2:	e0a2      	b.n	800d73a <_strtod_l+0x2ea>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e7c7      	b.n	800d588 <_strtod_l+0x138>
 800d5f8:	2f08      	cmp	r7, #8
 800d5fa:	bfd5      	itete	le
 800d5fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d5fe:	9908      	ldrgt	r1, [sp, #32]
 800d600:	fb02 3301 	mlale	r3, r2, r1, r3
 800d604:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d608:	f100 0001 	add.w	r0, r0, #1
 800d60c:	bfd4      	ite	le
 800d60e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d610:	9308      	strgt	r3, [sp, #32]
 800d612:	3701      	adds	r7, #1
 800d614:	9019      	str	r0, [sp, #100]	@ 0x64
 800d616:	e7bf      	b.n	800d598 <_strtod_l+0x148>
 800d618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d61e:	785a      	ldrb	r2, [r3, #1]
 800d620:	b37f      	cbz	r7, 800d682 <_strtod_l+0x232>
 800d622:	4681      	mov	r9, r0
 800d624:	463d      	mov	r5, r7
 800d626:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d62a:	2b09      	cmp	r3, #9
 800d62c:	d912      	bls.n	800d654 <_strtod_l+0x204>
 800d62e:	2301      	movs	r3, #1
 800d630:	e7c4      	b.n	800d5bc <_strtod_l+0x16c>
 800d632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	9219      	str	r2, [sp, #100]	@ 0x64
 800d638:	785a      	ldrb	r2, [r3, #1]
 800d63a:	3001      	adds	r0, #1
 800d63c:	2a30      	cmp	r2, #48	@ 0x30
 800d63e:	d0f8      	beq.n	800d632 <_strtod_l+0x1e2>
 800d640:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d644:	2b08      	cmp	r3, #8
 800d646:	f200 84d3 	bhi.w	800dff0 <_strtod_l+0xba0>
 800d64a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d64c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d64e:	4681      	mov	r9, r0
 800d650:	2000      	movs	r0, #0
 800d652:	4605      	mov	r5, r0
 800d654:	3a30      	subs	r2, #48	@ 0x30
 800d656:	f100 0301 	add.w	r3, r0, #1
 800d65a:	d02a      	beq.n	800d6b2 <_strtod_l+0x262>
 800d65c:	4499      	add	r9, r3
 800d65e:	eb00 0c05 	add.w	ip, r0, r5
 800d662:	462b      	mov	r3, r5
 800d664:	210a      	movs	r1, #10
 800d666:	4563      	cmp	r3, ip
 800d668:	d10d      	bne.n	800d686 <_strtod_l+0x236>
 800d66a:	1c69      	adds	r1, r5, #1
 800d66c:	4401      	add	r1, r0
 800d66e:	4428      	add	r0, r5
 800d670:	2808      	cmp	r0, #8
 800d672:	dc16      	bgt.n	800d6a2 <_strtod_l+0x252>
 800d674:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d676:	230a      	movs	r3, #10
 800d678:	fb03 2300 	mla	r3, r3, r0, r2
 800d67c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d67e:	2300      	movs	r3, #0
 800d680:	e018      	b.n	800d6b4 <_strtod_l+0x264>
 800d682:	4638      	mov	r0, r7
 800d684:	e7da      	b.n	800d63c <_strtod_l+0x1ec>
 800d686:	2b08      	cmp	r3, #8
 800d688:	f103 0301 	add.w	r3, r3, #1
 800d68c:	dc03      	bgt.n	800d696 <_strtod_l+0x246>
 800d68e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d690:	434e      	muls	r6, r1
 800d692:	960a      	str	r6, [sp, #40]	@ 0x28
 800d694:	e7e7      	b.n	800d666 <_strtod_l+0x216>
 800d696:	2b10      	cmp	r3, #16
 800d698:	bfde      	ittt	le
 800d69a:	9e08      	ldrle	r6, [sp, #32]
 800d69c:	434e      	mulle	r6, r1
 800d69e:	9608      	strle	r6, [sp, #32]
 800d6a0:	e7e1      	b.n	800d666 <_strtod_l+0x216>
 800d6a2:	280f      	cmp	r0, #15
 800d6a4:	dceb      	bgt.n	800d67e <_strtod_l+0x22e>
 800d6a6:	9808      	ldr	r0, [sp, #32]
 800d6a8:	230a      	movs	r3, #10
 800d6aa:	fb03 2300 	mla	r3, r3, r0, r2
 800d6ae:	9308      	str	r3, [sp, #32]
 800d6b0:	e7e5      	b.n	800d67e <_strtod_l+0x22e>
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6b6:	1c50      	adds	r0, r2, #1
 800d6b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d6ba:	7852      	ldrb	r2, [r2, #1]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	460d      	mov	r5, r1
 800d6c0:	e7b1      	b.n	800d626 <_strtod_l+0x1d6>
 800d6c2:	f04f 0900 	mov.w	r9, #0
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e77d      	b.n	800d5c6 <_strtod_l+0x176>
 800d6ca:	f04f 0c00 	mov.w	ip, #0
 800d6ce:	1ca2      	adds	r2, r4, #2
 800d6d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6d2:	78a2      	ldrb	r2, [r4, #2]
 800d6d4:	e785      	b.n	800d5e2 <_strtod_l+0x192>
 800d6d6:	f04f 0c01 	mov.w	ip, #1
 800d6da:	e7f8      	b.n	800d6ce <_strtod_l+0x27e>
 800d6dc:	0800f7f8 	.word	0x0800f7f8
 800d6e0:	0800f7e0 	.word	0x0800f7e0
 800d6e4:	7ff00000 	.word	0x7ff00000
 800d6e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6ea:	1c51      	adds	r1, r2, #1
 800d6ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800d6ee:	7852      	ldrb	r2, [r2, #1]
 800d6f0:	2a30      	cmp	r2, #48	@ 0x30
 800d6f2:	d0f9      	beq.n	800d6e8 <_strtod_l+0x298>
 800d6f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d6f8:	2908      	cmp	r1, #8
 800d6fa:	f63f af78 	bhi.w	800d5ee <_strtod_l+0x19e>
 800d6fe:	3a30      	subs	r2, #48	@ 0x30
 800d700:	920e      	str	r2, [sp, #56]	@ 0x38
 800d702:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d704:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d706:	f04f 080a 	mov.w	r8, #10
 800d70a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d70c:	1c56      	adds	r6, r2, #1
 800d70e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d710:	7852      	ldrb	r2, [r2, #1]
 800d712:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d716:	f1be 0f09 	cmp.w	lr, #9
 800d71a:	d939      	bls.n	800d790 <_strtod_l+0x340>
 800d71c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d71e:	1a76      	subs	r6, r6, r1
 800d720:	2e08      	cmp	r6, #8
 800d722:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d726:	dc03      	bgt.n	800d730 <_strtod_l+0x2e0>
 800d728:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d72a:	4588      	cmp	r8, r1
 800d72c:	bfa8      	it	ge
 800d72e:	4688      	movge	r8, r1
 800d730:	f1bc 0f00 	cmp.w	ip, #0
 800d734:	d001      	beq.n	800d73a <_strtod_l+0x2ea>
 800d736:	f1c8 0800 	rsb	r8, r8, #0
 800d73a:	2d00      	cmp	r5, #0
 800d73c:	d14e      	bne.n	800d7dc <_strtod_l+0x38c>
 800d73e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d740:	4308      	orrs	r0, r1
 800d742:	f47f aebe 	bne.w	800d4c2 <_strtod_l+0x72>
 800d746:	2b00      	cmp	r3, #0
 800d748:	f47f aed6 	bne.w	800d4f8 <_strtod_l+0xa8>
 800d74c:	2a69      	cmp	r2, #105	@ 0x69
 800d74e:	d028      	beq.n	800d7a2 <_strtod_l+0x352>
 800d750:	dc25      	bgt.n	800d79e <_strtod_l+0x34e>
 800d752:	2a49      	cmp	r2, #73	@ 0x49
 800d754:	d025      	beq.n	800d7a2 <_strtod_l+0x352>
 800d756:	2a4e      	cmp	r2, #78	@ 0x4e
 800d758:	f47f aece 	bne.w	800d4f8 <_strtod_l+0xa8>
 800d75c:	499b      	ldr	r1, [pc, #620]	@ (800d9cc <_strtod_l+0x57c>)
 800d75e:	a819      	add	r0, sp, #100	@ 0x64
 800d760:	f001 f9e2 	bl	800eb28 <__match>
 800d764:	2800      	cmp	r0, #0
 800d766:	f43f aec7 	beq.w	800d4f8 <_strtod_l+0xa8>
 800d76a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	2b28      	cmp	r3, #40	@ 0x28
 800d770:	d12e      	bne.n	800d7d0 <_strtod_l+0x380>
 800d772:	4997      	ldr	r1, [pc, #604]	@ (800d9d0 <_strtod_l+0x580>)
 800d774:	aa1c      	add	r2, sp, #112	@ 0x70
 800d776:	a819      	add	r0, sp, #100	@ 0x64
 800d778:	f001 f9ea 	bl	800eb50 <__hexnan>
 800d77c:	2805      	cmp	r0, #5
 800d77e:	d127      	bne.n	800d7d0 <_strtod_l+0x380>
 800d780:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d782:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d786:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d78a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d78e:	e698      	b.n	800d4c2 <_strtod_l+0x72>
 800d790:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d792:	fb08 2101 	mla	r1, r8, r1, r2
 800d796:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d79a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d79c:	e7b5      	b.n	800d70a <_strtod_l+0x2ba>
 800d79e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7a0:	e7da      	b.n	800d758 <_strtod_l+0x308>
 800d7a2:	498c      	ldr	r1, [pc, #560]	@ (800d9d4 <_strtod_l+0x584>)
 800d7a4:	a819      	add	r0, sp, #100	@ 0x64
 800d7a6:	f001 f9bf 	bl	800eb28 <__match>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	f43f aea4 	beq.w	800d4f8 <_strtod_l+0xa8>
 800d7b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7b2:	4989      	ldr	r1, [pc, #548]	@ (800d9d8 <_strtod_l+0x588>)
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	a819      	add	r0, sp, #100	@ 0x64
 800d7b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d7ba:	f001 f9b5 	bl	800eb28 <__match>
 800d7be:	b910      	cbnz	r0, 800d7c6 <_strtod_l+0x376>
 800d7c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d7c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d9e8 <_strtod_l+0x598>
 800d7ca:	f04f 0a00 	mov.w	sl, #0
 800d7ce:	e678      	b.n	800d4c2 <_strtod_l+0x72>
 800d7d0:	4882      	ldr	r0, [pc, #520]	@ (800d9dc <_strtod_l+0x58c>)
 800d7d2:	f000 fee5 	bl	800e5a0 <nan>
 800d7d6:	ec5b ab10 	vmov	sl, fp, d0
 800d7da:	e672      	b.n	800d4c2 <_strtod_l+0x72>
 800d7dc:	eba8 0309 	sub.w	r3, r8, r9
 800d7e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7e4:	2f00      	cmp	r7, #0
 800d7e6:	bf08      	it	eq
 800d7e8:	462f      	moveq	r7, r5
 800d7ea:	2d10      	cmp	r5, #16
 800d7ec:	462c      	mov	r4, r5
 800d7ee:	bfa8      	it	ge
 800d7f0:	2410      	movge	r4, #16
 800d7f2:	f7f2 feb7 	bl	8000564 <__aeabi_ui2d>
 800d7f6:	2d09      	cmp	r5, #9
 800d7f8:	4682      	mov	sl, r0
 800d7fa:	468b      	mov	fp, r1
 800d7fc:	dc13      	bgt.n	800d826 <_strtod_l+0x3d6>
 800d7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d800:	2b00      	cmp	r3, #0
 800d802:	f43f ae5e 	beq.w	800d4c2 <_strtod_l+0x72>
 800d806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d808:	dd78      	ble.n	800d8fc <_strtod_l+0x4ac>
 800d80a:	2b16      	cmp	r3, #22
 800d80c:	dc5f      	bgt.n	800d8ce <_strtod_l+0x47e>
 800d80e:	4974      	ldr	r1, [pc, #464]	@ (800d9e0 <_strtod_l+0x590>)
 800d810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d814:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d818:	4652      	mov	r2, sl
 800d81a:	465b      	mov	r3, fp
 800d81c:	f7f2 ff1c 	bl	8000658 <__aeabi_dmul>
 800d820:	4682      	mov	sl, r0
 800d822:	468b      	mov	fp, r1
 800d824:	e64d      	b.n	800d4c2 <_strtod_l+0x72>
 800d826:	4b6e      	ldr	r3, [pc, #440]	@ (800d9e0 <_strtod_l+0x590>)
 800d828:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d82c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d830:	f7f2 ff12 	bl	8000658 <__aeabi_dmul>
 800d834:	4682      	mov	sl, r0
 800d836:	9808      	ldr	r0, [sp, #32]
 800d838:	468b      	mov	fp, r1
 800d83a:	f7f2 fe93 	bl	8000564 <__aeabi_ui2d>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	4650      	mov	r0, sl
 800d844:	4659      	mov	r1, fp
 800d846:	f7f2 fd51 	bl	80002ec <__adddf3>
 800d84a:	2d0f      	cmp	r5, #15
 800d84c:	4682      	mov	sl, r0
 800d84e:	468b      	mov	fp, r1
 800d850:	ddd5      	ble.n	800d7fe <_strtod_l+0x3ae>
 800d852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d854:	1b2c      	subs	r4, r5, r4
 800d856:	441c      	add	r4, r3
 800d858:	2c00      	cmp	r4, #0
 800d85a:	f340 8096 	ble.w	800d98a <_strtod_l+0x53a>
 800d85e:	f014 030f 	ands.w	r3, r4, #15
 800d862:	d00a      	beq.n	800d87a <_strtod_l+0x42a>
 800d864:	495e      	ldr	r1, [pc, #376]	@ (800d9e0 <_strtod_l+0x590>)
 800d866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d86a:	4652      	mov	r2, sl
 800d86c:	465b      	mov	r3, fp
 800d86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d872:	f7f2 fef1 	bl	8000658 <__aeabi_dmul>
 800d876:	4682      	mov	sl, r0
 800d878:	468b      	mov	fp, r1
 800d87a:	f034 040f 	bics.w	r4, r4, #15
 800d87e:	d073      	beq.n	800d968 <_strtod_l+0x518>
 800d880:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d884:	dd48      	ble.n	800d918 <_strtod_l+0x4c8>
 800d886:	2400      	movs	r4, #0
 800d888:	46a0      	mov	r8, r4
 800d88a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d88c:	46a1      	mov	r9, r4
 800d88e:	9a05      	ldr	r2, [sp, #20]
 800d890:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d9e8 <_strtod_l+0x598>
 800d894:	2322      	movs	r3, #34	@ 0x22
 800d896:	6013      	str	r3, [r2, #0]
 800d898:	f04f 0a00 	mov.w	sl, #0
 800d89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f43f ae0f 	beq.w	800d4c2 <_strtod_l+0x72>
 800d8a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8a6:	9805      	ldr	r0, [sp, #20]
 800d8a8:	f7ff f942 	bl	800cb30 <_Bfree>
 800d8ac:	9805      	ldr	r0, [sp, #20]
 800d8ae:	4649      	mov	r1, r9
 800d8b0:	f7ff f93e 	bl	800cb30 <_Bfree>
 800d8b4:	9805      	ldr	r0, [sp, #20]
 800d8b6:	4641      	mov	r1, r8
 800d8b8:	f7ff f93a 	bl	800cb30 <_Bfree>
 800d8bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8be:	9805      	ldr	r0, [sp, #20]
 800d8c0:	f7ff f936 	bl	800cb30 <_Bfree>
 800d8c4:	9805      	ldr	r0, [sp, #20]
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	f7ff f932 	bl	800cb30 <_Bfree>
 800d8cc:	e5f9      	b.n	800d4c2 <_strtod_l+0x72>
 800d8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	dbbc      	blt.n	800d852 <_strtod_l+0x402>
 800d8d8:	4c41      	ldr	r4, [pc, #260]	@ (800d9e0 <_strtod_l+0x590>)
 800d8da:	f1c5 050f 	rsb	r5, r5, #15
 800d8de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d8e2:	4652      	mov	r2, sl
 800d8e4:	465b      	mov	r3, fp
 800d8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ea:	f7f2 feb5 	bl	8000658 <__aeabi_dmul>
 800d8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8f0:	1b5d      	subs	r5, r3, r5
 800d8f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d8f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8fa:	e78f      	b.n	800d81c <_strtod_l+0x3cc>
 800d8fc:	3316      	adds	r3, #22
 800d8fe:	dba8      	blt.n	800d852 <_strtod_l+0x402>
 800d900:	4b37      	ldr	r3, [pc, #220]	@ (800d9e0 <_strtod_l+0x590>)
 800d902:	eba9 0808 	sub.w	r8, r9, r8
 800d906:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d90a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d90e:	4650      	mov	r0, sl
 800d910:	4659      	mov	r1, fp
 800d912:	f7f2 ffcb 	bl	80008ac <__aeabi_ddiv>
 800d916:	e783      	b.n	800d820 <_strtod_l+0x3d0>
 800d918:	4b32      	ldr	r3, [pc, #200]	@ (800d9e4 <_strtod_l+0x594>)
 800d91a:	9308      	str	r3, [sp, #32]
 800d91c:	2300      	movs	r3, #0
 800d91e:	1124      	asrs	r4, r4, #4
 800d920:	4650      	mov	r0, sl
 800d922:	4659      	mov	r1, fp
 800d924:	461e      	mov	r6, r3
 800d926:	2c01      	cmp	r4, #1
 800d928:	dc21      	bgt.n	800d96e <_strtod_l+0x51e>
 800d92a:	b10b      	cbz	r3, 800d930 <_strtod_l+0x4e0>
 800d92c:	4682      	mov	sl, r0
 800d92e:	468b      	mov	fp, r1
 800d930:	492c      	ldr	r1, [pc, #176]	@ (800d9e4 <_strtod_l+0x594>)
 800d932:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d936:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d93a:	4652      	mov	r2, sl
 800d93c:	465b      	mov	r3, fp
 800d93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d942:	f7f2 fe89 	bl	8000658 <__aeabi_dmul>
 800d946:	4b28      	ldr	r3, [pc, #160]	@ (800d9e8 <_strtod_l+0x598>)
 800d948:	460a      	mov	r2, r1
 800d94a:	400b      	ands	r3, r1
 800d94c:	4927      	ldr	r1, [pc, #156]	@ (800d9ec <_strtod_l+0x59c>)
 800d94e:	428b      	cmp	r3, r1
 800d950:	4682      	mov	sl, r0
 800d952:	d898      	bhi.n	800d886 <_strtod_l+0x436>
 800d954:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d958:	428b      	cmp	r3, r1
 800d95a:	bf86      	itte	hi
 800d95c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d9f0 <_strtod_l+0x5a0>
 800d960:	f04f 3aff 	movhi.w	sl, #4294967295
 800d964:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d968:	2300      	movs	r3, #0
 800d96a:	9308      	str	r3, [sp, #32]
 800d96c:	e07a      	b.n	800da64 <_strtod_l+0x614>
 800d96e:	07e2      	lsls	r2, r4, #31
 800d970:	d505      	bpl.n	800d97e <_strtod_l+0x52e>
 800d972:	9b08      	ldr	r3, [sp, #32]
 800d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d978:	f7f2 fe6e 	bl	8000658 <__aeabi_dmul>
 800d97c:	2301      	movs	r3, #1
 800d97e:	9a08      	ldr	r2, [sp, #32]
 800d980:	3208      	adds	r2, #8
 800d982:	3601      	adds	r6, #1
 800d984:	1064      	asrs	r4, r4, #1
 800d986:	9208      	str	r2, [sp, #32]
 800d988:	e7cd      	b.n	800d926 <_strtod_l+0x4d6>
 800d98a:	d0ed      	beq.n	800d968 <_strtod_l+0x518>
 800d98c:	4264      	negs	r4, r4
 800d98e:	f014 020f 	ands.w	r2, r4, #15
 800d992:	d00a      	beq.n	800d9aa <_strtod_l+0x55a>
 800d994:	4b12      	ldr	r3, [pc, #72]	@ (800d9e0 <_strtod_l+0x590>)
 800d996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d99a:	4650      	mov	r0, sl
 800d99c:	4659      	mov	r1, fp
 800d99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a2:	f7f2 ff83 	bl	80008ac <__aeabi_ddiv>
 800d9a6:	4682      	mov	sl, r0
 800d9a8:	468b      	mov	fp, r1
 800d9aa:	1124      	asrs	r4, r4, #4
 800d9ac:	d0dc      	beq.n	800d968 <_strtod_l+0x518>
 800d9ae:	2c1f      	cmp	r4, #31
 800d9b0:	dd20      	ble.n	800d9f4 <_strtod_l+0x5a4>
 800d9b2:	2400      	movs	r4, #0
 800d9b4:	46a0      	mov	r8, r4
 800d9b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d9b8:	46a1      	mov	r9, r4
 800d9ba:	9a05      	ldr	r2, [sp, #20]
 800d9bc:	2322      	movs	r3, #34	@ 0x22
 800d9be:	f04f 0a00 	mov.w	sl, #0
 800d9c2:	f04f 0b00 	mov.w	fp, #0
 800d9c6:	6013      	str	r3, [r2, #0]
 800d9c8:	e768      	b.n	800d89c <_strtod_l+0x44c>
 800d9ca:	bf00      	nop
 800d9cc:	0800f5cd 	.word	0x0800f5cd
 800d9d0:	0800f7e4 	.word	0x0800f7e4
 800d9d4:	0800f5c5 	.word	0x0800f5c5
 800d9d8:	0800f5fc 	.word	0x0800f5fc
 800d9dc:	0800f98d 	.word	0x0800f98d
 800d9e0:	0800f718 	.word	0x0800f718
 800d9e4:	0800f6f0 	.word	0x0800f6f0
 800d9e8:	7ff00000 	.word	0x7ff00000
 800d9ec:	7ca00000 	.word	0x7ca00000
 800d9f0:	7fefffff 	.word	0x7fefffff
 800d9f4:	f014 0310 	ands.w	r3, r4, #16
 800d9f8:	bf18      	it	ne
 800d9fa:	236a      	movne	r3, #106	@ 0x6a
 800d9fc:	4ea9      	ldr	r6, [pc, #676]	@ (800dca4 <_strtod_l+0x854>)
 800d9fe:	9308      	str	r3, [sp, #32]
 800da00:	4650      	mov	r0, sl
 800da02:	4659      	mov	r1, fp
 800da04:	2300      	movs	r3, #0
 800da06:	07e2      	lsls	r2, r4, #31
 800da08:	d504      	bpl.n	800da14 <_strtod_l+0x5c4>
 800da0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da0e:	f7f2 fe23 	bl	8000658 <__aeabi_dmul>
 800da12:	2301      	movs	r3, #1
 800da14:	1064      	asrs	r4, r4, #1
 800da16:	f106 0608 	add.w	r6, r6, #8
 800da1a:	d1f4      	bne.n	800da06 <_strtod_l+0x5b6>
 800da1c:	b10b      	cbz	r3, 800da22 <_strtod_l+0x5d2>
 800da1e:	4682      	mov	sl, r0
 800da20:	468b      	mov	fp, r1
 800da22:	9b08      	ldr	r3, [sp, #32]
 800da24:	b1b3      	cbz	r3, 800da54 <_strtod_l+0x604>
 800da26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800da2e:	2b00      	cmp	r3, #0
 800da30:	4659      	mov	r1, fp
 800da32:	dd0f      	ble.n	800da54 <_strtod_l+0x604>
 800da34:	2b1f      	cmp	r3, #31
 800da36:	dd55      	ble.n	800dae4 <_strtod_l+0x694>
 800da38:	2b34      	cmp	r3, #52	@ 0x34
 800da3a:	bfde      	ittt	le
 800da3c:	f04f 33ff 	movle.w	r3, #4294967295
 800da40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800da44:	4093      	lslle	r3, r2
 800da46:	f04f 0a00 	mov.w	sl, #0
 800da4a:	bfcc      	ite	gt
 800da4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da50:	ea03 0b01 	andle.w	fp, r3, r1
 800da54:	2200      	movs	r2, #0
 800da56:	2300      	movs	r3, #0
 800da58:	4650      	mov	r0, sl
 800da5a:	4659      	mov	r1, fp
 800da5c:	f7f3 f864 	bl	8000b28 <__aeabi_dcmpeq>
 800da60:	2800      	cmp	r0, #0
 800da62:	d1a6      	bne.n	800d9b2 <_strtod_l+0x562>
 800da64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800da6a:	9805      	ldr	r0, [sp, #20]
 800da6c:	462b      	mov	r3, r5
 800da6e:	463a      	mov	r2, r7
 800da70:	f7ff f8c6 	bl	800cc00 <__s2b>
 800da74:	900a      	str	r0, [sp, #40]	@ 0x28
 800da76:	2800      	cmp	r0, #0
 800da78:	f43f af05 	beq.w	800d886 <_strtod_l+0x436>
 800da7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da7e:	2a00      	cmp	r2, #0
 800da80:	eba9 0308 	sub.w	r3, r9, r8
 800da84:	bfa8      	it	ge
 800da86:	2300      	movge	r3, #0
 800da88:	9312      	str	r3, [sp, #72]	@ 0x48
 800da8a:	2400      	movs	r4, #0
 800da8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da90:	9316      	str	r3, [sp, #88]	@ 0x58
 800da92:	46a0      	mov	r8, r4
 800da94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da96:	9805      	ldr	r0, [sp, #20]
 800da98:	6859      	ldr	r1, [r3, #4]
 800da9a:	f7ff f809 	bl	800cab0 <_Balloc>
 800da9e:	4681      	mov	r9, r0
 800daa0:	2800      	cmp	r0, #0
 800daa2:	f43f aef4 	beq.w	800d88e <_strtod_l+0x43e>
 800daa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daa8:	691a      	ldr	r2, [r3, #16]
 800daaa:	3202      	adds	r2, #2
 800daac:	f103 010c 	add.w	r1, r3, #12
 800dab0:	0092      	lsls	r2, r2, #2
 800dab2:	300c      	adds	r0, #12
 800dab4:	f7fe f89b 	bl	800bbee <memcpy>
 800dab8:	ec4b ab10 	vmov	d0, sl, fp
 800dabc:	9805      	ldr	r0, [sp, #20]
 800dabe:	aa1c      	add	r2, sp, #112	@ 0x70
 800dac0:	a91b      	add	r1, sp, #108	@ 0x6c
 800dac2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dac6:	f7ff fbd7 	bl	800d278 <__d2b>
 800daca:	901a      	str	r0, [sp, #104]	@ 0x68
 800dacc:	2800      	cmp	r0, #0
 800dace:	f43f aede 	beq.w	800d88e <_strtod_l+0x43e>
 800dad2:	9805      	ldr	r0, [sp, #20]
 800dad4:	2101      	movs	r1, #1
 800dad6:	f7ff f929 	bl	800cd2c <__i2b>
 800dada:	4680      	mov	r8, r0
 800dadc:	b948      	cbnz	r0, 800daf2 <_strtod_l+0x6a2>
 800dade:	f04f 0800 	mov.w	r8, #0
 800dae2:	e6d4      	b.n	800d88e <_strtod_l+0x43e>
 800dae4:	f04f 32ff 	mov.w	r2, #4294967295
 800dae8:	fa02 f303 	lsl.w	r3, r2, r3
 800daec:	ea03 0a0a 	and.w	sl, r3, sl
 800daf0:	e7b0      	b.n	800da54 <_strtod_l+0x604>
 800daf2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800daf4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	bfab      	itete	ge
 800dafa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dafc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dafe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800db00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800db02:	bfac      	ite	ge
 800db04:	18ef      	addge	r7, r5, r3
 800db06:	1b5e      	sublt	r6, r3, r5
 800db08:	9b08      	ldr	r3, [sp, #32]
 800db0a:	1aed      	subs	r5, r5, r3
 800db0c:	4415      	add	r5, r2
 800db0e:	4b66      	ldr	r3, [pc, #408]	@ (800dca8 <_strtod_l+0x858>)
 800db10:	3d01      	subs	r5, #1
 800db12:	429d      	cmp	r5, r3
 800db14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800db18:	da50      	bge.n	800dbbc <_strtod_l+0x76c>
 800db1a:	1b5b      	subs	r3, r3, r5
 800db1c:	2b1f      	cmp	r3, #31
 800db1e:	eba2 0203 	sub.w	r2, r2, r3
 800db22:	f04f 0101 	mov.w	r1, #1
 800db26:	dc3d      	bgt.n	800dba4 <_strtod_l+0x754>
 800db28:	fa01 f303 	lsl.w	r3, r1, r3
 800db2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db2e:	2300      	movs	r3, #0
 800db30:	9310      	str	r3, [sp, #64]	@ 0x40
 800db32:	18bd      	adds	r5, r7, r2
 800db34:	9b08      	ldr	r3, [sp, #32]
 800db36:	42af      	cmp	r7, r5
 800db38:	4416      	add	r6, r2
 800db3a:	441e      	add	r6, r3
 800db3c:	463b      	mov	r3, r7
 800db3e:	bfa8      	it	ge
 800db40:	462b      	movge	r3, r5
 800db42:	42b3      	cmp	r3, r6
 800db44:	bfa8      	it	ge
 800db46:	4633      	movge	r3, r6
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfc2      	ittt	gt
 800db4c:	1aed      	subgt	r5, r5, r3
 800db4e:	1af6      	subgt	r6, r6, r3
 800db50:	1aff      	subgt	r7, r7, r3
 800db52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db54:	2b00      	cmp	r3, #0
 800db56:	dd16      	ble.n	800db86 <_strtod_l+0x736>
 800db58:	4641      	mov	r1, r8
 800db5a:	9805      	ldr	r0, [sp, #20]
 800db5c:	461a      	mov	r2, r3
 800db5e:	f7ff f9a5 	bl	800ceac <__pow5mult>
 800db62:	4680      	mov	r8, r0
 800db64:	2800      	cmp	r0, #0
 800db66:	d0ba      	beq.n	800dade <_strtod_l+0x68e>
 800db68:	4601      	mov	r1, r0
 800db6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db6c:	9805      	ldr	r0, [sp, #20]
 800db6e:	f7ff f8f3 	bl	800cd58 <__multiply>
 800db72:	900e      	str	r0, [sp, #56]	@ 0x38
 800db74:	2800      	cmp	r0, #0
 800db76:	f43f ae8a 	beq.w	800d88e <_strtod_l+0x43e>
 800db7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db7c:	9805      	ldr	r0, [sp, #20]
 800db7e:	f7fe ffd7 	bl	800cb30 <_Bfree>
 800db82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db84:	931a      	str	r3, [sp, #104]	@ 0x68
 800db86:	2d00      	cmp	r5, #0
 800db88:	dc1d      	bgt.n	800dbc6 <_strtod_l+0x776>
 800db8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dd23      	ble.n	800dbd8 <_strtod_l+0x788>
 800db90:	4649      	mov	r1, r9
 800db92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800db94:	9805      	ldr	r0, [sp, #20]
 800db96:	f7ff f989 	bl	800ceac <__pow5mult>
 800db9a:	4681      	mov	r9, r0
 800db9c:	b9e0      	cbnz	r0, 800dbd8 <_strtod_l+0x788>
 800db9e:	f04f 0900 	mov.w	r9, #0
 800dba2:	e674      	b.n	800d88e <_strtod_l+0x43e>
 800dba4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dba8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dbac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dbb0:	35e2      	adds	r5, #226	@ 0xe2
 800dbb2:	fa01 f305 	lsl.w	r3, r1, r5
 800dbb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dbba:	e7ba      	b.n	800db32 <_strtod_l+0x6e2>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dbc4:	e7b5      	b.n	800db32 <_strtod_l+0x6e2>
 800dbc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbc8:	9805      	ldr	r0, [sp, #20]
 800dbca:	462a      	mov	r2, r5
 800dbcc:	f7ff f9c8 	bl	800cf60 <__lshift>
 800dbd0:	901a      	str	r0, [sp, #104]	@ 0x68
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d1d9      	bne.n	800db8a <_strtod_l+0x73a>
 800dbd6:	e65a      	b.n	800d88e <_strtod_l+0x43e>
 800dbd8:	2e00      	cmp	r6, #0
 800dbda:	dd07      	ble.n	800dbec <_strtod_l+0x79c>
 800dbdc:	4649      	mov	r1, r9
 800dbde:	9805      	ldr	r0, [sp, #20]
 800dbe0:	4632      	mov	r2, r6
 800dbe2:	f7ff f9bd 	bl	800cf60 <__lshift>
 800dbe6:	4681      	mov	r9, r0
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d0d8      	beq.n	800db9e <_strtod_l+0x74e>
 800dbec:	2f00      	cmp	r7, #0
 800dbee:	dd08      	ble.n	800dc02 <_strtod_l+0x7b2>
 800dbf0:	4641      	mov	r1, r8
 800dbf2:	9805      	ldr	r0, [sp, #20]
 800dbf4:	463a      	mov	r2, r7
 800dbf6:	f7ff f9b3 	bl	800cf60 <__lshift>
 800dbfa:	4680      	mov	r8, r0
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	f43f ae46 	beq.w	800d88e <_strtod_l+0x43e>
 800dc02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc04:	9805      	ldr	r0, [sp, #20]
 800dc06:	464a      	mov	r2, r9
 800dc08:	f7ff fa32 	bl	800d070 <__mdiff>
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f43f ae3d 	beq.w	800d88e <_strtod_l+0x43e>
 800dc14:	68c3      	ldr	r3, [r0, #12]
 800dc16:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc18:	2300      	movs	r3, #0
 800dc1a:	60c3      	str	r3, [r0, #12]
 800dc1c:	4641      	mov	r1, r8
 800dc1e:	f7ff fa0b 	bl	800d038 <__mcmp>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	da46      	bge.n	800dcb4 <_strtod_l+0x864>
 800dc26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc28:	ea53 030a 	orrs.w	r3, r3, sl
 800dc2c:	d16c      	bne.n	800dd08 <_strtod_l+0x8b8>
 800dc2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d168      	bne.n	800dd08 <_strtod_l+0x8b8>
 800dc36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc3a:	0d1b      	lsrs	r3, r3, #20
 800dc3c:	051b      	lsls	r3, r3, #20
 800dc3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc42:	d961      	bls.n	800dd08 <_strtod_l+0x8b8>
 800dc44:	6963      	ldr	r3, [r4, #20]
 800dc46:	b913      	cbnz	r3, 800dc4e <_strtod_l+0x7fe>
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	dd5c      	ble.n	800dd08 <_strtod_l+0x8b8>
 800dc4e:	4621      	mov	r1, r4
 800dc50:	2201      	movs	r2, #1
 800dc52:	9805      	ldr	r0, [sp, #20]
 800dc54:	f7ff f984 	bl	800cf60 <__lshift>
 800dc58:	4641      	mov	r1, r8
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	f7ff f9ec 	bl	800d038 <__mcmp>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	dd51      	ble.n	800dd08 <_strtod_l+0x8b8>
 800dc64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc68:	9a08      	ldr	r2, [sp, #32]
 800dc6a:	0d1b      	lsrs	r3, r3, #20
 800dc6c:	051b      	lsls	r3, r3, #20
 800dc6e:	2a00      	cmp	r2, #0
 800dc70:	d06b      	beq.n	800dd4a <_strtod_l+0x8fa>
 800dc72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc76:	d868      	bhi.n	800dd4a <_strtod_l+0x8fa>
 800dc78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dc7c:	f67f ae9d 	bls.w	800d9ba <_strtod_l+0x56a>
 800dc80:	4b0a      	ldr	r3, [pc, #40]	@ (800dcac <_strtod_l+0x85c>)
 800dc82:	4650      	mov	r0, sl
 800dc84:	4659      	mov	r1, fp
 800dc86:	2200      	movs	r2, #0
 800dc88:	f7f2 fce6 	bl	8000658 <__aeabi_dmul>
 800dc8c:	4b08      	ldr	r3, [pc, #32]	@ (800dcb0 <_strtod_l+0x860>)
 800dc8e:	400b      	ands	r3, r1
 800dc90:	4682      	mov	sl, r0
 800dc92:	468b      	mov	fp, r1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f47f ae05 	bne.w	800d8a4 <_strtod_l+0x454>
 800dc9a:	9a05      	ldr	r2, [sp, #20]
 800dc9c:	2322      	movs	r3, #34	@ 0x22
 800dc9e:	6013      	str	r3, [r2, #0]
 800dca0:	e600      	b.n	800d8a4 <_strtod_l+0x454>
 800dca2:	bf00      	nop
 800dca4:	0800f810 	.word	0x0800f810
 800dca8:	fffffc02 	.word	0xfffffc02
 800dcac:	39500000 	.word	0x39500000
 800dcb0:	7ff00000 	.word	0x7ff00000
 800dcb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dcb8:	d165      	bne.n	800dd86 <_strtod_l+0x936>
 800dcba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dcbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcc0:	b35a      	cbz	r2, 800dd1a <_strtod_l+0x8ca>
 800dcc2:	4a9f      	ldr	r2, [pc, #636]	@ (800df40 <_strtod_l+0xaf0>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d12b      	bne.n	800dd20 <_strtod_l+0x8d0>
 800dcc8:	9b08      	ldr	r3, [sp, #32]
 800dcca:	4651      	mov	r1, sl
 800dccc:	b303      	cbz	r3, 800dd10 <_strtod_l+0x8c0>
 800dcce:	4b9d      	ldr	r3, [pc, #628]	@ (800df44 <_strtod_l+0xaf4>)
 800dcd0:	465a      	mov	r2, fp
 800dcd2:	4013      	ands	r3, r2
 800dcd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dcd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcdc:	d81b      	bhi.n	800dd16 <_strtod_l+0x8c6>
 800dcde:	0d1b      	lsrs	r3, r3, #20
 800dce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dce4:	fa02 f303 	lsl.w	r3, r2, r3
 800dce8:	4299      	cmp	r1, r3
 800dcea:	d119      	bne.n	800dd20 <_strtod_l+0x8d0>
 800dcec:	4b96      	ldr	r3, [pc, #600]	@ (800df48 <_strtod_l+0xaf8>)
 800dcee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d102      	bne.n	800dcfa <_strtod_l+0x8aa>
 800dcf4:	3101      	adds	r1, #1
 800dcf6:	f43f adca 	beq.w	800d88e <_strtod_l+0x43e>
 800dcfa:	4b92      	ldr	r3, [pc, #584]	@ (800df44 <_strtod_l+0xaf4>)
 800dcfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcfe:	401a      	ands	r2, r3
 800dd00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dd04:	f04f 0a00 	mov.w	sl, #0
 800dd08:	9b08      	ldr	r3, [sp, #32]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1b8      	bne.n	800dc80 <_strtod_l+0x830>
 800dd0e:	e5c9      	b.n	800d8a4 <_strtod_l+0x454>
 800dd10:	f04f 33ff 	mov.w	r3, #4294967295
 800dd14:	e7e8      	b.n	800dce8 <_strtod_l+0x898>
 800dd16:	4613      	mov	r3, r2
 800dd18:	e7e6      	b.n	800dce8 <_strtod_l+0x898>
 800dd1a:	ea53 030a 	orrs.w	r3, r3, sl
 800dd1e:	d0a1      	beq.n	800dc64 <_strtod_l+0x814>
 800dd20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd22:	b1db      	cbz	r3, 800dd5c <_strtod_l+0x90c>
 800dd24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd26:	4213      	tst	r3, r2
 800dd28:	d0ee      	beq.n	800dd08 <_strtod_l+0x8b8>
 800dd2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd2c:	9a08      	ldr	r2, [sp, #32]
 800dd2e:	4650      	mov	r0, sl
 800dd30:	4659      	mov	r1, fp
 800dd32:	b1bb      	cbz	r3, 800dd64 <_strtod_l+0x914>
 800dd34:	f7ff fb6e 	bl	800d414 <sulp>
 800dd38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd3c:	ec53 2b10 	vmov	r2, r3, d0
 800dd40:	f7f2 fad4 	bl	80002ec <__adddf3>
 800dd44:	4682      	mov	sl, r0
 800dd46:	468b      	mov	fp, r1
 800dd48:	e7de      	b.n	800dd08 <_strtod_l+0x8b8>
 800dd4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd56:	f04f 3aff 	mov.w	sl, #4294967295
 800dd5a:	e7d5      	b.n	800dd08 <_strtod_l+0x8b8>
 800dd5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd5e:	ea13 0f0a 	tst.w	r3, sl
 800dd62:	e7e1      	b.n	800dd28 <_strtod_l+0x8d8>
 800dd64:	f7ff fb56 	bl	800d414 <sulp>
 800dd68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd6c:	ec53 2b10 	vmov	r2, r3, d0
 800dd70:	f7f2 faba 	bl	80002e8 <__aeabi_dsub>
 800dd74:	2200      	movs	r2, #0
 800dd76:	2300      	movs	r3, #0
 800dd78:	4682      	mov	sl, r0
 800dd7a:	468b      	mov	fp, r1
 800dd7c:	f7f2 fed4 	bl	8000b28 <__aeabi_dcmpeq>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d0c1      	beq.n	800dd08 <_strtod_l+0x8b8>
 800dd84:	e619      	b.n	800d9ba <_strtod_l+0x56a>
 800dd86:	4641      	mov	r1, r8
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f7ff facd 	bl	800d328 <__ratio>
 800dd8e:	ec57 6b10 	vmov	r6, r7, d0
 800dd92:	2200      	movs	r2, #0
 800dd94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd98:	4630      	mov	r0, r6
 800dd9a:	4639      	mov	r1, r7
 800dd9c:	f7f2 fed8 	bl	8000b50 <__aeabi_dcmple>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d06f      	beq.n	800de84 <_strtod_l+0xa34>
 800dda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d17a      	bne.n	800dea0 <_strtod_l+0xa50>
 800ddaa:	f1ba 0f00 	cmp.w	sl, #0
 800ddae:	d158      	bne.n	800de62 <_strtod_l+0xa12>
 800ddb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d15a      	bne.n	800de70 <_strtod_l+0xa20>
 800ddba:	4b64      	ldr	r3, [pc, #400]	@ (800df4c <_strtod_l+0xafc>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	f7f2 febb 	bl	8000b3c <__aeabi_dcmplt>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d159      	bne.n	800de7e <_strtod_l+0xa2e>
 800ddca:	4630      	mov	r0, r6
 800ddcc:	4639      	mov	r1, r7
 800ddce:	4b60      	ldr	r3, [pc, #384]	@ (800df50 <_strtod_l+0xb00>)
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f7f2 fc41 	bl	8000658 <__aeabi_dmul>
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	460f      	mov	r7, r1
 800ddda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ddde:	9606      	str	r6, [sp, #24]
 800dde0:	9307      	str	r3, [sp, #28]
 800dde2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dde6:	4d57      	ldr	r5, [pc, #348]	@ (800df44 <_strtod_l+0xaf4>)
 800dde8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ddec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddee:	401d      	ands	r5, r3
 800ddf0:	4b58      	ldr	r3, [pc, #352]	@ (800df54 <_strtod_l+0xb04>)
 800ddf2:	429d      	cmp	r5, r3
 800ddf4:	f040 80b2 	bne.w	800df5c <_strtod_l+0xb0c>
 800ddf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ddfe:	ec4b ab10 	vmov	d0, sl, fp
 800de02:	f7ff f9c9 	bl	800d198 <__ulp>
 800de06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de0a:	ec51 0b10 	vmov	r0, r1, d0
 800de0e:	f7f2 fc23 	bl	8000658 <__aeabi_dmul>
 800de12:	4652      	mov	r2, sl
 800de14:	465b      	mov	r3, fp
 800de16:	f7f2 fa69 	bl	80002ec <__adddf3>
 800de1a:	460b      	mov	r3, r1
 800de1c:	4949      	ldr	r1, [pc, #292]	@ (800df44 <_strtod_l+0xaf4>)
 800de1e:	4a4e      	ldr	r2, [pc, #312]	@ (800df58 <_strtod_l+0xb08>)
 800de20:	4019      	ands	r1, r3
 800de22:	4291      	cmp	r1, r2
 800de24:	4682      	mov	sl, r0
 800de26:	d942      	bls.n	800deae <_strtod_l+0xa5e>
 800de28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de2a:	4b47      	ldr	r3, [pc, #284]	@ (800df48 <_strtod_l+0xaf8>)
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d103      	bne.n	800de38 <_strtod_l+0x9e8>
 800de30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de32:	3301      	adds	r3, #1
 800de34:	f43f ad2b 	beq.w	800d88e <_strtod_l+0x43e>
 800de38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800df48 <_strtod_l+0xaf8>
 800de3c:	f04f 3aff 	mov.w	sl, #4294967295
 800de40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de42:	9805      	ldr	r0, [sp, #20]
 800de44:	f7fe fe74 	bl	800cb30 <_Bfree>
 800de48:	9805      	ldr	r0, [sp, #20]
 800de4a:	4649      	mov	r1, r9
 800de4c:	f7fe fe70 	bl	800cb30 <_Bfree>
 800de50:	9805      	ldr	r0, [sp, #20]
 800de52:	4641      	mov	r1, r8
 800de54:	f7fe fe6c 	bl	800cb30 <_Bfree>
 800de58:	9805      	ldr	r0, [sp, #20]
 800de5a:	4621      	mov	r1, r4
 800de5c:	f7fe fe68 	bl	800cb30 <_Bfree>
 800de60:	e618      	b.n	800da94 <_strtod_l+0x644>
 800de62:	f1ba 0f01 	cmp.w	sl, #1
 800de66:	d103      	bne.n	800de70 <_strtod_l+0xa20>
 800de68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f43f ada5 	beq.w	800d9ba <_strtod_l+0x56a>
 800de70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800df20 <_strtod_l+0xad0>
 800de74:	4f35      	ldr	r7, [pc, #212]	@ (800df4c <_strtod_l+0xafc>)
 800de76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de7a:	2600      	movs	r6, #0
 800de7c:	e7b1      	b.n	800dde2 <_strtod_l+0x992>
 800de7e:	4f34      	ldr	r7, [pc, #208]	@ (800df50 <_strtod_l+0xb00>)
 800de80:	2600      	movs	r6, #0
 800de82:	e7aa      	b.n	800ddda <_strtod_l+0x98a>
 800de84:	4b32      	ldr	r3, [pc, #200]	@ (800df50 <_strtod_l+0xb00>)
 800de86:	4630      	mov	r0, r6
 800de88:	4639      	mov	r1, r7
 800de8a:	2200      	movs	r2, #0
 800de8c:	f7f2 fbe4 	bl	8000658 <__aeabi_dmul>
 800de90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de92:	4606      	mov	r6, r0
 800de94:	460f      	mov	r7, r1
 800de96:	2b00      	cmp	r3, #0
 800de98:	d09f      	beq.n	800ddda <_strtod_l+0x98a>
 800de9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800de9e:	e7a0      	b.n	800dde2 <_strtod_l+0x992>
 800dea0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800df28 <_strtod_l+0xad8>
 800dea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dea8:	ec57 6b17 	vmov	r6, r7, d7
 800deac:	e799      	b.n	800dde2 <_strtod_l+0x992>
 800deae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800deb2:	9b08      	ldr	r3, [sp, #32]
 800deb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1c1      	bne.n	800de40 <_strtod_l+0x9f0>
 800debc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dec0:	0d1b      	lsrs	r3, r3, #20
 800dec2:	051b      	lsls	r3, r3, #20
 800dec4:	429d      	cmp	r5, r3
 800dec6:	d1bb      	bne.n	800de40 <_strtod_l+0x9f0>
 800dec8:	4630      	mov	r0, r6
 800deca:	4639      	mov	r1, r7
 800decc:	f7f2 ff24 	bl	8000d18 <__aeabi_d2lz>
 800ded0:	f7f2 fb94 	bl	80005fc <__aeabi_l2d>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4630      	mov	r0, r6
 800deda:	4639      	mov	r1, r7
 800dedc:	f7f2 fa04 	bl	80002e8 <__aeabi_dsub>
 800dee0:	460b      	mov	r3, r1
 800dee2:	4602      	mov	r2, r0
 800dee4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dee8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800deec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deee:	ea46 060a 	orr.w	r6, r6, sl
 800def2:	431e      	orrs	r6, r3
 800def4:	d06f      	beq.n	800dfd6 <_strtod_l+0xb86>
 800def6:	a30e      	add	r3, pc, #56	@ (adr r3, 800df30 <_strtod_l+0xae0>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	f7f2 fe1e 	bl	8000b3c <__aeabi_dcmplt>
 800df00:	2800      	cmp	r0, #0
 800df02:	f47f accf 	bne.w	800d8a4 <_strtod_l+0x454>
 800df06:	a30c      	add	r3, pc, #48	@ (adr r3, 800df38 <_strtod_l+0xae8>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df10:	f7f2 fe32 	bl	8000b78 <__aeabi_dcmpgt>
 800df14:	2800      	cmp	r0, #0
 800df16:	d093      	beq.n	800de40 <_strtod_l+0x9f0>
 800df18:	e4c4      	b.n	800d8a4 <_strtod_l+0x454>
 800df1a:	bf00      	nop
 800df1c:	f3af 8000 	nop.w
 800df20:	00000000 	.word	0x00000000
 800df24:	bff00000 	.word	0xbff00000
 800df28:	00000000 	.word	0x00000000
 800df2c:	3ff00000 	.word	0x3ff00000
 800df30:	94a03595 	.word	0x94a03595
 800df34:	3fdfffff 	.word	0x3fdfffff
 800df38:	35afe535 	.word	0x35afe535
 800df3c:	3fe00000 	.word	0x3fe00000
 800df40:	000fffff 	.word	0x000fffff
 800df44:	7ff00000 	.word	0x7ff00000
 800df48:	7fefffff 	.word	0x7fefffff
 800df4c:	3ff00000 	.word	0x3ff00000
 800df50:	3fe00000 	.word	0x3fe00000
 800df54:	7fe00000 	.word	0x7fe00000
 800df58:	7c9fffff 	.word	0x7c9fffff
 800df5c:	9b08      	ldr	r3, [sp, #32]
 800df5e:	b323      	cbz	r3, 800dfaa <_strtod_l+0xb5a>
 800df60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800df64:	d821      	bhi.n	800dfaa <_strtod_l+0xb5a>
 800df66:	a328      	add	r3, pc, #160	@ (adr r3, 800e008 <_strtod_l+0xbb8>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	4630      	mov	r0, r6
 800df6e:	4639      	mov	r1, r7
 800df70:	f7f2 fdee 	bl	8000b50 <__aeabi_dcmple>
 800df74:	b1a0      	cbz	r0, 800dfa0 <_strtod_l+0xb50>
 800df76:	4639      	mov	r1, r7
 800df78:	4630      	mov	r0, r6
 800df7a:	f7f2 fe45 	bl	8000c08 <__aeabi_d2uiz>
 800df7e:	2801      	cmp	r0, #1
 800df80:	bf38      	it	cc
 800df82:	2001      	movcc	r0, #1
 800df84:	f7f2 faee 	bl	8000564 <__aeabi_ui2d>
 800df88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df8a:	4606      	mov	r6, r0
 800df8c:	460f      	mov	r7, r1
 800df8e:	b9fb      	cbnz	r3, 800dfd0 <_strtod_l+0xb80>
 800df90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df94:	9014      	str	r0, [sp, #80]	@ 0x50
 800df96:	9315      	str	r3, [sp, #84]	@ 0x54
 800df98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800df9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dfa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dfa6:	1b5b      	subs	r3, r3, r5
 800dfa8:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfaa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dfae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dfb2:	f7ff f8f1 	bl	800d198 <__ulp>
 800dfb6:	4650      	mov	r0, sl
 800dfb8:	ec53 2b10 	vmov	r2, r3, d0
 800dfbc:	4659      	mov	r1, fp
 800dfbe:	f7f2 fb4b 	bl	8000658 <__aeabi_dmul>
 800dfc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dfc6:	f7f2 f991 	bl	80002ec <__adddf3>
 800dfca:	4682      	mov	sl, r0
 800dfcc:	468b      	mov	fp, r1
 800dfce:	e770      	b.n	800deb2 <_strtod_l+0xa62>
 800dfd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dfd4:	e7e0      	b.n	800df98 <_strtod_l+0xb48>
 800dfd6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e010 <_strtod_l+0xbc0>)
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	f7f2 fdae 	bl	8000b3c <__aeabi_dcmplt>
 800dfe0:	e798      	b.n	800df14 <_strtod_l+0xac4>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfe6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dfe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfea:	6013      	str	r3, [r2, #0]
 800dfec:	f7ff ba6d 	b.w	800d4ca <_strtod_l+0x7a>
 800dff0:	2a65      	cmp	r2, #101	@ 0x65
 800dff2:	f43f ab66 	beq.w	800d6c2 <_strtod_l+0x272>
 800dff6:	2a45      	cmp	r2, #69	@ 0x45
 800dff8:	f43f ab63 	beq.w	800d6c2 <_strtod_l+0x272>
 800dffc:	2301      	movs	r3, #1
 800dffe:	f7ff bb9e 	b.w	800d73e <_strtod_l+0x2ee>
 800e002:	bf00      	nop
 800e004:	f3af 8000 	nop.w
 800e008:	ffc00000 	.word	0xffc00000
 800e00c:	41dfffff 	.word	0x41dfffff
 800e010:	94a03595 	.word	0x94a03595
 800e014:	3fcfffff 	.word	0x3fcfffff

0800e018 <_strtod_r>:
 800e018:	4b01      	ldr	r3, [pc, #4]	@ (800e020 <_strtod_r+0x8>)
 800e01a:	f7ff ba19 	b.w	800d450 <_strtod_l>
 800e01e:	bf00      	nop
 800e020:	200001c8 	.word	0x200001c8

0800e024 <_strtol_l.constprop.0>:
 800e024:	2b24      	cmp	r3, #36	@ 0x24
 800e026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e02a:	4686      	mov	lr, r0
 800e02c:	4690      	mov	r8, r2
 800e02e:	d801      	bhi.n	800e034 <_strtol_l.constprop.0+0x10>
 800e030:	2b01      	cmp	r3, #1
 800e032:	d106      	bne.n	800e042 <_strtol_l.constprop.0+0x1e>
 800e034:	f7fd fdae 	bl	800bb94 <__errno>
 800e038:	2316      	movs	r3, #22
 800e03a:	6003      	str	r3, [r0, #0]
 800e03c:	2000      	movs	r0, #0
 800e03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e042:	4834      	ldr	r0, [pc, #208]	@ (800e114 <_strtol_l.constprop.0+0xf0>)
 800e044:	460d      	mov	r5, r1
 800e046:	462a      	mov	r2, r5
 800e048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e04c:	5d06      	ldrb	r6, [r0, r4]
 800e04e:	f016 0608 	ands.w	r6, r6, #8
 800e052:	d1f8      	bne.n	800e046 <_strtol_l.constprop.0+0x22>
 800e054:	2c2d      	cmp	r4, #45	@ 0x2d
 800e056:	d12d      	bne.n	800e0b4 <_strtol_l.constprop.0+0x90>
 800e058:	782c      	ldrb	r4, [r5, #0]
 800e05a:	2601      	movs	r6, #1
 800e05c:	1c95      	adds	r5, r2, #2
 800e05e:	f033 0210 	bics.w	r2, r3, #16
 800e062:	d109      	bne.n	800e078 <_strtol_l.constprop.0+0x54>
 800e064:	2c30      	cmp	r4, #48	@ 0x30
 800e066:	d12a      	bne.n	800e0be <_strtol_l.constprop.0+0x9a>
 800e068:	782a      	ldrb	r2, [r5, #0]
 800e06a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e06e:	2a58      	cmp	r2, #88	@ 0x58
 800e070:	d125      	bne.n	800e0be <_strtol_l.constprop.0+0x9a>
 800e072:	786c      	ldrb	r4, [r5, #1]
 800e074:	2310      	movs	r3, #16
 800e076:	3502      	adds	r5, #2
 800e078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e07c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e080:	2200      	movs	r2, #0
 800e082:	fbbc f9f3 	udiv	r9, ip, r3
 800e086:	4610      	mov	r0, r2
 800e088:	fb03 ca19 	mls	sl, r3, r9, ip
 800e08c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e090:	2f09      	cmp	r7, #9
 800e092:	d81b      	bhi.n	800e0cc <_strtol_l.constprop.0+0xa8>
 800e094:	463c      	mov	r4, r7
 800e096:	42a3      	cmp	r3, r4
 800e098:	dd27      	ble.n	800e0ea <_strtol_l.constprop.0+0xc6>
 800e09a:	1c57      	adds	r7, r2, #1
 800e09c:	d007      	beq.n	800e0ae <_strtol_l.constprop.0+0x8a>
 800e09e:	4581      	cmp	r9, r0
 800e0a0:	d320      	bcc.n	800e0e4 <_strtol_l.constprop.0+0xc0>
 800e0a2:	d101      	bne.n	800e0a8 <_strtol_l.constprop.0+0x84>
 800e0a4:	45a2      	cmp	sl, r4
 800e0a6:	db1d      	blt.n	800e0e4 <_strtol_l.constprop.0+0xc0>
 800e0a8:	fb00 4003 	mla	r0, r0, r3, r4
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0b2:	e7eb      	b.n	800e08c <_strtol_l.constprop.0+0x68>
 800e0b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800e0b6:	bf04      	itt	eq
 800e0b8:	782c      	ldrbeq	r4, [r5, #0]
 800e0ba:	1c95      	addeq	r5, r2, #2
 800e0bc:	e7cf      	b.n	800e05e <_strtol_l.constprop.0+0x3a>
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1da      	bne.n	800e078 <_strtol_l.constprop.0+0x54>
 800e0c2:	2c30      	cmp	r4, #48	@ 0x30
 800e0c4:	bf0c      	ite	eq
 800e0c6:	2308      	moveq	r3, #8
 800e0c8:	230a      	movne	r3, #10
 800e0ca:	e7d5      	b.n	800e078 <_strtol_l.constprop.0+0x54>
 800e0cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e0d0:	2f19      	cmp	r7, #25
 800e0d2:	d801      	bhi.n	800e0d8 <_strtol_l.constprop.0+0xb4>
 800e0d4:	3c37      	subs	r4, #55	@ 0x37
 800e0d6:	e7de      	b.n	800e096 <_strtol_l.constprop.0+0x72>
 800e0d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e0dc:	2f19      	cmp	r7, #25
 800e0de:	d804      	bhi.n	800e0ea <_strtol_l.constprop.0+0xc6>
 800e0e0:	3c57      	subs	r4, #87	@ 0x57
 800e0e2:	e7d8      	b.n	800e096 <_strtol_l.constprop.0+0x72>
 800e0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e8:	e7e1      	b.n	800e0ae <_strtol_l.constprop.0+0x8a>
 800e0ea:	1c53      	adds	r3, r2, #1
 800e0ec:	d108      	bne.n	800e100 <_strtol_l.constprop.0+0xdc>
 800e0ee:	2322      	movs	r3, #34	@ 0x22
 800e0f0:	f8ce 3000 	str.w	r3, [lr]
 800e0f4:	4660      	mov	r0, ip
 800e0f6:	f1b8 0f00 	cmp.w	r8, #0
 800e0fa:	d0a0      	beq.n	800e03e <_strtol_l.constprop.0+0x1a>
 800e0fc:	1e69      	subs	r1, r5, #1
 800e0fe:	e006      	b.n	800e10e <_strtol_l.constprop.0+0xea>
 800e100:	b106      	cbz	r6, 800e104 <_strtol_l.constprop.0+0xe0>
 800e102:	4240      	negs	r0, r0
 800e104:	f1b8 0f00 	cmp.w	r8, #0
 800e108:	d099      	beq.n	800e03e <_strtol_l.constprop.0+0x1a>
 800e10a:	2a00      	cmp	r2, #0
 800e10c:	d1f6      	bne.n	800e0fc <_strtol_l.constprop.0+0xd8>
 800e10e:	f8c8 1000 	str.w	r1, [r8]
 800e112:	e794      	b.n	800e03e <_strtol_l.constprop.0+0x1a>
 800e114:	0800f839 	.word	0x0800f839

0800e118 <_strtol_r>:
 800e118:	f7ff bf84 	b.w	800e024 <_strtol_l.constprop.0>

0800e11c <__ssputs_r>:
 800e11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e120:	688e      	ldr	r6, [r1, #8]
 800e122:	461f      	mov	r7, r3
 800e124:	42be      	cmp	r6, r7
 800e126:	680b      	ldr	r3, [r1, #0]
 800e128:	4682      	mov	sl, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4690      	mov	r8, r2
 800e12e:	d82d      	bhi.n	800e18c <__ssputs_r+0x70>
 800e130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e138:	d026      	beq.n	800e188 <__ssputs_r+0x6c>
 800e13a:	6965      	ldr	r5, [r4, #20]
 800e13c:	6909      	ldr	r1, [r1, #16]
 800e13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e142:	eba3 0901 	sub.w	r9, r3, r1
 800e146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e14a:	1c7b      	adds	r3, r7, #1
 800e14c:	444b      	add	r3, r9
 800e14e:	106d      	asrs	r5, r5, #1
 800e150:	429d      	cmp	r5, r3
 800e152:	bf38      	it	cc
 800e154:	461d      	movcc	r5, r3
 800e156:	0553      	lsls	r3, r2, #21
 800e158:	d527      	bpl.n	800e1aa <__ssputs_r+0x8e>
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7fe fc1c 	bl	800c998 <_malloc_r>
 800e160:	4606      	mov	r6, r0
 800e162:	b360      	cbz	r0, 800e1be <__ssputs_r+0xa2>
 800e164:	6921      	ldr	r1, [r4, #16]
 800e166:	464a      	mov	r2, r9
 800e168:	f7fd fd41 	bl	800bbee <memcpy>
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	6126      	str	r6, [r4, #16]
 800e17a:	6165      	str	r5, [r4, #20]
 800e17c:	444e      	add	r6, r9
 800e17e:	eba5 0509 	sub.w	r5, r5, r9
 800e182:	6026      	str	r6, [r4, #0]
 800e184:	60a5      	str	r5, [r4, #8]
 800e186:	463e      	mov	r6, r7
 800e188:	42be      	cmp	r6, r7
 800e18a:	d900      	bls.n	800e18e <__ssputs_r+0x72>
 800e18c:	463e      	mov	r6, r7
 800e18e:	6820      	ldr	r0, [r4, #0]
 800e190:	4632      	mov	r2, r6
 800e192:	4641      	mov	r1, r8
 800e194:	f000 f9c6 	bl	800e524 <memmove>
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	1b9b      	subs	r3, r3, r6
 800e19c:	60a3      	str	r3, [r4, #8]
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	4433      	add	r3, r6
 800e1a2:	6023      	str	r3, [r4, #0]
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	f000 fd7d 	bl	800ecaa <_realloc_r>
 800e1b0:	4606      	mov	r6, r0
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d1e0      	bne.n	800e178 <__ssputs_r+0x5c>
 800e1b6:	6921      	ldr	r1, [r4, #16]
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	f7fe fb79 	bl	800c8b0 <_free_r>
 800e1be:	230c      	movs	r3, #12
 800e1c0:	f8ca 3000 	str.w	r3, [sl]
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ca:	81a3      	strh	r3, [r4, #12]
 800e1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d0:	e7e9      	b.n	800e1a6 <__ssputs_r+0x8a>
	...

0800e1d4 <_svfiprintf_r>:
 800e1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d8:	4698      	mov	r8, r3
 800e1da:	898b      	ldrh	r3, [r1, #12]
 800e1dc:	061b      	lsls	r3, r3, #24
 800e1de:	b09d      	sub	sp, #116	@ 0x74
 800e1e0:	4607      	mov	r7, r0
 800e1e2:	460d      	mov	r5, r1
 800e1e4:	4614      	mov	r4, r2
 800e1e6:	d510      	bpl.n	800e20a <_svfiprintf_r+0x36>
 800e1e8:	690b      	ldr	r3, [r1, #16]
 800e1ea:	b973      	cbnz	r3, 800e20a <_svfiprintf_r+0x36>
 800e1ec:	2140      	movs	r1, #64	@ 0x40
 800e1ee:	f7fe fbd3 	bl	800c998 <_malloc_r>
 800e1f2:	6028      	str	r0, [r5, #0]
 800e1f4:	6128      	str	r0, [r5, #16]
 800e1f6:	b930      	cbnz	r0, 800e206 <_svfiprintf_r+0x32>
 800e1f8:	230c      	movs	r3, #12
 800e1fa:	603b      	str	r3, [r7, #0]
 800e1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e200:	b01d      	add	sp, #116	@ 0x74
 800e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e206:	2340      	movs	r3, #64	@ 0x40
 800e208:	616b      	str	r3, [r5, #20]
 800e20a:	2300      	movs	r3, #0
 800e20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e20e:	2320      	movs	r3, #32
 800e210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e214:	f8cd 800c 	str.w	r8, [sp, #12]
 800e218:	2330      	movs	r3, #48	@ 0x30
 800e21a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3b8 <_svfiprintf_r+0x1e4>
 800e21e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e222:	f04f 0901 	mov.w	r9, #1
 800e226:	4623      	mov	r3, r4
 800e228:	469a      	mov	sl, r3
 800e22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e22e:	b10a      	cbz	r2, 800e234 <_svfiprintf_r+0x60>
 800e230:	2a25      	cmp	r2, #37	@ 0x25
 800e232:	d1f9      	bne.n	800e228 <_svfiprintf_r+0x54>
 800e234:	ebba 0b04 	subs.w	fp, sl, r4
 800e238:	d00b      	beq.n	800e252 <_svfiprintf_r+0x7e>
 800e23a:	465b      	mov	r3, fp
 800e23c:	4622      	mov	r2, r4
 800e23e:	4629      	mov	r1, r5
 800e240:	4638      	mov	r0, r7
 800e242:	f7ff ff6b 	bl	800e11c <__ssputs_r>
 800e246:	3001      	adds	r0, #1
 800e248:	f000 80a7 	beq.w	800e39a <_svfiprintf_r+0x1c6>
 800e24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e24e:	445a      	add	r2, fp
 800e250:	9209      	str	r2, [sp, #36]	@ 0x24
 800e252:	f89a 3000 	ldrb.w	r3, [sl]
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 809f 	beq.w	800e39a <_svfiprintf_r+0x1c6>
 800e25c:	2300      	movs	r3, #0
 800e25e:	f04f 32ff 	mov.w	r2, #4294967295
 800e262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e266:	f10a 0a01 	add.w	sl, sl, #1
 800e26a:	9304      	str	r3, [sp, #16]
 800e26c:	9307      	str	r3, [sp, #28]
 800e26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e272:	931a      	str	r3, [sp, #104]	@ 0x68
 800e274:	4654      	mov	r4, sl
 800e276:	2205      	movs	r2, #5
 800e278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e27c:	484e      	ldr	r0, [pc, #312]	@ (800e3b8 <_svfiprintf_r+0x1e4>)
 800e27e:	f7f1 ffd7 	bl	8000230 <memchr>
 800e282:	9a04      	ldr	r2, [sp, #16]
 800e284:	b9d8      	cbnz	r0, 800e2be <_svfiprintf_r+0xea>
 800e286:	06d0      	lsls	r0, r2, #27
 800e288:	bf44      	itt	mi
 800e28a:	2320      	movmi	r3, #32
 800e28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e290:	0711      	lsls	r1, r2, #28
 800e292:	bf44      	itt	mi
 800e294:	232b      	movmi	r3, #43	@ 0x2b
 800e296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e29a:	f89a 3000 	ldrb.w	r3, [sl]
 800e29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2a0:	d015      	beq.n	800e2ce <_svfiprintf_r+0xfa>
 800e2a2:	9a07      	ldr	r2, [sp, #28]
 800e2a4:	4654      	mov	r4, sl
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	f04f 0c0a 	mov.w	ip, #10
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2b2:	3b30      	subs	r3, #48	@ 0x30
 800e2b4:	2b09      	cmp	r3, #9
 800e2b6:	d94b      	bls.n	800e350 <_svfiprintf_r+0x17c>
 800e2b8:	b1b0      	cbz	r0, 800e2e8 <_svfiprintf_r+0x114>
 800e2ba:	9207      	str	r2, [sp, #28]
 800e2bc:	e014      	b.n	800e2e8 <_svfiprintf_r+0x114>
 800e2be:	eba0 0308 	sub.w	r3, r0, r8
 800e2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	46a2      	mov	sl, r4
 800e2cc:	e7d2      	b.n	800e274 <_svfiprintf_r+0xa0>
 800e2ce:	9b03      	ldr	r3, [sp, #12]
 800e2d0:	1d19      	adds	r1, r3, #4
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	9103      	str	r1, [sp, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	bfbb      	ittet	lt
 800e2da:	425b      	neglt	r3, r3
 800e2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e2e0:	9307      	strge	r3, [sp, #28]
 800e2e2:	9307      	strlt	r3, [sp, #28]
 800e2e4:	bfb8      	it	lt
 800e2e6:	9204      	strlt	r2, [sp, #16]
 800e2e8:	7823      	ldrb	r3, [r4, #0]
 800e2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2ec:	d10a      	bne.n	800e304 <_svfiprintf_r+0x130>
 800e2ee:	7863      	ldrb	r3, [r4, #1]
 800e2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2f2:	d132      	bne.n	800e35a <_svfiprintf_r+0x186>
 800e2f4:	9b03      	ldr	r3, [sp, #12]
 800e2f6:	1d1a      	adds	r2, r3, #4
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	9203      	str	r2, [sp, #12]
 800e2fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e300:	3402      	adds	r4, #2
 800e302:	9305      	str	r3, [sp, #20]
 800e304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e3c8 <_svfiprintf_r+0x1f4>
 800e308:	7821      	ldrb	r1, [r4, #0]
 800e30a:	2203      	movs	r2, #3
 800e30c:	4650      	mov	r0, sl
 800e30e:	f7f1 ff8f 	bl	8000230 <memchr>
 800e312:	b138      	cbz	r0, 800e324 <_svfiprintf_r+0x150>
 800e314:	9b04      	ldr	r3, [sp, #16]
 800e316:	eba0 000a 	sub.w	r0, r0, sl
 800e31a:	2240      	movs	r2, #64	@ 0x40
 800e31c:	4082      	lsls	r2, r0
 800e31e:	4313      	orrs	r3, r2
 800e320:	3401      	adds	r4, #1
 800e322:	9304      	str	r3, [sp, #16]
 800e324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e328:	4824      	ldr	r0, [pc, #144]	@ (800e3bc <_svfiprintf_r+0x1e8>)
 800e32a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e32e:	2206      	movs	r2, #6
 800e330:	f7f1 ff7e 	bl	8000230 <memchr>
 800e334:	2800      	cmp	r0, #0
 800e336:	d036      	beq.n	800e3a6 <_svfiprintf_r+0x1d2>
 800e338:	4b21      	ldr	r3, [pc, #132]	@ (800e3c0 <_svfiprintf_r+0x1ec>)
 800e33a:	bb1b      	cbnz	r3, 800e384 <_svfiprintf_r+0x1b0>
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	3307      	adds	r3, #7
 800e340:	f023 0307 	bic.w	r3, r3, #7
 800e344:	3308      	adds	r3, #8
 800e346:	9303      	str	r3, [sp, #12]
 800e348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e34a:	4433      	add	r3, r6
 800e34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e34e:	e76a      	b.n	800e226 <_svfiprintf_r+0x52>
 800e350:	fb0c 3202 	mla	r2, ip, r2, r3
 800e354:	460c      	mov	r4, r1
 800e356:	2001      	movs	r0, #1
 800e358:	e7a8      	b.n	800e2ac <_svfiprintf_r+0xd8>
 800e35a:	2300      	movs	r3, #0
 800e35c:	3401      	adds	r4, #1
 800e35e:	9305      	str	r3, [sp, #20]
 800e360:	4619      	mov	r1, r3
 800e362:	f04f 0c0a 	mov.w	ip, #10
 800e366:	4620      	mov	r0, r4
 800e368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e36c:	3a30      	subs	r2, #48	@ 0x30
 800e36e:	2a09      	cmp	r2, #9
 800e370:	d903      	bls.n	800e37a <_svfiprintf_r+0x1a6>
 800e372:	2b00      	cmp	r3, #0
 800e374:	d0c6      	beq.n	800e304 <_svfiprintf_r+0x130>
 800e376:	9105      	str	r1, [sp, #20]
 800e378:	e7c4      	b.n	800e304 <_svfiprintf_r+0x130>
 800e37a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e37e:	4604      	mov	r4, r0
 800e380:	2301      	movs	r3, #1
 800e382:	e7f0      	b.n	800e366 <_svfiprintf_r+0x192>
 800e384:	ab03      	add	r3, sp, #12
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	462a      	mov	r2, r5
 800e38a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3c4 <_svfiprintf_r+0x1f0>)
 800e38c:	a904      	add	r1, sp, #16
 800e38e:	4638      	mov	r0, r7
 800e390:	f7fc fc54 	bl	800ac3c <_printf_float>
 800e394:	1c42      	adds	r2, r0, #1
 800e396:	4606      	mov	r6, r0
 800e398:	d1d6      	bne.n	800e348 <_svfiprintf_r+0x174>
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	065b      	lsls	r3, r3, #25
 800e39e:	f53f af2d 	bmi.w	800e1fc <_svfiprintf_r+0x28>
 800e3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3a4:	e72c      	b.n	800e200 <_svfiprintf_r+0x2c>
 800e3a6:	ab03      	add	r3, sp, #12
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	462a      	mov	r2, r5
 800e3ac:	4b05      	ldr	r3, [pc, #20]	@ (800e3c4 <_svfiprintf_r+0x1f0>)
 800e3ae:	a904      	add	r1, sp, #16
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f7fc fedb 	bl	800b16c <_printf_i>
 800e3b6:	e7ed      	b.n	800e394 <_svfiprintf_r+0x1c0>
 800e3b8:	0800f939 	.word	0x0800f939
 800e3bc:	0800f943 	.word	0x0800f943
 800e3c0:	0800ac3d 	.word	0x0800ac3d
 800e3c4:	0800e11d 	.word	0x0800e11d
 800e3c8:	0800f93f 	.word	0x0800f93f

0800e3cc <__sflush_r>:
 800e3cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d4:	0716      	lsls	r6, r2, #28
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	460c      	mov	r4, r1
 800e3da:	d454      	bmi.n	800e486 <__sflush_r+0xba>
 800e3dc:	684b      	ldr	r3, [r1, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	dc02      	bgt.n	800e3e8 <__sflush_r+0x1c>
 800e3e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	dd48      	ble.n	800e47a <__sflush_r+0xae>
 800e3e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e3ea:	2e00      	cmp	r6, #0
 800e3ec:	d045      	beq.n	800e47a <__sflush_r+0xae>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e3f4:	682f      	ldr	r7, [r5, #0]
 800e3f6:	6a21      	ldr	r1, [r4, #32]
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	d030      	beq.n	800e45e <__sflush_r+0x92>
 800e3fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e3fe:	89a3      	ldrh	r3, [r4, #12]
 800e400:	0759      	lsls	r1, r3, #29
 800e402:	d505      	bpl.n	800e410 <__sflush_r+0x44>
 800e404:	6863      	ldr	r3, [r4, #4]
 800e406:	1ad2      	subs	r2, r2, r3
 800e408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e40a:	b10b      	cbz	r3, 800e410 <__sflush_r+0x44>
 800e40c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e40e:	1ad2      	subs	r2, r2, r3
 800e410:	2300      	movs	r3, #0
 800e412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e414:	6a21      	ldr	r1, [r4, #32]
 800e416:	4628      	mov	r0, r5
 800e418:	47b0      	blx	r6
 800e41a:	1c43      	adds	r3, r0, #1
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	d106      	bne.n	800e42e <__sflush_r+0x62>
 800e420:	6829      	ldr	r1, [r5, #0]
 800e422:	291d      	cmp	r1, #29
 800e424:	d82b      	bhi.n	800e47e <__sflush_r+0xb2>
 800e426:	4a2a      	ldr	r2, [pc, #168]	@ (800e4d0 <__sflush_r+0x104>)
 800e428:	410a      	asrs	r2, r1
 800e42a:	07d6      	lsls	r6, r2, #31
 800e42c:	d427      	bmi.n	800e47e <__sflush_r+0xb2>
 800e42e:	2200      	movs	r2, #0
 800e430:	6062      	str	r2, [r4, #4]
 800e432:	04d9      	lsls	r1, r3, #19
 800e434:	6922      	ldr	r2, [r4, #16]
 800e436:	6022      	str	r2, [r4, #0]
 800e438:	d504      	bpl.n	800e444 <__sflush_r+0x78>
 800e43a:	1c42      	adds	r2, r0, #1
 800e43c:	d101      	bne.n	800e442 <__sflush_r+0x76>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	b903      	cbnz	r3, 800e444 <__sflush_r+0x78>
 800e442:	6560      	str	r0, [r4, #84]	@ 0x54
 800e444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e446:	602f      	str	r7, [r5, #0]
 800e448:	b1b9      	cbz	r1, 800e47a <__sflush_r+0xae>
 800e44a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e44e:	4299      	cmp	r1, r3
 800e450:	d002      	beq.n	800e458 <__sflush_r+0x8c>
 800e452:	4628      	mov	r0, r5
 800e454:	f7fe fa2c 	bl	800c8b0 <_free_r>
 800e458:	2300      	movs	r3, #0
 800e45a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e45c:	e00d      	b.n	800e47a <__sflush_r+0xae>
 800e45e:	2301      	movs	r3, #1
 800e460:	4628      	mov	r0, r5
 800e462:	47b0      	blx	r6
 800e464:	4602      	mov	r2, r0
 800e466:	1c50      	adds	r0, r2, #1
 800e468:	d1c9      	bne.n	800e3fe <__sflush_r+0x32>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d0c6      	beq.n	800e3fe <__sflush_r+0x32>
 800e470:	2b1d      	cmp	r3, #29
 800e472:	d001      	beq.n	800e478 <__sflush_r+0xac>
 800e474:	2b16      	cmp	r3, #22
 800e476:	d11e      	bne.n	800e4b6 <__sflush_r+0xea>
 800e478:	602f      	str	r7, [r5, #0]
 800e47a:	2000      	movs	r0, #0
 800e47c:	e022      	b.n	800e4c4 <__sflush_r+0xf8>
 800e47e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e482:	b21b      	sxth	r3, r3
 800e484:	e01b      	b.n	800e4be <__sflush_r+0xf2>
 800e486:	690f      	ldr	r7, [r1, #16]
 800e488:	2f00      	cmp	r7, #0
 800e48a:	d0f6      	beq.n	800e47a <__sflush_r+0xae>
 800e48c:	0793      	lsls	r3, r2, #30
 800e48e:	680e      	ldr	r6, [r1, #0]
 800e490:	bf08      	it	eq
 800e492:	694b      	ldreq	r3, [r1, #20]
 800e494:	600f      	str	r7, [r1, #0]
 800e496:	bf18      	it	ne
 800e498:	2300      	movne	r3, #0
 800e49a:	eba6 0807 	sub.w	r8, r6, r7
 800e49e:	608b      	str	r3, [r1, #8]
 800e4a0:	f1b8 0f00 	cmp.w	r8, #0
 800e4a4:	dde9      	ble.n	800e47a <__sflush_r+0xae>
 800e4a6:	6a21      	ldr	r1, [r4, #32]
 800e4a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e4aa:	4643      	mov	r3, r8
 800e4ac:	463a      	mov	r2, r7
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	47b0      	blx	r6
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	dc08      	bgt.n	800e4c8 <__sflush_r+0xfc>
 800e4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c8:	4407      	add	r7, r0
 800e4ca:	eba8 0800 	sub.w	r8, r8, r0
 800e4ce:	e7e7      	b.n	800e4a0 <__sflush_r+0xd4>
 800e4d0:	dfbffffe 	.word	0xdfbffffe

0800e4d4 <_fflush_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	690b      	ldr	r3, [r1, #16]
 800e4d8:	4605      	mov	r5, r0
 800e4da:	460c      	mov	r4, r1
 800e4dc:	b913      	cbnz	r3, 800e4e4 <_fflush_r+0x10>
 800e4de:	2500      	movs	r5, #0
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	bd38      	pop	{r3, r4, r5, pc}
 800e4e4:	b118      	cbz	r0, 800e4ee <_fflush_r+0x1a>
 800e4e6:	6a03      	ldr	r3, [r0, #32]
 800e4e8:	b90b      	cbnz	r3, 800e4ee <_fflush_r+0x1a>
 800e4ea:	f7fd f9ff 	bl	800b8ec <__sinit>
 800e4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0f3      	beq.n	800e4de <_fflush_r+0xa>
 800e4f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e4f8:	07d0      	lsls	r0, r2, #31
 800e4fa:	d404      	bmi.n	800e506 <_fflush_r+0x32>
 800e4fc:	0599      	lsls	r1, r3, #22
 800e4fe:	d402      	bmi.n	800e506 <_fflush_r+0x32>
 800e500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e502:	f7fd fb72 	bl	800bbea <__retarget_lock_acquire_recursive>
 800e506:	4628      	mov	r0, r5
 800e508:	4621      	mov	r1, r4
 800e50a:	f7ff ff5f 	bl	800e3cc <__sflush_r>
 800e50e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e510:	07da      	lsls	r2, r3, #31
 800e512:	4605      	mov	r5, r0
 800e514:	d4e4      	bmi.n	800e4e0 <_fflush_r+0xc>
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	059b      	lsls	r3, r3, #22
 800e51a:	d4e1      	bmi.n	800e4e0 <_fflush_r+0xc>
 800e51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e51e:	f7fd fb65 	bl	800bbec <__retarget_lock_release_recursive>
 800e522:	e7dd      	b.n	800e4e0 <_fflush_r+0xc>

0800e524 <memmove>:
 800e524:	4288      	cmp	r0, r1
 800e526:	b510      	push	{r4, lr}
 800e528:	eb01 0402 	add.w	r4, r1, r2
 800e52c:	d902      	bls.n	800e534 <memmove+0x10>
 800e52e:	4284      	cmp	r4, r0
 800e530:	4623      	mov	r3, r4
 800e532:	d807      	bhi.n	800e544 <memmove+0x20>
 800e534:	1e43      	subs	r3, r0, #1
 800e536:	42a1      	cmp	r1, r4
 800e538:	d008      	beq.n	800e54c <memmove+0x28>
 800e53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e53e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e542:	e7f8      	b.n	800e536 <memmove+0x12>
 800e544:	4402      	add	r2, r0
 800e546:	4601      	mov	r1, r0
 800e548:	428a      	cmp	r2, r1
 800e54a:	d100      	bne.n	800e54e <memmove+0x2a>
 800e54c:	bd10      	pop	{r4, pc}
 800e54e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e556:	e7f7      	b.n	800e548 <memmove+0x24>

0800e558 <strncmp>:
 800e558:	b510      	push	{r4, lr}
 800e55a:	b16a      	cbz	r2, 800e578 <strncmp+0x20>
 800e55c:	3901      	subs	r1, #1
 800e55e:	1884      	adds	r4, r0, r2
 800e560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e568:	429a      	cmp	r2, r3
 800e56a:	d103      	bne.n	800e574 <strncmp+0x1c>
 800e56c:	42a0      	cmp	r0, r4
 800e56e:	d001      	beq.n	800e574 <strncmp+0x1c>
 800e570:	2a00      	cmp	r2, #0
 800e572:	d1f5      	bne.n	800e560 <strncmp+0x8>
 800e574:	1ad0      	subs	r0, r2, r3
 800e576:	bd10      	pop	{r4, pc}
 800e578:	4610      	mov	r0, r2
 800e57a:	e7fc      	b.n	800e576 <strncmp+0x1e>

0800e57c <_sbrk_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4d06      	ldr	r5, [pc, #24]	@ (800e598 <_sbrk_r+0x1c>)
 800e580:	2300      	movs	r3, #0
 800e582:	4604      	mov	r4, r0
 800e584:	4608      	mov	r0, r1
 800e586:	602b      	str	r3, [r5, #0]
 800e588:	f7f4 febc 	bl	8003304 <_sbrk>
 800e58c:	1c43      	adds	r3, r0, #1
 800e58e:	d102      	bne.n	800e596 <_sbrk_r+0x1a>
 800e590:	682b      	ldr	r3, [r5, #0]
 800e592:	b103      	cbz	r3, 800e596 <_sbrk_r+0x1a>
 800e594:	6023      	str	r3, [r4, #0]
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	20005fd4 	.word	0x20005fd4
 800e59c:	00000000 	.word	0x00000000

0800e5a0 <nan>:
 800e5a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e5a8 <nan+0x8>
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	7ff80000 	.word	0x7ff80000

0800e5b0 <__assert_func>:
 800e5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5b2:	4614      	mov	r4, r2
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	4b09      	ldr	r3, [pc, #36]	@ (800e5dc <__assert_func+0x2c>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	68d8      	ldr	r0, [r3, #12]
 800e5be:	b954      	cbnz	r4, 800e5d6 <__assert_func+0x26>
 800e5c0:	4b07      	ldr	r3, [pc, #28]	@ (800e5e0 <__assert_func+0x30>)
 800e5c2:	461c      	mov	r4, r3
 800e5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5c8:	9100      	str	r1, [sp, #0]
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	4905      	ldr	r1, [pc, #20]	@ (800e5e4 <__assert_func+0x34>)
 800e5ce:	f000 fba7 	bl	800ed20 <fiprintf>
 800e5d2:	f000 fbb7 	bl	800ed44 <abort>
 800e5d6:	4b04      	ldr	r3, [pc, #16]	@ (800e5e8 <__assert_func+0x38>)
 800e5d8:	e7f4      	b.n	800e5c4 <__assert_func+0x14>
 800e5da:	bf00      	nop
 800e5dc:	20000178 	.word	0x20000178
 800e5e0:	0800f98d 	.word	0x0800f98d
 800e5e4:	0800f95f 	.word	0x0800f95f
 800e5e8:	0800f952 	.word	0x0800f952

0800e5ec <_calloc_r>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	fba1 5402 	umull	r5, r4, r1, r2
 800e5f2:	b93c      	cbnz	r4, 800e604 <_calloc_r+0x18>
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	f7fe f9cf 	bl	800c998 <_malloc_r>
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	b928      	cbnz	r0, 800e60a <_calloc_r+0x1e>
 800e5fe:	2600      	movs	r6, #0
 800e600:	4630      	mov	r0, r6
 800e602:	bd70      	pop	{r4, r5, r6, pc}
 800e604:	220c      	movs	r2, #12
 800e606:	6002      	str	r2, [r0, #0]
 800e608:	e7f9      	b.n	800e5fe <_calloc_r+0x12>
 800e60a:	462a      	mov	r2, r5
 800e60c:	4621      	mov	r1, r4
 800e60e:	f7fd fa06 	bl	800ba1e <memset>
 800e612:	e7f5      	b.n	800e600 <_calloc_r+0x14>

0800e614 <rshift>:
 800e614:	6903      	ldr	r3, [r0, #16]
 800e616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e61a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e61e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e622:	f100 0414 	add.w	r4, r0, #20
 800e626:	dd45      	ble.n	800e6b4 <rshift+0xa0>
 800e628:	f011 011f 	ands.w	r1, r1, #31
 800e62c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e634:	d10c      	bne.n	800e650 <rshift+0x3c>
 800e636:	f100 0710 	add.w	r7, r0, #16
 800e63a:	4629      	mov	r1, r5
 800e63c:	42b1      	cmp	r1, r6
 800e63e:	d334      	bcc.n	800e6aa <rshift+0x96>
 800e640:	1a9b      	subs	r3, r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	1eea      	subs	r2, r5, #3
 800e646:	4296      	cmp	r6, r2
 800e648:	bf38      	it	cc
 800e64a:	2300      	movcc	r3, #0
 800e64c:	4423      	add	r3, r4
 800e64e:	e015      	b.n	800e67c <rshift+0x68>
 800e650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e654:	f1c1 0820 	rsb	r8, r1, #32
 800e658:	40cf      	lsrs	r7, r1
 800e65a:	f105 0e04 	add.w	lr, r5, #4
 800e65e:	46a1      	mov	r9, r4
 800e660:	4576      	cmp	r6, lr
 800e662:	46f4      	mov	ip, lr
 800e664:	d815      	bhi.n	800e692 <rshift+0x7e>
 800e666:	1a9a      	subs	r2, r3, r2
 800e668:	0092      	lsls	r2, r2, #2
 800e66a:	3a04      	subs	r2, #4
 800e66c:	3501      	adds	r5, #1
 800e66e:	42ae      	cmp	r6, r5
 800e670:	bf38      	it	cc
 800e672:	2200      	movcc	r2, #0
 800e674:	18a3      	adds	r3, r4, r2
 800e676:	50a7      	str	r7, [r4, r2]
 800e678:	b107      	cbz	r7, 800e67c <rshift+0x68>
 800e67a:	3304      	adds	r3, #4
 800e67c:	1b1a      	subs	r2, r3, r4
 800e67e:	42a3      	cmp	r3, r4
 800e680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e684:	bf08      	it	eq
 800e686:	2300      	moveq	r3, #0
 800e688:	6102      	str	r2, [r0, #16]
 800e68a:	bf08      	it	eq
 800e68c:	6143      	streq	r3, [r0, #20]
 800e68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e692:	f8dc c000 	ldr.w	ip, [ip]
 800e696:	fa0c fc08 	lsl.w	ip, ip, r8
 800e69a:	ea4c 0707 	orr.w	r7, ip, r7
 800e69e:	f849 7b04 	str.w	r7, [r9], #4
 800e6a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6a6:	40cf      	lsrs	r7, r1
 800e6a8:	e7da      	b.n	800e660 <rshift+0x4c>
 800e6aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6b2:	e7c3      	b.n	800e63c <rshift+0x28>
 800e6b4:	4623      	mov	r3, r4
 800e6b6:	e7e1      	b.n	800e67c <rshift+0x68>

0800e6b8 <__hexdig_fun>:
 800e6b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e6bc:	2b09      	cmp	r3, #9
 800e6be:	d802      	bhi.n	800e6c6 <__hexdig_fun+0xe>
 800e6c0:	3820      	subs	r0, #32
 800e6c2:	b2c0      	uxtb	r0, r0
 800e6c4:	4770      	bx	lr
 800e6c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e6ca:	2b05      	cmp	r3, #5
 800e6cc:	d801      	bhi.n	800e6d2 <__hexdig_fun+0x1a>
 800e6ce:	3847      	subs	r0, #71	@ 0x47
 800e6d0:	e7f7      	b.n	800e6c2 <__hexdig_fun+0xa>
 800e6d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e6d6:	2b05      	cmp	r3, #5
 800e6d8:	d801      	bhi.n	800e6de <__hexdig_fun+0x26>
 800e6da:	3827      	subs	r0, #39	@ 0x27
 800e6dc:	e7f1      	b.n	800e6c2 <__hexdig_fun+0xa>
 800e6de:	2000      	movs	r0, #0
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <__gethex>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	b085      	sub	sp, #20
 800e6ea:	468a      	mov	sl, r1
 800e6ec:	9302      	str	r3, [sp, #8]
 800e6ee:	680b      	ldr	r3, [r1, #0]
 800e6f0:	9001      	str	r0, [sp, #4]
 800e6f2:	4690      	mov	r8, r2
 800e6f4:	1c9c      	adds	r4, r3, #2
 800e6f6:	46a1      	mov	r9, r4
 800e6f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e6fc:	2830      	cmp	r0, #48	@ 0x30
 800e6fe:	d0fa      	beq.n	800e6f6 <__gethex+0x12>
 800e700:	eba9 0303 	sub.w	r3, r9, r3
 800e704:	f1a3 0b02 	sub.w	fp, r3, #2
 800e708:	f7ff ffd6 	bl	800e6b8 <__hexdig_fun>
 800e70c:	4605      	mov	r5, r0
 800e70e:	2800      	cmp	r0, #0
 800e710:	d168      	bne.n	800e7e4 <__gethex+0x100>
 800e712:	49a0      	ldr	r1, [pc, #640]	@ (800e994 <__gethex+0x2b0>)
 800e714:	2201      	movs	r2, #1
 800e716:	4648      	mov	r0, r9
 800e718:	f7ff ff1e 	bl	800e558 <strncmp>
 800e71c:	4607      	mov	r7, r0
 800e71e:	2800      	cmp	r0, #0
 800e720:	d167      	bne.n	800e7f2 <__gethex+0x10e>
 800e722:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e726:	4626      	mov	r6, r4
 800e728:	f7ff ffc6 	bl	800e6b8 <__hexdig_fun>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d062      	beq.n	800e7f6 <__gethex+0x112>
 800e730:	4623      	mov	r3, r4
 800e732:	7818      	ldrb	r0, [r3, #0]
 800e734:	2830      	cmp	r0, #48	@ 0x30
 800e736:	4699      	mov	r9, r3
 800e738:	f103 0301 	add.w	r3, r3, #1
 800e73c:	d0f9      	beq.n	800e732 <__gethex+0x4e>
 800e73e:	f7ff ffbb 	bl	800e6b8 <__hexdig_fun>
 800e742:	fab0 f580 	clz	r5, r0
 800e746:	096d      	lsrs	r5, r5, #5
 800e748:	f04f 0b01 	mov.w	fp, #1
 800e74c:	464a      	mov	r2, r9
 800e74e:	4616      	mov	r6, r2
 800e750:	3201      	adds	r2, #1
 800e752:	7830      	ldrb	r0, [r6, #0]
 800e754:	f7ff ffb0 	bl	800e6b8 <__hexdig_fun>
 800e758:	2800      	cmp	r0, #0
 800e75a:	d1f8      	bne.n	800e74e <__gethex+0x6a>
 800e75c:	498d      	ldr	r1, [pc, #564]	@ (800e994 <__gethex+0x2b0>)
 800e75e:	2201      	movs	r2, #1
 800e760:	4630      	mov	r0, r6
 800e762:	f7ff fef9 	bl	800e558 <strncmp>
 800e766:	2800      	cmp	r0, #0
 800e768:	d13f      	bne.n	800e7ea <__gethex+0x106>
 800e76a:	b944      	cbnz	r4, 800e77e <__gethex+0x9a>
 800e76c:	1c74      	adds	r4, r6, #1
 800e76e:	4622      	mov	r2, r4
 800e770:	4616      	mov	r6, r2
 800e772:	3201      	adds	r2, #1
 800e774:	7830      	ldrb	r0, [r6, #0]
 800e776:	f7ff ff9f 	bl	800e6b8 <__hexdig_fun>
 800e77a:	2800      	cmp	r0, #0
 800e77c:	d1f8      	bne.n	800e770 <__gethex+0x8c>
 800e77e:	1ba4      	subs	r4, r4, r6
 800e780:	00a7      	lsls	r7, r4, #2
 800e782:	7833      	ldrb	r3, [r6, #0]
 800e784:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e788:	2b50      	cmp	r3, #80	@ 0x50
 800e78a:	d13e      	bne.n	800e80a <__gethex+0x126>
 800e78c:	7873      	ldrb	r3, [r6, #1]
 800e78e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e790:	d033      	beq.n	800e7fa <__gethex+0x116>
 800e792:	2b2d      	cmp	r3, #45	@ 0x2d
 800e794:	d034      	beq.n	800e800 <__gethex+0x11c>
 800e796:	1c71      	adds	r1, r6, #1
 800e798:	2400      	movs	r4, #0
 800e79a:	7808      	ldrb	r0, [r1, #0]
 800e79c:	f7ff ff8c 	bl	800e6b8 <__hexdig_fun>
 800e7a0:	1e43      	subs	r3, r0, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b18      	cmp	r3, #24
 800e7a6:	d830      	bhi.n	800e80a <__gethex+0x126>
 800e7a8:	f1a0 0210 	sub.w	r2, r0, #16
 800e7ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7b0:	f7ff ff82 	bl	800e6b8 <__hexdig_fun>
 800e7b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7b8:	fa5f fc8c 	uxtb.w	ip, ip
 800e7bc:	f1bc 0f18 	cmp.w	ip, #24
 800e7c0:	f04f 030a 	mov.w	r3, #10
 800e7c4:	d91e      	bls.n	800e804 <__gethex+0x120>
 800e7c6:	b104      	cbz	r4, 800e7ca <__gethex+0xe6>
 800e7c8:	4252      	negs	r2, r2
 800e7ca:	4417      	add	r7, r2
 800e7cc:	f8ca 1000 	str.w	r1, [sl]
 800e7d0:	b1ed      	cbz	r5, 800e80e <__gethex+0x12a>
 800e7d2:	f1bb 0f00 	cmp.w	fp, #0
 800e7d6:	bf0c      	ite	eq
 800e7d8:	2506      	moveq	r5, #6
 800e7da:	2500      	movne	r5, #0
 800e7dc:	4628      	mov	r0, r5
 800e7de:	b005      	add	sp, #20
 800e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e4:	2500      	movs	r5, #0
 800e7e6:	462c      	mov	r4, r5
 800e7e8:	e7b0      	b.n	800e74c <__gethex+0x68>
 800e7ea:	2c00      	cmp	r4, #0
 800e7ec:	d1c7      	bne.n	800e77e <__gethex+0x9a>
 800e7ee:	4627      	mov	r7, r4
 800e7f0:	e7c7      	b.n	800e782 <__gethex+0x9e>
 800e7f2:	464e      	mov	r6, r9
 800e7f4:	462f      	mov	r7, r5
 800e7f6:	2501      	movs	r5, #1
 800e7f8:	e7c3      	b.n	800e782 <__gethex+0x9e>
 800e7fa:	2400      	movs	r4, #0
 800e7fc:	1cb1      	adds	r1, r6, #2
 800e7fe:	e7cc      	b.n	800e79a <__gethex+0xb6>
 800e800:	2401      	movs	r4, #1
 800e802:	e7fb      	b.n	800e7fc <__gethex+0x118>
 800e804:	fb03 0002 	mla	r0, r3, r2, r0
 800e808:	e7ce      	b.n	800e7a8 <__gethex+0xc4>
 800e80a:	4631      	mov	r1, r6
 800e80c:	e7de      	b.n	800e7cc <__gethex+0xe8>
 800e80e:	eba6 0309 	sub.w	r3, r6, r9
 800e812:	3b01      	subs	r3, #1
 800e814:	4629      	mov	r1, r5
 800e816:	2b07      	cmp	r3, #7
 800e818:	dc0a      	bgt.n	800e830 <__gethex+0x14c>
 800e81a:	9801      	ldr	r0, [sp, #4]
 800e81c:	f7fe f948 	bl	800cab0 <_Balloc>
 800e820:	4604      	mov	r4, r0
 800e822:	b940      	cbnz	r0, 800e836 <__gethex+0x152>
 800e824:	4b5c      	ldr	r3, [pc, #368]	@ (800e998 <__gethex+0x2b4>)
 800e826:	4602      	mov	r2, r0
 800e828:	21e4      	movs	r1, #228	@ 0xe4
 800e82a:	485c      	ldr	r0, [pc, #368]	@ (800e99c <__gethex+0x2b8>)
 800e82c:	f7ff fec0 	bl	800e5b0 <__assert_func>
 800e830:	3101      	adds	r1, #1
 800e832:	105b      	asrs	r3, r3, #1
 800e834:	e7ef      	b.n	800e816 <__gethex+0x132>
 800e836:	f100 0a14 	add.w	sl, r0, #20
 800e83a:	2300      	movs	r3, #0
 800e83c:	4655      	mov	r5, sl
 800e83e:	469b      	mov	fp, r3
 800e840:	45b1      	cmp	r9, r6
 800e842:	d337      	bcc.n	800e8b4 <__gethex+0x1d0>
 800e844:	f845 bb04 	str.w	fp, [r5], #4
 800e848:	eba5 050a 	sub.w	r5, r5, sl
 800e84c:	10ad      	asrs	r5, r5, #2
 800e84e:	6125      	str	r5, [r4, #16]
 800e850:	4658      	mov	r0, fp
 800e852:	f7fe fa1f 	bl	800cc94 <__hi0bits>
 800e856:	016d      	lsls	r5, r5, #5
 800e858:	f8d8 6000 	ldr.w	r6, [r8]
 800e85c:	1a2d      	subs	r5, r5, r0
 800e85e:	42b5      	cmp	r5, r6
 800e860:	dd54      	ble.n	800e90c <__gethex+0x228>
 800e862:	1bad      	subs	r5, r5, r6
 800e864:	4629      	mov	r1, r5
 800e866:	4620      	mov	r0, r4
 800e868:	f7fe fdb3 	bl	800d3d2 <__any_on>
 800e86c:	4681      	mov	r9, r0
 800e86e:	b178      	cbz	r0, 800e890 <__gethex+0x1ac>
 800e870:	1e6b      	subs	r3, r5, #1
 800e872:	1159      	asrs	r1, r3, #5
 800e874:	f003 021f 	and.w	r2, r3, #31
 800e878:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e87c:	f04f 0901 	mov.w	r9, #1
 800e880:	fa09 f202 	lsl.w	r2, r9, r2
 800e884:	420a      	tst	r2, r1
 800e886:	d003      	beq.n	800e890 <__gethex+0x1ac>
 800e888:	454b      	cmp	r3, r9
 800e88a:	dc36      	bgt.n	800e8fa <__gethex+0x216>
 800e88c:	f04f 0902 	mov.w	r9, #2
 800e890:	4629      	mov	r1, r5
 800e892:	4620      	mov	r0, r4
 800e894:	f7ff febe 	bl	800e614 <rshift>
 800e898:	442f      	add	r7, r5
 800e89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e89e:	42bb      	cmp	r3, r7
 800e8a0:	da42      	bge.n	800e928 <__gethex+0x244>
 800e8a2:	9801      	ldr	r0, [sp, #4]
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	f7fe f943 	bl	800cb30 <_Bfree>
 800e8aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	25a3      	movs	r5, #163	@ 0xa3
 800e8b2:	e793      	b.n	800e7dc <__gethex+0xf8>
 800e8b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e8b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e8ba:	d012      	beq.n	800e8e2 <__gethex+0x1fe>
 800e8bc:	2b20      	cmp	r3, #32
 800e8be:	d104      	bne.n	800e8ca <__gethex+0x1e6>
 800e8c0:	f845 bb04 	str.w	fp, [r5], #4
 800e8c4:	f04f 0b00 	mov.w	fp, #0
 800e8c8:	465b      	mov	r3, fp
 800e8ca:	7830      	ldrb	r0, [r6, #0]
 800e8cc:	9303      	str	r3, [sp, #12]
 800e8ce:	f7ff fef3 	bl	800e6b8 <__hexdig_fun>
 800e8d2:	9b03      	ldr	r3, [sp, #12]
 800e8d4:	f000 000f 	and.w	r0, r0, #15
 800e8d8:	4098      	lsls	r0, r3
 800e8da:	ea4b 0b00 	orr.w	fp, fp, r0
 800e8de:	3304      	adds	r3, #4
 800e8e0:	e7ae      	b.n	800e840 <__gethex+0x15c>
 800e8e2:	45b1      	cmp	r9, r6
 800e8e4:	d8ea      	bhi.n	800e8bc <__gethex+0x1d8>
 800e8e6:	492b      	ldr	r1, [pc, #172]	@ (800e994 <__gethex+0x2b0>)
 800e8e8:	9303      	str	r3, [sp, #12]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	f7ff fe33 	bl	800e558 <strncmp>
 800e8f2:	9b03      	ldr	r3, [sp, #12]
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d1e1      	bne.n	800e8bc <__gethex+0x1d8>
 800e8f8:	e7a2      	b.n	800e840 <__gethex+0x15c>
 800e8fa:	1ea9      	subs	r1, r5, #2
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f7fe fd68 	bl	800d3d2 <__any_on>
 800e902:	2800      	cmp	r0, #0
 800e904:	d0c2      	beq.n	800e88c <__gethex+0x1a8>
 800e906:	f04f 0903 	mov.w	r9, #3
 800e90a:	e7c1      	b.n	800e890 <__gethex+0x1ac>
 800e90c:	da09      	bge.n	800e922 <__gethex+0x23e>
 800e90e:	1b75      	subs	r5, r6, r5
 800e910:	4621      	mov	r1, r4
 800e912:	9801      	ldr	r0, [sp, #4]
 800e914:	462a      	mov	r2, r5
 800e916:	f7fe fb23 	bl	800cf60 <__lshift>
 800e91a:	1b7f      	subs	r7, r7, r5
 800e91c:	4604      	mov	r4, r0
 800e91e:	f100 0a14 	add.w	sl, r0, #20
 800e922:	f04f 0900 	mov.w	r9, #0
 800e926:	e7b8      	b.n	800e89a <__gethex+0x1b6>
 800e928:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e92c:	42bd      	cmp	r5, r7
 800e92e:	dd6f      	ble.n	800ea10 <__gethex+0x32c>
 800e930:	1bed      	subs	r5, r5, r7
 800e932:	42ae      	cmp	r6, r5
 800e934:	dc34      	bgt.n	800e9a0 <__gethex+0x2bc>
 800e936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e93a:	2b02      	cmp	r3, #2
 800e93c:	d022      	beq.n	800e984 <__gethex+0x2a0>
 800e93e:	2b03      	cmp	r3, #3
 800e940:	d024      	beq.n	800e98c <__gethex+0x2a8>
 800e942:	2b01      	cmp	r3, #1
 800e944:	d115      	bne.n	800e972 <__gethex+0x28e>
 800e946:	42ae      	cmp	r6, r5
 800e948:	d113      	bne.n	800e972 <__gethex+0x28e>
 800e94a:	2e01      	cmp	r6, #1
 800e94c:	d10b      	bne.n	800e966 <__gethex+0x282>
 800e94e:	9a02      	ldr	r2, [sp, #8]
 800e950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e954:	6013      	str	r3, [r2, #0]
 800e956:	2301      	movs	r3, #1
 800e958:	6123      	str	r3, [r4, #16]
 800e95a:	f8ca 3000 	str.w	r3, [sl]
 800e95e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e960:	2562      	movs	r5, #98	@ 0x62
 800e962:	601c      	str	r4, [r3, #0]
 800e964:	e73a      	b.n	800e7dc <__gethex+0xf8>
 800e966:	1e71      	subs	r1, r6, #1
 800e968:	4620      	mov	r0, r4
 800e96a:	f7fe fd32 	bl	800d3d2 <__any_on>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d1ed      	bne.n	800e94e <__gethex+0x26a>
 800e972:	9801      	ldr	r0, [sp, #4]
 800e974:	4621      	mov	r1, r4
 800e976:	f7fe f8db 	bl	800cb30 <_Bfree>
 800e97a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e97c:	2300      	movs	r3, #0
 800e97e:	6013      	str	r3, [r2, #0]
 800e980:	2550      	movs	r5, #80	@ 0x50
 800e982:	e72b      	b.n	800e7dc <__gethex+0xf8>
 800e984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1f3      	bne.n	800e972 <__gethex+0x28e>
 800e98a:	e7e0      	b.n	800e94e <__gethex+0x26a>
 800e98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1dd      	bne.n	800e94e <__gethex+0x26a>
 800e992:	e7ee      	b.n	800e972 <__gethex+0x28e>
 800e994:	0800f7e0 	.word	0x0800f7e0
 800e998:	0800f675 	.word	0x0800f675
 800e99c:	0800f98e 	.word	0x0800f98e
 800e9a0:	1e6f      	subs	r7, r5, #1
 800e9a2:	f1b9 0f00 	cmp.w	r9, #0
 800e9a6:	d130      	bne.n	800ea0a <__gethex+0x326>
 800e9a8:	b127      	cbz	r7, 800e9b4 <__gethex+0x2d0>
 800e9aa:	4639      	mov	r1, r7
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f7fe fd10 	bl	800d3d2 <__any_on>
 800e9b2:	4681      	mov	r9, r0
 800e9b4:	117a      	asrs	r2, r7, #5
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9bc:	f007 071f 	and.w	r7, r7, #31
 800e9c0:	40bb      	lsls	r3, r7
 800e9c2:	4213      	tst	r3, r2
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	bf18      	it	ne
 800e9ca:	f049 0902 	orrne.w	r9, r9, #2
 800e9ce:	f7ff fe21 	bl	800e614 <rshift>
 800e9d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e9d6:	1b76      	subs	r6, r6, r5
 800e9d8:	2502      	movs	r5, #2
 800e9da:	f1b9 0f00 	cmp.w	r9, #0
 800e9de:	d047      	beq.n	800ea70 <__gethex+0x38c>
 800e9e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9e4:	2b02      	cmp	r3, #2
 800e9e6:	d015      	beq.n	800ea14 <__gethex+0x330>
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d017      	beq.n	800ea1c <__gethex+0x338>
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d109      	bne.n	800ea04 <__gethex+0x320>
 800e9f0:	f019 0f02 	tst.w	r9, #2
 800e9f4:	d006      	beq.n	800ea04 <__gethex+0x320>
 800e9f6:	f8da 3000 	ldr.w	r3, [sl]
 800e9fa:	ea49 0903 	orr.w	r9, r9, r3
 800e9fe:	f019 0f01 	tst.w	r9, #1
 800ea02:	d10e      	bne.n	800ea22 <__gethex+0x33e>
 800ea04:	f045 0510 	orr.w	r5, r5, #16
 800ea08:	e032      	b.n	800ea70 <__gethex+0x38c>
 800ea0a:	f04f 0901 	mov.w	r9, #1
 800ea0e:	e7d1      	b.n	800e9b4 <__gethex+0x2d0>
 800ea10:	2501      	movs	r5, #1
 800ea12:	e7e2      	b.n	800e9da <__gethex+0x2f6>
 800ea14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea16:	f1c3 0301 	rsb	r3, r3, #1
 800ea1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d0f0      	beq.n	800ea04 <__gethex+0x320>
 800ea22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea26:	f104 0314 	add.w	r3, r4, #20
 800ea2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea32:	f04f 0c00 	mov.w	ip, #0
 800ea36:	4618      	mov	r0, r3
 800ea38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ea40:	d01b      	beq.n	800ea7a <__gethex+0x396>
 800ea42:	3201      	adds	r2, #1
 800ea44:	6002      	str	r2, [r0, #0]
 800ea46:	2d02      	cmp	r5, #2
 800ea48:	f104 0314 	add.w	r3, r4, #20
 800ea4c:	d13c      	bne.n	800eac8 <__gethex+0x3e4>
 800ea4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ea52:	3a01      	subs	r2, #1
 800ea54:	42b2      	cmp	r2, r6
 800ea56:	d109      	bne.n	800ea6c <__gethex+0x388>
 800ea58:	1171      	asrs	r1, r6, #5
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea60:	f006 061f 	and.w	r6, r6, #31
 800ea64:	fa02 f606 	lsl.w	r6, r2, r6
 800ea68:	421e      	tst	r6, r3
 800ea6a:	d13a      	bne.n	800eae2 <__gethex+0x3fe>
 800ea6c:	f045 0520 	orr.w	r5, r5, #32
 800ea70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea72:	601c      	str	r4, [r3, #0]
 800ea74:	9b02      	ldr	r3, [sp, #8]
 800ea76:	601f      	str	r7, [r3, #0]
 800ea78:	e6b0      	b.n	800e7dc <__gethex+0xf8>
 800ea7a:	4299      	cmp	r1, r3
 800ea7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea80:	d8d9      	bhi.n	800ea36 <__gethex+0x352>
 800ea82:	68a3      	ldr	r3, [r4, #8]
 800ea84:	459b      	cmp	fp, r3
 800ea86:	db17      	blt.n	800eab8 <__gethex+0x3d4>
 800ea88:	6861      	ldr	r1, [r4, #4]
 800ea8a:	9801      	ldr	r0, [sp, #4]
 800ea8c:	3101      	adds	r1, #1
 800ea8e:	f7fe f80f 	bl	800cab0 <_Balloc>
 800ea92:	4681      	mov	r9, r0
 800ea94:	b918      	cbnz	r0, 800ea9e <__gethex+0x3ba>
 800ea96:	4b1a      	ldr	r3, [pc, #104]	@ (800eb00 <__gethex+0x41c>)
 800ea98:	4602      	mov	r2, r0
 800ea9a:	2184      	movs	r1, #132	@ 0x84
 800ea9c:	e6c5      	b.n	800e82a <__gethex+0x146>
 800ea9e:	6922      	ldr	r2, [r4, #16]
 800eaa0:	3202      	adds	r2, #2
 800eaa2:	f104 010c 	add.w	r1, r4, #12
 800eaa6:	0092      	lsls	r2, r2, #2
 800eaa8:	300c      	adds	r0, #12
 800eaaa:	f7fd f8a0 	bl	800bbee <memcpy>
 800eaae:	4621      	mov	r1, r4
 800eab0:	9801      	ldr	r0, [sp, #4]
 800eab2:	f7fe f83d 	bl	800cb30 <_Bfree>
 800eab6:	464c      	mov	r4, r9
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eac0:	6122      	str	r2, [r4, #16]
 800eac2:	2201      	movs	r2, #1
 800eac4:	615a      	str	r2, [r3, #20]
 800eac6:	e7be      	b.n	800ea46 <__gethex+0x362>
 800eac8:	6922      	ldr	r2, [r4, #16]
 800eaca:	455a      	cmp	r2, fp
 800eacc:	dd0b      	ble.n	800eae6 <__gethex+0x402>
 800eace:	2101      	movs	r1, #1
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7ff fd9f 	bl	800e614 <rshift>
 800ead6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eada:	3701      	adds	r7, #1
 800eadc:	42bb      	cmp	r3, r7
 800eade:	f6ff aee0 	blt.w	800e8a2 <__gethex+0x1be>
 800eae2:	2501      	movs	r5, #1
 800eae4:	e7c2      	b.n	800ea6c <__gethex+0x388>
 800eae6:	f016 061f 	ands.w	r6, r6, #31
 800eaea:	d0fa      	beq.n	800eae2 <__gethex+0x3fe>
 800eaec:	4453      	add	r3, sl
 800eaee:	f1c6 0620 	rsb	r6, r6, #32
 800eaf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eaf6:	f7fe f8cd 	bl	800cc94 <__hi0bits>
 800eafa:	42b0      	cmp	r0, r6
 800eafc:	dbe7      	blt.n	800eace <__gethex+0x3ea>
 800eafe:	e7f0      	b.n	800eae2 <__gethex+0x3fe>
 800eb00:	0800f675 	.word	0x0800f675

0800eb04 <L_shift>:
 800eb04:	f1c2 0208 	rsb	r2, r2, #8
 800eb08:	0092      	lsls	r2, r2, #2
 800eb0a:	b570      	push	{r4, r5, r6, lr}
 800eb0c:	f1c2 0620 	rsb	r6, r2, #32
 800eb10:	6843      	ldr	r3, [r0, #4]
 800eb12:	6804      	ldr	r4, [r0, #0]
 800eb14:	fa03 f506 	lsl.w	r5, r3, r6
 800eb18:	432c      	orrs	r4, r5
 800eb1a:	40d3      	lsrs	r3, r2
 800eb1c:	6004      	str	r4, [r0, #0]
 800eb1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb22:	4288      	cmp	r0, r1
 800eb24:	d3f4      	bcc.n	800eb10 <L_shift+0xc>
 800eb26:	bd70      	pop	{r4, r5, r6, pc}

0800eb28 <__match>:
 800eb28:	b530      	push	{r4, r5, lr}
 800eb2a:	6803      	ldr	r3, [r0, #0]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb32:	b914      	cbnz	r4, 800eb3a <__match+0x12>
 800eb34:	6003      	str	r3, [r0, #0]
 800eb36:	2001      	movs	r0, #1
 800eb38:	bd30      	pop	{r4, r5, pc}
 800eb3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eb42:	2d19      	cmp	r5, #25
 800eb44:	bf98      	it	ls
 800eb46:	3220      	addls	r2, #32
 800eb48:	42a2      	cmp	r2, r4
 800eb4a:	d0f0      	beq.n	800eb2e <__match+0x6>
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	e7f3      	b.n	800eb38 <__match+0x10>

0800eb50 <__hexnan>:
 800eb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb54:	680b      	ldr	r3, [r1, #0]
 800eb56:	6801      	ldr	r1, [r0, #0]
 800eb58:	115e      	asrs	r6, r3, #5
 800eb5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb5e:	f013 031f 	ands.w	r3, r3, #31
 800eb62:	b087      	sub	sp, #28
 800eb64:	bf18      	it	ne
 800eb66:	3604      	addne	r6, #4
 800eb68:	2500      	movs	r5, #0
 800eb6a:	1f37      	subs	r7, r6, #4
 800eb6c:	4682      	mov	sl, r0
 800eb6e:	4690      	mov	r8, r2
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb76:	46b9      	mov	r9, r7
 800eb78:	463c      	mov	r4, r7
 800eb7a:	9502      	str	r5, [sp, #8]
 800eb7c:	46ab      	mov	fp, r5
 800eb7e:	784a      	ldrb	r2, [r1, #1]
 800eb80:	1c4b      	adds	r3, r1, #1
 800eb82:	9303      	str	r3, [sp, #12]
 800eb84:	b342      	cbz	r2, 800ebd8 <__hexnan+0x88>
 800eb86:	4610      	mov	r0, r2
 800eb88:	9105      	str	r1, [sp, #20]
 800eb8a:	9204      	str	r2, [sp, #16]
 800eb8c:	f7ff fd94 	bl	800e6b8 <__hexdig_fun>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d151      	bne.n	800ec38 <__hexnan+0xe8>
 800eb94:	9a04      	ldr	r2, [sp, #16]
 800eb96:	9905      	ldr	r1, [sp, #20]
 800eb98:	2a20      	cmp	r2, #32
 800eb9a:	d818      	bhi.n	800ebce <__hexnan+0x7e>
 800eb9c:	9b02      	ldr	r3, [sp, #8]
 800eb9e:	459b      	cmp	fp, r3
 800eba0:	dd13      	ble.n	800ebca <__hexnan+0x7a>
 800eba2:	454c      	cmp	r4, r9
 800eba4:	d206      	bcs.n	800ebb4 <__hexnan+0x64>
 800eba6:	2d07      	cmp	r5, #7
 800eba8:	dc04      	bgt.n	800ebb4 <__hexnan+0x64>
 800ebaa:	462a      	mov	r2, r5
 800ebac:	4649      	mov	r1, r9
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f7ff ffa8 	bl	800eb04 <L_shift>
 800ebb4:	4544      	cmp	r4, r8
 800ebb6:	d952      	bls.n	800ec5e <__hexnan+0x10e>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f1a4 0904 	sub.w	r9, r4, #4
 800ebbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebc2:	f8cd b008 	str.w	fp, [sp, #8]
 800ebc6:	464c      	mov	r4, r9
 800ebc8:	461d      	mov	r5, r3
 800ebca:	9903      	ldr	r1, [sp, #12]
 800ebcc:	e7d7      	b.n	800eb7e <__hexnan+0x2e>
 800ebce:	2a29      	cmp	r2, #41	@ 0x29
 800ebd0:	d157      	bne.n	800ec82 <__hexnan+0x132>
 800ebd2:	3102      	adds	r1, #2
 800ebd4:	f8ca 1000 	str.w	r1, [sl]
 800ebd8:	f1bb 0f00 	cmp.w	fp, #0
 800ebdc:	d051      	beq.n	800ec82 <__hexnan+0x132>
 800ebde:	454c      	cmp	r4, r9
 800ebe0:	d206      	bcs.n	800ebf0 <__hexnan+0xa0>
 800ebe2:	2d07      	cmp	r5, #7
 800ebe4:	dc04      	bgt.n	800ebf0 <__hexnan+0xa0>
 800ebe6:	462a      	mov	r2, r5
 800ebe8:	4649      	mov	r1, r9
 800ebea:	4620      	mov	r0, r4
 800ebec:	f7ff ff8a 	bl	800eb04 <L_shift>
 800ebf0:	4544      	cmp	r4, r8
 800ebf2:	d936      	bls.n	800ec62 <__hexnan+0x112>
 800ebf4:	f1a8 0204 	sub.w	r2, r8, #4
 800ebf8:	4623      	mov	r3, r4
 800ebfa:	f853 1b04 	ldr.w	r1, [r3], #4
 800ebfe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec02:	429f      	cmp	r7, r3
 800ec04:	d2f9      	bcs.n	800ebfa <__hexnan+0xaa>
 800ec06:	1b3b      	subs	r3, r7, r4
 800ec08:	f023 0303 	bic.w	r3, r3, #3
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	3401      	adds	r4, #1
 800ec10:	3e03      	subs	r6, #3
 800ec12:	42b4      	cmp	r4, r6
 800ec14:	bf88      	it	hi
 800ec16:	2304      	movhi	r3, #4
 800ec18:	4443      	add	r3, r8
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f843 2b04 	str.w	r2, [r3], #4
 800ec20:	429f      	cmp	r7, r3
 800ec22:	d2fb      	bcs.n	800ec1c <__hexnan+0xcc>
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	b91b      	cbnz	r3, 800ec30 <__hexnan+0xe0>
 800ec28:	4547      	cmp	r7, r8
 800ec2a:	d128      	bne.n	800ec7e <__hexnan+0x12e>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	603b      	str	r3, [r7, #0]
 800ec30:	2005      	movs	r0, #5
 800ec32:	b007      	add	sp, #28
 800ec34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec38:	3501      	adds	r5, #1
 800ec3a:	2d08      	cmp	r5, #8
 800ec3c:	f10b 0b01 	add.w	fp, fp, #1
 800ec40:	dd06      	ble.n	800ec50 <__hexnan+0x100>
 800ec42:	4544      	cmp	r4, r8
 800ec44:	d9c1      	bls.n	800ebca <__hexnan+0x7a>
 800ec46:	2300      	movs	r3, #0
 800ec48:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec4c:	2501      	movs	r5, #1
 800ec4e:	3c04      	subs	r4, #4
 800ec50:	6822      	ldr	r2, [r4, #0]
 800ec52:	f000 000f 	and.w	r0, r0, #15
 800ec56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec5a:	6020      	str	r0, [r4, #0]
 800ec5c:	e7b5      	b.n	800ebca <__hexnan+0x7a>
 800ec5e:	2508      	movs	r5, #8
 800ec60:	e7b3      	b.n	800ebca <__hexnan+0x7a>
 800ec62:	9b01      	ldr	r3, [sp, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d0dd      	beq.n	800ec24 <__hexnan+0xd4>
 800ec68:	f1c3 0320 	rsb	r3, r3, #32
 800ec6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec70:	40da      	lsrs	r2, r3
 800ec72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ec76:	4013      	ands	r3, r2
 800ec78:	f846 3c04 	str.w	r3, [r6, #-4]
 800ec7c:	e7d2      	b.n	800ec24 <__hexnan+0xd4>
 800ec7e:	3f04      	subs	r7, #4
 800ec80:	e7d0      	b.n	800ec24 <__hexnan+0xd4>
 800ec82:	2004      	movs	r0, #4
 800ec84:	e7d5      	b.n	800ec32 <__hexnan+0xe2>

0800ec86 <__ascii_mbtowc>:
 800ec86:	b082      	sub	sp, #8
 800ec88:	b901      	cbnz	r1, 800ec8c <__ascii_mbtowc+0x6>
 800ec8a:	a901      	add	r1, sp, #4
 800ec8c:	b142      	cbz	r2, 800eca0 <__ascii_mbtowc+0x1a>
 800ec8e:	b14b      	cbz	r3, 800eca4 <__ascii_mbtowc+0x1e>
 800ec90:	7813      	ldrb	r3, [r2, #0]
 800ec92:	600b      	str	r3, [r1, #0]
 800ec94:	7812      	ldrb	r2, [r2, #0]
 800ec96:	1e10      	subs	r0, r2, #0
 800ec98:	bf18      	it	ne
 800ec9a:	2001      	movne	r0, #1
 800ec9c:	b002      	add	sp, #8
 800ec9e:	4770      	bx	lr
 800eca0:	4610      	mov	r0, r2
 800eca2:	e7fb      	b.n	800ec9c <__ascii_mbtowc+0x16>
 800eca4:	f06f 0001 	mvn.w	r0, #1
 800eca8:	e7f8      	b.n	800ec9c <__ascii_mbtowc+0x16>

0800ecaa <_realloc_r>:
 800ecaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecae:	4680      	mov	r8, r0
 800ecb0:	4615      	mov	r5, r2
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b921      	cbnz	r1, 800ecc0 <_realloc_r+0x16>
 800ecb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecba:	4611      	mov	r1, r2
 800ecbc:	f7fd be6c 	b.w	800c998 <_malloc_r>
 800ecc0:	b92a      	cbnz	r2, 800ecce <_realloc_r+0x24>
 800ecc2:	f7fd fdf5 	bl	800c8b0 <_free_r>
 800ecc6:	2400      	movs	r4, #0
 800ecc8:	4620      	mov	r0, r4
 800ecca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecce:	f000 f840 	bl	800ed52 <_malloc_usable_size_r>
 800ecd2:	4285      	cmp	r5, r0
 800ecd4:	4606      	mov	r6, r0
 800ecd6:	d802      	bhi.n	800ecde <_realloc_r+0x34>
 800ecd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ecdc:	d8f4      	bhi.n	800ecc8 <_realloc_r+0x1e>
 800ecde:	4629      	mov	r1, r5
 800ece0:	4640      	mov	r0, r8
 800ece2:	f7fd fe59 	bl	800c998 <_malloc_r>
 800ece6:	4607      	mov	r7, r0
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d0ec      	beq.n	800ecc6 <_realloc_r+0x1c>
 800ecec:	42b5      	cmp	r5, r6
 800ecee:	462a      	mov	r2, r5
 800ecf0:	4621      	mov	r1, r4
 800ecf2:	bf28      	it	cs
 800ecf4:	4632      	movcs	r2, r6
 800ecf6:	f7fc ff7a 	bl	800bbee <memcpy>
 800ecfa:	4621      	mov	r1, r4
 800ecfc:	4640      	mov	r0, r8
 800ecfe:	f7fd fdd7 	bl	800c8b0 <_free_r>
 800ed02:	463c      	mov	r4, r7
 800ed04:	e7e0      	b.n	800ecc8 <_realloc_r+0x1e>

0800ed06 <__ascii_wctomb>:
 800ed06:	4603      	mov	r3, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	b141      	cbz	r1, 800ed1e <__ascii_wctomb+0x18>
 800ed0c:	2aff      	cmp	r2, #255	@ 0xff
 800ed0e:	d904      	bls.n	800ed1a <__ascii_wctomb+0x14>
 800ed10:	228a      	movs	r2, #138	@ 0x8a
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	f04f 30ff 	mov.w	r0, #4294967295
 800ed18:	4770      	bx	lr
 800ed1a:	700a      	strb	r2, [r1, #0]
 800ed1c:	2001      	movs	r0, #1
 800ed1e:	4770      	bx	lr

0800ed20 <fiprintf>:
 800ed20:	b40e      	push	{r1, r2, r3}
 800ed22:	b503      	push	{r0, r1, lr}
 800ed24:	4601      	mov	r1, r0
 800ed26:	ab03      	add	r3, sp, #12
 800ed28:	4805      	ldr	r0, [pc, #20]	@ (800ed40 <fiprintf+0x20>)
 800ed2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed2e:	6800      	ldr	r0, [r0, #0]
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	f000 f83f 	bl	800edb4 <_vfiprintf_r>
 800ed36:	b002      	add	sp, #8
 800ed38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed3c:	b003      	add	sp, #12
 800ed3e:	4770      	bx	lr
 800ed40:	20000178 	.word	0x20000178

0800ed44 <abort>:
 800ed44:	b508      	push	{r3, lr}
 800ed46:	2006      	movs	r0, #6
 800ed48:	f000 fa08 	bl	800f15c <raise>
 800ed4c:	2001      	movs	r0, #1
 800ed4e:	f7f4 fa61 	bl	8003214 <_exit>

0800ed52 <_malloc_usable_size_r>:
 800ed52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed56:	1f18      	subs	r0, r3, #4
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	bfbc      	itt	lt
 800ed5c:	580b      	ldrlt	r3, [r1, r0]
 800ed5e:	18c0      	addlt	r0, r0, r3
 800ed60:	4770      	bx	lr

0800ed62 <__sfputc_r>:
 800ed62:	6893      	ldr	r3, [r2, #8]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	b410      	push	{r4}
 800ed6a:	6093      	str	r3, [r2, #8]
 800ed6c:	da08      	bge.n	800ed80 <__sfputc_r+0x1e>
 800ed6e:	6994      	ldr	r4, [r2, #24]
 800ed70:	42a3      	cmp	r3, r4
 800ed72:	db01      	blt.n	800ed78 <__sfputc_r+0x16>
 800ed74:	290a      	cmp	r1, #10
 800ed76:	d103      	bne.n	800ed80 <__sfputc_r+0x1e>
 800ed78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed7c:	f000 b932 	b.w	800efe4 <__swbuf_r>
 800ed80:	6813      	ldr	r3, [r2, #0]
 800ed82:	1c58      	adds	r0, r3, #1
 800ed84:	6010      	str	r0, [r2, #0]
 800ed86:	7019      	strb	r1, [r3, #0]
 800ed88:	4608      	mov	r0, r1
 800ed8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <__sfputs_r>:
 800ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed92:	4606      	mov	r6, r0
 800ed94:	460f      	mov	r7, r1
 800ed96:	4614      	mov	r4, r2
 800ed98:	18d5      	adds	r5, r2, r3
 800ed9a:	42ac      	cmp	r4, r5
 800ed9c:	d101      	bne.n	800eda2 <__sfputs_r+0x12>
 800ed9e:	2000      	movs	r0, #0
 800eda0:	e007      	b.n	800edb2 <__sfputs_r+0x22>
 800eda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda6:	463a      	mov	r2, r7
 800eda8:	4630      	mov	r0, r6
 800edaa:	f7ff ffda 	bl	800ed62 <__sfputc_r>
 800edae:	1c43      	adds	r3, r0, #1
 800edb0:	d1f3      	bne.n	800ed9a <__sfputs_r+0xa>
 800edb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edb4 <_vfiprintf_r>:
 800edb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb8:	460d      	mov	r5, r1
 800edba:	b09d      	sub	sp, #116	@ 0x74
 800edbc:	4614      	mov	r4, r2
 800edbe:	4698      	mov	r8, r3
 800edc0:	4606      	mov	r6, r0
 800edc2:	b118      	cbz	r0, 800edcc <_vfiprintf_r+0x18>
 800edc4:	6a03      	ldr	r3, [r0, #32]
 800edc6:	b90b      	cbnz	r3, 800edcc <_vfiprintf_r+0x18>
 800edc8:	f7fc fd90 	bl	800b8ec <__sinit>
 800edcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edce:	07d9      	lsls	r1, r3, #31
 800edd0:	d405      	bmi.n	800edde <_vfiprintf_r+0x2a>
 800edd2:	89ab      	ldrh	r3, [r5, #12]
 800edd4:	059a      	lsls	r2, r3, #22
 800edd6:	d402      	bmi.n	800edde <_vfiprintf_r+0x2a>
 800edd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edda:	f7fc ff06 	bl	800bbea <__retarget_lock_acquire_recursive>
 800edde:	89ab      	ldrh	r3, [r5, #12]
 800ede0:	071b      	lsls	r3, r3, #28
 800ede2:	d501      	bpl.n	800ede8 <_vfiprintf_r+0x34>
 800ede4:	692b      	ldr	r3, [r5, #16]
 800ede6:	b99b      	cbnz	r3, 800ee10 <_vfiprintf_r+0x5c>
 800ede8:	4629      	mov	r1, r5
 800edea:	4630      	mov	r0, r6
 800edec:	f000 f938 	bl	800f060 <__swsetup_r>
 800edf0:	b170      	cbz	r0, 800ee10 <_vfiprintf_r+0x5c>
 800edf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edf4:	07dc      	lsls	r4, r3, #31
 800edf6:	d504      	bpl.n	800ee02 <_vfiprintf_r+0x4e>
 800edf8:	f04f 30ff 	mov.w	r0, #4294967295
 800edfc:	b01d      	add	sp, #116	@ 0x74
 800edfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee02:	89ab      	ldrh	r3, [r5, #12]
 800ee04:	0598      	lsls	r0, r3, #22
 800ee06:	d4f7      	bmi.n	800edf8 <_vfiprintf_r+0x44>
 800ee08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee0a:	f7fc feef 	bl	800bbec <__retarget_lock_release_recursive>
 800ee0e:	e7f3      	b.n	800edf8 <_vfiprintf_r+0x44>
 800ee10:	2300      	movs	r3, #0
 800ee12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee14:	2320      	movs	r3, #32
 800ee16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee1e:	2330      	movs	r3, #48	@ 0x30
 800ee20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800efd0 <_vfiprintf_r+0x21c>
 800ee24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee28:	f04f 0901 	mov.w	r9, #1
 800ee2c:	4623      	mov	r3, r4
 800ee2e:	469a      	mov	sl, r3
 800ee30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee34:	b10a      	cbz	r2, 800ee3a <_vfiprintf_r+0x86>
 800ee36:	2a25      	cmp	r2, #37	@ 0x25
 800ee38:	d1f9      	bne.n	800ee2e <_vfiprintf_r+0x7a>
 800ee3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee3e:	d00b      	beq.n	800ee58 <_vfiprintf_r+0xa4>
 800ee40:	465b      	mov	r3, fp
 800ee42:	4622      	mov	r2, r4
 800ee44:	4629      	mov	r1, r5
 800ee46:	4630      	mov	r0, r6
 800ee48:	f7ff ffa2 	bl	800ed90 <__sfputs_r>
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	f000 80a7 	beq.w	800efa0 <_vfiprintf_r+0x1ec>
 800ee52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee54:	445a      	add	r2, fp
 800ee56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee58:	f89a 3000 	ldrb.w	r3, [sl]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f000 809f 	beq.w	800efa0 <_vfiprintf_r+0x1ec>
 800ee62:	2300      	movs	r3, #0
 800ee64:	f04f 32ff 	mov.w	r2, #4294967295
 800ee68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee6c:	f10a 0a01 	add.w	sl, sl, #1
 800ee70:	9304      	str	r3, [sp, #16]
 800ee72:	9307      	str	r3, [sp, #28]
 800ee74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee7a:	4654      	mov	r4, sl
 800ee7c:	2205      	movs	r2, #5
 800ee7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee82:	4853      	ldr	r0, [pc, #332]	@ (800efd0 <_vfiprintf_r+0x21c>)
 800ee84:	f7f1 f9d4 	bl	8000230 <memchr>
 800ee88:	9a04      	ldr	r2, [sp, #16]
 800ee8a:	b9d8      	cbnz	r0, 800eec4 <_vfiprintf_r+0x110>
 800ee8c:	06d1      	lsls	r1, r2, #27
 800ee8e:	bf44      	itt	mi
 800ee90:	2320      	movmi	r3, #32
 800ee92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee96:	0713      	lsls	r3, r2, #28
 800ee98:	bf44      	itt	mi
 800ee9a:	232b      	movmi	r3, #43	@ 0x2b
 800ee9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eea0:	f89a 3000 	ldrb.w	r3, [sl]
 800eea4:	2b2a      	cmp	r3, #42	@ 0x2a
 800eea6:	d015      	beq.n	800eed4 <_vfiprintf_r+0x120>
 800eea8:	9a07      	ldr	r2, [sp, #28]
 800eeaa:	4654      	mov	r4, sl
 800eeac:	2000      	movs	r0, #0
 800eeae:	f04f 0c0a 	mov.w	ip, #10
 800eeb2:	4621      	mov	r1, r4
 800eeb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeb8:	3b30      	subs	r3, #48	@ 0x30
 800eeba:	2b09      	cmp	r3, #9
 800eebc:	d94b      	bls.n	800ef56 <_vfiprintf_r+0x1a2>
 800eebe:	b1b0      	cbz	r0, 800eeee <_vfiprintf_r+0x13a>
 800eec0:	9207      	str	r2, [sp, #28]
 800eec2:	e014      	b.n	800eeee <_vfiprintf_r+0x13a>
 800eec4:	eba0 0308 	sub.w	r3, r0, r8
 800eec8:	fa09 f303 	lsl.w	r3, r9, r3
 800eecc:	4313      	orrs	r3, r2
 800eece:	9304      	str	r3, [sp, #16]
 800eed0:	46a2      	mov	sl, r4
 800eed2:	e7d2      	b.n	800ee7a <_vfiprintf_r+0xc6>
 800eed4:	9b03      	ldr	r3, [sp, #12]
 800eed6:	1d19      	adds	r1, r3, #4
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	9103      	str	r1, [sp, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	bfbb      	ittet	lt
 800eee0:	425b      	neglt	r3, r3
 800eee2:	f042 0202 	orrlt.w	r2, r2, #2
 800eee6:	9307      	strge	r3, [sp, #28]
 800eee8:	9307      	strlt	r3, [sp, #28]
 800eeea:	bfb8      	it	lt
 800eeec:	9204      	strlt	r2, [sp, #16]
 800eeee:	7823      	ldrb	r3, [r4, #0]
 800eef0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eef2:	d10a      	bne.n	800ef0a <_vfiprintf_r+0x156>
 800eef4:	7863      	ldrb	r3, [r4, #1]
 800eef6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eef8:	d132      	bne.n	800ef60 <_vfiprintf_r+0x1ac>
 800eefa:	9b03      	ldr	r3, [sp, #12]
 800eefc:	1d1a      	adds	r2, r3, #4
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	9203      	str	r2, [sp, #12]
 800ef02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef06:	3402      	adds	r4, #2
 800ef08:	9305      	str	r3, [sp, #20]
 800ef0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800efe0 <_vfiprintf_r+0x22c>
 800ef0e:	7821      	ldrb	r1, [r4, #0]
 800ef10:	2203      	movs	r2, #3
 800ef12:	4650      	mov	r0, sl
 800ef14:	f7f1 f98c 	bl	8000230 <memchr>
 800ef18:	b138      	cbz	r0, 800ef2a <_vfiprintf_r+0x176>
 800ef1a:	9b04      	ldr	r3, [sp, #16]
 800ef1c:	eba0 000a 	sub.w	r0, r0, sl
 800ef20:	2240      	movs	r2, #64	@ 0x40
 800ef22:	4082      	lsls	r2, r0
 800ef24:	4313      	orrs	r3, r2
 800ef26:	3401      	adds	r4, #1
 800ef28:	9304      	str	r3, [sp, #16]
 800ef2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef2e:	4829      	ldr	r0, [pc, #164]	@ (800efd4 <_vfiprintf_r+0x220>)
 800ef30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef34:	2206      	movs	r2, #6
 800ef36:	f7f1 f97b 	bl	8000230 <memchr>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d03f      	beq.n	800efbe <_vfiprintf_r+0x20a>
 800ef3e:	4b26      	ldr	r3, [pc, #152]	@ (800efd8 <_vfiprintf_r+0x224>)
 800ef40:	bb1b      	cbnz	r3, 800ef8a <_vfiprintf_r+0x1d6>
 800ef42:	9b03      	ldr	r3, [sp, #12]
 800ef44:	3307      	adds	r3, #7
 800ef46:	f023 0307 	bic.w	r3, r3, #7
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	9303      	str	r3, [sp, #12]
 800ef4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef50:	443b      	add	r3, r7
 800ef52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef54:	e76a      	b.n	800ee2c <_vfiprintf_r+0x78>
 800ef56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	2001      	movs	r0, #1
 800ef5e:	e7a8      	b.n	800eeb2 <_vfiprintf_r+0xfe>
 800ef60:	2300      	movs	r3, #0
 800ef62:	3401      	adds	r4, #1
 800ef64:	9305      	str	r3, [sp, #20]
 800ef66:	4619      	mov	r1, r3
 800ef68:	f04f 0c0a 	mov.w	ip, #10
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef72:	3a30      	subs	r2, #48	@ 0x30
 800ef74:	2a09      	cmp	r2, #9
 800ef76:	d903      	bls.n	800ef80 <_vfiprintf_r+0x1cc>
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d0c6      	beq.n	800ef0a <_vfiprintf_r+0x156>
 800ef7c:	9105      	str	r1, [sp, #20]
 800ef7e:	e7c4      	b.n	800ef0a <_vfiprintf_r+0x156>
 800ef80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef84:	4604      	mov	r4, r0
 800ef86:	2301      	movs	r3, #1
 800ef88:	e7f0      	b.n	800ef6c <_vfiprintf_r+0x1b8>
 800ef8a:	ab03      	add	r3, sp, #12
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	462a      	mov	r2, r5
 800ef90:	4b12      	ldr	r3, [pc, #72]	@ (800efdc <_vfiprintf_r+0x228>)
 800ef92:	a904      	add	r1, sp, #16
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7fb fe51 	bl	800ac3c <_printf_float>
 800ef9a:	4607      	mov	r7, r0
 800ef9c:	1c78      	adds	r0, r7, #1
 800ef9e:	d1d6      	bne.n	800ef4e <_vfiprintf_r+0x19a>
 800efa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efa2:	07d9      	lsls	r1, r3, #31
 800efa4:	d405      	bmi.n	800efb2 <_vfiprintf_r+0x1fe>
 800efa6:	89ab      	ldrh	r3, [r5, #12]
 800efa8:	059a      	lsls	r2, r3, #22
 800efaa:	d402      	bmi.n	800efb2 <_vfiprintf_r+0x1fe>
 800efac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efae:	f7fc fe1d 	bl	800bbec <__retarget_lock_release_recursive>
 800efb2:	89ab      	ldrh	r3, [r5, #12]
 800efb4:	065b      	lsls	r3, r3, #25
 800efb6:	f53f af1f 	bmi.w	800edf8 <_vfiprintf_r+0x44>
 800efba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efbc:	e71e      	b.n	800edfc <_vfiprintf_r+0x48>
 800efbe:	ab03      	add	r3, sp, #12
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	462a      	mov	r2, r5
 800efc4:	4b05      	ldr	r3, [pc, #20]	@ (800efdc <_vfiprintf_r+0x228>)
 800efc6:	a904      	add	r1, sp, #16
 800efc8:	4630      	mov	r0, r6
 800efca:	f7fc f8cf 	bl	800b16c <_printf_i>
 800efce:	e7e4      	b.n	800ef9a <_vfiprintf_r+0x1e6>
 800efd0:	0800f939 	.word	0x0800f939
 800efd4:	0800f943 	.word	0x0800f943
 800efd8:	0800ac3d 	.word	0x0800ac3d
 800efdc:	0800ed91 	.word	0x0800ed91
 800efe0:	0800f93f 	.word	0x0800f93f

0800efe4 <__swbuf_r>:
 800efe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe6:	460e      	mov	r6, r1
 800efe8:	4614      	mov	r4, r2
 800efea:	4605      	mov	r5, r0
 800efec:	b118      	cbz	r0, 800eff6 <__swbuf_r+0x12>
 800efee:	6a03      	ldr	r3, [r0, #32]
 800eff0:	b90b      	cbnz	r3, 800eff6 <__swbuf_r+0x12>
 800eff2:	f7fc fc7b 	bl	800b8ec <__sinit>
 800eff6:	69a3      	ldr	r3, [r4, #24]
 800eff8:	60a3      	str	r3, [r4, #8]
 800effa:	89a3      	ldrh	r3, [r4, #12]
 800effc:	071a      	lsls	r2, r3, #28
 800effe:	d501      	bpl.n	800f004 <__swbuf_r+0x20>
 800f000:	6923      	ldr	r3, [r4, #16]
 800f002:	b943      	cbnz	r3, 800f016 <__swbuf_r+0x32>
 800f004:	4621      	mov	r1, r4
 800f006:	4628      	mov	r0, r5
 800f008:	f000 f82a 	bl	800f060 <__swsetup_r>
 800f00c:	b118      	cbz	r0, 800f016 <__swbuf_r+0x32>
 800f00e:	f04f 37ff 	mov.w	r7, #4294967295
 800f012:	4638      	mov	r0, r7
 800f014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f016:	6823      	ldr	r3, [r4, #0]
 800f018:	6922      	ldr	r2, [r4, #16]
 800f01a:	1a98      	subs	r0, r3, r2
 800f01c:	6963      	ldr	r3, [r4, #20]
 800f01e:	b2f6      	uxtb	r6, r6
 800f020:	4283      	cmp	r3, r0
 800f022:	4637      	mov	r7, r6
 800f024:	dc05      	bgt.n	800f032 <__swbuf_r+0x4e>
 800f026:	4621      	mov	r1, r4
 800f028:	4628      	mov	r0, r5
 800f02a:	f7ff fa53 	bl	800e4d4 <_fflush_r>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d1ed      	bne.n	800f00e <__swbuf_r+0x2a>
 800f032:	68a3      	ldr	r3, [r4, #8]
 800f034:	3b01      	subs	r3, #1
 800f036:	60a3      	str	r3, [r4, #8]
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	1c5a      	adds	r2, r3, #1
 800f03c:	6022      	str	r2, [r4, #0]
 800f03e:	701e      	strb	r6, [r3, #0]
 800f040:	6962      	ldr	r2, [r4, #20]
 800f042:	1c43      	adds	r3, r0, #1
 800f044:	429a      	cmp	r2, r3
 800f046:	d004      	beq.n	800f052 <__swbuf_r+0x6e>
 800f048:	89a3      	ldrh	r3, [r4, #12]
 800f04a:	07db      	lsls	r3, r3, #31
 800f04c:	d5e1      	bpl.n	800f012 <__swbuf_r+0x2e>
 800f04e:	2e0a      	cmp	r6, #10
 800f050:	d1df      	bne.n	800f012 <__swbuf_r+0x2e>
 800f052:	4621      	mov	r1, r4
 800f054:	4628      	mov	r0, r5
 800f056:	f7ff fa3d 	bl	800e4d4 <_fflush_r>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d0d9      	beq.n	800f012 <__swbuf_r+0x2e>
 800f05e:	e7d6      	b.n	800f00e <__swbuf_r+0x2a>

0800f060 <__swsetup_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4b29      	ldr	r3, [pc, #164]	@ (800f108 <__swsetup_r+0xa8>)
 800f064:	4605      	mov	r5, r0
 800f066:	6818      	ldr	r0, [r3, #0]
 800f068:	460c      	mov	r4, r1
 800f06a:	b118      	cbz	r0, 800f074 <__swsetup_r+0x14>
 800f06c:	6a03      	ldr	r3, [r0, #32]
 800f06e:	b90b      	cbnz	r3, 800f074 <__swsetup_r+0x14>
 800f070:	f7fc fc3c 	bl	800b8ec <__sinit>
 800f074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f078:	0719      	lsls	r1, r3, #28
 800f07a:	d422      	bmi.n	800f0c2 <__swsetup_r+0x62>
 800f07c:	06da      	lsls	r2, r3, #27
 800f07e:	d407      	bmi.n	800f090 <__swsetup_r+0x30>
 800f080:	2209      	movs	r2, #9
 800f082:	602a      	str	r2, [r5, #0]
 800f084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	f04f 30ff 	mov.w	r0, #4294967295
 800f08e:	e033      	b.n	800f0f8 <__swsetup_r+0x98>
 800f090:	0758      	lsls	r0, r3, #29
 800f092:	d512      	bpl.n	800f0ba <__swsetup_r+0x5a>
 800f094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f096:	b141      	cbz	r1, 800f0aa <__swsetup_r+0x4a>
 800f098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f09c:	4299      	cmp	r1, r3
 800f09e:	d002      	beq.n	800f0a6 <__swsetup_r+0x46>
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	f7fd fc05 	bl	800c8b0 <_free_r>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0aa:	89a3      	ldrh	r3, [r4, #12]
 800f0ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0b0:	81a3      	strh	r3, [r4, #12]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	6063      	str	r3, [r4, #4]
 800f0b6:	6923      	ldr	r3, [r4, #16]
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	89a3      	ldrh	r3, [r4, #12]
 800f0bc:	f043 0308 	orr.w	r3, r3, #8
 800f0c0:	81a3      	strh	r3, [r4, #12]
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	b94b      	cbnz	r3, 800f0da <__swsetup_r+0x7a>
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0d0:	d003      	beq.n	800f0da <__swsetup_r+0x7a>
 800f0d2:	4621      	mov	r1, r4
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	f000 f883 	bl	800f1e0 <__smakebuf_r>
 800f0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0de:	f013 0201 	ands.w	r2, r3, #1
 800f0e2:	d00a      	beq.n	800f0fa <__swsetup_r+0x9a>
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	60a2      	str	r2, [r4, #8]
 800f0e8:	6962      	ldr	r2, [r4, #20]
 800f0ea:	4252      	negs	r2, r2
 800f0ec:	61a2      	str	r2, [r4, #24]
 800f0ee:	6922      	ldr	r2, [r4, #16]
 800f0f0:	b942      	cbnz	r2, 800f104 <__swsetup_r+0xa4>
 800f0f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0f6:	d1c5      	bne.n	800f084 <__swsetup_r+0x24>
 800f0f8:	bd38      	pop	{r3, r4, r5, pc}
 800f0fa:	0799      	lsls	r1, r3, #30
 800f0fc:	bf58      	it	pl
 800f0fe:	6962      	ldrpl	r2, [r4, #20]
 800f100:	60a2      	str	r2, [r4, #8]
 800f102:	e7f4      	b.n	800f0ee <__swsetup_r+0x8e>
 800f104:	2000      	movs	r0, #0
 800f106:	e7f7      	b.n	800f0f8 <__swsetup_r+0x98>
 800f108:	20000178 	.word	0x20000178

0800f10c <_raise_r>:
 800f10c:	291f      	cmp	r1, #31
 800f10e:	b538      	push	{r3, r4, r5, lr}
 800f110:	4605      	mov	r5, r0
 800f112:	460c      	mov	r4, r1
 800f114:	d904      	bls.n	800f120 <_raise_r+0x14>
 800f116:	2316      	movs	r3, #22
 800f118:	6003      	str	r3, [r0, #0]
 800f11a:	f04f 30ff 	mov.w	r0, #4294967295
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f122:	b112      	cbz	r2, 800f12a <_raise_r+0x1e>
 800f124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f128:	b94b      	cbnz	r3, 800f13e <_raise_r+0x32>
 800f12a:	4628      	mov	r0, r5
 800f12c:	f000 f830 	bl	800f190 <_getpid_r>
 800f130:	4622      	mov	r2, r4
 800f132:	4601      	mov	r1, r0
 800f134:	4628      	mov	r0, r5
 800f136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f13a:	f000 b817 	b.w	800f16c <_kill_r>
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d00a      	beq.n	800f158 <_raise_r+0x4c>
 800f142:	1c59      	adds	r1, r3, #1
 800f144:	d103      	bne.n	800f14e <_raise_r+0x42>
 800f146:	2316      	movs	r3, #22
 800f148:	6003      	str	r3, [r0, #0]
 800f14a:	2001      	movs	r0, #1
 800f14c:	e7e7      	b.n	800f11e <_raise_r+0x12>
 800f14e:	2100      	movs	r1, #0
 800f150:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f154:	4620      	mov	r0, r4
 800f156:	4798      	blx	r3
 800f158:	2000      	movs	r0, #0
 800f15a:	e7e0      	b.n	800f11e <_raise_r+0x12>

0800f15c <raise>:
 800f15c:	4b02      	ldr	r3, [pc, #8]	@ (800f168 <raise+0xc>)
 800f15e:	4601      	mov	r1, r0
 800f160:	6818      	ldr	r0, [r3, #0]
 800f162:	f7ff bfd3 	b.w	800f10c <_raise_r>
 800f166:	bf00      	nop
 800f168:	20000178 	.word	0x20000178

0800f16c <_kill_r>:
 800f16c:	b538      	push	{r3, r4, r5, lr}
 800f16e:	4d07      	ldr	r5, [pc, #28]	@ (800f18c <_kill_r+0x20>)
 800f170:	2300      	movs	r3, #0
 800f172:	4604      	mov	r4, r0
 800f174:	4608      	mov	r0, r1
 800f176:	4611      	mov	r1, r2
 800f178:	602b      	str	r3, [r5, #0]
 800f17a:	f7f4 f83b 	bl	80031f4 <_kill>
 800f17e:	1c43      	adds	r3, r0, #1
 800f180:	d102      	bne.n	800f188 <_kill_r+0x1c>
 800f182:	682b      	ldr	r3, [r5, #0]
 800f184:	b103      	cbz	r3, 800f188 <_kill_r+0x1c>
 800f186:	6023      	str	r3, [r4, #0]
 800f188:	bd38      	pop	{r3, r4, r5, pc}
 800f18a:	bf00      	nop
 800f18c:	20005fd4 	.word	0x20005fd4

0800f190 <_getpid_r>:
 800f190:	f7f4 b828 	b.w	80031e4 <_getpid>

0800f194 <__swhatbuf_r>:
 800f194:	b570      	push	{r4, r5, r6, lr}
 800f196:	460c      	mov	r4, r1
 800f198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f19c:	2900      	cmp	r1, #0
 800f19e:	b096      	sub	sp, #88	@ 0x58
 800f1a0:	4615      	mov	r5, r2
 800f1a2:	461e      	mov	r6, r3
 800f1a4:	da0d      	bge.n	800f1c2 <__swhatbuf_r+0x2e>
 800f1a6:	89a3      	ldrh	r3, [r4, #12]
 800f1a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1ac:	f04f 0100 	mov.w	r1, #0
 800f1b0:	bf14      	ite	ne
 800f1b2:	2340      	movne	r3, #64	@ 0x40
 800f1b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	6031      	str	r1, [r6, #0]
 800f1bc:	602b      	str	r3, [r5, #0]
 800f1be:	b016      	add	sp, #88	@ 0x58
 800f1c0:	bd70      	pop	{r4, r5, r6, pc}
 800f1c2:	466a      	mov	r2, sp
 800f1c4:	f000 f848 	bl	800f258 <_fstat_r>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	dbec      	blt.n	800f1a6 <__swhatbuf_r+0x12>
 800f1cc:	9901      	ldr	r1, [sp, #4]
 800f1ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f1d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f1d6:	4259      	negs	r1, r3
 800f1d8:	4159      	adcs	r1, r3
 800f1da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1de:	e7eb      	b.n	800f1b8 <__swhatbuf_r+0x24>

0800f1e0 <__smakebuf_r>:
 800f1e0:	898b      	ldrh	r3, [r1, #12]
 800f1e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1e4:	079d      	lsls	r5, r3, #30
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	460c      	mov	r4, r1
 800f1ea:	d507      	bpl.n	800f1fc <__smakebuf_r+0x1c>
 800f1ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	6123      	str	r3, [r4, #16]
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	6163      	str	r3, [r4, #20]
 800f1f8:	b003      	add	sp, #12
 800f1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1fc:	ab01      	add	r3, sp, #4
 800f1fe:	466a      	mov	r2, sp
 800f200:	f7ff ffc8 	bl	800f194 <__swhatbuf_r>
 800f204:	9f00      	ldr	r7, [sp, #0]
 800f206:	4605      	mov	r5, r0
 800f208:	4639      	mov	r1, r7
 800f20a:	4630      	mov	r0, r6
 800f20c:	f7fd fbc4 	bl	800c998 <_malloc_r>
 800f210:	b948      	cbnz	r0, 800f226 <__smakebuf_r+0x46>
 800f212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f216:	059a      	lsls	r2, r3, #22
 800f218:	d4ee      	bmi.n	800f1f8 <__smakebuf_r+0x18>
 800f21a:	f023 0303 	bic.w	r3, r3, #3
 800f21e:	f043 0302 	orr.w	r3, r3, #2
 800f222:	81a3      	strh	r3, [r4, #12]
 800f224:	e7e2      	b.n	800f1ec <__smakebuf_r+0xc>
 800f226:	89a3      	ldrh	r3, [r4, #12]
 800f228:	6020      	str	r0, [r4, #0]
 800f22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f22e:	81a3      	strh	r3, [r4, #12]
 800f230:	9b01      	ldr	r3, [sp, #4]
 800f232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f236:	b15b      	cbz	r3, 800f250 <__smakebuf_r+0x70>
 800f238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f23c:	4630      	mov	r0, r6
 800f23e:	f000 f81d 	bl	800f27c <_isatty_r>
 800f242:	b128      	cbz	r0, 800f250 <__smakebuf_r+0x70>
 800f244:	89a3      	ldrh	r3, [r4, #12]
 800f246:	f023 0303 	bic.w	r3, r3, #3
 800f24a:	f043 0301 	orr.w	r3, r3, #1
 800f24e:	81a3      	strh	r3, [r4, #12]
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	431d      	orrs	r5, r3
 800f254:	81a5      	strh	r5, [r4, #12]
 800f256:	e7cf      	b.n	800f1f8 <__smakebuf_r+0x18>

0800f258 <_fstat_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	4d07      	ldr	r5, [pc, #28]	@ (800f278 <_fstat_r+0x20>)
 800f25c:	2300      	movs	r3, #0
 800f25e:	4604      	mov	r4, r0
 800f260:	4608      	mov	r0, r1
 800f262:	4611      	mov	r1, r2
 800f264:	602b      	str	r3, [r5, #0]
 800f266:	f7f4 f825 	bl	80032b4 <_fstat>
 800f26a:	1c43      	adds	r3, r0, #1
 800f26c:	d102      	bne.n	800f274 <_fstat_r+0x1c>
 800f26e:	682b      	ldr	r3, [r5, #0]
 800f270:	b103      	cbz	r3, 800f274 <_fstat_r+0x1c>
 800f272:	6023      	str	r3, [r4, #0]
 800f274:	bd38      	pop	{r3, r4, r5, pc}
 800f276:	bf00      	nop
 800f278:	20005fd4 	.word	0x20005fd4

0800f27c <_isatty_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d06      	ldr	r5, [pc, #24]	@ (800f298 <_isatty_r+0x1c>)
 800f280:	2300      	movs	r3, #0
 800f282:	4604      	mov	r4, r0
 800f284:	4608      	mov	r0, r1
 800f286:	602b      	str	r3, [r5, #0]
 800f288:	f7f4 f824 	bl	80032d4 <_isatty>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d102      	bne.n	800f296 <_isatty_r+0x1a>
 800f290:	682b      	ldr	r3, [r5, #0]
 800f292:	b103      	cbz	r3, 800f296 <_isatty_r+0x1a>
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	20005fd4 	.word	0x20005fd4

0800f29c <_init>:
 800f29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29e:	bf00      	nop
 800f2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2a2:	bc08      	pop	{r3}
 800f2a4:	469e      	mov	lr, r3
 800f2a6:	4770      	bx	lr

0800f2a8 <_fini>:
 800f2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2aa:	bf00      	nop
 800f2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ae:	bc08      	pop	{r3}
 800f2b0:	469e      	mov	lr, r3
 800f2b2:	4770      	bx	lr
