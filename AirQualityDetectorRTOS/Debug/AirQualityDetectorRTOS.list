
AirQualityDetectorRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fac  08007fac  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007fac  08007fac  00008fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb4  08007fb4  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb4  08007fb4  00008fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fb8  08007fb8  00008fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007fbc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca0  20000060  0800801c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800801c  00009d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d33a  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de5  00000000  00000000  000263ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0002a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ed  00000000  00000000  0002b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e8a  00000000  00000000  0002caa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfd2  00000000  00000000  0003092f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010405c  00000000  00000000  0004d901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015195d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006338  00000000  00000000  001519a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00157cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e3c 	.word	0x08007e3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007e3c 	.word	0x08007e3c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 f83b 	bl	800157e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f874 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f986 	bl	800081c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000510:	f000 f8e0 	bl	80006d4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000514:	f000 f930 	bl	8000778 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f950 	bl	80007bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f004 faee 	bl	8004afc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RegimeMutex */
  RegimeMutexHandle = osMutexNew(&RegimeMutex_attributes);
 8000520:	481f      	ldr	r0, [pc, #124]	@ (80005a0 <main+0xa0>)
 8000522:	f004 fcc3 	bl	8004eac <osMutexNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a1e      	ldr	r2, [pc, #120]	@ (80005a4 <main+0xa4>)
 800052a:	6013      	str	r3, [r2, #0]

  /* creation of RefRateMutex */
  RefRateMutexHandle = osMutexNew(&RefRateMutex_attributes);
 800052c:	481e      	ldr	r0, [pc, #120]	@ (80005a8 <main+0xa8>)
 800052e:	f004 fcbd 	bl	8004eac <osMutexNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a1d      	ldr	r2, [pc, #116]	@ (80005ac <main+0xac>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8000538:	481d      	ldr	r0, [pc, #116]	@ (80005b0 <main+0xb0>)
 800053a:	f004 fcb7 	bl	8004eac <osMutexNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a1c      	ldr	r2, [pc, #112]	@ (80005b4 <main+0xb4>)
 8000542:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of LEDTimer */
  LEDTimerHandle = osTimerNew(LEDTimerCallback, osTimerPeriodic, NULL, &LEDTimer_attributes);
 8000544:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <main+0xb8>)
 8000546:	2200      	movs	r2, #0
 8000548:	2101      	movs	r1, #1
 800054a:	481c      	ldr	r0, [pc, #112]	@ (80005bc <main+0xbc>)
 800054c:	f004 fc2a 	bl	8004da4 <osTimerNew>
 8000550:	4603      	mov	r3, r0
 8000552:	4a1b      	ldr	r2, [pc, #108]	@ (80005c0 <main+0xc0>)
 8000554:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTimer */
  TransmitTimerHandle = osTimerNew(TransmitTimerCallback, osTimerPeriodic, NULL, &TransmitTimer_attributes);
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <main+0xc4>)
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	481a      	ldr	r0, [pc, #104]	@ (80005c8 <main+0xc8>)
 800055e:	f004 fc21 	bl	8004da4 <osTimerNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a19      	ldr	r2, [pc, #100]	@ (80005cc <main+0xcc>)
 8000566:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8000568:	4a19      	ldr	r2, [pc, #100]	@ (80005d0 <main+0xd0>)
 800056a:	2100      	movs	r1, #0
 800056c:	4819      	ldr	r0, [pc, #100]	@ (80005d4 <main+0xd4>)
 800056e:	f004 fb2f 	bl	8004bd0 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <main+0xd8>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of TerminalTask */
  TerminalTaskHandle = osThreadNew(StartTerminalTask, NULL, &TerminalTask_attributes);
 8000578:	4a18      	ldr	r2, [pc, #96]	@ (80005dc <main+0xdc>)
 800057a:	2100      	movs	r1, #0
 800057c:	4818      	ldr	r0, [pc, #96]	@ (80005e0 <main+0xe0>)
 800057e:	f004 fb27 	bl	8004bd0 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <main+0xe4>)
 8000586:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 8000588:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <main+0xe8>)
 800058a:	2100      	movs	r1, #0
 800058c:	4817      	ldr	r0, [pc, #92]	@ (80005ec <main+0xec>)
 800058e:	f004 fb1f 	bl	8004bd0 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a16      	ldr	r2, [pc, #88]	@ (80005f0 <main+0xf0>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f004 fae4 	bl	8004b64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <main+0x9c>
 80005a0:	08007f64 	.word	0x08007f64
 80005a4:	20000184 	.word	0x20000184
 80005a8:	08007f74 	.word	0x08007f74
 80005ac:	20000188 	.word	0x20000188
 80005b0:	08007f84 	.word	0x08007f84
 80005b4:	2000018c 	.word	0x2000018c
 80005b8:	08007f44 	.word	0x08007f44
 80005bc:	08001105 	.word	0x08001105
 80005c0:	2000017c 	.word	0x2000017c
 80005c4:	08007f54 	.word	0x08007f54
 80005c8:	08001119 	.word	0x08001119
 80005cc:	20000180 	.word	0x20000180
 80005d0:	08007ed8 	.word	0x08007ed8
 80005d4:	080010d5 	.word	0x080010d5
 80005d8:	20000170 	.word	0x20000170
 80005dc:	08007efc 	.word	0x08007efc
 80005e0:	080010e5 	.word	0x080010e5
 80005e4:	20000174 	.word	0x20000174
 80005e8:	08007f20 	.word	0x08007f20
 80005ec:	080010f5 	.word	0x080010f5
 80005f0:	20000178 	.word	0x20000178

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 fb32 	bl	8007c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f001 fe96 	bl	8002348 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <SystemClock_Config+0xd8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a2a      	ldr	r2, [pc, #168]	@ (80006cc <SystemClock_Config+0xd8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <SystemClock_Config+0xd8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <SystemClock_Config+0xdc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a25      	ldr	r2, [pc, #148]	@ (80006d0 <SystemClock_Config+0xdc>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <SystemClock_Config+0xdc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000660:	2319      	movs	r3, #25
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000664:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800066e:	2309      	movs	r3, #9
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fec6 	bl	8002408 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000682:	f000 fd65 	bl	8001150 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000686:	f001 fe6f 	bl	8002368 <HAL_PWREx_EnableOverDrive>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000690:	f000 fd5e 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2106      	movs	r1, #6
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f94c 	bl	8002950 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006be:	f000 fd47 	bl	8001150 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_ADC3_Init+0x98>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <MX_ADC3_Init+0x9c>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_ADC3_Init+0x98>)
 80006ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_ADC3_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_ADC3_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_ADC3_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_ADC3_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_ADC3_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_ADC3_Init+0x98>)
 8000716:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <MX_ADC3_Init+0xa0>)
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_ADC3_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_ADC3_Init+0x98>)
 8000722:	2201      	movs	r2, #1
 8000724:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_ADC3_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_ADC3_Init+0x98>)
 8000730:	2201      	movs	r2, #1
 8000732:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000734:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_ADC3_Init+0x98>)
 8000736:	f000 ff4f 	bl	80015d8 <HAL_ADC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000740:	f000 fd06 	bl	8001150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000748:	2301      	movs	r3, #1
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_ADC3_Init+0x98>)
 8000756:	f000 ff83 	bl	8001660 <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000760:	f000 fcf6 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000007c 	.word	0x2000007c
 8000770:	40012200 	.word	0x40012200
 8000774:	0f000001 	.word	0x0f000001

08000778 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_CRC_Init+0x3c>)
 800077e:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <MX_CRC_Init+0x40>)
 8000780:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_CRC_Init+0x3c>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_CRC_Init+0x3c>)
 800078a:	2200      	movs	r2, #0
 800078c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_CRC_Init+0x3c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_CRC_Init+0x3c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_CRC_Init+0x3c>)
 800079c:	2201      	movs	r2, #1
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_CRC_Init+0x3c>)
 80007a2:	f001 fa8f 	bl	8001cc4 <HAL_CRC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007ac:	f000 fcd0 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000c4 	.word	0x200000c4
 80007b8:	40023000 	.word	0x40023000

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_USART1_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART1_UART_Init+0x58>)
 8000800:	f003 f98e 	bl	8003b20 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 fca1 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000e8 	.word	0x200000e8
 8000818:	40011000 	.word	0x40011000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b090      	sub	sp, #64	@ 0x40
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	4baf      	ldr	r3, [pc, #700]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4aae      	ldr	r2, [pc, #696]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000838:	f043 0310 	orr.w	r3, r3, #16
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4bac      	ldr	r3, [pc, #688]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4ba9      	ldr	r3, [pc, #676]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4aa8      	ldr	r2, [pc, #672]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4ba6      	ldr	r3, [pc, #664]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4ba3      	ldr	r3, [pc, #652]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4aa2      	ldr	r2, [pc, #648]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4ba0      	ldr	r3, [pc, #640]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	623b      	str	r3, [r7, #32]
 8000878:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	4b9d      	ldr	r3, [pc, #628]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a9c      	ldr	r2, [pc, #624]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b9a      	ldr	r3, [pc, #616]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	61fb      	str	r3, [r7, #28]
 8000890:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b97      	ldr	r3, [pc, #604]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a96      	ldr	r2, [pc, #600]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b94      	ldr	r3, [pc, #592]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b91      	ldr	r3, [pc, #580]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a90      	ldr	r2, [pc, #576]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b8e      	ldr	r3, [pc, #568]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80008c2:	4b8b      	ldr	r3, [pc, #556]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a8a      	ldr	r2, [pc, #552]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b88      	ldr	r3, [pc, #544]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008da:	4b85      	ldr	r3, [pc, #532]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a84      	ldr	r2, [pc, #528]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b82      	ldr	r3, [pc, #520]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008f2:	4b7f      	ldr	r3, [pc, #508]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a7e      	ldr	r2, [pc, #504]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 80008f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b7c      	ldr	r3, [pc, #496]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b79      	ldr	r3, [pc, #484]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a78      	ldr	r2, [pc, #480]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b76      	ldr	r3, [pc, #472]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b73      	ldr	r3, [pc, #460]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a72      	ldr	r2, [pc, #456]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b70      	ldr	r3, [pc, #448]	@ (8000af0 <MX_GPIO_Init+0x2d4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2110      	movs	r1, #16
 800093e:	486d      	ldr	r0, [pc, #436]	@ (8000af4 <MX_GPIO_Init+0x2d8>)
 8000940:	f001 fce8 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2120      	movs	r1, #32
 8000948:	486b      	ldr	r0, [pc, #428]	@ (8000af8 <MX_GPIO_Init+0x2dc>)
 800094a:	f001 fce3 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	210d      	movs	r1, #13
 8000952:	486a      	ldr	r0, [pc, #424]	@ (8000afc <MX_GPIO_Init+0x2e0>)
 8000954:	f001 fcde 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2108      	movs	r1, #8
 800095c:	4868      	ldr	r0, [pc, #416]	@ (8000b00 <MX_GPIO_Init+0x2e4>)
 800095e:	f001 fcd9 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000968:	4864      	ldr	r0, [pc, #400]	@ (8000afc <MX_GPIO_Init+0x2e0>)
 800096a:	f001 fcd3 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8000974:	4863      	ldr	r0, [pc, #396]	@ (8000b04 <MX_GPIO_Init+0x2e8>)
 8000976:	f001 fccd 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2140      	movs	r1, #64	@ 0x40
 800097e:	4862      	ldr	r0, [pc, #392]	@ (8000b08 <MX_GPIO_Init+0x2ec>)
 8000980:	f001 fcc8 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	21c8      	movs	r1, #200	@ 0xc8
 8000988:	4860      	ldr	r0, [pc, #384]	@ (8000b0c <MX_GPIO_Init+0x2f0>)
 800098a:	f001 fcc3 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800098e:	2310      	movs	r3, #16
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800099e:	230e      	movs	r3, #14
 80009a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a6:	4619      	mov	r1, r3
 80009a8:	4859      	ldr	r0, [pc, #356]	@ (8000b10 <MX_GPIO_Init+0x2f4>)
 80009aa:	f001 fb07 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80009ae:	2308      	movs	r3, #8
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4853      	ldr	r0, [pc, #332]	@ (8000b10 <MX_GPIO_Init+0x2f4>)
 80009c2:	f001 fafb 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80009c6:	2304      	movs	r3, #4
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009d6:	2309      	movs	r3, #9
 80009d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009de:	4619      	mov	r1, r3
 80009e0:	484b      	ldr	r0, [pc, #300]	@ (8000b10 <MX_GPIO_Init+0x2f4>)
 80009e2:	f001 faeb 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80009e6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4842      	ldr	r0, [pc, #264]	@ (8000b0c <MX_GPIO_Init+0x2f0>)
 8000a04:	f001 fada 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a08:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a22:	4619      	mov	r1, r3
 8000a24:	483a      	ldr	r0, [pc, #232]	@ (8000b10 <MX_GPIO_Init+0x2f4>)
 8000a26:	f001 fac9 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000a2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	482b      	ldr	r0, [pc, #172]	@ (8000af4 <MX_GPIO_Init+0x2d8>)
 8000a48:	f001 fab8 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a54:	2302      	movs	r3, #2
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a60:	4619      	mov	r1, r3
 8000a62:	4824      	ldr	r0, [pc, #144]	@ (8000af4 <MX_GPIO_Init+0x2d8>)
 8000a64:	f001 faaa 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	481d      	ldr	r0, [pc, #116]	@ (8000af8 <MX_GPIO_Init+0x2dc>)
 8000a84:	f001 fa9a 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000a88:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4818      	ldr	r0, [pc, #96]	@ (8000b08 <MX_GPIO_Init+0x2ec>)
 8000aa6:	f001 fa89 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000abc:	2301      	movs	r3, #1
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <MX_GPIO_Init+0x2f8>)
 8000ac8:	f001 fa78 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000acc:	2360      	movs	r3, #96	@ 0x60
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000adc:	230d      	movs	r3, #13
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480a      	ldr	r0, [pc, #40]	@ (8000b10 <MX_GPIO_Init+0x2f4>)
 8000ae8:	f001 fa68 	bl	8001fbc <HAL_GPIO_Init>
 8000aec:	e014      	b.n	8000b18 <MX_GPIO_Init+0x2fc>
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40022000 	.word	0x40022000
 8000b00:	40022800 	.word	0x40022800
 8000b04:	40021c00 	.word	0x40021c00
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000b18:	2340      	movs	r3, #64	@ 0x40
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b28:	230a      	movs	r3, #10
 8000b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b30:	4619      	mov	r1, r3
 8000b32:	48bc      	ldr	r0, [pc, #752]	@ (8000e24 <MX_GPIO_Init+0x608>)
 8000b34:	f001 fa42 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000b38:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b52:	4619      	mov	r1, r3
 8000b54:	48b4      	ldr	r0, [pc, #720]	@ (8000e28 <MX_GPIO_Init+0x60c>)
 8000b56:	f001 fa31 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000b5a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b6c:	230e      	movs	r3, #14
 8000b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b74:	4619      	mov	r1, r3
 8000b76:	48ad      	ldr	r0, [pc, #692]	@ (8000e2c <MX_GPIO_Init+0x610>)
 8000b78:	f001 fa20 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	48a6      	ldr	r0, [pc, #664]	@ (8000e2c <MX_GPIO_Init+0x610>)
 8000b92:	f001 fa13 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b96:	2340      	movs	r3, #64	@ 0x40
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b9a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	48a1      	ldr	r0, [pc, #644]	@ (8000e30 <MX_GPIO_Init+0x614>)
 8000bac:	f001 fa06 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000bb0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4898      	ldr	r0, [pc, #608]	@ (8000e30 <MX_GPIO_Init+0x614>)
 8000bce:	f001 f9f5 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000bd2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000be4:	230a      	movs	r3, #10
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	4891      	ldr	r0, [pc, #580]	@ (8000e34 <MX_GPIO_Init+0x618>)
 8000bf0:	f001 f9e4 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000bf4:	23f0      	movs	r3, #240	@ 0xf0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c04:	230a      	movs	r3, #10
 8000c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	488a      	ldr	r0, [pc, #552]	@ (8000e38 <MX_GPIO_Init+0x61c>)
 8000c10:	f001 f9d4 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000c14:	23f7      	movs	r3, #247	@ 0xf7
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c24:	230e      	movs	r3, #14
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4883      	ldr	r0, [pc, #524]	@ (8000e3c <MX_GPIO_Init+0x620>)
 8000c30:	f001 f9c4 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c46:	2309      	movs	r3, #9
 8000c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4875      	ldr	r0, [pc, #468]	@ (8000e28 <MX_GPIO_Init+0x60c>)
 8000c52:	f001 f9b3 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c68:	230a      	movs	r3, #10
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c70:	4619      	mov	r1, r3
 8000c72:	486d      	ldr	r0, [pc, #436]	@ (8000e28 <MX_GPIO_Init+0x60c>)
 8000c74:	f001 f9a2 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c78:	2320      	movs	r3, #32
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4868      	ldr	r0, [pc, #416]	@ (8000e30 <MX_GPIO_Init+0x614>)
 8000c90:	f001 f994 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c94:	2308      	movs	r3, #8
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ca4:	230d      	movs	r3, #13
 8000ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cac:	4619      	mov	r1, r3
 8000cae:	4860      	ldr	r0, [pc, #384]	@ (8000e30 <MX_GPIO_Init+0x614>)
 8000cb0:	f001 f984 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8000cb4:	230d      	movs	r3, #13
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc8:	4619      	mov	r1, r3
 8000cca:	485b      	ldr	r0, [pc, #364]	@ (8000e38 <MX_GPIO_Init+0x61c>)
 8000ccc:	f001 f976 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4856      	ldr	r0, [pc, #344]	@ (8000e40 <MX_GPIO_Init+0x624>)
 8000ce6:	f001 f969 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000cea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d04:	4619      	mov	r1, r3
 8000d06:	484f      	ldr	r0, [pc, #316]	@ (8000e44 <MX_GPIO_Init+0x628>)
 8000d08:	f001 f958 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000d0c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d1e:	230e      	movs	r3, #14
 8000d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d26:	4619      	mov	r1, r3
 8000d28:	4843      	ldr	r0, [pc, #268]	@ (8000e38 <MX_GPIO_Init+0x61c>)
 8000d2a:	f001 f947 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	483d      	ldr	r0, [pc, #244]	@ (8000e3c <MX_GPIO_Init+0x620>)
 8000d46:	f001 f939 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000d4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d5c:	230d      	movs	r3, #13
 8000d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4830      	ldr	r0, [pc, #192]	@ (8000e28 <MX_GPIO_Init+0x60c>)
 8000d68:	f001 f928 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482c      	ldr	r0, [pc, #176]	@ (8000e30 <MX_GPIO_Init+0x614>)
 8000d80:	f001 f91c 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000d84:	2304      	movs	r3, #4
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d94:	230c      	movs	r3, #12
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4824      	ldr	r0, [pc, #144]	@ (8000e30 <MX_GPIO_Init+0x614>)
 8000da0:	f001 f90c 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000da4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	4823      	ldr	r0, [pc, #140]	@ (8000e48 <MX_GPIO_Init+0x62c>)
 8000dba:	f001 f8ff 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dce:	2305      	movs	r3, #5
 8000dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4817      	ldr	r0, [pc, #92]	@ (8000e38 <MX_GPIO_Init+0x61c>)
 8000dda:	f001 f8ef 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4810      	ldr	r0, [pc, #64]	@ (8000e38 <MX_GPIO_Init+0x61c>)
 8000df8:	f001 f8e0 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <MX_GPIO_Init+0x62c>)
 8000e16:	f001 f8d1 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000e1a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	e013      	b.n	8000e4c <MX_GPIO_Init+0x630>
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40021800 	.word	0x40021800
 8000e2c:	40022400 	.word	0x40022400
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40020000 	.word	0x40020000
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	40022800 	.word	0x40022800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40021400 	.word	0x40021400
 8000e48:	40021c00 	.word	0x40021c00
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e56:	230d      	movs	r3, #13
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4895      	ldr	r0, [pc, #596]	@ (80010b8 <MX_GPIO_Init+0x89c>)
 8000e62:	f001 f8ab 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 8000e66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e70:	2302      	movs	r3, #2
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4890      	ldr	r0, [pc, #576]	@ (80010bc <MX_GPIO_Init+0x8a0>)
 8000e7c:	f001 f89e 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4888      	ldr	r0, [pc, #544]	@ (80010c0 <MX_GPIO_Init+0x8a4>)
 8000e9e:	f001 f88d 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ea8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4880      	ldr	r0, [pc, #512]	@ (80010bc <MX_GPIO_Init+0x8a0>)
 8000eba:	f001 f87f 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	487a      	ldr	r0, [pc, #488]	@ (80010c4 <MX_GPIO_Init+0x8a8>)
 8000eda:	f001 f86f 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8000ede:	2340      	movs	r3, #64	@ 0x40
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4873      	ldr	r0, [pc, #460]	@ (80010c4 <MX_GPIO_Init+0x8a8>)
 8000ef6:	f001 f861 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000efa:	2328      	movs	r3, #40	@ 0x28
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4868      	ldr	r0, [pc, #416]	@ (80010b8 <MX_GPIO_Init+0x89c>)
 8000f16:	f001 f851 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 8000f1a:	23c0      	movs	r3, #192	@ 0xc0
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f22:	2302      	movs	r3, #2
 8000f24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4865      	ldr	r0, [pc, #404]	@ (80010c8 <MX_GPIO_Init+0x8ac>)
 8000f32:	f001 f843 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000f36:	2308      	movs	r3, #8
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f46:	230c      	movs	r3, #12
 8000f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	485c      	ldr	r0, [pc, #368]	@ (80010c4 <MX_GPIO_Init+0x8a8>)
 8000f52:	f001 f833 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f56:	2332      	movs	r3, #50	@ 0x32
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f66:	230b      	movs	r3, #11
 8000f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4854      	ldr	r0, [pc, #336]	@ (80010c4 <MX_GPIO_Init+0x8a8>)
 8000f72:	f001 f823 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f76:	2304      	movs	r3, #4
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f86:	2309      	movs	r3, #9
 8000f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	484e      	ldr	r0, [pc, #312]	@ (80010cc <MX_GPIO_Init+0x8b0>)
 8000f92:	f001 f813 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f96:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4847      	ldr	r0, [pc, #284]	@ (80010d0 <MX_GPIO_Init+0x8b4>)
 8000fb4:	f001 f802 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	483e      	ldr	r0, [pc, #248]	@ (80010c8 <MX_GPIO_Init+0x8ac>)
 8000fd0:	f000 fff4 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4838      	ldr	r0, [pc, #224]	@ (80010c8 <MX_GPIO_Init+0x8ac>)
 8000fe8:	f000 ffe8 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fec:	2386      	movs	r3, #134	@ 0x86
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	482e      	ldr	r0, [pc, #184]	@ (80010c0 <MX_GPIO_Init+0x8a4>)
 8001008:	f000 ffd8 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800100c:	2350      	movs	r3, #80	@ 0x50
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800101c:	230d      	movs	r3, #13
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001024:	4619      	mov	r1, r3
 8001026:	4826      	ldr	r0, [pc, #152]	@ (80010c0 <MX_GPIO_Init+0x8a4>)
 8001028:	f000 ffc8 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800102c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800103e:	2304      	movs	r3, #4
 8001040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	481b      	ldr	r0, [pc, #108]	@ (80010b8 <MX_GPIO_Init+0x89c>)
 800104a:	f000 ffb7 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 800104e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001060:	230a      	movs	r3, #10
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	4818      	ldr	r0, [pc, #96]	@ (80010cc <MX_GPIO_Init+0x8b0>)
 800106c:	f000 ffa6 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 8001070:	2340      	movs	r3, #64	@ 0x40
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001078:	2302      	movs	r3, #2
 800107a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001084:	4619      	mov	r1, r3
 8001086:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <MX_GPIO_Init+0x89c>)
 8001088:	f000 ff98 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800108c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109e:	2305      	movs	r3, #5
 80010a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a6:	4619      	mov	r1, r3
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <MX_GPIO_Init+0x8b0>)
 80010aa:	f000 ff87 	bl	8001fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ae:	bf00      	nop
 80010b0:	3740      	adds	r7, #64	@ 0x40
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021c00 	.word	0x40021c00
 80010bc:	40022000 	.word	0x40022000
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f003 fe1d 	bl	8004d1c <osDelay>
 80010e2:	e7fb      	b.n	80010dc <StartMainTask+0x8>

080010e4 <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTerminalTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f003 fe15 	bl	8004d1c <osDelay>
 80010f2:	e7fb      	b.n	80010ec <StartTerminalTask+0x8>

080010f4 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f003 fe0d 	bl	8004d1c <osDelay>
 8001102:	e7fb      	b.n	80010fc <StartButtonTask+0x8>

08001104 <LEDTimerCallback>:
  /* USER CODE END StartButtonTask */
}

/* LEDTimerCallback function */
void LEDTimerCallback(void *argument)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDTimerCallback */

  /* USER CODE END LEDTimerCallback */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <TransmitTimerCallback>:

/* TransmitTimerCallback function */
void TransmitTimerCallback(void *argument)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTimerCallback */

  /* USER CODE END TransmitTimerCallback */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800113e:	f000 fa2b 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40002000 	.word	0x40002000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <Error_Handler+0x8>

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001184:	6453      	str	r3, [r2, #68]	@ 0x44
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	210f      	movs	r1, #15
 8001196:	f06f 0001 	mvn.w	r0, #1
 800119a:	f000 fd69 	bl	8001c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a21      	ldr	r2, [pc, #132]	@ (8001250 <HAL_ADC_MspInit+0xa4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d13c      	bne.n	8001248 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ce:	4b21      	ldr	r3, [pc, #132]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a20      	ldr	r2, [pc, #128]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 80011d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_ADC_MspInit+0xa8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001216:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800121a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121c:	2303      	movs	r3, #3
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480b      	ldr	r0, [pc, #44]	@ (8001258 <HAL_ADC_MspInit+0xac>)
 800122c:	f000 fec6 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001234:	2303      	movs	r3, #3
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <HAL_ADC_MspInit+0xb0>)
 8001244:	f000 feba 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40012200 	.word	0x40012200
 8001254:	40023800 	.word	0x40023800
 8001258:	40021400 	.word	0x40021400
 800125c:	40020000 	.word	0x40020000

08001260 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_CRC_MspInit+0x38>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10b      	bne.n	800128a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_CRC_MspInit+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <HAL_CRC_MspInit+0x3c>)
 8001278:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <HAL_CRC_MspInit+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023000 	.word	0x40023000
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0ac      	sub	sp, #176	@ 0xb0
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	2284      	movs	r2, #132	@ 0x84
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 fcd3 	bl	8007c6c <memset>
  if(huart->Instance==USART1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a36      	ldr	r2, [pc, #216]	@ (80013a4 <HAL_UART_MspInit+0x104>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d164      	bne.n	800139a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012d4:	2300      	movs	r3, #0
 80012d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fd4f 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e8:	f7ff ff32 	bl	8001150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ec:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f0:	4a2d      	ldr	r2, [pc, #180]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 80012fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4a27      	ldr	r2, [pc, #156]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001310:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <HAL_UART_MspInit+0x108>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800134c:	2307      	movs	r3, #7
 800134e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001356:	4619      	mov	r1, r3
 8001358:	4814      	ldr	r0, [pc, #80]	@ (80013ac <HAL_UART_MspInit+0x10c>)
 800135a:	f000 fe2f 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800135e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001378:	2307      	movs	r3, #7
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001382:	4619      	mov	r1, r3
 8001384:	480a      	ldr	r0, [pc, #40]	@ (80013b0 <HAL_UART_MspInit+0x110>)
 8001386:	f000 fe19 	bl	8001fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2105      	movs	r1, #5
 800138e:	2025      	movs	r0, #37	@ 0x25
 8001390:	f000 fc6e 	bl	8001c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001394:	2025      	movs	r0, #37	@ 0x25
 8001396:	f000 fc87 	bl	8001ca8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	37b0      	adds	r7, #176	@ 0xb0
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40011000 	.word	0x40011000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80013c4:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_InitTick+0xe0>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <HAL_InitTick+0xe0>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d0:	4b30      	ldr	r3, [pc, #192]	@ (8001494 <HAL_InitTick+0xe0>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013dc:	f107 0210 	add.w	r2, r7, #16
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fc98 	bl	8002d1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013f6:	f001 fc69 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80013fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80013fc:	e004      	b.n	8001408 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013fe:	f001 fc65 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8001402:	4603      	mov	r3, r0
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <HAL_InitTick+0xe4>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	3b01      	subs	r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_InitTick+0xe8>)
 8001418:	4a21      	ldr	r2, [pc, #132]	@ (80014a0 <HAL_InitTick+0xec>)
 800141a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <HAL_InitTick+0xe8>)
 800141e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001422:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001424:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_InitTick+0xe8>)
 8001426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001428:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <HAL_InitTick+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_InitTick+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_InitTick+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800143c:	4817      	ldr	r0, [pc, #92]	@ (800149c <HAL_InitTick+0xe8>)
 800143e:	f002 f88f 	bl	8003560 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800144c:	2b00      	cmp	r3, #0
 800144e:	d11b      	bne.n	8001488 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001450:	4812      	ldr	r0, [pc, #72]	@ (800149c <HAL_InitTick+0xe8>)
 8001452:	f002 f8e7 	bl	8003624 <HAL_TIM_Base_Start_IT>
 8001456:	4603      	mov	r3, r0
 8001458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800145c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001460:	2b00      	cmp	r3, #0
 8001462:	d111      	bne.n	8001488 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001464:	202d      	movs	r0, #45	@ 0x2d
 8001466:	f000 fc1f 	bl	8001ca8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d808      	bhi.n	8001482 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	202d      	movs	r0, #45	@ 0x2d
 8001476:	f000 fbfb 	bl	8001c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_InitTick+0xf0>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e002      	b.n	8001488 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001488:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800148c:	4618      	mov	r0, r3
 800148e:	3738      	adds	r7, #56	@ 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	431bde83 	.word	0x431bde83
 800149c:	20000190 	.word	0x20000190
 80014a0:	40002000 	.word	0x40002000
 80014a4:	20000004 	.word	0x20000004

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <USART1_IRQHandler+0x10>)
 80014e6:	f002 fb69 	bl	8003bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200000e8 	.word	0x200000e8

080014f4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80014fa:	f002 f90b 	bl	8003714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000190 	.word	0x20000190

08001508 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	@ (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	@ (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	@ (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001556:	f7ff ffd7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f006 fbe5 	bl	8007d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7fe ffcf 	bl	8000500 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001570:	08007fbc 	.word	0x08007fbc
  ldr r2, =_sbss
 8001574:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001578:	20004d00 	.word	0x20004d00

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>

0800157e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	2003      	movs	r0, #3
 8001584:	f000 fb69 	bl	8001c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001588:	200f      	movs	r0, #15
 800158a:	f7ff ff13 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fde5 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	200001dc 	.word	0x200001dc

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200001dc 	.word	0x200001dc

080015d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e031      	b.n	8001652 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fdd8 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_ADC_Init+0x84>)
 800161c:	4013      	ands	r3, r2
 800161e:	f043 0202 	orr.w	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f970 	bl	800190c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	@ 0x40
 8001642:	e001      	b.n	8001648 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	ffffeefd 	.word	0xffffeefd

08001660 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_ADC_ConfigChannel+0x1c>
 8001678:	2302      	movs	r3, #2
 800167a:	e136      	b.n	80018ea <HAL_ADC_ConfigChannel+0x28a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d93a      	bls.n	8001702 <HAL_ADC_ConfigChannel+0xa2>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001694:	d035      	beq.n	8001702 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68d9      	ldr	r1, [r3, #12]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	3b1e      	subs	r3, #30
 80016ac:	2207      	movs	r2, #7
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	400a      	ands	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a8d      	ldr	r2, [pc, #564]	@ (80018f8 <HAL_ADC_ConfigChannel+0x298>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10a      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68d9      	ldr	r1, [r3, #12]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	061a      	lsls	r2, r3, #24
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016da:	e035      	b.n	8001748 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68d9      	ldr	r1, [r3, #12]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4403      	add	r3, r0
 80016f4:	3b1e      	subs	r3, #30
 80016f6:	409a      	lsls	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001700:	e022      	b.n	8001748 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6919      	ldr	r1, [r3, #16]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	2207      	movs	r2, #7
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6919      	ldr	r1, [r3, #16]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	4603      	mov	r3, r0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4403      	add	r3, r0
 800173e:	409a      	lsls	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b06      	cmp	r3, #6
 800174e:	d824      	bhi.n	800179a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b05      	subs	r3, #5
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43da      	mvns	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	400a      	ands	r2, r1
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4618      	mov	r0, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b05      	subs	r3, #5
 800178c:	fa00 f203 	lsl.w	r2, r0, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	@ 0x34
 8001798:	e04c      	b.n	8001834 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d824      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b23      	subs	r3, #35	@ 0x23
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b23      	subs	r3, #35	@ 0x23
 80017de:	fa00 f203 	lsl.w	r2, r0, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ea:	e023      	b.n	8001834 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b41      	subs	r3, #65	@ 0x41
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43da      	mvns	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	400a      	ands	r2, r1
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b41      	subs	r3, #65	@ 0x41
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <HAL_ADC_ConfigChannel+0x29c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10a      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1f4>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001846:	d105      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a2c      	ldr	r2, [pc, #176]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 800184e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001852:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <HAL_ADC_ConfigChannel+0x29c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10f      	bne.n	800187e <HAL_ADC_ConfigChannel+0x21e>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b12      	cmp	r3, #18
 8001864:	d10b      	bne.n	800187e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001866:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 800186c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001870:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 8001878:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800187c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1e      	ldr	r2, [pc, #120]	@ (80018fc <HAL_ADC_ConfigChannel+0x29c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d12b      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x280>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <HAL_ADC_ConfigChannel+0x298>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d003      	beq.n	800189a <HAL_ADC_ConfigChannel+0x23a>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b11      	cmp	r3, #17
 8001898:	d122      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 80018a0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018a4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <HAL_ADC_ConfigChannel+0x2a0>)
 80018ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018b0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <HAL_ADC_ConfigChannel+0x298>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d111      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_ADC_ConfigChannel+0x2a4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_ADC_ConfigChannel+0x2a8>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0c9a      	lsrs	r2, r3, #18
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018d2:	e002      	b.n	80018da <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f9      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	10000012 	.word	0x10000012
 80018fc:	40012000 	.word	0x40012000
 8001900:	40012300 	.word	0x40012300
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001914:	4b78      	ldr	r3, [pc, #480]	@ (8001af8 <ADC_Init+0x1ec>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a77      	ldr	r2, [pc, #476]	@ (8001af8 <ADC_Init+0x1ec>)
 800191a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800191e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001920:	4b75      	ldr	r3, [pc, #468]	@ (8001af8 <ADC_Init+0x1ec>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4973      	ldr	r1, [pc, #460]	@ (8001af8 <ADC_Init+0x1ec>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800193c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	021a      	lsls	r2, r3, #8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <ADC_Init+0x1f0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e00f      	b.n	8001a06 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0202 	bic.w	r2, r2, #2
 8001a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	005a      	lsls	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	035a      	lsls	r2, r3, #13
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e007      	b.n	8001a7c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	051a      	lsls	r2, r3, #20
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001abe:	025a      	lsls	r2, r3, #9
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	029a      	lsls	r2, r3, #10
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40012300 	.word	0x40012300
 8001afc:	0f000001 	.word	0x0f000001

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x40>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x40>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00
 8001b44:	05fa0000 	.word	0x05fa0000

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4907      	ldr	r1, [pc, #28]	@ (8001b9c <__NVIC_EnableIRQ+0x38>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	@ (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	@ (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff4c 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c82:	f7ff ff61 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	6978      	ldr	r0, [r7, #20]
 8001c8e:	f7ff ffb1 	bl	8001bf4 <NVIC_EncodePriority>
 8001c92:	4602      	mov	r2, r0
 8001c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff80 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001ca0:	bf00      	nop
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff54 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e054      	b.n	8001d80 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7f5b      	ldrb	r3, [r3, #29]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff faba 	bl	8001260 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	791b      	ldrb	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <HAL_CRC_Init+0xc4>)
 8001d00:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0218 	bic.w	r2, r2, #24
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	e00c      	b.n	8001d2e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f834 	bl	8001d8c <HAL_CRCEx_Polynomial_Set>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e028      	b.n	8001d80 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	795b      	ldrb	r3, [r3, #5]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d105      	bne.n	8001d42 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	e004      	b.n	8001d4c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6912      	ldr	r2, [r2, #16]
 8001d4a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	04c11db7 	.word	0x04c11db7

08001d8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001da0:	bf00      	nop
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	613a      	str	r2, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <HAL_CRCEx_Polynomial_Set+0x34>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b18      	cmp	r3, #24
 8001dc4:	d846      	bhi.n	8001e54 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dcc <HAL_CRCEx_Polynomial_Set+0x40>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001e5b 	.word	0x08001e5b
 8001dd0:	08001e55 	.word	0x08001e55
 8001dd4:	08001e55 	.word	0x08001e55
 8001dd8:	08001e55 	.word	0x08001e55
 8001ddc:	08001e55 	.word	0x08001e55
 8001de0:	08001e55 	.word	0x08001e55
 8001de4:	08001e55 	.word	0x08001e55
 8001de8:	08001e55 	.word	0x08001e55
 8001dec:	08001e49 	.word	0x08001e49
 8001df0:	08001e55 	.word	0x08001e55
 8001df4:	08001e55 	.word	0x08001e55
 8001df8:	08001e55 	.word	0x08001e55
 8001dfc:	08001e55 	.word	0x08001e55
 8001e00:	08001e55 	.word	0x08001e55
 8001e04:	08001e55 	.word	0x08001e55
 8001e08:	08001e55 	.word	0x08001e55
 8001e0c:	08001e3d 	.word	0x08001e3d
 8001e10:	08001e55 	.word	0x08001e55
 8001e14:	08001e55 	.word	0x08001e55
 8001e18:	08001e55 	.word	0x08001e55
 8001e1c:	08001e55 	.word	0x08001e55
 8001e20:	08001e55 	.word	0x08001e55
 8001e24:	08001e55 	.word	0x08001e55
 8001e28:	08001e55 	.word	0x08001e55
 8001e2c:	08001e31 	.word	0x08001e31
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d913      	bls.n	8001e5e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e3a:	e010      	b.n	8001e5e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b07      	cmp	r3, #7
 8001e40:	d90f      	bls.n	8001e62 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e46:	e00c      	b.n	8001e62 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	d90b      	bls.n	8001e66 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e52:	e008      	b.n	8001e66 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	75fb      	strb	r3, [r7, #23]
      break;
 8001e58:	e006      	b.n	8001e68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e004      	b.n	8001e68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e5e:	bf00      	nop
 8001e60:	e002      	b.n	8001e68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e62:	bf00      	nop
 8001e64:	e000      	b.n	8001e68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e66:	bf00      	nop
  }
  if (status == HAL_OK)
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 0118 	bic.w	r1, r3, #24
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea6:	f7ff fb8b 	bl	80015c0 <HAL_GetTick>
 8001eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d008      	beq.n	8001eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e052      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0216 	bic.w	r2, r2, #22
 8001ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_DMA_Abort+0x62>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0208 	bic.w	r2, r2, #8
 8001f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	e013      	b.n	8001f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1c:	f7ff fb50 	bl	80015c0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d90c      	bls.n	8001f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e015      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1e4      	bne.n	8001f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	223f      	movs	r2, #63	@ 0x3f
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d004      	beq.n	8001f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00c      	b.n	8001fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e175      	b.n	80022c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8164 	bne.w	80022c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x56>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80be 	beq.w	80022c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b66      	ldr	r3, [pc, #408]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4a65      	ldr	r2, [pc, #404]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	6453      	str	r3, [r2, #68]	@ 0x44
 8002152:	4b63      	ldr	r3, [pc, #396]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800215e:	4a61      	ldr	r2, [pc, #388]	@ (80022e4 <HAL_GPIO_Init+0x328>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <HAL_GPIO_Init+0x32c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d037      	beq.n	80021fa <HAL_GPIO_Init+0x23e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a57      	ldr	r2, [pc, #348]	@ (80022ec <HAL_GPIO_Init+0x330>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d031      	beq.n	80021f6 <HAL_GPIO_Init+0x23a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a56      	ldr	r2, [pc, #344]	@ (80022f0 <HAL_GPIO_Init+0x334>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02b      	beq.n	80021f2 <HAL_GPIO_Init+0x236>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a55      	ldr	r2, [pc, #340]	@ (80022f4 <HAL_GPIO_Init+0x338>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d025      	beq.n	80021ee <HAL_GPIO_Init+0x232>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a54      	ldr	r2, [pc, #336]	@ (80022f8 <HAL_GPIO_Init+0x33c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <HAL_GPIO_Init+0x22e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a53      	ldr	r2, [pc, #332]	@ (80022fc <HAL_GPIO_Init+0x340>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x22a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_GPIO_Init+0x344>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a51      	ldr	r2, [pc, #324]	@ (8002304 <HAL_GPIO_Init+0x348>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x222>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a50      	ldr	r2, [pc, #320]	@ (8002308 <HAL_GPIO_Init+0x34c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x21e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4f      	ldr	r2, [pc, #316]	@ (800230c <HAL_GPIO_Init+0x350>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x21a>
 80021d2:	2309      	movs	r3, #9
 80021d4:	e012      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021d6:	230a      	movs	r3, #10
 80021d8:	e010      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021da:	2308      	movs	r3, #8
 80021dc:	e00e      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021de:	2307      	movs	r3, #7
 80021e0:	e00c      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00a      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021fa:	2300      	movs	r3, #0
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800220c:	4935      	ldr	r1, [pc, #212]	@ (80022e4 <HAL_GPIO_Init+0x328>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <HAL_GPIO_Init+0x354>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a34      	ldr	r2, [pc, #208]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a29      	ldr	r2, [pc, #164]	@ (8002310 <HAL_GPIO_Init+0x354>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226e:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002292:	4a1f      	ldr	r2, [pc, #124]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002298:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <HAL_GPIO_Init+0x354>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <HAL_GPIO_Init+0x354>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	f67f ae86 	bls.w	8001fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40021400 	.word	0x40021400
 8002300:	40021800 	.word	0x40021800
 8002304:	40021c00 	.word	0x40021c00
 8002308:	40022000 	.word	0x40022000
 800230c:	40022400 	.word	0x40022400
 8002310:	40013c00 	.word	0x40013c00

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <HAL_PWREx_EnableOverDrive+0x98>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a22      	ldr	r2, [pc, #136]	@ (8002400 <HAL_PWREx_EnableOverDrive+0x98>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_PWREx_EnableOverDrive+0x98>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002394:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002396:	f7ff f913 	bl	80015c0 <HAL_GetTick>
 800239a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800239c:	e009      	b.n	80023b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800239e:	f7ff f90f 	bl	80015c0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023ac:	d901      	bls.n	80023b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e022      	b.n	80023f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023be:	d1ee      	bne.n	800239e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023c0:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023cc:	f7ff f8f8 	bl	80015c0 <HAL_GetTick>
 80023d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d2:	e009      	b.n	80023e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023d4:	f7ff f8f4 	bl	80015c0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e2:	d901      	bls.n	80023e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e007      	b.n	80023f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023f4:	d1ee      	bne.n	80023d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	40007000 	.word	0x40007000

08002408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e291      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8087 	beq.w	800253a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800242c:	4b96      	ldr	r3, [pc, #600]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b04      	cmp	r3, #4
 8002436:	d00c      	beq.n	8002452 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002438:	4b93      	ldr	r3, [pc, #588]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d112      	bne.n	800246a <HAL_RCC_OscConfig+0x62>
 8002444:	4b90      	ldr	r3, [pc, #576]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002450:	d10b      	bne.n	800246a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	4b8d      	ldr	r3, [pc, #564]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d06c      	beq.n	8002538 <HAL_RCC_OscConfig+0x130>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d168      	bne.n	8002538 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e26b      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x7a>
 8002474:	4b84      	ldr	r3, [pc, #528]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a83      	ldr	r2, [pc, #524]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e02e      	b.n	80024e0 <HAL_RCC_OscConfig+0xd8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x9c>
 800248a:	4b7f      	ldr	r3, [pc, #508]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7e      	ldr	r2, [pc, #504]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b7c      	ldr	r3, [pc, #496]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7b      	ldr	r2, [pc, #492]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xd8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0xc0>
 80024ae:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b73      	ldr	r3, [pc, #460]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a72      	ldr	r2, [pc, #456]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xd8>
 80024c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff f86a 	bl	80015c0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff f866 	bl	80015c0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e21f      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b61      	ldr	r3, [pc, #388]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe8>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff f856 	bl	80015c0 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff f852 	bl	80015c0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e20b      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x110>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d069      	beq.n	800261a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002546:	4b50      	ldr	r3, [pc, #320]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b4d      	ldr	r3, [pc, #308]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x190>
 800255e:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x17a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1df      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	493d      	ldr	r1, [pc, #244]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e040      	b.n	800261a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a38      	ldr	r2, [pc, #224]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f808 	bl	80015c0 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b4:	f7ff f804 	bl	80015c0 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1bd      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4929      	ldr	r1, [pc, #164]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
 80025e6:	e018      	b.n	800261a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e8:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a26      	ldr	r2, [pc, #152]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe ffe4 	bl	80015c0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fc:	f7fe ffe0 	bl	80015c0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e199      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d038      	beq.n	8002698 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d019      	beq.n	8002662 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002632:	4a15      	ldr	r2, [pc, #84]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe ffc1 	bl	80015c0 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe ffbd 	bl	80015c0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e176      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x23a>
 8002660:	e01a      	b.n	8002698 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	4a08      	ldr	r2, [pc, #32]	@ (8002688 <HAL_RCC_OscConfig+0x280>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe ffa7 	bl	80015c0 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7fe ffa3 	bl	80015c0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d903      	bls.n	800268c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e15c      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
 8002688:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b91      	ldr	r3, [pc, #580]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ee      	bne.n	8002676 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a4 	beq.w	80027ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b8b      	ldr	r3, [pc, #556]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	4a87      	ldr	r2, [pc, #540]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026be:	4b85      	ldr	r3, [pc, #532]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ce:	4b82      	ldr	r3, [pc, #520]	@ (80028d8 <HAL_RCC_OscConfig+0x4d0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026da:	4b7f      	ldr	r3, [pc, #508]	@ (80028d8 <HAL_RCC_OscConfig+0x4d0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7e      	ldr	r2, [pc, #504]	@ (80028d8 <HAL_RCC_OscConfig+0x4d0>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7fe ff6b 	bl	80015c0 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe ff67 	bl	80015c0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	@ 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e120      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002700:	4b75      	ldr	r3, [pc, #468]	@ (80028d8 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x31a>
 8002714:	4b6f      	ldr	r3, [pc, #444]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002718:	4a6e      	ldr	r2, [pc, #440]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002720:	e02d      	b.n	800277e <HAL_RCC_OscConfig+0x376>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x33c>
 800272a:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	4a69      	ldr	r2, [pc, #420]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6713      	str	r3, [r2, #112]	@ 0x70
 8002736:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273a:	4a66      	ldr	r2, [pc, #408]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6713      	str	r3, [r2, #112]	@ 0x70
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x376>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x35e>
 800274c:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a60      	ldr	r2, [pc, #384]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	@ 0x70
 8002758:	4b5e      	ldr	r3, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275c:	4a5d      	ldr	r2, [pc, #372]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6713      	str	r3, [r2, #112]	@ 0x70
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x376>
 8002766:	4b5b      	ldr	r3, [pc, #364]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	4a5a      	ldr	r2, [pc, #360]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	@ 0x70
 8002772:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	4a57      	ldr	r2, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe ff1b 	bl	80015c0 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe ff17 	bl	80015c0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0ce      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b4b      	ldr	r3, [pc, #300]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x386>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe ff05 	bl	80015c0 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe ff01 	bl	80015c0 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b40      	ldr	r3, [pc, #256]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b3c      	ldr	r3, [pc, #240]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a3b      	ldr	r2, [pc, #236]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80a4 	beq.w	8002940 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b36      	ldr	r3, [pc, #216]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d06b      	beq.n	80028dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d149      	bne.n	80028a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a30      	ldr	r2, [pc, #192]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fed2 	bl	80015c0 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fece 	bl	80015c0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e087      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	4313      	orrs	r3, r2
 8002864:	4a1b      	ldr	r2, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002866:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800286a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a18      	ldr	r2, [pc, #96]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fea2 	bl	80015c0 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fe9e 	bl	80015c0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e057      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x478>
 800289e:	e04f      	b.n	8002940 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0b      	ldr	r2, [pc, #44]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80028a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fe88 	bl	80015c0 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fe84 	bl	80015c0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e03d      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4ac>
 80028d2:	e035      	b.n	8002940 <HAL_RCC_OscConfig+0x538>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x544>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d028      	beq.n	800293c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d121      	bne.n	800293c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d11a      	bne.n	800293c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002912:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002914:	4293      	cmp	r3, r2
 8002916:	d111      	bne.n	800293c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	3b01      	subs	r3, #1
 8002926:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d107      	bne.n	800293c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0d0      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b6a      	ldr	r3, [pc, #424]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d910      	bls.n	8002998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b67      	ldr	r3, [pc, #412]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 020f 	bic.w	r2, r3, #15
 800297e:	4965      	ldr	r1, [pc, #404]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d040      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e073      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06b      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b39      	ldr	r3, [pc, #228]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4936      	ldr	r1, [pc, #216]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7fe fdbc 	bl	80015c0 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe fdb8 	bl	80015c0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e053      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b27      	ldr	r3, [pc, #156]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d210      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	4922      	ldr	r1, [pc, #136]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	@ (8002b1c <HAL_RCC_ClockConfig+0x1cc>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <HAL_RCC_ClockConfig+0x1d0>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_ClockConfig+0x1d4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fc56 	bl	80013b4 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08007f94 	.word	0x08007f94
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b090      	sub	sp, #64	@ 0x40
 8002b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b34:	2300      	movs	r3, #0
 8002b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b38:	2300      	movs	r3, #0
 8002b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d00d      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x40>
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	f200 80a1 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x34>
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5a:	e09b      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b53      	ldr	r3, [pc, #332]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b60:	e09b      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b62:	4b53      	ldr	r3, [pc, #332]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b66:	e098      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d028      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	2200      	movs	r2, #0
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b90:	2100      	movs	r1, #0
 8002b92:	4b47      	ldr	r3, [pc, #284]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b94:	fb03 f201 	mul.w	r2, r3, r1
 8002b98:	2300      	movs	r3, #0
 8002b9a:	fb00 f303 	mul.w	r3, r0, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a43      	ldr	r2, [pc, #268]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba8:	460a      	mov	r2, r1
 8002baa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bae:	4413      	add	r3, r2
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bc2:	f7fd fb25 	bl	8000210 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bce:	e053      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	617a      	str	r2, [r7, #20]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002be2:	f04f 0b00 	mov.w	fp, #0
 8002be6:	4652      	mov	r2, sl
 8002be8:	465b      	mov	r3, fp
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	0159      	lsls	r1, r3, #5
 8002bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf8:	0150      	lsls	r0, r2, #5
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	ebb2 080a 	subs.w	r8, r2, sl
 8002c02:	eb63 090b 	sbc.w	r9, r3, fp
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	00eb      	lsls	r3, r5, #3
 8002c2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c30:	00e2      	lsls	r2, r4, #3
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
 8002c36:	eb14 030a 	adds.w	r3, r4, sl
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	eb45 030b 	adc.w	r3, r5, fp
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c62:	2200      	movs	r2, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	60fa      	str	r2, [r7, #12]
 8002c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c6c:	f7fd fad0 	bl	8000210 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002c96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3740      	adds	r7, #64	@ 0x40
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	017d7840 	.word	0x017d7840

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08007fa4 	.word	0x08007fa4

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08007fa4 	.word	0x08007fa4

08002d1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	220f      	movs	r2, #15
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d38:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <HAL_RCC_GetClockConfig+0x60>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d012      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002da8:	4b69      	ldr	r3, [pc, #420]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a68      	ldr	r2, [pc, #416]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002db2:	6093      	str	r3, [r2, #8]
 8002db4:	4b66      	ldr	r3, [pc, #408]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbc:	4964      	ldr	r1, [pc, #400]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d017      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dda:	4b5d      	ldr	r3, [pc, #372]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	4959      	ldr	r1, [pc, #356]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d017      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e16:	4b4e      	ldr	r3, [pc, #312]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	494a      	ldr	r1, [pc, #296]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e34:	d101      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 808b 	beq.w	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	4a39      	ldr	r2, [pc, #228]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e70:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a34      	ldr	r2, [pc, #208]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe fb9a 	bl	80015c0 <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fe fb96 	bl	80015c0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e357      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eae:	4b28      	ldr	r3, [pc, #160]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d035      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d02e      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ecc:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	4a1d      	ldr	r2, [pc, #116]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002eee:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ef4:	4b16      	ldr	r3, [pc, #88]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d114      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fb5e 	bl	80015c0 <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fb5a 	bl	80015c0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e319      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ee      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f36:	d111      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	4901      	ldr	r1, [pc, #4]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40007000 	.word	0x40007000
 8002f58:	0ffffcff 	.word	0x0ffffcff
 8002f5c:	4baa      	ldr	r3, [pc, #680]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4aa9      	ldr	r2, [pc, #676]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	4ba7      	ldr	r3, [pc, #668]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	49a4      	ldr	r1, [pc, #656]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f86:	4ba0      	ldr	r3, [pc, #640]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8c:	4a9e      	ldr	r2, [pc, #632]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f96:	4b9c      	ldr	r3, [pc, #624]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	4999      	ldr	r1, [pc, #612]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb4:	4b94      	ldr	r3, [pc, #592]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc2:	4991      	ldr	r1, [pc, #580]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fd6:	4b8c      	ldr	r3, [pc, #560]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe4:	4988      	ldr	r1, [pc, #544]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff8:	4b83      	ldr	r3, [pc, #524]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003006:	4980      	ldr	r1, [pc, #512]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800301a:	4b7b      	ldr	r3, [pc, #492]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003020:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003028:	4977      	ldr	r1, [pc, #476]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800303c:	4b72      	ldr	r3, [pc, #456]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003042:	f023 0203 	bic.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	496f      	ldr	r1, [pc, #444]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800305e:	4b6a      	ldr	r3, [pc, #424]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003064:	f023 020c 	bic.w	r2, r3, #12
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306c:	4966      	ldr	r1, [pc, #408]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003080:	4b61      	ldr	r3, [pc, #388]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003086:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	495e      	ldr	r1, [pc, #376]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030a2:	4b59      	ldr	r3, [pc, #356]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b0:	4955      	ldr	r1, [pc, #340]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030c4:	4b50      	ldr	r3, [pc, #320]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d2:	494d      	ldr	r1, [pc, #308]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030e6:	4b48      	ldr	r3, [pc, #288]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	4944      	ldr	r1, [pc, #272]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003108:	4b3f      	ldr	r3, [pc, #252]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	493c      	ldr	r1, [pc, #240]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800312a:	4b37      	ldr	r3, [pc, #220]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003138:	4933      	ldr	r1, [pc, #204]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800314c:	4b2e      	ldr	r3, [pc, #184]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003152:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800315a:	492b      	ldr	r1, [pc, #172]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800316e:	4b26      	ldr	r3, [pc, #152]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003174:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800317c:	4922      	ldr	r1, [pc, #136]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003188:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800318c:	d101      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ae:	4b16      	ldr	r3, [pc, #88]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031bc:	4912      	ldr	r1, [pc, #72]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e0:	4909      	ldr	r1, [pc, #36]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d006      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80d9 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031fc:	4b02      	ldr	r3, [pc, #8]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a01      	ldr	r2, [pc, #4]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003202:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003206:	e001      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003208:	40023800 	.word	0x40023800
 800320c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320e:	f7fe f9d7 	bl	80015c0 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003216:	f7fe f9d3 	bl	80015c0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	@ 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e194      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003228:	4b6c      	ldr	r3, [pc, #432]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d021      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11d      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003248:	4b64      	ldr	r3, [pc, #400]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003256:	4b61      	ldr	r3, [pc, #388]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	019a      	lsls	r2, r3, #6
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	431a      	orrs	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	061b      	lsls	r3, r3, #24
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	071b      	lsls	r3, r3, #28
 800327c:	4957      	ldr	r1, [pc, #348]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003294:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02e      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ae:	d129      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032b0:	4b4a      	ldr	r3, [pc, #296]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032c4:	0f1b      	lsrs	r3, r3, #28
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	019a      	lsls	r2, r3, #6
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	431a      	orrs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	071b      	lsls	r3, r3, #28
 80032e4:	493d      	ldr	r1, [pc, #244]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032ec:	4b3b      	ldr	r3, [pc, #236]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032f2:	f023 021f 	bic.w	r2, r3, #31
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	3b01      	subs	r3, #1
 80032fc:	4937      	ldr	r1, [pc, #220]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01d      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003310:	4b32      	ldr	r3, [pc, #200]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003316:	0e1b      	lsrs	r3, r3, #24
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800331e:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003324:	0f1b      	lsrs	r3, r3, #28
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	019a      	lsls	r2, r3, #6
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	431a      	orrs	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	431a      	orrs	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	071b      	lsls	r3, r3, #28
 8003344:	4925      	ldr	r1, [pc, #148]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d011      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	019a      	lsls	r2, r3, #6
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	061b      	lsls	r3, r3, #24
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	071b      	lsls	r3, r3, #28
 8003374:	4919      	ldr	r1, [pc, #100]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800337c:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a16      	ldr	r2, [pc, #88]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fe f91a 	bl	80015c0 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003390:	f7fe f916 	bl	80015c0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	@ 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0d7      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	f040 80cd 	bne.w	8003550 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033b6:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a08      	ldr	r2, [pc, #32]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c2:	f7fe f8fd 	bl	80015c0 <HAL_GetTick>
 80033c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033c8:	e00a      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033ca:	f7fe f8f9 	bl	80015c0 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b64      	cmp	r3, #100	@ 0x64
 80033d6:	d903      	bls.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0ba      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033e0:	4b5e      	ldr	r3, [pc, #376]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ec:	d0ed      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02e      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d12a      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003416:	4b51      	ldr	r3, [pc, #324]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003424:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	0f1b      	lsrs	r3, r3, #28
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	019a      	lsls	r2, r3, #6
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	061b      	lsls	r3, r3, #24
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	4944      	ldr	r1, [pc, #272]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003452:	4b42      	ldr	r3, [pc, #264]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003458:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	493d      	ldr	r1, [pc, #244]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d022      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003480:	d11d      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	0e1b      	lsrs	r3, r3, #24
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003490:	4b32      	ldr	r3, [pc, #200]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	0f1b      	lsrs	r3, r3, #28
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	019a      	lsls	r2, r3, #6
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	4929      	ldr	r1, [pc, #164]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d028      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ca:	4b24      	ldr	r3, [pc, #144]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	0e1b      	lsrs	r3, r3, #24
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034d8:	4b20      	ldr	r3, [pc, #128]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	019a      	lsls	r2, r3, #6
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	431a      	orrs	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	071b      	lsls	r3, r3, #28
 80034fe:	4917      	ldr	r1, [pc, #92]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800350c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	4911      	ldr	r1, [pc, #68]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800351c:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0e      	ldr	r2, [pc, #56]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003528:	f7fe f84a 	bl	80015c0 <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003530:	f7fe f846 	bl	80015c0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	@ 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e007      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800354a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800354e:	d1ef      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e049      	b.n	8003606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f841 	bl	800360e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 fa00 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d001      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e054      	b.n	80036e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a26      	ldr	r2, [pc, #152]	@ (80036f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d022      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d01d      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d018      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_TIM_Base_Start_IT+0xdc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	@ (8003704 <HAL_TIM_Base_Start_IT+0xe0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_TIM_Base_Start_IT+0xe4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	@ (800370c <HAL_TIM_Base_Start_IT+0xe8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d115      	bne.n	80036d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_TIM_Base_Start_IT+0xec>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d015      	beq.n	80036e2 <HAL_TIM_Base_Start_IT+0xbe>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036bc:	d011      	beq.n	80036e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	e008      	b.n	80036e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e000      	b.n	80036e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40010400 	.word	0x40010400
 8003708:	40014000 	.word	0x40014000
 800370c:	40001800 	.word	0x40001800
 8003710:	00010007 	.word	0x00010007

08003714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0202 	mvn.w	r2, #2
 8003740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f905 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8f7 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f908 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b04      	cmp	r3, #4
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0204 	mvn.w	r2, #4
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8db 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8cd 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8de 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0208 	mvn.w	r2, #8
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2204      	movs	r2, #4
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8b1 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8a3 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8b4 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b10      	cmp	r3, #16
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b10      	cmp	r3, #16
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0210 	mvn.w	r2, #16
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2208      	movs	r2, #8
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f887 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f879 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f88a 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0201 	mvn.w	r2, #1
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd fc4a 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a2:	2b80      	cmp	r3, #128	@ 0x80
 80038a4:	d10e      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d107      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f91a 	bl	8003af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d2:	d10e      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038de:	2b80      	cmp	r3, #128	@ 0x80
 80038e0:	d107      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f90d 	bl	8003b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b40      	cmp	r3, #64	@ 0x40
 80038fe:	d10e      	bne.n	800391e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b40      	cmp	r3, #64	@ 0x40
 800390c:	d107      	bne.n	800391e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f838 	bl	800398e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b20      	cmp	r3, #32
 800392a:	d10e      	bne.n	800394a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d107      	bne.n	800394a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f06f 0220 	mvn.w	r2, #32
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8cd 	bl	8003ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a40      	ldr	r2, [pc, #256]	@ (8003ab8 <TIM_Base_SetConfig+0x114>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c2:	d00f      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3d      	ldr	r2, [pc, #244]	@ (8003abc <TIM_Base_SetConfig+0x118>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3c      	ldr	r2, [pc, #240]	@ (8003ac0 <TIM_Base_SetConfig+0x11c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ac4 <TIM_Base_SetConfig+0x120>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac8 <TIM_Base_SetConfig+0x124>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d108      	bne.n	80039f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab8 <TIM_Base_SetConfig+0x114>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02b      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a04:	d027      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	@ (8003abc <TIM_Base_SetConfig+0x118>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d023      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac0 <TIM_Base_SetConfig+0x11c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01f      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac4 <TIM_Base_SetConfig+0x120>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01b      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a29      	ldr	r2, [pc, #164]	@ (8003ac8 <TIM_Base_SetConfig+0x124>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d017      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <TIM_Base_SetConfig+0x128>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <TIM_Base_SetConfig+0x12c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <TIM_Base_SetConfig+0x130>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a25      	ldr	r2, [pc, #148]	@ (8003ad8 <TIM_Base_SetConfig+0x134>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <TIM_Base_SetConfig+0x138>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <TIM_Base_SetConfig+0x13c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <TIM_Base_SetConfig+0x114>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_Base_SetConfig+0xf8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <TIM_Base_SetConfig+0x124>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d103      	bne.n	8003aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40010400 	.word	0x40010400
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800
 8003ad8:	40001800 	.word	0x40001800
 8003adc:	40001c00 	.word	0x40001c00
 8003ae0:	40002000 	.word	0x40002000

08003ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e040      	b.n	8003bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fbac 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2224      	movs	r2, #36	@ 0x24
 8003b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fb1e 	bl	80041a0 <UART_SetConfig>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e022      	b.n	8003bb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fd76 	bl	8004668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fdfd 	bl	80047ac <UART_CheckIdleState>
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b0ba      	sub	sp, #232	@ 0xe8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003be2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003be6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003bea:	4013      	ands	r3, r2
 8003bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d115      	bne.n	8003c24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00f      	beq.n	8003c24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8297 	beq.w	8004148 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
      }
      return;
 8003c22:	e291      	b.n	8004148 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8117 	beq.w	8003e5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c3e:	4b85      	ldr	r3, [pc, #532]	@ (8003e54 <HAL_UART_IRQHandler+0x298>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 810a 	beq.w	8003e5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d011      	beq.n	8003c78 <HAL_UART_IRQHandler+0xbc>
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d011      	beq.n	8003ca8 <HAL_UART_IRQHandler+0xec>
 8003c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2202      	movs	r2, #2
 8003c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d011      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x11c>
 8003cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2208      	movs	r2, #8
 8003d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0a:	f043 0208 	orr.w	r2, r3, #8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <HAL_UART_IRQHandler+0x18a>
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3c:	f043 0220 	orr.w	r2, r3, #32
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 81fd 	beq.w	800414c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d04f      	beq.n	8003e3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fe01 	bl	80049a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	d141      	bne.n	8003e36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3308      	adds	r3, #8
 8003db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1d9      	bne.n	8003db2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d013      	beq.n	8003e2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e0a:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <HAL_UART_IRQHandler+0x29c>)
 8003e0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe f8b0 	bl	8001f78 <HAL_DMA_Abort_IT>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	e00f      	b.n	8003e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9a0 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	e00b      	b.n	8003e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f99c 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	e007      	b.n	8003e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f998 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003e4c:	e17e      	b.n	800414c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4e:	bf00      	nop
    return;
 8003e50:	e17c      	b.n	800414c <HAL_UART_IRQHandler+0x590>
 8003e52:	bf00      	nop
 8003e54:	04000120 	.word	0x04000120
 8003e58:	08004a6f 	.word	0x08004a6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 814c 	bne.w	80040fe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8145 	beq.w	80040fe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 813e 	beq.w	80040fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2210      	movs	r2, #16
 8003e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	f040 80b6 	bne.w	8004006 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8150 	beq.w	8004150 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	f080 8148 	bcs.w	8004150 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed4:	f000 8086 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1da      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e1      	bne.n	8003f22 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e4      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd ff5a 	bl	8001e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8c2 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004004:	e0a4      	b.n	8004150 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004012:	b29b      	uxth	r3, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8096 	beq.w	8004154 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8091 	beq.w	8004154 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004046:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
 8004056:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800405a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e4      	bne.n	8004032 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	623b      	str	r3, [r7, #32]
   return(result);
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800408c:	633a      	str	r2, [r7, #48]	@ 0x30
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e3      	bne.n	8004068 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 0310 	bic.w	r3, r3, #16
 80040c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	617b      	str	r3, [r7, #20]
   return(result);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e4      	bne.n	80040b4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f846 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040fc:	e02a      	b.n	8004154 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00e      	beq.n	8004128 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800410a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01c      	beq.n	8004158 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
    }
    return;
 8004126:	e017      	b.n	8004158 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d012      	beq.n	800415a <HAL_UART_IRQHandler+0x59e>
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fcaa 	bl	8004a9a <UART_EndTransmit_IT>
    return;
 8004146:	e008      	b.n	800415a <HAL_UART_IRQHandler+0x59e>
      return;
 8004148:	bf00      	nop
 800414a:	e006      	b.n	800415a <HAL_UART_IRQHandler+0x59e>
    return;
 800414c:	bf00      	nop
 800414e:	e004      	b.n	800415a <HAL_UART_IRQHandler+0x59e>
      return;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <HAL_UART_IRQHandler+0x59e>
      return;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <HAL_UART_IRQHandler+0x59e>
    return;
 8004158:	bf00      	nop
  }

}
 800415a:	37e8      	adds	r7, #232	@ 0xe8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4ba6      	ldr	r3, [pc, #664]	@ (8004464 <UART_SetConfig+0x2c4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	6979      	ldr	r1, [r7, #20]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a94      	ldr	r2, [pc, #592]	@ (8004468 <UART_SetConfig+0x2c8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d120      	bne.n	800425e <UART_SetConfig+0xbe>
 800421c:	4b93      	ldr	r3, [pc, #588]	@ (800446c <UART_SetConfig+0x2cc>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b03      	cmp	r3, #3
 8004228:	d816      	bhi.n	8004258 <UART_SetConfig+0xb8>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <UART_SetConfig+0x90>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004241 	.word	0x08004241
 8004234:	0800424d 	.word	0x0800424d
 8004238:	08004247 	.word	0x08004247
 800423c:	08004253 	.word	0x08004253
 8004240:	2301      	movs	r3, #1
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e150      	b.n	80044e8 <UART_SetConfig+0x348>
 8004246:	2302      	movs	r3, #2
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e14d      	b.n	80044e8 <UART_SetConfig+0x348>
 800424c:	2304      	movs	r3, #4
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e14a      	b.n	80044e8 <UART_SetConfig+0x348>
 8004252:	2308      	movs	r3, #8
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e147      	b.n	80044e8 <UART_SetConfig+0x348>
 8004258:	2310      	movs	r3, #16
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e144      	b.n	80044e8 <UART_SetConfig+0x348>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a83      	ldr	r2, [pc, #524]	@ (8004470 <UART_SetConfig+0x2d0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d132      	bne.n	80042ce <UART_SetConfig+0x12e>
 8004268:	4b80      	ldr	r3, [pc, #512]	@ (800446c <UART_SetConfig+0x2cc>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d828      	bhi.n	80042c8 <UART_SetConfig+0x128>
 8004276:	a201      	add	r2, pc, #4	@ (adr r2, 800427c <UART_SetConfig+0xdc>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080042c9 	.word	0x080042c9
 8004284:	080042c9 	.word	0x080042c9
 8004288:	080042c9 	.word	0x080042c9
 800428c:	080042bd 	.word	0x080042bd
 8004290:	080042c9 	.word	0x080042c9
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042c9 	.word	0x080042c9
 800429c:	080042b7 	.word	0x080042b7
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	080042c9 	.word	0x080042c9
 80042ac:	080042c3 	.word	0x080042c3
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e118      	b.n	80044e8 <UART_SetConfig+0x348>
 80042b6:	2302      	movs	r3, #2
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e115      	b.n	80044e8 <UART_SetConfig+0x348>
 80042bc:	2304      	movs	r3, #4
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e112      	b.n	80044e8 <UART_SetConfig+0x348>
 80042c2:	2308      	movs	r3, #8
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e10f      	b.n	80044e8 <UART_SetConfig+0x348>
 80042c8:	2310      	movs	r3, #16
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e10c      	b.n	80044e8 <UART_SetConfig+0x348>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a68      	ldr	r2, [pc, #416]	@ (8004474 <UART_SetConfig+0x2d4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d120      	bne.n	800431a <UART_SetConfig+0x17a>
 80042d8:	4b64      	ldr	r3, [pc, #400]	@ (800446c <UART_SetConfig+0x2cc>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042e2:	2b30      	cmp	r3, #48	@ 0x30
 80042e4:	d013      	beq.n	800430e <UART_SetConfig+0x16e>
 80042e6:	2b30      	cmp	r3, #48	@ 0x30
 80042e8:	d814      	bhi.n	8004314 <UART_SetConfig+0x174>
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d009      	beq.n	8004302 <UART_SetConfig+0x162>
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d810      	bhi.n	8004314 <UART_SetConfig+0x174>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <UART_SetConfig+0x15c>
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d006      	beq.n	8004308 <UART_SetConfig+0x168>
 80042fa:	e00b      	b.n	8004314 <UART_SetConfig+0x174>
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e0f2      	b.n	80044e8 <UART_SetConfig+0x348>
 8004302:	2302      	movs	r3, #2
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e0ef      	b.n	80044e8 <UART_SetConfig+0x348>
 8004308:	2304      	movs	r3, #4
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e0ec      	b.n	80044e8 <UART_SetConfig+0x348>
 800430e:	2308      	movs	r3, #8
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e0e9      	b.n	80044e8 <UART_SetConfig+0x348>
 8004314:	2310      	movs	r3, #16
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e0e6      	b.n	80044e8 <UART_SetConfig+0x348>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a56      	ldr	r2, [pc, #344]	@ (8004478 <UART_SetConfig+0x2d8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d120      	bne.n	8004366 <UART_SetConfig+0x1c6>
 8004324:	4b51      	ldr	r3, [pc, #324]	@ (800446c <UART_SetConfig+0x2cc>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800432e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004330:	d013      	beq.n	800435a <UART_SetConfig+0x1ba>
 8004332:	2bc0      	cmp	r3, #192	@ 0xc0
 8004334:	d814      	bhi.n	8004360 <UART_SetConfig+0x1c0>
 8004336:	2b80      	cmp	r3, #128	@ 0x80
 8004338:	d009      	beq.n	800434e <UART_SetConfig+0x1ae>
 800433a:	2b80      	cmp	r3, #128	@ 0x80
 800433c:	d810      	bhi.n	8004360 <UART_SetConfig+0x1c0>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <UART_SetConfig+0x1a8>
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d006      	beq.n	8004354 <UART_SetConfig+0x1b4>
 8004346:	e00b      	b.n	8004360 <UART_SetConfig+0x1c0>
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e0cc      	b.n	80044e8 <UART_SetConfig+0x348>
 800434e:	2302      	movs	r3, #2
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e0c9      	b.n	80044e8 <UART_SetConfig+0x348>
 8004354:	2304      	movs	r3, #4
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e0c6      	b.n	80044e8 <UART_SetConfig+0x348>
 800435a:	2308      	movs	r3, #8
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e0c3      	b.n	80044e8 <UART_SetConfig+0x348>
 8004360:	2310      	movs	r3, #16
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e0c0      	b.n	80044e8 <UART_SetConfig+0x348>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a44      	ldr	r2, [pc, #272]	@ (800447c <UART_SetConfig+0x2dc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d125      	bne.n	80043bc <UART_SetConfig+0x21c>
 8004370:	4b3e      	ldr	r3, [pc, #248]	@ (800446c <UART_SetConfig+0x2cc>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437e:	d017      	beq.n	80043b0 <UART_SetConfig+0x210>
 8004380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004384:	d817      	bhi.n	80043b6 <UART_SetConfig+0x216>
 8004386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438a:	d00b      	beq.n	80043a4 <UART_SetConfig+0x204>
 800438c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004390:	d811      	bhi.n	80043b6 <UART_SetConfig+0x216>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <UART_SetConfig+0x1fe>
 8004396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439a:	d006      	beq.n	80043aa <UART_SetConfig+0x20a>
 800439c:	e00b      	b.n	80043b6 <UART_SetConfig+0x216>
 800439e:	2300      	movs	r3, #0
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e0a1      	b.n	80044e8 <UART_SetConfig+0x348>
 80043a4:	2302      	movs	r3, #2
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e09e      	b.n	80044e8 <UART_SetConfig+0x348>
 80043aa:	2304      	movs	r3, #4
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	e09b      	b.n	80044e8 <UART_SetConfig+0x348>
 80043b0:	2308      	movs	r3, #8
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e098      	b.n	80044e8 <UART_SetConfig+0x348>
 80043b6:	2310      	movs	r3, #16
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e095      	b.n	80044e8 <UART_SetConfig+0x348>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004480 <UART_SetConfig+0x2e0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d125      	bne.n	8004412 <UART_SetConfig+0x272>
 80043c6:	4b29      	ldr	r3, [pc, #164]	@ (800446c <UART_SetConfig+0x2cc>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043d4:	d017      	beq.n	8004406 <UART_SetConfig+0x266>
 80043d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043da:	d817      	bhi.n	800440c <UART_SetConfig+0x26c>
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e0:	d00b      	beq.n	80043fa <UART_SetConfig+0x25a>
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e6:	d811      	bhi.n	800440c <UART_SetConfig+0x26c>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <UART_SetConfig+0x254>
 80043ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f0:	d006      	beq.n	8004400 <UART_SetConfig+0x260>
 80043f2:	e00b      	b.n	800440c <UART_SetConfig+0x26c>
 80043f4:	2301      	movs	r3, #1
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e076      	b.n	80044e8 <UART_SetConfig+0x348>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e073      	b.n	80044e8 <UART_SetConfig+0x348>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e070      	b.n	80044e8 <UART_SetConfig+0x348>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e06d      	b.n	80044e8 <UART_SetConfig+0x348>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e06a      	b.n	80044e8 <UART_SetConfig+0x348>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1b      	ldr	r2, [pc, #108]	@ (8004484 <UART_SetConfig+0x2e4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d138      	bne.n	800448e <UART_SetConfig+0x2ee>
 800441c:	4b13      	ldr	r3, [pc, #76]	@ (800446c <UART_SetConfig+0x2cc>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004426:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800442a:	d017      	beq.n	800445c <UART_SetConfig+0x2bc>
 800442c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004430:	d82a      	bhi.n	8004488 <UART_SetConfig+0x2e8>
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004436:	d00b      	beq.n	8004450 <UART_SetConfig+0x2b0>
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800443c:	d824      	bhi.n	8004488 <UART_SetConfig+0x2e8>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <UART_SetConfig+0x2aa>
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004446:	d006      	beq.n	8004456 <UART_SetConfig+0x2b6>
 8004448:	e01e      	b.n	8004488 <UART_SetConfig+0x2e8>
 800444a:	2300      	movs	r3, #0
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e04b      	b.n	80044e8 <UART_SetConfig+0x348>
 8004450:	2302      	movs	r3, #2
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e048      	b.n	80044e8 <UART_SetConfig+0x348>
 8004456:	2304      	movs	r3, #4
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e045      	b.n	80044e8 <UART_SetConfig+0x348>
 800445c:	2308      	movs	r3, #8
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e042      	b.n	80044e8 <UART_SetConfig+0x348>
 8004462:	bf00      	nop
 8004464:	efff69f3 	.word	0xefff69f3
 8004468:	40011000 	.word	0x40011000
 800446c:	40023800 	.word	0x40023800
 8004470:	40004400 	.word	0x40004400
 8004474:	40004800 	.word	0x40004800
 8004478:	40004c00 	.word	0x40004c00
 800447c:	40005000 	.word	0x40005000
 8004480:	40011400 	.word	0x40011400
 8004484:	40007800 	.word	0x40007800
 8004488:	2310      	movs	r3, #16
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e02c      	b.n	80044e8 <UART_SetConfig+0x348>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a72      	ldr	r2, [pc, #456]	@ (800465c <UART_SetConfig+0x4bc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d125      	bne.n	80044e4 <UART_SetConfig+0x344>
 8004498:	4b71      	ldr	r3, [pc, #452]	@ (8004660 <UART_SetConfig+0x4c0>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044a6:	d017      	beq.n	80044d8 <UART_SetConfig+0x338>
 80044a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044ac:	d817      	bhi.n	80044de <UART_SetConfig+0x33e>
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b2:	d00b      	beq.n	80044cc <UART_SetConfig+0x32c>
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b8:	d811      	bhi.n	80044de <UART_SetConfig+0x33e>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <UART_SetConfig+0x326>
 80044be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c2:	d006      	beq.n	80044d2 <UART_SetConfig+0x332>
 80044c4:	e00b      	b.n	80044de <UART_SetConfig+0x33e>
 80044c6:	2300      	movs	r3, #0
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e00d      	b.n	80044e8 <UART_SetConfig+0x348>
 80044cc:	2302      	movs	r3, #2
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e00a      	b.n	80044e8 <UART_SetConfig+0x348>
 80044d2:	2304      	movs	r3, #4
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e007      	b.n	80044e8 <UART_SetConfig+0x348>
 80044d8:	2308      	movs	r3, #8
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e004      	b.n	80044e8 <UART_SetConfig+0x348>
 80044de:	2310      	movs	r3, #16
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e001      	b.n	80044e8 <UART_SetConfig+0x348>
 80044e4:	2310      	movs	r3, #16
 80044e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044f0:	d15b      	bne.n	80045aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80044f2:	7ffb      	ldrb	r3, [r7, #31]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d828      	bhi.n	800454a <UART_SetConfig+0x3aa>
 80044f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <UART_SetConfig+0x360>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004535 	.word	0x08004535
 800450c:	0800454b 	.word	0x0800454b
 8004510:	0800453b 	.word	0x0800453b
 8004514:	0800454b 	.word	0x0800454b
 8004518:	0800454b 	.word	0x0800454b
 800451c:	0800454b 	.word	0x0800454b
 8004520:	08004543 	.word	0x08004543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fe fbd2 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004528:	61b8      	str	r0, [r7, #24]
        break;
 800452a:	e013      	b.n	8004554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7fe fbe2 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8004530:	61b8      	str	r0, [r7, #24]
        break;
 8004532:	e00f      	b.n	8004554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004534:	4b4b      	ldr	r3, [pc, #300]	@ (8004664 <UART_SetConfig+0x4c4>)
 8004536:	61bb      	str	r3, [r7, #24]
        break;
 8004538:	e00c      	b.n	8004554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453a:	f7fe faf5 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 800453e:	61b8      	str	r0, [r7, #24]
        break;
 8004540:	e008      	b.n	8004554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004546:	61bb      	str	r3, [r7, #24]
        break;
 8004548:	e004      	b.n	8004554 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	77bb      	strb	r3, [r7, #30]
        break;
 8004552:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d074      	beq.n	8004644 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	005a      	lsls	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b0f      	cmp	r3, #15
 8004574:	d916      	bls.n	80045a4 <UART_SetConfig+0x404>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457c:	d212      	bcs.n	80045a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f023 030f 	bic.w	r3, r3, #15
 8004586:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	b29b      	uxth	r3, r3
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	b29a      	uxth	r2, r3
 8004594:	89fb      	ldrh	r3, [r7, #14]
 8004596:	4313      	orrs	r3, r2
 8004598:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	89fa      	ldrh	r2, [r7, #14]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e04f      	b.n	8004644 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77bb      	strb	r3, [r7, #30]
 80045a8:	e04c      	b.n	8004644 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045aa:	7ffb      	ldrb	r3, [r7, #31]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d828      	bhi.n	8004602 <UART_SetConfig+0x462>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <UART_SetConfig+0x418>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	08004603 	.word	0x08004603
 80045c8:	080045f3 	.word	0x080045f3
 80045cc:	08004603 	.word	0x08004603
 80045d0:	08004603 	.word	0x08004603
 80045d4:	08004603 	.word	0x08004603
 80045d8:	080045fb 	.word	0x080045fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045dc:	f7fe fb76 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80045e0:	61b8      	str	r0, [r7, #24]
        break;
 80045e2:	e013      	b.n	800460c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7fe fb86 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 80045e8:	61b8      	str	r0, [r7, #24]
        break;
 80045ea:	e00f      	b.n	800460c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <UART_SetConfig+0x4c4>)
 80045ee:	61bb      	str	r3, [r7, #24]
        break;
 80045f0:	e00c      	b.n	800460c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f2:	f7fe fa99 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 80045f6:	61b8      	str	r0, [r7, #24]
        break;
 80045f8:	e008      	b.n	800460c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045fe:	61bb      	str	r3, [r7, #24]
        break;
 8004600:	e004      	b.n	800460c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	77bb      	strb	r3, [r7, #30]
        break;
 800460a:	bf00      	nop
    }

    if (pclk != 0U)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	085a      	lsrs	r2, r3, #1
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	441a      	add	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b0f      	cmp	r3, #15
 800462a:	d909      	bls.n	8004640 <UART_SetConfig+0x4a0>
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004632:	d205      	bcs.n	8004640 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	b29a      	uxth	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	e001      	b.n	8004644 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004650:	7fbb      	ldrb	r3, [r7, #30]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40007c00 	.word	0x40007c00
 8004660:	40023800 	.word	0x40023800
 8004664:	00f42400 	.word	0x00f42400

08004668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01a      	beq.n	800477e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004766:	d10a      	bne.n	800477e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047bc:	f7fc ff00 	bl	80015c0 <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d10e      	bne.n	80047ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f81b 	bl	800481a <UART_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e011      	b.n	8004812 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b09c      	sub	sp, #112	@ 0x70
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482a:	e0a7      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	f000 80a3 	beq.w	800497c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fc fec3 	bl	80015c0 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <UART_WaitOnFlagUntilTimeout+0x32>
 8004846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004848:	2b00      	cmp	r3, #0
 800484a:	d13f      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800485a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004860:	667b      	str	r3, [r7, #100]	@ 0x64
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800486a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800486c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004870:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e6      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	663b      	str	r3, [r7, #96]	@ 0x60
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3308      	adds	r3, #8
 800489c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800489e:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80048ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e5      	bne.n	800487e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e068      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d050      	beq.n	800497c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e8:	d148      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004908:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004912:	637b      	str	r3, [r7, #52]	@ 0x34
 8004914:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e6      	bne.n	80048f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3308      	adds	r3, #8
 800492c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	613b      	str	r3, [r7, #16]
   return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004946:	623a      	str	r2, [r7, #32]
 8004948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	69f9      	ldr	r1, [r7, #28]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	61bb      	str	r3, [r7, #24]
   return(result);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e010      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	429a      	cmp	r2, r3
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	429a      	cmp	r2, r3
 8004998:	f43f af48 	beq.w	800482c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3770      	adds	r7, #112	@ 0x70
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b095      	sub	sp, #84	@ 0x54
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e6      	bne.n	80049ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e5      	bne.n	80049e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d118      	bne.n	8004a4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 0310 	bic.w	r3, r3, #16
 8004a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6979      	ldr	r1, [r7, #20]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	613b      	str	r3, [r7, #16]
   return(result);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e6      	bne.n	8004a1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a62:	bf00      	nop
 8004a64:	3754      	adds	r7, #84	@ 0x54
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff fb71 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b088      	sub	sp, #32
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6979      	ldr	r1, [r7, #20]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e6      	bne.n	8004aa2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff fb3d 	bl	8004160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae6:	bf00      	nop
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004af2:	bf00      	nop
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b02:	f3ef 8305 	mrs	r3, IPSR
 8004b06:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b12:	607b      	str	r3, [r7, #4]
  return(result);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <osKernelInitialize+0x3a>
 8004b26:	4b0e      	ldr	r3, [pc, #56]	@ (8004b60 <osKernelInitialize+0x64>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d103      	bne.n	8004b36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004b2e:	f06f 0305 	mvn.w	r3, #5
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e00c      	b.n	8004b50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b36:	4b0a      	ldr	r3, [pc, #40]	@ (8004b60 <osKernelInitialize+0x64>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b3e:	4b08      	ldr	r3, [pc, #32]	@ (8004b60 <osKernelInitialize+0x64>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e002      	b.n	8004b50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	200001e0 	.word	0x200001e0

08004b64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b6a:	f3ef 8305 	mrs	r3, IPSR
 8004b6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	607b      	str	r3, [r7, #4]
  return(result);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b82:	f3ef 8311 	mrs	r3, BASEPRI
 8004b86:	603b      	str	r3, [r7, #0]
  return(result);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <osKernelStart+0x3a>
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bcc <osKernelStart+0x68>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b96:	f06f 0305 	mvn.w	r3, #5
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e010      	b.n	8004bc0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <osKernelStart+0x68>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d109      	bne.n	8004bba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ba6:	f7ff ffa2 	bl	8004aee <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004baa:	4b08      	ldr	r3, [pc, #32]	@ (8004bcc <osKernelStart+0x68>)
 8004bac:	2202      	movs	r2, #2
 8004bae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bb0:	f001 faa6 	bl	8006100 <vTaskStartScheduler>
      stat = osOK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e002      	b.n	8004bc0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200001e0 	.word	0x200001e0

08004bd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b090      	sub	sp, #64	@ 0x40
 8004bd4:	af04      	add	r7, sp, #16
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be0:	f3ef 8305 	mrs	r3, IPSR
 8004be4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004be6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 808f 	bne.w	8004d0c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d105      	bne.n	8004c06 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8004bfe:	617b      	str	r3, [r7, #20]
  return(result);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <osThreadNew+0x3e>
 8004c06:	4b44      	ldr	r3, [pc, #272]	@ (8004d18 <osThreadNew+0x148>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d07e      	beq.n	8004d0c <osThreadNew+0x13c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d07b      	beq.n	8004d0c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004c18:	2318      	movs	r3, #24
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d045      	beq.n	8004cb8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <osThreadNew+0x6a>
        name = attr->name;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <osThreadNew+0x90>
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	2b38      	cmp	r3, #56	@ 0x38
 8004c52:	d805      	bhi.n	8004c60 <osThreadNew+0x90>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <osThreadNew+0x94>
        return (NULL);
 8004c60:	2300      	movs	r3, #0
 8004c62:	e054      	b.n	8004d0e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00e      	beq.n	8004c9a <osThreadNew+0xca>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2ba7      	cmp	r3, #167	@ 0xa7
 8004c82:	d90a      	bls.n	8004c9a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <osThreadNew+0xca>
        mem = 1;
 8004c94:	2301      	movs	r3, #1
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	e010      	b.n	8004cbc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <osThreadNew+0xec>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d108      	bne.n	8004cbc <osThreadNew+0xec>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <osThreadNew+0xec>
          mem = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	e001      	b.n	8004cbc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d110      	bne.n	8004ce4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cca:	9202      	str	r2, [sp, #8]
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f001 f813 	bl	8005d04 <xTaskCreateStatic>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e013      	b.n	8004d0c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d110      	bne.n	8004d0c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	f107 0310 	add.w	r3, r7, #16
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f001 f867 	bl	8005dd0 <xTaskCreate>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <osThreadNew+0x13c>
          hTask = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d0c:	693b      	ldr	r3, [r7, #16]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3730      	adds	r7, #48	@ 0x30
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200001e0 	.word	0x200001e0

08004d1c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d24:	f3ef 8305 	mrs	r3, IPSR
 8004d28:	613b      	str	r3, [r7, #16]
  return(result);
 8004d2a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d30:	f3ef 8310 	mrs	r3, PRIMASK
 8004d34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <osDelay+0x3c>
 8004d48:	4b0a      	ldr	r3, [pc, #40]	@ (8004d74 <osDelay+0x58>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d103      	bne.n	8004d58 <osDelay+0x3c>
    stat = osErrorISR;
 8004d50:	f06f 0305 	mvn.w	r3, #5
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e007      	b.n	8004d68 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 f994 	bl	8006090 <vTaskDelay>
    }
  }

  return (stat);
 8004d68:	697b      	ldr	r3, [r7, #20]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	200001e0 	.word	0x200001e0

08004d78 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f002 fb29 	bl	80073d8 <pvTimerGetTimerID>
 8004d86:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <TimerCallback+0x22>
    callb->func (callb->arg);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	6852      	ldr	r2, [r2, #4]
 8004d96:	4610      	mov	r0, r2
 8004d98:	4798      	blx	r3
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08e      	sub	sp, #56	@ 0x38
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	460b      	mov	r3, r1
 8004db2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db8:	f3ef 8305 	mrs	r3, IPSR
 8004dbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dbe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d16a      	bne.n	8004e9a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <osTimerNew+0x40>
 8004ddc:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <osTimerNew+0x100>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d05a      	beq.n	8004e9a <osTimerNew+0xf6>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d057      	beq.n	8004e9a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004dea:	2008      	movs	r0, #8
 8004dec:	f002 fd54 	bl	8007898 <pvPortMalloc>
 8004df0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d050      	beq.n	8004e9a <osTimerNew+0xf6>
      callb->func = func;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004e04:	7afb      	ldrb	r3, [r7, #11]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <osTimerNew+0x6c>
        reload = pdFALSE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0e:	e001      	b.n	8004e14 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	623b      	str	r3, [r7, #32]
      name = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01c      	beq.n	8004e5e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <osTimerNew+0x8e>
          name = attr->name;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d006      	beq.n	8004e48 <osTimerNew+0xa4>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004e40:	d902      	bls.n	8004e48 <osTimerNew+0xa4>
          mem = 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	e00c      	b.n	8004e62 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d108      	bne.n	8004e62 <osTimerNew+0xbe>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <osTimerNew+0xbe>
            mem = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	e001      	b.n	8004e62 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10c      	bne.n	8004e82 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea8 <osTimerNew+0x104>)
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e76:	2101      	movs	r1, #1
 8004e78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e7a:	f001 ff0e 	bl	8006c9a <xTimerCreateStatic>
 8004e7e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004e80:	e00b      	b.n	8004e9a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d108      	bne.n	8004e9a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004e88:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <osTimerNew+0x104>)
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e90:	2101      	movs	r1, #1
 8004e92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e94:	f001 fee0 	bl	8006c58 <xTimerCreate>
 8004e98:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3730      	adds	r7, #48	@ 0x30
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	200001e0 	.word	0x200001e0
 8004ea8:	08004d79 	.word	0x08004d79

08004eac <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	@ 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb8:	f3ef 8305 	mrs	r3, IPSR
 8004ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ebe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 8085 	bne.w	8004fd0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eca:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <osMutexNew+0x3a>
 8004ede:	4b3f      	ldr	r3, [pc, #252]	@ (8004fdc <osMutexNew+0x130>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d074      	beq.n	8004fd0 <osMutexNew+0x124>
    if (attr != NULL) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	e001      	b.n	8004ef8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <osMutexNew+0x5c>
      rmtx = 1U;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	e001      	b.n	8004f0c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d15c      	bne.n	8004fd0 <osMutexNew+0x124>
      mem = -1;
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d015      	beq.n	8004f4e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d006      	beq.n	8004f38 <osMutexNew+0x8c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004f30:	d902      	bls.n	8004f38 <osMutexNew+0x8c>
          mem = 1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e00c      	b.n	8004f52 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d108      	bne.n	8004f52 <osMutexNew+0xa6>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <osMutexNew+0xa6>
            mem = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	e001      	b.n	8004f52 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d112      	bne.n	8004f7e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4619      	mov	r1, r3
 8004f64:	2004      	movs	r0, #4
 8004f66:	f000 faae 	bl	80054c6 <xQueueCreateMutexStatic>
 8004f6a:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f6c:	e016      	b.n	8004f9c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	4619      	mov	r1, r3
 8004f74:	2001      	movs	r0, #1
 8004f76:	f000 faa6 	bl	80054c6 <xQueueCreateMutexStatic>
 8004f7a:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f7c:	e00e      	b.n	8004f9c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d004      	beq.n	8004f94 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004f8a:	2004      	movs	r0, #4
 8004f8c:	f000 fa83 	bl	8005496 <xQueueCreateMutex>
 8004f90:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f92:	e003      	b.n	8004f9c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004f94:	2001      	movs	r0, #1
 8004f96:	f000 fa7e 	bl	8005496 <xQueueCreateMutex>
 8004f9a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00c      	beq.n	8004fbc <osMutexNew+0x110>
        if (attr != NULL) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <osMutexNew+0x104>
          name = attr->name;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e001      	b.n	8004fb4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fb8:	f000 fe46 	bl	8005c48 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <osMutexNew+0x124>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3728      	adds	r7, #40	@ 0x28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	200001e0 	.word	0x200001e0

08004fe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a07      	ldr	r2, [pc, #28]	@ (800500c <vApplicationGetIdleTaskMemory+0x2c>)
 8004ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4a06      	ldr	r2, [pc, #24]	@ (8005010 <vApplicationGetIdleTaskMemory+0x30>)
 8004ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	601a      	str	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	200001e4 	.word	0x200001e4
 8005010:	2000028c 	.word	0x2000028c

08005014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a07      	ldr	r2, [pc, #28]	@ (8005040 <vApplicationGetTimerTaskMemory+0x2c>)
 8005024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4a06      	ldr	r2, [pc, #24]	@ (8005044 <vApplicationGetTimerTaskMemory+0x30>)
 800502a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	2000048c 	.word	0x2000048c
 8005044:	20000534 	.word	0x20000534

08005048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f103 0208 	add.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f04f 32ff 	mov.w	r2, #4294967295
 8005060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f103 0208 	add.w	r2, r3, #8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0208 	add.w	r2, r3, #8
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d103      	bne.n	800510a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e00c      	b.n	8005124 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3308      	adds	r3, #8
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e002      	b.n	8005118 <vListInsert+0x2e>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	429a      	cmp	r2, r3
 8005122:	d2f6      	bcs.n	8005112 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6892      	ldr	r2, [r2, #8]
 8005172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6852      	ldr	r2, [r2, #4]
 800517c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	429a      	cmp	r2, r3
 8005186:	d103      	bne.n	8005190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1e5a      	subs	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10d      	bne.n	80051e0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	b672      	cpsid	i
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	b662      	cpsie	i
 80051d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80051e0:	f002 fa2c 	bl	800763c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ec:	68f9      	ldr	r1, [r7, #12]
 80051ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005210:	3b01      	subs	r3, #1
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	441a      	add	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	22ff      	movs	r2, #255	@ 0xff
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	22ff      	movs	r2, #255	@ 0xff
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d114      	bne.n	8005260 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01a      	beq.n	8005274 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3310      	adds	r3, #16
 8005242:	4618      	mov	r0, r3
 8005244:	f001 fa08 	bl	8006658 <xTaskRemoveFromEventList>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d012      	beq.n	8005274 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <xQueueGenericReset+0xd4>)
 8005250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	e009      	b.n	8005274 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3310      	adds	r3, #16
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff feef 	bl	8005048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3324      	adds	r3, #36	@ 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff feea 	bl	8005048 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005274:	f002 fa18 	bl	80076a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005278:	2301      	movs	r3, #1
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	@ 0x38
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	b672      	cpsid	i
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	b662      	cpsie	i
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	b672      	cpsid	i
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	b662      	cpsie	i
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <xQueueGenericCreateStatic+0x5e>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <xQueueGenericCreateStatic+0x62>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueGenericCreateStatic+0x64>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	b672      	cpsid	i
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	b662      	cpsie	i
 8005304:	623b      	str	r3, [r7, #32]
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	e7fd      	b.n	8005308 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <xQueueGenericCreateStatic+0x90>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <xQueueGenericCreateStatic+0x94>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <xQueueGenericCreateStatic+0x96>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	b672      	cpsid	i
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	b662      	cpsie	i
 8005336:	61fb      	str	r3, [r7, #28]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800533e:	2350      	movs	r3, #80	@ 0x50
 8005340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b50      	cmp	r3, #80	@ 0x50
 8005346:	d00d      	beq.n	8005364 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534c:	b672      	cpsid	i
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	b662      	cpsie	i
 800535c:	61bb      	str	r3, [r7, #24]
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005364:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800536a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005378:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f848 	bl	800541c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800538c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800538e:	4618      	mov	r0, r3
 8005390:	3730      	adds	r7, #48	@ 0x30
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005396:	b580      	push	{r7, lr}
 8005398:	b08a      	sub	sp, #40	@ 0x28
 800539a:	af02      	add	r7, sp, #8
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <xQueueGenericCreate+0x30>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	b672      	cpsid	i
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	b662      	cpsie	i
 80053be:	613b      	str	r3, [r7, #16]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e004      	b.n	80053dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3350      	adds	r3, #80	@ 0x50
 80053e0:	4618      	mov	r0, r3
 80053e2:	f002 fa59 	bl	8007898 <pvPortMalloc>
 80053e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d011      	beq.n	8005412 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	3350      	adds	r3, #80	@ 0x50
 80053f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005400:	79fa      	ldrb	r2, [r7, #7]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f805 	bl	800541c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005412:	69bb      	ldr	r3, [r7, #24]
	}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e002      	b.n	800543e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800544a:	2101      	movs	r1, #1
 800544c:	69b8      	ldr	r0, [r7, #24]
 800544e:	f7ff feaf 	bl	80051b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005482:	2300      	movs	r3, #0
 8005484:	2200      	movs	r2, #0
 8005486:	2100      	movs	r1, #0
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f837 	bl	80054fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005496:	b580      	push	{r7, lr}
 8005498:	b086      	sub	sp, #24
 800549a:	af00      	add	r7, sp, #0
 800549c:	4603      	mov	r3, r0
 800549e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6939      	ldr	r1, [r7, #16]
 80054ae:	6978      	ldr	r0, [r7, #20]
 80054b0:	f7ff ff71 	bl	8005396 <xQueueGenericCreate>
 80054b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff ffd3 	bl	8005462 <prvInitialiseMutex>

		return xNewQueue;
 80054bc:	68fb      	ldr	r3, [r7, #12]
	}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af02      	add	r7, sp, #8
 80054cc:	4603      	mov	r3, r0
 80054ce:	6039      	str	r1, [r7, #0]
 80054d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054d2:	2301      	movs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2200      	movs	r2, #0
 80054e2:	6939      	ldr	r1, [r7, #16]
 80054e4:	6978      	ldr	r0, [r7, #20]
 80054e6:	f7ff fecf 	bl	8005288 <xQueueGenericCreateStatic>
 80054ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff ffb8 	bl	8005462 <prvInitialiseMutex>

		return xNewQueue;
 80054f2:	68fb      	ldr	r3, [r7, #12]
	}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	@ 0x38
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800550a:	2300      	movs	r3, #0
 800550c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10d      	bne.n	8005534 <xQueueGenericSend+0x38>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551c:	b672      	cpsid	i
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	b662      	cpsie	i
 800552c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <xQueueGenericSend+0x46>
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <xQueueGenericSend+0x4a>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <xQueueGenericSend+0x4c>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10d      	bne.n	8005568 <xQueueGenericSend+0x6c>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	b672      	cpsid	i
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	b662      	cpsie	i
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d103      	bne.n	8005576 <xQueueGenericSend+0x7a>
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <xQueueGenericSend+0x7e>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <xQueueGenericSend+0x80>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10d      	bne.n	800559c <xQueueGenericSend+0xa0>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	b672      	cpsid	i
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	b662      	cpsie	i
 8005594:	623b      	str	r3, [r7, #32]
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800559c:	f001 fa2a 	bl	80069f4 <xTaskGetSchedulerState>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d102      	bne.n	80055ac <xQueueGenericSend+0xb0>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <xQueueGenericSend+0xb4>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <xQueueGenericSend+0xb6>
 80055b0:	2300      	movs	r3, #0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <xQueueGenericSend+0xd6>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	b672      	cpsid	i
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	b662      	cpsie	i
 80055ca:	61fb      	str	r3, [r7, #28]
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055d2:	f002 f833 	bl	800763c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <xQueueGenericSend+0xec>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d129      	bne.n	800563c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ee:	f000 fa1b 	bl	8005a28 <prvCopyDataToQueue>
 80055f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	3324      	adds	r3, #36	@ 0x24
 8005600:	4618      	mov	r0, r3
 8005602:	f001 f829 	bl	8006658 <xTaskRemoveFromEventList>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d013      	beq.n	8005634 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800560c:	4b3f      	ldr	r3, [pc, #252]	@ (800570c <xQueueGenericSend+0x210>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	e00a      	b.n	8005634 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800561e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005624:	4b39      	ldr	r3, [pc, #228]	@ (800570c <xQueueGenericSend+0x210>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005634:	f002 f838 	bl	80076a8 <vPortExitCritical>
				return pdPASS;
 8005638:	2301      	movs	r3, #1
 800563a:	e063      	b.n	8005704 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005642:	f002 f831 	bl	80076a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005646:	2300      	movs	r3, #0
 8005648:	e05c      	b.n	8005704 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800564a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	4618      	mov	r0, r3
 8005656:	f001 f865 	bl	8006724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800565a:	2301      	movs	r3, #1
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800565e:	f002 f823 	bl	80076a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005662:	f000 fdc1 	bl	80061e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005666:	f001 ffe9 	bl	800763c <vPortEnterCritical>
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005670:	b25b      	sxtb	r3, r3
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d103      	bne.n	8005680 <xQueueGenericSend+0x184>
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005686:	b25b      	sxtb	r3, r3
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d103      	bne.n	8005696 <xQueueGenericSend+0x19a>
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005696:	f002 f807 	bl	80076a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800569a:	1d3a      	adds	r2, r7, #4
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 f854 	bl	8006750 <xTaskCheckForTimeOut>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d124      	bne.n	80056f8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056b0:	f000 fab2 	bl	8005c18 <prvIsQueueFull>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d018      	beq.n	80056ec <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	3310      	adds	r3, #16
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 ff72 	bl	80065ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ca:	f000 fa3d 	bl	8005b48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056ce:	f000 fd99 	bl	8006204 <xTaskResumeAll>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f af7c 	bne.w	80055d2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80056da:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <xQueueGenericSend+0x210>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	e772      	b.n	80055d2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ee:	f000 fa2b 	bl	8005b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056f2:	f000 fd87 	bl	8006204 <xTaskResumeAll>
 80056f6:	e76c      	b.n	80055d2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056fa:	f000 fa25 	bl	8005b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056fe:	f000 fd81 	bl	8006204 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005704:	4618      	mov	r0, r3
 8005706:	3738      	adds	r7, #56	@ 0x38
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08e      	sub	sp, #56	@ 0x38
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	b672      	cpsid	i
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	b662      	cpsie	i
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800573e:	bf00      	nop
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <xQueueGenericSendFromISR+0x42>
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <xQueueGenericSendFromISR+0x46>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <xQueueGenericSendFromISR+0x48>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10d      	bne.n	8005778 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	b672      	cpsid	i
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	b662      	cpsie	i
 8005770:	623b      	str	r3, [r7, #32]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d103      	bne.n	8005786 <xQueueGenericSendFromISR+0x76>
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <xQueueGenericSendFromISR+0x7a>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueGenericSendFromISR+0x7c>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10d      	bne.n	80057ac <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005794:	b672      	cpsid	i
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	b662      	cpsie	i
 80057a4:	61fb      	str	r3, [r7, #28]
}
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ac:	f002 f82e 	bl	800780c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057b0:	f3ef 8211 	mrs	r2, BASEPRI
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	b672      	cpsid	i
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	b662      	cpsie	i
 80057c8:	61ba      	str	r2, [r7, #24]
 80057ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <xQueueGenericSendFromISR+0xd2>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d12c      	bne.n	800583c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057f2:	f000 f919 	bl	8005a28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d112      	bne.n	8005826 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d016      	beq.n	8005836 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	3324      	adds	r3, #36	@ 0x24
 800580c:	4618      	mov	r0, r3
 800580e:	f000 ff23 	bl	8006658 <xTaskRemoveFromEventList>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e007      	b.n	8005836 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005826:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800582a:	3301      	adds	r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	b25a      	sxtb	r2, r3
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005836:	2301      	movs	r3, #1
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800583a:	e001      	b.n	8005840 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800583c:	2300      	movs	r3, #0
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005842:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800584a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800584e:	4618      	mov	r0, r3
 8005850:	3738      	adds	r7, #56	@ 0x38
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	@ 0x30
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005864:	2300      	movs	r3, #0
 8005866:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <xQueueReceive+0x36>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	b672      	cpsid	i
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	b662      	cpsie	i
 8005886:	623b      	str	r3, [r7, #32]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d103      	bne.n	800589c <xQueueReceive+0x44>
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <xQueueReceive+0x48>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <xQueueReceive+0x4a>
 80058a0:	2300      	movs	r3, #0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10d      	bne.n	80058c2 <xQueueReceive+0x6a>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058aa:	b672      	cpsid	i
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	b662      	cpsie	i
 80058ba:	61fb      	str	r3, [r7, #28]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c2:	f001 f897 	bl	80069f4 <xTaskGetSchedulerState>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <xQueueReceive+0x7a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <xQueueReceive+0x7e>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xQueueReceive+0x80>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <xQueueReceive+0xa0>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	b672      	cpsid	i
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	b662      	cpsie	i
 80058f0:	61bb      	str	r3, [r7, #24]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058f8:	f001 fea0 	bl	800763c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01f      	beq.n	8005948 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800590c:	f000 f8f6 	bl	8005afc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	3310      	adds	r3, #16
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fe97 	bl	8006658 <xTaskRemoveFromEventList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005930:	4b3c      	ldr	r3, [pc, #240]	@ (8005a24 <xQueueReceive+0x1cc>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005940:	f001 feb2 	bl	80076a8 <vPortExitCritical>
				return pdPASS;
 8005944:	2301      	movs	r3, #1
 8005946:	e069      	b.n	8005a1c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800594e:	f001 feab 	bl	80076a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005952:	2300      	movs	r3, #0
 8005954:	e062      	b.n	8005a1c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800595c:	f107 0310 	add.w	r3, r7, #16
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fedf 	bl	8006724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005966:	2301      	movs	r3, #1
 8005968:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800596a:	f001 fe9d 	bl	80076a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800596e:	f000 fc3b 	bl	80061e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005972:	f001 fe63 	bl	800763c <vPortEnterCritical>
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800597c:	b25b      	sxtb	r3, r3
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d103      	bne.n	800598c <xQueueReceive+0x134>
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005992:	b25b      	sxtb	r3, r3
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d103      	bne.n	80059a2 <xQueueReceive+0x14a>
 800599a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a2:	f001 fe81 	bl	80076a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059a6:	1d3a      	adds	r2, r7, #4
 80059a8:	f107 0310 	add.w	r3, r7, #16
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fece 	bl	8006750 <xTaskCheckForTimeOut>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d123      	bne.n	8005a02 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059bc:	f000 f916 	bl	8005bec <prvIsQueueEmpty>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	3324      	adds	r3, #36	@ 0x24
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4611      	mov	r1, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fdec 	bl	80065ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059d6:	f000 f8b7 	bl	8005b48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059da:	f000 fc13 	bl	8006204 <xTaskResumeAll>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d189      	bne.n	80058f8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80059e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <xQueueReceive+0x1cc>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	e780      	b.n	80058f8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059f8:	f000 f8a6 	bl	8005b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059fc:	f000 fc02 	bl	8006204 <xTaskResumeAll>
 8005a00:	e77a      	b.n	80058f8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a04:	f000 f8a0 	bl	8005b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a08:	f000 fbfc 	bl	8006204 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a0e:	f000 f8ed 	bl	8005bec <prvIsQueueEmpty>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f43f af6f 	beq.w	80058f8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3730      	adds	r7, #48	@ 0x30
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d14d      	bne.n	8005aea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 ffec 	bl	8006a30 <xTaskPriorityDisinherit>
 8005a58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e043      	b.n	8005aea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d119      	bne.n	8005a9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6858      	ldr	r0, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	461a      	mov	r2, r3
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	f002 f97e 	bl	8007d74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d32b      	bcc.n	8005aea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	e026      	b.n	8005aea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	68d8      	ldr	r0, [r3, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	f002 f964 	bl	8007d74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	441a      	add	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d207      	bcs.n	8005ad8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	441a      	add	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d105      	bne.n	8005aea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005af2:	697b      	ldr	r3, [r7, #20]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d018      	beq.n	8005b40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	441a      	add	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d303      	bcc.n	8005b30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68d9      	ldr	r1, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6838      	ldr	r0, [r7, #0]
 8005b3c:	f002 f91a 	bl	8007d74 <memcpy>
	}
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b50:	f001 fd74 	bl	800763c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b5c:	e011      	b.n	8005b82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d012      	beq.n	8005b8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3324      	adds	r3, #36	@ 0x24
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fd74 	bl	8006658 <xTaskRemoveFromEventList>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b76:	f000 fe53 	bl	8006820 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	dce9      	bgt.n	8005b5e <prvUnlockQueue+0x16>
 8005b8a:	e000      	b.n	8005b8e <prvUnlockQueue+0x46>
					break;
 8005b8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	22ff      	movs	r2, #255	@ 0xff
 8005b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b96:	f001 fd87 	bl	80076a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b9a:	f001 fd4f 	bl	800763c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ba6:	e011      	b.n	8005bcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d012      	beq.n	8005bd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3310      	adds	r3, #16
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fd4f 	bl	8006658 <xTaskRemoveFromEventList>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bc0:	f000 fe2e 	bl	8006820 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dce9      	bgt.n	8005ba8 <prvUnlockQueue+0x60>
 8005bd4:	e000      	b.n	8005bd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	22ff      	movs	r2, #255	@ 0xff
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005be0:	f001 fd62 	bl	80076a8 <vPortExitCritical>
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf4:	f001 fd22 	bl	800763c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e001      	b.n	8005c0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c0a:	f001 fd4d 	bl	80076a8 <vPortExitCritical>

	return xReturn;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c20:	f001 fd0c 	bl	800763c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d102      	bne.n	8005c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e001      	b.n	8005c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c3a:	f001 fd35 	bl	80076a8 <vPortExitCritical>

	return xReturn;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e014      	b.n	8005c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c58:	4a0f      	ldr	r2, [pc, #60]	@ (8005c98 <vQueueAddToRegistry+0x50>)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c64:	490c      	ldr	r1, [pc, #48]	@ (8005c98 <vQueueAddToRegistry+0x50>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c98 <vQueueAddToRegistry+0x50>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c7a:	e006      	b.n	8005c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	d9e7      	bls.n	8005c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000934 	.word	0x20000934

08005c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cac:	f001 fcc6 	bl	800763c <vPortEnterCritical>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d103      	bne.n	8005cc6 <vQueueWaitForMessageRestricted+0x2a>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d103      	bne.n	8005cdc <vQueueWaitForMessageRestricted+0x40>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cdc:	f001 fce4 	bl	80076a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3324      	adds	r3, #36	@ 0x24
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fc83 	bl	80065fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ff26 	bl	8005b48 <prvUnlockQueue>
	}
 8005cfc:	bf00      	nop
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08e      	sub	sp, #56	@ 0x38
 8005d08:	af04      	add	r7, sp, #16
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10d      	bne.n	8005d34 <xTaskCreateStatic+0x30>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1c:	b672      	cpsid	i
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	b662      	cpsie	i
 8005d2c:	623b      	str	r3, [r7, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	e7fd      	b.n	8005d30 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10d      	bne.n	8005d56 <xTaskCreateStatic+0x52>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	b672      	cpsid	i
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	b662      	cpsie	i
 8005d4e:	61fb      	str	r3, [r7, #28]
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d56:	23a8      	movs	r3, #168	@ 0xa8
 8005d58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005d5e:	d00d      	beq.n	8005d7c <xTaskCreateStatic+0x78>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	b672      	cpsid	i
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	b662      	cpsie	i
 8005d74:	61bb      	str	r3, [r7, #24]
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	e7fd      	b.n	8005d78 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01e      	beq.n	8005dc2 <xTaskCreateStatic+0xbe>
 8005d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01b      	beq.n	8005dc2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9303      	str	r3, [sp, #12]
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	9302      	str	r3, [sp, #8]
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f851 	bl	8005e5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dbc:	f000 f8f8 	bl	8005fb0 <prvAddNewTaskToReadyList>
 8005dc0:	e001      	b.n	8005dc6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dc6:	697b      	ldr	r3, [r7, #20]
	}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	@ 0x30
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fd57 	bl	8007898 <pvPortMalloc>
 8005dea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00e      	beq.n	8005e10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005df2:	20a8      	movs	r0, #168	@ 0xa8
 8005df4:	f001 fd50 	bl	8007898 <pvPortMalloc>
 8005df8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e06:	e005      	b.n	8005e14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e08:	6978      	ldr	r0, [r7, #20]
 8005e0a:	f001 fe13 	bl	8007a34 <vPortFree>
 8005e0e:	e001      	b.n	8005e14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	2300      	movs	r3, #0
 8005e26:	9303      	str	r3, [sp, #12]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	9302      	str	r3, [sp, #8]
 8005e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f80f 	bl	8005e5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3e:	69f8      	ldr	r0, [r7, #28]
 8005e40:	f000 f8b6 	bl	8005fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e44:	2301      	movs	r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	e002      	b.n	8005e50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e50:	69bb      	ldr	r3, [r7, #24]
	}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	461a      	mov	r2, r3
 8005e74:	21a5      	movs	r1, #165	@ 0xa5
 8005e76:	f001 fef9 	bl	8007c6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005e84:	440b      	add	r3, r1
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f023 0307 	bic.w	r3, r3, #7
 8005e92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	b672      	cpsid	i
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	b662      	cpsie	i
 8005eb2:	617b      	str	r3, [r7, #20]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01f      	beq.n	8005f00 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	e012      	b.n	8005eec <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	7819      	ldrb	r1, [r3, #0]
 8005ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3334      	adds	r3, #52	@ 0x34
 8005ed6:	460a      	mov	r2, r1
 8005ed8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d006      	beq.n	8005ef4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	d9e9      	bls.n	8005ec6 <prvInitialiseNewTask+0x6a>
 8005ef2:	e000      	b.n	8005ef6 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005ef4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005efe:	e003      	b.n	8005f08 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	2b37      	cmp	r3, #55	@ 0x37
 8005f0c:	d901      	bls.n	8005f12 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f0e:	2337      	movs	r3, #55	@ 0x37
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	2200      	movs	r2, #0
 8005f22:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	3304      	adds	r3, #4
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff f8ad 	bl	8005088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	3318      	adds	r3, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff f8a8 	bl	8005088 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	3354      	adds	r3, #84	@ 0x54
 8005f62:	224c      	movs	r2, #76	@ 0x4c
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 fe80 	bl	8007c6c <memset>
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa4 <prvInitialiseNewTask+0x148>)
 8005f70:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa8 <prvInitialiseNewTask+0x14c>)
 8005f76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005fac <prvInitialiseNewTask+0x150>)
 8005f7c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	68f9      	ldr	r1, [r7, #12]
 8005f82:	69b8      	ldr	r0, [r7, #24]
 8005f84:	f001 fa4c 	bl	8007420 <pxPortInitialiseStack>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f9a:	bf00      	nop
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20004bc0 	.word	0x20004bc0
 8005fa8:	20004c28 	.word	0x20004c28
 8005fac:	20004c90 	.word	0x20004c90

08005fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fb8:	f001 fb40 	bl	800763c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006074 <prvAddNewTaskToReadyList+0xc4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006074 <prvAddNewTaskToReadyList+0xc4>)
 8005fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8006078 <prvAddNewTaskToReadyList+0xc8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fce:	4a2a      	ldr	r2, [pc, #168]	@ (8006078 <prvAddNewTaskToReadyList+0xc8>)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fd4:	4b27      	ldr	r3, [pc, #156]	@ (8006074 <prvAddNewTaskToReadyList+0xc4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d110      	bne.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fdc:	f000 fc44 	bl	8006868 <prvInitialiseTaskLists>
 8005fe0:	e00d      	b.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fe2:	4b26      	ldr	r3, [pc, #152]	@ (800607c <prvAddNewTaskToReadyList+0xcc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fea:	4b23      	ldr	r3, [pc, #140]	@ (8006078 <prvAddNewTaskToReadyList+0xc8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d802      	bhi.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8006078 <prvAddNewTaskToReadyList+0xc8>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ffe:	4b20      	ldr	r3, [pc, #128]	@ (8006080 <prvAddNewTaskToReadyList+0xd0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	4a1e      	ldr	r2, [pc, #120]	@ (8006080 <prvAddNewTaskToReadyList+0xd0>)
 8006006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006008:	4b1d      	ldr	r3, [pc, #116]	@ (8006080 <prvAddNewTaskToReadyList+0xd0>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006014:	4b1b      	ldr	r3, [pc, #108]	@ (8006084 <prvAddNewTaskToReadyList+0xd4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d903      	bls.n	8006024 <prvAddNewTaskToReadyList+0x74>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	4a18      	ldr	r2, [pc, #96]	@ (8006084 <prvAddNewTaskToReadyList+0xd4>)
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4a15      	ldr	r2, [pc, #84]	@ (8006088 <prvAddNewTaskToReadyList+0xd8>)
 8006032:	441a      	add	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f7ff f831 	bl	80050a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006040:	f001 fb32 	bl	80076a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006044:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <prvAddNewTaskToReadyList+0xcc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800604c:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <prvAddNewTaskToReadyList+0xc8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	429a      	cmp	r2, r3
 8006058:	d207      	bcs.n	800606a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800605a:	4b0c      	ldr	r3, [pc, #48]	@ (800608c <prvAddNewTaskToReadyList+0xdc>)
 800605c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000e48 	.word	0x20000e48
 8006078:	20000974 	.word	0x20000974
 800607c:	20000e54 	.word	0x20000e54
 8006080:	20000e64 	.word	0x20000e64
 8006084:	20000e50 	.word	0x20000e50
 8006088:	20000978 	.word	0x20000978
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01a      	beq.n	80060d8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060a2:	4b15      	ldr	r3, [pc, #84]	@ (80060f8 <vTaskDelay+0x68>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <vTaskDelay+0x36>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	b672      	cpsid	i
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	b662      	cpsie	i
 80060be:	60bb      	str	r3, [r7, #8]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80060c6:	f000 f88f 	bl	80061e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060ca:	2100      	movs	r1, #0
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fd23 	bl	8006b18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060d2:	f000 f897 	bl	8006204 <xTaskResumeAll>
 80060d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d107      	bne.n	80060ee <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80060de:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <vTaskDelay+0x6c>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000e70 	.word	0x20000e70
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800610e:	463a      	mov	r2, r7
 8006110:	1d39      	adds	r1, r7, #4
 8006112:	f107 0308 	add.w	r3, r7, #8
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe ff62 	bl	8004fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	9202      	str	r2, [sp, #8]
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	2300      	movs	r3, #0
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	460a      	mov	r2, r1
 800612e:	4926      	ldr	r1, [pc, #152]	@ (80061c8 <vTaskStartScheduler+0xc8>)
 8006130:	4826      	ldr	r0, [pc, #152]	@ (80061cc <vTaskStartScheduler+0xcc>)
 8006132:	f7ff fde7 	bl	8005d04 <xTaskCreateStatic>
 8006136:	4603      	mov	r3, r0
 8006138:	4a25      	ldr	r2, [pc, #148]	@ (80061d0 <vTaskStartScheduler+0xd0>)
 800613a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800613c:	4b24      	ldr	r3, [pc, #144]	@ (80061d0 <vTaskStartScheduler+0xd0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006144:	2301      	movs	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	e001      	b.n	800614e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d102      	bne.n	800615a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006154:	f000 fd34 	bl	8006bc0 <xTimerCreateTimerTask>
 8006158:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d11d      	bne.n	800619c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	b672      	cpsid	i
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	b662      	cpsie	i
 8006174:	613b      	str	r3, [r7, #16]
}
 8006176:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006178:	4b16      	ldr	r3, [pc, #88]	@ (80061d4 <vTaskStartScheduler+0xd4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3354      	adds	r3, #84	@ 0x54
 800617e:	4a16      	ldr	r2, [pc, #88]	@ (80061d8 <vTaskStartScheduler+0xd8>)
 8006180:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006182:	4b16      	ldr	r3, [pc, #88]	@ (80061dc <vTaskStartScheduler+0xdc>)
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800618a:	4b15      	ldr	r3, [pc, #84]	@ (80061e0 <vTaskStartScheduler+0xe0>)
 800618c:	2201      	movs	r2, #1
 800618e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006190:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <vTaskStartScheduler+0xe4>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006196:	f001 f9d3 	bl	8007540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800619a:	e011      	b.n	80061c0 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d10d      	bne.n	80061c0 <vTaskStartScheduler+0xc0>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	b672      	cpsid	i
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	b662      	cpsie	i
 80061b8:	60fb      	str	r3, [r7, #12]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <vTaskStartScheduler+0xbc>
}
 80061c0:	bf00      	nop
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	08007ec0 	.word	0x08007ec0
 80061cc:	08006839 	.word	0x08006839
 80061d0:	20000e6c 	.word	0x20000e6c
 80061d4:	20000974 	.word	0x20000974
 80061d8:	20000010 	.word	0x20000010
 80061dc:	20000e68 	.word	0x20000e68
 80061e0:	20000e54 	.word	0x20000e54
 80061e4:	20000e4c 	.word	0x20000e4c

080061e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061ec:	4b04      	ldr	r3, [pc, #16]	@ (8006200 <vTaskSuspendAll+0x18>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	4a03      	ldr	r2, [pc, #12]	@ (8006200 <vTaskSuspendAll+0x18>)
 80061f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000e70 	.word	0x20000e70

08006204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006212:	4b43      	ldr	r3, [pc, #268]	@ (8006320 <xTaskResumeAll+0x11c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <xTaskResumeAll+0x32>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	b672      	cpsid	i
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	b662      	cpsie	i
 800622e:	603b      	str	r3, [r7, #0]
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	e7fd      	b.n	8006232 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006236:	f001 fa01 	bl	800763c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800623a:	4b39      	ldr	r3, [pc, #228]	@ (8006320 <xTaskResumeAll+0x11c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3b01      	subs	r3, #1
 8006240:	4a37      	ldr	r2, [pc, #220]	@ (8006320 <xTaskResumeAll+0x11c>)
 8006242:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006244:	4b36      	ldr	r3, [pc, #216]	@ (8006320 <xTaskResumeAll+0x11c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d162      	bne.n	8006312 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800624c:	4b35      	ldr	r3, [pc, #212]	@ (8006324 <xTaskResumeAll+0x120>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d05e      	beq.n	8006312 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006254:	e02f      	b.n	80062b6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006256:	4b34      	ldr	r3, [pc, #208]	@ (8006328 <xTaskResumeAll+0x124>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3318      	adds	r3, #24
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe ff7a 	bl	800515c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe ff75 	bl	800515c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006276:	4b2d      	ldr	r3, [pc, #180]	@ (800632c <xTaskResumeAll+0x128>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d903      	bls.n	8006286 <xTaskResumeAll+0x82>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	4a2a      	ldr	r2, [pc, #168]	@ (800632c <xTaskResumeAll+0x128>)
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4a27      	ldr	r2, [pc, #156]	@ (8006330 <xTaskResumeAll+0x12c>)
 8006294:	441a      	add	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f7fe ff00 	bl	80050a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a6:	4b23      	ldr	r3, [pc, #140]	@ (8006334 <xTaskResumeAll+0x130>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d302      	bcc.n	80062b6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80062b0:	4b21      	ldr	r3, [pc, #132]	@ (8006338 <xTaskResumeAll+0x134>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006328 <xTaskResumeAll+0x124>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1cb      	bne.n	8006256 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062c4:	f000 fb76 	bl	80069b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062c8:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <xTaskResumeAll+0x138>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d010      	beq.n	80062f6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062d4:	f000 f846 	bl	8006364 <xTaskIncrementTick>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80062de:	4b16      	ldr	r3, [pc, #88]	@ (8006338 <xTaskResumeAll+0x134>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f1      	bne.n	80062d4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80062f0:	4b12      	ldr	r3, [pc, #72]	@ (800633c <xTaskResumeAll+0x138>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062f6:	4b10      	ldr	r3, [pc, #64]	@ (8006338 <xTaskResumeAll+0x134>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062fe:	2301      	movs	r3, #1
 8006300:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006302:	4b0f      	ldr	r3, [pc, #60]	@ (8006340 <xTaskResumeAll+0x13c>)
 8006304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006312:	f001 f9c9 	bl	80076a8 <vPortExitCritical>

	return xAlreadyYielded;
 8006316:	68bb      	ldr	r3, [r7, #8]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	20000e70 	.word	0x20000e70
 8006324:	20000e48 	.word	0x20000e48
 8006328:	20000e08 	.word	0x20000e08
 800632c:	20000e50 	.word	0x20000e50
 8006330:	20000978 	.word	0x20000978
 8006334:	20000974 	.word	0x20000974
 8006338:	20000e5c 	.word	0x20000e5c
 800633c:	20000e58 	.word	0x20000e58
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800634a:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <xTaskGetTickCount+0x1c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006350:	687b      	ldr	r3, [r7, #4]
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000e4c 	.word	0x20000e4c

08006364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636e:	4b50      	ldr	r3, [pc, #320]	@ (80064b0 <xTaskIncrementTick+0x14c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 808c 	bne.w	8006490 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006378:	4b4e      	ldr	r3, [pc, #312]	@ (80064b4 <xTaskIncrementTick+0x150>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006380:	4a4c      	ldr	r2, [pc, #304]	@ (80064b4 <xTaskIncrementTick+0x150>)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d123      	bne.n	80063d4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800638c:	4b4a      	ldr	r3, [pc, #296]	@ (80064b8 <xTaskIncrementTick+0x154>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	b672      	cpsid	i
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	b662      	cpsie	i
 80063aa:	603b      	str	r3, [r7, #0]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <xTaskIncrementTick+0x4a>
 80063b2:	4b41      	ldr	r3, [pc, #260]	@ (80064b8 <xTaskIncrementTick+0x154>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	4b40      	ldr	r3, [pc, #256]	@ (80064bc <xTaskIncrementTick+0x158>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a3e      	ldr	r2, [pc, #248]	@ (80064b8 <xTaskIncrementTick+0x154>)
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4a3e      	ldr	r2, [pc, #248]	@ (80064bc <xTaskIncrementTick+0x158>)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	4b3e      	ldr	r3, [pc, #248]	@ (80064c0 <xTaskIncrementTick+0x15c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3301      	adds	r3, #1
 80063cc:	4a3c      	ldr	r2, [pc, #240]	@ (80064c0 <xTaskIncrementTick+0x15c>)
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	f000 faf0 	bl	80069b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063d4:	4b3b      	ldr	r3, [pc, #236]	@ (80064c4 <xTaskIncrementTick+0x160>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d349      	bcc.n	8006472 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063de:	4b36      	ldr	r3, [pc, #216]	@ (80064b8 <xTaskIncrementTick+0x154>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e8:	4b36      	ldr	r3, [pc, #216]	@ (80064c4 <xTaskIncrementTick+0x160>)
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	601a      	str	r2, [r3, #0]
					break;
 80063f0:	e03f      	b.n	8006472 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f2:	4b31      	ldr	r3, [pc, #196]	@ (80064b8 <xTaskIncrementTick+0x154>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d203      	bcs.n	8006412 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800640a:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <xTaskIncrementTick+0x160>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006410:	e02f      	b.n	8006472 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	3304      	adds	r3, #4
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe fea0 	bl	800515c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	3318      	adds	r3, #24
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe fe97 	bl	800515c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006432:	4b25      	ldr	r3, [pc, #148]	@ (80064c8 <xTaskIncrementTick+0x164>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d903      	bls.n	8006442 <xTaskIncrementTick+0xde>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	4a22      	ldr	r2, [pc, #136]	@ (80064c8 <xTaskIncrementTick+0x164>)
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4a1f      	ldr	r2, [pc, #124]	@ (80064cc <xTaskIncrementTick+0x168>)
 8006450:	441a      	add	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	3304      	adds	r3, #4
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f7fe fe22 	bl	80050a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006462:	4b1b      	ldr	r3, [pc, #108]	@ (80064d0 <xTaskIncrementTick+0x16c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	429a      	cmp	r2, r3
 800646a:	d3b8      	bcc.n	80063de <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800646c:	2301      	movs	r3, #1
 800646e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006470:	e7b5      	b.n	80063de <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006472:	4b17      	ldr	r3, [pc, #92]	@ (80064d0 <xTaskIncrementTick+0x16c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006478:	4914      	ldr	r1, [pc, #80]	@ (80064cc <xTaskIncrementTick+0x168>)
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	440b      	add	r3, r1
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d907      	bls.n	800649a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e004      	b.n	800649a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006490:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <xTaskIncrementTick+0x170>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	4a0f      	ldr	r2, [pc, #60]	@ (80064d4 <xTaskIncrementTick+0x170>)
 8006498:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800649a:	4b0f      	ldr	r3, [pc, #60]	@ (80064d8 <xTaskIncrementTick+0x174>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064a6:	697b      	ldr	r3, [r7, #20]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000e70 	.word	0x20000e70
 80064b4:	20000e4c 	.word	0x20000e4c
 80064b8:	20000e00 	.word	0x20000e00
 80064bc:	20000e04 	.word	0x20000e04
 80064c0:	20000e60 	.word	0x20000e60
 80064c4:	20000e68 	.word	0x20000e68
 80064c8:	20000e50 	.word	0x20000e50
 80064cc:	20000978 	.word	0x20000978
 80064d0:	20000974 	.word	0x20000974
 80064d4:	20000e58 	.word	0x20000e58
 80064d8:	20000e5c 	.word	0x20000e5c

080064dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006594 <vTaskSwitchContext+0xb8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064ea:	4b2b      	ldr	r3, [pc, #172]	@ (8006598 <vTaskSwitchContext+0xbc>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064f0:	e049      	b.n	8006586 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80064f2:	4b29      	ldr	r3, [pc, #164]	@ (8006598 <vTaskSwitchContext+0xbc>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f8:	4b28      	ldr	r3, [pc, #160]	@ (800659c <vTaskSwitchContext+0xc0>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	e013      	b.n	8006528 <vTaskSwitchContext+0x4c>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10d      	bne.n	8006522 <vTaskSwitchContext+0x46>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650a:	b672      	cpsid	i
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	b662      	cpsie	i
 800651a:	607b      	str	r3, [r7, #4]
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <vTaskSwitchContext+0x42>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b01      	subs	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	491d      	ldr	r1, [pc, #116]	@ (80065a0 <vTaskSwitchContext+0xc4>)
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0e1      	beq.n	8006500 <vTaskSwitchContext+0x24>
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4a16      	ldr	r2, [pc, #88]	@ (80065a0 <vTaskSwitchContext+0xc4>)
 8006548:	4413      	add	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3308      	adds	r3, #8
 800655e:	429a      	cmp	r2, r3
 8006560:	d104      	bne.n	800656c <vTaskSwitchContext+0x90>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	605a      	str	r2, [r3, #4]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	4a0c      	ldr	r2, [pc, #48]	@ (80065a4 <vTaskSwitchContext+0xc8>)
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4a09      	ldr	r2, [pc, #36]	@ (800659c <vTaskSwitchContext+0xc0>)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800657c:	4b09      	ldr	r3, [pc, #36]	@ (80065a4 <vTaskSwitchContext+0xc8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3354      	adds	r3, #84	@ 0x54
 8006582:	4a09      	ldr	r2, [pc, #36]	@ (80065a8 <vTaskSwitchContext+0xcc>)
 8006584:	6013      	str	r3, [r2, #0]
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000e70 	.word	0x20000e70
 8006598:	20000e5c 	.word	0x20000e5c
 800659c:	20000e50 	.word	0x20000e50
 80065a0:	20000978 	.word	0x20000978
 80065a4:	20000974 	.word	0x20000974
 80065a8:	20000010 	.word	0x20000010

080065ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10d      	bne.n	80065d8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c0:	b672      	cpsid	i
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	b662      	cpsie	i
 80065d0:	60fb      	str	r3, [r7, #12]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065d8:	4b07      	ldr	r3, [pc, #28]	@ (80065f8 <vTaskPlaceOnEventList+0x4c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3318      	adds	r3, #24
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fe fd82 	bl	80050ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065e6:	2101      	movs	r1, #1
 80065e8:	6838      	ldr	r0, [r7, #0]
 80065ea:	f000 fa95 	bl	8006b18 <prvAddCurrentTaskToDelayedList>
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000974 	.word	0x20000974

080065fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10d      	bne.n	800662a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	b672      	cpsid	i
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	b662      	cpsie	i
 8006622:	617b      	str	r3, [r7, #20]
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800662a:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <vTaskPlaceOnEventListRestricted+0x58>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3318      	adds	r3, #24
 8006630:	4619      	mov	r1, r3
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7fe fd35 	bl	80050a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800663e:	f04f 33ff 	mov.w	r3, #4294967295
 8006642:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	68b8      	ldr	r0, [r7, #8]
 8006648:	f000 fa66 	bl	8006b18 <prvAddCurrentTaskToDelayedList>
	}
 800664c:	bf00      	nop
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000974 	.word	0x20000974

08006658 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10d      	bne.n	800668a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	b672      	cpsid	i
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	b662      	cpsie	i
 8006682:	60fb      	str	r3, [r7, #12]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3318      	adds	r3, #24
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe fd64 	bl	800515c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006694:	4b1d      	ldr	r3, [pc, #116]	@ (800670c <xTaskRemoveFromEventList+0xb4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d11d      	bne.n	80066d8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3304      	adds	r3, #4
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe fd5b 	bl	800515c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066aa:	4b19      	ldr	r3, [pc, #100]	@ (8006710 <xTaskRemoveFromEventList+0xb8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d903      	bls.n	80066ba <xTaskRemoveFromEventList+0x62>
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <xTaskRemoveFromEventList+0xb8>)
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4a13      	ldr	r2, [pc, #76]	@ (8006714 <xTaskRemoveFromEventList+0xbc>)
 80066c8:	441a      	add	r2, r3
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f7fe fce6 	bl	80050a2 <vListInsertEnd>
 80066d6:	e005      	b.n	80066e4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	3318      	adds	r3, #24
 80066dc:	4619      	mov	r1, r3
 80066de:	480e      	ldr	r0, [pc, #56]	@ (8006718 <xTaskRemoveFromEventList+0xc0>)
 80066e0:	f7fe fcdf 	bl	80050a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e8:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <xTaskRemoveFromEventList+0xc4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d905      	bls.n	80066fe <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066f2:	2301      	movs	r3, #1
 80066f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006720 <xTaskRemoveFromEventList+0xc8>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e001      	b.n	8006702 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006702:	697b      	ldr	r3, [r7, #20]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000e70 	.word	0x20000e70
 8006710:	20000e50 	.word	0x20000e50
 8006714:	20000978 	.word	0x20000978
 8006718:	20000e08 	.word	0x20000e08
 800671c:	20000974 	.word	0x20000974
 8006720:	20000e5c 	.word	0x20000e5c

08006724 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800672c:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <vTaskInternalSetTimeOutState+0x24>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006734:	4b05      	ldr	r3, [pc, #20]	@ (800674c <vTaskInternalSetTimeOutState+0x28>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	605a      	str	r2, [r3, #4]
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000e60 	.word	0x20000e60
 800674c:	20000e4c 	.word	0x20000e4c

08006750 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10d      	bne.n	800677c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	b672      	cpsid	i
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	b662      	cpsie	i
 8006774:	613b      	str	r3, [r7, #16]
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10d      	bne.n	800679e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	60fb      	str	r3, [r7, #12]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800679e:	f000 ff4d 	bl	800763c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006818 <xTaskCheckForTimeOut+0xc8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d102      	bne.n	80067c2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	e023      	b.n	800680a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b15      	ldr	r3, [pc, #84]	@ (800681c <xTaskCheckForTimeOut+0xcc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d007      	beq.n	80067de <xTaskCheckForTimeOut+0x8e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e015      	b.n	800680a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d20b      	bcs.n	8006800 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff95 	bl	8006724 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e004      	b.n	800680a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800680a:	f000 ff4d 	bl	80076a8 <vPortExitCritical>

	return xReturn;
 800680e:	69fb      	ldr	r3, [r7, #28]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000e4c 	.word	0x20000e4c
 800681c:	20000e60 	.word	0x20000e60

08006820 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006824:	4b03      	ldr	r3, [pc, #12]	@ (8006834 <vTaskMissedYield+0x14>)
 8006826:	2201      	movs	r2, #1
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	20000e5c 	.word	0x20000e5c

08006838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006840:	f000 f852 	bl	80068e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006844:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <prvIdleTask+0x28>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d9f9      	bls.n	8006840 <prvIdleTask+0x8>
			{
				taskYIELD();
 800684c:	4b05      	ldr	r3, [pc, #20]	@ (8006864 <prvIdleTask+0x2c>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800685c:	e7f0      	b.n	8006840 <prvIdleTask+0x8>
 800685e:	bf00      	nop
 8006860:	20000978 	.word	0x20000978
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	e00c      	b.n	800688e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4a12      	ldr	r2, [pc, #72]	@ (80068c8 <prvInitialiseTaskLists+0x60>)
 8006880:	4413      	add	r3, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fbe0 	bl	8005048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3301      	adds	r3, #1
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b37      	cmp	r3, #55	@ 0x37
 8006892:	d9ef      	bls.n	8006874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006894:	480d      	ldr	r0, [pc, #52]	@ (80068cc <prvInitialiseTaskLists+0x64>)
 8006896:	f7fe fbd7 	bl	8005048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800689a:	480d      	ldr	r0, [pc, #52]	@ (80068d0 <prvInitialiseTaskLists+0x68>)
 800689c:	f7fe fbd4 	bl	8005048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068a0:	480c      	ldr	r0, [pc, #48]	@ (80068d4 <prvInitialiseTaskLists+0x6c>)
 80068a2:	f7fe fbd1 	bl	8005048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068a6:	480c      	ldr	r0, [pc, #48]	@ (80068d8 <prvInitialiseTaskLists+0x70>)
 80068a8:	f7fe fbce 	bl	8005048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068ac:	480b      	ldr	r0, [pc, #44]	@ (80068dc <prvInitialiseTaskLists+0x74>)
 80068ae:	f7fe fbcb 	bl	8005048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068b2:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <prvInitialiseTaskLists+0x78>)
 80068b4:	4a05      	ldr	r2, [pc, #20]	@ (80068cc <prvInitialiseTaskLists+0x64>)
 80068b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068b8:	4b0a      	ldr	r3, [pc, #40]	@ (80068e4 <prvInitialiseTaskLists+0x7c>)
 80068ba:	4a05      	ldr	r2, [pc, #20]	@ (80068d0 <prvInitialiseTaskLists+0x68>)
 80068bc:	601a      	str	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000978 	.word	0x20000978
 80068cc:	20000dd8 	.word	0x20000dd8
 80068d0:	20000dec 	.word	0x20000dec
 80068d4:	20000e08 	.word	0x20000e08
 80068d8:	20000e1c 	.word	0x20000e1c
 80068dc:	20000e34 	.word	0x20000e34
 80068e0:	20000e00 	.word	0x20000e00
 80068e4:	20000e04 	.word	0x20000e04

080068e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ee:	e019      	b.n	8006924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068f0:	f000 fea4 	bl	800763c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <prvCheckTasksWaitingTermination+0x50>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fc2b 	bl	800515c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <prvCheckTasksWaitingTermination+0x54>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a0b      	ldr	r2, [pc, #44]	@ (800693c <prvCheckTasksWaitingTermination+0x54>)
 800690e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006910:	4b0b      	ldr	r3, [pc, #44]	@ (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3b01      	subs	r3, #1
 8006916:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800691a:	f000 fec5 	bl	80076a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f810 	bl	8006944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006924:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e1      	bne.n	80068f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000e1c 	.word	0x20000e1c
 800693c:	20000e48 	.word	0x20000e48
 8006940:	20000e30 	.word	0x20000e30

08006944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3354      	adds	r3, #84	@ 0x54
 8006950:	4618      	mov	r0, r3
 8006952:	f001 f993 	bl	8007c7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800695c:	2b00      	cmp	r3, #0
 800695e:	d108      	bne.n	8006972 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006964:	4618      	mov	r0, r3
 8006966:	f001 f865 	bl	8007a34 <vPortFree>
				vPortFree( pxTCB );
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 f862 	bl	8007a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006970:	e01b      	b.n	80069aa <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006978:	2b01      	cmp	r3, #1
 800697a:	d103      	bne.n	8006984 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f859 	bl	8007a34 <vPortFree>
	}
 8006982:	e012      	b.n	80069aa <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800698a:	2b02      	cmp	r3, #2
 800698c:	d00d      	beq.n	80069aa <prvDeleteTCB+0x66>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	b672      	cpsid	i
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	b662      	cpsie	i
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <prvDeleteTCB+0x62>
	}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ba:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069c4:	4b0a      	ldr	r3, [pc, #40]	@ (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069cc:	e008      	b.n	80069e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ce:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a04      	ldr	r2, [pc, #16]	@ (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069de:	6013      	str	r3, [r2, #0]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000e00 	.word	0x20000e00
 80069f0:	20000e68 	.word	0x20000e68

080069f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <xTaskGetSchedulerState+0x34>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a02:	2301      	movs	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	e008      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a08:	4b08      	ldr	r3, [pc, #32]	@ (8006a2c <xTaskGetSchedulerState+0x38>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a10:	2302      	movs	r3, #2
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e001      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a1a:	687b      	ldr	r3, [r7, #4]
	}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	20000e54 	.word	0x20000e54
 8006a2c:	20000e70 	.word	0x20000e70

08006a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d05c      	beq.n	8006b00 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a46:	4b31      	ldr	r3, [pc, #196]	@ (8006b0c <xTaskPriorityDisinherit+0xdc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d00d      	beq.n	8006a6c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	b672      	cpsid	i
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	b662      	cpsie	i
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10d      	bne.n	8006a90 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	b672      	cpsid	i
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	b662      	cpsie	i
 8006a88:	60bb      	str	r3, [r7, #8]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a94:	1e5a      	subs	r2, r3, #1
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d02c      	beq.n	8006b00 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d128      	bne.n	8006b00 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fb52 	bl	800515c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <xTaskPriorityDisinherit+0xe0>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d903      	bls.n	8006ae0 <xTaskPriorityDisinherit+0xb0>
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	4a0c      	ldr	r2, [pc, #48]	@ (8006b10 <xTaskPriorityDisinherit+0xe0>)
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4a09      	ldr	r2, [pc, #36]	@ (8006b14 <xTaskPriorityDisinherit+0xe4>)
 8006aee:	441a      	add	r2, r3
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe fad3 	bl	80050a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b00:	697b      	ldr	r3, [r7, #20]
	}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000974 	.word	0x20000974
 8006b10:	20000e50 	.word	0x20000e50
 8006b14:	20000978 	.word	0x20000978

08006b18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b22:	4b21      	ldr	r3, [pc, #132]	@ (8006ba8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b28:	4b20      	ldr	r3, [pc, #128]	@ (8006bac <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fb14 	bl	800515c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d10a      	bne.n	8006b52 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b42:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <prvAddCurrentTaskToDelayedList+0x94>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4819      	ldr	r0, [pc, #100]	@ (8006bb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b4c:	f7fe faa9 	bl	80050a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b50:	e026      	b.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4413      	add	r3, r2
 8006b58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b5a:	4b14      	ldr	r3, [pc, #80]	@ (8006bac <prvAddCurrentTaskToDelayedList+0x94>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d209      	bcs.n	8006b7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b6a:	4b12      	ldr	r3, [pc, #72]	@ (8006bb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bac <prvAddCurrentTaskToDelayedList+0x94>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f7fe fab7 	bl	80050ea <vListInsert>
}
 8006b7c:	e010      	b.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <prvAddCurrentTaskToDelayedList+0x94>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7fe faad 	bl	80050ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b90:	4b0a      	ldr	r3, [pc, #40]	@ (8006bbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d202      	bcs.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b9a:	4a08      	ldr	r2, [pc, #32]	@ (8006bbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6013      	str	r3, [r2, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000e4c 	.word	0x20000e4c
 8006bac:	20000974 	.word	0x20000974
 8006bb0:	20000e34 	.word	0x20000e34
 8006bb4:	20000e04 	.word	0x20000e04
 8006bb8:	20000e00 	.word	0x20000e00
 8006bbc:	20000e68 	.word	0x20000e68

08006bc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08a      	sub	sp, #40	@ 0x28
 8006bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bca:	f000 fbc5 	bl	8007358 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bce:	4b1e      	ldr	r3, [pc, #120]	@ (8006c48 <xTimerCreateTimerTask+0x88>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d021      	beq.n	8006c1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bde:	1d3a      	adds	r2, r7, #4
 8006be0:	f107 0108 	add.w	r1, r7, #8
 8006be4:	f107 030c 	add.w	r3, r7, #12
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fa13 	bl	8005014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	9202      	str	r2, [sp, #8]
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	2306      	movs	r3, #6
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	460a      	mov	r2, r1
 8006c00:	4912      	ldr	r1, [pc, #72]	@ (8006c4c <xTimerCreateTimerTask+0x8c>)
 8006c02:	4813      	ldr	r0, [pc, #76]	@ (8006c50 <xTimerCreateTimerTask+0x90>)
 8006c04:	f7ff f87e 	bl	8005d04 <xTaskCreateStatic>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4a12      	ldr	r2, [pc, #72]	@ (8006c54 <xTimerCreateTimerTask+0x94>)
 8006c0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c0e:	4b11      	ldr	r3, [pc, #68]	@ (8006c54 <xTimerCreateTimerTask+0x94>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c16:	2301      	movs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10d      	bne.n	8006c3c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	613b      	str	r3, [r7, #16]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006c3c:	697b      	ldr	r3, [r7, #20]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000ea4 	.word	0x20000ea4
 8006c4c:	08007ec8 	.word	0x08007ec8
 8006c50:	08006ee1 	.word	0x08006ee1
 8006c54:	20000ea8 	.word	0x20000ea8

08006c58 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006c66:	202c      	movs	r0, #44	@ 0x2c
 8006c68:	f000 fe16 	bl	8007898 <pvPortMalloc>
 8006c6c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f849 	bl	8006d22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006c90:	697b      	ldr	r3, [r7, #20]
	}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b08a      	sub	sp, #40	@ 0x28
 8006c9e:	af02      	add	r7, sp, #8
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006ca8:	232c      	movs	r3, #44	@ 0x2c
 8006caa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b2c      	cmp	r3, #44	@ 0x2c
 8006cb0:	d00d      	beq.n	8006cce <xTimerCreateStatic+0x34>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb6:	b672      	cpsid	i
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	b662      	cpsie	i
 8006cc6:	61bb      	str	r3, [r7, #24]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10d      	bne.n	8006cf2 <xTimerCreateStatic+0x58>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	b672      	cpsid	i
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	b662      	cpsie	i
 8006cea:	617b      	str	r3, [r7, #20]
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	e7fd      	b.n	8006cee <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f805 	bl	8006d22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006d18:	69fb      	ldr	r3, [r7, #28]
	}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10d      	bne.n	8006d52 <prvInitialiseNewTimer+0x30>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	b672      	cpsid	i
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	b662      	cpsie	i
 8006d4a:	617b      	str	r3, [r7, #20]
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	e7fd      	b.n	8006d4e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01e      	beq.n	8006d96 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006d58:	f000 fafe 	bl	8007358 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	3304      	adds	r3, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe f985 	bl	8005088 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d8a:	f043 0304 	orr.w	r3, r3, #4
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006d96:	bf00      	nop
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	@ 0x28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10d      	bne.n	8006dd4 <xTimerGenericCommand+0x34>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	b672      	cpsid	i
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	b662      	cpsie	i
 8006dcc:	623b      	str	r3, [r7, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dd4:	4b19      	ldr	r3, [pc, #100]	@ (8006e3c <xTimerGenericCommand+0x9c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d02a      	beq.n	8006e32 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	dc18      	bgt.n	8006e20 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dee:	f7ff fe01 	bl	80069f4 <xTaskGetSchedulerState>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d109      	bne.n	8006e0c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006df8:	4b10      	ldr	r3, [pc, #64]	@ (8006e3c <xTimerGenericCommand+0x9c>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	f107 0110 	add.w	r1, r7, #16
 8006e00:	2300      	movs	r3, #0
 8006e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e04:	f7fe fb7a 	bl	80054fc <xQueueGenericSend>
 8006e08:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e0a:	e012      	b.n	8006e32 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e3c <xTimerGenericCommand+0x9c>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	f107 0110 	add.w	r1, r7, #16
 8006e14:	2300      	movs	r3, #0
 8006e16:	2200      	movs	r2, #0
 8006e18:	f7fe fb70 	bl	80054fc <xQueueGenericSend>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e1e:	e008      	b.n	8006e32 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e20:	4b06      	ldr	r3, [pc, #24]	@ (8006e3c <xTimerGenericCommand+0x9c>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	f107 0110 	add.w	r1, r7, #16
 8006e28:	2300      	movs	r3, #0
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	f7fe fc70 	bl	8005710 <xQueueGenericSendFromISR>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3728      	adds	r7, #40	@ 0x28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000ea4 	.word	0x20000ea4

08006e40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e4a:	4b24      	ldr	r3, [pc, #144]	@ (8006edc <prvProcessExpiredTimer+0x9c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe f97f 	bl	800515c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d025      	beq.n	8006eb8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	699a      	ldr	r2, [r3, #24]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	18d1      	adds	r1, r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	6978      	ldr	r0, [r7, #20]
 8006e7a:	f000 f8d7 	bl	800702c <prvInsertTimerInActiveList>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d022      	beq.n	8006eca <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e84:	2300      	movs	r3, #0
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	f7ff ff86 	bl	8006da0 <xTimerGenericCommand>
 8006e94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d116      	bne.n	8006eca <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	b672      	cpsid	i
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	b662      	cpsie	i
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	6978      	ldr	r0, [r7, #20]
 8006ed0:	4798      	blx	r3
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000e9c 	.word	0x20000e9c

08006ee0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ee8:	f107 0308 	add.w	r3, r7, #8
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 f859 	bl	8006fa4 <prvGetNextExpireTime>
 8006ef2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f805 	bl	8006f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006efe:	f000 f8d7 	bl	80070b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f02:	bf00      	nop
 8006f04:	e7f0      	b.n	8006ee8 <prvTimerTask+0x8>
	...

08006f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f12:	f7ff f969 	bl	80061e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f16:	f107 0308 	add.w	r3, r7, #8
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f866 	bl	8006fec <prvSampleTimeNow>
 8006f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d130      	bne.n	8006f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <prvProcessTimerOrBlockTask+0x3c>
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d806      	bhi.n	8006f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f36:	f7ff f965 	bl	8006204 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff ff7f 	bl	8006e40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f42:	e024      	b.n	8006f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f4a:	4b13      	ldr	r3, [pc, #76]	@ (8006f98 <prvProcessTimerOrBlockTask+0x90>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <prvProcessTimerOrBlockTask+0x50>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <prvProcessTimerOrBlockTask+0x52>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <prvProcessTimerOrBlockTask+0x94>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	f7fe fe97 	bl	8005c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f6e:	f7ff f949 	bl	8006204 <xTaskResumeAll>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f78:	4b09      	ldr	r3, [pc, #36]	@ (8006fa0 <prvProcessTimerOrBlockTask+0x98>)
 8006f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	f3bf 8f6f 	isb	sy
}
 8006f88:	e001      	b.n	8006f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f8a:	f7ff f93b 	bl	8006204 <xTaskResumeAll>
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000ea0 	.word	0x20000ea0
 8006f9c:	20000ea4 	.word	0x20000ea4
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fac:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe8 <prvGetNextExpireTime+0x44>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <prvGetNextExpireTime+0x16>
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	e000      	b.n	8006fbc <prvGetNextExpireTime+0x18>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fc8:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <prvGetNextExpireTime+0x44>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e001      	b.n	8006fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000e9c 	.word	0x20000e9c

08006fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ff4:	f7ff f9a6 	bl	8006344 <xTaskGetTickCount>
 8006ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8007028 <prvSampleTimeNow+0x3c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	429a      	cmp	r2, r3
 8007002:	d205      	bcs.n	8007010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007004:	f000 f940 	bl	8007288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e002      	b.n	8007016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007016:	4a04      	ldr	r2, [pc, #16]	@ (8007028 <prvSampleTimeNow+0x3c>)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800701c:	68fb      	ldr	r3, [r7, #12]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000eac 	.word	0x20000eac

0800702c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d812      	bhi.n	8007078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	1ad2      	subs	r2, r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	429a      	cmp	r2, r3
 800705e:	d302      	bcc.n	8007066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	e01b      	b.n	800709e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007066:	4b10      	ldr	r3, [pc, #64]	@ (80070a8 <prvInsertTimerInActiveList+0x7c>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7fe f83a 	bl	80050ea <vListInsert>
 8007076:	e012      	b.n	800709e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d206      	bcs.n	800708e <prvInsertTimerInActiveList+0x62>
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d302      	bcc.n	800708e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e007      	b.n	800709e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800708e:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <prvInsertTimerInActiveList+0x80>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fe f826 	bl	80050ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800709e:	697b      	ldr	r3, [r7, #20]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000ea0 	.word	0x20000ea0
 80070ac:	20000e9c 	.word	0x20000e9c

080070b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08e      	sub	sp, #56	@ 0x38
 80070b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070b6:	e0d4      	b.n	8007262 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da1b      	bge.n	80070f6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070be:	1d3b      	adds	r3, r7, #4
 80070c0:	3304      	adds	r3, #4
 80070c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10d      	bne.n	80070e6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	b672      	cpsid	i
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	b662      	cpsie	i
 80070de:	61fb      	str	r3, [r7, #28]
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	e7fd      	b.n	80070e2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ec:	6850      	ldr	r0, [r2, #4]
 80070ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f0:	6892      	ldr	r2, [r2, #8]
 80070f2:	4611      	mov	r1, r2
 80070f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f2c0 80b2 	blt.w	8007262 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe f824 	bl	800515c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007114:	463b      	mov	r3, r7
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff ff68 	bl	8006fec <prvSampleTimeNow>
 800711c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b09      	cmp	r3, #9
 8007122:	f200 809b 	bhi.w	800725c <prvProcessReceivedCommands+0x1ac>
 8007126:	a201      	add	r2, pc, #4	@ (adr r2, 800712c <prvProcessReceivedCommands+0x7c>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007155 	.word	0x08007155
 8007130:	08007155 	.word	0x08007155
 8007134:	08007155 	.word	0x08007155
 8007138:	080071cf 	.word	0x080071cf
 800713c:	080071e3 	.word	0x080071e3
 8007140:	08007233 	.word	0x08007233
 8007144:	08007155 	.word	0x08007155
 8007148:	08007155 	.word	0x08007155
 800714c:	080071cf 	.word	0x080071cf
 8007150:	080071e3 	.word	0x080071e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007156:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	18d1      	adds	r1, r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007174:	f7ff ff5a 	bl	800702c <prvInsertTimerInActiveList>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d070      	beq.n	8007260 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800717e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007184:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d065      	beq.n	8007260 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	441a      	add	r2, r3
 800719c:	2300      	movs	r3, #0
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	2300      	movs	r3, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a6:	f7ff fdfb 	bl	8006da0 <xTimerGenericCommand>
 80071aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d156      	bne.n	8007260 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	61bb      	str	r3, [r7, #24]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071e0:	e03f      	b.n	8007262 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	b672      	cpsid	i
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	b662      	cpsie	i
 8007216:	617b      	str	r3, [r7, #20]
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	e7fd      	b.n	800721a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	18d1      	adds	r1, r2, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800722c:	f7ff fefe 	bl	800702c <prvInsertTimerInActiveList>
					break;
 8007230:	e017      	b.n	8007262 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007242:	f000 fbf7 	bl	8007a34 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007246:	e00c      	b.n	8007262 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	b2da      	uxtb	r2, r3
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800725a:	e002      	b.n	8007262 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800725c:	bf00      	nop
 800725e:	e000      	b.n	8007262 <prvProcessReceivedCommands+0x1b2>
					break;
 8007260:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007262:	4b08      	ldr	r3, [pc, #32]	@ (8007284 <prvProcessReceivedCommands+0x1d4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	1d39      	adds	r1, r7, #4
 8007268:	2200      	movs	r2, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe faf4 	bl	8005858 <xQueueReceive>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	f47f af20 	bne.w	80070b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	3730      	adds	r7, #48	@ 0x30
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000ea4 	.word	0x20000ea4

08007288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800728e:	e04b      	b.n	8007328 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007290:	4b2f      	ldr	r3, [pc, #188]	@ (8007350 <prvSwitchTimerLists+0xc8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729a:	4b2d      	ldr	r3, [pc, #180]	@ (8007350 <prvSwitchTimerLists+0xc8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fd ff57 	bl	800515c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d031      	beq.n	8007328 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4413      	add	r3, r2
 80072cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d90e      	bls.n	80072f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007350 <prvSwitchTimerLists+0xc8>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f7fd fefc 	bl	80050ea <vListInsert>
 80072f2:	e019      	b.n	8007328 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072f4:	2300      	movs	r3, #0
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2300      	movs	r3, #0
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	2100      	movs	r1, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fd4e 	bl	8006da0 <xTimerGenericCommand>
 8007304:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10d      	bne.n	8007328 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	b672      	cpsid	i
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	b662      	cpsie	i
 8007320:	603b      	str	r3, [r7, #0]
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007328:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <prvSwitchTimerLists+0xc8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1ae      	bne.n	8007290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007332:	4b07      	ldr	r3, [pc, #28]	@ (8007350 <prvSwitchTimerLists+0xc8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007338:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <prvSwitchTimerLists+0xcc>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a04      	ldr	r2, [pc, #16]	@ (8007350 <prvSwitchTimerLists+0xc8>)
 800733e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007340:	4a04      	ldr	r2, [pc, #16]	@ (8007354 <prvSwitchTimerLists+0xcc>)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6013      	str	r3, [r2, #0]
}
 8007346:	bf00      	nop
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000e9c 	.word	0x20000e9c
 8007354:	20000ea0 	.word	0x20000ea0

08007358 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800735e:	f000 f96d 	bl	800763c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007362:	4b15      	ldr	r3, [pc, #84]	@ (80073b8 <prvCheckForValidListAndQueue+0x60>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d120      	bne.n	80073ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800736a:	4814      	ldr	r0, [pc, #80]	@ (80073bc <prvCheckForValidListAndQueue+0x64>)
 800736c:	f7fd fe6c 	bl	8005048 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007370:	4813      	ldr	r0, [pc, #76]	@ (80073c0 <prvCheckForValidListAndQueue+0x68>)
 8007372:	f7fd fe69 	bl	8005048 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007376:	4b13      	ldr	r3, [pc, #76]	@ (80073c4 <prvCheckForValidListAndQueue+0x6c>)
 8007378:	4a10      	ldr	r2, [pc, #64]	@ (80073bc <prvCheckForValidListAndQueue+0x64>)
 800737a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800737c:	4b12      	ldr	r3, [pc, #72]	@ (80073c8 <prvCheckForValidListAndQueue+0x70>)
 800737e:	4a10      	ldr	r2, [pc, #64]	@ (80073c0 <prvCheckForValidListAndQueue+0x68>)
 8007380:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007382:	2300      	movs	r3, #0
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4b11      	ldr	r3, [pc, #68]	@ (80073cc <prvCheckForValidListAndQueue+0x74>)
 8007388:	4a11      	ldr	r2, [pc, #68]	@ (80073d0 <prvCheckForValidListAndQueue+0x78>)
 800738a:	2110      	movs	r1, #16
 800738c:	200a      	movs	r0, #10
 800738e:	f7fd ff7b 	bl	8005288 <xQueueGenericCreateStatic>
 8007392:	4603      	mov	r3, r0
 8007394:	4a08      	ldr	r2, [pc, #32]	@ (80073b8 <prvCheckForValidListAndQueue+0x60>)
 8007396:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007398:	4b07      	ldr	r3, [pc, #28]	@ (80073b8 <prvCheckForValidListAndQueue+0x60>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <prvCheckForValidListAndQueue+0x60>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	490b      	ldr	r1, [pc, #44]	@ (80073d4 <prvCheckForValidListAndQueue+0x7c>)
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fc4e 	bl	8005c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ac:	f000 f97c 	bl	80076a8 <vPortExitCritical>
}
 80073b0:	bf00      	nop
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000ea4 	.word	0x20000ea4
 80073bc:	20000e74 	.word	0x20000e74
 80073c0:	20000e88 	.word	0x20000e88
 80073c4:	20000e9c 	.word	0x20000e9c
 80073c8:	20000ea0 	.word	0x20000ea0
 80073cc:	20000f50 	.word	0x20000f50
 80073d0:	20000eb0 	.word	0x20000eb0
 80073d4:	08007ed0 	.word	0x08007ed0

080073d8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10d      	bne.n	8007406 <pvTimerGetTimerID+0x2e>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ee:	b672      	cpsid	i
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	b662      	cpsie	i
 80073fe:	60fb      	str	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	e7fd      	b.n	8007402 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8007406:	f000 f919 	bl	800763c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007410:	f000 f94a 	bl	80076a8 <vPortExitCritical>

	return pvReturn;
 8007414:	693b      	ldr	r3, [r7, #16]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3b04      	subs	r3, #4
 8007430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3b04      	subs	r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f023 0201 	bic.w	r2, r3, #1
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3b04      	subs	r3, #4
 800744e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007450:	4a0c      	ldr	r2, [pc, #48]	@ (8007484 <pxPortInitialiseStack+0x64>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3b14      	subs	r3, #20
 800745a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3b04      	subs	r3, #4
 8007466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f06f 0202 	mvn.w	r2, #2
 800746e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3b20      	subs	r3, #32
 8007474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	08007489 	.word	0x08007489

08007488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007492:	4b15      	ldr	r3, [pc, #84]	@ (80074e8 <prvTaskExitError+0x60>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749a:	d00d      	beq.n	80074b8 <prvTaskExitError+0x30>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a0:	b672      	cpsid	i
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	b662      	cpsie	i
 80074b0:	60fb      	str	r3, [r7, #12]
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <prvTaskExitError+0x2c>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	b672      	cpsid	i
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	b662      	cpsie	i
 80074cc:	60bb      	str	r3, [r7, #8]
}
 80074ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074d0:	bf00      	nop
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0fc      	beq.n	80074d2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	2000000c 	.word	0x2000000c
 80074ec:	00000000 	.word	0x00000000

080074f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074f0:	4b07      	ldr	r3, [pc, #28]	@ (8007510 <pxCurrentTCBConst2>)
 80074f2:	6819      	ldr	r1, [r3, #0]
 80074f4:	6808      	ldr	r0, [r1, #0]
 80074f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fa:	f380 8809 	msr	PSP, r0
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8811 	msr	BASEPRI, r0
 800750a:	4770      	bx	lr
 800750c:	f3af 8000 	nop.w

08007510 <pxCurrentTCBConst2>:
 8007510:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop

08007518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007518:	4808      	ldr	r0, [pc, #32]	@ (800753c <prvPortStartFirstTask+0x24>)
 800751a:	6800      	ldr	r0, [r0, #0]
 800751c:	6800      	ldr	r0, [r0, #0]
 800751e:	f380 8808 	msr	MSP, r0
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	f380 8814 	msr	CONTROL, r0
 800752a:	b662      	cpsie	i
 800752c:	b661      	cpsie	f
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	df00      	svc	0
 8007538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800753a:	bf00      	nop
 800753c:	e000ed08 	.word	0xe000ed08

08007540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007546:	4b37      	ldr	r3, [pc, #220]	@ (8007624 <xPortStartScheduler+0xe4>)
 8007548:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	22ff      	movs	r2, #255	@ 0xff
 8007556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007568:	b2da      	uxtb	r2, r3
 800756a:	4b2f      	ldr	r3, [pc, #188]	@ (8007628 <xPortStartScheduler+0xe8>)
 800756c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800756e:	4b2f      	ldr	r3, [pc, #188]	@ (800762c <xPortStartScheduler+0xec>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007574:	e009      	b.n	800758a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007576:	4b2d      	ldr	r3, [pc, #180]	@ (800762c <xPortStartScheduler+0xec>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	4a2b      	ldr	r2, [pc, #172]	@ (800762c <xPortStartScheduler+0xec>)
 800757e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	b2db      	uxtb	r3, r3
 8007588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007592:	2b80      	cmp	r3, #128	@ 0x80
 8007594:	d0ef      	beq.n	8007576 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007596:	4b25      	ldr	r3, [pc, #148]	@ (800762c <xPortStartScheduler+0xec>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1c3 0307 	rsb	r3, r3, #7
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00d      	beq.n	80075be <xPortStartScheduler+0x7e>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	b672      	cpsid	i
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	b662      	cpsie	i
 80075b6:	60bb      	str	r3, [r7, #8]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075be:	4b1b      	ldr	r3, [pc, #108]	@ (800762c <xPortStartScheduler+0xec>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	4a19      	ldr	r2, [pc, #100]	@ (800762c <xPortStartScheduler+0xec>)
 80075c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c8:	4b18      	ldr	r3, [pc, #96]	@ (800762c <xPortStartScheduler+0xec>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075d0:	4a16      	ldr	r2, [pc, #88]	@ (800762c <xPortStartScheduler+0xec>)
 80075d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075dc:	4b14      	ldr	r3, [pc, #80]	@ (8007630 <xPortStartScheduler+0xf0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a13      	ldr	r2, [pc, #76]	@ (8007630 <xPortStartScheduler+0xf0>)
 80075e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e8:	4b11      	ldr	r3, [pc, #68]	@ (8007630 <xPortStartScheduler+0xf0>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a10      	ldr	r2, [pc, #64]	@ (8007630 <xPortStartScheduler+0xf0>)
 80075ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075f4:	f000 f8dc 	bl	80077b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007634 <xPortStartScheduler+0xf4>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075fe:	f000 f8fb 	bl	80077f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007602:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <xPortStartScheduler+0xf8>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a0c      	ldr	r2, [pc, #48]	@ (8007638 <xPortStartScheduler+0xf8>)
 8007608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800760c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800760e:	f7ff ff83 	bl	8007518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007612:	f7fe ff63 	bl	80064dc <vTaskSwitchContext>
	prvTaskExitError();
 8007616:	f7ff ff37 	bl	8007488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000e400 	.word	0xe000e400
 8007628:	20000fa0 	.word	0x20000fa0
 800762c:	20000fa4 	.word	0x20000fa4
 8007630:	e000ed20 	.word	0xe000ed20
 8007634:	2000000c 	.word	0x2000000c
 8007638:	e000ef34 	.word	0xe000ef34

0800763c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	b672      	cpsid	i
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	b662      	cpsie	i
 8007656:	607b      	str	r3, [r7, #4]
}
 8007658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800765a:	4b11      	ldr	r3, [pc, #68]	@ (80076a0 <vPortEnterCritical+0x64>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	4a0f      	ldr	r2, [pc, #60]	@ (80076a0 <vPortEnterCritical+0x64>)
 8007662:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007664:	4b0e      	ldr	r3, [pc, #56]	@ (80076a0 <vPortEnterCritical+0x64>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d112      	bne.n	8007692 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800766c:	4b0d      	ldr	r3, [pc, #52]	@ (80076a4 <vPortEnterCritical+0x68>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00d      	beq.n	8007692 <vPortEnterCritical+0x56>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	b672      	cpsid	i
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	b662      	cpsie	i
 800768a:	603b      	str	r3, [r7, #0]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <vPortEnterCritical+0x52>
	}
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	2000000c 	.word	0x2000000c
 80076a4:	e000ed04 	.word	0xe000ed04

080076a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ae:	4b13      	ldr	r3, [pc, #76]	@ (80076fc <vPortExitCritical+0x54>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10d      	bne.n	80076d2 <vPortExitCritical+0x2a>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	b672      	cpsid	i
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	b662      	cpsie	i
 80076ca:	607b      	str	r3, [r7, #4]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <vPortExitCritical+0x54>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4a08      	ldr	r2, [pc, #32]	@ (80076fc <vPortExitCritical+0x54>)
 80076da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <vPortExitCritical+0x54>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <vPortExitCritical+0x48>
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000000c 	.word	0x2000000c

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007724:	b672      	cpsid	i
 8007726:	f380 8811 	msr	BASEPRI, r0
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	b662      	cpsie	i
 8007734:	f7fe fed2 	bl	80064dc <vTaskSwitchContext>
 8007738:	f04f 0000 	mov.w	r0, #0
 800773c:	f380 8811 	msr	BASEPRI, r0
 8007740:	bc09      	pop	{r0, r3}
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	f01e 0f10 	tst.w	lr, #16
 800774e:	bf08      	it	eq
 8007750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007754:	f380 8809 	msr	PSP, r0
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop

08007760 <pxCurrentTCBConst>:
 8007760:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	b672      	cpsid	i
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	b662      	cpsie	i
 8007782:	607b      	str	r3, [r7, #4]
}
 8007784:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007786:	f7fe fded 	bl	8006364 <xTaskIncrementTick>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007790:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <SysTick_Handler+0x44>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	2300      	movs	r3, #0
 800779a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	f383 8811 	msr	BASEPRI, r3
}
 80077a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b4:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <vPortSetupTimerInterrupt+0x34>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077ba:	4b0b      	ldr	r3, [pc, #44]	@ (80077e8 <vPortSetupTimerInterrupt+0x38>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077c0:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <vPortSetupTimerInterrupt+0x3c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0a      	ldr	r2, [pc, #40]	@ (80077f0 <vPortSetupTimerInterrupt+0x40>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	099b      	lsrs	r3, r3, #6
 80077cc:	4a09      	ldr	r2, [pc, #36]	@ (80077f4 <vPortSetupTimerInterrupt+0x44>)
 80077ce:	3b01      	subs	r3, #1
 80077d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077d2:	4b04      	ldr	r3, [pc, #16]	@ (80077e4 <vPortSetupTimerInterrupt+0x34>)
 80077d4:	2207      	movs	r2, #7
 80077d6:	601a      	str	r2, [r3, #0]
}
 80077d8:	bf00      	nop
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	e000e010 	.word	0xe000e010
 80077e8:	e000e018 	.word	0xe000e018
 80077ec:	20000000 	.word	0x20000000
 80077f0:	10624dd3 	.word	0x10624dd3
 80077f4:	e000e014 	.word	0xe000e014

080077f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007808 <vPortEnableVFP+0x10>
 80077fc:	6801      	ldr	r1, [r0, #0]
 80077fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007802:	6001      	str	r1, [r0, #0]
 8007804:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007806:	bf00      	nop
 8007808:	e000ed88 	.word	0xe000ed88

0800780c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007812:	f3ef 8305 	mrs	r3, IPSR
 8007816:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b0f      	cmp	r3, #15
 800781c:	d917      	bls.n	800784e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781e:	4a1a      	ldr	r2, [pc, #104]	@ (8007888 <vPortValidateInterruptPriority+0x7c>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007828:	4b18      	ldr	r3, [pc, #96]	@ (800788c <vPortValidateInterruptPriority+0x80>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	7afa      	ldrb	r2, [r7, #11]
 800782e:	429a      	cmp	r2, r3
 8007830:	d20d      	bcs.n	800784e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	b672      	cpsid	i
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	b662      	cpsie	i
 8007846:	607b      	str	r3, [r7, #4]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800784e:	4b10      	ldr	r3, [pc, #64]	@ (8007890 <vPortValidateInterruptPriority+0x84>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007856:	4b0f      	ldr	r3, [pc, #60]	@ (8007894 <vPortValidateInterruptPriority+0x88>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d90d      	bls.n	800787a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	b672      	cpsid	i
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	b662      	cpsie	i
 8007872:	603b      	str	r3, [r7, #0]
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	e7fd      	b.n	8007876 <vPortValidateInterruptPriority+0x6a>
	}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	e000e3f0 	.word	0xe000e3f0
 800788c:	20000fa0 	.word	0x20000fa0
 8007890:	e000ed0c 	.word	0xe000ed0c
 8007894:	20000fa4 	.word	0x20000fa4

08007898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	@ 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078a4:	f7fe fca0 	bl	80061e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078a8:	4b5d      	ldr	r3, [pc, #372]	@ (8007a20 <pvPortMalloc+0x188>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078b0:	f000 f920 	bl	8007af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a24 <pvPortMalloc+0x18c>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 8094 	bne.w	80079ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d020      	beq.n	800790a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80078c8:	2208      	movs	r2, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f023 0307 	bic.w	r3, r3, #7
 80078e0:	3308      	adds	r3, #8
 80078e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <pvPortMalloc+0x72>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	b672      	cpsid	i
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	b662      	cpsie	i
 8007902:	617b      	str	r3, [r7, #20]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d06c      	beq.n	80079ea <pvPortMalloc+0x152>
 8007910:	4b45      	ldr	r3, [pc, #276]	@ (8007a28 <pvPortMalloc+0x190>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d867      	bhi.n	80079ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800791a:	4b44      	ldr	r3, [pc, #272]	@ (8007a2c <pvPortMalloc+0x194>)
 800791c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800791e:	4b43      	ldr	r3, [pc, #268]	@ (8007a2c <pvPortMalloc+0x194>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007924:	e004      	b.n	8007930 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d903      	bls.n	8007942 <pvPortMalloc+0xaa>
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f1      	bne.n	8007926 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007942:	4b37      	ldr	r3, [pc, #220]	@ (8007a20 <pvPortMalloc+0x188>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007948:	429a      	cmp	r2, r3
 800794a:	d04e      	beq.n	80079ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2208      	movs	r2, #8
 8007952:	4413      	add	r3, r2
 8007954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	1ad2      	subs	r2, r2, r3
 8007966:	2308      	movs	r3, #8
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	429a      	cmp	r2, r3
 800796c:	d922      	bls.n	80079b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800796e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4413      	add	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <pvPortMalloc+0x104>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	b672      	cpsid	i
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	b662      	cpsie	i
 8007994:	613b      	str	r3, [r7, #16]
}
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	e7fd      	b.n	8007998 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	1ad2      	subs	r2, r2, r3
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079ae:	69b8      	ldr	r0, [r7, #24]
 80079b0:	f000 f902 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a28 <pvPortMalloc+0x190>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	4a1a      	ldr	r2, [pc, #104]	@ (8007a28 <pvPortMalloc+0x190>)
 80079c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079c2:	4b19      	ldr	r3, [pc, #100]	@ (8007a28 <pvPortMalloc+0x190>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a30 <pvPortMalloc+0x198>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d203      	bcs.n	80079d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079ce:	4b16      	ldr	r3, [pc, #88]	@ (8007a28 <pvPortMalloc+0x190>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a17      	ldr	r2, [pc, #92]	@ (8007a30 <pvPortMalloc+0x198>)
 80079d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	4b12      	ldr	r3, [pc, #72]	@ (8007a24 <pvPortMalloc+0x18c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	431a      	orrs	r2, r3
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079ea:	f7fe fc0b 	bl	8006204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00d      	beq.n	8007a14 <pvPortMalloc+0x17c>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	b672      	cpsid	i
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	b662      	cpsie	i
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <pvPortMalloc+0x178>
	return pvReturn;
 8007a14:	69fb      	ldr	r3, [r7, #28]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3728      	adds	r7, #40	@ 0x28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20004bb0 	.word	0x20004bb0
 8007a24:	20004bbc 	.word	0x20004bbc
 8007a28:	20004bb4 	.word	0x20004bb4
 8007a2c:	20004ba8 	.word	0x20004ba8
 8007a30:	20004bb8 	.word	0x20004bb8

08007a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d04e      	beq.n	8007ae4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a46:	2308      	movs	r3, #8
 8007a48:	425b      	negs	r3, r3
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	4b24      	ldr	r3, [pc, #144]	@ (8007aec <vPortFree+0xb8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10d      	bne.n	8007a7e <vPortFree+0x4a>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	60fb      	str	r3, [r7, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <vPortFree+0x6e>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	b672      	cpsid	i
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	b662      	cpsie	i
 8007a9a:	60bb      	str	r3, [r7, #8]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4b11      	ldr	r3, [pc, #68]	@ (8007aec <vPortFree+0xb8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d019      	beq.n	8007ae4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d115      	bne.n	8007ae4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b0b      	ldr	r3, [pc, #44]	@ (8007aec <vPortFree+0xb8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ac8:	f7fe fb8e 	bl	80061e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	4b07      	ldr	r3, [pc, #28]	@ (8007af0 <vPortFree+0xbc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4a06      	ldr	r2, [pc, #24]	@ (8007af0 <vPortFree+0xbc>)
 8007ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ada:	6938      	ldr	r0, [r7, #16]
 8007adc:	f000 f86c 	bl	8007bb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ae0:	f7fe fb90 	bl	8006204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20004bbc 	.word	0x20004bbc
 8007af0:	20004bb4 	.word	0x20004bb4

08007af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007afa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b00:	4b27      	ldr	r3, [pc, #156]	@ (8007ba0 <prvHeapInit+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba0 <prvHeapInit+0xac>)
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba4 <prvHeapInit+0xb0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba4 <prvHeapInit+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b56:	4b14      	ldr	r3, [pc, #80]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	4b12      	ldr	r3, [pc, #72]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	@ (8007bac <prvHeapInit+0xb8>)
 8007b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a09      	ldr	r2, [pc, #36]	@ (8007bb0 <prvHeapInit+0xbc>)
 8007b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b8c:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <prvHeapInit+0xc0>)
 8007b8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20000fa8 	.word	0x20000fa8
 8007ba4:	20004ba8 	.word	0x20004ba8
 8007ba8:	20004bb0 	.word	0x20004bb0
 8007bac:	20004bb8 	.word	0x20004bb8
 8007bb0:	20004bb4 	.word	0x20004bb4
 8007bb4:	20004bbc 	.word	0x20004bbc

08007bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc0:	4b28      	ldr	r3, [pc, #160]	@ (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e002      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x14>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d8f7      	bhi.n	8007bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d118      	bne.n	8007c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b15      	ldr	r3, [pc, #84]	@ (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00d      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e008      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	@ (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d002      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20004ba8 	.word	0x20004ba8
 8007c68:	20004bb0 	.word	0x20004bb0

08007c6c <memset>:
 8007c6c:	4402      	add	r2, r0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d100      	bne.n	8007c76 <memset+0xa>
 8007c74:	4770      	bx	lr
 8007c76:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7a:	e7f9      	b.n	8007c70 <memset+0x4>

08007c7c <_reclaim_reent>:
 8007c7c:	4b29      	ldr	r3, [pc, #164]	@ (8007d24 <_reclaim_reent+0xa8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4283      	cmp	r3, r0
 8007c82:	b570      	push	{r4, r5, r6, lr}
 8007c84:	4604      	mov	r4, r0
 8007c86:	d04b      	beq.n	8007d20 <_reclaim_reent+0xa4>
 8007c88:	69c3      	ldr	r3, [r0, #28]
 8007c8a:	b1ab      	cbz	r3, 8007cb8 <_reclaim_reent+0x3c>
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	b16b      	cbz	r3, 8007cac <_reclaim_reent+0x30>
 8007c90:	2500      	movs	r5, #0
 8007c92:	69e3      	ldr	r3, [r4, #28]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	5959      	ldr	r1, [r3, r5]
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	d13b      	bne.n	8007d14 <_reclaim_reent+0x98>
 8007c9c:	3504      	adds	r5, #4
 8007c9e:	2d80      	cmp	r5, #128	@ 0x80
 8007ca0:	d1f7      	bne.n	8007c92 <_reclaim_reent+0x16>
 8007ca2:	69e3      	ldr	r3, [r4, #28]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	68d9      	ldr	r1, [r3, #12]
 8007ca8:	f000 f872 	bl	8007d90 <_free_r>
 8007cac:	69e3      	ldr	r3, [r4, #28]
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	b111      	cbz	r1, 8007cb8 <_reclaim_reent+0x3c>
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 f86c 	bl	8007d90 <_free_r>
 8007cb8:	6961      	ldr	r1, [r4, #20]
 8007cba:	b111      	cbz	r1, 8007cc2 <_reclaim_reent+0x46>
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 f867 	bl	8007d90 <_free_r>
 8007cc2:	69e1      	ldr	r1, [r4, #28]
 8007cc4:	b111      	cbz	r1, 8007ccc <_reclaim_reent+0x50>
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 f862 	bl	8007d90 <_free_r>
 8007ccc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007cce:	b111      	cbz	r1, 8007cd6 <_reclaim_reent+0x5a>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 f85d 	bl	8007d90 <_free_r>
 8007cd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cd8:	b111      	cbz	r1, 8007ce0 <_reclaim_reent+0x64>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 f858 	bl	8007d90 <_free_r>
 8007ce0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ce2:	b111      	cbz	r1, 8007cea <_reclaim_reent+0x6e>
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 f853 	bl	8007d90 <_free_r>
 8007cea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007cec:	b111      	cbz	r1, 8007cf4 <_reclaim_reent+0x78>
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 f84e 	bl	8007d90 <_free_r>
 8007cf4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cf6:	b111      	cbz	r1, 8007cfe <_reclaim_reent+0x82>
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 f849 	bl	8007d90 <_free_r>
 8007cfe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007d00:	b111      	cbz	r1, 8007d08 <_reclaim_reent+0x8c>
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 f844 	bl	8007d90 <_free_r>
 8007d08:	6a23      	ldr	r3, [r4, #32]
 8007d0a:	b14b      	cbz	r3, 8007d20 <_reclaim_reent+0xa4>
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d12:	4718      	bx	r3
 8007d14:	680e      	ldr	r6, [r1, #0]
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 f83a 	bl	8007d90 <_free_r>
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	e7bb      	b.n	8007c98 <_reclaim_reent+0x1c>
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
 8007d22:	bf00      	nop
 8007d24:	20000010 	.word	0x20000010

08007d28 <__libc_init_array>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8007d60 <__libc_init_array+0x38>)
 8007d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8007d64 <__libc_init_array+0x3c>)
 8007d2e:	1b64      	subs	r4, r4, r5
 8007d30:	10a4      	asrs	r4, r4, #2
 8007d32:	2600      	movs	r6, #0
 8007d34:	42a6      	cmp	r6, r4
 8007d36:	d109      	bne.n	8007d4c <__libc_init_array+0x24>
 8007d38:	4d0b      	ldr	r5, [pc, #44]	@ (8007d68 <__libc_init_array+0x40>)
 8007d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d6c <__libc_init_array+0x44>)
 8007d3c:	f000 f87e 	bl	8007e3c <_init>
 8007d40:	1b64      	subs	r4, r4, r5
 8007d42:	10a4      	asrs	r4, r4, #2
 8007d44:	2600      	movs	r6, #0
 8007d46:	42a6      	cmp	r6, r4
 8007d48:	d105      	bne.n	8007d56 <__libc_init_array+0x2e>
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d50:	4798      	blx	r3
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7ee      	b.n	8007d34 <__libc_init_array+0xc>
 8007d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5a:	4798      	blx	r3
 8007d5c:	3601      	adds	r6, #1
 8007d5e:	e7f2      	b.n	8007d46 <__libc_init_array+0x1e>
 8007d60:	08007fb4 	.word	0x08007fb4
 8007d64:	08007fb4 	.word	0x08007fb4
 8007d68:	08007fb4 	.word	0x08007fb4
 8007d6c:	08007fb8 	.word	0x08007fb8

08007d70 <__retarget_lock_acquire_recursive>:
 8007d70:	4770      	bx	lr

08007d72 <__retarget_lock_release_recursive>:
 8007d72:	4770      	bx	lr

08007d74 <memcpy>:
 8007d74:	440a      	add	r2, r1
 8007d76:	4291      	cmp	r1, r2
 8007d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d7c:	d100      	bne.n	8007d80 <memcpy+0xc>
 8007d7e:	4770      	bx	lr
 8007d80:	b510      	push	{r4, lr}
 8007d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d8a:	4291      	cmp	r1, r2
 8007d8c:	d1f9      	bne.n	8007d82 <memcpy+0xe>
 8007d8e:	bd10      	pop	{r4, pc}

08007d90 <_free_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4605      	mov	r5, r0
 8007d94:	2900      	cmp	r1, #0
 8007d96:	d041      	beq.n	8007e1c <_free_r+0x8c>
 8007d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9c:	1f0c      	subs	r4, r1, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfb8      	it	lt
 8007da2:	18e4      	addlt	r4, r4, r3
 8007da4:	f000 f83e 	bl	8007e24 <__malloc_lock>
 8007da8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e20 <_free_r+0x90>)
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	b933      	cbnz	r3, 8007dbc <_free_r+0x2c>
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6014      	str	r4, [r2, #0]
 8007db2:	4628      	mov	r0, r5
 8007db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db8:	f000 b83a 	b.w	8007e30 <__malloc_unlock>
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d908      	bls.n	8007dd2 <_free_r+0x42>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf01      	itttt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	1809      	addeq	r1, r1, r0
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	e7ed      	b.n	8007dae <_free_r+0x1e>
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	b10b      	cbz	r3, 8007ddc <_free_r+0x4c>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d9fa      	bls.n	8007dd2 <_free_r+0x42>
 8007ddc:	6811      	ldr	r1, [r2, #0]
 8007dde:	1850      	adds	r0, r2, r1
 8007de0:	42a0      	cmp	r0, r4
 8007de2:	d10b      	bne.n	8007dfc <_free_r+0x6c>
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	4401      	add	r1, r0
 8007de8:	1850      	adds	r0, r2, r1
 8007dea:	4283      	cmp	r3, r0
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	d1e0      	bne.n	8007db2 <_free_r+0x22>
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	6053      	str	r3, [r2, #4]
 8007df6:	4408      	add	r0, r1
 8007df8:	6010      	str	r0, [r2, #0]
 8007dfa:	e7da      	b.n	8007db2 <_free_r+0x22>
 8007dfc:	d902      	bls.n	8007e04 <_free_r+0x74>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	e7d6      	b.n	8007db2 <_free_r+0x22>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	1821      	adds	r1, r4, r0
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	bf04      	itt	eq
 8007e0c:	6819      	ldreq	r1, [r3, #0]
 8007e0e:	685b      	ldreq	r3, [r3, #4]
 8007e10:	6063      	str	r3, [r4, #4]
 8007e12:	bf04      	itt	eq
 8007e14:	1809      	addeq	r1, r1, r0
 8007e16:	6021      	streq	r1, [r4, #0]
 8007e18:	6054      	str	r4, [r2, #4]
 8007e1a:	e7ca      	b.n	8007db2 <_free_r+0x22>
 8007e1c:	bd38      	pop	{r3, r4, r5, pc}
 8007e1e:	bf00      	nop
 8007e20:	20004cfc 	.word	0x20004cfc

08007e24 <__malloc_lock>:
 8007e24:	4801      	ldr	r0, [pc, #4]	@ (8007e2c <__malloc_lock+0x8>)
 8007e26:	f7ff bfa3 	b.w	8007d70 <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	20004cf8 	.word	0x20004cf8

08007e30 <__malloc_unlock>:
 8007e30:	4801      	ldr	r0, [pc, #4]	@ (8007e38 <__malloc_unlock+0x8>)
 8007e32:	f7ff bf9e 	b.w	8007d72 <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	20004cf8 	.word	0x20004cf8

08007e3c <_init>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr

08007e48 <_fini>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	bf00      	nop
 8007e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4e:	bc08      	pop	{r3}
 8007e50:	469e      	mov	lr, r3
 8007e52:	4770      	bx	lr
