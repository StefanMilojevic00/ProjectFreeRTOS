
AirQualityDetectorRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080087b4  080087b4  000097b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a1c  08008a1c  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008a1c  08008a1c  00009a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a24  08008a24  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a24  08008a24  00009a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a28  08008a28  00009a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008a2c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dc8  20000060  08008a8c  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e28  08008a8c  0000ae28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb4a  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b8d  00000000  00000000  00029bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  0002e768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000131b  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6db  00000000  00000000  0003135b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d7e  00000000  00000000  0005ca36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104ec5  00000000  00000000  0007f7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a8  00000000  00000000  001846bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0018ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800879c 	.word	0x0800879c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800879c 	.word	0x0800879c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 8000506:	2340      	movs	r3, #64	@ 0x40
 8000508:	9308      	str	r3, [sp, #32]
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <AirQualityIncicatorInit+0x3c>)
 800050c:	9307      	str	r3, [sp, #28]
 800050e:	2301      	movs	r3, #1
 8000510:	9306      	str	r3, [sp, #24]
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <AirQualityIncicatorInit+0x40>)
 8000514:	9305      	str	r3, [sp, #20]
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	9304      	str	r3, [sp, #16]
 800051a:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <AirQualityIncicatorInit+0x44>)
 800051c:	9303      	str	r3, [sp, #12]
 800051e:	2310      	movs	r3, #16
 8000520:	9302      	str	r3, [sp, #8]
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <AirQualityIncicatorInit+0x48>)
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2340      	movs	r3, #64	@ 0x40
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <AirQualityIncicatorInit+0x44>)
 800052c:	2240      	movs	r2, #64	@ 0x40
 800052e:	4907      	ldr	r1, [pc, #28]	@ (800054c <AirQualityIncicatorInit+0x4c>)
 8000530:	4807      	ldr	r0, [pc, #28]	@ (8000550 <AirQualityIncicatorInit+0x50>)
 8000532:	f000 f877 	bl	8000624 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021c00 	.word	0x40021c00
 8000540:	40022000 	.word	0x40022000
 8000544:	40021800 	.word	0x40021800
 8000548:	40020400 	.word	0x40020400
 800054c:	40020800 	.word	0x40020800
 8000550:	2000007c 	.word	0x2000007c

08000554 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 8000558:	2204      	movs	r2, #4
 800055a:	4903      	ldr	r1, [pc, #12]	@ (8000568 <AlarmInit+0x14>)
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <AlarmInit+0x18>)
 800055e:	f000 f82c 	bl	80005ba <Buzzer_init>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000
 800056c:	200000ac 	.word	0x200000ac

08000570 <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	4613      	mov	r3, r2
 800057c:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2200      	movs	r2, #0
 8000588:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2201      	movs	r2, #1
 8000594:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2201      	movs	r2, #1
 800059a:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	88fa      	ldrh	r2, [r7, #6]
 80005a6:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2200      	movs	r2, #0
 80005ac:	739a      	strb	r2, [r3, #14]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	4613      	mov	r3, r2
 80005c6:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	88fa      	ldrh	r2, [r7, #6]
 80005d2:	809a      	strh	r2, [r3, #4]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	4613      	mov	r3, r2
 80005ec:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	809a      	strh	r2, [r3, #4]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800060c:	2208      	movs	r2, #8
 800060e:	4903      	ldr	r1, [pc, #12]	@ (800061c <LED_init+0x14>)
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <LED_init+0x18>)
 8000612:	f7ff ffe5 	bl	80005e0 <CreateNewSingleLED>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40022000 	.word	0x40022000
 8000620:	200000b4 	.word	0x200000b4

08000624 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4613      	mov	r3, r2
 8000632:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	8b3a      	ldrh	r2, [r7, #24]
 800064a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	69fa      	ldr	r2, [r7, #28]
 8000650:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	8c3a      	ldrh	r2, [r7, #32]
 8000656:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800065c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000662:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000668:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800066e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800067a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800068c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000690:	4902      	ldr	r1, [pc, #8]	@ (800069c <SignalSystemInit+0x14>)
 8000692:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <SignalSystemInit+0x18>)
 8000694:	f7ff ff6c 	bl	8000570 <CreateNewButton>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40022000 	.word	0x40022000
 80006a0:	200000bc 	.word	0x200000bc

080006a4 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 80006ac:	4a36      	ldr	r2, [pc, #216]	@ (8000788 <TerminalHandler+0xe4>)
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	4611      	mov	r1, r2
 80006b6:	8019      	strh	r1, [r3, #0]
 80006b8:	3302      	adds	r3, #2
 80006ba:	0c12      	lsrs	r2, r2, #16
 80006bc:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 80006be:	4a33      	ldr	r2, [pc, #204]	@ (800078c <TerminalHandler+0xe8>)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	6018      	str	r0, [r3, #0]
 80006ca:	3304      	adds	r3, #4
 80006cc:	7019      	strb	r1, [r3, #0]

	if(huart->Instance == USART1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000790 <TerminalHandler+0xec>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d14d      	bne.n	8000774 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 80006d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <TerminalHandler+0xf0>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 80006e0:	f000 f872 	bl	80007c8 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <TerminalHandler+0xf4>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b0d      	cmp	r3, #13
 80006ea:	d02f      	beq.n	800074c <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <TerminalHandler+0xf4>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d117      	bne.n	8000724 <TerminalHandler+0x80>
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <TerminalHandler+0xf0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d013      	beq.n	8000724 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <TerminalHandler+0xf0>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <TerminalHandler+0xf8>)
 8000704:	2100      	movs	r1, #0
 8000706:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <TerminalHandler+0xf0>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <TerminalHandler+0xf0>)
 8000712:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8000714:	f107 010c 	add.w	r1, r7, #12
 8000718:	230a      	movs	r3, #10
 800071a:	2205      	movs	r2, #5
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f003 fc09 	bl	8003f34 <HAL_UART_Transmit>
 8000722:	e00c      	b.n	800073e <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <TerminalHandler+0xf0>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <TerminalHandler+0xf4>)
 800072c:	7819      	ldrb	r1, [r3, #0]
 800072e:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <TerminalHandler+0xf8>)
 8000730:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <TerminalHandler+0xf0>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	3301      	adds	r3, #1
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <TerminalHandler+0xf0>)
 800073c:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 800073e:	230a      	movs	r3, #10
 8000740:	2201      	movs	r2, #1
 8000742:	4915      	ldr	r1, [pc, #84]	@ (8000798 <TerminalHandler+0xf4>)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f003 fbf5 	bl	8003f34 <HAL_UART_Transmit>
 800074a:	e013      	b.n	8000774 <TerminalHandler+0xd0>
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <TerminalHandler+0xf0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <TerminalHandler+0xf4>)
 8000754:	7819      	ldrb	r1, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <TerminalHandler+0xf8>)
 8000758:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <TerminalHandler+0xf0>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <TerminalHandler+0xfc>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 8000766:	f107 0114 	add.w	r1, r7, #20
 800076a:	230a      	movs	r3, #10
 800076c:	2203      	movs	r2, #3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f003 fbe0 	bl	8003f34 <HAL_UART_Transmit>
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 8000774:	2201      	movs	r2, #1
 8000776:	4908      	ldr	r1, [pc, #32]	@ (8000798 <TerminalHandler+0xf4>)
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f003 fc5e 	bl	800403a <HAL_UART_Receive_IT>
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	080087b4 	.word	0x080087b4
 800078c:	080087b8 	.word	0x080087b8
 8000790:	40011000 	.word	0x40011000
 8000794:	200000cc 	.word	0x200000cc
 8000798:	200000d0 	.word	0x200000d0
 800079c:	200000d4 	.word	0x200000d4
 80007a0:	2000019c 	.word	0x2000019c

080007a4 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 80007ac:	2201      	movs	r2, #1
 80007ae:	4905      	ldr	r1, [pc, #20]	@ (80007c4 <TerminalInit+0x20>)
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f003 fc42 	bl	800403a <HAL_UART_Receive_IT>
	ClearRxBuffer();
 80007b6:	f000 f807 	bl	80007c8 <ClearRxBuffer>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000d0 	.word	0x200000d0

080007c8 <ClearRxBuffer>:

void ClearRxBuffer()
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 200; counter++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	e007      	b.n	80007e4 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 80007d4:	4a09      	ldr	r2, [pc, #36]	@ (80007fc <ClearRxBuffer+0x34>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 200; counter++)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3301      	adds	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80007e8:	ddf4      	ble.n	80007d4 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <ClearRxBuffer+0x38>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	200000d4 	.word	0x200000d4
 8000800:	2000019c 	.word	0x2000019c

08000804 <HAL_UART_RxCpltCallback>:
{
	return (char*)RxBuffer;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff49 	bl	80006a4 <TerminalHandler>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <DevicesInit>:
#include "Variables.h"

extern UART_HandleTypeDef huart1;

void DevicesInit()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	AlarmInit();
 8000820:	f7ff fe98 	bl	8000554 <AlarmInit>
	SignalSystemInit();
 8000824:	f7ff ff30 	bl	8000688 <SignalSystemInit>
	AirQualityIncicatorInit();
 8000828:	f7ff fe6a 	bl	8000500 <AirQualityIncicatorInit>
	LED_init();
 800082c:	f7ff feec 	bl	8000608 <LED_init>
	TerminalInit(&huart1);
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <DevicesInit+0x20>)
 8000832:	f7ff ffb7 	bl	80007a4 <TerminalInit>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000020c 	.word	0x2000020c

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 f857 	bl	80018f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f886 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f998 	bl	8000b80 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000850:	f000 f8f2 	bl	8000a38 <MX_ADC3_Init>
  MX_CRC_Init();
 8000854:	f000 f942 	bl	8000adc <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000858:	f000 f962 	bl	8000b20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DevicesInit(); // This Method initialize whole app system
 800085c:	f7ff ffde 	bl	800081c <DevicesInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000860:	f004 fdfe 	bl	8005460 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RegimeMutex */
  RegimeMutexHandle = osMutexNew(&RegimeMutex_attributes);
 8000864:	4824      	ldr	r0, [pc, #144]	@ (80008f8 <main+0xb8>)
 8000866:	f004 ffd3 	bl	8005810 <osMutexNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a23      	ldr	r2, [pc, #140]	@ (80008fc <main+0xbc>)
 800086e:	6013      	str	r3, [r2, #0]

  /* creation of RefRateMutex */
  RefRateMutexHandle = osMutexNew(&RefRateMutex_attributes);
 8000870:	4823      	ldr	r0, [pc, #140]	@ (8000900 <main+0xc0>)
 8000872:	f004 ffcd 	bl	8005810 <osMutexNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a22      	ldr	r2, [pc, #136]	@ (8000904 <main+0xc4>)
 800087a:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 800087c:	4822      	ldr	r0, [pc, #136]	@ (8000908 <main+0xc8>)
 800087e:	f004 ffc7 	bl	8005810 <osMutexNew>
 8000882:	4603      	mov	r3, r0
 8000884:	4a21      	ldr	r2, [pc, #132]	@ (800090c <main+0xcc>)
 8000886:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of LEDTimer */
  LEDTimerHandle = osTimerNew(LEDTimerCallback, osTimerPeriodic, NULL, &LEDTimer_attributes);
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <main+0xd0>)
 800088a:	2200      	movs	r2, #0
 800088c:	2101      	movs	r1, #1
 800088e:	4821      	ldr	r0, [pc, #132]	@ (8000914 <main+0xd4>)
 8000890:	f004 ff3a 	bl	8005708 <osTimerNew>
 8000894:	4603      	mov	r3, r0
 8000896:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <main+0xd8>)
 8000898:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTimer */
  TransmitTimerHandle = osTimerNew(TransmitTimerCallback, osTimerPeriodic, NULL, &TransmitTimer_attributes);
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <main+0xdc>)
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	481f      	ldr	r0, [pc, #124]	@ (8000920 <main+0xe0>)
 80008a2:	f004 ff31 	bl	8005708 <osTimerNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000924 <main+0xe4>)
 80008aa:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(ButtonTimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <main+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	481e      	ldr	r0, [pc, #120]	@ (800092c <main+0xec>)
 80008b4:	f004 ff28 	bl	8005708 <osTimerNew>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000930 <main+0xf0>)
 80008bc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 80008be:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <main+0xf4>)
 80008c0:	2100      	movs	r1, #0
 80008c2:	481d      	ldr	r0, [pc, #116]	@ (8000938 <main+0xf8>)
 80008c4:	f004 fe36 	bl	8005534 <osThreadNew>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <main+0xfc>)
 80008cc:	6013      	str	r3, [r2, #0]

  /* creation of TerminalTask */
  TerminalTaskHandle = osThreadNew(StartTerminalTask, NULL, &TerminalTask_attributes);
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <main+0x100>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	481c      	ldr	r0, [pc, #112]	@ (8000944 <main+0x104>)
 80008d4:	f004 fe2e 	bl	8005534 <osThreadNew>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a1b      	ldr	r2, [pc, #108]	@ (8000948 <main+0x108>)
 80008dc:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 80008de:	4a1b      	ldr	r2, [pc, #108]	@ (800094c <main+0x10c>)
 80008e0:	2100      	movs	r1, #0
 80008e2:	481b      	ldr	r0, [pc, #108]	@ (8000950 <main+0x110>)
 80008e4:	f004 fe26 	bl	8005534 <osThreadNew>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <main+0x114>)
 80008ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008ee:	f004 fdeb 	bl	80054c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <main+0xb2>
 80008f6:	bf00      	nop
 80008f8:	080089d4 	.word	0x080089d4
 80008fc:	200002ac 	.word	0x200002ac
 8000900:	080089e4 	.word	0x080089e4
 8000904:	200002b0 	.word	0x200002b0
 8000908:	080089f4 	.word	0x080089f4
 800090c:	200002b4 	.word	0x200002b4
 8000910:	080089a4 	.word	0x080089a4
 8000914:	08001469 	.word	0x08001469
 8000918:	200002a0 	.word	0x200002a0
 800091c:	080089b4 	.word	0x080089b4
 8000920:	0800147d 	.word	0x0800147d
 8000924:	200002a4 	.word	0x200002a4
 8000928:	080089c4 	.word	0x080089c4
 800092c:	08001491 	.word	0x08001491
 8000930:	200002a8 	.word	0x200002a8
 8000934:	08008938 	.word	0x08008938
 8000938:	08001439 	.word	0x08001439
 800093c:	20000294 	.word	0x20000294
 8000940:	0800895c 	.word	0x0800895c
 8000944:	08001449 	.word	0x08001449
 8000948:	20000298 	.word	0x20000298
 800094c:	08008980 	.word	0x08008980
 8000950:	08001459 	.word	0x08001459
 8000954:	2000029c 	.word	0x2000029c

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	@ 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	@ 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f007 fe30 	bl	80085cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800097c:	f001 fea0 	bl	80026c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <SystemClock_Config+0xd8>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a2a      	ldr	r2, [pc, #168]	@ (8000a30 <SystemClock_Config+0xd8>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
 800098c:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <SystemClock_Config+0xd8>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <SystemClock_Config+0xdc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a25      	ldr	r2, [pc, #148]	@ (8000a34 <SystemClock_Config+0xdc>)
 800099e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <SystemClock_Config+0xdc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009c4:	2319      	movs	r3, #25
 80009c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80009c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80009cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009d2:	2309      	movs	r3, #9
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fed0 	bl	8002780 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009e6:	f000 fd6f 	bl	80014c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009ea:	f001 fe79 	bl	80026e0 <HAL_PWREx_EnableOverDrive>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009f4:	f000 fd68 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f8:	230f      	movs	r3, #15
 80009fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fc:	2302      	movs	r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2106      	movs	r1, #6
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 f956 	bl	8002cc8 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a22:	f000 fd51 	bl	80014c8 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3750      	adds	r7, #80	@ 0x50
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a4c:	4a21      	ldr	r2, [pc, #132]	@ (8000ad4 <MX_ADC3_Init+0x9c>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a56:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a72:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <MX_ADC3_Init+0xa0>)
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a98:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000a9a:	f000 ff59 	bl	8001950 <HAL_ADC_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f000 fd10 	bl	80014c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_ADC3_Init+0x98>)
 8000aba:	f000 ff8d 	bl	80019d8 <HAL_ADC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ac4:	f000 fd00 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200001a0 	.word	0x200001a0
 8000ad4:	40012200 	.word	0x40012200
 8000ad8:	0f000001 	.word	0x0f000001

08000adc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <MX_CRC_Init+0x3c>)
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <MX_CRC_Init+0x40>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_CRC_Init+0x3c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_CRC_Init+0x3c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_CRC_Init+0x3c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <MX_CRC_Init+0x3c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_CRC_Init+0x3c>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_CRC_Init+0x3c>)
 8000b06:	f001 fa99 	bl	800203c <HAL_CRC_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b10:	f000 fcda 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200001e8 	.word	0x200001e8
 8000b1c:	40023000 	.word	0x40023000

08000b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	@ (8000b7c <MX_USART1_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b64:	f003 f998 	bl	8003e98 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 fcab 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000020c 	.word	0x2000020c
 8000b7c:	40011000 	.word	0x40011000

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	@ 0x40
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	4baf      	ldr	r3, [pc, #700]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4aae      	ldr	r2, [pc, #696]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4bac      	ldr	r3, [pc, #688]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	4ba9      	ldr	r3, [pc, #676]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4aa8      	ldr	r2, [pc, #672]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4ba6      	ldr	r3, [pc, #664]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4ba3      	ldr	r3, [pc, #652]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4aa2      	ldr	r2, [pc, #648]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	4b9d      	ldr	r3, [pc, #628]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a9c      	ldr	r2, [pc, #624]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b9a      	ldr	r3, [pc, #616]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b97      	ldr	r3, [pc, #604]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a96      	ldr	r2, [pc, #600]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b94      	ldr	r3, [pc, #592]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b91      	ldr	r3, [pc, #580]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a90      	ldr	r2, [pc, #576]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b8e      	ldr	r3, [pc, #568]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c26:	4b8b      	ldr	r3, [pc, #556]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a8a      	ldr	r2, [pc, #552]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b88      	ldr	r3, [pc, #544]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c3e:	4b85      	ldr	r3, [pc, #532]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a84      	ldr	r2, [pc, #528]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b82      	ldr	r3, [pc, #520]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c56:	4b7f      	ldr	r3, [pc, #508]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b7c      	ldr	r3, [pc, #496]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6e:	4b79      	ldr	r3, [pc, #484]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a78      	ldr	r2, [pc, #480]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b76      	ldr	r3, [pc, #472]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0320 	and.w	r3, r3, #32
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	4b73      	ldr	r3, [pc, #460]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a72      	ldr	r2, [pc, #456]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b70      	ldr	r3, [pc, #448]	@ (8000e54 <MX_GPIO_Init+0x2d4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	486d      	ldr	r0, [pc, #436]	@ (8000e58 <MX_GPIO_Init+0x2d8>)
 8000ca4:	f001 fcf2 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2120      	movs	r1, #32
 8000cac:	486b      	ldr	r0, [pc, #428]	@ (8000e5c <MX_GPIO_Init+0x2dc>)
 8000cae:	f001 fced 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210d      	movs	r1, #13
 8000cb6:	486a      	ldr	r0, [pc, #424]	@ (8000e60 <MX_GPIO_Init+0x2e0>)
 8000cb8:	f001 fce8 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4868      	ldr	r0, [pc, #416]	@ (8000e64 <MX_GPIO_Init+0x2e4>)
 8000cc2:	f001 fce3 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ccc:	4864      	ldr	r0, [pc, #400]	@ (8000e60 <MX_GPIO_Init+0x2e0>)
 8000cce:	f001 fcdd 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8000cd8:	4863      	ldr	r0, [pc, #396]	@ (8000e68 <MX_GPIO_Init+0x2e8>)
 8000cda:	f001 fcd7 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2140      	movs	r1, #64	@ 0x40
 8000ce2:	4862      	ldr	r0, [pc, #392]	@ (8000e6c <MX_GPIO_Init+0x2ec>)
 8000ce4:	f001 fcd2 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	21c8      	movs	r1, #200	@ 0xc8
 8000cec:	4860      	ldr	r0, [pc, #384]	@ (8000e70 <MX_GPIO_Init+0x2f0>)
 8000cee:	f001 fccd 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d02:	230e      	movs	r3, #14
 8000d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4859      	ldr	r0, [pc, #356]	@ (8000e74 <MX_GPIO_Init+0x2f4>)
 8000d0e:	f001 fb11 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d12:	2308      	movs	r3, #8
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4853      	ldr	r0, [pc, #332]	@ (8000e74 <MX_GPIO_Init+0x2f4>)
 8000d26:	f001 fb05 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d3a:	2309      	movs	r3, #9
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	484b      	ldr	r0, [pc, #300]	@ (8000e74 <MX_GPIO_Init+0x2f4>)
 8000d46:	f001 faf5 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d4a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5c:	230b      	movs	r3, #11
 8000d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4842      	ldr	r0, [pc, #264]	@ (8000e70 <MX_GPIO_Init+0x2f0>)
 8000d68:	f001 fae4 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d6c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d86:	4619      	mov	r1, r3
 8000d88:	483a      	ldr	r0, [pc, #232]	@ (8000e74 <MX_GPIO_Init+0x2f4>)
 8000d8a:	f001 fad3 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d94:	2312      	movs	r3, #18
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da0:	2304      	movs	r3, #4
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	482b      	ldr	r0, [pc, #172]	@ (8000e58 <MX_GPIO_Init+0x2d8>)
 8000dac:	f001 fac2 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8000db0:	2310      	movs	r3, #16
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000db8:	2302      	movs	r3, #2
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4824      	ldr	r0, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0x2d8>)
 8000dc8:	f001 fab4 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <MX_GPIO_Init+0x2dc>)
 8000de8:	f001 faa4 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000dec:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4818      	ldr	r0, [pc, #96]	@ (8000e6c <MX_GPIO_Init+0x2ec>)
 8000e0a:	f001 fa93 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e20:	2301      	movs	r3, #1
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4813      	ldr	r0, [pc, #76]	@ (8000e78 <MX_GPIO_Init+0x2f8>)
 8000e2c:	f001 fa82 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e30:	2360      	movs	r3, #96	@ 0x60
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e40:	230d      	movs	r3, #13
 8000e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <MX_GPIO_Init+0x2f4>)
 8000e4c:	f001 fa72 	bl	8002334 <HAL_GPIO_Init>
 8000e50:	e014      	b.n	8000e7c <MX_GPIO_Init+0x2fc>
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40022800 	.word	0x40022800
 8000e68:	40021c00 	.word	0x40021c00
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e7c:	2340      	movs	r3, #64	@ 0x40
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e94:	4619      	mov	r1, r3
 8000e96:	48bc      	ldr	r0, [pc, #752]	@ (8001188 <MX_GPIO_Init+0x608>)
 8000e98:	f001 fa4c 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000e9c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	48b4      	ldr	r0, [pc, #720]	@ (800118c <MX_GPIO_Init+0x60c>)
 8000eba:	f001 fa3b 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000ebe:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	48ad      	ldr	r0, [pc, #692]	@ (8001190 <MX_GPIO_Init+0x610>)
 8000edc:	f001 fa2a 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	48a6      	ldr	r0, [pc, #664]	@ (8001190 <MX_GPIO_Init+0x610>)
 8000ef6:	f001 fa1d 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	48a1      	ldr	r0, [pc, #644]	@ (8001194 <MX_GPIO_Init+0x614>)
 8000f10:	f001 fa10 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f14:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f26:	230c      	movs	r3, #12
 8000f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4898      	ldr	r0, [pc, #608]	@ (8001194 <MX_GPIO_Init+0x614>)
 8000f32:	f001 f9ff 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f36:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	4891      	ldr	r0, [pc, #580]	@ (8001198 <MX_GPIO_Init+0x618>)
 8000f54:	f001 f9ee 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f58:	23f0      	movs	r3, #240	@ 0xf0
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f68:	230a      	movs	r3, #10
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	488a      	ldr	r0, [pc, #552]	@ (800119c <MX_GPIO_Init+0x61c>)
 8000f74:	f001 f9de 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000f78:	23f7      	movs	r3, #247	@ 0xf7
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f88:	230e      	movs	r3, #14
 8000f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f90:	4619      	mov	r1, r3
 8000f92:	4883      	ldr	r0, [pc, #524]	@ (80011a0 <MX_GPIO_Init+0x620>)
 8000f94:	f001 f9ce 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000faa:	2309      	movs	r3, #9
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4875      	ldr	r0, [pc, #468]	@ (800118c <MX_GPIO_Init+0x60c>)
 8000fb6:	f001 f9bd 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fcc:	230a      	movs	r3, #10
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	486d      	ldr	r0, [pc, #436]	@ (800118c <MX_GPIO_Init+0x60c>)
 8000fd8:	f001 f9ac 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4868      	ldr	r0, [pc, #416]	@ (8001194 <MX_GPIO_Init+0x614>)
 8000ff4:	f001 f99e 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001008:	230d      	movs	r3, #13
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001010:	4619      	mov	r1, r3
 8001012:	4860      	ldr	r0, [pc, #384]	@ (8001194 <MX_GPIO_Init+0x614>)
 8001014:	f001 f98e 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8001018:	230d      	movs	r3, #13
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001020:	2302      	movs	r3, #2
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	485b      	ldr	r0, [pc, #364]	@ (800119c <MX_GPIO_Init+0x61c>)
 8001030:	f001 f980 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	4856      	ldr	r0, [pc, #344]	@ (80011a4 <MX_GPIO_Init+0x624>)
 800104a:	f001 f973 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800104e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001060:	230c      	movs	r3, #12
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	484f      	ldr	r0, [pc, #316]	@ (80011a8 <MX_GPIO_Init+0x628>)
 800106c:	f001 f962 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001070:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001082:	230e      	movs	r3, #14
 8001084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	4843      	ldr	r0, [pc, #268]	@ (800119c <MX_GPIO_Init+0x61c>)
 800108e:	f001 f951 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001092:	2308      	movs	r3, #8
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a6:	4619      	mov	r1, r3
 80010a8:	483d      	ldr	r0, [pc, #244]	@ (80011a0 <MX_GPIO_Init+0x620>)
 80010aa:	f001 f943 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80010ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010c0:	230d      	movs	r3, #13
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4830      	ldr	r0, [pc, #192]	@ (800118c <MX_GPIO_Init+0x60c>)
 80010cc:	f001 f932 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010d0:	2310      	movs	r3, #16
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e0:	4619      	mov	r1, r3
 80010e2:	482c      	ldr	r0, [pc, #176]	@ (8001194 <MX_GPIO_Init+0x614>)
 80010e4:	f001 f926 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80010e8:	2304      	movs	r3, #4
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010f8:	230c      	movs	r3, #12
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	@ (8001194 <MX_GPIO_Init+0x614>)
 8001104:	f001 f916 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001108:	f248 0304 	movw	r3, #32772	@ 0x8004
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800111a:	4619      	mov	r1, r3
 800111c:	4823      	ldr	r0, [pc, #140]	@ (80011ac <MX_GPIO_Init+0x62c>)
 800111e:	f001 f909 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001122:	2302      	movs	r3, #2
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001132:	2305      	movs	r3, #5
 8001134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113a:	4619      	mov	r1, r3
 800113c:	4817      	ldr	r0, [pc, #92]	@ (800119c <MX_GPIO_Init+0x61c>)
 800113e:	f001 f8f9 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	4810      	ldr	r0, [pc, #64]	@ (800119c <MX_GPIO_Init+0x61c>)
 800115c:	f001 f8ea 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <MX_GPIO_Init+0x62c>)
 800117a:	f001 f8db 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800117e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	e013      	b.n	80011b0 <MX_GPIO_Init+0x630>
 8001188:	40020400 	.word	0x40020400
 800118c:	40021800 	.word	0x40021800
 8001190:	40022400 	.word	0x40022400
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40020000 	.word	0x40020000
 800119c:	40022000 	.word	0x40022000
 80011a0:	40022800 	.word	0x40022800
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ba:	230d      	movs	r3, #13
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4895      	ldr	r0, [pc, #596]	@ (800141c <MX_GPIO_Init+0x89c>)
 80011c6:	f001 f8b5 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80011ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d4:	2302      	movs	r3, #2
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	4890      	ldr	r0, [pc, #576]	@ (8001420 <MX_GPIO_Init+0x8a0>)
 80011e0:	f001 f8a8 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80011e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fe:	4619      	mov	r1, r3
 8001200:	4888      	ldr	r0, [pc, #544]	@ (8001424 <MX_GPIO_Init+0x8a4>)
 8001202:	f001 f897 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001206:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800120c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001210:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800121a:	4619      	mov	r1, r3
 800121c:	4880      	ldr	r0, [pc, #512]	@ (8001420 <MX_GPIO_Init+0x8a0>)
 800121e:	f001 f889 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8001222:	2380      	movs	r3, #128	@ 0x80
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001232:	2308      	movs	r3, #8
 8001234:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800123a:	4619      	mov	r1, r3
 800123c:	487a      	ldr	r0, [pc, #488]	@ (8001428 <MX_GPIO_Init+0x8a8>)
 800123e:	f001 f879 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8001242:	2340      	movs	r3, #64	@ 0x40
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124a:	2302      	movs	r3, #2
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001256:	4619      	mov	r1, r3
 8001258:	4873      	ldr	r0, [pc, #460]	@ (8001428 <MX_GPIO_Init+0x8a8>)
 800125a:	f001 f86b 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800125e:	2328      	movs	r3, #40	@ 0x28
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800126e:	230c      	movs	r3, #12
 8001270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001272:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001276:	4619      	mov	r1, r3
 8001278:	4868      	ldr	r0, [pc, #416]	@ (800141c <MX_GPIO_Init+0x89c>)
 800127a:	f001 f85b 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 800127e:	23c0      	movs	r3, #192	@ 0xc0
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001286:	2302      	movs	r3, #2
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001292:	4619      	mov	r1, r3
 8001294:	4865      	ldr	r0, [pc, #404]	@ (800142c <MX_GPIO_Init+0x8ac>)
 8001296:	f001 f84d 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800129a:	2308      	movs	r3, #8
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012aa:	230c      	movs	r3, #12
 80012ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b2:	4619      	mov	r1, r3
 80012b4:	485c      	ldr	r0, [pc, #368]	@ (8001428 <MX_GPIO_Init+0x8a8>)
 80012b6:	f001 f83d 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012ba:	2332      	movs	r3, #50	@ 0x32
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ca:	230b      	movs	r3, #11
 80012cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d2:	4619      	mov	r1, r3
 80012d4:	4854      	ldr	r0, [pc, #336]	@ (8001428 <MX_GPIO_Init+0x8a8>)
 80012d6:	f001 f82d 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012da:	2304      	movs	r3, #4
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012ea:	2309      	movs	r3, #9
 80012ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	484e      	ldr	r0, [pc, #312]	@ (8001430 <MX_GPIO_Init+0x8b0>)
 80012f6:	f001 f81d 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80012fa:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800130c:	2309      	movs	r3, #9
 800130e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001314:	4619      	mov	r1, r3
 8001316:	4847      	ldr	r0, [pc, #284]	@ (8001434 <MX_GPIO_Init+0x8b4>)
 8001318:	f001 f80c 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800131c:	2308      	movs	r3, #8
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001330:	4619      	mov	r1, r3
 8001332:	483e      	ldr	r0, [pc, #248]	@ (800142c <MX_GPIO_Init+0x8ac>)
 8001334:	f000 fffe 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001338:	2304      	movs	r3, #4
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001348:	4619      	mov	r1, r3
 800134a:	4838      	ldr	r0, [pc, #224]	@ (800142c <MX_GPIO_Init+0x8ac>)
 800134c:	f000 fff2 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001350:	2386      	movs	r3, #134	@ 0x86
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001360:	230b      	movs	r3, #11
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001368:	4619      	mov	r1, r3
 800136a:	482e      	ldr	r0, [pc, #184]	@ (8001424 <MX_GPIO_Init+0x8a4>)
 800136c:	f000 ffe2 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001370:	2350      	movs	r3, #80	@ 0x50
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001380:	230d      	movs	r3, #13
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001388:	4619      	mov	r1, r3
 800138a:	4826      	ldr	r0, [pc, #152]	@ (8001424 <MX_GPIO_Init+0x8a4>)
 800138c:	f000 ffd2 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001390:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001396:	2312      	movs	r3, #18
 8001398:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139a:	2301      	movs	r3, #1
 800139c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013a2:	2304      	movs	r3, #4
 80013a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013aa:	4619      	mov	r1, r3
 80013ac:	481b      	ldr	r0, [pc, #108]	@ (800141c <MX_GPIO_Init+0x89c>)
 80013ae:	f000 ffc1 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013c4:	230a      	movs	r3, #10
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013cc:	4619      	mov	r1, r3
 80013ce:	4818      	ldr	r0, [pc, #96]	@ (8001430 <MX_GPIO_Init+0x8b0>)
 80013d0:	f000 ffb0 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 80013d4:	2340      	movs	r3, #64	@ 0x40
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013dc:	2302      	movs	r3, #2
 80013de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e8:	4619      	mov	r1, r3
 80013ea:	480c      	ldr	r0, [pc, #48]	@ (800141c <MX_GPIO_Init+0x89c>)
 80013ec:	f000 ffa2 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80013f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001402:	2305      	movs	r3, #5
 8001404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800140a:	4619      	mov	r1, r3
 800140c:	4808      	ldr	r0, [pc, #32]	@ (8001430 <MX_GPIO_Init+0x8b0>)
 800140e:	f000 ff91 	bl	8002334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	@ 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021c00 	.word	0x40021c00
 8001420:	40022000 	.word	0x40022000
 8001424:	40020000 	.word	0x40020000
 8001428:	40020800 	.word	0x40020800
 800142c:	40021800 	.word	0x40021800
 8001430:	40020400 	.word	0x40020400
 8001434:	40020c00 	.word	0x40020c00

08001438 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument) // TODO: citanje sa senzoraea, alrm...
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f004 f91d 	bl	8005680 <osDelay>
 8001446:	e7fb      	b.n	8001440 <StartMainTask+0x8>

08001448 <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void *argument)  // FSM za komande sa terminala
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTerminalTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f004 f915 	bl	8005680 <osDelay>
 8001456:	e7fb      	b.n	8001450 <StartTerminalTask+0x8>

08001458 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument) // Biranje moda
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f004 f90d 	bl	8005680 <osDelay>
 8001466:	e7fb      	b.n	8001460 <StartButtonTask+0x8>

08001468 <LEDTimerCallback>:
  /* USER CODE END StartButtonTask */
}

/* LEDTimerCallback function */
void LEDTimerCallback(void *argument) // Led Driver
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDTimerCallback */

  /* USER CODE END LEDTimerCallback */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <TransmitTimerCallback>:

/* TransmitTimerCallback function */
void TransmitTimerCallback(void *argument) // RefRate
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTimerCallback */

  /* USER CODE END TransmitTimerCallback */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <ButtonTimerCallback>:

/* ButtonTimerCallback function */
void ButtonTimerCallback(void *argument) // 3 sec
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTimerCallback */

  /* USER CODE END ButtonTimerCallback */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014b6:	f000 fa2b 	bl	8001910 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40002000 	.word	0x40002000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <Error_Handler+0x8>

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	4a10      	ldr	r2, [pc, #64]	@ (8001520 <HAL_MspInit+0x4c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210f      	movs	r1, #15
 800150e:	f06f 0001 	mvn.w	r0, #1
 8001512:	f000 fd69 	bl	8001fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <HAL_ADC_MspInit+0xa4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d13c      	bne.n	80015c0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	4a20      	ldr	r2, [pc, #128]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 800154c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001550:	6453      	str	r3, [r2, #68]	@ 0x44
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a1a      	ldr	r2, [pc, #104]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_ADC_MspInit+0xa8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800158e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001592:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001594:	2303      	movs	r3, #3
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <HAL_ADC_MspInit+0xac>)
 80015a4:	f000 fec6 	bl	8002334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 80015a8:	2301      	movs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ac:	2303      	movs	r3, #3
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <HAL_ADC_MspInit+0xb0>)
 80015bc:	f000 feba 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	@ 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40012200 	.word	0x40012200
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021400 	.word	0x40021400
 80015d4:	40020000 	.word	0x40020000

080015d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <HAL_CRC_MspInit+0x38>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10b      	bne.n	8001602 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_CRC_MspInit+0x3c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_CRC_MspInit+0x3c>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <HAL_CRC_MspInit+0x3c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023000 	.word	0x40023000
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ac      	sub	sp, #176	@ 0xb0
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	2284      	movs	r2, #132	@ 0x84
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f006 ffc7 	bl	80085cc <memset>
  if(huart->Instance==USART1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a36      	ldr	r2, [pc, #216]	@ (800171c <HAL_UART_MspInit+0x104>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d164      	bne.n	8001712 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001648:	2340      	movs	r3, #64	@ 0x40
 800164a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800164c:	2300      	movs	r3, #0
 800164e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fd4f 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001660:	f7ff ff32 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001664:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <HAL_UART_MspInit+0x108>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <HAL_UART_MspInit+0x108>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_UART_MspInit+0x108>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <HAL_UART_MspInit+0x108>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	4a27      	ldr	r2, [pc, #156]	@ (8001720 <HAL_UART_MspInit+0x108>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	6313      	str	r3, [r2, #48]	@ 0x30
 8001688:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <HAL_UART_MspInit+0x108>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <HAL_UART_MspInit+0x108>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	4a21      	ldr	r2, [pc, #132]	@ (8001720 <HAL_UART_MspInit+0x108>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_UART_MspInit+0x108>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c4:	2307      	movs	r3, #7
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	@ (8001724 <HAL_UART_MspInit+0x10c>)
 80016d2:	f000 fe2f 	bl	8002334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f0:	2307      	movs	r3, #7
 80016f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016fa:	4619      	mov	r1, r3
 80016fc:	480a      	ldr	r0, [pc, #40]	@ (8001728 <HAL_UART_MspInit+0x110>)
 80016fe:	f000 fe19 	bl	8002334 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2105      	movs	r1, #5
 8001706:	2025      	movs	r0, #37	@ 0x25
 8001708:	f000 fc6e 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800170c:	2025      	movs	r0, #37	@ 0x25
 800170e:	f000 fc87 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	37b0      	adds	r7, #176	@ 0xb0
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40011000 	.word	0x40011000
 8001720:	40023800 	.word	0x40023800
 8001724:	40020400 	.word	0x40020400
 8001728:	40020000 	.word	0x40020000

0800172c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	@ 0x38
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800173c:	4b33      	ldr	r3, [pc, #204]	@ (800180c <HAL_InitTick+0xe0>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a32      	ldr	r2, [pc, #200]	@ (800180c <HAL_InitTick+0xe0>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
 8001748:	4b30      	ldr	r3, [pc, #192]	@ (800180c <HAL_InitTick+0xe0>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	f107 0210 	add.w	r2, r7, #16
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fc98 	bl	8003094 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800176e:	f001 fc69 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8001772:	6378      	str	r0, [r7, #52]	@ 0x34
 8001774:	e004      	b.n	8001780 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001776:	f001 fc65 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001782:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <HAL_InitTick+0xe4>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9b      	lsrs	r3, r3, #18
 800178a:	3b01      	subs	r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_InitTick+0xe8>)
 8001790:	4a21      	ldr	r2, [pc, #132]	@ (8001818 <HAL_InitTick+0xec>)
 8001792:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_InitTick+0xe8>)
 8001796:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800179a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800179c:	4a1d      	ldr	r2, [pc, #116]	@ (8001814 <HAL_InitTick+0xe8>)
 800179e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <HAL_InitTick+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <HAL_InitTick+0xe8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_InitTick+0xe8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80017b4:	4817      	ldr	r0, [pc, #92]	@ (8001814 <HAL_InitTick+0xe8>)
 80017b6:	f002 f88f 	bl	80038d8 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d11b      	bne.n	8001800 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80017c8:	4812      	ldr	r0, [pc, #72]	@ (8001814 <HAL_InitTick+0xe8>)
 80017ca:	f002 f8e7 	bl	800399c <HAL_TIM_Base_Start_IT>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d111      	bne.n	8001800 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80017dc:	202d      	movs	r0, #45	@ 0x2d
 80017de:	f000 fc1f 	bl	8002020 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d808      	bhi.n	80017fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	202d      	movs	r0, #45	@ 0x2d
 80017ee:	f000 fbfb 	bl	8001fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <HAL_InitTick+0xf0>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e002      	b.n	8001800 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001800:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001804:	4618      	mov	r0, r3
 8001806:	3738      	adds	r7, #56	@ 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	431bde83 	.word	0x431bde83
 8001814:	200002b8 	.word	0x200002b8
 8001818:	40002000 	.word	0x40002000
 800181c:	20000004 	.word	0x20000004

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <USART1_IRQHandler+0x10>)
 800185e:	f002 fc31 	bl	80040c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000020c 	.word	0x2000020c

0800186c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001872:	f002 f90b 	bl	8003a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200002b8 	.word	0x200002b8

08001880 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <SystemInit+0x20>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <SystemInit+0x20>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018aa:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018ac:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c0:	4c0b      	ldr	r4, [pc, #44]	@ (80018f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ce:	f7ff ffd7 	bl	8001880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f006 fed9 	bl	8008688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7fe ffb3 	bl	8000840 <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018e8:	08008a2c 	.word	0x08008a2c
  ldr r2, =_sbss
 80018ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018f0:	20004e28 	.word	0x20004e28

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>

080018f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fa:	2003      	movs	r0, #3
 80018fc:	f000 fb69 	bl	8001fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001900:	200f      	movs	r0, #15
 8001902:	f7ff ff13 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001906:	f7ff fde5 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	20000304 	.word	0x20000304

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000304 	.word	0x20000304

08001950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e031      	b.n	80019ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fdd8 	bl	8001524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_ADC_Init+0x84>)
 8001994:	4013      	ands	r3, r2
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f970 	bl	8001c84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ba:	e001      	b.n	80019c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	ffffeefd 	.word	0xffffeefd

080019d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e136      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x28a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d93a      	bls.n	8001a7a <HAL_ADC_ConfigChannel+0xa2>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a0c:	d035      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68d9      	ldr	r1, [r3, #12]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	3b1e      	subs	r3, #30
 8001a24:	2207      	movs	r2, #7
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a8d      	ldr	r2, [pc, #564]	@ (8001c70 <HAL_ADC_ConfigChannel+0x298>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10a      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68d9      	ldr	r1, [r3, #12]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	061a      	lsls	r2, r3, #24
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a52:	e035      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68d9      	ldr	r1, [r3, #12]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4403      	add	r3, r0
 8001a6c:	3b1e      	subs	r3, #30
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a78:	e022      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6919      	ldr	r1, [r3, #16]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43da      	mvns	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6919      	ldr	r1, [r3, #16]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4403      	add	r3, r0
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d824      	bhi.n	8001b12 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	221f      	movs	r2, #31
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b05      	subs	r3, #5
 8001b04:	fa00 f203 	lsl.w	r2, r0, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b10:	e04c      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d824      	bhi.n	8001b64 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b23      	subs	r3, #35	@ 0x23
 8001b2c:	221f      	movs	r2, #31
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	3b23      	subs	r3, #35	@ 0x23
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b62:	e023      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	3b41      	subs	r3, #65	@ 0x41
 8001b76:	221f      	movs	r2, #31
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	400a      	ands	r2, r1
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b41      	subs	r3, #65	@ 0x41
 8001ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a30      	ldr	r2, [pc, #192]	@ (8001c74 <HAL_ADC_ConfigChannel+0x29c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10a      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1f4>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bbe:	d105      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bc6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001bca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <HAL_ADC_ConfigChannel+0x29c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a25      	ldr	r2, [pc, #148]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001be4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001be8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bea:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <HAL_ADC_ConfigChannel+0x29c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d12b      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x280>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <HAL_ADC_ConfigChannel+0x298>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d003      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0x23a>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b11      	cmp	r3, #17
 8001c10:	d122      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c18:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c1c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a15      	ldr	r2, [pc, #84]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c28:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a10      	ldr	r2, [pc, #64]	@ (8001c70 <HAL_ADC_ConfigChannel+0x298>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d111      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_ADC_ConfigChannel+0x2a4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0c9a      	lsrs	r2, r3, #18
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	10000012 	.word	0x10000012
 8001c74:	40012000 	.word	0x40012000
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c8c:	4b78      	ldr	r3, [pc, #480]	@ (8001e70 <ADC_Init+0x1ec>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a77      	ldr	r2, [pc, #476]	@ (8001e70 <ADC_Init+0x1ec>)
 8001c92:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001c96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c98:	4b75      	ldr	r3, [pc, #468]	@ (8001e70 <ADC_Init+0x1ec>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4973      	ldr	r1, [pc, #460]	@ (8001e70 <ADC_Init+0x1ec>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	021a      	lsls	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6899      	ldr	r1, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <ADC_Init+0x1f0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d022      	beq.n	8001d5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6899      	ldr	r1, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	e00f      	b.n	8001d7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0202 	bic.w	r2, r2, #2
 8001d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	005a      	lsls	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001dca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	035a      	lsls	r2, r3, #13
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e007      	b.n	8001df4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001df2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	051a      	lsls	r2, r3, #20
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e36:	025a      	lsls	r2, r3, #9
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	029a      	lsls	r2, r3, #10
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40012300 	.word	0x40012300
 8001e74:	0f000001 	.word	0x0f000001

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00
 8001ebc:	05fa0000 	.word	0x05fa0000

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	@ (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff4c 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffa:	f7ff ff61 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8001ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f7ff ffb1 	bl	8001f6c <NVIC_EncodePriority>
 800200a:	4602      	mov	r2, r0
 800200c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff80 	bl	8001f18 <__NVIC_SetPriority>
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff54 	bl	8001edc <__NVIC_EnableIRQ>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e054      	b.n	80020f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7f5b      	ldrb	r3, [r3, #29]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff faba 	bl	80015d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	791b      	ldrb	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a22      	ldr	r2, [pc, #136]	@ (8002100 <HAL_CRC_Init+0xc4>)
 8002078:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0218 	bic.w	r2, r2, #24
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	e00c      	b.n	80020a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	461a      	mov	r2, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f834 	bl	8002104 <HAL_CRCEx_Polynomial_Set>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e028      	b.n	80020f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	795b      	ldrb	r3, [r3, #5]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f04f 32ff 	mov.w	r2, #4294967295
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	e004      	b.n	80020c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6912      	ldr	r2, [r2, #16]
 80020c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	04c11db7 	.word	0x04c11db7

08002104 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002114:	231f      	movs	r3, #31
 8002116:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002118:	bf00      	nop
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	613a      	str	r2, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_CRCEx_Polynomial_Set+0x34>
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b18      	cmp	r3, #24
 800213c:	d846      	bhi.n	80021cc <HAL_CRCEx_Polynomial_Set+0xc8>
 800213e:	a201      	add	r2, pc, #4	@ (adr r2, 8002144 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002144:	080021d3 	.word	0x080021d3
 8002148:	080021cd 	.word	0x080021cd
 800214c:	080021cd 	.word	0x080021cd
 8002150:	080021cd 	.word	0x080021cd
 8002154:	080021cd 	.word	0x080021cd
 8002158:	080021cd 	.word	0x080021cd
 800215c:	080021cd 	.word	0x080021cd
 8002160:	080021cd 	.word	0x080021cd
 8002164:	080021c1 	.word	0x080021c1
 8002168:	080021cd 	.word	0x080021cd
 800216c:	080021cd 	.word	0x080021cd
 8002170:	080021cd 	.word	0x080021cd
 8002174:	080021cd 	.word	0x080021cd
 8002178:	080021cd 	.word	0x080021cd
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080021cd 	.word	0x080021cd
 8002184:	080021b5 	.word	0x080021b5
 8002188:	080021cd 	.word	0x080021cd
 800218c:	080021cd 	.word	0x080021cd
 8002190:	080021cd 	.word	0x080021cd
 8002194:	080021cd 	.word	0x080021cd
 8002198:	080021cd 	.word	0x080021cd
 800219c:	080021cd 	.word	0x080021cd
 80021a0:	080021cd 	.word	0x080021cd
 80021a4:	080021a9 	.word	0x080021a9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d913      	bls.n	80021d6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80021b2:	e010      	b.n	80021d6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b07      	cmp	r3, #7
 80021b8:	d90f      	bls.n	80021da <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80021be:	e00c      	b.n	80021da <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	d90b      	bls.n	80021de <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80021ca:	e008      	b.n	80021de <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
      break;
 80021d0:	e006      	b.n	80021e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80021d2:	bf00      	nop
 80021d4:	e004      	b.n	80021e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80021d6:	bf00      	nop
 80021d8:	e002      	b.n	80021e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80021de:	bf00      	nop
  }
  if (status == HAL_OK)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 0118 	bic.w	r1, r3, #24
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002202:	7dfb      	ldrb	r3, [r7, #23]
}
 8002204:	4618      	mov	r0, r3
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800221e:	f7ff fb8b 	bl	8001938 <HAL_GetTick>
 8002222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2280      	movs	r2, #128	@ 0x80
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e052      	b.n	80022e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0216 	bic.w	r2, r2, #22
 8002250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <HAL_DMA_Abort+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0208 	bic.w	r2, r2, #8
 8002280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002292:	e013      	b.n	80022bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002294:	f7ff fb50 	bl	8001938 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d90c      	bls.n	80022bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2203      	movs	r2, #3
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e015      	b.n	80022e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e4      	bne.n	8002294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	223f      	movs	r2, #63	@ 0x3f
 80022d0:	409a      	lsls	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d004      	beq.n	800230e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00c      	b.n	8002328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e175      	b.n	8002640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 8164 	bne.w	800263a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x56>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80be 	beq.w	800263a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	4b66      	ldr	r3, [pc, #408]	@ (8002658 <HAL_GPIO_Init+0x324>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	4a65      	ldr	r2, [pc, #404]	@ (8002658 <HAL_GPIO_Init+0x324>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ca:	4b63      	ldr	r3, [pc, #396]	@ (8002658 <HAL_GPIO_Init+0x324>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024d6:	4a61      	ldr	r2, [pc, #388]	@ (800265c <HAL_GPIO_Init+0x328>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a58      	ldr	r2, [pc, #352]	@ (8002660 <HAL_GPIO_Init+0x32c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d037      	beq.n	8002572 <HAL_GPIO_Init+0x23e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a57      	ldr	r2, [pc, #348]	@ (8002664 <HAL_GPIO_Init+0x330>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_GPIO_Init+0x23a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <HAL_GPIO_Init+0x334>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02b      	beq.n	800256a <HAL_GPIO_Init+0x236>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a55      	ldr	r2, [pc, #340]	@ (800266c <HAL_GPIO_Init+0x338>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d025      	beq.n	8002566 <HAL_GPIO_Init+0x232>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a54      	ldr	r2, [pc, #336]	@ (8002670 <HAL_GPIO_Init+0x33c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01f      	beq.n	8002562 <HAL_GPIO_Init+0x22e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a53      	ldr	r2, [pc, #332]	@ (8002674 <HAL_GPIO_Init+0x340>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x22a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	@ (8002678 <HAL_GPIO_Init+0x344>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x226>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a51      	ldr	r2, [pc, #324]	@ (800267c <HAL_GPIO_Init+0x348>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x222>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a50      	ldr	r2, [pc, #320]	@ (8002680 <HAL_GPIO_Init+0x34c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x21e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4f      	ldr	r2, [pc, #316]	@ (8002684 <HAL_GPIO_Init+0x350>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x21a>
 800254a:	2309      	movs	r3, #9
 800254c:	e012      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800254e:	230a      	movs	r3, #10
 8002550:	e010      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002552:	2308      	movs	r3, #8
 8002554:	e00e      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002556:	2307      	movs	r3, #7
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800255a:	2306      	movs	r3, #6
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	@ (800265c <HAL_GPIO_Init+0x328>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002592:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <HAL_GPIO_Init+0x354>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b6:	4a34      	ldr	r2, [pc, #208]	@ (8002688 <HAL_GPIO_Init+0x354>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025bc:	4b32      	ldr	r3, [pc, #200]	@ (8002688 <HAL_GPIO_Init+0x354>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e0:	4a29      	ldr	r2, [pc, #164]	@ (8002688 <HAL_GPIO_Init+0x354>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_GPIO_Init+0x354>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260a:	4a1f      	ldr	r2, [pc, #124]	@ (8002688 <HAL_GPIO_Init+0x354>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_GPIO_Init+0x354>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002634:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <HAL_GPIO_Init+0x354>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ae86 	bls.w	8002354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40021c00 	.word	0x40021c00
 8002680:	40022000 	.word	0x40022000
 8002684:	40022400 	.word	0x40022400
 8002688:	40013c00 	.word	0x40013c00

0800268c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
 8002698:	4613      	mov	r3, r2
 800269a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800269c:	787b      	ldrb	r3, [r7, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026a8:	e003      	b.n	80026b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	041a      	lsls	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	619a      	str	r2, [r3, #24]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40007000 	.word	0x40007000

080026e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x98>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a22      	ldr	r2, [pc, #136]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800270e:	f7ff f913 	bl	8001938 <HAL_GetTick>
 8002712:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002714:	e009      	b.n	800272a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002716:	f7ff f90f 	bl	8001938 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002724:	d901      	bls.n	800272a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e022      	b.n	8002770 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002736:	d1ee      	bne.n	8002716 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0f      	ldr	r2, [pc, #60]	@ (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002742:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7ff f8f8 	bl	8001938 <HAL_GetTick>
 8002748:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800274a:	e009      	b.n	8002760 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800274c:	f7ff f8f4 	bl	8001938 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800275a:	d901      	bls.n	8002760 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e007      	b.n	8002770 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800276c:	d1ee      	bne.n	800274c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000

08002780 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e291      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b96      	ldr	r3, [pc, #600]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b0:	4b93      	ldr	r3, [pc, #588]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x62>
 80027bc:	4b90      	ldr	r3, [pc, #576]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x130>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e26b      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x7a>
 80027ec:	4b84      	ldr	r3, [pc, #528]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a83      	ldr	r2, [pc, #524]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x9c>
 8002802:	4b7f      	ldr	r3, [pc, #508]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7e      	ldr	r2, [pc, #504]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7b      	ldr	r2, [pc, #492]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xc0>
 8002826:	4b76      	ldr	r3, [pc, #472]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b73      	ldr	r3, [pc, #460]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a72      	ldr	r2, [pc, #456]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd8>
 8002840:	4b6f      	ldr	r3, [pc, #444]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6e      	ldr	r2, [pc, #440]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6b      	ldr	r2, [pc, #428]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff f86a 	bl	8001938 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff f866 	bl	8001938 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e21f      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b61      	ldr	r3, [pc, #388]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe8>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7ff f856 	bl	8001938 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff f852 	bl	8001938 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e20b      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b57      	ldr	r3, [pc, #348]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x110>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d069      	beq.n	8002992 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b50      	ldr	r3, [pc, #320]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x190>
 80028d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b47      	ldr	r3, [pc, #284]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x17a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1df      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b41      	ldr	r3, [pc, #260]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	493d      	ldr	r1, [pc, #244]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e040      	b.n	8002992 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b39      	ldr	r3, [pc, #228]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a38      	ldr	r2, [pc, #224]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f808 	bl	8001938 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7ff f804 	bl	8001938 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1bd      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b30      	ldr	r3, [pc, #192]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4929      	ldr	r1, [pc, #164]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a26      	ldr	r2, [pc, #152]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe ffe4 	bl	8001938 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe ffe0 	bl	8001938 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e199      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d038      	beq.n	8002a10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029aa:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe ffc1 	bl	8001938 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe ffbd 	bl	8001938 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e176      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x23a>
 80029d8:	e01a      	b.n	8002a10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029de:	4a08      	ldr	r2, [pc, #32]	@ (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe ffa7 	bl	8001938 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe ffa3 	bl	8001938 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d903      	bls.n	8002a04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e15c      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
 8002a00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b91      	ldr	r3, [pc, #580]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a4 	beq.w	8002b66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b88      	ldr	r3, [pc, #544]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	4a87      	ldr	r2, [pc, #540]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a36:	4b85      	ldr	r3, [pc, #532]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a42:	2301      	movs	r3, #1
 8002a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a46:	4b82      	ldr	r3, [pc, #520]	@ (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d118      	bne.n	8002a84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a52:	4b7f      	ldr	r3, [pc, #508]	@ (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7e      	ldr	r2, [pc, #504]	@ (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe ff6b 	bl	8001938 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe ff67 	bl	8001938 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	@ 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e120      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	4b75      	ldr	r3, [pc, #468]	@ (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x31a>
 8002a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	4a6e      	ldr	r2, [pc, #440]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a98:	e02d      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x33c>
 8002aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	4a69      	ldr	r2, [pc, #420]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aae:	4b67      	ldr	r3, [pc, #412]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	4a66      	ldr	r2, [pc, #408]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aba:	e01c      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCC_OscConfig+0x35e>
 8002ac4:	4b61      	ldr	r3, [pc, #388]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac8:	4a60      	ldr	r2, [pc, #384]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
 8002ade:	4b5b      	ldr	r3, [pc, #364]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aea:	4b58      	ldr	r3, [pc, #352]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a57      	ldr	r2, [pc, #348]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d015      	beq.n	8002b2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7fe ff1b 	bl	8001938 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe ff17 	bl	8001938 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e0ce      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ee      	beq.n	8002b06 <HAL_RCC_OscConfig+0x386>
 8002b28:	e014      	b.n	8002b54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe ff05 	bl	8001938 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe ff01 	bl	8001938 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	4b40      	ldr	r3, [pc, #256]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ee      	bne.n	8002b32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80a4 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b70:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d06b      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d149      	bne.n	8002c18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a30      	ldr	r2, [pc, #192]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fed2 	bl	8001938 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe fece 	bl	8001938 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e087      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	019b      	lsls	r3, r3, #6
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002bde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002be2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fea2 	bl	8001938 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fe9e 	bl	8001938 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e057      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x478>
 8002c16:	e04f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fe88 	bl	8001938 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fe84 	bl	8001938 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e03d      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	4b03      	ldr	r3, [pc, #12]	@ (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4ac>
 8002c4a:	e035      	b.n	8002cb8 <HAL_RCC_OscConfig+0x538>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x544>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d028      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d121      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d111      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0d0      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d910      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b67      	ldr	r3, [pc, #412]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	4965      	ldr	r1, [pc, #404]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4b59      	ldr	r3, [pc, #356]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4b53      	ldr	r3, [pc, #332]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	494d      	ldr	r1, [pc, #308]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d040      	beq.n	8002dec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d115      	bne.n	8002daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b41      	ldr	r3, [pc, #260]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e073      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06b      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b39      	ldr	r3, [pc, #228]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4936      	ldr	r1, [pc, #216]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fe fdbc 	bl	8001938 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe fdb8 	bl	8001938 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e053      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2d      	ldr	r3, [pc, #180]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b27      	ldr	r3, [pc, #156]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d210      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b24      	ldr	r3, [pc, #144]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 020f 	bic.w	r2, r3, #15
 8002e02:	4922      	ldr	r1, [pc, #136]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4916      	ldr	r1, [pc, #88]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e46:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	490e      	ldr	r1, [pc, #56]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f821 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490a      	ldr	r1, [pc, #40]	@ (8002e94 <HAL_RCC_ClockConfig+0x1cc>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	@ (8002e98 <HAL_RCC_ClockConfig+0x1d0>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_ClockConfig+0x1d4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fc56 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	08008a04 	.word	0x08008a04
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b090      	sub	sp, #64	@ 0x40
 8002ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eac:	2300      	movs	r3, #0
 8002eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb8:	4b59      	ldr	r3, [pc, #356]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	f200 80a1 	bhi.w	800300c <HAL_RCC_GetSysClockFreq+0x16c>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed2:	e09b      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b53      	ldr	r3, [pc, #332]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ed8:	e09b      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eda:	4b53      	ldr	r3, [pc, #332]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ede:	e098      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ee8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002eea:	4b4d      	ldr	r3, [pc, #308]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d028      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	2200      	movs	r2, #0
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f0c:	fb03 f201 	mul.w	r2, r3, r1
 8002f10:	2300      	movs	r3, #0
 8002f12:	fb00 f303 	mul.w	r3, r0, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	4a43      	ldr	r2, [pc, #268]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f1a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f20:	460a      	mov	r2, r1
 8002f22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f26:	4413      	add	r3, r2
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	61fa      	str	r2, [r7, #28]
 8002f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f3a:	f7fd f969 	bl	8000210 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4613      	mov	r3, r2
 8002f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f46:	e053      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f48:	4b35      	ldr	r3, [pc, #212]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	2200      	movs	r2, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	617a      	str	r2, [r7, #20]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f5a:	f04f 0b00 	mov.w	fp, #0
 8002f5e:	4652      	mov	r2, sl
 8002f60:	465b      	mov	r3, fp
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f70:	0150      	lsls	r0, r2, #5
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	ebb2 080a 	subs.w	r8, r2, sl
 8002f7a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f92:	ebb2 0408 	subs.w	r4, r2, r8
 8002f96:	eb63 0509 	sbc.w	r5, r3, r9
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	00eb      	lsls	r3, r5, #3
 8002fa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa8:	00e2      	lsls	r2, r4, #3
 8002faa:	4614      	mov	r4, r2
 8002fac:	461d      	mov	r5, r3
 8002fae:	eb14 030a 	adds.w	r3, r4, sl
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	eb45 030b 	adc.w	r3, r5, fp
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	028b      	lsls	r3, r1, #10
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	028a      	lsls	r2, r1, #10
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	60fa      	str	r2, [r7, #12]
 8002fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe4:	f7fd f914 	bl	8000210 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003000:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x184>)
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003014:	4618      	mov	r0, r3
 8003016:	3740      	adds	r7, #64	@ 0x40
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	017d7840 	.word	0x017d7840

0800302c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	@ (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	08008a14 	.word	0x08008a14

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffdc 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0b5b      	lsrs	r3, r3, #13
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	@ (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	08008a14 	.word	0x08008a14

08003094 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	220f      	movs	r2, #15
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030a4:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0203 	and.w	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	08db      	lsrs	r3, r3, #3
 80030ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030d6:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <HAL_RCC_GetClockConfig+0x60>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40023c00 	.word	0x40023c00

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003120:	4b69      	ldr	r3, [pc, #420]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a68      	ldr	r2, [pc, #416]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003126:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	4b66      	ldr	r3, [pc, #408]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003134:	4964      	ldr	r1, [pc, #400]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d017      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003152:	4b5d      	ldr	r3, [pc, #372]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003158:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003160:	4959      	ldr	r1, [pc, #356]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800318e:	4b4e      	ldr	r3, [pc, #312]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003194:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	494a      	ldr	r1, [pc, #296]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ac:	d101      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 808b 	beq.w	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	4b3a      	ldr	r3, [pc, #232]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	4a39      	ldr	r2, [pc, #228]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e8:	4b37      	ldr	r3, [pc, #220]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031f4:	4b35      	ldr	r3, [pc, #212]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003200:	f7fe fb9a 	bl	8001938 <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fe fb96 	bl	8001938 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e357      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800321a:	4b2c      	ldr	r3, [pc, #176]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003226:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d035      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d02e      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003244:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800324c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003258:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	4a1a      	ldr	r2, [pc, #104]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003264:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003266:	4a18      	ldr	r2, [pc, #96]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800326c:	4b16      	ldr	r3, [pc, #88]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d114      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fb5e 	bl	8001938 <HAL_GetTick>
 800327c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327e:	e00a      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fe fb5a 	bl	8001938 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e319      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ee      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ae:	d111      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032bc:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032be:	400b      	ands	r3, r1
 80032c0:	4901      	ldr	r1, [pc, #4]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	0ffffcff 	.word	0x0ffffcff
 80032d4:	4baa      	ldr	r3, [pc, #680]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4aa9      	ldr	r2, [pc, #676]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	4ba7      	ldr	r3, [pc, #668]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	49a4      	ldr	r1, [pc, #656]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d010      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032fe:	4ba0      	ldr	r3, [pc, #640]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003304:	4a9e      	ldr	r2, [pc, #632]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800330a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800330e:	4b9c      	ldr	r3, [pc, #624]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003310:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	4999      	ldr	r1, [pc, #612]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332c:	4b94      	ldr	r3, [pc, #592]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800333a:	4991      	ldr	r1, [pc, #580]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800334e:	4b8c      	ldr	r3, [pc, #560]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003354:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800335c:	4988      	ldr	r1, [pc, #544]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003370:	4b83      	ldr	r3, [pc, #524]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337e:	4980      	ldr	r1, [pc, #512]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003392:	4b7b      	ldr	r3, [pc, #492]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003398:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a0:	4977      	ldr	r1, [pc, #476]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b4:	4b72      	ldr	r3, [pc, #456]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	496f      	ldr	r1, [pc, #444]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	f023 020c 	bic.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e4:	4966      	ldr	r1, [pc, #408]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f8:	4b61      	ldr	r3, [pc, #388]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003406:	495e      	ldr	r1, [pc, #376]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800341a:	4b59      	ldr	r3, [pc, #356]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003420:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003428:	4955      	ldr	r1, [pc, #340]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800343c:	4b50      	ldr	r3, [pc, #320]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	494d      	ldr	r1, [pc, #308]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800345e:	4b48      	ldr	r3, [pc, #288]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003464:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	4944      	ldr	r1, [pc, #272]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003480:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	493c      	ldr	r1, [pc, #240]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034a2:	4b37      	ldr	r3, [pc, #220]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	4933      	ldr	r1, [pc, #204]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034d2:	492b      	ldr	r1, [pc, #172]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d011      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034e6:	4b26      	ldr	r3, [pc, #152]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f4:	4922      	ldr	r1, [pc, #136]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003504:	d101      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003526:	4b16      	ldr	r3, [pc, #88]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003534:	4912      	ldr	r1, [pc, #72]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003548:	4b0d      	ldr	r3, [pc, #52]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003558:	4909      	ldr	r1, [pc, #36]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d006      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80d9 	beq.w	8003726 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003574:	4b02      	ldr	r3, [pc, #8]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a01      	ldr	r2, [pc, #4]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800357e:	e001      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003580:	40023800 	.word	0x40023800
 8003584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003586:	f7fe f9d7 	bl	8001938 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800358e:	f7fe f9d3 	bl	8001938 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	@ 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e194      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d021      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11d      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035c0:	4b64      	ldr	r3, [pc, #400]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035ce:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d4:	0e1b      	lsrs	r3, r3, #24
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	019a      	lsls	r2, r3, #6
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	431a      	orrs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	071b      	lsls	r3, r3, #28
 80035f4:	4957      	ldr	r1, [pc, #348]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800361a:	2b00      	cmp	r3, #0
 800361c:	d02e      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003626:	d129      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003628:	4b4a      	ldr	r3, [pc, #296]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363c:	0f1b      	lsrs	r3, r3, #28
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	019a      	lsls	r2, r3, #6
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	071b      	lsls	r3, r3, #28
 800365c:	493d      	ldr	r1, [pc, #244]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003664:	4b3b      	ldr	r3, [pc, #236]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800366a:	f023 021f 	bic.w	r2, r3, #31
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	3b01      	subs	r3, #1
 8003674:	4937      	ldr	r1, [pc, #220]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01d      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368e:	0e1b      	lsrs	r3, r3, #24
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003696:	4b2f      	ldr	r3, [pc, #188]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369c:	0f1b      	lsrs	r3, r3, #28
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	019a      	lsls	r2, r3, #6
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	431a      	orrs	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	431a      	orrs	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	071b      	lsls	r3, r3, #28
 80036bc:	4925      	ldr	r1, [pc, #148]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d011      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	019a      	lsls	r2, r3, #6
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	071b      	lsls	r3, r3, #28
 80036ec:	4919      	ldr	r1, [pc, #100]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036f4:	4b17      	ldr	r3, [pc, #92]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a16      	ldr	r2, [pc, #88]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003700:	f7fe f91a 	bl	8001938 <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003708:	f7fe f916 	bl	8001938 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	@ 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0d7      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800371a:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 80cd 	bne.w	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a08      	ldr	r2, [pc, #32]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373a:	f7fe f8fd 	bl	8001938 <HAL_GetTick>
 800373e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003742:	f7fe f8f9 	bl	8001938 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b64      	cmp	r3, #100	@ 0x64
 800374e:	d903      	bls.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0ba      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003754:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003758:	4b5e      	ldr	r3, [pc, #376]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003764:	d0ed      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02e      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d12a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800378e:	4b51      	ldr	r3, [pc, #324]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800379c:	4b4d      	ldr	r3, [pc, #308]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a2:	0f1b      	lsrs	r3, r3, #28
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	019a      	lsls	r2, r3, #6
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	061b      	lsls	r3, r3, #24
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	071b      	lsls	r3, r3, #28
 80037c2:	4944      	ldr	r1, [pc, #272]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037ca:	4b42      	ldr	r3, [pc, #264]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	493d      	ldr	r1, [pc, #244]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d022      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037f8:	d11d      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037fa:	4b36      	ldr	r3, [pc, #216]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	0e1b      	lsrs	r3, r3, #24
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003808:	4b32      	ldr	r3, [pc, #200]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	0f1b      	lsrs	r3, r3, #28
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	019a      	lsls	r2, r3, #6
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	431a      	orrs	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	071b      	lsls	r3, r3, #28
 800382e:	4929      	ldr	r1, [pc, #164]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d028      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003842:	4b24      	ldr	r3, [pc, #144]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	0e1b      	lsrs	r3, r3, #24
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003850:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	019a      	lsls	r2, r3, #6
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	431a      	orrs	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	071b      	lsls	r3, r3, #28
 8003876:	4917      	ldr	r1, [pc, #92]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800387e:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003884:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	4911      	ldr	r1, [pc, #68]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0e      	ldr	r2, [pc, #56]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe f84a 	bl	8001938 <HAL_GetTick>
 80038a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038a8:	f7fe f846 	bl	8001938 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	@ 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e007      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ba:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c6:	d1ef      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e049      	b.n	800397e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f841 	bl	8003986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 fa00 	bl	8003d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d001      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e054      	b.n	8003a5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a26      	ldr	r2, [pc, #152]	@ (8003a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039de:	d01d      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a22      	ldr	r2, [pc, #136]	@ (8003a70 <HAL_TIM_Base_Start_IT+0xd4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a21      	ldr	r2, [pc, #132]	@ (8003a74 <HAL_TIM_Base_Start_IT+0xd8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a78 <HAL_TIM_Base_Start_IT+0xdc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1e      	ldr	r2, [pc, #120]	@ (8003a7c <HAL_TIM_Base_Start_IT+0xe0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a80 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1b      	ldr	r2, [pc, #108]	@ (8003a84 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d115      	bne.n	8003a48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <HAL_TIM_Base_Start_IT+0xec>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d015      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0xbe>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a34:	d011      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	e008      	b.n	8003a5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e000      	b.n	8003a5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40010400 	.word	0x40010400
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40001800 	.word	0x40001800
 8003a88:	00010007 	.word	0x00010007

08003a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0202 	mvn.w	r2, #2
 8003ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f905 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8f7 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f908 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0204 	mvn.w	r2, #4
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8db 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8cd 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8de 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0208 	mvn.w	r2, #8
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8b1 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8a3 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8b4 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0210 	mvn.w	r2, #16
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f887 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f879 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f88a 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0201 	mvn.w	r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fc4a 	bl	80014a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b80      	cmp	r3, #128	@ 0x80
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c28:	2b80      	cmp	r3, #128	@ 0x80
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f91a 	bl	8003e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4a:	d10e      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c56:	2b80      	cmp	r3, #128	@ 0x80
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f90d 	bl	8003e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f838 	bl	8003d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0220 	mvn.w	r2, #32
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8cd 	bl	8003e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a40      	ldr	r2, [pc, #256]	@ (8003e30 <TIM_Base_SetConfig+0x114>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3a:	d00f      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003e34 <TIM_Base_SetConfig+0x118>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3c      	ldr	r2, [pc, #240]	@ (8003e38 <TIM_Base_SetConfig+0x11c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e3c <TIM_Base_SetConfig+0x120>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3a      	ldr	r2, [pc, #232]	@ (8003e40 <TIM_Base_SetConfig+0x124>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2f      	ldr	r2, [pc, #188]	@ (8003e30 <TIM_Base_SetConfig+0x114>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d02b      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7c:	d027      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	@ (8003e34 <TIM_Base_SetConfig+0x118>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d023      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2b      	ldr	r2, [pc, #172]	@ (8003e38 <TIM_Base_SetConfig+0x11c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01f      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2a      	ldr	r2, [pc, #168]	@ (8003e3c <TIM_Base_SetConfig+0x120>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01b      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a29      	ldr	r2, [pc, #164]	@ (8003e40 <TIM_Base_SetConfig+0x124>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d017      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a28      	ldr	r2, [pc, #160]	@ (8003e44 <TIM_Base_SetConfig+0x128>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a27      	ldr	r2, [pc, #156]	@ (8003e48 <TIM_Base_SetConfig+0x12c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00f      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a26      	ldr	r2, [pc, #152]	@ (8003e4c <TIM_Base_SetConfig+0x130>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a25      	ldr	r2, [pc, #148]	@ (8003e50 <TIM_Base_SetConfig+0x134>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a24      	ldr	r2, [pc, #144]	@ (8003e54 <TIM_Base_SetConfig+0x138>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a23      	ldr	r2, [pc, #140]	@ (8003e58 <TIM_Base_SetConfig+0x13c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <TIM_Base_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_Base_SetConfig+0xf8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e40 <TIM_Base_SetConfig+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d103      	bne.n	8003e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	615a      	str	r2, [r3, #20]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000c00 	.word	0x40000c00
 8003e40:	40010400 	.word	0x40010400
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40014400 	.word	0x40014400
 8003e4c:	40014800 	.word	0x40014800
 8003e50:	40001800 	.word	0x40001800
 8003e54:	40001c00 	.word	0x40001c00
 8003e58:	40002000 	.word	0x40002000

08003e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e040      	b.n	8003f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fbac 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	@ 0x24
 8003ec4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fbe6 	bl	80046a8 <UART_SetConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fe3e 	bl	8004b70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fec5 	bl	8004cb4 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	@ 0x28
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d171      	bne.n	8004030 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Transmit+0x24>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e06a      	b.n	8004032 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2221      	movs	r2, #33	@ 0x21
 8003f68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6a:	f7fd fce5 	bl	8001938 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f88:	d108      	bne.n	8003f9c <HAL_UART_Transmit+0x68>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e003      	b.n	8003fa4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fa4:	e02c      	b.n	8004000 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2180      	movs	r1, #128	@ 0x80
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 feb6 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e038      	b.n	8004032 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	3302      	adds	r3, #2
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	e007      	b.n	8003fee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	3301      	adds	r3, #1
 8003fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1cc      	bne.n	8003fa6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2200      	movs	r2, #0
 8004014:	2140      	movs	r1, #64	@ 0x40
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fe83 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e005      	b.n	8004032 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b08a      	sub	sp, #40	@ 0x28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	4613      	mov	r3, r2
 8004046:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800404e:	2b20      	cmp	r3, #32
 8004050:	d132      	bne.n	80040b8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_UART_Receive_IT+0x24>
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e02b      	b.n	80040ba <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fefe 	bl	8004eb0 <UART_Start_Receive_IT>
 80040b4:	4603      	mov	r3, r0
 80040b6:	e000      	b.n	80040ba <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3728      	adds	r7, #40	@ 0x28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0ba      	sub	sp, #232	@ 0xe8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040f2:	4013      	ands	r3, r2
 80040f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d115      	bne.n	800412c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00f      	beq.n	800412c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8297 	beq.w	8004650 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
      }
      return;
 800412a:	e291      	b.n	8004650 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800412c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8117 	beq.w	8004364 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004146:	4b85      	ldr	r3, [pc, #532]	@ (800435c <HAL_UART_IRQHandler+0x298>)
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 810a 	beq.w	8004364 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d011      	beq.n	8004180 <HAL_UART_IRQHandler+0xbc>
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d011      	beq.n	80041b0 <HAL_UART_IRQHandler+0xec>
 800418c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00b      	beq.n	80041b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2202      	movs	r2, #2
 800419e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041a6:	f043 0204 	orr.w	r2, r3, #4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d011      	beq.n	80041e0 <HAL_UART_IRQHandler+0x11c>
 80041bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2204      	movs	r2, #4
 80041ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d017      	beq.n	800421c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2208      	movs	r2, #8
 800420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004212:	f043 0208 	orr.w	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <HAL_UART_IRQHandler+0x18a>
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00c      	beq.n	800424e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800423c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 81fd 	beq.w	8004654 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d005      	beq.n	80042a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04f      	beq.n	8004346 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fec8 	bl	800503c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d141      	bne.n	800433e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1d9      	bne.n	80042ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430a:	2b00      	cmp	r3, #0
 800430c:	d013      	beq.n	8004336 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004312:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <HAL_UART_IRQHandler+0x29c>)
 8004314:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd ffe8 	bl	80022f0 <HAL_DMA_Abort_IT>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004330:	4610      	mov	r0, r2
 8004332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	e00f      	b.n	8004356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9a0 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e00b      	b.n	8004356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f99c 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e007      	b.n	8004356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f998 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004354:	e17e      	b.n	8004654 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004356:	bf00      	nop
    return;
 8004358:	e17c      	b.n	8004654 <HAL_UART_IRQHandler+0x590>
 800435a:	bf00      	nop
 800435c:	04000120 	.word	0x04000120
 8004360:	08005105 	.word	0x08005105

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004368:	2b01      	cmp	r3, #1
 800436a:	f040 814c 	bne.w	8004606 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8145 	beq.w	8004606 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 813e 	beq.w	8004606 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2210      	movs	r2, #16
 8004390:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	2b40      	cmp	r3, #64	@ 0x40
 800439e:	f040 80b6 	bne.w	800450e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8150 	beq.w	8004658 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043c2:	429a      	cmp	r2, r3
 80043c4:	f080 8148 	bcs.w	8004658 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043dc:	f000 8086 	beq.w	80044ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800440a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800440e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1da      	bne.n	80043e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800443a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800444e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e1      	bne.n	800442a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800447c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800448a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800448c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e3      	bne.n	8004466 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044bc:	f023 0310 	bic.w	r3, r3, #16
 80044c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e4      	bne.n	80044ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fe92 	bl	8002210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8c2 	bl	8004690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800450c:	e0a4      	b.n	8004658 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800451a:	b29b      	uxth	r3, r3
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8096 	beq.w	800465c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8091 	beq.w	800465c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800454a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800454e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800455c:	647b      	str	r3, [r7, #68]	@ 0x44
 800455e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800456a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e4      	bne.n	800453a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	623b      	str	r3, [r7, #32]
   return(result);
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004594:	633a      	str	r2, [r7, #48]	@ 0x30
 8004596:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800459a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e3      	bne.n	8004570 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f023 0310 	bic.w	r3, r3, #16
 80045d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	617b      	str	r3, [r7, #20]
   return(result);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e4      	bne.n	80045bc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f846 	bl	8004690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004604:	e02a      	b.n	800465c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00e      	beq.n	8004630 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01c      	beq.n	8004660 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
    }
    return;
 800462e:	e017      	b.n	8004660 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <HAL_UART_IRQHandler+0x59e>
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fd71 	bl	8005130 <UART_EndTransmit_IT>
    return;
 800464e:	e008      	b.n	8004662 <HAL_UART_IRQHandler+0x59e>
      return;
 8004650:	bf00      	nop
 8004652:	e006      	b.n	8004662 <HAL_UART_IRQHandler+0x59e>
    return;
 8004654:	bf00      	nop
 8004656:	e004      	b.n	8004662 <HAL_UART_IRQHandler+0x59e>
      return;
 8004658:	bf00      	nop
 800465a:	e002      	b.n	8004662 <HAL_UART_IRQHandler+0x59e>
      return;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <HAL_UART_IRQHandler+0x59e>
    return;
 8004660:	bf00      	nop
  }

}
 8004662:	37e8      	adds	r7, #232	@ 0xe8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4ba6      	ldr	r3, [pc, #664]	@ (800496c <UART_SetConfig+0x2c4>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	6979      	ldr	r1, [r7, #20]
 80046dc:	430b      	orrs	r3, r1
 80046de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a94      	ldr	r2, [pc, #592]	@ (8004970 <UART_SetConfig+0x2c8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d120      	bne.n	8004766 <UART_SetConfig+0xbe>
 8004724:	4b93      	ldr	r3, [pc, #588]	@ (8004974 <UART_SetConfig+0x2cc>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b03      	cmp	r3, #3
 8004730:	d816      	bhi.n	8004760 <UART_SetConfig+0xb8>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <UART_SetConfig+0x90>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	08004749 	.word	0x08004749
 800473c:	08004755 	.word	0x08004755
 8004740:	0800474f 	.word	0x0800474f
 8004744:	0800475b 	.word	0x0800475b
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e150      	b.n	80049f0 <UART_SetConfig+0x348>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e14d      	b.n	80049f0 <UART_SetConfig+0x348>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e14a      	b.n	80049f0 <UART_SetConfig+0x348>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e147      	b.n	80049f0 <UART_SetConfig+0x348>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e144      	b.n	80049f0 <UART_SetConfig+0x348>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a83      	ldr	r2, [pc, #524]	@ (8004978 <UART_SetConfig+0x2d0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d132      	bne.n	80047d6 <UART_SetConfig+0x12e>
 8004770:	4b80      	ldr	r3, [pc, #512]	@ (8004974 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d828      	bhi.n	80047d0 <UART_SetConfig+0x128>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0xdc>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080047d1 	.word	0x080047d1
 800478c:	080047d1 	.word	0x080047d1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047d1 	.word	0x080047d1
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	080047d1 	.word	0x080047d1
 80047a4:	080047bf 	.word	0x080047bf
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047d1 	.word	0x080047d1
 80047b4:	080047cb 	.word	0x080047cb
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e118      	b.n	80049f0 <UART_SetConfig+0x348>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e115      	b.n	80049f0 <UART_SetConfig+0x348>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e112      	b.n	80049f0 <UART_SetConfig+0x348>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e10f      	b.n	80049f0 <UART_SetConfig+0x348>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e10c      	b.n	80049f0 <UART_SetConfig+0x348>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a68      	ldr	r2, [pc, #416]	@ (800497c <UART_SetConfig+0x2d4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d120      	bne.n	8004822 <UART_SetConfig+0x17a>
 80047e0:	4b64      	ldr	r3, [pc, #400]	@ (8004974 <UART_SetConfig+0x2cc>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047ea:	2b30      	cmp	r3, #48	@ 0x30
 80047ec:	d013      	beq.n	8004816 <UART_SetConfig+0x16e>
 80047ee:	2b30      	cmp	r3, #48	@ 0x30
 80047f0:	d814      	bhi.n	800481c <UART_SetConfig+0x174>
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d009      	beq.n	800480a <UART_SetConfig+0x162>
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d810      	bhi.n	800481c <UART_SetConfig+0x174>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <UART_SetConfig+0x15c>
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d006      	beq.n	8004810 <UART_SetConfig+0x168>
 8004802:	e00b      	b.n	800481c <UART_SetConfig+0x174>
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0f2      	b.n	80049f0 <UART_SetConfig+0x348>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0ef      	b.n	80049f0 <UART_SetConfig+0x348>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0ec      	b.n	80049f0 <UART_SetConfig+0x348>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e0e9      	b.n	80049f0 <UART_SetConfig+0x348>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e0e6      	b.n	80049f0 <UART_SetConfig+0x348>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a56      	ldr	r2, [pc, #344]	@ (8004980 <UART_SetConfig+0x2d8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d120      	bne.n	800486e <UART_SetConfig+0x1c6>
 800482c:	4b51      	ldr	r3, [pc, #324]	@ (8004974 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004836:	2bc0      	cmp	r3, #192	@ 0xc0
 8004838:	d013      	beq.n	8004862 <UART_SetConfig+0x1ba>
 800483a:	2bc0      	cmp	r3, #192	@ 0xc0
 800483c:	d814      	bhi.n	8004868 <UART_SetConfig+0x1c0>
 800483e:	2b80      	cmp	r3, #128	@ 0x80
 8004840:	d009      	beq.n	8004856 <UART_SetConfig+0x1ae>
 8004842:	2b80      	cmp	r3, #128	@ 0x80
 8004844:	d810      	bhi.n	8004868 <UART_SetConfig+0x1c0>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <UART_SetConfig+0x1a8>
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d006      	beq.n	800485c <UART_SetConfig+0x1b4>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x1c0>
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0cc      	b.n	80049f0 <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0c9      	b.n	80049f0 <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0c6      	b.n	80049f0 <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0c3      	b.n	80049f0 <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e0c0      	b.n	80049f0 <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a44      	ldr	r2, [pc, #272]	@ (8004984 <UART_SetConfig+0x2dc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d125      	bne.n	80048c4 <UART_SetConfig+0x21c>
 8004878:	4b3e      	ldr	r3, [pc, #248]	@ (8004974 <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004886:	d017      	beq.n	80048b8 <UART_SetConfig+0x210>
 8004888:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800488c:	d817      	bhi.n	80048be <UART_SetConfig+0x216>
 800488e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004892:	d00b      	beq.n	80048ac <UART_SetConfig+0x204>
 8004894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004898:	d811      	bhi.n	80048be <UART_SetConfig+0x216>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <UART_SetConfig+0x1fe>
 800489e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a2:	d006      	beq.n	80048b2 <UART_SetConfig+0x20a>
 80048a4:	e00b      	b.n	80048be <UART_SetConfig+0x216>
 80048a6:	2300      	movs	r3, #0
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e0a1      	b.n	80049f0 <UART_SetConfig+0x348>
 80048ac:	2302      	movs	r3, #2
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e09e      	b.n	80049f0 <UART_SetConfig+0x348>
 80048b2:	2304      	movs	r3, #4
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e09b      	b.n	80049f0 <UART_SetConfig+0x348>
 80048b8:	2308      	movs	r3, #8
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e098      	b.n	80049f0 <UART_SetConfig+0x348>
 80048be:	2310      	movs	r3, #16
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e095      	b.n	80049f0 <UART_SetConfig+0x348>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004988 <UART_SetConfig+0x2e0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d125      	bne.n	800491a <UART_SetConfig+0x272>
 80048ce:	4b29      	ldr	r3, [pc, #164]	@ (8004974 <UART_SetConfig+0x2cc>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048dc:	d017      	beq.n	800490e <UART_SetConfig+0x266>
 80048de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e2:	d817      	bhi.n	8004914 <UART_SetConfig+0x26c>
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e8:	d00b      	beq.n	8004902 <UART_SetConfig+0x25a>
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ee:	d811      	bhi.n	8004914 <UART_SetConfig+0x26c>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <UART_SetConfig+0x254>
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f8:	d006      	beq.n	8004908 <UART_SetConfig+0x260>
 80048fa:	e00b      	b.n	8004914 <UART_SetConfig+0x26c>
 80048fc:	2301      	movs	r3, #1
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e076      	b.n	80049f0 <UART_SetConfig+0x348>
 8004902:	2302      	movs	r3, #2
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e073      	b.n	80049f0 <UART_SetConfig+0x348>
 8004908:	2304      	movs	r3, #4
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e070      	b.n	80049f0 <UART_SetConfig+0x348>
 800490e:	2308      	movs	r3, #8
 8004910:	77fb      	strb	r3, [r7, #31]
 8004912:	e06d      	b.n	80049f0 <UART_SetConfig+0x348>
 8004914:	2310      	movs	r3, #16
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e06a      	b.n	80049f0 <UART_SetConfig+0x348>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1b      	ldr	r2, [pc, #108]	@ (800498c <UART_SetConfig+0x2e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d138      	bne.n	8004996 <UART_SetConfig+0x2ee>
 8004924:	4b13      	ldr	r3, [pc, #76]	@ (8004974 <UART_SetConfig+0x2cc>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800492e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004932:	d017      	beq.n	8004964 <UART_SetConfig+0x2bc>
 8004934:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004938:	d82a      	bhi.n	8004990 <UART_SetConfig+0x2e8>
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493e:	d00b      	beq.n	8004958 <UART_SetConfig+0x2b0>
 8004940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004944:	d824      	bhi.n	8004990 <UART_SetConfig+0x2e8>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <UART_SetConfig+0x2aa>
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494e:	d006      	beq.n	800495e <UART_SetConfig+0x2b6>
 8004950:	e01e      	b.n	8004990 <UART_SetConfig+0x2e8>
 8004952:	2300      	movs	r3, #0
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e04b      	b.n	80049f0 <UART_SetConfig+0x348>
 8004958:	2302      	movs	r3, #2
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e048      	b.n	80049f0 <UART_SetConfig+0x348>
 800495e:	2304      	movs	r3, #4
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e045      	b.n	80049f0 <UART_SetConfig+0x348>
 8004964:	2308      	movs	r3, #8
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e042      	b.n	80049f0 <UART_SetConfig+0x348>
 800496a:	bf00      	nop
 800496c:	efff69f3 	.word	0xefff69f3
 8004970:	40011000 	.word	0x40011000
 8004974:	40023800 	.word	0x40023800
 8004978:	40004400 	.word	0x40004400
 800497c:	40004800 	.word	0x40004800
 8004980:	40004c00 	.word	0x40004c00
 8004984:	40005000 	.word	0x40005000
 8004988:	40011400 	.word	0x40011400
 800498c:	40007800 	.word	0x40007800
 8004990:	2310      	movs	r3, #16
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e02c      	b.n	80049f0 <UART_SetConfig+0x348>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a72      	ldr	r2, [pc, #456]	@ (8004b64 <UART_SetConfig+0x4bc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d125      	bne.n	80049ec <UART_SetConfig+0x344>
 80049a0:	4b71      	ldr	r3, [pc, #452]	@ (8004b68 <UART_SetConfig+0x4c0>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049ae:	d017      	beq.n	80049e0 <UART_SetConfig+0x338>
 80049b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049b4:	d817      	bhi.n	80049e6 <UART_SetConfig+0x33e>
 80049b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ba:	d00b      	beq.n	80049d4 <UART_SetConfig+0x32c>
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c0:	d811      	bhi.n	80049e6 <UART_SetConfig+0x33e>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <UART_SetConfig+0x326>
 80049c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049ca:	d006      	beq.n	80049da <UART_SetConfig+0x332>
 80049cc:	e00b      	b.n	80049e6 <UART_SetConfig+0x33e>
 80049ce:	2300      	movs	r3, #0
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e00d      	b.n	80049f0 <UART_SetConfig+0x348>
 80049d4:	2302      	movs	r3, #2
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e00a      	b.n	80049f0 <UART_SetConfig+0x348>
 80049da:	2304      	movs	r3, #4
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e007      	b.n	80049f0 <UART_SetConfig+0x348>
 80049e0:	2308      	movs	r3, #8
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e004      	b.n	80049f0 <UART_SetConfig+0x348>
 80049e6:	2310      	movs	r3, #16
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e001      	b.n	80049f0 <UART_SetConfig+0x348>
 80049ec:	2310      	movs	r3, #16
 80049ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f8:	d15b      	bne.n	8004ab2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d828      	bhi.n	8004a52 <UART_SetConfig+0x3aa>
 8004a00:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <UART_SetConfig+0x360>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a53 	.word	0x08004a53
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fe fb0a 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004a30:	61b8      	str	r0, [r7, #24]
        break;
 8004a32:	e013      	b.n	8004a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fe fb1a 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8004a38:	61b8      	str	r0, [r7, #24]
        break;
 8004a3a:	e00f      	b.n	8004a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b6c <UART_SetConfig+0x4c4>)
 8004a3e:	61bb      	str	r3, [r7, #24]
        break;
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fe fa2d 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8004a46:	61b8      	str	r0, [r7, #24]
        break;
 8004a48:	e008      	b.n	8004a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a4e:	61bb      	str	r3, [r7, #24]
        break;
 8004a50:	e004      	b.n	8004a5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77bb      	strb	r3, [r7, #30]
        break;
 8004a5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d074      	beq.n	8004b4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	005a      	lsls	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	441a      	add	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d916      	bls.n	8004aac <UART_SetConfig+0x404>
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a84:	d212      	bcs.n	8004aac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f023 030f 	bic.w	r3, r3, #15
 8004a8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	89fa      	ldrh	r2, [r7, #14]
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	e04f      	b.n	8004b4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	77bb      	strb	r3, [r7, #30]
 8004ab0:	e04c      	b.n	8004b4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab2:	7ffb      	ldrb	r3, [r7, #31]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d828      	bhi.n	8004b0a <UART_SetConfig+0x462>
 8004ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <UART_SetConfig+0x418>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004b0b 	.word	0x08004b0b
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fe faae 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	61b8      	str	r0, [r7, #24]
        break;
 8004aea:	e013      	b.n	8004b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe fabe 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8004af0:	61b8      	str	r0, [r7, #24]
        break;
 8004af2:	e00f      	b.n	8004b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <UART_SetConfig+0x4c4>)
 8004af6:	61bb      	str	r3, [r7, #24]
        break;
 8004af8:	e00c      	b.n	8004b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe f9d1 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8004afe:	61b8      	str	r0, [r7, #24]
        break;
 8004b00:	e008      	b.n	8004b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b06:	61bb      	str	r3, [r7, #24]
        break;
 8004b08:	e004      	b.n	8004b14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	77bb      	strb	r3, [r7, #30]
        break;
 8004b12:	bf00      	nop
    }

    if (pclk != 0U)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d018      	beq.n	8004b4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	085a      	lsrs	r2, r3, #1
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	441a      	add	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b0f      	cmp	r3, #15
 8004b32:	d909      	bls.n	8004b48 <UART_SetConfig+0x4a0>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3a:	d205      	bcs.n	8004b48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e001      	b.n	8004b4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b58:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40007c00 	.word	0x40007c00
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	00f42400 	.word	0x00f42400

08004b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c6e:	d10a      	bne.n	8004c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cc4:	f7fc fe38 	bl	8001938 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d10e      	bne.n	8004cf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f81b 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e011      	b.n	8004d1a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b09c      	sub	sp, #112	@ 0x70
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d32:	e0a7      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	f000 80a3 	beq.w	8004e84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7fc fdfb 	bl	8001938 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d13f      	bne.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d64:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d74:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e6      	bne.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004da6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004da8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e068      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d050      	beq.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df0:	d148      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e6      	bne.n	8004dfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e4e:	623a      	str	r2, [r7, #32]
 8004e50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	69f9      	ldr	r1, [r7, #28]
 8004e54:	6a3a      	ldr	r2, [r7, #32]
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e5      	bne.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e010      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	f43f af48 	beq.w	8004d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3770      	adds	r7, #112	@ 0x70
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b097      	sub	sp, #92	@ 0x5c
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	88fa      	ldrh	r2, [r7, #6]
 8004ed0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee2:	d10e      	bne.n	8004f02 <UART_Start_Receive_IT+0x52>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <UART_Start_Receive_IT+0x48>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004ef2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ef6:	e02d      	b.n	8004f54 <UART_Start_Receive_IT+0xa4>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	22ff      	movs	r2, #255	@ 0xff
 8004efc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f00:	e028      	b.n	8004f54 <UART_Start_Receive_IT+0xa4>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <UART_Start_Receive_IT+0x76>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <UART_Start_Receive_IT+0x6c>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	22ff      	movs	r2, #255	@ 0xff
 8004f16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f1a:	e01b      	b.n	8004f54 <UART_Start_Receive_IT+0xa4>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	227f      	movs	r2, #127	@ 0x7f
 8004f20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f24:	e016      	b.n	8004f54 <UART_Start_Receive_IT+0xa4>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f2e:	d10d      	bne.n	8004f4c <UART_Start_Receive_IT+0x9c>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <UART_Start_Receive_IT+0x92>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	227f      	movs	r2, #127	@ 0x7f
 8004f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f40:	e008      	b.n	8004f54 <UART_Start_Receive_IT+0xa4>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	223f      	movs	r2, #63	@ 0x3f
 8004f46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f4a:	e003      	b.n	8004f54 <UART_Start_Receive_IT+0xa4>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2222      	movs	r2, #34	@ 0x22
 8004f60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f84:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f86:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa0:	d107      	bne.n	8004fb2 <UART_Start_Receive_IT+0x102>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a21      	ldr	r2, [pc, #132]	@ (8005034 <UART_Start_Receive_IT+0x184>)
 8004fae:	669a      	str	r2, [r3, #104]	@ 0x68
 8004fb0:	e002      	b.n	8004fb8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a20      	ldr	r2, [pc, #128]	@ (8005038 <UART_Start_Receive_IT+0x188>)
 8004fb6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d019      	beq.n	8004ff4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e6      	bne.n	8004fc0 <UART_Start_Receive_IT+0x110>
 8004ff2:	e018      	b.n	8005026 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	613b      	str	r3, [r7, #16]
   return(result);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f043 0320 	orr.w	r3, r3, #32
 8005008:	653b      	str	r3, [r7, #80]	@ 0x50
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005012:	623b      	str	r3, [r7, #32]
 8005014:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	69f9      	ldr	r1, [r7, #28]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e6      	bne.n	8004ff4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	375c      	adds	r7, #92	@ 0x5c
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	080052eb 	.word	0x080052eb
 8005038:	08005185 	.word	0x08005185

0800503c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b095      	sub	sp, #84	@ 0x54
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005062:	643b      	str	r3, [r7, #64]	@ 0x40
 8005064:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005068:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	61fb      	str	r3, [r7, #28]
   return(result);
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3308      	adds	r3, #8
 8005094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800509c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d118      	bne.n	80050e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f023 0310 	bic.w	r3, r3, #16
 80050c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6979      	ldr	r1, [r7, #20]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	613b      	str	r3, [r7, #16]
   return(result);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050f8:	bf00      	nop
 80050fa:	3754      	adds	r7, #84	@ 0x54
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff faaa 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	60bb      	str	r3, [r7, #8]
   return(result);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6979      	ldr	r1, [r7, #20]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	613b      	str	r3, [r7, #16]
   return(result);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e6      	bne.n	8005138 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fa76 	bl	8004668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800517c:	bf00      	nop
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b096      	sub	sp, #88	@ 0x58
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005192:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800519c:	2b22      	cmp	r3, #34	@ 0x22
 800519e:	f040 8098 	bne.w	80052d2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80051b0:	b2d9      	uxtb	r1, r3
 80051b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	400a      	ands	r2, r1
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d17b      	bne.n	80052e2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005208:	647b      	str	r3, [r7, #68]	@ 0x44
 800520a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800520e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e6      	bne.n	80051ea <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	623b      	str	r3, [r7, #32]
   return(result);
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3308      	adds	r3, #8
 800523a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800523c:	633a      	str	r2, [r7, #48]	@ 0x30
 800523e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005268:	2b01      	cmp	r3, #1
 800526a:	d12e      	bne.n	80052ca <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0310 	bic.w	r3, r3, #16
 8005286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	69b9      	ldr	r1, [r7, #24]
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	617b      	str	r3, [r7, #20]
   return(result);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e6      	bne.n	8005272 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d103      	bne.n	80052ba <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2210      	movs	r2, #16
 80052b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff f9e4 	bl	8004690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052c8:	e00b      	b.n	80052e2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb fa9a 	bl	8000804 <HAL_UART_RxCpltCallback>
}
 80052d0:	e007      	b.n	80052e2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0208 	orr.w	r2, r2, #8
 80052e0:	619a      	str	r2, [r3, #24]
}
 80052e2:	bf00      	nop
 80052e4:	3758      	adds	r7, #88	@ 0x58
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b096      	sub	sp, #88	@ 0x58
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005302:	2b22      	cmp	r3, #34	@ 0x22
 8005304:	f040 8098 	bne.w	8005438 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005318:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800531c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005320:	4013      	ands	r3, r2
 8005322:	b29a      	uxth	r2, r3
 8005324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005326:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d17b      	bne.n	8005448 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005370:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	61fb      	str	r3, [r7, #28]
   return(result);
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e5      	bne.n	8005382 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d12e      	bne.n	8005430 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6979      	ldr	r1, [r7, #20]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b10      	cmp	r3, #16
 8005416:	d103      	bne.n	8005420 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2210      	movs	r2, #16
 800541e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff f931 	bl	8004690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800542e:	e00b      	b.n	8005448 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fb f9e7 	bl	8000804 <HAL_UART_RxCpltCallback>
}
 8005436:	e007      	b.n	8005448 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0208 	orr.w	r2, r2, #8
 8005446:	619a      	str	r2, [r3, #24]
}
 8005448:	bf00      	nop
 800544a:	3758      	adds	r7, #88	@ 0x58
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005466:	f3ef 8305 	mrs	r3, IPSR
 800546a:	60bb      	str	r3, [r7, #8]
  return(result);
 800546c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005472:	f3ef 8310 	mrs	r3, PRIMASK
 8005476:	607b      	str	r3, [r7, #4]
  return(result);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800547e:	f3ef 8311 	mrs	r3, BASEPRI
 8005482:	603b      	str	r3, [r7, #0]
  return(result);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <osKernelInitialize+0x3a>
 800548a:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <osKernelInitialize+0x64>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d103      	bne.n	800549a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005492:	f06f 0305 	mvn.w	r3, #5
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e00c      	b.n	80054b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800549a:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <osKernelInitialize+0x64>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054a2:	4b08      	ldr	r3, [pc, #32]	@ (80054c4 <osKernelInitialize+0x64>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e002      	b.n	80054b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295
 80054b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054b4:	68fb      	ldr	r3, [r7, #12]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000308 	.word	0x20000308

080054c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ce:	f3ef 8305 	mrs	r3, IPSR
 80054d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054da:	f3ef 8310 	mrs	r3, PRIMASK
 80054de:	607b      	str	r3, [r7, #4]
  return(result);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054e6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ea:	603b      	str	r3, [r7, #0]
  return(result);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <osKernelStart+0x3a>
 80054f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005530 <osKernelStart+0x68>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d103      	bne.n	8005502 <osKernelStart+0x3a>
    stat = osErrorISR;
 80054fa:	f06f 0305 	mvn.w	r3, #5
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e010      	b.n	8005524 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005502:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <osKernelStart+0x68>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d109      	bne.n	800551e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800550a:	f7ff ffa1 	bl	8005450 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800550e:	4b08      	ldr	r3, [pc, #32]	@ (8005530 <osKernelStart+0x68>)
 8005510:	2202      	movs	r2, #2
 8005512:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005514:	f001 faa6 	bl	8006a64 <vTaskStartScheduler>
      stat = osOK;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e002      	b.n	8005524 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800551e:	f04f 33ff 	mov.w	r3, #4294967295
 8005522:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005524:	68fb      	ldr	r3, [r7, #12]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000308 	.word	0x20000308

08005534 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b090      	sub	sp, #64	@ 0x40
 8005538:	af04      	add	r7, sp, #16
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005544:	f3ef 8305 	mrs	r3, IPSR
 8005548:	61fb      	str	r3, [r7, #28]
  return(result);
 800554a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 808f 	bne.w	8005670 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005552:	f3ef 8310 	mrs	r3, PRIMASK
 8005556:	61bb      	str	r3, [r7, #24]
  return(result);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d105      	bne.n	800556a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800555e:	f3ef 8311 	mrs	r3, BASEPRI
 8005562:	617b      	str	r3, [r7, #20]
  return(result);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <osThreadNew+0x3e>
 800556a:	4b44      	ldr	r3, [pc, #272]	@ (800567c <osThreadNew+0x148>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d07e      	beq.n	8005670 <osThreadNew+0x13c>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d07b      	beq.n	8005670 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005578:	2380      	movs	r3, #128	@ 0x80
 800557a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800557c:	2318      	movs	r3, #24
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d045      	beq.n	800561c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <osThreadNew+0x6a>
        name = attr->name;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <osThreadNew+0x90>
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	2b38      	cmp	r3, #56	@ 0x38
 80055b6:	d805      	bhi.n	80055c4 <osThreadNew+0x90>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <osThreadNew+0x94>
        return (NULL);
 80055c4:	2300      	movs	r3, #0
 80055c6:	e054      	b.n	8005672 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00e      	beq.n	80055fe <osThreadNew+0xca>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2ba7      	cmp	r3, #167	@ 0xa7
 80055e6:	d90a      	bls.n	80055fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <osThreadNew+0xca>
        mem = 1;
 80055f8:	2301      	movs	r3, #1
 80055fa:	623b      	str	r3, [r7, #32]
 80055fc:	e010      	b.n	8005620 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10c      	bne.n	8005620 <osThreadNew+0xec>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <osThreadNew+0xec>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <osThreadNew+0xec>
          mem = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	e001      	b.n	8005620 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d110      	bne.n	8005648 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800562e:	9202      	str	r2, [sp, #8]
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f001 f813 	bl	8006668 <xTaskCreateStatic>
 8005642:	4603      	mov	r3, r0
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e013      	b.n	8005670 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d110      	bne.n	8005670 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	b29a      	uxth	r2, r3
 8005652:	f107 0310 	add.w	r3, r7, #16
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f001 f867 	bl	8006734 <xTaskCreate>
 8005666:	4603      	mov	r3, r0
 8005668:	2b01      	cmp	r3, #1
 800566a:	d001      	beq.n	8005670 <osThreadNew+0x13c>
          hTask = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005670:	693b      	ldr	r3, [r7, #16]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3730      	adds	r7, #48	@ 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000308 	.word	0x20000308

08005680 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005688:	f3ef 8305 	mrs	r3, IPSR
 800568c:	613b      	str	r3, [r7, #16]
  return(result);
 800568e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10f      	bne.n	80056b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005694:	f3ef 8310 	mrs	r3, PRIMASK
 8005698:	60fb      	str	r3, [r7, #12]
  return(result);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056a0:	f3ef 8311 	mrs	r3, BASEPRI
 80056a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <osDelay+0x3c>
 80056ac:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <osDelay+0x58>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d103      	bne.n	80056bc <osDelay+0x3c>
    stat = osErrorISR;
 80056b4:	f06f 0305 	mvn.w	r3, #5
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e007      	b.n	80056cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 f994 	bl	80069f4 <vTaskDelay>
    }
  }

  return (stat);
 80056cc:	697b      	ldr	r3, [r7, #20]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000308 	.word	0x20000308

080056dc <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f002 fb29 	bl	8007d3c <pvTimerGetTimerID>
 80056ea:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <TimerCallback+0x22>
    callb->func (callb->arg);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	6852      	ldr	r2, [r2, #4]
 80056fa:	4610      	mov	r0, r2
 80056fc:	4798      	blx	r3
  }
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005708:	b580      	push	{r7, lr}
 800570a:	b08e      	sub	sp, #56	@ 0x38
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	460b      	mov	r3, r1
 8005716:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800571c:	f3ef 8305 	mrs	r3, IPSR
 8005720:	61bb      	str	r3, [r7, #24]
  return(result);
 8005722:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005724:	2b00      	cmp	r3, #0
 8005726:	d16a      	bne.n	80057fe <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005728:	f3ef 8310 	mrs	r3, PRIMASK
 800572c:	617b      	str	r3, [r7, #20]
  return(result);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005734:	f3ef 8311 	mrs	r3, BASEPRI
 8005738:	613b      	str	r3, [r7, #16]
  return(result);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <osTimerNew+0x40>
 8005740:	4b31      	ldr	r3, [pc, #196]	@ (8005808 <osTimerNew+0x100>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d05a      	beq.n	80057fe <osTimerNew+0xf6>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d057      	beq.n	80057fe <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800574e:	2008      	movs	r0, #8
 8005750:	f002 fd52 	bl	80081f8 <pvPortMalloc>
 8005754:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d050      	beq.n	80057fe <osTimerNew+0xf6>
      callb->func = func;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005768:	7afb      	ldrb	r3, [r7, #11]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <osTimerNew+0x6c>
        reload = pdFALSE;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	e001      	b.n	8005778 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 8005778:	f04f 33ff 	mov.w	r3, #4294967295
 800577c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01c      	beq.n	80057c2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <osTimerNew+0x8e>
          name = attr->name;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <osTimerNew+0xa4>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80057a4:	d902      	bls.n	80057ac <osTimerNew+0xa4>
          mem = 1;
 80057a6:	2301      	movs	r3, #1
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	e00c      	b.n	80057c6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d108      	bne.n	80057c6 <osTimerNew+0xbe>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <osTimerNew+0xbe>
            mem = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	623b      	str	r3, [r7, #32]
 80057c0:	e001      	b.n	80057c6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d10c      	bne.n	80057e6 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	4b0e      	ldr	r3, [pc, #56]	@ (800580c <osTimerNew+0x104>)
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057da:	2101      	movs	r1, #1
 80057dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057de:	f001 ff0e 	bl	80075fe <xTimerCreateStatic>
 80057e2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80057e4:	e00b      	b.n	80057fe <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d108      	bne.n	80057fe <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80057ec:	4b07      	ldr	r3, [pc, #28]	@ (800580c <osTimerNew+0x104>)
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f4:	2101      	movs	r1, #1
 80057f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057f8:	f001 fee0 	bl	80075bc <xTimerCreate>
 80057fc:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005800:	4618      	mov	r0, r3
 8005802:	3730      	adds	r7, #48	@ 0x30
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000308 	.word	0x20000308
 800580c:	080056dd 	.word	0x080056dd

08005810 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	@ 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800581c:	f3ef 8305 	mrs	r3, IPSR
 8005820:	613b      	str	r3, [r7, #16]
  return(result);
 8005822:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005824:	2b00      	cmp	r3, #0
 8005826:	f040 8085 	bne.w	8005934 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582a:	f3ef 8310 	mrs	r3, PRIMASK
 800582e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d105      	bne.n	8005842 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005836:	f3ef 8311 	mrs	r3, BASEPRI
 800583a:	60bb      	str	r3, [r7, #8]
  return(result);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <osMutexNew+0x3a>
 8005842:	4b3f      	ldr	r3, [pc, #252]	@ (8005940 <osMutexNew+0x130>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d074      	beq.n	8005934 <osMutexNew+0x124>
    if (attr != NULL) {
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	623b      	str	r3, [r7, #32]
 8005856:	e001      	b.n	800585c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <osMutexNew+0x5c>
      rmtx = 1U;
 8005866:	2301      	movs	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e001      	b.n	8005870 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d15c      	bne.n	8005934 <osMutexNew+0x124>
      mem = -1;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
 800587e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d015      	beq.n	80058b2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <osMutexNew+0x8c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	2b4f      	cmp	r3, #79	@ 0x4f
 8005894:	d902      	bls.n	800589c <osMutexNew+0x8c>
          mem = 1;
 8005896:	2301      	movs	r3, #1
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e00c      	b.n	80058b6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d108      	bne.n	80058b6 <osMutexNew+0xa6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <osMutexNew+0xa6>
            mem = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	e001      	b.n	80058b6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d112      	bne.n	80058e2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	4619      	mov	r1, r3
 80058c8:	2004      	movs	r0, #4
 80058ca:	f000 faae 	bl	8005e2a <xQueueCreateMutexStatic>
 80058ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80058d0:	e016      	b.n	8005900 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4619      	mov	r1, r3
 80058d8:	2001      	movs	r0, #1
 80058da:	f000 faa6 	bl	8005e2a <xQueueCreateMutexStatic>
 80058de:	6278      	str	r0, [r7, #36]	@ 0x24
 80058e0:	e00e      	b.n	8005900 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d004      	beq.n	80058f8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80058ee:	2004      	movs	r0, #4
 80058f0:	f000 fa83 	bl	8005dfa <xQueueCreateMutex>
 80058f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80058f6:	e003      	b.n	8005900 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80058f8:	2001      	movs	r0, #1
 80058fa:	f000 fa7e 	bl	8005dfa <xQueueCreateMutex>
 80058fe:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <osMutexNew+0x110>
        if (attr != NULL) {
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <osMutexNew+0x104>
          name = attr->name;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e001      	b.n	8005918 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005918:	6979      	ldr	r1, [r7, #20]
 800591a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800591c:	f000 fe46 	bl	80065ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <osMutexNew+0x124>
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005936:	4618      	mov	r0, r3
 8005938:	3728      	adds	r7, #40	@ 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000308 	.word	0x20000308

08005944 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a07      	ldr	r2, [pc, #28]	@ (8005970 <vApplicationGetIdleTaskMemory+0x2c>)
 8005954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a06      	ldr	r2, [pc, #24]	@ (8005974 <vApplicationGetIdleTaskMemory+0x30>)
 800595a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2280      	movs	r2, #128	@ 0x80
 8005960:	601a      	str	r2, [r3, #0]
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	2000030c 	.word	0x2000030c
 8005974:	200003b4 	.word	0x200003b4

08005978 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a07      	ldr	r2, [pc, #28]	@ (80059a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005988:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a06      	ldr	r2, [pc, #24]	@ (80059a8 <vApplicationGetTimerTaskMemory+0x30>)
 800598e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005996:	601a      	str	r2, [r3, #0]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	200005b4 	.word	0x200005b4
 80059a8:	2000065c 	.word	0x2000065c

080059ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f103 0208 	add.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295
 80059c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f103 0208 	add.w	r2, r3, #8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f103 0208 	add.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d103      	bne.n	8005a6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e00c      	b.n	8005a88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3308      	adds	r3, #8
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e002      	b.n	8005a7c <vListInsert+0x2e>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d2f6      	bcs.n	8005a76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6892      	ldr	r2, [r2, #8]
 8005ad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6852      	ldr	r2, [r2, #4]
 8005ae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d103      	bne.n	8005af4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10d      	bne.n	8005b44 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	b672      	cpsid	i
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	b662      	cpsie	i
 8005b3c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005b44:	f002 fa2a 	bl	8007f9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	441a      	add	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	3b01      	subs	r3, #1
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	441a      	add	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	22ff      	movs	r2, #255	@ 0xff
 8005b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	22ff      	movs	r2, #255	@ 0xff
 8005b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d114      	bne.n	8005bc4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01a      	beq.n	8005bd8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3310      	adds	r3, #16
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fa08 	bl	8006fbc <xTaskRemoveFromEventList>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d012      	beq.n	8005bd8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <xQueueGenericReset+0xd4>)
 8005bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	e009      	b.n	8005bd8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3310      	adds	r3, #16
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff feef 	bl	80059ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3324      	adds	r3, #36	@ 0x24
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff feea 	bl	80059ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bd8:	f002 fa16 	bl	8008008 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bdc:	2301      	movs	r3, #1
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08e      	sub	sp, #56	@ 0x38
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10d      	bne.n	8005c1c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c04:	b672      	cpsid	i
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	b662      	cpsie	i
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10d      	bne.n	8005c3e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	b672      	cpsid	i
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	b662      	cpsie	i
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	e7fd      	b.n	8005c3a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <xQueueGenericCreateStatic+0x5e>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <xQueueGenericCreateStatic+0x62>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <xQueueGenericCreateStatic+0x64>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10d      	bne.n	8005c70 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	b672      	cpsid	i
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	b662      	cpsie	i
 8005c68:	623b      	str	r3, [r7, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	e7fd      	b.n	8005c6c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <xQueueGenericCreateStatic+0x90>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <xQueueGenericCreateStatic+0x94>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <xQueueGenericCreateStatic+0x96>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10d      	bne.n	8005ca2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8a:	b672      	cpsid	i
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	b662      	cpsie	i
 8005c9a:	61fb      	str	r3, [r7, #28]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ca2:	2350      	movs	r3, #80	@ 0x50
 8005ca4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b50      	cmp	r3, #80	@ 0x50
 8005caa:	d00d      	beq.n	8005cc8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	b672      	cpsid	i
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	b662      	cpsie	i
 8005cc0:	61bb      	str	r3, [r7, #24]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00d      	beq.n	8005cf0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cdc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f848 	bl	8005d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3730      	adds	r7, #48	@ 0x30
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b08a      	sub	sp, #40	@ 0x28
 8005cfe:	af02      	add	r7, sp, #8
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10d      	bne.n	8005d2a <xQueueGenericCreate+0x30>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	b672      	cpsid	i
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	b662      	cpsie	i
 8005d22:	613b      	str	r3, [r7, #16]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	e004      	b.n	8005d40 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3350      	adds	r3, #80	@ 0x50
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 fa57 	bl	80081f8 <pvPortMalloc>
 8005d4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d011      	beq.n	8005d76 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	3350      	adds	r3, #80	@ 0x50
 8005d5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d64:	79fa      	ldrb	r2, [r7, #7]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f805 	bl	8005d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d76:	69bb      	ldr	r3, [r7, #24]
	}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005dae:	2101      	movs	r1, #1
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f7ff feaf 	bl	8005b14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	78fa      	ldrb	r2, [r7, #3]
 8005dba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005de6:	2300      	movs	r3, #0
 8005de8:	2200      	movs	r2, #0
 8005dea:	2100      	movs	r1, #0
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f837 	bl	8005e60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	4603      	mov	r3, r0
 8005e02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e04:	2301      	movs	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6939      	ldr	r1, [r7, #16]
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f7ff ff71 	bl	8005cfa <xQueueGenericCreate>
 8005e18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff ffd3 	bl	8005dc6 <prvInitialiseMutex>

		return xNewQueue;
 8005e20:	68fb      	ldr	r3, [r7, #12]
	}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b088      	sub	sp, #32
 8005e2e:	af02      	add	r7, sp, #8
 8005e30:	4603      	mov	r3, r0
 8005e32:	6039      	str	r1, [r7, #0]
 8005e34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e36:	2301      	movs	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	6939      	ldr	r1, [r7, #16]
 8005e48:	6978      	ldr	r0, [r7, #20]
 8005e4a:	f7ff fecf 	bl	8005bec <xQueueGenericCreateStatic>
 8005e4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff ffb8 	bl	8005dc6 <prvInitialiseMutex>

		return xNewQueue;
 8005e56:	68fb      	ldr	r3, [r7, #12]
	}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08e      	sub	sp, #56	@ 0x38
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <xQueueGenericSend+0x38>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	b672      	cpsid	i
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	b662      	cpsie	i
 8005e90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSend+0x46>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSend+0x4a>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSend+0x4c>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <xQueueGenericSend+0x6c>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d103      	bne.n	8005eda <xQueueGenericSend+0x7a>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <xQueueGenericSend+0x7e>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueGenericSend+0x80>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10d      	bne.n	8005f00 <xQueueGenericSend+0xa0>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	b672      	cpsid	i
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	b662      	cpsie	i
 8005ef8:	623b      	str	r3, [r7, #32]
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	e7fd      	b.n	8005efc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f00:	f001 fa2a 	bl	8007358 <xTaskGetSchedulerState>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <xQueueGenericSend+0xb0>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <xQueueGenericSend+0xb4>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <xQueueGenericSend+0xb6>
 8005f14:	2300      	movs	r3, #0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10d      	bne.n	8005f36 <xQueueGenericSend+0xd6>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1e:	b672      	cpsid	i
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	b662      	cpsie	i
 8005f2e:	61fb      	str	r3, [r7, #28]
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	e7fd      	b.n	8005f32 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f36:	f002 f831 	bl	8007f9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <xQueueGenericSend+0xec>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d129      	bne.n	8005fa0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f52:	f000 fa1b 	bl	800638c <prvCopyDataToQueue>
 8005f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d010      	beq.n	8005f82 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	3324      	adds	r3, #36	@ 0x24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f829 	bl	8006fbc <xTaskRemoveFromEventList>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d013      	beq.n	8005f98 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f70:	4b3f      	ldr	r3, [pc, #252]	@ (8006070 <xQueueGenericSend+0x210>)
 8005f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	e00a      	b.n	8005f98 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f88:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <xQueueGenericSend+0x210>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f98:	f002 f836 	bl	8008008 <vPortExitCritical>
				return pdPASS;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e063      	b.n	8006068 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fa6:	f002 f82f 	bl	8008008 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e05c      	b.n	8006068 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f865 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fc2:	f002 f821 	bl	8008008 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fc6:	f000 fdc1 	bl	8006b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fca:	f001 ffe7 	bl	8007f9c <vPortEnterCritical>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d103      	bne.n	8005fe4 <xQueueGenericSend+0x184>
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d103      	bne.n	8005ffa <xQueueGenericSend+0x19a>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ffa:	f002 f805 	bl	8008008 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ffe:	1d3a      	adds	r2, r7, #4
 8006000:	f107 0314 	add.w	r3, r7, #20
 8006004:	4611      	mov	r1, r2
 8006006:	4618      	mov	r0, r3
 8006008:	f001 f854 	bl	80070b4 <xTaskCheckForTimeOut>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d124      	bne.n	800605c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006014:	f000 fab2 	bl	800657c <prvIsQueueFull>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d018      	beq.n	8006050 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	3310      	adds	r3, #16
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f000 ff72 	bl	8006f10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800602c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800602e:	f000 fa3d 	bl	80064ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006032:	f000 fd99 	bl	8006b68 <xTaskResumeAll>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	f47f af7c 	bne.w	8005f36 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800603e:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <xQueueGenericSend+0x210>)
 8006040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	e772      	b.n	8005f36 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006052:	f000 fa2b 	bl	80064ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006056:	f000 fd87 	bl	8006b68 <xTaskResumeAll>
 800605a:	e76c      	b.n	8005f36 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800605c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800605e:	f000 fa25 	bl	80064ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006062:	f000 fd81 	bl	8006b68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006068:	4618      	mov	r0, r3
 800606a:	3738      	adds	r7, #56	@ 0x38
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08e      	sub	sp, #56	@ 0x38
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10d      	bne.n	80060a8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	b672      	cpsid	i
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	b662      	cpsie	i
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <xQueueGenericSendFromISR+0x42>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <xQueueGenericSendFromISR+0x46>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericSendFromISR+0x48>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	623b      	str	r3, [r7, #32]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSendFromISR+0x76>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <xQueueGenericSendFromISR+0x7a>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueGenericSendFromISR+0x7c>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10d      	bne.n	8006110 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	b672      	cpsid	i
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	b662      	cpsie	i
 8006108:	61fb      	str	r3, [r7, #28]
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006110:	f002 f82c 	bl	800816c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006114:	f3ef 8211 	mrs	r2, BASEPRI
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	b672      	cpsid	i
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	b662      	cpsie	i
 800612c:	61ba      	str	r2, [r7, #24]
 800612e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006130:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006132:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <xQueueGenericSendFromISR+0xd2>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d12c      	bne.n	80061a0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800614c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006156:	f000 f919 	bl	800638c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800615a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d112      	bne.n	800618a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d016      	beq.n	800619a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616e:	3324      	adds	r3, #36	@ 0x24
 8006170:	4618      	mov	r0, r3
 8006172:	f000 ff23 	bl	8006fbc <xTaskRemoveFromEventList>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e007      	b.n	800619a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800618a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800618e:	3301      	adds	r3, #1
 8006190:	b2db      	uxtb	r3, r3
 8006192:	b25a      	sxtb	r2, r3
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800619a:	2301      	movs	r3, #1
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800619e:	e001      	b.n	80061a4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3738      	adds	r7, #56	@ 0x38
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08c      	sub	sp, #48	@ 0x30
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10d      	bne.n	80061f2 <xQueueReceive+0x36>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	b672      	cpsid	i
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	b662      	cpsie	i
 80061ea:	623b      	str	r3, [r7, #32]
}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	e7fd      	b.n	80061ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d103      	bne.n	8006200 <xQueueReceive+0x44>
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <xQueueReceive+0x48>
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <xQueueReceive+0x4a>
 8006204:	2300      	movs	r3, #0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10d      	bne.n	8006226 <xQueueReceive+0x6a>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620e:	b672      	cpsid	i
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	b662      	cpsie	i
 800621e:	61fb      	str	r3, [r7, #28]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006226:	f001 f897 	bl	8007358 <xTaskGetSchedulerState>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <xQueueReceive+0x7a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <xQueueReceive+0x7e>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <xQueueReceive+0x80>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10d      	bne.n	800625c <xQueueReceive+0xa0>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	b672      	cpsid	i
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	b662      	cpsie	i
 8006254:	61bb      	str	r3, [r7, #24]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625c:	f001 fe9e 	bl	8007f9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01f      	beq.n	80062ac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006270:	f000 f8f6 	bl	8006460 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006286:	3310      	adds	r3, #16
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fe97 	bl	8006fbc <xTaskRemoveFromEventList>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006294:	4b3c      	ldr	r3, [pc, #240]	@ (8006388 <xQueueReceive+0x1cc>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062a4:	f001 feb0 	bl	8008008 <vPortExitCritical>
				return pdPASS;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e069      	b.n	8006380 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062b2:	f001 fea9 	bl	8008008 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e062      	b.n	8006380 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062c0:	f107 0310 	add.w	r3, r7, #16
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fedf 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ce:	f001 fe9b 	bl	8008008 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062d2:	f000 fc3b 	bl	8006b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062d6:	f001 fe61 	bl	8007f9c <vPortEnterCritical>
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d103      	bne.n	80062f0 <xQueueReceive+0x134>
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d103      	bne.n	8006306 <xQueueReceive+0x14a>
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006306:	f001 fe7f 	bl	8008008 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800630a:	1d3a      	adds	r2, r7, #4
 800630c:	f107 0310 	add.w	r3, r7, #16
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fece 	bl	80070b4 <xTaskCheckForTimeOut>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d123      	bne.n	8006366 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800631e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006320:	f000 f916 	bl	8006550 <prvIsQueueEmpty>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d017      	beq.n	800635a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	3324      	adds	r3, #36	@ 0x24
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fdec 	bl	8006f10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800633a:	f000 f8b7 	bl	80064ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800633e:	f000 fc13 	bl	8006b68 <xTaskResumeAll>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d189      	bne.n	800625c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006348:	4b0f      	ldr	r3, [pc, #60]	@ (8006388 <xQueueReceive+0x1cc>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	e780      	b.n	800625c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800635a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800635c:	f000 f8a6 	bl	80064ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006360:	f000 fc02 	bl	8006b68 <xTaskResumeAll>
 8006364:	e77a      	b.n	800625c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006368:	f000 f8a0 	bl	80064ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800636c:	f000 fbfc 	bl	8006b68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006372:	f000 f8ed 	bl	8006550 <prvIsQueueEmpty>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	f43f af6f 	beq.w	800625c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800637e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006380:	4618      	mov	r0, r3
 8006382:	3730      	adds	r7, #48	@ 0x30
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d14d      	bne.n	800644e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 ffec 	bl	8007394 <xTaskPriorityDisinherit>
 80063bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	e043      	b.n	800644e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d119      	bne.n	8006400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6858      	ldr	r0, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	f002 f97c 	bl	80086d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d32b      	bcc.n	800644e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	e026      	b.n	800644e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68d8      	ldr	r0, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	461a      	mov	r2, r3
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	f002 f962 	bl	80086d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	425b      	negs	r3, r3
 800641a:	441a      	add	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d207      	bcs.n	800643c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	425b      	negs	r3, r3
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d105      	bne.n	800644e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	3b01      	subs	r3, #1
 800644c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006456:	697b      	ldr	r3, [r7, #20]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d018      	beq.n	80064a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	441a      	add	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	429a      	cmp	r2, r3
 800648a:	d303      	bcc.n	8006494 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68d9      	ldr	r1, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	461a      	mov	r2, r3
 800649e:	6838      	ldr	r0, [r7, #0]
 80064a0:	f002 f918 	bl	80086d4 <memcpy>
	}
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064b4:	f001 fd72 	bl	8007f9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064c0:	e011      	b.n	80064e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d012      	beq.n	80064f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3324      	adds	r3, #36	@ 0x24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fd74 	bl	8006fbc <xTaskRemoveFromEventList>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064da:	f000 fe53 	bl	8007184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dce9      	bgt.n	80064c2 <prvUnlockQueue+0x16>
 80064ee:	e000      	b.n	80064f2 <prvUnlockQueue+0x46>
					break;
 80064f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	22ff      	movs	r2, #255	@ 0xff
 80064f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80064fa:	f001 fd85 	bl	8008008 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064fe:	f001 fd4d 	bl	8007f9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006508:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800650a:	e011      	b.n	8006530 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3310      	adds	r3, #16
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fd4f 	bl	8006fbc <xTaskRemoveFromEventList>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006524:	f000 fe2e 	bl	8007184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	3b01      	subs	r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006534:	2b00      	cmp	r3, #0
 8006536:	dce9      	bgt.n	800650c <prvUnlockQueue+0x60>
 8006538:	e000      	b.n	800653c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800653a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	22ff      	movs	r2, #255	@ 0xff
 8006540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006544:	f001 fd60 	bl	8008008 <vPortExitCritical>
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006558:	f001 fd20 	bl	8007f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e001      	b.n	800656e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800656e:	f001 fd4b 	bl	8008008 <vPortExitCritical>

	return xReturn;
 8006572:	68fb      	ldr	r3, [r7, #12]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006584:	f001 fd0a 	bl	8007f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	429a      	cmp	r2, r3
 8006592:	d102      	bne.n	800659a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006594:	2301      	movs	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e001      	b.n	800659e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800659e:	f001 fd33 	bl	8008008 <vPortExitCritical>

	return xReturn;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e014      	b.n	80065e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065bc:	4a0f      	ldr	r2, [pc, #60]	@ (80065fc <vQueueAddToRegistry+0x50>)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065c8:	490c      	ldr	r1, [pc, #48]	@ (80065fc <vQueueAddToRegistry+0x50>)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065d2:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <vQueueAddToRegistry+0x50>)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	4413      	add	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065de:	e006      	b.n	80065ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b07      	cmp	r3, #7
 80065ea:	d9e7      	bls.n	80065bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000a5c 	.word	0x20000a5c

08006600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006610:	f001 fcc4 	bl	8007f9c <vPortEnterCritical>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800661a:	b25b      	sxtb	r3, r3
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d103      	bne.n	800662a <vQueueWaitForMessageRestricted+0x2a>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006630:	b25b      	sxtb	r3, r3
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d103      	bne.n	8006640 <vQueueWaitForMessageRestricted+0x40>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006640:	f001 fce2 	bl	8008008 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3324      	adds	r3, #36	@ 0x24
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fc83 	bl	8006f60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800665a:	6978      	ldr	r0, [r7, #20]
 800665c:	f7ff ff26 	bl	80064ac <prvUnlockQueue>
	}
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	@ 0x38
 800666c:	af04      	add	r7, sp, #16
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10d      	bne.n	8006698 <xTaskCreateStatic+0x30>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	b672      	cpsid	i
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	b662      	cpsie	i
 8006690:	623b      	str	r3, [r7, #32]
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <xTaskCreateStatic+0x52>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	b672      	cpsid	i
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	b662      	cpsie	i
 80066b2:	61fb      	str	r3, [r7, #28]
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066ba:	23a8      	movs	r3, #168	@ 0xa8
 80066bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80066c2:	d00d      	beq.n	80066e0 <xTaskCreateStatic+0x78>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	b672      	cpsid	i
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	b662      	cpsie	i
 80066d8:	61bb      	str	r3, [r7, #24]
}
 80066da:	bf00      	nop
 80066dc:	bf00      	nop
 80066de:	e7fd      	b.n	80066dc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01e      	beq.n	8006726 <xTaskCreateStatic+0xbe>
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01b      	beq.n	8006726 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006700:	2300      	movs	r3, #0
 8006702:	9303      	str	r3, [sp, #12]
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	9302      	str	r3, [sp, #8]
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f851 	bl	80067c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800671e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006720:	f000 f8f8 	bl	8006914 <prvAddNewTaskToReadyList>
 8006724:	e001      	b.n	800672a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800672a:	697b      	ldr	r3, [r7, #20]
	}
 800672c:	4618      	mov	r0, r3
 800672e:	3728      	adds	r7, #40	@ 0x28
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08c      	sub	sp, #48	@ 0x30
 8006738:	af04      	add	r7, sp, #16
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4618      	mov	r0, r3
 800674a:	f001 fd55 	bl	80081f8 <pvPortMalloc>
 800674e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00e      	beq.n	8006774 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006756:	20a8      	movs	r0, #168	@ 0xa8
 8006758:	f001 fd4e 	bl	80081f8 <pvPortMalloc>
 800675c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	631a      	str	r2, [r3, #48]	@ 0x30
 800676a:	e005      	b.n	8006778 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800676c:	6978      	ldr	r0, [r7, #20]
 800676e:	f001 fe11 	bl	8008394 <vPortFree>
 8006772:	e001      	b.n	8006778 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d017      	beq.n	80067ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	2300      	movs	r3, #0
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	9302      	str	r3, [sp, #8]
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f80f 	bl	80067c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067a2:	69f8      	ldr	r0, [r7, #28]
 80067a4:	f000 f8b6 	bl	8006914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067a8:	2301      	movs	r3, #1
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	e002      	b.n	80067b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295
 80067b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067b4:	69bb      	ldr	r3, [r7, #24]
	}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	461a      	mov	r2, r3
 80067d8:	21a5      	movs	r1, #165	@ 0xa5
 80067da:	f001 fef7 	bl	80085cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80067e8:	440b      	add	r3, r1
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f023 0307 	bic.w	r3, r3, #7
 80067f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006806:	b672      	cpsid	i
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	b662      	cpsie	i
 8006816:	617b      	str	r3, [r7, #20]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01f      	beq.n	8006864 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006824:	2300      	movs	r3, #0
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	e012      	b.n	8006850 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	4413      	add	r3, r2
 8006830:	7819      	ldrb	r1, [r3, #0]
 8006832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	3334      	adds	r3, #52	@ 0x34
 800683a:	460a      	mov	r2, r1
 800683c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d006      	beq.n	8006858 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	3301      	adds	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b0f      	cmp	r3, #15
 8006854:	d9e9      	bls.n	800682a <prvInitialiseNewTask+0x6a>
 8006856:	e000      	b.n	800685a <prvInitialiseNewTask+0x9a>
			{
				break;
 8006858:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006862:	e003      	b.n	800686c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	2b37      	cmp	r3, #55	@ 0x37
 8006870:	d901      	bls.n	8006876 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006872:	2337      	movs	r3, #55	@ 0x37
 8006874:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800687a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006880:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	2200      	movs	r2, #0
 8006886:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	3304      	adds	r3, #4
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff f8ad 	bl	80059ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	3318      	adds	r3, #24
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff f8a8 	bl	80059ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	3354      	adds	r3, #84	@ 0x54
 80068c6:	224c      	movs	r2, #76	@ 0x4c
 80068c8:	2100      	movs	r1, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fe7e 	bl	80085cc <memset>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006908 <prvInitialiseNewTask+0x148>)
 80068d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	4a0c      	ldr	r2, [pc, #48]	@ (800690c <prvInitialiseNewTask+0x14c>)
 80068da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	4a0c      	ldr	r2, [pc, #48]	@ (8006910 <prvInitialiseNewTask+0x150>)
 80068e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	68f9      	ldr	r1, [r7, #12]
 80068e6:	69b8      	ldr	r0, [r7, #24]
 80068e8:	f001 fa4c 	bl	8007d84 <pxPortInitialiseStack>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068fe:	bf00      	nop
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20004ce8 	.word	0x20004ce8
 800690c:	20004d50 	.word	0x20004d50
 8006910:	20004db8 	.word	0x20004db8

08006914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800691c:	f001 fb3e 	bl	8007f9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006920:	4b2d      	ldr	r3, [pc, #180]	@ (80069d8 <prvAddNewTaskToReadyList+0xc4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	4a2c      	ldr	r2, [pc, #176]	@ (80069d8 <prvAddNewTaskToReadyList+0xc4>)
 8006928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800692a:	4b2c      	ldr	r3, [pc, #176]	@ (80069dc <prvAddNewTaskToReadyList+0xc8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006932:	4a2a      	ldr	r2, [pc, #168]	@ (80069dc <prvAddNewTaskToReadyList+0xc8>)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006938:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <prvAddNewTaskToReadyList+0xc4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d110      	bne.n	8006962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006940:	f000 fc44 	bl	80071cc <prvInitialiseTaskLists>
 8006944:	e00d      	b.n	8006962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006946:	4b26      	ldr	r3, [pc, #152]	@ (80069e0 <prvAddNewTaskToReadyList+0xcc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800694e:	4b23      	ldr	r3, [pc, #140]	@ (80069dc <prvAddNewTaskToReadyList+0xc8>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006958:	429a      	cmp	r2, r3
 800695a:	d802      	bhi.n	8006962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800695c:	4a1f      	ldr	r2, [pc, #124]	@ (80069dc <prvAddNewTaskToReadyList+0xc8>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006962:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <prvAddNewTaskToReadyList+0xd0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	4a1e      	ldr	r2, [pc, #120]	@ (80069e4 <prvAddNewTaskToReadyList+0xd0>)
 800696a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800696c:	4b1d      	ldr	r3, [pc, #116]	@ (80069e4 <prvAddNewTaskToReadyList+0xd0>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006978:	4b1b      	ldr	r3, [pc, #108]	@ (80069e8 <prvAddNewTaskToReadyList+0xd4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d903      	bls.n	8006988 <prvAddNewTaskToReadyList+0x74>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	4a18      	ldr	r2, [pc, #96]	@ (80069e8 <prvAddNewTaskToReadyList+0xd4>)
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4a15      	ldr	r2, [pc, #84]	@ (80069ec <prvAddNewTaskToReadyList+0xd8>)
 8006996:	441a      	add	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f7ff f831 	bl	8005a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069a4:	f001 fb30 	bl	8008008 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069a8:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <prvAddNewTaskToReadyList+0xcc>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00e      	beq.n	80069ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069b0:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <prvAddNewTaskToReadyList+0xc8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d207      	bcs.n	80069ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069be:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <prvAddNewTaskToReadyList+0xdc>)
 80069c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000f70 	.word	0x20000f70
 80069dc:	20000a9c 	.word	0x20000a9c
 80069e0:	20000f7c 	.word	0x20000f7c
 80069e4:	20000f8c 	.word	0x20000f8c
 80069e8:	20000f78 	.word	0x20000f78
 80069ec:	20000aa0 	.word	0x20000aa0
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01a      	beq.n	8006a3c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a06:	4b15      	ldr	r3, [pc, #84]	@ (8006a5c <vTaskDelay+0x68>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <vTaskDelay+0x36>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	b672      	cpsid	i
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	b662      	cpsie	i
 8006a22:	60bb      	str	r3, [r7, #8]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006a2a:	f000 f88f 	bl	8006b4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fd23 	bl	800747c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a36:	f000 f897 	bl	8006b68 <xTaskResumeAll>
 8006a3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d107      	bne.n	8006a52 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006a42:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <vTaskDelay+0x6c>)
 8006a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000f98 	.word	0x20000f98
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	@ 0x28
 8006a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a72:	463a      	mov	r2, r7
 8006a74:	1d39      	adds	r1, r7, #4
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe ff62 	bl	8005944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	9202      	str	r2, [sp, #8]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	460a      	mov	r2, r1
 8006a92:	4926      	ldr	r1, [pc, #152]	@ (8006b2c <vTaskStartScheduler+0xc8>)
 8006a94:	4826      	ldr	r0, [pc, #152]	@ (8006b30 <vTaskStartScheduler+0xcc>)
 8006a96:	f7ff fde7 	bl	8006668 <xTaskCreateStatic>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4a25      	ldr	r2, [pc, #148]	@ (8006b34 <vTaskStartScheduler+0xd0>)
 8006a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aa0:	4b24      	ldr	r3, [pc, #144]	@ (8006b34 <vTaskStartScheduler+0xd0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e001      	b.n	8006ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d102      	bne.n	8006abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ab8:	f000 fd34 	bl	8007524 <xTimerCreateTimerTask>
 8006abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d11d      	bne.n	8006b00 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	b672      	cpsid	i
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	b662      	cpsie	i
 8006ad8:	613b      	str	r3, [r7, #16]
}
 8006ada:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006adc:	4b16      	ldr	r3, [pc, #88]	@ (8006b38 <vTaskStartScheduler+0xd4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3354      	adds	r3, #84	@ 0x54
 8006ae2:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <vTaskStartScheduler+0xd8>)
 8006ae4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ae6:	4b16      	ldr	r3, [pc, #88]	@ (8006b40 <vTaskStartScheduler+0xdc>)
 8006ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006aee:	4b15      	ldr	r3, [pc, #84]	@ (8006b44 <vTaskStartScheduler+0xe0>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006af4:	4b14      	ldr	r3, [pc, #80]	@ (8006b48 <vTaskStartScheduler+0xe4>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006afa:	f001 f9d1 	bl	8007ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006afe:	e011      	b.n	8006b24 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	d10d      	bne.n	8006b24 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0c:	b672      	cpsid	i
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	b662      	cpsie	i
 8006b1c:	60fb      	str	r3, [r7, #12]
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <vTaskStartScheduler+0xbc>
}
 8006b24:	bf00      	nop
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	08008920 	.word	0x08008920
 8006b30:	0800719d 	.word	0x0800719d
 8006b34:	20000f94 	.word	0x20000f94
 8006b38:	20000a9c 	.word	0x20000a9c
 8006b3c:	20000010 	.word	0x20000010
 8006b40:	20000f90 	.word	0x20000f90
 8006b44:	20000f7c 	.word	0x20000f7c
 8006b48:	20000f74 	.word	0x20000f74

08006b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b50:	4b04      	ldr	r3, [pc, #16]	@ (8006b64 <vTaskSuspendAll+0x18>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	4a03      	ldr	r2, [pc, #12]	@ (8006b64 <vTaskSuspendAll+0x18>)
 8006b58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006b5a:	bf00      	nop
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	20000f98 	.word	0x20000f98

08006b68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b76:	4b43      	ldr	r3, [pc, #268]	@ (8006c84 <xTaskResumeAll+0x11c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <xTaskResumeAll+0x32>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	b672      	cpsid	i
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	b662      	cpsie	i
 8006b92:	603b      	str	r3, [r7, #0]
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b9a:	f001 f9ff 	bl	8007f9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b9e:	4b39      	ldr	r3, [pc, #228]	@ (8006c84 <xTaskResumeAll+0x11c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	4a37      	ldr	r2, [pc, #220]	@ (8006c84 <xTaskResumeAll+0x11c>)
 8006ba6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba8:	4b36      	ldr	r3, [pc, #216]	@ (8006c84 <xTaskResumeAll+0x11c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d162      	bne.n	8006c76 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bb0:	4b35      	ldr	r3, [pc, #212]	@ (8006c88 <xTaskResumeAll+0x120>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d05e      	beq.n	8006c76 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bb8:	e02f      	b.n	8006c1a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bba:	4b34      	ldr	r3, [pc, #208]	@ (8006c8c <xTaskResumeAll+0x124>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe ff7a 	bl	8005ac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe ff75 	bl	8005ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bda:	4b2d      	ldr	r3, [pc, #180]	@ (8006c90 <xTaskResumeAll+0x128>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d903      	bls.n	8006bea <xTaskResumeAll+0x82>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	4a2a      	ldr	r2, [pc, #168]	@ (8006c90 <xTaskResumeAll+0x128>)
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4a27      	ldr	r2, [pc, #156]	@ (8006c94 <xTaskResumeAll+0x12c>)
 8006bf8:	441a      	add	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f7fe ff00 	bl	8005a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0a:	4b23      	ldr	r3, [pc, #140]	@ (8006c98 <xTaskResumeAll+0x130>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d302      	bcc.n	8006c1a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006c14:	4b21      	ldr	r3, [pc, #132]	@ (8006c9c <xTaskResumeAll+0x134>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006c8c <xTaskResumeAll+0x124>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1cb      	bne.n	8006bba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c28:	f000 fb76 	bl	8007318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca0 <xTaskResumeAll+0x138>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c38:	f000 f846 	bl	8006cc8 <xTaskIncrementTick>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006c42:	4b16      	ldr	r3, [pc, #88]	@ (8006c9c <xTaskResumeAll+0x134>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f1      	bne.n	8006c38 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006c54:	4b12      	ldr	r3, [pc, #72]	@ (8006ca0 <xTaskResumeAll+0x138>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c5a:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <xTaskResumeAll+0x134>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c62:	2301      	movs	r3, #1
 8006c64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <xTaskResumeAll+0x13c>)
 8006c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c76:	f001 f9c7 	bl	8008008 <vPortExitCritical>

	return xAlreadyYielded;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000f98 	.word	0x20000f98
 8006c88:	20000f70 	.word	0x20000f70
 8006c8c:	20000f30 	.word	0x20000f30
 8006c90:	20000f78 	.word	0x20000f78
 8006c94:	20000aa0 	.word	0x20000aa0
 8006c98:	20000a9c 	.word	0x20000a9c
 8006c9c:	20000f84 	.word	0x20000f84
 8006ca0:	20000f80 	.word	0x20000f80
 8006ca4:	e000ed04 	.word	0xe000ed04

08006ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cae:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <xTaskGetTickCount+0x1c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cb4:	687b      	ldr	r3, [r7, #4]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000f74 	.word	0x20000f74

08006cc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd2:	4b50      	ldr	r3, [pc, #320]	@ (8006e14 <xTaskIncrementTick+0x14c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f040 808c 	bne.w	8006df4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8006e18 <xTaskIncrementTick+0x150>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8006e18 <xTaskIncrementTick+0x150>)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d123      	bne.n	8006d38 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8006e1c <xTaskIncrementTick+0x154>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00d      	beq.n	8006d16 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	b672      	cpsid	i
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	b662      	cpsie	i
 8006d0e:	603b      	str	r3, [r7, #0]
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <xTaskIncrementTick+0x4a>
 8006d16:	4b41      	ldr	r3, [pc, #260]	@ (8006e1c <xTaskIncrementTick+0x154>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	4b40      	ldr	r3, [pc, #256]	@ (8006e20 <xTaskIncrementTick+0x158>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a3e      	ldr	r2, [pc, #248]	@ (8006e1c <xTaskIncrementTick+0x154>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	4a3e      	ldr	r2, [pc, #248]	@ (8006e20 <xTaskIncrementTick+0x158>)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e24 <xTaskIncrementTick+0x15c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	4a3c      	ldr	r2, [pc, #240]	@ (8006e24 <xTaskIncrementTick+0x15c>)
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	f000 faf0 	bl	8007318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d38:	4b3b      	ldr	r3, [pc, #236]	@ (8006e28 <xTaskIncrementTick+0x160>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d349      	bcc.n	8006dd6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d42:	4b36      	ldr	r3, [pc, #216]	@ (8006e1c <xTaskIncrementTick+0x154>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d4c:	4b36      	ldr	r3, [pc, #216]	@ (8006e28 <xTaskIncrementTick+0x160>)
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	601a      	str	r2, [r3, #0]
					break;
 8006d54:	e03f      	b.n	8006dd6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d56:	4b31      	ldr	r3, [pc, #196]	@ (8006e1c <xTaskIncrementTick+0x154>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d203      	bcs.n	8006d76 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006e28 <xTaskIncrementTick+0x160>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d74:	e02f      	b.n	8006dd6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fea0 	bl	8005ac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	3318      	adds	r3, #24
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fe97 	bl	8005ac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d96:	4b25      	ldr	r3, [pc, #148]	@ (8006e2c <xTaskIncrementTick+0x164>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d903      	bls.n	8006da6 <xTaskIncrementTick+0xde>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	4a22      	ldr	r2, [pc, #136]	@ (8006e2c <xTaskIncrementTick+0x164>)
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4a1f      	ldr	r2, [pc, #124]	@ (8006e30 <xTaskIncrementTick+0x168>)
 8006db4:	441a      	add	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7fe fe22 	bl	8005a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <xTaskIncrementTick+0x16c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d3b8      	bcc.n	8006d42 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd4:	e7b5      	b.n	8006d42 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dd6:	4b17      	ldr	r3, [pc, #92]	@ (8006e34 <xTaskIncrementTick+0x16c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ddc:	4914      	ldr	r1, [pc, #80]	@ (8006e30 <xTaskIncrementTick+0x168>)
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d907      	bls.n	8006dfe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	e004      	b.n	8006dfe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006df4:	4b10      	ldr	r3, [pc, #64]	@ (8006e38 <xTaskIncrementTick+0x170>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8006e38 <xTaskIncrementTick+0x170>)
 8006dfc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8006e3c <xTaskIncrementTick+0x174>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e0a:	697b      	ldr	r3, [r7, #20]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000f98 	.word	0x20000f98
 8006e18:	20000f74 	.word	0x20000f74
 8006e1c:	20000f28 	.word	0x20000f28
 8006e20:	20000f2c 	.word	0x20000f2c
 8006e24:	20000f88 	.word	0x20000f88
 8006e28:	20000f90 	.word	0x20000f90
 8006e2c:	20000f78 	.word	0x20000f78
 8006e30:	20000aa0 	.word	0x20000aa0
 8006e34:	20000a9c 	.word	0x20000a9c
 8006e38:	20000f80 	.word	0x20000f80
 8006e3c:	20000f84 	.word	0x20000f84

08006e40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e46:	4b2c      	ldr	r3, [pc, #176]	@ (8006ef8 <vTaskSwitchContext+0xb8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006efc <vTaskSwitchContext+0xbc>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e54:	e049      	b.n	8006eea <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006e56:	4b29      	ldr	r3, [pc, #164]	@ (8006efc <vTaskSwitchContext+0xbc>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5c:	4b28      	ldr	r3, [pc, #160]	@ (8006f00 <vTaskSwitchContext+0xc0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e013      	b.n	8006e8c <vTaskSwitchContext+0x4c>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <vTaskSwitchContext+0x46>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	b672      	cpsid	i
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	b662      	cpsie	i
 8006e7e:	607b      	str	r3, [r7, #4]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vTaskSwitchContext+0x42>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	491d      	ldr	r1, [pc, #116]	@ (8006f04 <vTaskSwitchContext+0xc4>)
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0e1      	beq.n	8006e64 <vTaskSwitchContext+0x24>
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4a16      	ldr	r2, [pc, #88]	@ (8006f04 <vTaskSwitchContext+0xc4>)
 8006eac:	4413      	add	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d104      	bne.n	8006ed0 <vTaskSwitchContext+0x90>
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8006f08 <vTaskSwitchContext+0xc8>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	4a09      	ldr	r2, [pc, #36]	@ (8006f00 <vTaskSwitchContext+0xc0>)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ee0:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <vTaskSwitchContext+0xc8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3354      	adds	r3, #84	@ 0x54
 8006ee6:	4a09      	ldr	r2, [pc, #36]	@ (8006f0c <vTaskSwitchContext+0xcc>)
 8006ee8:	6013      	str	r3, [r2, #0]
}
 8006eea:	bf00      	nop
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000f98 	.word	0x20000f98
 8006efc:	20000f84 	.word	0x20000f84
 8006f00:	20000f78 	.word	0x20000f78
 8006f04:	20000aa0 	.word	0x20000aa0
 8006f08:	20000a9c 	.word	0x20000a9c
 8006f0c:	20000010 	.word	0x20000010

08006f10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10d      	bne.n	8006f3c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	b672      	cpsid	i
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	b662      	cpsie	i
 8006f34:	60fb      	str	r3, [r7, #12]
}
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	e7fd      	b.n	8006f38 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f3c:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <vTaskPlaceOnEventList+0x4c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3318      	adds	r3, #24
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7fe fd82 	bl	8005a4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6838      	ldr	r0, [r7, #0]
 8006f4e:	f000 fa95 	bl	800747c <prvAddCurrentTaskToDelayedList>
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000a9c 	.word	0x20000a9c

08006f60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10d      	bne.n	8006f8e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	b672      	cpsid	i
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	b662      	cpsie	i
 8006f86:	617b      	str	r3, [r7, #20]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <vTaskPlaceOnEventListRestricted+0x58>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3318      	adds	r3, #24
 8006f94:	4619      	mov	r1, r3
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7fe fd35 	bl	8005a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	68b8      	ldr	r0, [r7, #8]
 8006fac:	f000 fa66 	bl	800747c <prvAddCurrentTaskToDelayedList>
	}
 8006fb0:	bf00      	nop
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000a9c 	.word	0x20000a9c

08006fbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	b672      	cpsid	i
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	b662      	cpsie	i
 8006fe6:	60fb      	str	r3, [r7, #12]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3318      	adds	r3, #24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fd64 	bl	8005ac0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8007070 <xTaskRemoveFromEventList+0xb4>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d11d      	bne.n	800703c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3304      	adds	r3, #4
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fd5b 	bl	8005ac0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700e:	4b19      	ldr	r3, [pc, #100]	@ (8007074 <xTaskRemoveFromEventList+0xb8>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d903      	bls.n	800701e <xTaskRemoveFromEventList+0x62>
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	4a16      	ldr	r2, [pc, #88]	@ (8007074 <xTaskRemoveFromEventList+0xb8>)
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a13      	ldr	r2, [pc, #76]	@ (8007078 <xTaskRemoveFromEventList+0xbc>)
 800702c:	441a      	add	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fe fce6 	bl	8005a06 <vListInsertEnd>
 800703a:	e005      	b.n	8007048 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	3318      	adds	r3, #24
 8007040:	4619      	mov	r1, r3
 8007042:	480e      	ldr	r0, [pc, #56]	@ (800707c <xTaskRemoveFromEventList+0xc0>)
 8007044:	f7fe fcdf 	bl	8005a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704c:	4b0c      	ldr	r3, [pc, #48]	@ (8007080 <xTaskRemoveFromEventList+0xc4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007052:	429a      	cmp	r2, r3
 8007054:	d905      	bls.n	8007062 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800705a:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <xTaskRemoveFromEventList+0xc8>)
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e001      	b.n	8007066 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000f98 	.word	0x20000f98
 8007074:	20000f78 	.word	0x20000f78
 8007078:	20000aa0 	.word	0x20000aa0
 800707c:	20000f30 	.word	0x20000f30
 8007080:	20000a9c 	.word	0x20000a9c
 8007084:	20000f84 	.word	0x20000f84

08007088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <vTaskInternalSetTimeOutState+0x24>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <vTaskInternalSetTimeOutState+0x28>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000f88 	.word	0x20000f88
 80070b0:	20000f74 	.word	0x20000f74

080070b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c8:	b672      	cpsid	i
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	b662      	cpsie	i
 80070d8:	613b      	str	r3, [r7, #16]
}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	e7fd      	b.n	80070dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ea:	b672      	cpsid	i
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	b662      	cpsie	i
 80070fa:	60fb      	str	r3, [r7, #12]
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	e7fd      	b.n	80070fe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007102:	f000 ff4b 	bl	8007f9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007106:	4b1d      	ldr	r3, [pc, #116]	@ (800717c <xTaskCheckForTimeOut+0xc8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711e:	d102      	bne.n	8007126 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]
 8007124:	e023      	b.n	800716e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b15      	ldr	r3, [pc, #84]	@ (8007180 <xTaskCheckForTimeOut+0xcc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d007      	beq.n	8007142 <xTaskCheckForTimeOut+0x8e>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	429a      	cmp	r2, r3
 800713a:	d302      	bcc.n	8007142 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800713c:	2301      	movs	r3, #1
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	e015      	b.n	800716e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	429a      	cmp	r2, r3
 800714a:	d20b      	bcs.n	8007164 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	1ad2      	subs	r2, r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff ff95 	bl	8007088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e004      	b.n	800716e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800716a:	2301      	movs	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800716e:	f000 ff4b 	bl	8008008 <vPortExitCritical>

	return xReturn;
 8007172:	69fb      	ldr	r3, [r7, #28]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3720      	adds	r7, #32
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000f74 	.word	0x20000f74
 8007180:	20000f88 	.word	0x20000f88

08007184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007188:	4b03      	ldr	r3, [pc, #12]	@ (8007198 <vTaskMissedYield+0x14>)
 800718a:	2201      	movs	r2, #1
 800718c:	601a      	str	r2, [r3, #0]
}
 800718e:	bf00      	nop
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	20000f84 	.word	0x20000f84

0800719c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071a4:	f000 f852 	bl	800724c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071a8:	4b06      	ldr	r3, [pc, #24]	@ (80071c4 <prvIdleTask+0x28>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d9f9      	bls.n	80071a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071b0:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <prvIdleTask+0x2c>)
 80071b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071c0:	e7f0      	b.n	80071a4 <prvIdleTask+0x8>
 80071c2:	bf00      	nop
 80071c4:	20000aa0 	.word	0x20000aa0
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
 80071d6:	e00c      	b.n	80071f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4a12      	ldr	r2, [pc, #72]	@ (800722c <prvInitialiseTaskLists+0x60>)
 80071e4:	4413      	add	r3, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fbe0 	bl	80059ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3301      	adds	r3, #1
 80071f0:	607b      	str	r3, [r7, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b37      	cmp	r3, #55	@ 0x37
 80071f6:	d9ef      	bls.n	80071d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071f8:	480d      	ldr	r0, [pc, #52]	@ (8007230 <prvInitialiseTaskLists+0x64>)
 80071fa:	f7fe fbd7 	bl	80059ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071fe:	480d      	ldr	r0, [pc, #52]	@ (8007234 <prvInitialiseTaskLists+0x68>)
 8007200:	f7fe fbd4 	bl	80059ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007204:	480c      	ldr	r0, [pc, #48]	@ (8007238 <prvInitialiseTaskLists+0x6c>)
 8007206:	f7fe fbd1 	bl	80059ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800720a:	480c      	ldr	r0, [pc, #48]	@ (800723c <prvInitialiseTaskLists+0x70>)
 800720c:	f7fe fbce 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007210:	480b      	ldr	r0, [pc, #44]	@ (8007240 <prvInitialiseTaskLists+0x74>)
 8007212:	f7fe fbcb 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007216:	4b0b      	ldr	r3, [pc, #44]	@ (8007244 <prvInitialiseTaskLists+0x78>)
 8007218:	4a05      	ldr	r2, [pc, #20]	@ (8007230 <prvInitialiseTaskLists+0x64>)
 800721a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800721c:	4b0a      	ldr	r3, [pc, #40]	@ (8007248 <prvInitialiseTaskLists+0x7c>)
 800721e:	4a05      	ldr	r2, [pc, #20]	@ (8007234 <prvInitialiseTaskLists+0x68>)
 8007220:	601a      	str	r2, [r3, #0]
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000aa0 	.word	0x20000aa0
 8007230:	20000f00 	.word	0x20000f00
 8007234:	20000f14 	.word	0x20000f14
 8007238:	20000f30 	.word	0x20000f30
 800723c:	20000f44 	.word	0x20000f44
 8007240:	20000f5c 	.word	0x20000f5c
 8007244:	20000f28 	.word	0x20000f28
 8007248:	20000f2c 	.word	0x20000f2c

0800724c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007252:	e019      	b.n	8007288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007254:	f000 fea2 	bl	8007f9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007258:	4b10      	ldr	r3, [pc, #64]	@ (800729c <prvCheckTasksWaitingTermination+0x50>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3304      	adds	r3, #4
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fc2b 	bl	8005ac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800726a:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <prvCheckTasksWaitingTermination+0x54>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3b01      	subs	r3, #1
 8007270:	4a0b      	ldr	r2, [pc, #44]	@ (80072a0 <prvCheckTasksWaitingTermination+0x54>)
 8007272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007274:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <prvCheckTasksWaitingTermination+0x58>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3b01      	subs	r3, #1
 800727a:	4a0a      	ldr	r2, [pc, #40]	@ (80072a4 <prvCheckTasksWaitingTermination+0x58>)
 800727c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800727e:	f000 fec3 	bl	8008008 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f810 	bl	80072a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007288:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <prvCheckTasksWaitingTermination+0x58>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e1      	bne.n	8007254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000f44 	.word	0x20000f44
 80072a0:	20000f70 	.word	0x20000f70
 80072a4:	20000f58 	.word	0x20000f58

080072a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3354      	adds	r3, #84	@ 0x54
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 f991 	bl	80085dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d108      	bne.n	80072d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 f863 	bl	8008394 <vPortFree>
				vPortFree( pxTCB );
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f860 	bl	8008394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072d4:	e01b      	b.n	800730e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d103      	bne.n	80072e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f857 	bl	8008394 <vPortFree>
	}
 80072e6:	e012      	b.n	800730e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d00d      	beq.n	800730e <prvDeleteTCB+0x66>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	b672      	cpsid	i
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	b662      	cpsie	i
 8007306:	60fb      	str	r3, [r7, #12]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <prvDeleteTCB+0x62>
	}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731e:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <prvResetNextTaskUnblockTime+0x38>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <prvResetNextTaskUnblockTime+0x3c>)
 800732a:	f04f 32ff 	mov.w	r2, #4294967295
 800732e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007330:	e008      	b.n	8007344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007332:	4b07      	ldr	r3, [pc, #28]	@ (8007350 <prvResetNextTaskUnblockTime+0x38>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a04      	ldr	r2, [pc, #16]	@ (8007354 <prvResetNextTaskUnblockTime+0x3c>)
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000f28 	.word	0x20000f28
 8007354:	20000f90 	.word	0x20000f90

08007358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800735e:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <xTaskGetSchedulerState+0x34>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007366:	2301      	movs	r3, #1
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	e008      	b.n	800737e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800736c:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <xTaskGetSchedulerState+0x38>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007374:	2302      	movs	r3, #2
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	e001      	b.n	800737e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800737a:	2300      	movs	r3, #0
 800737c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800737e:	687b      	ldr	r3, [r7, #4]
	}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	20000f7c 	.word	0x20000f7c
 8007390:	20000f98 	.word	0x20000f98

08007394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d05c      	beq.n	8007464 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073aa:	4b31      	ldr	r3, [pc, #196]	@ (8007470 <xTaskPriorityDisinherit+0xdc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d00d      	beq.n	80073d0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	b672      	cpsid	i
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	b662      	cpsie	i
 80073c8:	60fb      	str	r3, [r7, #12]
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10d      	bne.n	80073f4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073dc:	b672      	cpsid	i
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	b662      	cpsie	i
 80073ec:	60bb      	str	r3, [r7, #8]
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	e7fd      	b.n	80073f0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007406:	429a      	cmp	r2, r3
 8007408:	d02c      	beq.n	8007464 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740e:	2b00      	cmp	r3, #0
 8007410:	d128      	bne.n	8007464 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3304      	adds	r3, #4
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fb52 	bl	8005ac0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007434:	4b0f      	ldr	r3, [pc, #60]	@ (8007474 <xTaskPriorityDisinherit+0xe0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d903      	bls.n	8007444 <xTaskPriorityDisinherit+0xb0>
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	4a0c      	ldr	r2, [pc, #48]	@ (8007474 <xTaskPriorityDisinherit+0xe0>)
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4a09      	ldr	r2, [pc, #36]	@ (8007478 <xTaskPriorityDisinherit+0xe4>)
 8007452:	441a      	add	r2, r3
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7fe fad3 	bl	8005a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007464:	697b      	ldr	r3, [r7, #20]
	}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20000a9c 	.word	0x20000a9c
 8007474:	20000f78 	.word	0x20000f78
 8007478:	20000aa0 	.word	0x20000aa0

0800747c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007486:	4b21      	ldr	r3, [pc, #132]	@ (800750c <prvAddCurrentTaskToDelayedList+0x90>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800748c:	4b20      	ldr	r3, [pc, #128]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x94>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3304      	adds	r3, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fb14 	bl	8005ac0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d10a      	bne.n	80074b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x94>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	4819      	ldr	r0, [pc, #100]	@ (8007514 <prvAddCurrentTaskToDelayedList+0x98>)
 80074b0:	f7fe faa9 	bl	8005a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074b4:	e026      	b.n	8007504 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074be:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x94>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d209      	bcs.n	80074e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ce:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x94>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f7fe fab7 	bl	8005a4e <vListInsert>
}
 80074e0:	e010      	b.n	8007504 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074e2:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <prvAddCurrentTaskToDelayedList+0xa0>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x94>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe faad 	bl	8005a4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d202      	bcs.n	8007504 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074fe:	4a08      	ldr	r2, [pc, #32]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	6013      	str	r3, [r2, #0]
}
 8007504:	bf00      	nop
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000f74 	.word	0x20000f74
 8007510:	20000a9c 	.word	0x20000a9c
 8007514:	20000f5c 	.word	0x20000f5c
 8007518:	20000f2c 	.word	0x20000f2c
 800751c:	20000f28 	.word	0x20000f28
 8007520:	20000f90 	.word	0x20000f90

08007524 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08a      	sub	sp, #40	@ 0x28
 8007528:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800752e:	f000 fbc5 	bl	8007cbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007532:	4b1e      	ldr	r3, [pc, #120]	@ (80075ac <xTimerCreateTimerTask+0x88>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d021      	beq.n	800757e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007542:	1d3a      	adds	r2, r7, #4
 8007544:	f107 0108 	add.w	r1, r7, #8
 8007548:	f107 030c 	add.w	r3, r7, #12
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fa13 	bl	8005978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	9202      	str	r2, [sp, #8]
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	2306      	movs	r3, #6
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	2300      	movs	r3, #0
 8007562:	460a      	mov	r2, r1
 8007564:	4912      	ldr	r1, [pc, #72]	@ (80075b0 <xTimerCreateTimerTask+0x8c>)
 8007566:	4813      	ldr	r0, [pc, #76]	@ (80075b4 <xTimerCreateTimerTask+0x90>)
 8007568:	f7ff f87e 	bl	8006668 <xTaskCreateStatic>
 800756c:	4603      	mov	r3, r0
 800756e:	4a12      	ldr	r2, [pc, #72]	@ (80075b8 <xTimerCreateTimerTask+0x94>)
 8007570:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007572:	4b11      	ldr	r3, [pc, #68]	@ (80075b8 <xTimerCreateTimerTask+0x94>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800757a:	2301      	movs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10d      	bne.n	80075a0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	613b      	str	r3, [r7, #16]
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xTimerCreateTimerTask+0x78>
	return xReturn;
 80075a0:	697b      	ldr	r3, [r7, #20]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000fcc 	.word	0x20000fcc
 80075b0:	08008928 	.word	0x08008928
 80075b4:	08007845 	.word	0x08007845
 80075b8:	20000fd0 	.word	0x20000fd0

080075bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80075ca:	202c      	movs	r0, #44	@ 0x2c
 80075cc:	f000 fe14 	bl	80081f8 <pvPortMalloc>
 80075d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00d      	beq.n	80075f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f849 	bl	8007686 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80075f4:	697b      	ldr	r3, [r7, #20]
	}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b08a      	sub	sp, #40	@ 0x28
 8007602:	af02      	add	r7, sp, #8
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800760c:	232c      	movs	r3, #44	@ 0x2c
 800760e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b2c      	cmp	r3, #44	@ 0x2c
 8007614:	d00d      	beq.n	8007632 <xTimerCreateStatic+0x34>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	b672      	cpsid	i
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	b662      	cpsie	i
 800762a:	61bb      	str	r3, [r7, #24]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10d      	bne.n	8007656 <xTimerCreateStatic+0x58>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	b672      	cpsid	i
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	b662      	cpsie	i
 800764e:	617b      	str	r3, [r7, #20]
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	e7fd      	b.n	8007652 <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007658:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00d      	beq.n	800767c <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f805 	bl	8007686 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800767c:	69fb      	ldr	r3, [r7, #28]
	}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10d      	bne.n	80076b6 <prvInitialiseNewTimer+0x30>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	b672      	cpsid	i
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	b662      	cpsie	i
 80076ae:	617b      	str	r3, [r7, #20]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01e      	beq.n	80076fa <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80076bc:	f000 fafe 	bl	8007cbc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	6a3a      	ldr	r2, [r7, #32]
 80076d6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	3304      	adds	r3, #4
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe f985 	bl	80059ec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076ee:	f043 0304 	orr.w	r3, r3, #4
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80076fa:	bf00      	nop
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	@ 0x28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007712:	2300      	movs	r3, #0
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10d      	bne.n	8007738 <xTimerGenericCommand+0x34>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007720:	b672      	cpsid	i
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	b662      	cpsie	i
 8007730:	623b      	str	r3, [r7, #32]
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	e7fd      	b.n	8007734 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007738:	4b19      	ldr	r3, [pc, #100]	@ (80077a0 <xTimerGenericCommand+0x9c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02a      	beq.n	8007796 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b05      	cmp	r3, #5
 8007750:	dc18      	bgt.n	8007784 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007752:	f7ff fe01 	bl	8007358 <xTaskGetSchedulerState>
 8007756:	4603      	mov	r3, r0
 8007758:	2b02      	cmp	r3, #2
 800775a:	d109      	bne.n	8007770 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800775c:	4b10      	ldr	r3, [pc, #64]	@ (80077a0 <xTimerGenericCommand+0x9c>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	f107 0110 	add.w	r1, r7, #16
 8007764:	2300      	movs	r3, #0
 8007766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007768:	f7fe fb7a 	bl	8005e60 <xQueueGenericSend>
 800776c:	6278      	str	r0, [r7, #36]	@ 0x24
 800776e:	e012      	b.n	8007796 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007770:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <xTimerGenericCommand+0x9c>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	f107 0110 	add.w	r1, r7, #16
 8007778:	2300      	movs	r3, #0
 800777a:	2200      	movs	r2, #0
 800777c:	f7fe fb70 	bl	8005e60 <xQueueGenericSend>
 8007780:	6278      	str	r0, [r7, #36]	@ 0x24
 8007782:	e008      	b.n	8007796 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007784:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <xTimerGenericCommand+0x9c>)
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	f107 0110 	add.w	r1, r7, #16
 800778c:	2300      	movs	r3, #0
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	f7fe fc70 	bl	8006074 <xQueueGenericSendFromISR>
 8007794:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007798:	4618      	mov	r0, r3
 800779a:	3728      	adds	r7, #40	@ 0x28
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000fcc 	.word	0x20000fcc

080077a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ae:	4b24      	ldr	r3, [pc, #144]	@ (8007840 <prvProcessExpiredTimer+0x9c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe f97f 	bl	8005ac0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d025      	beq.n	800781c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	699a      	ldr	r2, [r3, #24]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	18d1      	adds	r1, r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	6978      	ldr	r0, [r7, #20]
 80077de:	f000 f8d7 	bl	8007990 <prvInsertTimerInActiveList>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d022      	beq.n	800782e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077e8:	2300      	movs	r3, #0
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	2300      	movs	r3, #0
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	2100      	movs	r1, #0
 80077f2:	6978      	ldr	r0, [r7, #20]
 80077f4:	f7ff ff86 	bl	8007704 <xTimerGenericCommand>
 80077f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d116      	bne.n	800782e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	b672      	cpsid	i
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	b662      	cpsie	i
 8007814:	60fb      	str	r3, [r7, #12]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007822:	f023 0301 	bic.w	r3, r3, #1
 8007826:	b2da      	uxtb	r2, r3
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	4798      	blx	r3
}
 8007836:	bf00      	nop
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000fc4 	.word	0x20000fc4

08007844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4618      	mov	r0, r3
 8007852:	f000 f859 	bl	8007908 <prvGetNextExpireTime>
 8007856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4619      	mov	r1, r3
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f805 	bl	800786c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007862:	f000 f8d7 	bl	8007a14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007866:	bf00      	nop
 8007868:	e7f0      	b.n	800784c <prvTimerTask+0x8>
	...

0800786c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007876:	f7ff f969 	bl	8006b4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800787a:	f107 0308 	add.w	r3, r7, #8
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f866 	bl	8007950 <prvSampleTimeNow>
 8007884:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d130      	bne.n	80078ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <prvProcessTimerOrBlockTask+0x3c>
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	429a      	cmp	r2, r3
 8007898:	d806      	bhi.n	80078a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800789a:	f7ff f965 	bl	8006b68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff ff7f 	bl	80077a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078a6:	e024      	b.n	80078f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078ae:	4b13      	ldr	r3, [pc, #76]	@ (80078fc <prvProcessTimerOrBlockTask+0x90>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <prvProcessTimerOrBlockTask+0x50>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <prvProcessTimerOrBlockTask+0x52>
 80078bc:	2300      	movs	r3, #0
 80078be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007900 <prvProcessTimerOrBlockTask+0x94>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f7fe fe97 	bl	8006600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078d2:	f7ff f949 	bl	8006b68 <xTaskResumeAll>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078dc:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <prvProcessTimerOrBlockTask+0x98>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
}
 80078ec:	e001      	b.n	80078f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078ee:	f7ff f93b 	bl	8006b68 <xTaskResumeAll>
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000fc8 	.word	0x20000fc8
 8007900:	20000fcc 	.word	0x20000fcc
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007910:	4b0e      	ldr	r3, [pc, #56]	@ (800794c <prvGetNextExpireTime+0x44>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <prvGetNextExpireTime+0x16>
 800791a:	2201      	movs	r2, #1
 800791c:	e000      	b.n	8007920 <prvGetNextExpireTime+0x18>
 800791e:	2200      	movs	r2, #0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d105      	bne.n	8007938 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800792c:	4b07      	ldr	r3, [pc, #28]	@ (800794c <prvGetNextExpireTime+0x44>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	e001      	b.n	800793c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800793c:	68fb      	ldr	r3, [r7, #12]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000fc4 	.word	0x20000fc4

08007950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007958:	f7ff f9a6 	bl	8006ca8 <xTaskGetTickCount>
 800795c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800795e:	4b0b      	ldr	r3, [pc, #44]	@ (800798c <prvSampleTimeNow+0x3c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d205      	bcs.n	8007974 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007968:	f000 f940 	bl	8007bec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e002      	b.n	800797a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800797a:	4a04      	ldr	r2, [pc, #16]	@ (800798c <prvSampleTimeNow+0x3c>)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000fd4 	.word	0x20000fd4

08007990 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d812      	bhi.n	80079dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e01b      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079ca:	4b10      	ldr	r3, [pc, #64]	@ (8007a0c <prvInsertTimerInActiveList+0x7c>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f7fe f83a 	bl	8005a4e <vListInsert>
 80079da:	e012      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d206      	bcs.n	80079f2 <prvInsertTimerInActiveList+0x62>
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e007      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079f2:	4b07      	ldr	r3, [pc, #28]	@ (8007a10 <prvInsertTimerInActiveList+0x80>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fe f826 	bl	8005a4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a02:	697b      	ldr	r3, [r7, #20]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000fc8 	.word	0x20000fc8
 8007a10:	20000fc4 	.word	0x20000fc4

08007a14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08e      	sub	sp, #56	@ 0x38
 8007a18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a1a:	e0d4      	b.n	8007bc6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da1b      	bge.n	8007a5a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	3304      	adds	r3, #4
 8007a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10d      	bne.n	8007a4a <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	b672      	cpsid	i
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	b662      	cpsie	i
 8007a42:	61fb      	str	r3, [r7, #28]
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop
 8007a48:	e7fd      	b.n	8007a46 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a50:	6850      	ldr	r0, [r2, #4]
 8007a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a54:	6892      	ldr	r2, [r2, #8]
 8007a56:	4611      	mov	r1, r2
 8007a58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f2c0 80b2 	blt.w	8007bc6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	3304      	adds	r3, #4
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe f824 	bl	8005ac0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a78:	463b      	mov	r3, r7
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff ff68 	bl	8007950 <prvSampleTimeNow>
 8007a80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b09      	cmp	r3, #9
 8007a86:	f200 809b 	bhi.w	8007bc0 <prvProcessReceivedCommands+0x1ac>
 8007a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a90 <prvProcessReceivedCommands+0x7c>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007ab9 	.word	0x08007ab9
 8007a9c:	08007b33 	.word	0x08007b33
 8007aa0:	08007b47 	.word	0x08007b47
 8007aa4:	08007b97 	.word	0x08007b97
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ab9 	.word	0x08007ab9
 8007ab0:	08007b33 	.word	0x08007b33
 8007ab4:	08007b47 	.word	0x08007b47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007abe:	f043 0301 	orr.w	r3, r3, #1
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	18d1      	adds	r1, r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ad8:	f7ff ff5a 	bl	8007990 <prvInsertTimerInActiveList>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d070      	beq.n	8007bc4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d065      	beq.n	8007bc4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	441a      	add	r2, r3
 8007b00:	2300      	movs	r3, #0
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	2100      	movs	r1, #0
 8007b08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b0a:	f7ff fdfb 	bl	8007704 <xTimerGenericCommand>
 8007b0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d156      	bne.n	8007bc4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	b672      	cpsid	i
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	b662      	cpsie	i
 8007b2a:	61bb      	str	r3, [r7, #24]
}
 8007b2c:	bf00      	nop
 8007b2e:	bf00      	nop
 8007b30:	e7fd      	b.n	8007b2e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b44:	e03f      	b.n	8007bc6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b4c:	f043 0301 	orr.w	r3, r3, #1
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10d      	bne.n	8007b82 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6a:	b672      	cpsid	i
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	b662      	cpsie	i
 8007b7a:	617b      	str	r3, [r7, #20]
}
 8007b7c:	bf00      	nop
 8007b7e:	bf00      	nop
 8007b80:	e7fd      	b.n	8007b7e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	18d1      	adds	r1, r2, r3
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b90:	f7ff fefe 	bl	8007990 <prvInsertTimerInActiveList>
					break;
 8007b94:	e017      	b.n	8007bc6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007ba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ba6:	f000 fbf5 	bl	8008394 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007baa:	e00c      	b.n	8007bc6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bbe:	e002      	b.n	8007bc6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007bc0:	bf00      	nop
 8007bc2:	e000      	b.n	8007bc6 <prvProcessReceivedCommands+0x1b2>
					break;
 8007bc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bc6:	4b08      	ldr	r3, [pc, #32]	@ (8007be8 <prvProcessReceivedCommands+0x1d4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	1d39      	adds	r1, r7, #4
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe faf4 	bl	80061bc <xQueueReceive>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f47f af20 	bne.w	8007a1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	3730      	adds	r7, #48	@ 0x30
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000fcc 	.word	0x20000fcc

08007bec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bf2:	e04b      	b.n	8007c8c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8007cb4 <prvSwitchTimerLists+0xc8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8007cb4 <prvSwitchTimerLists+0xc8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fd ff57 	bl	8005ac0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d031      	beq.n	8007c8c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4413      	add	r3, r2
 8007c30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d90e      	bls.n	8007c58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c46:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb4 <prvSwitchTimerLists+0xc8>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f7fd fefc 	bl	8005a4e <vListInsert>
 8007c56:	e019      	b.n	8007c8c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	2100      	movs	r1, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fd4e 	bl	8007704 <xTimerGenericCommand>
 8007c68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10d      	bne.n	8007c8c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	b672      	cpsid	i
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	b662      	cpsie	i
 8007c84:	603b      	str	r3, [r7, #0]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c8c:	4b09      	ldr	r3, [pc, #36]	@ (8007cb4 <prvSwitchTimerLists+0xc8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1ae      	bne.n	8007bf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c96:	4b07      	ldr	r3, [pc, #28]	@ (8007cb4 <prvSwitchTimerLists+0xc8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <prvSwitchTimerLists+0xcc>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a04      	ldr	r2, [pc, #16]	@ (8007cb4 <prvSwitchTimerLists+0xc8>)
 8007ca2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ca4:	4a04      	ldr	r2, [pc, #16]	@ (8007cb8 <prvSwitchTimerLists+0xcc>)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	6013      	str	r3, [r2, #0]
}
 8007caa:	bf00      	nop
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000fc4 	.word	0x20000fc4
 8007cb8:	20000fc8 	.word	0x20000fc8

08007cbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cc2:	f000 f96b 	bl	8007f9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cc6:	4b15      	ldr	r3, [pc, #84]	@ (8007d1c <prvCheckForValidListAndQueue+0x60>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d120      	bne.n	8007d10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cce:	4814      	ldr	r0, [pc, #80]	@ (8007d20 <prvCheckForValidListAndQueue+0x64>)
 8007cd0:	f7fd fe6c 	bl	80059ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cd4:	4813      	ldr	r0, [pc, #76]	@ (8007d24 <prvCheckForValidListAndQueue+0x68>)
 8007cd6:	f7fd fe69 	bl	80059ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cda:	4b13      	ldr	r3, [pc, #76]	@ (8007d28 <prvCheckForValidListAndQueue+0x6c>)
 8007cdc:	4a10      	ldr	r2, [pc, #64]	@ (8007d20 <prvCheckForValidListAndQueue+0x64>)
 8007cde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ce0:	4b12      	ldr	r3, [pc, #72]	@ (8007d2c <prvCheckForValidListAndQueue+0x70>)
 8007ce2:	4a10      	ldr	r2, [pc, #64]	@ (8007d24 <prvCheckForValidListAndQueue+0x68>)
 8007ce4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	4b11      	ldr	r3, [pc, #68]	@ (8007d30 <prvCheckForValidListAndQueue+0x74>)
 8007cec:	4a11      	ldr	r2, [pc, #68]	@ (8007d34 <prvCheckForValidListAndQueue+0x78>)
 8007cee:	2110      	movs	r1, #16
 8007cf0:	200a      	movs	r0, #10
 8007cf2:	f7fd ff7b 	bl	8005bec <xQueueGenericCreateStatic>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4a08      	ldr	r2, [pc, #32]	@ (8007d1c <prvCheckForValidListAndQueue+0x60>)
 8007cfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cfc:	4b07      	ldr	r3, [pc, #28]	@ (8007d1c <prvCheckForValidListAndQueue+0x60>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <prvCheckForValidListAndQueue+0x60>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	490b      	ldr	r1, [pc, #44]	@ (8007d38 <prvCheckForValidListAndQueue+0x7c>)
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fc4e 	bl	80065ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d10:	f000 f97a 	bl	8008008 <vPortExitCritical>
}
 8007d14:	bf00      	nop
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000fcc 	.word	0x20000fcc
 8007d20:	20000f9c 	.word	0x20000f9c
 8007d24:	20000fb0 	.word	0x20000fb0
 8007d28:	20000fc4 	.word	0x20000fc4
 8007d2c:	20000fc8 	.word	0x20000fc8
 8007d30:	20001078 	.word	0x20001078
 8007d34:	20000fd8 	.word	0x20000fd8
 8007d38:	08008930 	.word	0x08008930

08007d3c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10d      	bne.n	8007d6a <pvTimerGetTimerID+0x2e>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	b672      	cpsid	i
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	b662      	cpsie	i
 8007d62:	60fb      	str	r3, [r7, #12]
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	e7fd      	b.n	8007d66 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8007d6a:	f000 f917 	bl	8007f9c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007d74:	f000 f948 	bl	8008008 <vPortExitCritical>

	return pvReturn;
 8007d78:	693b      	ldr	r3, [r7, #16]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3b04      	subs	r3, #4
 8007d94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3b04      	subs	r3, #4
 8007da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f023 0201 	bic.w	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3b04      	subs	r3, #4
 8007db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007db4:	4a0c      	ldr	r2, [pc, #48]	@ (8007de8 <pxPortInitialiseStack+0x64>)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3b14      	subs	r3, #20
 8007dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3b04      	subs	r3, #4
 8007dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f06f 0202 	mvn.w	r2, #2
 8007dd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3b20      	subs	r3, #32
 8007dd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dda:	68fb      	ldr	r3, [r7, #12]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	08007ded 	.word	0x08007ded

08007dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007df6:	4b15      	ldr	r3, [pc, #84]	@ (8007e4c <prvTaskExitError+0x60>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfe:	d00d      	beq.n	8007e1c <prvTaskExitError+0x30>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e04:	b672      	cpsid	i
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	b662      	cpsie	i
 8007e14:	60fb      	str	r3, [r7, #12]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <prvTaskExitError+0x2c>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	b672      	cpsid	i
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	b662      	cpsie	i
 8007e30:	60bb      	str	r3, [r7, #8]
}
 8007e32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e34:	bf00      	nop
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0fc      	beq.n	8007e36 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	2000000c 	.word	0x2000000c

08007e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e50:	4b07      	ldr	r3, [pc, #28]	@ (8007e70 <pxCurrentTCBConst2>)
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	6808      	ldr	r0, [r1, #0]
 8007e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	f380 8809 	msr	PSP, r0
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f380 8811 	msr	BASEPRI, r0
 8007e6a:	4770      	bx	lr
 8007e6c:	f3af 8000 	nop.w

08007e70 <pxCurrentTCBConst2>:
 8007e70:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop

08007e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e78:	4808      	ldr	r0, [pc, #32]	@ (8007e9c <prvPortStartFirstTask+0x24>)
 8007e7a:	6800      	ldr	r0, [r0, #0]
 8007e7c:	6800      	ldr	r0, [r0, #0]
 8007e7e:	f380 8808 	msr	MSP, r0
 8007e82:	f04f 0000 	mov.w	r0, #0
 8007e86:	f380 8814 	msr	CONTROL, r0
 8007e8a:	b662      	cpsie	i
 8007e8c:	b661      	cpsie	f
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	df00      	svc	0
 8007e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e9a:	bf00      	nop
 8007e9c:	e000ed08 	.word	0xe000ed08

08007ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ea6:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <xPortStartScheduler+0xe4>)
 8007ea8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	22ff      	movs	r2, #255	@ 0xff
 8007eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4b2f      	ldr	r3, [pc, #188]	@ (8007f88 <xPortStartScheduler+0xe8>)
 8007ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ece:	4b2f      	ldr	r3, [pc, #188]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007ed0:	2207      	movs	r2, #7
 8007ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ed4:	e009      	b.n	8007eea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	4a2b      	ldr	r2, [pc, #172]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef2:	2b80      	cmp	r3, #128	@ 0x80
 8007ef4:	d0ef      	beq.n	8007ed6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ef6:	4b25      	ldr	r3, [pc, #148]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1c3 0307 	rsb	r3, r3, #7
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d00d      	beq.n	8007f1e <xPortStartScheduler+0x7e>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	b672      	cpsid	i
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	b662      	cpsie	i
 8007f16:	60bb      	str	r3, [r7, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	4a19      	ldr	r2, [pc, #100]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f28:	4b18      	ldr	r3, [pc, #96]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f30:	4a16      	ldr	r2, [pc, #88]	@ (8007f8c <xPortStartScheduler+0xec>)
 8007f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f3c:	4b14      	ldr	r3, [pc, #80]	@ (8007f90 <xPortStartScheduler+0xf0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a13      	ldr	r2, [pc, #76]	@ (8007f90 <xPortStartScheduler+0xf0>)
 8007f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f48:	4b11      	ldr	r3, [pc, #68]	@ (8007f90 <xPortStartScheduler+0xf0>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a10      	ldr	r2, [pc, #64]	@ (8007f90 <xPortStartScheduler+0xf0>)
 8007f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f54:	f000 f8dc 	bl	8008110 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f58:	4b0e      	ldr	r3, [pc, #56]	@ (8007f94 <xPortStartScheduler+0xf4>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f5e:	f000 f8fb 	bl	8008158 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f62:	4b0d      	ldr	r3, [pc, #52]	@ (8007f98 <xPortStartScheduler+0xf8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a0c      	ldr	r2, [pc, #48]	@ (8007f98 <xPortStartScheduler+0xf8>)
 8007f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f6e:	f7ff ff83 	bl	8007e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f72:	f7fe ff65 	bl	8006e40 <vTaskSwitchContext>
	prvTaskExitError();
 8007f76:	f7ff ff39 	bl	8007dec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000e400 	.word	0xe000e400
 8007f88:	200010c8 	.word	0x200010c8
 8007f8c:	200010cc 	.word	0x200010cc
 8007f90:	e000ed20 	.word	0xe000ed20
 8007f94:	2000000c 	.word	0x2000000c
 8007f98:	e000ef34 	.word	0xe000ef34

08007f9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	b672      	cpsid	i
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	b662      	cpsie	i
 8007fb6:	607b      	str	r3, [r7, #4]
}
 8007fb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fba:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <vPortEnterCritical+0x64>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8008000 <vPortEnterCritical+0x64>)
 8007fc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008000 <vPortEnterCritical+0x64>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d112      	bne.n	8007ff2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <vPortEnterCritical+0x68>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <vPortEnterCritical+0x56>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fda:	b672      	cpsid	i
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	b662      	cpsie	i
 8007fea:	603b      	str	r3, [r7, #0]
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	e7fd      	b.n	8007fee <vPortEnterCritical+0x52>
	}
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	2000000c 	.word	0x2000000c
 8008004:	e000ed04 	.word	0xe000ed04

08008008 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800800e:	4b13      	ldr	r3, [pc, #76]	@ (800805c <vPortExitCritical+0x54>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10d      	bne.n	8008032 <vPortExitCritical+0x2a>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801a:	b672      	cpsid	i
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	b662      	cpsie	i
 800802a:	607b      	str	r3, [r7, #4]
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	e7fd      	b.n	800802e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008032:	4b0a      	ldr	r3, [pc, #40]	@ (800805c <vPortExitCritical+0x54>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3b01      	subs	r3, #1
 8008038:	4a08      	ldr	r2, [pc, #32]	@ (800805c <vPortExitCritical+0x54>)
 800803a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800803c:	4b07      	ldr	r3, [pc, #28]	@ (800805c <vPortExitCritical+0x54>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d105      	bne.n	8008050 <vPortExitCritical+0x48>
 8008044:	2300      	movs	r3, #0
 8008046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f383 8811 	msr	BASEPRI, r3
}
 800804e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	2000000c 	.word	0x2000000c

08008060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008060:	f3ef 8009 	mrs	r0, PSP
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4b15      	ldr	r3, [pc, #84]	@ (80080c0 <pxCurrentTCBConst>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	f01e 0f10 	tst.w	lr, #16
 8008070:	bf08      	it	eq
 8008072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	6010      	str	r0, [r2, #0]
 800807c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008084:	b672      	cpsid	i
 8008086:	f380 8811 	msr	BASEPRI, r0
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	b662      	cpsie	i
 8008094:	f7fe fed4 	bl	8006e40 <vTaskSwitchContext>
 8008098:	f04f 0000 	mov.w	r0, #0
 800809c:	f380 8811 	msr	BASEPRI, r0
 80080a0:	bc09      	pop	{r0, r3}
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	6808      	ldr	r0, [r1, #0]
 80080a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	f01e 0f10 	tst.w	lr, #16
 80080ae:	bf08      	it	eq
 80080b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080b4:	f380 8809 	msr	PSP, r0
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <pxCurrentTCBConst>:
 80080c0:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	b672      	cpsid	i
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	b662      	cpsie	i
 80080e2:	607b      	str	r3, [r7, #4]
}
 80080e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080e6:	f7fe fdef 	bl	8006cc8 <xTaskIncrementTick>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080f0:	4b06      	ldr	r3, [pc, #24]	@ (800810c <SysTick_Handler+0x44>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	2300      	movs	r3, #0
 80080fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	f383 8811 	msr	BASEPRI, r3
}
 8008102:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	e000ed04 	.word	0xe000ed04

08008110 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008114:	4b0b      	ldr	r3, [pc, #44]	@ (8008144 <vPortSetupTimerInterrupt+0x34>)
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800811a:	4b0b      	ldr	r3, [pc, #44]	@ (8008148 <vPortSetupTimerInterrupt+0x38>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008120:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <vPortSetupTimerInterrupt+0x3c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a0a      	ldr	r2, [pc, #40]	@ (8008150 <vPortSetupTimerInterrupt+0x40>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	099b      	lsrs	r3, r3, #6
 800812c:	4a09      	ldr	r2, [pc, #36]	@ (8008154 <vPortSetupTimerInterrupt+0x44>)
 800812e:	3b01      	subs	r3, #1
 8008130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008132:	4b04      	ldr	r3, [pc, #16]	@ (8008144 <vPortSetupTimerInterrupt+0x34>)
 8008134:	2207      	movs	r2, #7
 8008136:	601a      	str	r2, [r3, #0]
}
 8008138:	bf00      	nop
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	e000e010 	.word	0xe000e010
 8008148:	e000e018 	.word	0xe000e018
 800814c:	20000000 	.word	0x20000000
 8008150:	10624dd3 	.word	0x10624dd3
 8008154:	e000e014 	.word	0xe000e014

08008158 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008158:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008168 <vPortEnableVFP+0x10>
 800815c:	6801      	ldr	r1, [r0, #0]
 800815e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008162:	6001      	str	r1, [r0, #0]
 8008164:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008166:	bf00      	nop
 8008168:	e000ed88 	.word	0xe000ed88

0800816c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008172:	f3ef 8305 	mrs	r3, IPSR
 8008176:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b0f      	cmp	r3, #15
 800817c:	d917      	bls.n	80081ae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800817e:	4a1a      	ldr	r2, [pc, #104]	@ (80081e8 <vPortValidateInterruptPriority+0x7c>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008188:	4b18      	ldr	r3, [pc, #96]	@ (80081ec <vPortValidateInterruptPriority+0x80>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	7afa      	ldrb	r2, [r7, #11]
 800818e:	429a      	cmp	r2, r3
 8008190:	d20d      	bcs.n	80081ae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	b672      	cpsid	i
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	b662      	cpsie	i
 80081a6:	607b      	str	r3, [r7, #4]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081ae:	4b10      	ldr	r3, [pc, #64]	@ (80081f0 <vPortValidateInterruptPriority+0x84>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081b6:	4b0f      	ldr	r3, [pc, #60]	@ (80081f4 <vPortValidateInterruptPriority+0x88>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d90d      	bls.n	80081da <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	b672      	cpsid	i
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	b662      	cpsie	i
 80081d2:	603b      	str	r3, [r7, #0]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <vPortValidateInterruptPriority+0x6a>
	}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	e000e3f0 	.word	0xe000e3f0
 80081ec:	200010c8 	.word	0x200010c8
 80081f0:	e000ed0c 	.word	0xe000ed0c
 80081f4:	200010cc 	.word	0x200010cc

080081f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	@ 0x28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008204:	f7fe fca2 	bl	8006b4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008208:	4b5d      	ldr	r3, [pc, #372]	@ (8008380 <pvPortMalloc+0x188>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008210:	f000 f920 	bl	8008454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008214:	4b5b      	ldr	r3, [pc, #364]	@ (8008384 <pvPortMalloc+0x18c>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8094 	bne.w	800834a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008228:	2208      	movs	r2, #8
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	2b00      	cmp	r3, #0
 8008238:	d017      	beq.n	800826a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f023 0307 	bic.w	r3, r3, #7
 8008240:	3308      	adds	r3, #8
 8008242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00d      	beq.n	800826a <pvPortMalloc+0x72>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	b672      	cpsid	i
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	b662      	cpsie	i
 8008262:	617b      	str	r3, [r7, #20]
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	e7fd      	b.n	8008266 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d06c      	beq.n	800834a <pvPortMalloc+0x152>
 8008270:	4b45      	ldr	r3, [pc, #276]	@ (8008388 <pvPortMalloc+0x190>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	429a      	cmp	r2, r3
 8008278:	d867      	bhi.n	800834a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800827a:	4b44      	ldr	r3, [pc, #272]	@ (800838c <pvPortMalloc+0x194>)
 800827c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800827e:	4b43      	ldr	r3, [pc, #268]	@ (800838c <pvPortMalloc+0x194>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008284:	e004      	b.n	8008290 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	429a      	cmp	r2, r3
 8008298:	d903      	bls.n	80082a2 <pvPortMalloc+0xaa>
 800829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f1      	bne.n	8008286 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082a2:	4b37      	ldr	r3, [pc, #220]	@ (8008380 <pvPortMalloc+0x188>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d04e      	beq.n	800834a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2208      	movs	r2, #8
 80082b2:	4413      	add	r3, r2
 80082b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	1ad2      	subs	r2, r2, r3
 80082c6:	2308      	movs	r3, #8
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d922      	bls.n	8008314 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4413      	add	r3, r2
 80082d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00d      	beq.n	80082fc <pvPortMalloc+0x104>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e4:	b672      	cpsid	i
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	b662      	cpsie	i
 80082f4:	613b      	str	r3, [r7, #16]
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	e7fd      	b.n	80082f8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800830e:	69b8      	ldr	r0, [r7, #24]
 8008310:	f000 f902 	bl	8008518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008314:	4b1c      	ldr	r3, [pc, #112]	@ (8008388 <pvPortMalloc+0x190>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	4a1a      	ldr	r2, [pc, #104]	@ (8008388 <pvPortMalloc+0x190>)
 8008320:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008322:	4b19      	ldr	r3, [pc, #100]	@ (8008388 <pvPortMalloc+0x190>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b1a      	ldr	r3, [pc, #104]	@ (8008390 <pvPortMalloc+0x198>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d203      	bcs.n	8008336 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800832e:	4b16      	ldr	r3, [pc, #88]	@ (8008388 <pvPortMalloc+0x190>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a17      	ldr	r2, [pc, #92]	@ (8008390 <pvPortMalloc+0x198>)
 8008334:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	4b12      	ldr	r3, [pc, #72]	@ (8008384 <pvPortMalloc+0x18c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	431a      	orrs	r2, r3
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800834a:	f7fe fc0d 	bl	8006b68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00d      	beq.n	8008374 <pvPortMalloc+0x17c>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	b672      	cpsid	i
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	b662      	cpsie	i
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <pvPortMalloc+0x178>
	return pvReturn;
 8008374:	69fb      	ldr	r3, [r7, #28]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3728      	adds	r7, #40	@ 0x28
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20004cd8 	.word	0x20004cd8
 8008384:	20004ce4 	.word	0x20004ce4
 8008388:	20004cdc 	.word	0x20004cdc
 800838c:	20004cd0 	.word	0x20004cd0
 8008390:	20004ce0 	.word	0x20004ce0

08008394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d04e      	beq.n	8008444 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083a6:	2308      	movs	r3, #8
 80083a8:	425b      	negs	r3, r3
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4413      	add	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	4b24      	ldr	r3, [pc, #144]	@ (800844c <vPortFree+0xb8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4013      	ands	r3, r2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10d      	bne.n	80083de <vPortFree+0x4a>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c6:	b672      	cpsid	i
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	b662      	cpsie	i
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00d      	beq.n	8008402 <vPortFree+0x6e>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	b672      	cpsid	i
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	b662      	cpsie	i
 80083fa:	60bb      	str	r3, [r7, #8]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	4b11      	ldr	r3, [pc, #68]	@ (800844c <vPortFree+0xb8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d019      	beq.n	8008444 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d115      	bne.n	8008444 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <vPortFree+0xb8>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	43db      	mvns	r3, r3
 8008422:	401a      	ands	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008428:	f7fe fb90 	bl	8006b4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	4b07      	ldr	r3, [pc, #28]	@ (8008450 <vPortFree+0xbc>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4413      	add	r3, r2
 8008436:	4a06      	ldr	r2, [pc, #24]	@ (8008450 <vPortFree+0xbc>)
 8008438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800843a:	6938      	ldr	r0, [r7, #16]
 800843c:	f000 f86c 	bl	8008518 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008440:	f7fe fb92 	bl	8006b68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008444:	bf00      	nop
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20004ce4 	.word	0x20004ce4
 8008450:	20004cdc 	.word	0x20004cdc

08008454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800845a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800845e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008460:	4b27      	ldr	r3, [pc, #156]	@ (8008500 <prvHeapInit+0xac>)
 8008462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00c      	beq.n	8008488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3307      	adds	r3, #7
 8008472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0307 	bic.w	r3, r3, #7
 800847a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	4a1f      	ldr	r2, [pc, #124]	@ (8008500 <prvHeapInit+0xac>)
 8008484:	4413      	add	r3, r2
 8008486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800848c:	4a1d      	ldr	r2, [pc, #116]	@ (8008504 <prvHeapInit+0xb0>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008492:	4b1c      	ldr	r3, [pc, #112]	@ (8008504 <prvHeapInit+0xb0>)
 8008494:	2200      	movs	r2, #0
 8008496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084a0:	2208      	movs	r2, #8
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0307 	bic.w	r3, r3, #7
 80084ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4a15      	ldr	r2, [pc, #84]	@ (8008508 <prvHeapInit+0xb4>)
 80084b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084b6:	4b14      	ldr	r3, [pc, #80]	@ (8008508 <prvHeapInit+0xb4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084be:	4b12      	ldr	r3, [pc, #72]	@ (8008508 <prvHeapInit+0xb4>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008508 <prvHeapInit+0xb4>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	4a0a      	ldr	r2, [pc, #40]	@ (800850c <prvHeapInit+0xb8>)
 80084e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	4a09      	ldr	r2, [pc, #36]	@ (8008510 <prvHeapInit+0xbc>)
 80084ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084ec:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <prvHeapInit+0xc0>)
 80084ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	200010d0 	.word	0x200010d0
 8008504:	20004cd0 	.word	0x20004cd0
 8008508:	20004cd8 	.word	0x20004cd8
 800850c:	20004ce0 	.word	0x20004ce0
 8008510:	20004cdc 	.word	0x20004cdc
 8008514:	20004ce4 	.word	0x20004ce4

08008518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008520:	4b28      	ldr	r3, [pc, #160]	@ (80085c4 <prvInsertBlockIntoFreeList+0xac>)
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e002      	b.n	800852c <prvInsertBlockIntoFreeList+0x14>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	429a      	cmp	r2, r3
 8008534:	d8f7      	bhi.n	8008526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	4413      	add	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	429a      	cmp	r2, r3
 8008546:	d108      	bne.n	800855a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	441a      	add	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	441a      	add	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d118      	bne.n	80085a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4b15      	ldr	r3, [pc, #84]	@ (80085c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d00d      	beq.n	8008596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	441a      	add	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e008      	b.n	80085a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008596:	4b0c      	ldr	r3, [pc, #48]	@ (80085c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	e003      	b.n	80085a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d002      	beq.n	80085b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085b6:	bf00      	nop
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20004cd0 	.word	0x20004cd0
 80085c8:	20004cd8 	.word	0x20004cd8

080085cc <memset>:
 80085cc:	4402      	add	r2, r0
 80085ce:	4603      	mov	r3, r0
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d100      	bne.n	80085d6 <memset+0xa>
 80085d4:	4770      	bx	lr
 80085d6:	f803 1b01 	strb.w	r1, [r3], #1
 80085da:	e7f9      	b.n	80085d0 <memset+0x4>

080085dc <_reclaim_reent>:
 80085dc:	4b29      	ldr	r3, [pc, #164]	@ (8008684 <_reclaim_reent+0xa8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4283      	cmp	r3, r0
 80085e2:	b570      	push	{r4, r5, r6, lr}
 80085e4:	4604      	mov	r4, r0
 80085e6:	d04b      	beq.n	8008680 <_reclaim_reent+0xa4>
 80085e8:	69c3      	ldr	r3, [r0, #28]
 80085ea:	b1ab      	cbz	r3, 8008618 <_reclaim_reent+0x3c>
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	b16b      	cbz	r3, 800860c <_reclaim_reent+0x30>
 80085f0:	2500      	movs	r5, #0
 80085f2:	69e3      	ldr	r3, [r4, #28]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	5959      	ldr	r1, [r3, r5]
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d13b      	bne.n	8008674 <_reclaim_reent+0x98>
 80085fc:	3504      	adds	r5, #4
 80085fe:	2d80      	cmp	r5, #128	@ 0x80
 8008600:	d1f7      	bne.n	80085f2 <_reclaim_reent+0x16>
 8008602:	69e3      	ldr	r3, [r4, #28]
 8008604:	4620      	mov	r0, r4
 8008606:	68d9      	ldr	r1, [r3, #12]
 8008608:	f000 f872 	bl	80086f0 <_free_r>
 800860c:	69e3      	ldr	r3, [r4, #28]
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	b111      	cbz	r1, 8008618 <_reclaim_reent+0x3c>
 8008612:	4620      	mov	r0, r4
 8008614:	f000 f86c 	bl	80086f0 <_free_r>
 8008618:	6961      	ldr	r1, [r4, #20]
 800861a:	b111      	cbz	r1, 8008622 <_reclaim_reent+0x46>
 800861c:	4620      	mov	r0, r4
 800861e:	f000 f867 	bl	80086f0 <_free_r>
 8008622:	69e1      	ldr	r1, [r4, #28]
 8008624:	b111      	cbz	r1, 800862c <_reclaim_reent+0x50>
 8008626:	4620      	mov	r0, r4
 8008628:	f000 f862 	bl	80086f0 <_free_r>
 800862c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800862e:	b111      	cbz	r1, 8008636 <_reclaim_reent+0x5a>
 8008630:	4620      	mov	r0, r4
 8008632:	f000 f85d 	bl	80086f0 <_free_r>
 8008636:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008638:	b111      	cbz	r1, 8008640 <_reclaim_reent+0x64>
 800863a:	4620      	mov	r0, r4
 800863c:	f000 f858 	bl	80086f0 <_free_r>
 8008640:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008642:	b111      	cbz	r1, 800864a <_reclaim_reent+0x6e>
 8008644:	4620      	mov	r0, r4
 8008646:	f000 f853 	bl	80086f0 <_free_r>
 800864a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800864c:	b111      	cbz	r1, 8008654 <_reclaim_reent+0x78>
 800864e:	4620      	mov	r0, r4
 8008650:	f000 f84e 	bl	80086f0 <_free_r>
 8008654:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008656:	b111      	cbz	r1, 800865e <_reclaim_reent+0x82>
 8008658:	4620      	mov	r0, r4
 800865a:	f000 f849 	bl	80086f0 <_free_r>
 800865e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008660:	b111      	cbz	r1, 8008668 <_reclaim_reent+0x8c>
 8008662:	4620      	mov	r0, r4
 8008664:	f000 f844 	bl	80086f0 <_free_r>
 8008668:	6a23      	ldr	r3, [r4, #32]
 800866a:	b14b      	cbz	r3, 8008680 <_reclaim_reent+0xa4>
 800866c:	4620      	mov	r0, r4
 800866e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008672:	4718      	bx	r3
 8008674:	680e      	ldr	r6, [r1, #0]
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f83a 	bl	80086f0 <_free_r>
 800867c:	4631      	mov	r1, r6
 800867e:	e7bb      	b.n	80085f8 <_reclaim_reent+0x1c>
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	bf00      	nop
 8008684:	20000010 	.word	0x20000010

08008688 <__libc_init_array>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4d0d      	ldr	r5, [pc, #52]	@ (80086c0 <__libc_init_array+0x38>)
 800868c:	4c0d      	ldr	r4, [pc, #52]	@ (80086c4 <__libc_init_array+0x3c>)
 800868e:	1b64      	subs	r4, r4, r5
 8008690:	10a4      	asrs	r4, r4, #2
 8008692:	2600      	movs	r6, #0
 8008694:	42a6      	cmp	r6, r4
 8008696:	d109      	bne.n	80086ac <__libc_init_array+0x24>
 8008698:	4d0b      	ldr	r5, [pc, #44]	@ (80086c8 <__libc_init_array+0x40>)
 800869a:	4c0c      	ldr	r4, [pc, #48]	@ (80086cc <__libc_init_array+0x44>)
 800869c:	f000 f87e 	bl	800879c <_init>
 80086a0:	1b64      	subs	r4, r4, r5
 80086a2:	10a4      	asrs	r4, r4, #2
 80086a4:	2600      	movs	r6, #0
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d105      	bne.n	80086b6 <__libc_init_array+0x2e>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b0:	4798      	blx	r3
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7ee      	b.n	8008694 <__libc_init_array+0xc>
 80086b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ba:	4798      	blx	r3
 80086bc:	3601      	adds	r6, #1
 80086be:	e7f2      	b.n	80086a6 <__libc_init_array+0x1e>
 80086c0:	08008a24 	.word	0x08008a24
 80086c4:	08008a24 	.word	0x08008a24
 80086c8:	08008a24 	.word	0x08008a24
 80086cc:	08008a28 	.word	0x08008a28

080086d0 <__retarget_lock_acquire_recursive>:
 80086d0:	4770      	bx	lr

080086d2 <__retarget_lock_release_recursive>:
 80086d2:	4770      	bx	lr

080086d4 <memcpy>:
 80086d4:	440a      	add	r2, r1
 80086d6:	4291      	cmp	r1, r2
 80086d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086dc:	d100      	bne.n	80086e0 <memcpy+0xc>
 80086de:	4770      	bx	lr
 80086e0:	b510      	push	{r4, lr}
 80086e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ea:	4291      	cmp	r1, r2
 80086ec:	d1f9      	bne.n	80086e2 <memcpy+0xe>
 80086ee:	bd10      	pop	{r4, pc}

080086f0 <_free_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4605      	mov	r5, r0
 80086f4:	2900      	cmp	r1, #0
 80086f6:	d041      	beq.n	800877c <_free_r+0x8c>
 80086f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fc:	1f0c      	subs	r4, r1, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfb8      	it	lt
 8008702:	18e4      	addlt	r4, r4, r3
 8008704:	f000 f83e 	bl	8008784 <__malloc_lock>
 8008708:	4a1d      	ldr	r2, [pc, #116]	@ (8008780 <_free_r+0x90>)
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	b933      	cbnz	r3, 800871c <_free_r+0x2c>
 800870e:	6063      	str	r3, [r4, #4]
 8008710:	6014      	str	r4, [r2, #0]
 8008712:	4628      	mov	r0, r5
 8008714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008718:	f000 b83a 	b.w	8008790 <__malloc_unlock>
 800871c:	42a3      	cmp	r3, r4
 800871e:	d908      	bls.n	8008732 <_free_r+0x42>
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	1821      	adds	r1, r4, r0
 8008724:	428b      	cmp	r3, r1
 8008726:	bf01      	itttt	eq
 8008728:	6819      	ldreq	r1, [r3, #0]
 800872a:	685b      	ldreq	r3, [r3, #4]
 800872c:	1809      	addeq	r1, r1, r0
 800872e:	6021      	streq	r1, [r4, #0]
 8008730:	e7ed      	b.n	800870e <_free_r+0x1e>
 8008732:	461a      	mov	r2, r3
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b10b      	cbz	r3, 800873c <_free_r+0x4c>
 8008738:	42a3      	cmp	r3, r4
 800873a:	d9fa      	bls.n	8008732 <_free_r+0x42>
 800873c:	6811      	ldr	r1, [r2, #0]
 800873e:	1850      	adds	r0, r2, r1
 8008740:	42a0      	cmp	r0, r4
 8008742:	d10b      	bne.n	800875c <_free_r+0x6c>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	4401      	add	r1, r0
 8008748:	1850      	adds	r0, r2, r1
 800874a:	4283      	cmp	r3, r0
 800874c:	6011      	str	r1, [r2, #0]
 800874e:	d1e0      	bne.n	8008712 <_free_r+0x22>
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	6053      	str	r3, [r2, #4]
 8008756:	4408      	add	r0, r1
 8008758:	6010      	str	r0, [r2, #0]
 800875a:	e7da      	b.n	8008712 <_free_r+0x22>
 800875c:	d902      	bls.n	8008764 <_free_r+0x74>
 800875e:	230c      	movs	r3, #12
 8008760:	602b      	str	r3, [r5, #0]
 8008762:	e7d6      	b.n	8008712 <_free_r+0x22>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	1821      	adds	r1, r4, r0
 8008768:	428b      	cmp	r3, r1
 800876a:	bf04      	itt	eq
 800876c:	6819      	ldreq	r1, [r3, #0]
 800876e:	685b      	ldreq	r3, [r3, #4]
 8008770:	6063      	str	r3, [r4, #4]
 8008772:	bf04      	itt	eq
 8008774:	1809      	addeq	r1, r1, r0
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	6054      	str	r4, [r2, #4]
 800877a:	e7ca      	b.n	8008712 <_free_r+0x22>
 800877c:	bd38      	pop	{r3, r4, r5, pc}
 800877e:	bf00      	nop
 8008780:	20004e24 	.word	0x20004e24

08008784 <__malloc_lock>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__malloc_lock+0x8>)
 8008786:	f7ff bfa3 	b.w	80086d0 <__retarget_lock_acquire_recursive>
 800878a:	bf00      	nop
 800878c:	20004e20 	.word	0x20004e20

08008790 <__malloc_unlock>:
 8008790:	4801      	ldr	r0, [pc, #4]	@ (8008798 <__malloc_unlock+0x8>)
 8008792:	f7ff bf9e 	b.w	80086d2 <__retarget_lock_release_recursive>
 8008796:	bf00      	nop
 8008798:	20004e20 	.word	0x20004e20

0800879c <_init>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr

080087a8 <_fini>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr
