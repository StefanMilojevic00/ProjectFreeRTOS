
AirQualityDetectorRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800a2b0  0800a2b0  0000b2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5a8  0800a5a8  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5a8  0800a5a8  0000b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b0  0800a5b0  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b0  0800a5b0  0000b5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800a5b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ddc  20000064  0800a61c  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e40  0800a61c  0000ce40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020619  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e47  00000000  00000000  0002c6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001350  00000000  00000000  00032e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd83  00000000  00000000  00034170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d88  00000000  00000000  0005fef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105324  00000000  00000000  00083c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188f9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b28  00000000  00000000  00188fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0018fb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a298 	.word	0x0800a298

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800a298 	.word	0x0800a298

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96a 	b.w	8000924 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	460c      	mov	r4, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d14e      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000674:	4694      	mov	ip, r2
 8000676:	458c      	cmp	ip, r1
 8000678:	4686      	mov	lr, r0
 800067a:	fab2 f282 	clz	r2, r2
 800067e:	d962      	bls.n	8000746 <__udivmoddi4+0xde>
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0320 	rsb	r3, r2, #32
 8000686:	4091      	lsls	r1, r2
 8000688:	fa20 f303 	lsr.w	r3, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	4319      	orrs	r1, r3
 8000692:	fa00 fe02 	lsl.w	lr, r0, r2
 8000696:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800069a:	fa1f f68c 	uxth.w	r6, ip
 800069e:	fbb1 f4f7 	udiv	r4, r1, r7
 80006a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006a6:	fb07 1114 	mls	r1, r7, r4, r1
 80006aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ae:	fb04 f106 	mul.w	r1, r4, r6
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80006be:	f080 8112 	bcs.w	80008e6 <__udivmoddi4+0x27e>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 810f 	bls.w	80008e6 <__udivmoddi4+0x27e>
 80006c8:	3c02      	subs	r4, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a59      	subs	r1, r3, r1
 80006ce:	fa1f f38e 	uxth.w	r3, lr
 80006d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006d6:	fb07 1110 	mls	r1, r7, r0, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb00 f606 	mul.w	r6, r0, r6
 80006e2:	429e      	cmp	r6, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x94>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ee:	f080 80fc 	bcs.w	80008ea <__udivmoddi4+0x282>
 80006f2:	429e      	cmp	r6, r3
 80006f4:	f240 80f9 	bls.w	80008ea <__udivmoddi4+0x282>
 80006f8:	4463      	add	r3, ip
 80006fa:	3802      	subs	r0, #2
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000702:	2100      	movs	r1, #0
 8000704:	b11d      	cbz	r5, 800070e <__udivmoddi4+0xa6>
 8000706:	40d3      	lsrs	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	e9c5 3200 	strd	r3, r2, [r5]
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d905      	bls.n	8000722 <__udivmoddi4+0xba>
 8000716:	b10d      	cbz	r5, 800071c <__udivmoddi4+0xb4>
 8000718:	e9c5 0100 	strd	r0, r1, [r5]
 800071c:	2100      	movs	r1, #0
 800071e:	4608      	mov	r0, r1
 8000720:	e7f5      	b.n	800070e <__udivmoddi4+0xa6>
 8000722:	fab3 f183 	clz	r1, r3
 8000726:	2900      	cmp	r1, #0
 8000728:	d146      	bne.n	80007b8 <__udivmoddi4+0x150>
 800072a:	42a3      	cmp	r3, r4
 800072c:	d302      	bcc.n	8000734 <__udivmoddi4+0xcc>
 800072e:	4290      	cmp	r0, r2
 8000730:	f0c0 80f0 	bcc.w	8000914 <__udivmoddi4+0x2ac>
 8000734:	1a86      	subs	r6, r0, r2
 8000736:	eb64 0303 	sbc.w	r3, r4, r3
 800073a:	2001      	movs	r0, #1
 800073c:	2d00      	cmp	r5, #0
 800073e:	d0e6      	beq.n	800070e <__udivmoddi4+0xa6>
 8000740:	e9c5 6300 	strd	r6, r3, [r5]
 8000744:	e7e3      	b.n	800070e <__udivmoddi4+0xa6>
 8000746:	2a00      	cmp	r2, #0
 8000748:	f040 8090 	bne.w	800086c <__udivmoddi4+0x204>
 800074c:	eba1 040c 	sub.w	r4, r1, ip
 8000750:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000754:	fa1f f78c 	uxth.w	r7, ip
 8000758:	2101      	movs	r1, #1
 800075a:	fbb4 f6f8 	udiv	r6, r4, r8
 800075e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000762:	fb08 4416 	mls	r4, r8, r6, r4
 8000766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800076a:	fb07 f006 	mul.w	r0, r7, r6
 800076e:	4298      	cmp	r0, r3
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x11c>
 8000772:	eb1c 0303 	adds.w	r3, ip, r3
 8000776:	f106 34ff 	add.w	r4, r6, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x11a>
 800077c:	4298      	cmp	r0, r3
 800077e:	f200 80cd 	bhi.w	800091c <__udivmoddi4+0x2b4>
 8000782:	4626      	mov	r6, r4
 8000784:	1a1c      	subs	r4, r3, r0
 8000786:	fa1f f38e 	uxth.w	r3, lr
 800078a:	fbb4 f0f8 	udiv	r0, r4, r8
 800078e:	fb08 4410 	mls	r4, r8, r0, r4
 8000792:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000796:	fb00 f707 	mul.w	r7, r0, r7
 800079a:	429f      	cmp	r7, r3
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x148>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a6:	d202      	bcs.n	80007ae <__udivmoddi4+0x146>
 80007a8:	429f      	cmp	r7, r3
 80007aa:	f200 80b0 	bhi.w	800090e <__udivmoddi4+0x2a6>
 80007ae:	4620      	mov	r0, r4
 80007b0:	1bdb      	subs	r3, r3, r7
 80007b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b6:	e7a5      	b.n	8000704 <__udivmoddi4+0x9c>
 80007b8:	f1c1 0620 	rsb	r6, r1, #32
 80007bc:	408b      	lsls	r3, r1
 80007be:	fa22 f706 	lsr.w	r7, r2, r6
 80007c2:	431f      	orrs	r7, r3
 80007c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c8:	fa04 f301 	lsl.w	r3, r4, r1
 80007cc:	ea43 030c 	orr.w	r3, r3, ip
 80007d0:	40f4      	lsrs	r4, r6
 80007d2:	fa00 f801 	lsl.w	r8, r0, r1
 80007d6:	0c38      	lsrs	r0, r7, #16
 80007d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007dc:	fbb4 fef0 	udiv	lr, r4, r0
 80007e0:	fa1f fc87 	uxth.w	ip, r7
 80007e4:	fb00 441e 	mls	r4, r0, lr, r4
 80007e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ec:	fb0e f90c 	mul.w	r9, lr, ip
 80007f0:	45a1      	cmp	r9, r4
 80007f2:	fa02 f201 	lsl.w	r2, r2, r1
 80007f6:	d90a      	bls.n	800080e <__udivmoddi4+0x1a6>
 80007f8:	193c      	adds	r4, r7, r4
 80007fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007fe:	f080 8084 	bcs.w	800090a <__udivmoddi4+0x2a2>
 8000802:	45a1      	cmp	r9, r4
 8000804:	f240 8081 	bls.w	800090a <__udivmoddi4+0x2a2>
 8000808:	f1ae 0e02 	sub.w	lr, lr, #2
 800080c:	443c      	add	r4, r7
 800080e:	eba4 0409 	sub.w	r4, r4, r9
 8000812:	fa1f f983 	uxth.w	r9, r3
 8000816:	fbb4 f3f0 	udiv	r3, r4, r0
 800081a:	fb00 4413 	mls	r4, r0, r3, r4
 800081e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000822:	fb03 fc0c 	mul.w	ip, r3, ip
 8000826:	45a4      	cmp	ip, r4
 8000828:	d907      	bls.n	800083a <__udivmoddi4+0x1d2>
 800082a:	193c      	adds	r4, r7, r4
 800082c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000830:	d267      	bcs.n	8000902 <__udivmoddi4+0x29a>
 8000832:	45a4      	cmp	ip, r4
 8000834:	d965      	bls.n	8000902 <__udivmoddi4+0x29a>
 8000836:	3b02      	subs	r3, #2
 8000838:	443c      	add	r4, r7
 800083a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800083e:	fba0 9302 	umull	r9, r3, r0, r2
 8000842:	eba4 040c 	sub.w	r4, r4, ip
 8000846:	429c      	cmp	r4, r3
 8000848:	46ce      	mov	lr, r9
 800084a:	469c      	mov	ip, r3
 800084c:	d351      	bcc.n	80008f2 <__udivmoddi4+0x28a>
 800084e:	d04e      	beq.n	80008ee <__udivmoddi4+0x286>
 8000850:	b155      	cbz	r5, 8000868 <__udivmoddi4+0x200>
 8000852:	ebb8 030e 	subs.w	r3, r8, lr
 8000856:	eb64 040c 	sbc.w	r4, r4, ip
 800085a:	fa04 f606 	lsl.w	r6, r4, r6
 800085e:	40cb      	lsrs	r3, r1
 8000860:	431e      	orrs	r6, r3
 8000862:	40cc      	lsrs	r4, r1
 8000864:	e9c5 6400 	strd	r6, r4, [r5]
 8000868:	2100      	movs	r1, #0
 800086a:	e750      	b.n	800070e <__udivmoddi4+0xa6>
 800086c:	f1c2 0320 	rsb	r3, r2, #32
 8000870:	fa20 f103 	lsr.w	r1, r0, r3
 8000874:	fa0c fc02 	lsl.w	ip, ip, r2
 8000878:	fa24 f303 	lsr.w	r3, r4, r3
 800087c:	4094      	lsls	r4, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000884:	fa00 fe02 	lsl.w	lr, r0, r2
 8000888:	fa1f f78c 	uxth.w	r7, ip
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3110 	mls	r1, r8, r0, r3
 8000894:	0c23      	lsrs	r3, r4, #16
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb00 f107 	mul.w	r1, r0, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x24c>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008aa:	d22c      	bcs.n	8000906 <__udivmoddi4+0x29e>
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d92a      	bls.n	8000906 <__udivmoddi4+0x29e>
 80008b0:	3802      	subs	r0, #2
 80008b2:	4463      	add	r3, ip
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008bc:	fb08 3311 	mls	r3, r8, r1, r3
 80008c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c4:	fb01 f307 	mul.w	r3, r1, r7
 80008c8:	42a3      	cmp	r3, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x276>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008d4:	d213      	bcs.n	80008fe <__udivmoddi4+0x296>
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	d911      	bls.n	80008fe <__udivmoddi4+0x296>
 80008da:	3902      	subs	r1, #2
 80008dc:	4464      	add	r4, ip
 80008de:	1ae4      	subs	r4, r4, r3
 80008e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008e4:	e739      	b.n	800075a <__udivmoddi4+0xf2>
 80008e6:	4604      	mov	r4, r0
 80008e8:	e6f0      	b.n	80006cc <__udivmoddi4+0x64>
 80008ea:	4608      	mov	r0, r1
 80008ec:	e706      	b.n	80006fc <__udivmoddi4+0x94>
 80008ee:	45c8      	cmp	r8, r9
 80008f0:	d2ae      	bcs.n	8000850 <__udivmoddi4+0x1e8>
 80008f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008fa:	3801      	subs	r0, #1
 80008fc:	e7a8      	b.n	8000850 <__udivmoddi4+0x1e8>
 80008fe:	4631      	mov	r1, r6
 8000900:	e7ed      	b.n	80008de <__udivmoddi4+0x276>
 8000902:	4603      	mov	r3, r0
 8000904:	e799      	b.n	800083a <__udivmoddi4+0x1d2>
 8000906:	4630      	mov	r0, r6
 8000908:	e7d4      	b.n	80008b4 <__udivmoddi4+0x24c>
 800090a:	46d6      	mov	lr, sl
 800090c:	e77f      	b.n	800080e <__udivmoddi4+0x1a6>
 800090e:	4463      	add	r3, ip
 8000910:	3802      	subs	r0, #2
 8000912:	e74d      	b.n	80007b0 <__udivmoddi4+0x148>
 8000914:	4606      	mov	r6, r0
 8000916:	4623      	mov	r3, r4
 8000918:	4608      	mov	r0, r1
 800091a:	e70f      	b.n	800073c <__udivmoddi4+0xd4>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	e730      	b.n	8000784 <__udivmoddi4+0x11c>
 8000922:	bf00      	nop

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	9308      	str	r3, [sp, #32]
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <AirQualityIncicatorInit+0x3c>)
 8000934:	9307      	str	r3, [sp, #28]
 8000936:	2301      	movs	r3, #1
 8000938:	9306      	str	r3, [sp, #24]
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <AirQualityIncicatorInit+0x40>)
 800093c:	9305      	str	r3, [sp, #20]
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	9304      	str	r3, [sp, #16]
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <AirQualityIncicatorInit+0x44>)
 8000944:	9303      	str	r3, [sp, #12]
 8000946:	2310      	movs	r3, #16
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <AirQualityIncicatorInit+0x48>)
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <AirQualityIncicatorInit+0x44>)
 8000954:	2240      	movs	r2, #64	@ 0x40
 8000956:	4907      	ldr	r1, [pc, #28]	@ (8000974 <AirQualityIncicatorInit+0x4c>)
 8000958:	4807      	ldr	r0, [pc, #28]	@ (8000978 <AirQualityIncicatorInit+0x50>)
 800095a:	f000 f919 	bl	8000b90 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021c00 	.word	0x40021c00
 8000968:	40022000 	.word	0x40022000
 800096c:	40021800 	.word	0x40021800
 8000970:	40020400 	.word	0x40020400
 8000974:	40020800 	.word	0x40020800
 8000978:	20000080 	.word	0x20000080

0800097c <SetIndicatorLEDsNum>:
{
	LedRowWrite(&loadConfiguration, PPM_Value);
}

void SetIndicatorLEDsNum(const uint8_t num)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4619      	mov	r1, r3
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <SetIndicatorLEDsNum+0x1c>)
 800098c:	f000 f932 	bl	8000bf4 <LedRowWriteNum>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000080 	.word	0x20000080

0800099c <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80009a0:	2204      	movs	r2, #4
 80009a2:	4903      	ldr	r1, [pc, #12]	@ (80009b0 <AlarmInit+0x14>)
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <AlarmInit+0x18>)
 80009a6:	f000 f891 	bl	8000acc <Buzzer_init>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000
 80009b4:	200000b0 	.word	0x200000b0

080009b8 <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	4613      	mov	r3, r2
 80009c4:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2200      	movs	r2, #0
 80009d0:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2201      	movs	r2, #1
 80009dc:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2201      	movs	r2, #1
 80009e2:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2200      	movs	r2, #0
 80009f4:	739a      	strb	r2, [r3, #14]
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d051      	beq.n	8000aba <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	899b      	ldrh	r3, [r3, #12]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4610      	mov	r0, r2
 8000a22:	f002 fb6d 	bl	8003100 <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7b9b      	ldrb	r3, [r3, #14]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d843      	bhi.n	8000aba <ReadButton+0xb6>
 8000a32:	a201      	add	r2, pc, #4	@ (adr r2, 8000a38 <ReadButton+0x34>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a61 	.word	0x08000a61
 8000a40:	08000a6f 	.word	0x08000a6f
 8000a44:	08000a97 	.word	0x08000a97
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	795b      	ldrb	r3, [r3, #5]
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d130      	bne.n	8000ab4 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000a5e:	e029      	b.n	8000ab4 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2202      	movs	r2, #2
 8000a64:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	70da      	strb	r2, [r3, #3]

                break;
 8000a6c:	e025      	b.n	8000aba <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d10a      	bne.n	8000a8e <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7bfa      	ldrb	r2, [r7, #15]
 8000a82:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2203      	movs	r2, #3
 8000a92:	739a      	strb	r2, [r3, #14]
                break;
 8000a94:	e011      	b.n	8000aba <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	7bfa      	ldrb	r2, [r7, #15]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d005      	beq.n	8000ab8 <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	739a      	strb	r2, [r3, #14]
                }
                break;
 8000ab2:	e001      	b.n	8000ab8 <ReadButton+0xb4>
                break;
 8000ab4:	bf00      	nop
 8000ab6:	e000      	b.n	8000aba <ReadButton+0xb6>
                break;
 8000ab8:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	78db      	ldrb	r3, [r3, #3]
 8000abe:	73bb      	strb	r3, [r7, #14]
    return retval;
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop

08000acc <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	88fa      	ldrh	r2, [r7, #6]
 8000ae4:	809a      	strh	r2, [r3, #4]
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	809a      	strh	r2, [r3, #4]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d008      	beq.n	8000b3c <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	889b      	ldrh	r3, [r3, #4]
 8000b32:	2201      	movs	r2, #1
 8000b34:	4619      	mov	r1, r3
 8000b36:	f002 fafb 	bl	8003130 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8000b3a:	e007      	b.n	8000b4c <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	889b      	ldrh	r3, [r3, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	f002 faf2 	bl	8003130 <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 8000b58:	2208      	movs	r2, #8
 8000b5a:	4903      	ldr	r1, [pc, #12]	@ (8000b68 <LED_init+0x14>)
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <LED_init+0x18>)
 8000b5e:	f7ff ffc8 	bl	8000af2 <CreateNewSingleLED>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000
 8000b6c:	200000b8 	.word	0x200000b8

08000b70 <LED_Drive>:

void LED_Drive(bool state)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4803      	ldr	r0, [pc, #12]	@ (8000b8c <LED_Drive+0x1c>)
 8000b80:	f7ff ffca 	bl	8000b18 <UpdateSingleLED>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000b8 	.word	0x200000b8

08000b90 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	88fa      	ldrh	r2, [r7, #6]
 8000baa:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	8b3a      	ldrh	r2, [r7, #24]
 8000bb6:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	8c3a      	ldrh	r2, [r7, #32]
 8000bc2:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc8:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000bce:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bd4:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000bda:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000be6:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LedRowWriteNum>:
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d877      	bhi.n	8000cf6 <LedRowWriteNum+0x102>
	{
		if(num > 0)
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d008      	beq.n	8000c1e <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	889b      	ldrh	r3, [r3, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	f002 fa8a 	bl	8003130 <HAL_GPIO_WritePin>
 8000c1c:	e007      	b.n	8000c2e <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	889b      	ldrh	r3, [r3, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f002 fa81 	bl	8003130 <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d908      	bls.n	8000c46 <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6898      	ldr	r0, [r3, #8]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	899b      	ldrh	r3, [r3, #12]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f002 fa76 	bl	8003130 <HAL_GPIO_WritePin>
 8000c44:	e007      	b.n	8000c56 <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6898      	ldr	r0, [r3, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	899b      	ldrh	r3, [r3, #12]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	f002 fa6d 	bl	8003130 <HAL_GPIO_WritePin>
		}

		if(num > 2)
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d908      	bls.n	8000c6e <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6918      	ldr	r0, [r3, #16]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	8a9b      	ldrh	r3, [r3, #20]
 8000c64:	2201      	movs	r2, #1
 8000c66:	4619      	mov	r1, r3
 8000c68:	f002 fa62 	bl	8003130 <HAL_GPIO_WritePin>
 8000c6c:	e007      	b.n	8000c7e <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6918      	ldr	r0, [r3, #16]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	8a9b      	ldrh	r3, [r3, #20]
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f002 fa59 	bl	8003130 <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d908      	bls.n	8000c96 <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6998      	ldr	r0, [r3, #24]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	8b9b      	ldrh	r3, [r3, #28]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f002 fa4e 	bl	8003130 <HAL_GPIO_WritePin>
 8000c94:	e007      	b.n	8000ca6 <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6998      	ldr	r0, [r3, #24]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	8b9b      	ldrh	r3, [r3, #28]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f002 fa45 	bl	8003130 <HAL_GPIO_WritePin>
		}

		if(num > 4)
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d908      	bls.n	8000cbe <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a18      	ldr	r0, [r3, #32]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f002 fa3a 	bl	8003130 <HAL_GPIO_WritePin>
 8000cbc:	e007      	b.n	8000cce <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a18      	ldr	r0, [r3, #32]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f002 fa31 	bl	8003130 <HAL_GPIO_WritePin>
		}

		if(num > 5)
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d908      	bls.n	8000ce6 <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f002 fa26 	bl	8003130 <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 8000ce4:	e007      	b.n	8000cf6 <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f002 fa1d 	bl	8003130 <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 8000d04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d08:	4902      	ldr	r1, [pc, #8]	@ (8000d14 <SignalSystemInit+0x14>)
 8000d0a:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <SignalSystemInit+0x18>)
 8000d0c:	f7ff fe54 	bl	80009b8 <CreateNewButton>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40022000 	.word	0x40022000
 8000d18:	200000c0 	.word	0x200000c0

08000d1c <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <ReadSignal+0x20>)
 8000d28:	f7ff fe6c 	bl	8000a04 <ReadButton>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]
	return Status;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000c0 	.word	0x200000c0

08000d40 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fa61 	bl	8000210 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	480e      	ldr	r0, [pc, #56]	@ (8000d94 <UART_TransmitString+0x54>)
 8000d5a:	f003 fe3d 	bl	80049d8 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <UART_TransmitString+0x58>)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	4611      	mov	r1, r2
 8000d68:	8019      	strh	r1, [r3, #0]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	0c12      	lsrs	r2, r2, #16
 8000d6e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa4b 	bl	8000210 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f107 010c 	add.w	r1, r7, #12
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <UART_TransmitString+0x54>)
 8000d88:	f003 fe26 	bl	80049d8 <HAL_UART_Transmit>
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000210 	.word	0x20000210
 8000d98:	0800a2b0 	.word	0x0800a2b0

08000d9c <UART_TransmitFloat>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

void UART_TransmitFloat(float data)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b090      	sub	sp, #64	@ 0x40
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fbee 	bl	8000588 <__aeabi_f2d>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	f107 000c 	add.w	r0, r7, #12
 8000db4:	490a      	ldr	r1, [pc, #40]	@ (8000de0 <UART_TransmitFloat+0x44>)
 8000db6:	f008 fd79 	bl	80098ac <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fa26 	bl	8000210 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	f107 010c 	add.w	r1, r7, #12
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <UART_TransmitFloat+0x48>)
 8000dd2:	f003 fe01 	bl	80049d8 <HAL_UART_Transmit>
}
 8000dd6:	bf00      	nop
 8000dd8:	3740      	adds	r7, #64	@ 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	0800a2b4 	.word	0x0800a2b4
 8000de4:	20000210 	.word	0x20000210

08000de8 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 8000df0:	4a36      	ldr	r2, [pc, #216]	@ (8000ecc <TerminalHandler+0xe4>)
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	8019      	strh	r1, [r3, #0]
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	0c12      	lsrs	r2, r2, #16
 8000e00:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 8000e02:	4a33      	ldr	r2, [pc, #204]	@ (8000ed0 <TerminalHandler+0xe8>)
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0c:	6018      	str	r0, [r3, #0]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	7019      	strb	r1, [r3, #0]

	if(huart->Instance == USART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed4 <TerminalHandler+0xec>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d14d      	bne.n	8000eb8 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d101      	bne.n	8000e28 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8000e24:	f000 f872 	bl	8000f0c <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8000e28:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <TerminalHandler+0xf4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b0d      	cmp	r3, #13
 8000e2e:	d02f      	beq.n	8000e90 <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <TerminalHandler+0xf4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d117      	bne.n	8000e68 <TerminalHandler+0x80>
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d013      	beq.n	8000e68 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <TerminalHandler+0xf8>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e56:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8000e58:	f107 010c 	add.w	r1, r7, #12
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	2205      	movs	r2, #5
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f003 fdb9 	bl	80049d8 <HAL_UART_Transmit>
 8000e66:	e00c      	b.n	8000e82 <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <TerminalHandler+0xf4>)
 8000e70:	7819      	ldrb	r1, [r3, #0]
 8000e72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <TerminalHandler+0xf8>)
 8000e74:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e80:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 8000e82:	230a      	movs	r3, #10
 8000e84:	2201      	movs	r2, #1
 8000e86:	4915      	ldr	r1, [pc, #84]	@ (8000edc <TerminalHandler+0xf4>)
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f003 fda5 	bl	80049d8 <HAL_UART_Transmit>
 8000e8e:	e013      	b.n	8000eb8 <TerminalHandler+0xd0>
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <TerminalHandler+0xf4>)
 8000e98:	7819      	ldrb	r1, [r3, #0]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <TerminalHandler+0xf8>)
 8000e9c:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <TerminalHandler+0xf0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <TerminalHandler+0xfc>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 8000eaa:	f107 0114 	add.w	r1, r7, #20
 8000eae:	230a      	movs	r3, #10
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f003 fd90 	bl	80049d8 <HAL_UART_Transmit>
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4908      	ldr	r1, [pc, #32]	@ (8000edc <TerminalHandler+0xf4>)
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f003 fe0e 	bl	8004ade <HAL_UART_Receive_IT>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	0800a2bc 	.word	0x0800a2bc
 8000ed0:	0800a2c0 	.word	0x0800a2c0
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	200000d0 	.word	0x200000d0
 8000edc:	200000d4 	.word	0x200000d4
 8000ee0:	200000d8 	.word	0x200000d8
 8000ee4:	200001a0 	.word	0x200001a0

08000ee8 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4905      	ldr	r1, [pc, #20]	@ (8000f08 <TerminalInit+0x20>)
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f003 fdf2 	bl	8004ade <HAL_UART_Receive_IT>
	ClearRxBuffer();
 8000efa:	f000 f807 	bl	8000f0c <ClearRxBuffer>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000d4 	.word	0x200000d4

08000f0c <ClearRxBuffer>:

void ClearRxBuffer()
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 200; counter++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	e007      	b.n	8000f28 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8000f18:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <ClearRxBuffer+0x34>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 200; counter++)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3301      	adds	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f2c:	ddf4      	ble.n	8000f18 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <ClearRxBuffer+0x38>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	200000d8 	.word	0x200000d8
 8000f44:	200001a0 	.word	0x200001a0

08000f48 <HAL_UART_RxCpltCallback>:
{
	return (char*)RxBuffer;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff49 	bl	8000de8 <TerminalHandler>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <DevicesInit>:
#include "Variables.h"

extern UART_HandleTypeDef huart1;

void DevicesInit()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	AlarmInit();
 8000f64:	f7ff fd1a 	bl	800099c <AlarmInit>
	SignalSystemInit();
 8000f68:	f7ff feca 	bl	8000d00 <SignalSystemInit>
	AirQualityIncicatorInit();
 8000f6c:	f7ff fcdc 	bl	8000928 <AirQualityIncicatorInit>
	LED_init();
 8000f70:	f7ff fdf0 	bl	8000b54 <LED_init>
	TerminalInit(&huart1);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <DevicesInit+0x20>)
 8000f76:	f7ff ffb7 	bl	8000ee8 <TerminalInit>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000210 	.word	0x20000210

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f001 f9ef 	bl	800236a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f89e 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 f9b0 	bl	80012f4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000f94:	f000 f90a 	bl	80011ac <MX_ADC3_Init>
  MX_CRC_Init();
 8000f98:	f000 f95a 	bl	8001250 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000f9c:	f000 f97a 	bl	8001294 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DevicesInit(); // This Method initialize whole app system
 8000fa0:	f7ff ffde 	bl	8000f60 <DevicesInit>
  LED_Drive(true);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fde3 	bl	8000b70 <LED_Drive>
  osTimerStop(ButtonTimerHandle);
 8000faa:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <main+0xe0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 f9c0 	bl	8006334 <osTimerStop>
  osTimerStart(LEDTimerHandle, 3000);
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <main+0xe4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 f979 	bl	80062b4 <osTimerStart>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc2:	f004 ff9f 	bl	8005f04 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RegimeMutex */
  RegimeMutexHandle = osMutexNew(&RegimeMutex_attributes);
 8000fc6:	4829      	ldr	r0, [pc, #164]	@ (800106c <main+0xe8>)
 8000fc8:	f005 f9fe 	bl	80063c8 <osMutexNew>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a28      	ldr	r2, [pc, #160]	@ (8001070 <main+0xec>)
 8000fd0:	6013      	str	r3, [r2, #0]

  /* creation of LED_Blink_Mutex */
  LED_Blink_MutexHandle = osMutexNew(&LED_Blink_Mutex_attributes);
 8000fd2:	4828      	ldr	r0, [pc, #160]	@ (8001074 <main+0xf0>)
 8000fd4:	f005 f9f8 	bl	80063c8 <osMutexNew>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a27      	ldr	r2, [pc, #156]	@ (8001078 <main+0xf4>)
 8000fdc:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8000fde:	4827      	ldr	r0, [pc, #156]	@ (800107c <main+0xf8>)
 8000fe0:	f005 f9f2 	bl	80063c8 <osMutexNew>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <main+0xfc>)
 8000fe8:	6013      	str	r3, [r2, #0]

  /* creation of LED_FSM_Mutex */
  LED_FSM_MutexHandle = osMutexNew(&LED_FSM_Mutex_attributes);
 8000fea:	4826      	ldr	r0, [pc, #152]	@ (8001084 <main+0x100>)
 8000fec:	f005 f9ec 	bl	80063c8 <osMutexNew>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a25      	ldr	r2, [pc, #148]	@ (8001088 <main+0x104>)
 8000ff4:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of LEDTimer */
  LEDTimerHandle = osTimerNew(LEDTimerCallback, osTimerPeriodic, NULL, &LEDTimer_attributes);
 8000ff6:	4b25      	ldr	r3, [pc, #148]	@ (800108c <main+0x108>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4824      	ldr	r0, [pc, #144]	@ (8001090 <main+0x10c>)
 8000ffe:	f005 f8d5 	bl	80061ac <osTimerNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a18      	ldr	r2, [pc, #96]	@ (8001068 <main+0xe4>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTimer */
  TransmitTimerHandle = osTimerNew(TransmitTimerCallback, osTimerPeriodic, NULL, &TransmitTimer_attributes);
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <main+0x110>)
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	4822      	ldr	r0, [pc, #136]	@ (8001098 <main+0x114>)
 8001010:	f005 f8cc 	bl	80061ac <osTimerNew>
 8001014:	4603      	mov	r3, r0
 8001016:	4a21      	ldr	r2, [pc, #132]	@ (800109c <main+0x118>)
 8001018:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(ButtonTimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 800101a:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <main+0x11c>)
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	4820      	ldr	r0, [pc, #128]	@ (80010a4 <main+0x120>)
 8001022:	f005 f8c3 	bl	80061ac <osTimerNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <main+0xe0>)
 800102a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 800102c:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <main+0x124>)
 800102e:	2100      	movs	r1, #0
 8001030:	481e      	ldr	r0, [pc, #120]	@ (80010ac <main+0x128>)
 8001032:	f004 ffd1 	bl	8005fd8 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <main+0x12c>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of TerminalTask */
  TerminalTaskHandle = osThreadNew(StartTerminalTask, NULL, &TerminalTask_attributes);
 800103c:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <main+0x130>)
 800103e:	2100      	movs	r1, #0
 8001040:	481d      	ldr	r0, [pc, #116]	@ (80010b8 <main+0x134>)
 8001042:	f004 ffc9 	bl	8005fd8 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <main+0x138>)
 800104a:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 800104c:	4a1c      	ldr	r2, [pc, #112]	@ (80010c0 <main+0x13c>)
 800104e:	2100      	movs	r1, #0
 8001050:	481c      	ldr	r0, [pc, #112]	@ (80010c4 <main+0x140>)
 8001052:	f004 ffc1 	bl	8005fd8 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <main+0x144>)
 800105a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800105c:	f004 ff86 	bl	8005f6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <main+0xdc>
 8001064:	200002ac 	.word	0x200002ac
 8001068:	200002a4 	.word	0x200002a4
 800106c:	0800a51c 	.word	0x0800a51c
 8001070:	200002b0 	.word	0x200002b0
 8001074:	0800a52c 	.word	0x0800a52c
 8001078:	200002b4 	.word	0x200002b4
 800107c:	0800a53c 	.word	0x0800a53c
 8001080:	200002b8 	.word	0x200002b8
 8001084:	0800a54c 	.word	0x0800a54c
 8001088:	200002bc 	.word	0x200002bc
 800108c:	0800a4ec 	.word	0x0800a4ec
 8001090:	08001cb5 	.word	0x08001cb5
 8001094:	0800a4fc 	.word	0x0800a4fc
 8001098:	08001ded 	.word	0x08001ded
 800109c:	200002a8 	.word	0x200002a8
 80010a0:	0800a50c 	.word	0x0800a50c
 80010a4:	08001e01 	.word	0x08001e01
 80010a8:	0800a480 	.word	0x0800a480
 80010ac:	08001bad 	.word	0x08001bad
 80010b0:	20000298 	.word	0x20000298
 80010b4:	0800a4a4 	.word	0x0800a4a4
 80010b8:	08001bbd 	.word	0x08001bbd
 80010bc:	2000029c 	.word	0x2000029c
 80010c0:	0800a4c8 	.word	0x0800a4c8
 80010c4:	08001bcd 	.word	0x08001bcd
 80010c8:	200002a0 	.word	0x200002a0

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	@ 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	@ 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 fc06 	bl	80098ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010f0:	f002 f838 	bl	8003164 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <SystemClock_Config+0xd8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	4a2a      	ldr	r2, [pc, #168]	@ (80011a4 <SystemClock_Config+0xd8>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <SystemClock_Config+0xd8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <SystemClock_Config+0xdc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a25      	ldr	r2, [pc, #148]	@ (80011a8 <SystemClock_Config+0xdc>)
 8001112:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <SystemClock_Config+0xdc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001128:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001132:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001138:	2319      	movs	r3, #25
 800113a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800113c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001140:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001146:	2309      	movs	r3, #9
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	4618      	mov	r0, r3
 8001150:	f002 f868 	bl	8003224 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800115a:	f000 feb9 	bl	8001ed0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800115e:	f002 f811 	bl	8003184 <HAL_PWREx_EnableOverDrive>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001168:	f000 feb2 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2106      	movs	r1, #6
 800118a:	4618      	mov	r0, r3
 800118c:	f002 faee 	bl	800376c <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001196:	f000 fe9b 	bl	8001ed0 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3750      	adds	r7, #80	@ 0x50
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011c0:	4a21      	ldr	r2, [pc, #132]	@ (8001248 <MX_ADC3_Init+0x9c>)
 80011c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011ee:	4a17      	ldr	r2, [pc, #92]	@ (800124c <MX_ADC3_Init+0xa0>)
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_ADC3_Init+0x98>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_ADC3_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_ADC3_Init+0x98>)
 8001208:	2201      	movs	r2, #1
 800120a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_ADC3_Init+0x98>)
 800120e:	f001 f8d9 	bl	80023c4 <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001218:	f000 fe5a 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2301      	movs	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ADC3_Init+0x98>)
 800122e:	f001 f90d 	bl	800244c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001238:	f000 fe4a 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001a4 	.word	0x200001a4
 8001248:	40012200 	.word	0x40012200
 800124c:	0f000001 	.word	0x0f000001

08001250 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <MX_CRC_Init+0x3c>)
 8001256:	4a0e      	ldr	r2, [pc, #56]	@ (8001290 <MX_CRC_Init+0x40>)
 8001258:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_CRC_Init+0x3c>)
 800125c:	2200      	movs	r2, #0
 800125e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <MX_CRC_Init+0x3c>)
 8001262:	2200      	movs	r2, #0
 8001264:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_CRC_Init+0x3c>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <MX_CRC_Init+0x3c>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_CRC_Init+0x3c>)
 8001274:	2201      	movs	r2, #1
 8001276:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_CRC_Init+0x3c>)
 800127a:	f001 fc19 	bl	8002ab0 <HAL_CRC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001284:	f000 fe24 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001ec 	.word	0x200001ec
 8001290:	40023000 	.word	0x40023000

08001294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 800129a:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <MX_USART1_UART_Init+0x5c>)
 800129c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800129e:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012d8:	f003 fb30 	bl	800493c <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 fdf5 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000210 	.word	0x20000210
 80012f0:	40011000 	.word	0x40011000

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	@ 0x40
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	4baf      	ldr	r3, [pc, #700]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4aae      	ldr	r2, [pc, #696]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001310:	f043 0310 	orr.w	r3, r3, #16
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4bac      	ldr	r3, [pc, #688]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	4ba9      	ldr	r3, [pc, #676]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4aa8      	ldr	r2, [pc, #672]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4ba6      	ldr	r3, [pc, #664]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4ba3      	ldr	r3, [pc, #652]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4aa2      	ldr	r2, [pc, #648]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4ba0      	ldr	r3, [pc, #640]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001352:	4b9d      	ldr	r3, [pc, #628]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a9c      	ldr	r2, [pc, #624]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b9a      	ldr	r3, [pc, #616]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b97      	ldr	r3, [pc, #604]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a96      	ldr	r2, [pc, #600]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b94      	ldr	r3, [pc, #592]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b91      	ldr	r3, [pc, #580]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a90      	ldr	r2, [pc, #576]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b8e      	ldr	r3, [pc, #568]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800139a:	4b8b      	ldr	r3, [pc, #556]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a8a      	ldr	r2, [pc, #552]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b88      	ldr	r3, [pc, #544]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013b2:	4b85      	ldr	r3, [pc, #532]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a84      	ldr	r2, [pc, #528]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b82      	ldr	r3, [pc, #520]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013ca:	4b7f      	ldr	r3, [pc, #508]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a7e      	ldr	r2, [pc, #504]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b7c      	ldr	r3, [pc, #496]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e2:	4b79      	ldr	r3, [pc, #484]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a78      	ldr	r2, [pc, #480]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013e8:	f043 0320 	orr.w	r3, r3, #32
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b76      	ldr	r3, [pc, #472]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	4b73      	ldr	r3, [pc, #460]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a72      	ldr	r2, [pc, #456]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b70      	ldr	r3, [pc, #448]	@ (80015c8 <MX_GPIO_Init+0x2d4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2110      	movs	r1, #16
 8001416:	486d      	ldr	r0, [pc, #436]	@ (80015cc <MX_GPIO_Init+0x2d8>)
 8001418:	f001 fe8a 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	486b      	ldr	r0, [pc, #428]	@ (80015d0 <MX_GPIO_Init+0x2dc>)
 8001422:	f001 fe85 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	210d      	movs	r1, #13
 800142a:	486a      	ldr	r0, [pc, #424]	@ (80015d4 <MX_GPIO_Init+0x2e0>)
 800142c:	f001 fe80 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2108      	movs	r1, #8
 8001434:	4868      	ldr	r0, [pc, #416]	@ (80015d8 <MX_GPIO_Init+0x2e4>)
 8001436:	f001 fe7b 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001440:	4864      	ldr	r0, [pc, #400]	@ (80015d4 <MX_GPIO_Init+0x2e0>)
 8001442:	f001 fe75 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 800144c:	4863      	ldr	r0, [pc, #396]	@ (80015dc <MX_GPIO_Init+0x2e8>)
 800144e:	f001 fe6f 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	@ 0x40
 8001456:	4862      	ldr	r0, [pc, #392]	@ (80015e0 <MX_GPIO_Init+0x2ec>)
 8001458:	f001 fe6a 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	21c8      	movs	r1, #200	@ 0xc8
 8001460:	4860      	ldr	r0, [pc, #384]	@ (80015e4 <MX_GPIO_Init+0x2f0>)
 8001462:	f001 fe65 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001466:	2310      	movs	r3, #16
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001476:	230e      	movs	r3, #14
 8001478:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800147e:	4619      	mov	r1, r3
 8001480:	4859      	ldr	r0, [pc, #356]	@ (80015e8 <MX_GPIO_Init+0x2f4>)
 8001482:	f001 fc91 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001486:	2308      	movs	r3, #8
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001496:	4619      	mov	r1, r3
 8001498:	4853      	ldr	r0, [pc, #332]	@ (80015e8 <MX_GPIO_Init+0x2f4>)
 800149a:	f001 fc85 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800149e:	2304      	movs	r3, #4
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014ae:	2309      	movs	r3, #9
 80014b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b6:	4619      	mov	r1, r3
 80014b8:	484b      	ldr	r0, [pc, #300]	@ (80015e8 <MX_GPIO_Init+0x2f4>)
 80014ba:	f001 fc75 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80014be:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d0:	230b      	movs	r3, #11
 80014d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014d8:	4619      	mov	r1, r3
 80014da:	4842      	ldr	r0, [pc, #264]	@ (80015e4 <MX_GPIO_Init+0x2f0>)
 80014dc:	f001 fc64 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80014e0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f2:	230c      	movs	r3, #12
 80014f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014fa:	4619      	mov	r1, r3
 80014fc:	483a      	ldr	r0, [pc, #232]	@ (80015e8 <MX_GPIO_Init+0x2f4>)
 80014fe:	f001 fc53 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001502:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001508:	2312      	movs	r3, #18
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001514:	2304      	movs	r3, #4
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800151c:	4619      	mov	r1, r3
 800151e:	482b      	ldr	r0, [pc, #172]	@ (80015cc <MX_GPIO_Init+0x2d8>)
 8001520:	f001 fc42 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8001524:	2310      	movs	r3, #16
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800152c:	2302      	movs	r3, #2
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001538:	4619      	mov	r1, r3
 800153a:	4824      	ldr	r0, [pc, #144]	@ (80015cc <MX_GPIO_Init+0x2d8>)
 800153c:	f001 fc34 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001550:	2308      	movs	r3, #8
 8001552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001558:	4619      	mov	r1, r3
 800155a:	481d      	ldr	r0, [pc, #116]	@ (80015d0 <MX_GPIO_Init+0x2dc>)
 800155c:	f001 fc24 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001560:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001572:	230c      	movs	r3, #12
 8001574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800157a:	4619      	mov	r1, r3
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_GPIO_Init+0x2ec>)
 800157e:	f001 fc13 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001594:	2301      	movs	r3, #1
 8001596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159c:	4619      	mov	r1, r3
 800159e:	4813      	ldr	r0, [pc, #76]	@ (80015ec <MX_GPIO_Init+0x2f8>)
 80015a0:	f001 fc02 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80015a4:	2360      	movs	r3, #96	@ 0x60
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015b4:	230d      	movs	r3, #13
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015bc:	4619      	mov	r1, r3
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <MX_GPIO_Init+0x2f4>)
 80015c0:	f001 fbf2 	bl	8002da8 <HAL_GPIO_Init>
 80015c4:	e014      	b.n	80015f0 <MX_GPIO_Init+0x2fc>
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40022800 	.word	0x40022800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40021800 	.word	0x40021800
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80015f0:	2340      	movs	r3, #64	@ 0x40
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001600:	230a      	movs	r3, #10
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001608:	4619      	mov	r1, r3
 800160a:	48bc      	ldr	r0, [pc, #752]	@ (80018fc <MX_GPIO_Init+0x608>)
 800160c:	f001 fbcc 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001610:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001622:	230c      	movs	r3, #12
 8001624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	48b4      	ldr	r0, [pc, #720]	@ (8001900 <MX_GPIO_Init+0x60c>)
 800162e:	f001 fbbb 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001632:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001644:	230e      	movs	r3, #14
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001648:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800164c:	4619      	mov	r1, r3
 800164e:	48ad      	ldr	r0, [pc, #692]	@ (8001904 <MX_GPIO_Init+0x610>)
 8001650:	f001 fbaa 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001666:	4619      	mov	r1, r3
 8001668:	48a6      	ldr	r0, [pc, #664]	@ (8001904 <MX_GPIO_Init+0x610>)
 800166a:	f001 fb9d 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800166e:	2340      	movs	r3, #64	@ 0x40
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001672:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001680:	4619      	mov	r1, r3
 8001682:	48a1      	ldr	r0, [pc, #644]	@ (8001908 <MX_GPIO_Init+0x614>)
 8001684:	f001 fb90 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001688:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800169a:	230c      	movs	r3, #12
 800169c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016a2:	4619      	mov	r1, r3
 80016a4:	4898      	ldr	r0, [pc, #608]	@ (8001908 <MX_GPIO_Init+0x614>)
 80016a6:	f001 fb7f 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80016aa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016bc:	230a      	movs	r3, #10
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4891      	ldr	r0, [pc, #580]	@ (800190c <MX_GPIO_Init+0x618>)
 80016c8:	f001 fb6e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80016cc:	23f0      	movs	r3, #240	@ 0xf0
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80016dc:	230a      	movs	r3, #10
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e4:	4619      	mov	r1, r3
 80016e6:	488a      	ldr	r0, [pc, #552]	@ (8001910 <MX_GPIO_Init+0x61c>)
 80016e8:	f001 fb5e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80016ec:	23f7      	movs	r3, #247	@ 0xf7
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016fc:	230e      	movs	r3, #14
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001700:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001704:	4619      	mov	r1, r3
 8001706:	4883      	ldr	r0, [pc, #524]	@ (8001914 <MX_GPIO_Init+0x620>)
 8001708:	f001 fb4e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800170c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800171e:	2309      	movs	r3, #9
 8001720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001726:	4619      	mov	r1, r3
 8001728:	4875      	ldr	r0, [pc, #468]	@ (8001900 <MX_GPIO_Init+0x60c>)
 800172a:	f001 fb3d 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800172e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001740:	230a      	movs	r3, #10
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001748:	4619      	mov	r1, r3
 800174a:	486d      	ldr	r0, [pc, #436]	@ (8001900 <MX_GPIO_Init+0x60c>)
 800174c:	f001 fb2c 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001750:	2320      	movs	r3, #32
 8001752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	4868      	ldr	r0, [pc, #416]	@ (8001908 <MX_GPIO_Init+0x614>)
 8001768:	f001 fb1e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800176c:	2308      	movs	r3, #8
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800177c:	230d      	movs	r3, #13
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	4860      	ldr	r0, [pc, #384]	@ (8001908 <MX_GPIO_Init+0x614>)
 8001788:	f001 fb0e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 800178c:	230d      	movs	r3, #13
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001794:	2302      	movs	r3, #2
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800179c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	485b      	ldr	r0, [pc, #364]	@ (8001910 <MX_GPIO_Init+0x61c>)
 80017a4:	f001 fb00 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80017a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ba:	4619      	mov	r1, r3
 80017bc:	4856      	ldr	r0, [pc, #344]	@ (8001918 <MX_GPIO_Init+0x624>)
 80017be:	f001 faf3 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80017c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d4:	230c      	movs	r3, #12
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017dc:	4619      	mov	r1, r3
 80017de:	484f      	ldr	r0, [pc, #316]	@ (800191c <MX_GPIO_Init+0x628>)
 80017e0:	f001 fae2 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80017e4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017f6:	230e      	movs	r3, #14
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017fe:	4619      	mov	r1, r3
 8001800:	4843      	ldr	r0, [pc, #268]	@ (8001910 <MX_GPIO_Init+0x61c>)
 8001802:	f001 fad1 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001806:	2308      	movs	r3, #8
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	483d      	ldr	r0, [pc, #244]	@ (8001914 <MX_GPIO_Init+0x620>)
 800181e:	f001 fac3 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001834:	230d      	movs	r3, #13
 8001836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	4830      	ldr	r0, [pc, #192]	@ (8001900 <MX_GPIO_Init+0x60c>)
 8001840:	f001 fab2 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001844:	2310      	movs	r3, #16
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	482c      	ldr	r0, [pc, #176]	@ (8001908 <MX_GPIO_Init+0x614>)
 8001858:	f001 faa6 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800185c:	2304      	movs	r3, #4
 800185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800186c:	230c      	movs	r3, #12
 800186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4824      	ldr	r0, [pc, #144]	@ (8001908 <MX_GPIO_Init+0x614>)
 8001878:	f001 fa96 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800187c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001882:	2300      	movs	r3, #0
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800188a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800188e:	4619      	mov	r1, r3
 8001890:	4823      	ldr	r0, [pc, #140]	@ (8001920 <MX_GPIO_Init+0x62c>)
 8001892:	f001 fa89 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001896:	2302      	movs	r3, #2
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a6:	2305      	movs	r3, #5
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ae:	4619      	mov	r1, r3
 80018b0:	4817      	ldr	r0, [pc, #92]	@ (8001910 <MX_GPIO_Init+0x61c>)
 80018b2:	f001 fa79 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80018b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4810      	ldr	r0, [pc, #64]	@ (8001910 <MX_GPIO_Init+0x61c>)
 80018d0:	f001 fa6a 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ea:	4619      	mov	r1, r3
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <MX_GPIO_Init+0x62c>)
 80018ee:	f001 fa5b 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80018f2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	e013      	b.n	8001924 <MX_GPIO_Init+0x630>
 80018fc:	40020400 	.word	0x40020400
 8001900:	40021800 	.word	0x40021800
 8001904:	40022400 	.word	0x40022400
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40020000 	.word	0x40020000
 8001910:	40022000 	.word	0x40022000
 8001914:	40022800 	.word	0x40022800
 8001918:	40020800 	.word	0x40020800
 800191c:	40021400 	.word	0x40021400
 8001920:	40021c00 	.word	0x40021c00
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800192e:	230d      	movs	r3, #13
 8001930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001932:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001936:	4619      	mov	r1, r3
 8001938:	4895      	ldr	r0, [pc, #596]	@ (8001b90 <MX_GPIO_Init+0x89c>)
 800193a:	f001 fa35 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 800193e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001948:	2302      	movs	r3, #2
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	4890      	ldr	r0, [pc, #576]	@ (8001b94 <MX_GPIO_Init+0x8a0>)
 8001954:	f001 fa28 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800196a:	2301      	movs	r3, #1
 800196c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001972:	4619      	mov	r1, r3
 8001974:	4888      	ldr	r0, [pc, #544]	@ (8001b98 <MX_GPIO_Init+0x8a4>)
 8001976:	f001 fa17 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800197a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001980:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001984:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	4880      	ldr	r0, [pc, #512]	@ (8001b94 <MX_GPIO_Init+0x8a0>)
 8001992:	f001 fa09 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019a6:	2308      	movs	r3, #8
 80019a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	487a      	ldr	r0, [pc, #488]	@ (8001b9c <MX_GPIO_Init+0x8a8>)
 80019b2:	f001 f9f9 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 80019b6:	2340      	movs	r3, #64	@ 0x40
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019be:	2302      	movs	r3, #2
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	4873      	ldr	r0, [pc, #460]	@ (8001b9c <MX_GPIO_Init+0x8a8>)
 80019ce:	f001 f9eb 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80019d2:	2328      	movs	r3, #40	@ 0x28
 80019d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e2:	230c      	movs	r3, #12
 80019e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ea:	4619      	mov	r1, r3
 80019ec:	4868      	ldr	r0, [pc, #416]	@ (8001b90 <MX_GPIO_Init+0x89c>)
 80019ee:	f001 f9db 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 80019f2:	23c0      	movs	r3, #192	@ 0xc0
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019fa:	2302      	movs	r3, #2
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4865      	ldr	r0, [pc, #404]	@ (8001ba0 <MX_GPIO_Init+0x8ac>)
 8001a0a:	f001 f9cd 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	485c      	ldr	r0, [pc, #368]	@ (8001b9c <MX_GPIO_Init+0x8a8>)
 8001a2a:	f001 f9bd 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a2e:	2332      	movs	r3, #50	@ 0x32
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a3e:	230b      	movs	r3, #11
 8001a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a46:	4619      	mov	r1, r3
 8001a48:	4854      	ldr	r0, [pc, #336]	@ (8001b9c <MX_GPIO_Init+0x8a8>)
 8001a4a:	f001 f9ad 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a5e:	2309      	movs	r3, #9
 8001a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a66:	4619      	mov	r1, r3
 8001a68:	484e      	ldr	r0, [pc, #312]	@ (8001ba4 <MX_GPIO_Init+0x8b0>)
 8001a6a:	f001 f99d 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001a6e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a80:	2309      	movs	r3, #9
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4847      	ldr	r0, [pc, #284]	@ (8001ba8 <MX_GPIO_Init+0x8b4>)
 8001a8c:	f001 f98c 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001a90:	2308      	movs	r3, #8
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	483e      	ldr	r0, [pc, #248]	@ (8001ba0 <MX_GPIO_Init+0x8ac>)
 8001aa8:	f001 f97e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001aac:	2304      	movs	r3, #4
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001abc:	4619      	mov	r1, r3
 8001abe:	4838      	ldr	r0, [pc, #224]	@ (8001ba0 <MX_GPIO_Init+0x8ac>)
 8001ac0:	f001 f972 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ac4:	2386      	movs	r3, #134	@ 0x86
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad4:	230b      	movs	r3, #11
 8001ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	482e      	ldr	r0, [pc, #184]	@ (8001b98 <MX_GPIO_Init+0x8a4>)
 8001ae0:	f001 f962 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ae4:	2350      	movs	r3, #80	@ 0x50
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001af4:	230d      	movs	r3, #13
 8001af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001afc:	4619      	mov	r1, r3
 8001afe:	4826      	ldr	r0, [pc, #152]	@ (8001b98 <MX_GPIO_Init+0x8a4>)
 8001b00:	f001 f952 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001b04:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0a:	2312      	movs	r3, #18
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b16:	2304      	movs	r3, #4
 8001b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481b      	ldr	r0, [pc, #108]	@ (8001b90 <MX_GPIO_Init+0x89c>)
 8001b22:	f001 f941 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8001b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b40:	4619      	mov	r1, r3
 8001b42:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <MX_GPIO_Init+0x8b0>)
 8001b44:	f001 f930 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 8001b48:	2340      	movs	r3, #64	@ 0x40
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b50:	2302      	movs	r3, #2
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <MX_GPIO_Init+0x89c>)
 8001b60:	f001 f922 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001b64:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b76:	2305      	movs	r3, #5
 8001b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4808      	ldr	r0, [pc, #32]	@ (8001ba4 <MX_GPIO_Init+0x8b0>)
 8001b82:	f001 f911 	bl	8002da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b86:	bf00      	nop
 8001b88:	3740      	adds	r7, #64	@ 0x40
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020c00 	.word	0x40020c00

08001bac <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f004 fab5 	bl	8006124 <osDelay>
 8001bba:	e7fb      	b.n	8001bb4 <StartMainTask+0x8>

08001bbc <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void *argument)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTerminalTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f004 faad 	bl	8006124 <osDelay>
 8001bca:	e7fb      	b.n	8001bc4 <StartTerminalTask+0x8>

08001bcc <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
	bool read_button_flag = true;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	72fb      	strb	r3, [r7, #11]
	bool press_button_flag = false;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	75fb      	strb	r3, [r7, #23]

  for(;;)
  {
	press_button_flag = ReadSignal(&read_button_flag);
 8001bdc:	f107 030b 	add.w	r3, r7, #11
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f89b 	bl	8000d1c <ReadSignal>
 8001be6:	4603      	mov	r3, r0
 8001be8:	75fb      	strb	r3, [r7, #23]
    if(press_button_flag == true)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d041      	beq.n	8001c74 <StartButtonTask+0xa8>
    {
    	char* uslo_1 = "Uslo u Button Count\n";
 8001bf0:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <StartButtonTask+0xc8>)
 8001bf2:	613b      	str	r3, [r7, #16]


    	UART_TransmitString(uslo_1);
 8001bf4:	6938      	ldr	r0, [r7, #16]
 8001bf6:	f7ff f8a3 	bl	8000d40 <UART_TransmitString>
    	LED_Drive(true);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7fe ffb8 	bl	8000b70 <LED_Drive>
    	osTimerStart(ButtonTimerHandle, 3000);
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <StartButtonTask+0xcc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 fb53 	bl	80062b4 <osTimerStart>
    	button_press_counter++;
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <StartButtonTask+0xd0>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <StartButtonTask+0xd0>)
 8001c1a:	701a      	strb	r2, [r3, #0]
    	if(button_press_counter==0)UART_TransmitString("0\n");
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <StartButtonTask+0xd0>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <StartButtonTask+0x62>
 8001c26:	481e      	ldr	r0, [pc, #120]	@ (8001ca0 <StartButtonTask+0xd4>)
 8001c28:	f7ff f88a 	bl	8000d40 <UART_TransmitString>
 8001c2c:	e010      	b.n	8001c50 <StartButtonTask+0x84>
    	else if(button_press_counter==1)UART_TransmitString("1\n");
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <StartButtonTask+0xd0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d103      	bne.n	8001c40 <StartButtonTask+0x74>
 8001c38:	481a      	ldr	r0, [pc, #104]	@ (8001ca4 <StartButtonTask+0xd8>)
 8001c3a:	f7ff f881 	bl	8000d40 <UART_TransmitString>
 8001c3e:	e007      	b.n	8001c50 <StartButtonTask+0x84>
    	else if(button_press_counter==2)UART_TransmitString("2\n");
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <StartButtonTask+0xd0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d102      	bne.n	8001c50 <StartButtonTask+0x84>
 8001c4a:	4817      	ldr	r0, [pc, #92]	@ (8001ca8 <StartButtonTask+0xdc>)
 8001c4c:	f7ff f878 	bl	8000d40 <UART_TransmitString>

    	UART_TransmitFloat((float)button_press_counter);
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <StartButtonTask+0xd0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	f7ff f89b 	bl	8000d9c <UART_TransmitFloat>
    	char* newLinen = "\n";
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <StartButtonTask+0xe0>)
 8001c68:	60fb      	str	r3, [r7, #12]
    	UART_TransmitString(newLinen);
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff f868 	bl	8000d40 <UART_TransmitString>
    	press_button_flag = false;
 8001c70:	2300      	movs	r3, #0
 8001c72:	75fb      	strb	r3, [r7, #23]
    }

    osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8001c74:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <StartButtonTask+0xe4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 fc3d 	bl	80064fc <osMutexAcquire>
//	progStateLocal = progState;
	osMutexRelease(RegimeMutexHandle);
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <StartButtonTask+0xe4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fc96 	bl	80065b8 <osMutexRelease>
    osDelay(10);
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f004 fa49 	bl	8006124 <osDelay>
	press_button_flag = ReadSignal(&read_button_flag);
 8001c92:	e7a3      	b.n	8001bdc <StartButtonTask+0x10>
 8001c94:	0800a438 	.word	0x0800a438
 8001c98:	200002ac 	.word	0x200002ac
 8001c9c:	200002c0 	.word	0x200002c0
 8001ca0:	0800a450 	.word	0x0800a450
 8001ca4:	0800a454 	.word	0x0800a454
 8001ca8:	0800a458 	.word	0x0800a458
 8001cac:	0800a45c 	.word	0x0800a45c
 8001cb0:	200002b0 	.word	0x200002b0

08001cb4 <LEDTimerCallback>:
  /* USER CODE END StartButtonTask */
}

/* LEDTimerCallback function */
void LEDTimerCallback(void *argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	//LED_StatusFSM ledStateLocal = ledState;
	bool quality_status_local;
	ProgramStateFSM progStateLocal;
	LED_StatusFSM ledStateLocal;

	char* newLine = "Uslo\n";
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <LEDTimerCallback+0x118>)
 8001cbe:	613b      	str	r3, [r7, #16]

	osMutexAcquire(LED_Blink_MutexHandle, osWaitForever);
 8001cc0:	4b43      	ldr	r3, [pc, #268]	@ (8001dd0 <LEDTimerCallback+0x11c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 fc17 	bl	80064fc <osMutexAcquire>
		quality_status_local = quality_status;
 8001cce:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <LEDTimerCallback+0x120>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(LED_Blink_MutexHandle);
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <LEDTimerCallback+0x11c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 fc6d 	bl	80065b8 <osMutexRelease>

	osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8001cde:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd8 <LEDTimerCallback+0x124>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fc08 	bl	80064fc <osMutexAcquire>
		progStateLocal = progState;
 8001cec:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <LEDTimerCallback+0x128>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	73bb      	strb	r3, [r7, #14]
	osMutexRelease(RegimeMutexHandle);
 8001cf2:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <LEDTimerCallback+0x124>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fc5e 	bl	80065b8 <osMutexRelease>

	osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8001cfc:	4b38      	ldr	r3, [pc, #224]	@ (8001de0 <LEDTimerCallback+0x12c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	4618      	mov	r0, r3
 8001d06:	f004 fbf9 	bl	80064fc <osMutexAcquire>
		ledStateLocal = ledState;
 8001d0a:	4b36      	ldr	r3, [pc, #216]	@ (8001de4 <LEDTimerCallback+0x130>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(LED_FSM_MutexHandle);
 8001d10:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <LEDTimerCallback+0x12c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 fc4f 	bl	80065b8 <osMutexRelease>


	if( (progStateLocal == P_IDLE_START) || (progStateLocal == P_IDLE) )
 8001d1a:	7bbb      	ldrb	r3, [r7, #14]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d002      	beq.n	8001d26 <LEDTimerCallback+0x72>
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d108      	bne.n	8001d38 <LEDTimerCallback+0x84>
	{
		osTimerStop(LEDTimerHandle);
 8001d26:	4b30      	ldr	r3, [pc, #192]	@ (8001de8 <LEDTimerCallback+0x134>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 fb02 	bl	8006334 <osTimerStop>
		LED_Drive(false);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7fe ff1d 	bl	8000b70 <LED_Drive>
 8001d36:	e036      	b.n	8001da6 <LEDTimerCallback+0xf2>
	}
	else
	{
		switch(ledStateLocal)
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d026      	beq.n	8001d8c <LEDTimerCallback+0xd8>
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	dc31      	bgt.n	8001da6 <LEDTimerCallback+0xf2>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <LEDTimerCallback+0x98>
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d013      	beq.n	8001d72 <LEDTimerCallback+0xbe>
 8001d4a:	e02c      	b.n	8001da6 <LEDTimerCallback+0xf2>
		{
			case LED_OFF:
				void AlarmOFF();
				osTimerStart(LEDTimerHandle, 3000);
 8001d4c:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <LEDTimerCallback+0x134>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 faad 	bl	80062b4 <osTimerStart>
				LED_Drive(false);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7fe ff08 	bl	8000b70 <LED_Drive>
				if(quality_status_local == true)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <LEDTimerCallback+0xb8>
				{
					ledStateLocal = LED_ON_CORECT;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
				else
				{
					ledStateLocal = LED_ON_INCORECT;
				}

				break;
 8001d6a:	e01c      	b.n	8001da6 <LEDTimerCallback+0xf2>
					ledStateLocal = LED_ON_INCORECT;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	75fb      	strb	r3, [r7, #23]
				break;
 8001d70:	e019      	b.n	8001da6 <LEDTimerCallback+0xf2>

			case LED_ON_CORECT:
				void AlarmON();
				LED_Drive(true);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7fe fefc 	bl	8000b70 <LED_Drive>
				osTimerStart(LEDTimerHandle, 1000);
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <LEDTimerCallback+0x134>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 fa97 	bl	80062b4 <osTimerStart>
				ledStateLocal = LED_OFF;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]

				break;
 8001d8a:	e00c      	b.n	8001da6 <LEDTimerCallback+0xf2>

			case LED_ON_INCORECT:

				void AlarmON();
				LED_Drive(true);
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f7fe feef 	bl	8000b70 <LED_Drive>
				osTimerStart(LEDTimerHandle, 500);
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <LEDTimerCallback+0x134>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fa8a 	bl	80062b4 <osTimerStart>
				ledStateLocal = LED_OFF;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]

				break;
 8001da4:	bf00      	nop
		}
	}
	osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <LEDTimerCallback+0x12c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fba4 	bl	80064fc <osMutexAcquire>
		ledState = ledStateLocal;
 8001db4:	4a0b      	ldr	r2, [pc, #44]	@ (8001de4 <LEDTimerCallback+0x130>)
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	7013      	strb	r3, [r2, #0]
	osMutexRelease(LED_FSM_MutexHandle);
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <LEDTimerCallback+0x12c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fbfa 	bl	80065b8 <osMutexRelease>

	//LED_Blink_MutexHandle

  /* USER CODE END LEDTimerCallback */
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0800a460 	.word	0x0800a460
 8001dd0:	200002b4 	.word	0x200002b4
 8001dd4:	200002c1 	.word	0x200002c1
 8001dd8:	200002b0 	.word	0x200002b0
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	200002bc 	.word	0x200002bc
 8001de4:	200002c2 	.word	0x200002c2
 8001de8:	200002a4 	.word	0x200002a4

08001dec <TransmitTimerCallback>:

/* TransmitTimerCallback function */
void TransmitTimerCallback(void *argument)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTimerCallback */

  /* USER CODE END TransmitTimerCallback */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <ButtonTimerCallback>:

/* ButtonTimerCallback function */
void ButtonTimerCallback(void *argument)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTimerCallback */
	ProgramStateFSM progStateLocal = P_IDLE_START;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
	LED_Drive(false);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7fe feaf 	bl	8000b70 <LED_Drive>
	SetIndicatorLEDsNum(button_press_counter);
 8001e12:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <ButtonTimerCallback+0x9c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fdaf 	bl	800097c <SetIndicatorLEDsNum>

	switch(button_press_counter)
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <ButtonTimerCallback+0x9c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d81e      	bhi.n	8001e66 <ButtonTimerCallback+0x66>
 8001e28:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <ButtonTimerCallback+0x30>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e4f 	.word	0x08001e4f
 8001e38:	08001e55 	.word	0x08001e55
 8001e3c:	08001e5b 	.word	0x08001e5b
 8001e40:	08001e67 	.word	0x08001e67
 8001e44:	08001e61 	.word	0x08001e61
	{
		case 0:

			progStateLocal = P_IDLE_START;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]

			break;
 8001e4c:	e00b      	b.n	8001e66 <ButtonTimerCallback+0x66>

		case 1:

			progStateLocal = P_WORK_S1;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	73fb      	strb	r3, [r7, #15]

			break;
 8001e52:	e008      	b.n	8001e66 <ButtonTimerCallback+0x66>

		case 2:

			progStateLocal = P_WORK_S3;
 8001e54:	2303      	movs	r3, #3
 8001e56:	73fb      	strb	r3, [r7, #15]

			break;
 8001e58:	e005      	b.n	8001e66 <ButtonTimerCallback+0x66>

		case 3:

			progStateLocal = P_WORK_S5;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	73fb      	strb	r3, [r7, #15]

			break;
 8001e5e:	e002      	b.n	8001e66 <ButtonTimerCallback+0x66>

			break;

		case 5:

			progStateLocal = P_IDLE_START;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]

			break;
 8001e64:	bf00      	nop

	}

	button_press_counter = 0;
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <ButtonTimerCallback+0x9c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]

    osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <ButtonTimerCallback+0xa0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fb41 	bl	80064fc <osMutexAcquire>
    	progState = progStateLocal;
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <ButtonTimerCallback+0xa4>)
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	7013      	strb	r3, [r2, #0]
	osMutexRelease(RegimeMutexHandle);
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <ButtonTimerCallback+0xa0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f004 fb97 	bl	80065b8 <osMutexRelease>

   osTimerStop(ButtonTimerHandle);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <ButtonTimerCallback+0xa8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 fa50 	bl	8006334 <osTimerStop>

//	bool ReadSignal(bool* readEnable)
  /* USER CODE END ButtonTimerCallback */
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200002c0 	.word	0x200002c0
 8001ea0:	200002b0 	.word	0x200002b0
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	200002ac 	.word	0x200002ac

08001eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ebe:	f000 fa61 	bl	8002384 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40002000 	.word	0x40002000

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <Error_Handler+0x8>

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a10      	ldr	r2, [pc, #64]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f06:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	210f      	movs	r1, #15
 8001f16:	f06f 0001 	mvn.w	r0, #1
 8001f1a:	f000 fd9f 	bl	8002a5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a21      	ldr	r2, [pc, #132]	@ (8001fd0 <HAL_ADC_MspInit+0xa4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d13c      	bne.n	8001fc8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f4e:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a20      	ldr	r2, [pc, #128]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a14      	ldr	r2, [pc, #80]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_ADC_MspInit+0xa8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001f96:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001f9a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480b      	ldr	r0, [pc, #44]	@ (8001fd8 <HAL_ADC_MspInit+0xac>)
 8001fac:	f000 fefc 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <HAL_ADC_MspInit+0xb0>)
 8001fc4:	f000 fef0 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40012200 	.word	0x40012200
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40021400 	.word	0x40021400
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <HAL_CRC_MspInit+0x38>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10b      	bne.n	800200a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_CRC_MspInit+0x3c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a09      	ldr	r2, [pc, #36]	@ (800201c <HAL_CRC_MspInit+0x3c>)
 8001ff8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_CRC_MspInit+0x3c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023000 	.word	0x40023000
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0ac      	sub	sp, #176	@ 0xb0
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	2284      	movs	r2, #132	@ 0x84
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f007 fc53 	bl	80098ec <memset>
  if(huart->Instance==USART1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a36      	ldr	r2, [pc, #216]	@ (8002124 <HAL_UART_MspInit+0x104>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d164      	bne.n	800211a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002050:	2340      	movs	r3, #64	@ 0x40
 8002052:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002054:	2300      	movs	r3, #0
 8002056:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4618      	mov	r0, r3
 800205e:	f001 fd9d 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002068:	f7ff ff32 	bl	8001ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206c:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_UART_MspInit+0x108>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <HAL_UART_MspInit+0x108>)
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	6453      	str	r3, [r2, #68]	@ 0x44
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_UART_MspInit+0x108>)
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_UART_MspInit+0x108>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	4a27      	ldr	r2, [pc, #156]	@ (8002128 <HAL_UART_MspInit+0x108>)
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002090:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_UART_MspInit+0x108>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <HAL_UART_MspInit+0x108>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	4a21      	ldr	r2, [pc, #132]	@ (8002128 <HAL_UART_MspInit+0x108>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <HAL_UART_MspInit+0x108>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020cc:	2307      	movs	r3, #7
 80020ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020d6:	4619      	mov	r1, r3
 80020d8:	4814      	ldr	r0, [pc, #80]	@ (800212c <HAL_UART_MspInit+0x10c>)
 80020da:	f000 fe65 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80020de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f8:	2307      	movs	r3, #7
 80020fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002102:	4619      	mov	r1, r3
 8002104:	480a      	ldr	r0, [pc, #40]	@ (8002130 <HAL_UART_MspInit+0x110>)
 8002106:	f000 fe4f 	bl	8002da8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2105      	movs	r1, #5
 800210e:	2025      	movs	r0, #37	@ 0x25
 8002110:	f000 fca4 	bl	8002a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002114:	2025      	movs	r0, #37	@ 0x25
 8002116:	f000 fcbd 	bl	8002a94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	37b0      	adds	r7, #176	@ 0xb0
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40011000 	.word	0x40011000
 8002128:	40023800 	.word	0x40023800
 800212c:	40020400 	.word	0x40020400
 8002130:	40020000 	.word	0x40020000

08002134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	@ 0x38
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002144:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <HAL_InitTick+0xe0>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <HAL_InitTick+0xe0>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002150:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <HAL_InitTick+0xe0>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800215c:	f107 0210 	add.w	r2, r7, #16
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fce6 	bl	8003b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002176:	f001 fcb7 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 800217a:	6378      	str	r0, [r7, #52]	@ 0x34
 800217c:	e004      	b.n	8002188 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800217e:	f001 fcb3 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8002182:	4603      	mov	r3, r0
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218a:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <HAL_InitTick+0xe4>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	0c9b      	lsrs	r3, r3, #18
 8002192:	3b01      	subs	r3, #1
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002196:	4b21      	ldr	r3, [pc, #132]	@ (800221c <HAL_InitTick+0xe8>)
 8002198:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_InitTick+0xec>)
 800219a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800219c:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_InitTick+0xe8>)
 800219e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021a2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80021a4:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_InitTick+0xe8>)
 80021a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <HAL_InitTick+0xe8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_InitTick+0xe8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_InitTick+0xe8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80021bc:	4817      	ldr	r0, [pc, #92]	@ (800221c <HAL_InitTick+0xe8>)
 80021be:	f002 f8dd 	bl	800437c <HAL_TIM_Base_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11b      	bne.n	8002208 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80021d0:	4812      	ldr	r0, [pc, #72]	@ (800221c <HAL_InitTick+0xe8>)
 80021d2:	f002 f935 	bl	8004440 <HAL_TIM_Base_Start_IT>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80021dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d111      	bne.n	8002208 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80021e4:	202d      	movs	r0, #45	@ 0x2d
 80021e6:	f000 fc55 	bl	8002a94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d808      	bhi.n	8002202 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	202d      	movs	r0, #45	@ 0x2d
 80021f6:	f000 fc31 	bl	8002a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_InitTick+0xf0>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e002      	b.n	8002208 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002208:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800220c:	4618      	mov	r0, r3
 800220e:	3738      	adds	r7, #56	@ 0x38
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	431bde83 	.word	0x431bde83
 800221c:	200002c4 	.word	0x200002c4
 8002220:	40002000 	.word	0x40002000
 8002224:	20000008 	.word	0x20000008

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <NMI_Handler+0x4>

08002230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <MemManage_Handler+0x4>

08002240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <UsageFault_Handler+0x4>

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <USART1_IRQHandler+0x10>)
 8002266:	f002 fc7f 	bl	8004b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000210 	.word	0x20000210

08002274 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800227a:	f002 f959 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200002c4 	.word	0x200002c4

08002288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002290:	4a14      	ldr	r2, [pc, #80]	@ (80022e4 <_sbrk+0x5c>)
 8002292:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <_sbrk+0x60>)
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a4:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <_sbrk+0x64>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <_sbrk+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b8:	f007 fb76 	bl	80099a8 <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	220c      	movs	r2, #12
 80022c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	e009      	b.n	80022dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <_sbrk+0x64>)
 80022d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20050000 	.word	0x20050000
 80022e8:	00000400 	.word	0x00000400
 80022ec:	20000310 	.word	0x20000310
 80022f0:	20004e40 	.word	0x20004e40

080022f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <SystemInit+0x20>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <SystemInit+0x20>)
 8002300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800231c:	480d      	ldr	r0, [pc, #52]	@ (8002354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800231e:	490e      	ldr	r1, [pc, #56]	@ (8002358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002320:	4a0e      	ldr	r2, [pc, #56]	@ (800235c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a0b      	ldr	r2, [pc, #44]	@ (8002360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002334:	4c0b      	ldr	r4, [pc, #44]	@ (8002364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002342:	f7ff ffd7 	bl	80022f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002346:	f007 fb35 	bl	80099b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234a:	f7fe fe1b 	bl	8000f84 <main>
  bx  lr    
 800234e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002350:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800235c:	0800a5b8 	.word	0x0800a5b8
  ldr r2, =_sbss
 8002360:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002364:	20004e40 	.word	0x20004e40

08002368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC_IRQHandler>

0800236a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236e:	2003      	movs	r0, #3
 8002370:	f000 fb69 	bl	8002a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002374:	200f      	movs	r0, #15
 8002376:	f7ff fedd 	bl	8002134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800237a:	f7ff fdaf 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_IncTick+0x20>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_IncTick+0x24>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <HAL_IncTick+0x24>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000000c 	.word	0x2000000c
 80023a8:	20000314 	.word	0x20000314

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000314 	.word	0x20000314

080023c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e031      	b.n	800243e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fda2 	bl	8001f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <HAL_ADC_Init+0x84>)
 8002408:	4013      	ands	r3, r2
 800240a:	f043 0202 	orr.w	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f970 	bl	80026f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
 800242e:	e001      	b.n	8002434 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	ffffeefd 	.word	0xffffeefd

0800244c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1c>
 8002464:	2302      	movs	r3, #2
 8002466:	e136      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x28a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b09      	cmp	r3, #9
 8002476:	d93a      	bls.n	80024ee <HAL_ADC_ConfigChannel+0xa2>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002480:	d035      	beq.n	80024ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68d9      	ldr	r1, [r3, #12]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	3b1e      	subs	r3, #30
 8002498:	2207      	movs	r2, #7
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a8d      	ldr	r2, [pc, #564]	@ (80026e4 <HAL_ADC_ConfigChannel+0x298>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68d9      	ldr	r1, [r3, #12]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	061a      	lsls	r2, r3, #24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c6:	e035      	b.n	8002534 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4403      	add	r3, r0
 80024e0:	3b1e      	subs	r3, #30
 80024e2:	409a      	lsls	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ec:	e022      	b.n	8002534 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	2207      	movs	r2, #7
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43da      	mvns	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	400a      	ands	r2, r1
 8002510:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6919      	ldr	r1, [r3, #16]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	4603      	mov	r3, r0
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4403      	add	r3, r0
 800252a:	409a      	lsls	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b06      	cmp	r3, #6
 800253a:	d824      	bhi.n	8002586 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b05      	subs	r3, #5
 800254e:	221f      	movs	r2, #31
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43da      	mvns	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	400a      	ands	r2, r1
 800255c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	4618      	mov	r0, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3b05      	subs	r3, #5
 8002578:	fa00 f203 	lsl.w	r2, r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	635a      	str	r2, [r3, #52]	@ 0x34
 8002584:	e04c      	b.n	8002620 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d824      	bhi.n	80025d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	3b23      	subs	r3, #35	@ 0x23
 80025a0:	221f      	movs	r2, #31
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	400a      	ands	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	3b23      	subs	r3, #35	@ 0x23
 80025ca:	fa00 f203 	lsl.w	r2, r0, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d6:	e023      	b.n	8002620 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	3b41      	subs	r3, #65	@ 0x41
 80025ea:	221f      	movs	r2, #31
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43da      	mvns	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	400a      	ands	r2, r1
 80025f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3b41      	subs	r3, #65	@ 0x41
 8002614:	fa00 f203 	lsl.w	r2, r0, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a30      	ldr	r2, [pc, #192]	@ (80026e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1f4>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002632:	d105      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a2c      	ldr	r2, [pc, #176]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 800263a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800263e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10f      	bne.n	800266a <HAL_ADC_ConfigChannel+0x21e>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b12      	cmp	r3, #18
 8002650:	d10b      	bne.n	800266a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002652:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a25      	ldr	r2, [pc, #148]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002658:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800265c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800265e:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a22      	ldr	r2, [pc, #136]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002664:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002668:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d12b      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x280>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1a      	ldr	r2, [pc, #104]	@ (80026e4 <HAL_ADC_ConfigChannel+0x298>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d003      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x23a>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b11      	cmp	r3, #17
 8002684:	d122      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 800268c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002690:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002692:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002698:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800269c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a10      	ldr	r2, [pc, #64]	@ (80026e4 <HAL_ADC_ConfigChannel+0x298>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9a      	lsrs	r2, r3, #18
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026be:	e002      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f9      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	10000012 	.word	0x10000012
 80026e8:	40012000 	.word	0x40012000
 80026ec:	40012300 	.word	0x40012300
 80026f0:	20000004 	.word	0x20000004
 80026f4:	431bde83 	.word	0x431bde83

080026f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002700:	4b78      	ldr	r3, [pc, #480]	@ (80028e4 <ADC_Init+0x1ec>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a77      	ldr	r2, [pc, #476]	@ (80028e4 <ADC_Init+0x1ec>)
 8002706:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800270a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800270c:	4b75      	ldr	r3, [pc, #468]	@ (80028e4 <ADC_Init+0x1ec>)
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4973      	ldr	r1, [pc, #460]	@ (80028e4 <ADC_Init+0x1ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	021a      	lsls	r2, r3, #8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800274c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800276e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002786:	4a58      	ldr	r2, [pc, #352]	@ (80028e8 <ADC_Init+0x1f0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d022      	beq.n	80027d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800279a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e00f      	b.n	80027f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0202 	bic.w	r2, r2, #2
 8002800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	005a      	lsls	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800282e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800283e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	3b01      	subs	r3, #1
 800284c:	035a      	lsls	r2, r3, #13
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	e007      	b.n	8002868 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002866:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	3b01      	subs	r3, #1
 8002884:	051a      	lsls	r2, r3, #20
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800289c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028aa:	025a      	lsls	r2, r3, #9
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	029a      	lsls	r2, r3, #10
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012300 	.word	0x40012300
 80028e8:	0f000001 	.word	0x0f000001

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <__NVIC_SetPriorityGrouping+0x40>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	4313      	orrs	r3, r2
 8002918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291a:	4a04      	ldr	r2, [pc, #16]	@ (800292c <__NVIC_SetPriorityGrouping+0x40>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60d3      	str	r3, [r2, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00
 8002930:	05fa0000 	.word	0x05fa0000

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	db0b      	blt.n	800297a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4907      	ldr	r1, [pc, #28]	@ (8002988 <__NVIC_EnableIRQ+0x38>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2001      	movs	r0, #1
 8002972:	fa00 f202 	lsl.w	r2, r0, r2
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000e100 	.word	0xe000e100

0800298c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	db0a      	blt.n	80029b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	490c      	ldr	r1, [pc, #48]	@ (80029d8 <__NVIC_SetPriority+0x4c>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	440b      	add	r3, r1
 80029b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b4:	e00a      	b.n	80029cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4908      	ldr	r1, [pc, #32]	@ (80029dc <__NVIC_SetPriority+0x50>)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	3b04      	subs	r3, #4
 80029c4:	0112      	lsls	r2, r2, #4
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	440b      	add	r3, r1
 80029ca:	761a      	strb	r2, [r3, #24]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000e100 	.word	0xe000e100
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	@ 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f1c3 0307 	rsb	r3, r3, #7
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	bf28      	it	cs
 80029fe:	2304      	movcs	r3, #4
 8002a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d902      	bls.n	8002a10 <NVIC_EncodePriority+0x30>
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3b03      	subs	r3, #3
 8002a0e:	e000      	b.n	8002a12 <NVIC_EncodePriority+0x32>
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	f04f 32ff 	mov.w	r2, #4294967295
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	401a      	ands	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	4313      	orrs	r3, r2
         );
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ff4c 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6e:	f7ff ff61 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002a72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	6978      	ldr	r0, [r7, #20]
 8002a7a:	f7ff ffb1 	bl	80029e0 <NVIC_EncodePriority>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff80 	bl	800298c <__NVIC_SetPriority>
}
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff54 	bl	8002950 <__NVIC_EnableIRQ>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e054      	b.n	8002b6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7f5b      	ldrb	r3, [r3, #29]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fa84 	bl	8001fe0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	791b      	ldrb	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10c      	bne.n	8002b00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a22      	ldr	r2, [pc, #136]	@ (8002b74 <HAL_CRC_Init+0xc4>)
 8002aec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0218 	bic.w	r2, r2, #24
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	e00c      	b.n	8002b1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f834 	bl	8002b78 <HAL_CRCEx_Polynomial_Set>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e028      	b.n	8002b6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	795b      	ldrb	r3, [r3, #5]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	611a      	str	r2, [r3, #16]
 8002b2c:	e004      	b.n	8002b38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6912      	ldr	r2, [r2, #16]
 8002b36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	04c11db7 	.word	0x04c11db7

08002b78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b88:	231f      	movs	r3, #31
 8002b8a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b8c:	bf00      	nop
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	613a      	str	r2, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_CRCEx_Polynomial_Set+0x34>
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	d846      	bhi.n	8002c40 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002c47 	.word	0x08002c47
 8002bbc:	08002c41 	.word	0x08002c41
 8002bc0:	08002c41 	.word	0x08002c41
 8002bc4:	08002c41 	.word	0x08002c41
 8002bc8:	08002c41 	.word	0x08002c41
 8002bcc:	08002c41 	.word	0x08002c41
 8002bd0:	08002c41 	.word	0x08002c41
 8002bd4:	08002c41 	.word	0x08002c41
 8002bd8:	08002c35 	.word	0x08002c35
 8002bdc:	08002c41 	.word	0x08002c41
 8002be0:	08002c41 	.word	0x08002c41
 8002be4:	08002c41 	.word	0x08002c41
 8002be8:	08002c41 	.word	0x08002c41
 8002bec:	08002c41 	.word	0x08002c41
 8002bf0:	08002c41 	.word	0x08002c41
 8002bf4:	08002c41 	.word	0x08002c41
 8002bf8:	08002c29 	.word	0x08002c29
 8002bfc:	08002c41 	.word	0x08002c41
 8002c00:	08002c41 	.word	0x08002c41
 8002c04:	08002c41 	.word	0x08002c41
 8002c08:	08002c41 	.word	0x08002c41
 8002c0c:	08002c41 	.word	0x08002c41
 8002c10:	08002c41 	.word	0x08002c41
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08002c1d 	.word	0x08002c1d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d913      	bls.n	8002c4a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c26:	e010      	b.n	8002c4a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	d90f      	bls.n	8002c4e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c32:	e00c      	b.n	8002c4e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d90b      	bls.n	8002c52 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c3e:	e008      	b.n	8002c52 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	75fb      	strb	r3, [r7, #23]
      break;
 8002c44:	e006      	b.n	8002c54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c52:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 0118 	bic.w	r1, r3, #24
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c92:	f7ff fb8b 	bl	80023ac <HAL_GetTick>
 8002c96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d008      	beq.n	8002cb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2280      	movs	r2, #128	@ 0x80
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e052      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0216 	bic.w	r2, r2, #22
 8002cc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <HAL_DMA_Abort+0x62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0208 	bic.w	r2, r2, #8
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d06:	e013      	b.n	8002d30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d08:	f7ff fb50 	bl	80023ac <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d90c      	bls.n	8002d30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e015      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e4      	bne.n	8002d08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	223f      	movs	r2, #63	@ 0x3f
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	@ 0x80
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00c      	b.n	8002d9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2205      	movs	r2, #5
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e175      	b.n	80030b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	f040 8164 	bne.w	80030ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d005      	beq.n	8002dfe <HAL_GPIO_Init+0x56>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d130      	bne.n	8002e60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 0201 	and.w	r2, r3, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d017      	beq.n	8002e9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d123      	bne.n	8002ef0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	08da      	lsrs	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3208      	adds	r2, #8
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80be 	beq.w	80030ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	4b66      	ldr	r3, [pc, #408]	@ (80030cc <HAL_GPIO_Init+0x324>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	4a65      	ldr	r2, [pc, #404]	@ (80030cc <HAL_GPIO_Init+0x324>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3e:	4b63      	ldr	r3, [pc, #396]	@ (80030cc <HAL_GPIO_Init+0x324>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f4a:	4a61      	ldr	r2, [pc, #388]	@ (80030d0 <HAL_GPIO_Init+0x328>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a58      	ldr	r2, [pc, #352]	@ (80030d4 <HAL_GPIO_Init+0x32c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d037      	beq.n	8002fe6 <HAL_GPIO_Init+0x23e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a57      	ldr	r2, [pc, #348]	@ (80030d8 <HAL_GPIO_Init+0x330>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_GPIO_Init+0x23a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a56      	ldr	r2, [pc, #344]	@ (80030dc <HAL_GPIO_Init+0x334>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02b      	beq.n	8002fde <HAL_GPIO_Init+0x236>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a55      	ldr	r2, [pc, #340]	@ (80030e0 <HAL_GPIO_Init+0x338>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d025      	beq.n	8002fda <HAL_GPIO_Init+0x232>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a54      	ldr	r2, [pc, #336]	@ (80030e4 <HAL_GPIO_Init+0x33c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <HAL_GPIO_Init+0x22e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a53      	ldr	r2, [pc, #332]	@ (80030e8 <HAL_GPIO_Init+0x340>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x22a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_GPIO_Init+0x344>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x226>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a51      	ldr	r2, [pc, #324]	@ (80030f0 <HAL_GPIO_Init+0x348>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x222>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a50      	ldr	r2, [pc, #320]	@ (80030f4 <HAL_GPIO_Init+0x34c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x21e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80030f8 <HAL_GPIO_Init+0x350>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x21a>
 8002fbe:	2309      	movs	r3, #9
 8002fc0:	e012      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fc2:	230a      	movs	r3, #10
 8002fc4:	e010      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	e00e      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e00c      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fce:	2306      	movs	r3, #6
 8002fd0:	e00a      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	e008      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e004      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	f002 0203 	and.w	r2, r2, #3
 8002fee:	0092      	lsls	r2, r2, #2
 8002ff0:	4093      	lsls	r3, r2
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ff8:	4935      	ldr	r1, [pc, #212]	@ (80030d0 <HAL_GPIO_Init+0x328>)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003006:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800302a:	4a34      	ldr	r2, [pc, #208]	@ (80030fc <HAL_GPIO_Init+0x354>)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003030:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003054:	4a29      	ldr	r2, [pc, #164]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800305a:	4b28      	ldr	r3, [pc, #160]	@ (80030fc <HAL_GPIO_Init+0x354>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800307e:	4a1f      	ldr	r2, [pc, #124]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003084:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a8:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <HAL_GPIO_Init+0x354>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	f67f ae86 	bls.w	8002dc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40013800 	.word	0x40013800
 80030d4:	40020000 	.word	0x40020000
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40020800 	.word	0x40020800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40021400 	.word	0x40021400
 80030ec:	40021800 	.word	0x40021800
 80030f0:	40021c00 	.word	0x40021c00
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40022400 	.word	0x40022400
 80030fc:	40013c00 	.word	0x40013c00

08003100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e001      	b.n	8003122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
 800313c:	4613      	mov	r3, r2
 800313e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800314c:	e003      	b.n	8003156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	041a      	lsls	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	619a      	str	r2, [r3, #24]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a04      	ldr	r2, [pc, #16]	@ (8003180 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40007000 	.word	0x40007000

08003184 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_PWREx_EnableOverDrive+0x98>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	4a22      	ldr	r2, [pc, #136]	@ (800321c <HAL_PWREx_EnableOverDrive+0x98>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	@ 0x40
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_PWREx_EnableOverDrive+0x98>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b2:	f7ff f8fb 	bl	80023ac <HAL_GetTick>
 80031b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031b8:	e009      	b.n	80031ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031ba:	f7ff f8f7 	bl	80023ac <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031c8:	d901      	bls.n	80031ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e022      	b.n	8003214 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031da:	d1ee      	bne.n	80031ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031dc:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003220 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e8:	f7ff f8e0 	bl	80023ac <HAL_GetTick>
 80031ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031ee:	e009      	b.n	8003204 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031f0:	f7ff f8dc 	bl	80023ac <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031fe:	d901      	bls.n	8003204 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e007      	b.n	8003214 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003210:	d1ee      	bne.n	80031f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000

08003224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e291      	b.n	800375e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8087 	beq.w	8003356 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003248:	4b96      	ldr	r3, [pc, #600]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b04      	cmp	r3, #4
 8003252:	d00c      	beq.n	800326e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003254:	4b93      	ldr	r3, [pc, #588]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d112      	bne.n	8003286 <HAL_RCC_OscConfig+0x62>
 8003260:	4b90      	ldr	r3, [pc, #576]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800326c:	d10b      	bne.n	8003286 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326e:	4b8d      	ldr	r3, [pc, #564]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d06c      	beq.n	8003354 <HAL_RCC_OscConfig+0x130>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d168      	bne.n	8003354 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e26b      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x7a>
 8003290:	4b84      	ldr	r3, [pc, #528]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a83      	ldr	r2, [pc, #524]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e02e      	b.n	80032fc <HAL_RCC_OscConfig+0xd8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x9c>
 80032a6:	4b7f      	ldr	r3, [pc, #508]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7e      	ldr	r2, [pc, #504]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b7c      	ldr	r3, [pc, #496]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7b      	ldr	r2, [pc, #492]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e01d      	b.n	80032fc <HAL_RCC_OscConfig+0xd8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0xc0>
 80032ca:	4b76      	ldr	r3, [pc, #472]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a75      	ldr	r2, [pc, #468]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a72      	ldr	r2, [pc, #456]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xd8>
 80032e4:	4b6f      	ldr	r3, [pc, #444]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a6e      	ldr	r2, [pc, #440]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b6c      	ldr	r3, [pc, #432]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6b      	ldr	r2, [pc, #428]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7ff f852 	bl	80023ac <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7ff f84e 	bl	80023ac <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e21f      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b61      	ldr	r3, [pc, #388]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xe8>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7ff f83e 	bl	80023ac <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7ff f83a 	bl	80023ac <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e20b      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003346:	4b57      	ldr	r3, [pc, #348]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x110>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d069      	beq.n	8003436 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003362:	4b50      	ldr	r3, [pc, #320]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336e:	4b4d      	ldr	r3, [pc, #308]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b08      	cmp	r3, #8
 8003378:	d11c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x190>
 800337a:	4b4a      	ldr	r3, [pc, #296]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_RCC_OscConfig+0x17a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1df      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339e:	4b41      	ldr	r3, [pc, #260]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	493d      	ldr	r1, [pc, #244]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	e040      	b.n	8003436 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d023      	beq.n	8003404 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033bc:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a38      	ldr	r2, [pc, #224]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fff0 	bl	80023ac <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe ffec 	bl	80023ac <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1bd      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b30      	ldr	r3, [pc, #192]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4929      	ldr	r1, [pc, #164]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
 8003402:	e018      	b.n	8003436 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003404:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a26      	ldr	r2, [pc, #152]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe ffcc 	bl	80023ac <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe ffc8 	bl	80023ac <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e199      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d038      	beq.n	80034b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d019      	beq.n	800347e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b16      	ldr	r3, [pc, #88]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 800344c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344e:	4a15      	ldr	r2, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe ffa9 	bl	80023ac <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345e:	f7fe ffa5 	bl	80023ac <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e176      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x23a>
 800347c:	e01a      	b.n	80034b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003482:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fe ff8f 	bl	80023ac <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003492:	f7fe ff8b 	bl	80023ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d903      	bls.n	80034a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e15c      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
 80034a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b91      	ldr	r3, [pc, #580]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ee      	bne.n	8003492 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a4 	beq.w	800360a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b8b      	ldr	r3, [pc, #556]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	4b88      	ldr	r3, [pc, #544]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a87      	ldr	r2, [pc, #540]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b85      	ldr	r3, [pc, #532]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ea:	4b82      	ldr	r3, [pc, #520]	@ (80036f4 <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d118      	bne.n	8003528 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034f6:	4b7f      	ldr	r3, [pc, #508]	@ (80036f4 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7e      	ldr	r2, [pc, #504]	@ (80036f4 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003502:	f7fe ff53 	bl	80023ac <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350a:	f7fe ff4f 	bl	80023ac <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b64      	cmp	r3, #100	@ 0x64
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e120      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351c:	4b75      	ldr	r3, [pc, #468]	@ (80036f4 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x31a>
 8003530:	4b6f      	ldr	r3, [pc, #444]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003534:	4a6e      	ldr	r2, [pc, #440]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6713      	str	r3, [r2, #112]	@ 0x70
 800353c:	e02d      	b.n	800359a <HAL_RCC_OscConfig+0x376>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x33c>
 8003546:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	4a69      	ldr	r2, [pc, #420]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
 8003552:	4b67      	ldr	r3, [pc, #412]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003556:	4a66      	ldr	r2, [pc, #408]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	6713      	str	r3, [r2, #112]	@ 0x70
 800355e:	e01c      	b.n	800359a <HAL_RCC_OscConfig+0x376>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b05      	cmp	r3, #5
 8003566:	d10c      	bne.n	8003582 <HAL_RCC_OscConfig+0x35e>
 8003568:	4b61      	ldr	r3, [pc, #388]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a60      	ldr	r2, [pc, #384]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
 8003574:	4b5e      	ldr	r3, [pc, #376]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	4a5d      	ldr	r2, [pc, #372]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003580:	e00b      	b.n	800359a <HAL_RCC_OscConfig+0x376>
 8003582:	4b5b      	ldr	r3, [pc, #364]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003586:	4a5a      	ldr	r2, [pc, #360]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	6713      	str	r3, [r2, #112]	@ 0x70
 800358e:	4b58      	ldr	r3, [pc, #352]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a57      	ldr	r2, [pc, #348]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d015      	beq.n	80035ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fe ff03 	bl	80023ac <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe feff 	bl	80023ac <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0ce      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	4b4b      	ldr	r3, [pc, #300]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ee      	beq.n	80035aa <HAL_RCC_OscConfig+0x386>
 80035cc:	e014      	b.n	80035f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fe feed 	bl	80023ac <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fe fee9 	bl	80023ac <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0b8      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	4b40      	ldr	r3, [pc, #256]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ee      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d105      	bne.n	800360a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fe:	4b3c      	ldr	r3, [pc, #240]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	4a3b      	ldr	r2, [pc, #236]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80a4 	beq.w	800375c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003614:	4b36      	ldr	r3, [pc, #216]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d06b      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d149      	bne.n	80036bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003628:	4b31      	ldr	r3, [pc, #196]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a30      	ldr	r2, [pc, #192]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800362e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe feba 	bl	80023ac <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe feb6 	bl	80023ac <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e087      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	4b28      	ldr	r3, [pc, #160]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	061b      	lsls	r3, r3, #24
 800367e:	4313      	orrs	r3, r2
 8003680:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003686:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003688:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe fe8a 	bl	80023ac <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe fe86 	bl	80023ac <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e057      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x478>
 80036ba:	e04f      	b.n	800375c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036bc:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0b      	ldr	r2, [pc, #44]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80036c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe fe70 	bl	80023ac <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe fe6c 	bl	80023ac <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e03d      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x4ac>
 80036ee:	e035      	b.n	800375c <HAL_RCC_OscConfig+0x538>
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <HAL_RCC_OscConfig+0x544>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d028      	beq.n	8003758 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d121      	bne.n	8003758 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d11a      	bne.n	8003758 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800372e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003730:	4293      	cmp	r3, r2
 8003732:	d111      	bne.n	8003758 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	3b01      	subs	r3, #1
 8003742:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d107      	bne.n	8003758 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0d0      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b6a      	ldr	r3, [pc, #424]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d910      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b67      	ldr	r3, [pc, #412]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	4965      	ldr	r1, [pc, #404]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b63      	ldr	r3, [pc, #396]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0b8      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037cc:	4b59      	ldr	r3, [pc, #356]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a58      	ldr	r2, [pc, #352]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80037d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e4:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a52      	ldr	r2, [pc, #328]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80037ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b50      	ldr	r3, [pc, #320]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	494d      	ldr	r1, [pc, #308]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d040      	beq.n	8003890 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b47      	ldr	r3, [pc, #284]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d115      	bne.n	800384e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b41      	ldr	r3, [pc, #260]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e073      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b3d      	ldr	r3, [pc, #244]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06b      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4936      	ldr	r1, [pc, #216]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fe fda4 	bl	80023ac <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fe fda0 	bl	80023ac <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e053      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b2d      	ldr	r3, [pc, #180]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d210      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 020f 	bic.w	r2, r3, #15
 80038a6:	4922      	ldr	r1, [pc, #136]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b20      	ldr	r3, [pc, #128]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e032      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b19      	ldr	r3, [pc, #100]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4916      	ldr	r1, [pc, #88]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ea:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	490e      	ldr	r1, [pc, #56]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038fe:	f000 f821 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003902:	4602      	mov	r2, r0
 8003904:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	490a      	ldr	r1, [pc, #40]	@ (8003938 <HAL_RCC_ClockConfig+0x1cc>)
 8003910:	5ccb      	ldrb	r3, [r1, r3]
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a09      	ldr	r2, [pc, #36]	@ (800393c <HAL_RCC_ClockConfig+0x1d0>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_RCC_ClockConfig+0x1d4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fc08 	bl	8002134 <HAL_InitTick>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023c00 	.word	0x40023c00
 8003934:	40023800 	.word	0x40023800
 8003938:	0800a55c 	.word	0x0800a55c
 800393c:	20000004 	.word	0x20000004
 8003940:	20000008 	.word	0x20000008

08003944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b090      	sub	sp, #64	@ 0x40
 800394a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003950:	2300      	movs	r3, #0
 8003952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003954:	2300      	movs	r3, #0
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800395c:	4b59      	ldr	r3, [pc, #356]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b08      	cmp	r3, #8
 8003966:	d00d      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x40>
 8003968:	2b08      	cmp	r3, #8
 800396a:	f200 80a1 	bhi.w	8003ab0 <HAL_RCC_GetSysClockFreq+0x16c>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x34>
 8003972:	2b04      	cmp	r3, #4
 8003974:	d003      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x3a>
 8003976:	e09b      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800397c:	e09b      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397e:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x188>)
 8003980:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003982:	e098      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003984:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800398e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d028      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	2200      	movs	r2, #0
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039ac:	2100      	movs	r1, #0
 80039ae:	4b47      	ldr	r3, [pc, #284]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x188>)
 80039b0:	fb03 f201 	mul.w	r2, r3, r1
 80039b4:	2300      	movs	r3, #0
 80039b6:	fb00 f303 	mul.w	r3, r0, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	4a43      	ldr	r2, [pc, #268]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x188>)
 80039be:	fba0 1202 	umull	r1, r2, r0, r2
 80039c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c4:	460a      	mov	r2, r1
 80039c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ca:	4413      	add	r3, r2
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d0:	2200      	movs	r2, #0
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	61fa      	str	r2, [r7, #28]
 80039d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039de:	f7fc fe2b 	bl	8000638 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4613      	mov	r3, r2
 80039e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ea:	e053      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ec:	4b35      	ldr	r3, [pc, #212]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	099b      	lsrs	r3, r3, #6
 80039f2:	2200      	movs	r2, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	617a      	str	r2, [r7, #20]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039fe:	f04f 0b00 	mov.w	fp, #0
 8003a02:	4652      	mov	r2, sl
 8003a04:	465b      	mov	r3, fp
 8003a06:	f04f 0000 	mov.w	r0, #0
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	0159      	lsls	r1, r3, #5
 8003a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a14:	0150      	lsls	r0, r2, #5
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a1e:	eb63 090b 	sbc.w	r9, r3, fp
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a36:	ebb2 0408 	subs.w	r4, r2, r8
 8003a3a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	00eb      	lsls	r3, r5, #3
 8003a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4c:	00e2      	lsls	r2, r4, #3
 8003a4e:	4614      	mov	r4, r2
 8003a50:	461d      	mov	r5, r3
 8003a52:	eb14 030a 	adds.w	r3, r4, sl
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	eb45 030b 	adc.w	r3, r5, fp
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	028b      	lsls	r3, r1, #10
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a74:	4621      	mov	r1, r4
 8003a76:	028a      	lsls	r2, r1, #10
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	60fa      	str	r2, [r7, #12]
 8003a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a88:	f7fc fdd6 	bl	8000638 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3740      	adds	r7, #64	@ 0x40
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	017d7840 	.word	0x017d7840

08003ad0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000004 	.word	0x20000004

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	0800a56c 	.word	0x0800a56c

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b14:	f7ff ffdc 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0b5b      	lsrs	r3, r3, #13
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	@ (8003b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0800a56c 	.word	0x0800a56c

08003b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	220f      	movs	r2, #15
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b48:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b54:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b60:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b6c:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b7a:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <HAL_RCC_GetClockConfig+0x60>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40023c00 	.word	0x40023c00

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bc4:	4b69      	ldr	r3, [pc, #420]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd8:	4964      	ldr	r1, [pc, #400]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d017      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bfc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	4959      	ldr	r1, [pc, #356]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c14:	d101      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d017      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c32:	4b4e      	ldr	r3, [pc, #312]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	494a      	ldr	r1, [pc, #296]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c50:	d101      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 808b 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b3a      	ldr	r3, [pc, #232]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	4a39      	ldr	r2, [pc, #228]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c8c:	4b37      	ldr	r3, [pc, #220]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c98:	4b35      	ldr	r3, [pc, #212]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca4:	f7fe fb82 	bl	80023ac <HAL_GetTick>
 8003ca8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fe fb7e 	bl	80023ac <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	@ 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e357      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cca:	4b28      	ldr	r3, [pc, #160]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d035      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d02e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce8:	4b20      	ldr	r3, [pc, #128]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d0a:	4a18      	ldr	r2, [pc, #96]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d10:	4b16      	ldr	r3, [pc, #88]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d114      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fb46 	bl	80023ac <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe fb42 	bl	80023ac <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e319      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ee      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d52:	d111      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d62:	400b      	ands	r3, r1
 8003d64:	4901      	ldr	r1, [pc, #4]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40007000 	.word	0x40007000
 8003d74:	0ffffcff 	.word	0x0ffffcff
 8003d78:	4baa      	ldr	r3, [pc, #680]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4aa9      	ldr	r2, [pc, #676]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	4ba7      	ldr	r3, [pc, #668]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	49a4      	ldr	r1, [pc, #656]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003da2:	4ba0      	ldr	r3, [pc, #640]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003da8:	4a9e      	ldr	r2, [pc, #632]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003db2:	4b9c      	ldr	r3, [pc, #624]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	4999      	ldr	r1, [pc, #612]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd0:	4b94      	ldr	r3, [pc, #592]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dde:	4991      	ldr	r1, [pc, #580]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df2:	4b8c      	ldr	r3, [pc, #560]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e00:	4988      	ldr	r1, [pc, #544]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e14:	4b83      	ldr	r3, [pc, #524]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e22:	4980      	ldr	r1, [pc, #512]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e36:	4b7b      	ldr	r3, [pc, #492]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4977      	ldr	r1, [pc, #476]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e58:	4b72      	ldr	r3, [pc, #456]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	496f      	ldr	r1, [pc, #444]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	f023 020c 	bic.w	r2, r3, #12
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e88:	4966      	ldr	r1, [pc, #408]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e9c:	4b61      	ldr	r3, [pc, #388]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	495e      	ldr	r1, [pc, #376]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ebe:	4b59      	ldr	r3, [pc, #356]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	4955      	ldr	r1, [pc, #340]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	494d      	ldr	r1, [pc, #308]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f02:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	4944      	ldr	r1, [pc, #272]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f24:	4b3f      	ldr	r3, [pc, #252]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	493c      	ldr	r1, [pc, #240]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f46:	4b37      	ldr	r3, [pc, #220]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f54:	4933      	ldr	r1, [pc, #204]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f68:	4b2e      	ldr	r3, [pc, #184]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f76:	492b      	ldr	r1, [pc, #172]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f8a:	4b26      	ldr	r3, [pc, #152]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f90:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f98:	4922      	ldr	r1, [pc, #136]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fca:	4b16      	ldr	r3, [pc, #88]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd8:	4912      	ldr	r1, [pc, #72]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fec:	4b0d      	ldr	r3, [pc, #52]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ffc:	4909      	ldr	r1, [pc, #36]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d006      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80d9 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004018:	4b02      	ldr	r3, [pc, #8]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a01      	ldr	r2, [pc, #4]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004022:	e001      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004024:	40023800 	.word	0x40023800
 8004028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402a:	f7fe f9bf 	bl	80023ac <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004032:	f7fe f9bb 	bl	80023ac <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b64      	cmp	r3, #100	@ 0x64
 800403e:	d901      	bls.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e194      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004044:	4b6c      	ldr	r3, [pc, #432]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d021      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11d      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004064:	4b64      	ldr	r3, [pc, #400]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004072:	4b61      	ldr	r3, [pc, #388]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004078:	0e1b      	lsrs	r3, r3, #24
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	019a      	lsls	r2, r3, #6
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	061b      	lsls	r3, r3, #24
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	071b      	lsls	r3, r3, #28
 8004098:	4957      	ldr	r1, [pc, #348]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02e      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ca:	d129      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040cc:	4b4a      	ldr	r3, [pc, #296]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040da:	4b47      	ldr	r3, [pc, #284]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e0:	0f1b      	lsrs	r3, r3, #28
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	019a      	lsls	r2, r3, #6
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	071b      	lsls	r3, r3, #28
 8004100:	493d      	ldr	r1, [pc, #244]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004108:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800410a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800410e:	f023 021f 	bic.w	r2, r3, #31
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	3b01      	subs	r3, #1
 8004118:	4937      	ldr	r1, [pc, #220]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800412c:	4b32      	ldr	r3, [pc, #200]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004132:	0e1b      	lsrs	r3, r3, #24
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800413a:	4b2f      	ldr	r3, [pc, #188]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004140:	0f1b      	lsrs	r3, r3, #28
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	019a      	lsls	r2, r3, #6
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	041b      	lsls	r3, r3, #16
 8004154:	431a      	orrs	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	431a      	orrs	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	071b      	lsls	r3, r3, #28
 8004160:	4925      	ldr	r1, [pc, #148]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d011      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	019a      	lsls	r2, r3, #6
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	071b      	lsls	r3, r3, #28
 8004190:	4919      	ldr	r1, [pc, #100]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004198:	4b17      	ldr	r3, [pc, #92]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a16      	ldr	r2, [pc, #88]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a4:	f7fe f902 	bl	80023ac <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041ac:	f7fe f8fe 	bl	80023ac <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	@ 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0d7      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041be:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	f040 80cd 	bne.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041d2:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a08      	ldr	r2, [pc, #32]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041de:	f7fe f8e5 	bl	80023ac <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041e6:	f7fe f8e1 	bl	80023ac <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	@ 0x64
 80041f2:	d903      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0ba      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004208:	d0ed      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02e      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d12a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004232:	4b51      	ldr	r3, [pc, #324]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004240:	4b4d      	ldr	r3, [pc, #308]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	0f1b      	lsrs	r3, r3, #28
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	4944      	ldr	r1, [pc, #272]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800426e:	4b42      	ldr	r3, [pc, #264]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004274:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	493d      	ldr	r1, [pc, #244]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d022      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800429c:	d11d      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800429e:	4b36      	ldr	r3, [pc, #216]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042ac:	4b32      	ldr	r3, [pc, #200]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	0f1b      	lsrs	r3, r3, #28
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	019a      	lsls	r2, r3, #6
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	431a      	orrs	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	071b      	lsls	r3, r3, #28
 80042d2:	4929      	ldr	r1, [pc, #164]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d028      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042e6:	4b24      	ldr	r3, [pc, #144]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042f4:	4b20      	ldr	r3, [pc, #128]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	019a      	lsls	r2, r3, #6
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	431a      	orrs	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	071b      	lsls	r3, r3, #28
 800431a:	4917      	ldr	r1, [pc, #92]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004322:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004328:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	4911      	ldr	r1, [pc, #68]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004338:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0e      	ldr	r2, [pc, #56]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004344:	f7fe f832 	bl	80023ac <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800434c:	f7fe f82e 	bl	80023ac <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e007      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800436a:	d1ef      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e049      	b.n	8004422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f841 	bl	800442a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fa00 	bl	80047c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e054      	b.n	8004502 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <HAL_TIM_Base_Start_IT+0xd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d022      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004482:	d01d      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a22      	ldr	r2, [pc, #136]	@ (8004514 <HAL_TIM_Base_Start_IT+0xd4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a21      	ldr	r2, [pc, #132]	@ (8004518 <HAL_TIM_Base_Start_IT+0xd8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <HAL_TIM_Base_Start_IT+0xdc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004520 <HAL_TIM_Base_Start_IT+0xe0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004524 <HAL_TIM_Base_Start_IT+0xe4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004528 <HAL_TIM_Base_Start_IT+0xe8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d115      	bne.n	80044ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	4b19      	ldr	r3, [pc, #100]	@ (800452c <HAL_TIM_Base_Start_IT+0xec>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d015      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0xbe>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d8:	d011      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	e008      	b.n	80044fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e000      	b.n	8004500 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40010000 	.word	0x40010000
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	40010400 	.word	0x40010400
 8004524:	40014000 	.word	0x40014000
 8004528:	40001800 	.word	0x40001800
 800452c:	00010007 	.word	0x00010007

08004530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d122      	bne.n	800458c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b02      	cmp	r3, #2
 8004552:	d11b      	bne.n	800458c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0202 	mvn.w	r2, #2
 800455c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f905 	bl	8004782 <HAL_TIM_IC_CaptureCallback>
 8004578:	e005      	b.n	8004586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8f7 	bl	800476e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f908 	bl	8004796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d122      	bne.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d11b      	bne.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0204 	mvn.w	r2, #4
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8db 	bl	8004782 <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8cd 	bl	800476e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f8de 	bl	8004796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d122      	bne.n	8004634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d11b      	bne.n	8004634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0208 	mvn.w	r2, #8
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2204      	movs	r2, #4
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8b1 	bl	8004782 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8a3 	bl	800476e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8b4 	bl	8004796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b10      	cmp	r3, #16
 8004640:	d122      	bne.n	8004688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b10      	cmp	r3, #16
 800464e:	d11b      	bne.n	8004688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0210 	mvn.w	r2, #16
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2208      	movs	r2, #8
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f887 	bl	8004782 <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f879 	bl	800476e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f88a 	bl	8004796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0201 	mvn.w	r2, #1
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fbfc 	bl	8001eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046be:	2b80      	cmp	r3, #128	@ 0x80
 80046c0:	d10e      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046cc:	2b80      	cmp	r3, #128	@ 0x80
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f91a 	bl	8004914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b80      	cmp	r3, #128	@ 0x80
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f90d 	bl	8004928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004718:	2b40      	cmp	r3, #64	@ 0x40
 800471a:	d10e      	bne.n	800473a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004726:	2b40      	cmp	r3, #64	@ 0x40
 8004728:	d107      	bne.n	800473a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f838 	bl	80047aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b20      	cmp	r3, #32
 8004746:	d10e      	bne.n	8004766 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	d107      	bne.n	8004766 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f06f 0220 	mvn.w	r2, #32
 800475e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8cd 	bl	8004900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a40      	ldr	r2, [pc, #256]	@ (80048d4 <TIM_Base_SetConfig+0x114>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047de:	d00f      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3d      	ldr	r2, [pc, #244]	@ (80048d8 <TIM_Base_SetConfig+0x118>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00b      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3c      	ldr	r2, [pc, #240]	@ (80048dc <TIM_Base_SetConfig+0x11c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3b      	ldr	r2, [pc, #236]	@ (80048e0 <TIM_Base_SetConfig+0x120>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3a      	ldr	r2, [pc, #232]	@ (80048e4 <TIM_Base_SetConfig+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d108      	bne.n	8004812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a2f      	ldr	r2, [pc, #188]	@ (80048d4 <TIM_Base_SetConfig+0x114>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02b      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004820:	d027      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2c      	ldr	r2, [pc, #176]	@ (80048d8 <TIM_Base_SetConfig+0x118>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d023      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a2b      	ldr	r2, [pc, #172]	@ (80048dc <TIM_Base_SetConfig+0x11c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2a      	ldr	r2, [pc, #168]	@ (80048e0 <TIM_Base_SetConfig+0x120>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01b      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a29      	ldr	r2, [pc, #164]	@ (80048e4 <TIM_Base_SetConfig+0x124>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d017      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a28      	ldr	r2, [pc, #160]	@ (80048e8 <TIM_Base_SetConfig+0x128>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a27      	ldr	r2, [pc, #156]	@ (80048ec <TIM_Base_SetConfig+0x12c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00f      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a26      	ldr	r2, [pc, #152]	@ (80048f0 <TIM_Base_SetConfig+0x130>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00b      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a25      	ldr	r2, [pc, #148]	@ (80048f4 <TIM_Base_SetConfig+0x134>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a24      	ldr	r2, [pc, #144]	@ (80048f8 <TIM_Base_SetConfig+0x138>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a23      	ldr	r2, [pc, #140]	@ (80048fc <TIM_Base_SetConfig+0x13c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d108      	bne.n	8004884 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a0a      	ldr	r2, [pc, #40]	@ (80048d4 <TIM_Base_SetConfig+0x114>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_Base_SetConfig+0xf8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a0c      	ldr	r2, [pc, #48]	@ (80048e4 <TIM_Base_SetConfig+0x124>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d103      	bne.n	80048c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	615a      	str	r2, [r3, #20]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800
 80048e0:	40000c00 	.word	0x40000c00
 80048e4:	40010400 	.word	0x40010400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800
 80048f4:	40001800 	.word	0x40001800
 80048f8:	40001c00 	.word	0x40001c00
 80048fc:	40002000 	.word	0x40002000

08004900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e040      	b.n	80049d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd fb5e 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2224      	movs	r2, #36	@ 0x24
 8004968:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fbe6 	bl	800514c <UART_SetConfig>
 8004980:	4603      	mov	r3, r0
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fe3e 	bl	8005614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fec5 	bl	8005758 <UART_CheckIdleState>
 80049ce:	4603      	mov	r3, r0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	@ 0x28
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d171      	bne.n	8004ad4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_UART_Transmit+0x24>
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e06a      	b.n	8004ad6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2221      	movs	r2, #33	@ 0x21
 8004a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a0e:	f7fd fccd 	bl	80023ac <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2c:	d108      	bne.n	8004a40 <HAL_UART_Transmit+0x68>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e003      	b.n	8004a48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a48:	e02c      	b.n	8004aa4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	2180      	movs	r1, #128	@ 0x80
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 feb6 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e038      	b.n	8004ad6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	e007      	b.n	8004a92 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1cc      	bne.n	8004a4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2140      	movs	r1, #64	@ 0x40
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fe83 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e005      	b.n	8004ad6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b08a      	sub	sp, #40	@ 0x28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d132      	bne.n	8004b5c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_UART_Receive_IT+0x24>
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e02b      	b.n	8004b5e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d018      	beq.n	8004b4c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	613b      	str	r3, [r7, #16]
   return(result);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69f9      	ldr	r1, [r7, #28]
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fefe 	bl	8005954 <UART_Start_Receive_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	e000      	b.n	8004b5e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3728      	adds	r7, #40	@ 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b0ba      	sub	sp, #232	@ 0xe8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004b96:	4013      	ands	r3, r2
 8004b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d115      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00f      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8297 	beq.w	80050f4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
      }
      return;
 8004bce:	e291      	b.n	80050f4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8117 	beq.w	8004e08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004bea:	4b85      	ldr	r3, [pc, #532]	@ (8004e00 <HAL_UART_IRQHandler+0x298>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 810a 	beq.w	8004e08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d011      	beq.n	8004c24 <HAL_UART_IRQHandler+0xbc>
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d011      	beq.n	8004c54 <HAL_UART_IRQHandler+0xec>
 8004c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2202      	movs	r2, #2
 8004c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c4a:	f043 0204 	orr.w	r2, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d011      	beq.n	8004c84 <HAL_UART_IRQHandler+0x11c>
 8004c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2204      	movs	r2, #4
 8004c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7a:	f043 0202 	orr.w	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d017      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2208      	movs	r2, #8
 8004cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb6:	f043 0208 	orr.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d012      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x18a>
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 81fd 	beq.w	80050f8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04f      	beq.n	8004dea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fec8 	bl	8005ae0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5a:	2b40      	cmp	r3, #64	@ 0x40
 8004d5c:	d141      	bne.n	8004de2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3308      	adds	r3, #8
 8004d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1d9      	bne.n	8004d5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d013      	beq.n	8004dda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db6:	4a13      	ldr	r2, [pc, #76]	@ (8004e04 <HAL_UART_IRQHandler+0x29c>)
 8004db8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd ffd0 	bl	8002d64 <HAL_DMA_Abort_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e00f      	b.n	8004dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9a0 	bl	8005120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e00b      	b.n	8004dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f99c 	bl	8005120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	e007      	b.n	8004dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f998 	bl	8005120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004df8:	e17e      	b.n	80050f8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfa:	bf00      	nop
    return;
 8004dfc:	e17c      	b.n	80050f8 <HAL_UART_IRQHandler+0x590>
 8004dfe:	bf00      	nop
 8004e00:	04000120 	.word	0x04000120
 8004e04:	08005ba9 	.word	0x08005ba9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 814c 	bne.w	80050aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8145 	beq.w	80050aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 813e 	beq.w	80050aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2210      	movs	r2, #16
 8004e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e40:	2b40      	cmp	r3, #64	@ 0x40
 8004e42:	f040 80b6 	bne.w	8004fb2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8150 	beq.w	80050fc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e66:	429a      	cmp	r2, r3
 8004e68:	f080 8148 	bcs.w	80050fc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e80:	f000 8086 	beq.w	8004f90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004eb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1da      	bne.n	8004e84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ef2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e1      	bne.n	8004ece <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e3      	bne.n	8004f0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f60:	f023 0310 	bic.w	r3, r3, #16
 8004f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e4      	bne.n	8004f50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd fe7a 	bl	8002c84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8c2 	bl	8005134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fb0:	e0a4      	b.n	80050fc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8096 	beq.w	8005100 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8091 	beq.w	8005100 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005000:	647b      	str	r3, [r7, #68]	@ 0x44
 8005002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800500e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e4      	bne.n	8004fde <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	623b      	str	r3, [r7, #32]
   return(result);
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3308      	adds	r3, #8
 8005034:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005038:	633a      	str	r2, [r7, #48]	@ 0x30
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800503e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e3      	bne.n	8005014 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	60fb      	str	r3, [r7, #12]
   return(result);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f023 0310 	bic.w	r3, r3, #16
 8005074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	69b9      	ldr	r1, [r7, #24]
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	617b      	str	r3, [r7, #20]
   return(result);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e4      	bne.n	8005060 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800509c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f846 	bl	8005134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050a8:	e02a      	b.n	8005100 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01c      	beq.n	8005104 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
    }
    return;
 80050d2:	e017      	b.n	8005104 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <HAL_UART_IRQHandler+0x59e>
 80050e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fd71 	bl	8005bd4 <UART_EndTransmit_IT>
    return;
 80050f2:	e008      	b.n	8005106 <HAL_UART_IRQHandler+0x59e>
      return;
 80050f4:	bf00      	nop
 80050f6:	e006      	b.n	8005106 <HAL_UART_IRQHandler+0x59e>
    return;
 80050f8:	bf00      	nop
 80050fa:	e004      	b.n	8005106 <HAL_UART_IRQHandler+0x59e>
      return;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <HAL_UART_IRQHandler+0x59e>
      return;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <HAL_UART_IRQHandler+0x59e>
    return;
 8005104:	bf00      	nop
  }

}
 8005106:	37e8      	adds	r7, #232	@ 0xe8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4ba6      	ldr	r3, [pc, #664]	@ (8005410 <UART_SetConfig+0x2c4>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	6979      	ldr	r1, [r7, #20]
 8005180:	430b      	orrs	r3, r1
 8005182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a94      	ldr	r2, [pc, #592]	@ (8005414 <UART_SetConfig+0x2c8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d120      	bne.n	800520a <UART_SetConfig+0xbe>
 80051c8:	4b93      	ldr	r3, [pc, #588]	@ (8005418 <UART_SetConfig+0x2cc>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d816      	bhi.n	8005204 <UART_SetConfig+0xb8>
 80051d6:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <UART_SetConfig+0x90>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	080051f3 	.word	0x080051f3
 80051e8:	080051ff 	.word	0x080051ff
 80051ec:	2301      	movs	r3, #1
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e150      	b.n	8005494 <UART_SetConfig+0x348>
 80051f2:	2302      	movs	r3, #2
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e14d      	b.n	8005494 <UART_SetConfig+0x348>
 80051f8:	2304      	movs	r3, #4
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e14a      	b.n	8005494 <UART_SetConfig+0x348>
 80051fe:	2308      	movs	r3, #8
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e147      	b.n	8005494 <UART_SetConfig+0x348>
 8005204:	2310      	movs	r3, #16
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e144      	b.n	8005494 <UART_SetConfig+0x348>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a83      	ldr	r2, [pc, #524]	@ (800541c <UART_SetConfig+0x2d0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d132      	bne.n	800527a <UART_SetConfig+0x12e>
 8005214:	4b80      	ldr	r3, [pc, #512]	@ (8005418 <UART_SetConfig+0x2cc>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d828      	bhi.n	8005274 <UART_SetConfig+0x128>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <UART_SetConfig+0xdc>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800525d 	.word	0x0800525d
 800522c:	08005275 	.word	0x08005275
 8005230:	08005275 	.word	0x08005275
 8005234:	08005275 	.word	0x08005275
 8005238:	08005269 	.word	0x08005269
 800523c:	08005275 	.word	0x08005275
 8005240:	08005275 	.word	0x08005275
 8005244:	08005275 	.word	0x08005275
 8005248:	08005263 	.word	0x08005263
 800524c:	08005275 	.word	0x08005275
 8005250:	08005275 	.word	0x08005275
 8005254:	08005275 	.word	0x08005275
 8005258:	0800526f 	.word	0x0800526f
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e118      	b.n	8005494 <UART_SetConfig+0x348>
 8005262:	2302      	movs	r3, #2
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e115      	b.n	8005494 <UART_SetConfig+0x348>
 8005268:	2304      	movs	r3, #4
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e112      	b.n	8005494 <UART_SetConfig+0x348>
 800526e:	2308      	movs	r3, #8
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e10f      	b.n	8005494 <UART_SetConfig+0x348>
 8005274:	2310      	movs	r3, #16
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e10c      	b.n	8005494 <UART_SetConfig+0x348>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a68      	ldr	r2, [pc, #416]	@ (8005420 <UART_SetConfig+0x2d4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d120      	bne.n	80052c6 <UART_SetConfig+0x17a>
 8005284:	4b64      	ldr	r3, [pc, #400]	@ (8005418 <UART_SetConfig+0x2cc>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800528e:	2b30      	cmp	r3, #48	@ 0x30
 8005290:	d013      	beq.n	80052ba <UART_SetConfig+0x16e>
 8005292:	2b30      	cmp	r3, #48	@ 0x30
 8005294:	d814      	bhi.n	80052c0 <UART_SetConfig+0x174>
 8005296:	2b20      	cmp	r3, #32
 8005298:	d009      	beq.n	80052ae <UART_SetConfig+0x162>
 800529a:	2b20      	cmp	r3, #32
 800529c:	d810      	bhi.n	80052c0 <UART_SetConfig+0x174>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <UART_SetConfig+0x15c>
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d006      	beq.n	80052b4 <UART_SetConfig+0x168>
 80052a6:	e00b      	b.n	80052c0 <UART_SetConfig+0x174>
 80052a8:	2300      	movs	r3, #0
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e0f2      	b.n	8005494 <UART_SetConfig+0x348>
 80052ae:	2302      	movs	r3, #2
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e0ef      	b.n	8005494 <UART_SetConfig+0x348>
 80052b4:	2304      	movs	r3, #4
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e0ec      	b.n	8005494 <UART_SetConfig+0x348>
 80052ba:	2308      	movs	r3, #8
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e0e9      	b.n	8005494 <UART_SetConfig+0x348>
 80052c0:	2310      	movs	r3, #16
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e0e6      	b.n	8005494 <UART_SetConfig+0x348>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a56      	ldr	r2, [pc, #344]	@ (8005424 <UART_SetConfig+0x2d8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d120      	bne.n	8005312 <UART_SetConfig+0x1c6>
 80052d0:	4b51      	ldr	r3, [pc, #324]	@ (8005418 <UART_SetConfig+0x2cc>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052da:	2bc0      	cmp	r3, #192	@ 0xc0
 80052dc:	d013      	beq.n	8005306 <UART_SetConfig+0x1ba>
 80052de:	2bc0      	cmp	r3, #192	@ 0xc0
 80052e0:	d814      	bhi.n	800530c <UART_SetConfig+0x1c0>
 80052e2:	2b80      	cmp	r3, #128	@ 0x80
 80052e4:	d009      	beq.n	80052fa <UART_SetConfig+0x1ae>
 80052e6:	2b80      	cmp	r3, #128	@ 0x80
 80052e8:	d810      	bhi.n	800530c <UART_SetConfig+0x1c0>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <UART_SetConfig+0x1a8>
 80052ee:	2b40      	cmp	r3, #64	@ 0x40
 80052f0:	d006      	beq.n	8005300 <UART_SetConfig+0x1b4>
 80052f2:	e00b      	b.n	800530c <UART_SetConfig+0x1c0>
 80052f4:	2300      	movs	r3, #0
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0cc      	b.n	8005494 <UART_SetConfig+0x348>
 80052fa:	2302      	movs	r3, #2
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0c9      	b.n	8005494 <UART_SetConfig+0x348>
 8005300:	2304      	movs	r3, #4
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0c6      	b.n	8005494 <UART_SetConfig+0x348>
 8005306:	2308      	movs	r3, #8
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e0c3      	b.n	8005494 <UART_SetConfig+0x348>
 800530c:	2310      	movs	r3, #16
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e0c0      	b.n	8005494 <UART_SetConfig+0x348>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a44      	ldr	r2, [pc, #272]	@ (8005428 <UART_SetConfig+0x2dc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d125      	bne.n	8005368 <UART_SetConfig+0x21c>
 800531c:	4b3e      	ldr	r3, [pc, #248]	@ (8005418 <UART_SetConfig+0x2cc>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800532a:	d017      	beq.n	800535c <UART_SetConfig+0x210>
 800532c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005330:	d817      	bhi.n	8005362 <UART_SetConfig+0x216>
 8005332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005336:	d00b      	beq.n	8005350 <UART_SetConfig+0x204>
 8005338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800533c:	d811      	bhi.n	8005362 <UART_SetConfig+0x216>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <UART_SetConfig+0x1fe>
 8005342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005346:	d006      	beq.n	8005356 <UART_SetConfig+0x20a>
 8005348:	e00b      	b.n	8005362 <UART_SetConfig+0x216>
 800534a:	2300      	movs	r3, #0
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e0a1      	b.n	8005494 <UART_SetConfig+0x348>
 8005350:	2302      	movs	r3, #2
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e09e      	b.n	8005494 <UART_SetConfig+0x348>
 8005356:	2304      	movs	r3, #4
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e09b      	b.n	8005494 <UART_SetConfig+0x348>
 800535c:	2308      	movs	r3, #8
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e098      	b.n	8005494 <UART_SetConfig+0x348>
 8005362:	2310      	movs	r3, #16
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e095      	b.n	8005494 <UART_SetConfig+0x348>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2f      	ldr	r2, [pc, #188]	@ (800542c <UART_SetConfig+0x2e0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d125      	bne.n	80053be <UART_SetConfig+0x272>
 8005372:	4b29      	ldr	r3, [pc, #164]	@ (8005418 <UART_SetConfig+0x2cc>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005378:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800537c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005380:	d017      	beq.n	80053b2 <UART_SetConfig+0x266>
 8005382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005386:	d817      	bhi.n	80053b8 <UART_SetConfig+0x26c>
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538c:	d00b      	beq.n	80053a6 <UART_SetConfig+0x25a>
 800538e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005392:	d811      	bhi.n	80053b8 <UART_SetConfig+0x26c>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <UART_SetConfig+0x254>
 8005398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539c:	d006      	beq.n	80053ac <UART_SetConfig+0x260>
 800539e:	e00b      	b.n	80053b8 <UART_SetConfig+0x26c>
 80053a0:	2301      	movs	r3, #1
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e076      	b.n	8005494 <UART_SetConfig+0x348>
 80053a6:	2302      	movs	r3, #2
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e073      	b.n	8005494 <UART_SetConfig+0x348>
 80053ac:	2304      	movs	r3, #4
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e070      	b.n	8005494 <UART_SetConfig+0x348>
 80053b2:	2308      	movs	r3, #8
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e06d      	b.n	8005494 <UART_SetConfig+0x348>
 80053b8:	2310      	movs	r3, #16
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e06a      	b.n	8005494 <UART_SetConfig+0x348>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005430 <UART_SetConfig+0x2e4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d138      	bne.n	800543a <UART_SetConfig+0x2ee>
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <UART_SetConfig+0x2cc>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053d6:	d017      	beq.n	8005408 <UART_SetConfig+0x2bc>
 80053d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053dc:	d82a      	bhi.n	8005434 <UART_SetConfig+0x2e8>
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e2:	d00b      	beq.n	80053fc <UART_SetConfig+0x2b0>
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e8:	d824      	bhi.n	8005434 <UART_SetConfig+0x2e8>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <UART_SetConfig+0x2aa>
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f2:	d006      	beq.n	8005402 <UART_SetConfig+0x2b6>
 80053f4:	e01e      	b.n	8005434 <UART_SetConfig+0x2e8>
 80053f6:	2300      	movs	r3, #0
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e04b      	b.n	8005494 <UART_SetConfig+0x348>
 80053fc:	2302      	movs	r3, #2
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e048      	b.n	8005494 <UART_SetConfig+0x348>
 8005402:	2304      	movs	r3, #4
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e045      	b.n	8005494 <UART_SetConfig+0x348>
 8005408:	2308      	movs	r3, #8
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e042      	b.n	8005494 <UART_SetConfig+0x348>
 800540e:	bf00      	nop
 8005410:	efff69f3 	.word	0xefff69f3
 8005414:	40011000 	.word	0x40011000
 8005418:	40023800 	.word	0x40023800
 800541c:	40004400 	.word	0x40004400
 8005420:	40004800 	.word	0x40004800
 8005424:	40004c00 	.word	0x40004c00
 8005428:	40005000 	.word	0x40005000
 800542c:	40011400 	.word	0x40011400
 8005430:	40007800 	.word	0x40007800
 8005434:	2310      	movs	r3, #16
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e02c      	b.n	8005494 <UART_SetConfig+0x348>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a72      	ldr	r2, [pc, #456]	@ (8005608 <UART_SetConfig+0x4bc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d125      	bne.n	8005490 <UART_SetConfig+0x344>
 8005444:	4b71      	ldr	r3, [pc, #452]	@ (800560c <UART_SetConfig+0x4c0>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800544e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005452:	d017      	beq.n	8005484 <UART_SetConfig+0x338>
 8005454:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005458:	d817      	bhi.n	800548a <UART_SetConfig+0x33e>
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545e:	d00b      	beq.n	8005478 <UART_SetConfig+0x32c>
 8005460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005464:	d811      	bhi.n	800548a <UART_SetConfig+0x33e>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <UART_SetConfig+0x326>
 800546a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800546e:	d006      	beq.n	800547e <UART_SetConfig+0x332>
 8005470:	e00b      	b.n	800548a <UART_SetConfig+0x33e>
 8005472:	2300      	movs	r3, #0
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e00d      	b.n	8005494 <UART_SetConfig+0x348>
 8005478:	2302      	movs	r3, #2
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e00a      	b.n	8005494 <UART_SetConfig+0x348>
 800547e:	2304      	movs	r3, #4
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e007      	b.n	8005494 <UART_SetConfig+0x348>
 8005484:	2308      	movs	r3, #8
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e004      	b.n	8005494 <UART_SetConfig+0x348>
 800548a:	2310      	movs	r3, #16
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e001      	b.n	8005494 <UART_SetConfig+0x348>
 8005490:	2310      	movs	r3, #16
 8005492:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800549c:	d15b      	bne.n	8005556 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800549e:	7ffb      	ldrb	r3, [r7, #31]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d828      	bhi.n	80054f6 <UART_SetConfig+0x3aa>
 80054a4:	a201      	add	r2, pc, #4	@ (adr r2, 80054ac <UART_SetConfig+0x360>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe fb0a 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 80054d4:	61b8      	str	r0, [r7, #24]
        break;
 80054d6:	e013      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d8:	f7fe fb1a 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 80054dc:	61b8      	str	r0, [r7, #24]
        break;
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005610 <UART_SetConfig+0x4c4>)
 80054e2:	61bb      	str	r3, [r7, #24]
        break;
 80054e4:	e00c      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe fa2d 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80054ea:	61b8      	str	r0, [r7, #24]
        break;
 80054ec:	e008      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054f2:	61bb      	str	r3, [r7, #24]
        break;
 80054f4:	e004      	b.n	8005500 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	77bb      	strb	r3, [r7, #30]
        break;
 80054fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d074      	beq.n	80055f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d916      	bls.n	8005550 <UART_SetConfig+0x404>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005528:	d212      	bcs.n	8005550 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f023 030f 	bic.w	r3, r3, #15
 8005532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	b29a      	uxth	r2, r3
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	4313      	orrs	r3, r2
 8005544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	89fa      	ldrh	r2, [r7, #14]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	e04f      	b.n	80055f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	77bb      	strb	r3, [r7, #30]
 8005554:	e04c      	b.n	80055f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d828      	bhi.n	80055ae <UART_SetConfig+0x462>
 800555c:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <UART_SetConfig+0x418>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe faae 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 800558c:	61b8      	str	r0, [r7, #24]
        break;
 800558e:	e013      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe fabe 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8005594:	61b8      	str	r0, [r7, #24]
        break;
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <UART_SetConfig+0x4c4>)
 800559a:	61bb      	str	r3, [r7, #24]
        break;
 800559c:	e00c      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe f9d1 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80055a2:	61b8      	str	r0, [r7, #24]
        break;
 80055a4:	e008      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055aa:	61bb      	str	r3, [r7, #24]
        break;
 80055ac:	e004      	b.n	80055b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77bb      	strb	r3, [r7, #30]
        break;
 80055b6:	bf00      	nop
    }

    if (pclk != 0U)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d018      	beq.n	80055f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	085a      	lsrs	r2, r3, #1
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	441a      	add	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b0f      	cmp	r3, #15
 80055d6:	d909      	bls.n	80055ec <UART_SetConfig+0x4a0>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055de:	d205      	bcs.n	80055ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e001      	b.n	80055f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40007c00 	.word	0x40007c00
 800560c:	40023800 	.word	0x40023800
 8005610:	00f42400 	.word	0x00f42400

08005614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005712:	d10a      	bne.n	800572a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005768:	f7fc fe20 	bl	80023ac <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d10e      	bne.n	800579a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f81b 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e011      	b.n	80057be <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b09c      	sub	sp, #112	@ 0x70
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	e0a7      	b.n	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	f000 80a3 	beq.w	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fc fde3 	bl	80023ac <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d13f      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005808:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800580c:	667b      	str	r3, [r7, #100]	@ 0x64
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005818:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800581c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e6      	bne.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	663b      	str	r3, [r7, #96]	@ 0x60
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800584a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800584c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e5      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e068      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d050      	beq.n	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005894:	d148      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800589e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80058b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80058cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	613b      	str	r3, [r7, #16]
   return(result);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80058f2:	623a      	str	r2, [r7, #32]
 80058f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69f9      	ldr	r1, [r7, #28]
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e010      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4013      	ands	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	429a      	cmp	r2, r3
 8005944:	f43f af48 	beq.w	80057d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3770      	adds	r7, #112	@ 0x70
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005954:	b480      	push	{r7}
 8005956:	b097      	sub	sp, #92	@ 0x5c
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005986:	d10e      	bne.n	80059a6 <UART_Start_Receive_IT+0x52>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d105      	bne.n	800599c <UART_Start_Receive_IT+0x48>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005996:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800599a:	e02d      	b.n	80059f8 <UART_Start_Receive_IT+0xa4>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	22ff      	movs	r2, #255	@ 0xff
 80059a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059a4:	e028      	b.n	80059f8 <UART_Start_Receive_IT+0xa4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10d      	bne.n	80059ca <UART_Start_Receive_IT+0x76>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <UART_Start_Receive_IT+0x6c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	22ff      	movs	r2, #255	@ 0xff
 80059ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059be:	e01b      	b.n	80059f8 <UART_Start_Receive_IT+0xa4>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	227f      	movs	r2, #127	@ 0x7f
 80059c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059c8:	e016      	b.n	80059f8 <UART_Start_Receive_IT+0xa4>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d2:	d10d      	bne.n	80059f0 <UART_Start_Receive_IT+0x9c>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <UART_Start_Receive_IT+0x92>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	227f      	movs	r2, #127	@ 0x7f
 80059e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059e4:	e008      	b.n	80059f8 <UART_Start_Receive_IT+0xa4>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	223f      	movs	r2, #63	@ 0x3f
 80059ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059ee:	e003      	b.n	80059f8 <UART_Start_Receive_IT+0xa4>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2222      	movs	r2, #34	@ 0x22
 8005a04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a28:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005a2a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e5      	bne.n	8005a08 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a44:	d107      	bne.n	8005a56 <UART_Start_Receive_IT+0x102>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a21      	ldr	r2, [pc, #132]	@ (8005ad8 <UART_Start_Receive_IT+0x184>)
 8005a52:	669a      	str	r2, [r3, #104]	@ 0x68
 8005a54:	e002      	b.n	8005a5c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a20      	ldr	r2, [pc, #128]	@ (8005adc <UART_Start_Receive_IT+0x188>)
 8005a5a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d019      	beq.n	8005a98 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a84:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e6      	bne.n	8005a64 <UART_Start_Receive_IT+0x110>
 8005a96:	e018      	b.n	8005aca <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f043 0320 	orr.w	r3, r3, #32
 8005aac:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	69f9      	ldr	r1, [r7, #28]
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e6      	bne.n	8005a98 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	375c      	adds	r7, #92	@ 0x5c
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	08005d8f 	.word	0x08005d8f
 8005adc:	08005c29 	.word	0x08005c29

08005ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b095      	sub	sp, #84	@ 0x54
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e6      	bne.n	8005ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d118      	bne.n	8005b88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f023 0310 	bic.w	r3, r3, #16
 8005b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6979      	ldr	r1, [r7, #20]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	613b      	str	r3, [r7, #16]
   return(result);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b9c:	bf00      	nop
 8005b9e:	3754      	adds	r7, #84	@ 0x54
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff faaa 	bl	8005120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6979      	ldr	r1, [r7, #20]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	613b      	str	r3, [r7, #16]
   return(result);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e6      	bne.n	8005bdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fa76 	bl	800510c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c20:	bf00      	nop
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b096      	sub	sp, #88	@ 0x58
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c36:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c40:	2b22      	cmp	r3, #34	@ 0x22
 8005c42:	f040 8098 	bne.w	8005d76 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c50:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8005c54:	b2d9      	uxtb	r1, r3
 8005c56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c60:	400a      	ands	r2, r1
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d17b      	bne.n	8005d86 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ce0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d12e      	bne.n	8005d6e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	617b      	str	r3, [r7, #20]
   return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d103      	bne.n	8005d5e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff f9e4 	bl	8005134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d6c:	e00b      	b.n	8005d86 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fb f8ea 	bl	8000f48 <HAL_UART_RxCpltCallback>
}
 8005d74:	e007      	b.n	8005d86 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0208 	orr.w	r2, r2, #8
 8005d84:	619a      	str	r2, [r3, #24]
}
 8005d86:	bf00      	nop
 8005d88:	3758      	adds	r7, #88	@ 0x58
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b096      	sub	sp, #88	@ 0x58
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d9c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da6:	2b22      	cmp	r3, #34	@ 0x22
 8005da8:	f040 8098 	bne.w	8005edc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dba:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005dbc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8005dc0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd0:	1c9a      	adds	r2, r3, #2
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d17b      	bne.n	8005eec <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e6      	bne.n	8005df4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3308      	adds	r3, #8
 8005e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e5      	bne.n	8005e26 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d12e      	bne.n	8005ed4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f023 0310 	bic.w	r3, r3, #16
 8005e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e6      	bne.n	8005e7c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d103      	bne.n	8005ec4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff f931 	bl	8005134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ed2:	e00b      	b.n	8005eec <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fb f837 	bl	8000f48 <HAL_UART_RxCpltCallback>
}
 8005eda:	e007      	b.n	8005eec <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0208 	orr.w	r2, r2, #8
 8005eea:	619a      	str	r2, [r3, #24]
}
 8005eec:	bf00      	nop
 8005eee:	3758      	adds	r7, #88	@ 0x58
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005ef8:	bf00      	nop
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f0a:	f3ef 8305 	mrs	r3, IPSR
 8005f0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10f      	bne.n	8005f36 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f16:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1a:	607b      	str	r3, [r7, #4]
  return(result);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d105      	bne.n	8005f2e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f22:	f3ef 8311 	mrs	r3, BASEPRI
 8005f26:	603b      	str	r3, [r7, #0]
  return(result);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <osKernelInitialize+0x3a>
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f68 <osKernelInitialize+0x64>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d103      	bne.n	8005f3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f36:	f06f 0305 	mvn.w	r3, #5
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e00c      	b.n	8005f58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f68 <osKernelInitialize+0x64>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f46:	4b08      	ldr	r3, [pc, #32]	@ (8005f68 <osKernelInitialize+0x64>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e002      	b.n	8005f58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000318 	.word	0x20000318

08005f6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f72:	f3ef 8305 	mrs	r3, IPSR
 8005f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f82:	607b      	str	r3, [r7, #4]
  return(result);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <osKernelStart+0x3a>
 8005f96:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd4 <osKernelStart+0x68>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d103      	bne.n	8005fa6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005f9e:	f06f 0305 	mvn.w	r3, #5
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e010      	b.n	8005fc8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <osKernelStart+0x68>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d109      	bne.n	8005fc2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fae:	f7ff ffa1 	bl	8005ef4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fb2:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <osKernelStart+0x68>)
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fb8:	f001 fd7e 	bl	8007ab8 <vTaskStartScheduler>
      stat = osOK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e002      	b.n	8005fc8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000318 	.word	0x20000318

08005fd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b090      	sub	sp, #64	@ 0x40
 8005fdc:	af04      	add	r7, sp, #16
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe8:	f3ef 8305 	mrs	r3, IPSR
 8005fec:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f040 808f 	bne.w	8006114 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffa:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d105      	bne.n	800600e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006002:	f3ef 8311 	mrs	r3, BASEPRI
 8006006:	617b      	str	r3, [r7, #20]
  return(result);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <osThreadNew+0x3e>
 800600e:	4b44      	ldr	r3, [pc, #272]	@ (8006120 <osThreadNew+0x148>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d07e      	beq.n	8006114 <osThreadNew+0x13c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d07b      	beq.n	8006114 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800601c:	2380      	movs	r3, #128	@ 0x80
 800601e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006020:	2318      	movs	r3, #24
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8006024:	2300      	movs	r3, #0
 8006026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8006028:	f04f 33ff 	mov.w	r3, #4294967295
 800602c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d045      	beq.n	80060c0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <osThreadNew+0x6a>
        name = attr->name;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <osThreadNew+0x90>
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	2b38      	cmp	r3, #56	@ 0x38
 800605a:	d805      	bhi.n	8006068 <osThreadNew+0x90>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <osThreadNew+0x94>
        return (NULL);
 8006068:	2300      	movs	r3, #0
 800606a:	e054      	b.n	8006116 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <osThreadNew+0xca>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2ba7      	cmp	r3, #167	@ 0xa7
 800608a:	d90a      	bls.n	80060a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <osThreadNew+0xca>
        mem = 1;
 800609c:	2301      	movs	r3, #1
 800609e:	623b      	str	r3, [r7, #32]
 80060a0:	e010      	b.n	80060c4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <osThreadNew+0xec>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d108      	bne.n	80060c4 <osThreadNew+0xec>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <osThreadNew+0xec>
          mem = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	623b      	str	r3, [r7, #32]
 80060be:	e001      	b.n	80060c4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d110      	bne.n	80060ec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060d2:	9202      	str	r2, [sp, #8]
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 faeb 	bl	80076bc <xTaskCreateStatic>
 80060e6:	4603      	mov	r3, r0
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	e013      	b.n	8006114 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d110      	bne.n	8006114 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f107 0310 	add.w	r3, r7, #16
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f001 fb3f 	bl	8007788 <xTaskCreate>
 800610a:	4603      	mov	r3, r0
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <osThreadNew+0x13c>
          hTask = NULL;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006114:	693b      	ldr	r3, [r7, #16]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3730      	adds	r7, #48	@ 0x30
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000318 	.word	0x20000318

08006124 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612c:	f3ef 8305 	mrs	r3, IPSR
 8006130:	613b      	str	r3, [r7, #16]
  return(result);
 8006132:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10f      	bne.n	8006158 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006138:	f3ef 8310 	mrs	r3, PRIMASK
 800613c:	60fb      	str	r3, [r7, #12]
  return(result);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006144:	f3ef 8311 	mrs	r3, BASEPRI
 8006148:	60bb      	str	r3, [r7, #8]
  return(result);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <osDelay+0x3c>
 8006150:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <osDelay+0x58>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d103      	bne.n	8006160 <osDelay+0x3c>
    stat = osErrorISR;
 8006158:	f06f 0305 	mvn.w	r3, #5
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	e007      	b.n	8006170 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <osDelay+0x4c>
      vTaskDelay(ticks);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 fc6c 	bl	8007a48 <vTaskDelay>
    }
  }

  return (stat);
 8006170:	697b      	ldr	r3, [r7, #20]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000318 	.word	0x20000318

08006180 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f002 ff41 	bl	8009010 <pvTimerGetTimerID>
 800618e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	6852      	ldr	r2, [r2, #4]
 800619e:	4610      	mov	r0, r2
 80061a0:	4798      	blx	r3
  }
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	@ 0x38
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	460b      	mov	r3, r1
 80061ba:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c0:	f3ef 8305 	mrs	r3, IPSR
 80061c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80061c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d16a      	bne.n	80062a2 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061cc:	f3ef 8310 	mrs	r3, PRIMASK
 80061d0:	617b      	str	r3, [r7, #20]
  return(result);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061d8:	f3ef 8311 	mrs	r3, BASEPRI
 80061dc:	613b      	str	r3, [r7, #16]
  return(result);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <osTimerNew+0x40>
 80061e4:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <osTimerNew+0x100>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d05a      	beq.n	80062a2 <osTimerNew+0xf6>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d057      	beq.n	80062a2 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80061f2:	2008      	movs	r0, #8
 80061f4:	f003 f970 	bl	80094d8 <pvPortMalloc>
 80061f8:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d050      	beq.n	80062a2 <osTimerNew+0xf6>
      callb->func = func;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <osTimerNew+0x6c>
        reload = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24
 8006216:	e001      	b.n	800621c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 800621c:	f04f 33ff 	mov.w	r3, #4294967295
 8006220:	623b      	str	r3, [r7, #32]
      name = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01c      	beq.n	8006266 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <osTimerNew+0x8e>
          name = attr->name;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d006      	beq.n	8006250 <osTimerNew+0xa4>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b2b      	cmp	r3, #43	@ 0x2b
 8006248:	d902      	bls.n	8006250 <osTimerNew+0xa4>
          mem = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	623b      	str	r3, [r7, #32]
 800624e:	e00c      	b.n	800626a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d108      	bne.n	800626a <osTimerNew+0xbe>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <osTimerNew+0xbe>
            mem = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	623b      	str	r3, [r7, #32]
 8006264:	e001      	b.n	800626a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d10c      	bne.n	800628a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	4b0e      	ldr	r3, [pc, #56]	@ (80062b0 <osTimerNew+0x104>)
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627e:	2101      	movs	r1, #1
 8006280:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006282:	f002 fafa 	bl	800887a <xTimerCreateStatic>
 8006286:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006288:	e00b      	b.n	80062a2 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d108      	bne.n	80062a2 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006290:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <osTimerNew+0x104>)
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006298:	2101      	movs	r1, #1
 800629a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800629c:	f002 facc 	bl	8008838 <xTimerCreate>
 80062a0:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80062a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3730      	adds	r7, #48	@ 0x30
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000318 	.word	0x20000318
 80062b0:	08006181 	.word	0x08006181

080062b4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	@ 0x28
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c2:	f3ef 8305 	mrs	r3, IPSR
 80062c6:	617b      	str	r3, [r7, #20]
  return(result);
 80062c8:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10f      	bne.n	80062ee <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ce:	f3ef 8310 	mrs	r3, PRIMASK
 80062d2:	613b      	str	r3, [r7, #16]
  return(result);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062da:	f3ef 8311 	mrs	r3, BASEPRI
 80062de:	60fb      	str	r3, [r7, #12]
  return(result);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <osTimerStart+0x42>
 80062e6:	4b12      	ldr	r3, [pc, #72]	@ (8006330 <osTimerStart+0x7c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d103      	bne.n	80062f6 <osTimerStart+0x42>
    stat = osErrorISR;
 80062ee:	f06f 0305 	mvn.w	r3, #5
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e017      	b.n	8006326 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <osTimerStart+0x50>
    stat = osErrorParameter;
 80062fc:	f06f 0303 	mvn.w	r3, #3
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	e010      	b.n	8006326 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006304:	2300      	movs	r3, #0
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	2300      	movs	r3, #0
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	2104      	movs	r1, #4
 800630e:	69b8      	ldr	r0, [r7, #24]
 8006310:	f002 fb36 	bl	8008980 <xTimerGenericCommand>
 8006314:	4603      	mov	r3, r0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d102      	bne.n	8006320 <osTimerStart+0x6c>
      stat = osOK;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	e002      	b.n	8006326 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8006320:	f06f 0302 	mvn.w	r3, #2
 8006324:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8006326:	69fb      	ldr	r3, [r7, #28]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20000318 	.word	0x20000318

08006334 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	@ 0x28
 8006338:	af02      	add	r7, sp, #8
 800633a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006340:	f3ef 8305 	mrs	r3, IPSR
 8006344:	617b      	str	r3, [r7, #20]
  return(result);
 8006346:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10f      	bne.n	800636c <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634c:	f3ef 8310 	mrs	r3, PRIMASK
 8006350:	613b      	str	r3, [r7, #16]
  return(result);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <osTimerStop+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006358:	f3ef 8311 	mrs	r3, BASEPRI
 800635c:	60fb      	str	r3, [r7, #12]
  return(result);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <osTimerStop+0x40>
 8006364:	4b17      	ldr	r3, [pc, #92]	@ (80063c4 <osTimerStop+0x90>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d103      	bne.n	8006374 <osTimerStop+0x40>
    stat = osErrorISR;
 800636c:	f06f 0305 	mvn.w	r3, #5
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e021      	b.n	80063b8 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <osTimerStop+0x4e>
    stat = osErrorParameter;
 800637a:	f06f 0303 	mvn.w	r3, #3
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	e01a      	b.n	80063b8 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8006382:	69b8      	ldr	r0, [r7, #24]
 8006384:	f002 fe18 	bl	8008fb8 <xTimerIsTimerActive>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <osTimerStop+0x62>
      stat = osErrorResource;
 800638e:	f06f 0302 	mvn.w	r3, #2
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	e010      	b.n	80063b8 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8006396:	2300      	movs	r3, #0
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	2300      	movs	r3, #0
 800639c:	2200      	movs	r2, #0
 800639e:	2103      	movs	r1, #3
 80063a0:	69b8      	ldr	r0, [r7, #24]
 80063a2:	f002 faed 	bl	8008980 <xTimerGenericCommand>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d102      	bne.n	80063b2 <osTimerStop+0x7e>
        stat = osOK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e002      	b.n	80063b8 <osTimerStop+0x84>
      } else {
        stat = osError;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80063b8:	69fb      	ldr	r3, [r7, #28]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000318 	.word	0x20000318

080063c8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	@ 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d4:	f3ef 8305 	mrs	r3, IPSR
 80063d8:	613b      	str	r3, [r7, #16]
  return(result);
 80063da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 8085 	bne.w	80064ec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e2:	f3ef 8310 	mrs	r3, PRIMASK
 80063e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ee:	f3ef 8311 	mrs	r3, BASEPRI
 80063f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osMutexNew+0x3a>
 80063fa:	4b3f      	ldr	r3, [pc, #252]	@ (80064f8 <osMutexNew+0x130>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d074      	beq.n	80064ec <osMutexNew+0x124>
    if (attr != NULL) {
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	623b      	str	r3, [r7, #32]
 800640e:	e001      	b.n	8006414 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <osMutexNew+0x5c>
      rmtx = 1U;
 800641e:	2301      	movs	r3, #1
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	e001      	b.n	8006428 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d15c      	bne.n	80064ec <osMutexNew+0x124>
      mem = -1;
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d006      	beq.n	8006454 <osMutexNew+0x8c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b4f      	cmp	r3, #79	@ 0x4f
 800644c:	d902      	bls.n	8006454 <osMutexNew+0x8c>
          mem = 1;
 800644e:	2301      	movs	r3, #1
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	e00c      	b.n	800646e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d108      	bne.n	800646e <osMutexNew+0xa6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <osMutexNew+0xa6>
            mem = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e001      	b.n	800646e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d112      	bne.n	800649a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	4619      	mov	r1, r3
 8006480:	2004      	movs	r0, #4
 8006482:	f000 fb5c 	bl	8006b3e <xQueueCreateMutexStatic>
 8006486:	6278      	str	r0, [r7, #36]	@ 0x24
 8006488:	e016      	b.n	80064b8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4619      	mov	r1, r3
 8006490:	2001      	movs	r0, #1
 8006492:	f000 fb54 	bl	8006b3e <xQueueCreateMutexStatic>
 8006496:	6278      	str	r0, [r7, #36]	@ 0x24
 8006498:	e00e      	b.n	80064b8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d004      	beq.n	80064b0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80064a6:	2004      	movs	r0, #4
 80064a8:	f000 fb31 	bl	8006b0e <xQueueCreateMutex>
 80064ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80064ae:	e003      	b.n	80064b8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80064b0:	2001      	movs	r0, #1
 80064b2:	f000 fb2c 	bl	8006b0e <xQueueCreateMutex>
 80064b6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <osMutexNew+0x110>
        if (attr != NULL) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <osMutexNew+0x104>
          name = attr->name;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e001      	b.n	80064d0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80064d0:	6979      	ldr	r1, [r7, #20]
 80064d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064d4:	f001 f894 	bl	8007600 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <osMutexNew+0x124>
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3728      	adds	r7, #40	@ 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000318 	.word	0x20000318

080064fc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651a:	f3ef 8305 	mrs	r3, IPSR
 800651e:	613b      	str	r3, [r7, #16]
  return(result);
 8006520:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10f      	bne.n	8006546 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006526:	f3ef 8310 	mrs	r3, PRIMASK
 800652a:	60fb      	str	r3, [r7, #12]
  return(result);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006532:	f3ef 8311 	mrs	r3, BASEPRI
 8006536:	60bb      	str	r3, [r7, #8]
  return(result);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <osMutexAcquire+0x52>
 800653e:	4b1d      	ldr	r3, [pc, #116]	@ (80065b4 <osMutexAcquire+0xb8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d103      	bne.n	800654e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006546:	f06f 0305 	mvn.w	r3, #5
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	e02c      	b.n	80065a8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006554:	f06f 0303 	mvn.w	r3, #3
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	e025      	b.n	80065a8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d011      	beq.n	8006586 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	69b8      	ldr	r0, [r7, #24]
 8006566:	f000 fb3c 	bl	8006be2 <xQueueTakeMutexRecursive>
 800656a:	4603      	mov	r3, r0
 800656c:	2b01      	cmp	r3, #1
 800656e:	d01b      	beq.n	80065a8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006576:	f06f 0301 	mvn.w	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e014      	b.n	80065a8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800657e:	f06f 0302 	mvn.w	r3, #2
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	e010      	b.n	80065a8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	69b8      	ldr	r0, [r7, #24]
 800658a:	f000 fdf9 	bl	8007180 <xQueueSemaphoreTake>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d009      	beq.n	80065a8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800659a:	f06f 0301 	mvn.w	r3, #1
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e002      	b.n	80065a8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80065a2:	f06f 0302 	mvn.w	r3, #2
 80065a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80065a8:	69fb      	ldr	r3, [r7, #28]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000318 	.word	0x20000318

080065b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d4:	f3ef 8305 	mrs	r3, IPSR
 80065d8:	613b      	str	r3, [r7, #16]
  return(result);
 80065da:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10f      	bne.n	8006600 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e0:	f3ef 8310 	mrs	r3, PRIMASK
 80065e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ec:	f3ef 8311 	mrs	r3, BASEPRI
 80065f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <osMutexRelease+0x50>
 80065f8:	4b16      	ldr	r3, [pc, #88]	@ (8006654 <osMutexRelease+0x9c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d103      	bne.n	8006608 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006600:	f06f 0305 	mvn.w	r3, #5
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	e01f      	b.n	8006648 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800660e:	f06f 0303 	mvn.w	r3, #3
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e018      	b.n	8006648 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800661c:	69b8      	ldr	r0, [r7, #24]
 800661e:	f000 faa9 	bl	8006b74 <xQueueGiveMutexRecursive>
 8006622:	4603      	mov	r3, r0
 8006624:	2b01      	cmp	r3, #1
 8006626:	d00f      	beq.n	8006648 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006628:	f06f 0302 	mvn.w	r3, #2
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	e00b      	b.n	8006648 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006630:	2300      	movs	r3, #0
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	69b8      	ldr	r0, [r7, #24]
 8006638:	f000 fb0c 	bl	8006c54 <xQueueGenericSend>
 800663c:	4603      	mov	r3, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	d002      	beq.n	8006648 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006642:	f06f 0302 	mvn.w	r3, #2
 8006646:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006648:	69fb      	ldr	r3, [r7, #28]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000318 	.word	0x20000318

08006658 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4a07      	ldr	r2, [pc, #28]	@ (8006684 <vApplicationGetIdleTaskMemory+0x2c>)
 8006668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4a06      	ldr	r2, [pc, #24]	@ (8006688 <vApplicationGetIdleTaskMemory+0x30>)
 800666e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2280      	movs	r2, #128	@ 0x80
 8006674:	601a      	str	r2, [r3, #0]
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	2000031c 	.word	0x2000031c
 8006688:	200003c4 	.word	0x200003c4

0800668c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4a07      	ldr	r2, [pc, #28]	@ (80066b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800669c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4a06      	ldr	r2, [pc, #24]	@ (80066bc <vApplicationGetTimerTaskMemory+0x30>)
 80066a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066aa:	601a      	str	r2, [r3, #0]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	200005c4 	.word	0x200005c4
 80066bc:	2000066c 	.word	0x2000066c

080066c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f103 0208 	add.w	r2, r3, #8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f04f 32ff 	mov.w	r2, #4294967295
 80066d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f103 0208 	add.w	r2, r3, #8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f103 0208 	add.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d103      	bne.n	8006782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e00c      	b.n	800679c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3308      	adds	r3, #8
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e002      	b.n	8006790 <vListInsert+0x2e>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	d2f6      	bcs.n	800678a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6892      	ldr	r2, [r2, #8]
 80067ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6852      	ldr	r2, [r2, #4]
 80067f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d103      	bne.n	8006808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	1e5a      	subs	r2, r3, #1
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10d      	bne.n	8006858 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	b672      	cpsid	i
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	b662      	cpsie	i
 8006850:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006852:	bf00      	nop
 8006854:	bf00      	nop
 8006856:	e7fd      	b.n	8006854 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006858:	f002 fd10 	bl	800927c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	441a      	add	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	3b01      	subs	r3, #1
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	441a      	add	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	22ff      	movs	r2, #255	@ 0xff
 800689c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	22ff      	movs	r2, #255	@ 0xff
 80068a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d114      	bne.n	80068d8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01a      	beq.n	80068ec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3310      	adds	r3, #16
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fba8 	bl	8008010 <xTaskRemoveFromEventList>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d012      	beq.n	80068ec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <xQueueGenericReset+0xd4>)
 80068c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	e009      	b.n	80068ec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3310      	adds	r3, #16
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff feef 	bl	80066c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3324      	adds	r3, #36	@ 0x24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff feea 	bl	80066c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068ec:	f002 fcfc 	bl	80092e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068f0:	2301      	movs	r3, #1
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08e      	sub	sp, #56	@ 0x38
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10d      	bne.n	8006930 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006918:	b672      	cpsid	i
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	b662      	cpsie	i
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	e7fd      	b.n	800692c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10d      	bne.n	8006952 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693a:	b672      	cpsid	i
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	b662      	cpsie	i
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <xQueueGenericCreateStatic+0x5e>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <xQueueGenericCreateStatic+0x62>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <xQueueGenericCreateStatic+0x64>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10d      	bne.n	8006984 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	b672      	cpsid	i
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	b662      	cpsie	i
 800697c:	623b      	str	r3, [r7, #32]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d102      	bne.n	8006990 <xQueueGenericCreateStatic+0x90>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <xQueueGenericCreateStatic+0x94>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <xQueueGenericCreateStatic+0x96>
 8006994:	2300      	movs	r3, #0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10d      	bne.n	80069b6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	b672      	cpsid	i
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	b662      	cpsie	i
 80069ae:	61fb      	str	r3, [r7, #28]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069b6:	2350      	movs	r3, #80	@ 0x50
 80069b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b50      	cmp	r3, #80	@ 0x50
 80069be:	d00d      	beq.n	80069dc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	b672      	cpsid	i
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	b662      	cpsie	i
 80069d4:	61bb      	str	r3, [r7, #24]
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80069e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00d      	beq.n	8006a04 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f848 	bl	8006a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3730      	adds	r7, #48	@ 0x30
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08a      	sub	sp, #40	@ 0x28
 8006a12:	af02      	add	r7, sp, #8
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10d      	bne.n	8006a3e <xQueueGenericCreate+0x30>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	b672      	cpsid	i
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	b662      	cpsie	i
 8006a36:	613b      	str	r3, [r7, #16]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	e004      	b.n	8006a54 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3350      	adds	r3, #80	@ 0x50
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f002 fd3d 	bl	80094d8 <pvPortMalloc>
 8006a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d011      	beq.n	8006a8a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	3350      	adds	r3, #80	@ 0x50
 8006a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a78:	79fa      	ldrb	r2, [r7, #7]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f805 	bl	8006a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e002      	b.n	8006ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	69b8      	ldr	r0, [r7, #24]
 8006ac6:	f7ff feaf 	bl	8006828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00e      	beq.n	8006b06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006afa:	2300      	movs	r3, #0
 8006afc:	2200      	movs	r2, #0
 8006afe:	2100      	movs	r1, #0
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8a7 	bl	8006c54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	4603      	mov	r3, r0
 8006b16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6939      	ldr	r1, [r7, #16]
 8006b26:	6978      	ldr	r0, [r7, #20]
 8006b28:	f7ff ff71 	bl	8006a0e <xQueueGenericCreate>
 8006b2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff ffd3 	bl	8006ada <prvInitialiseMutex>

		return xNewQueue;
 8006b34:	68fb      	ldr	r3, [r7, #12]
	}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b088      	sub	sp, #32
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	4603      	mov	r3, r0
 8006b46:	6039      	str	r1, [r7, #0]
 8006b48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	6939      	ldr	r1, [r7, #16]
 8006b5c:	6978      	ldr	r0, [r7, #20]
 8006b5e:	f7ff fecf 	bl	8006900 <xQueueGenericCreateStatic>
 8006b62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ffb8 	bl	8006ada <prvInitialiseMutex>

		return xNewQueue;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	b672      	cpsid	i
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	b662      	cpsie	i
 8006b9a:	60fb      	str	r3, [r7, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	689c      	ldr	r4, [r3, #8]
 8006ba6:	f001 fc01 	bl	80083ac <xTaskGetCurrentTaskHandle>
 8006baa:	4603      	mov	r3, r0
 8006bac:	429c      	cmp	r4, r3
 8006bae:	d111      	bne.n	8006bd4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d105      	bne.n	8006bce <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6938      	ldr	r0, [r7, #16]
 8006bca:	f000 f843 	bl	8006c54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e001      	b.n	8006bd8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006bd8:	697b      	ldr	r3, [r7, #20]
	}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd90      	pop	{r4, r7, pc}

08006be2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006be2:	b590      	push	{r4, r7, lr}
 8006be4:	b087      	sub	sp, #28
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10d      	bne.n	8006c12 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	b672      	cpsid	i
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	b662      	cpsie	i
 8006c0a:	60fb      	str	r3, [r7, #12]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	689c      	ldr	r4, [r3, #8]
 8006c16:	f001 fbc9 	bl	80083ac <xTaskGetCurrentTaskHandle>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d107      	bne.n	8006c30 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	e00c      	b.n	8006c4a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6938      	ldr	r0, [r7, #16]
 8006c34:	f000 faa4 	bl	8007180 <xQueueSemaphoreTake>
 8006c38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006c4a:	697b      	ldr	r3, [r7, #20]
	}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd90      	pop	{r4, r7, pc}

08006c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08e      	sub	sp, #56	@ 0x38
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c62:	2300      	movs	r3, #0
 8006c64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10d      	bne.n	8006c8c <xQueueGenericSend+0x38>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	b672      	cpsid	i
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	b662      	cpsie	i
 8006c84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	e7fd      	b.n	8006c88 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <xQueueGenericSend+0x46>
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <xQueueGenericSend+0x4a>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <xQueueGenericSend+0x4c>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10d      	bne.n	8006cc0 <xQueueGenericSend+0x6c>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca8:	b672      	cpsid	i
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	b662      	cpsie	i
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d103      	bne.n	8006cce <xQueueGenericSend+0x7a>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <xQueueGenericSend+0x7e>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueGenericSend+0x80>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <xQueueGenericSend+0xa0>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cdc:	b672      	cpsid	i
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	b662      	cpsie	i
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf4:	f001 fb6a 	bl	80083cc <xTaskGetSchedulerState>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <xQueueGenericSend+0xb0>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <xQueueGenericSend+0xb4>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <xQueueGenericSend+0xb6>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10d      	bne.n	8006d2a <xQueueGenericSend+0xd6>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	b672      	cpsid	i
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	b662      	cpsie	i
 8006d22:	61fb      	str	r3, [r7, #28]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d2a:	f002 faa7 	bl	800927c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <xQueueGenericSend+0xec>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d129      	bne.n	8006d94 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d46:	f000 fb4b 	bl	80073e0 <prvCopyDataToQueue>
 8006d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	3324      	adds	r3, #36	@ 0x24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 f959 	bl	8008010 <xTaskRemoveFromEventList>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d013      	beq.n	8006d8c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d64:	4b3f      	ldr	r3, [pc, #252]	@ (8006e64 <xQueueGenericSend+0x210>)
 8006d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	e00a      	b.n	8006d8c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d7c:	4b39      	ldr	r3, [pc, #228]	@ (8006e64 <xQueueGenericSend+0x210>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d8c:	f002 faac 	bl	80092e8 <vPortExitCritical>
				return pdPASS;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e063      	b.n	8006e5c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d9a:	f002 faa5 	bl	80092e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e05c      	b.n	8006e5c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da8:	f107 0314 	add.w	r3, r7, #20
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 f995 	bl	80080dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db6:	f002 fa97 	bl	80092e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dba:	f000 fef1 	bl	8007ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dbe:	f002 fa5d 	bl	800927c <vPortEnterCritical>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dc8:	b25b      	sxtb	r3, r3
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	d103      	bne.n	8006dd8 <xQueueGenericSend+0x184>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d103      	bne.n	8006dee <xQueueGenericSend+0x19a>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dee:	f002 fa7b 	bl	80092e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006df2:	1d3a      	adds	r2, r7, #4
 8006df4:	f107 0314 	add.w	r3, r7, #20
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f984 	bl	8008108 <xTaskCheckForTimeOut>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d124      	bne.n	8006e50 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e08:	f000 fbe2 	bl	80075d0 <prvIsQueueFull>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d018      	beq.n	8006e44 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	3310      	adds	r3, #16
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 f8a2 	bl	8007f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e22:	f000 fb6d 	bl	8007500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e26:	f000 fec9 	bl	8007bbc <xTaskResumeAll>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f af7c 	bne.w	8006d2a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006e32:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <xQueueGenericSend+0x210>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	e772      	b.n	8006d2a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e46:	f000 fb5b 	bl	8007500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e4a:	f000 feb7 	bl	8007bbc <xTaskResumeAll>
 8006e4e:	e76c      	b.n	8006d2a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e52:	f000 fb55 	bl	8007500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e56:	f000 feb1 	bl	8007bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3738      	adds	r7, #56	@ 0x38
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08e      	sub	sp, #56	@ 0x38
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10d      	bne.n	8006e9c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	b672      	cpsid	i
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	b662      	cpsie	i
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <xQueueGenericSendFromISR+0x42>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <xQueueGenericSendFromISR+0x46>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueGenericSendFromISR+0x48>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10d      	bne.n	8006ed0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	b672      	cpsid	i
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	b662      	cpsie	i
 8006ec8:	623b      	str	r3, [r7, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	e7fd      	b.n	8006ecc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d103      	bne.n	8006ede <xQueueGenericSendFromISR+0x76>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <xQueueGenericSendFromISR+0x7a>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <xQueueGenericSendFromISR+0x7c>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	61fb      	str	r3, [r7, #28]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f04:	f002 faa2 	bl	800944c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f08:	f3ef 8211 	mrs	r2, BASEPRI
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	b672      	cpsid	i
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	b662      	cpsie	i
 8006f20:	61ba      	str	r2, [r7, #24]
 8006f22:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d302      	bcc.n	8006f3a <xQueueGenericSendFromISR+0xd2>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d12c      	bne.n	8006f94 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f4a:	f000 fa49 	bl	80073e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d112      	bne.n	8006f7e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d016      	beq.n	8006f8e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	3324      	adds	r3, #36	@ 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 f853 	bl	8008010 <xTaskRemoveFromEventList>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	e007      	b.n	8006f8e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	3301      	adds	r3, #1
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	b25a      	sxtb	r2, r3
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006f92:	e001      	b.n	8006f98 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3738      	adds	r7, #56	@ 0x38
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08c      	sub	sp, #48	@ 0x30
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10d      	bne.n	8006fe6 <xQueueReceive+0x36>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	b672      	cpsid	i
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	b662      	cpsie	i
 8006fde:	623b      	str	r3, [r7, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <xQueueReceive+0x44>
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <xQueueReceive+0x48>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <xQueueReceive+0x4a>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <xQueueReceive+0x6a>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	b672      	cpsid	i
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	b662      	cpsie	i
 8007012:	61fb      	str	r3, [r7, #28]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800701a:	f001 f9d7 	bl	80083cc <xTaskGetSchedulerState>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <xQueueReceive+0x7a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <xQueueReceive+0x7e>
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <xQueueReceive+0x80>
 800702e:	2300      	movs	r3, #0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10d      	bne.n	8007050 <xQueueReceive+0xa0>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007038:	b672      	cpsid	i
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	b662      	cpsie	i
 8007048:	61bb      	str	r3, [r7, #24]
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	e7fd      	b.n	800704c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007050:	f002 f914 	bl	800927c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01f      	beq.n	80070a0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007064:	f000 fa26 	bl	80074b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00f      	beq.n	8007098 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707a:	3310      	adds	r3, #16
 800707c:	4618      	mov	r0, r3
 800707e:	f000 ffc7 	bl	8008010 <xTaskRemoveFromEventList>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007088:	4b3c      	ldr	r3, [pc, #240]	@ (800717c <xQueueReceive+0x1cc>)
 800708a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007098:	f002 f926 	bl	80092e8 <vPortExitCritical>
				return pdPASS;
 800709c:	2301      	movs	r3, #1
 800709e:	e069      	b.n	8007174 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070a6:	f002 f91f 	bl	80092e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e062      	b.n	8007174 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070b4:	f107 0310 	add.w	r3, r7, #16
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 f80f 	bl	80080dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070c2:	f002 f911 	bl	80092e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070c6:	f000 fd6b 	bl	8007ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ca:	f002 f8d7 	bl	800927c <vPortEnterCritical>
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070d4:	b25b      	sxtb	r3, r3
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070da:	d103      	bne.n	80070e4 <xQueueReceive+0x134>
 80070dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ea:	b25b      	sxtb	r3, r3
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d103      	bne.n	80070fa <xQueueReceive+0x14a>
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070fa:	f002 f8f5 	bl	80092e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070fe:	1d3a      	adds	r2, r7, #4
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fffe 	bl	8008108 <xTaskCheckForTimeOut>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d123      	bne.n	800715a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007114:	f000 fa46 	bl	80075a4 <prvIsQueueEmpty>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d017      	beq.n	800714e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	3324      	adds	r3, #36	@ 0x24
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f000 ff1c 	bl	8007f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800712c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800712e:	f000 f9e7 	bl	8007500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007132:	f000 fd43 	bl	8007bbc <xTaskResumeAll>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d189      	bne.n	8007050 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800713c:	4b0f      	ldr	r3, [pc, #60]	@ (800717c <xQueueReceive+0x1cc>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	e780      	b.n	8007050 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800714e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007150:	f000 f9d6 	bl	8007500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007154:	f000 fd32 	bl	8007bbc <xTaskResumeAll>
 8007158:	e77a      	b.n	8007050 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800715a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800715c:	f000 f9d0 	bl	8007500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007160:	f000 fd2c 	bl	8007bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007166:	f000 fa1d 	bl	80075a4 <prvIsQueueEmpty>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	f43f af6f 	beq.w	8007050 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007172:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007174:	4618      	mov	r0, r3
 8007176:	3730      	adds	r7, #48	@ 0x30
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08e      	sub	sp, #56	@ 0x38
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800718a:	2300      	movs	r3, #0
 800718c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007192:	2300      	movs	r3, #0
 8007194:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10d      	bne.n	80071b8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a0:	b672      	cpsid	i
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	b662      	cpsie	i
 80071b0:	623b      	str	r3, [r7, #32]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00d      	beq.n	80071dc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	b672      	cpsid	i
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	b662      	cpsie	i
 80071d4:	61fb      	str	r3, [r7, #28]
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	e7fd      	b.n	80071d8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071dc:	f001 f8f6 	bl	80083cc <xTaskGetSchedulerState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <xQueueSemaphoreTake+0x6c>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <xQueueSemaphoreTake+0x70>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <xQueueSemaphoreTake+0x72>
 80071f0:	2300      	movs	r3, #0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10d      	bne.n	8007212 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	b672      	cpsid	i
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	b662      	cpsie	i
 800720a:	61bb      	str	r3, [r7, #24]
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007212:	f002 f833 	bl	800927c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	2b00      	cmp	r3, #0
 8007220:	d024      	beq.n	800726c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007224:	1e5a      	subs	r2, r3, #1
 8007226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007228:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800722a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007232:	f001 fa4d 	bl	80086d0 <pvTaskIncrementMutexHeldCount>
 8007236:	4602      	mov	r2, r0
 8007238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00f      	beq.n	8007264 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	3310      	adds	r3, #16
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fee1 	bl	8008010 <xTaskRemoveFromEventList>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007254:	4b55      	ldr	r3, [pc, #340]	@ (80073ac <xQueueSemaphoreTake+0x22c>)
 8007256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007264:	f002 f840 	bl	80092e8 <vPortExitCritical>
				return pdPASS;
 8007268:	2301      	movs	r3, #1
 800726a:	e09a      	b.n	80073a2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d114      	bne.n	800729c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00d      	beq.n	8007294 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	617b      	str	r3, [r7, #20]
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007294:	f002 f828 	bl	80092e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007298:	2300      	movs	r3, #0
 800729a:	e082      	b.n	80073a2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072a2:	f107 030c 	add.w	r3, r7, #12
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 ff18 	bl	80080dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072b0:	f002 f81a 	bl	80092e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072b4:	f000 fc74 	bl	8007ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072b8:	f001 ffe0 	bl	800927c <vPortEnterCritical>
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d103      	bne.n	80072d2 <xQueueSemaphoreTake+0x152>
 80072ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d103      	bne.n	80072e8 <xQueueSemaphoreTake+0x168>
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072e8:	f001 fffe 	bl	80092e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ec:	463a      	mov	r2, r7
 80072ee:	f107 030c 	add.w	r3, r7, #12
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 ff07 	bl	8008108 <xTaskCheckForTimeOut>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d132      	bne.n	8007366 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007300:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007302:	f000 f94f 	bl	80075a4 <prvIsQueueEmpty>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d026      	beq.n	800735a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d109      	bne.n	8007328 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007314:	f001 ffb2 	bl	800927c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	4618      	mov	r0, r3
 800731e:	f001 f873 	bl	8008408 <xTaskPriorityInherit>
 8007322:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007324:	f001 ffe0 	bl	80092e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732a:	3324      	adds	r3, #36	@ 0x24
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fe17 	bl	8007f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007336:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007338:	f000 f8e2 	bl	8007500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800733c:	f000 fc3e 	bl	8007bbc <xTaskResumeAll>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f af65 	bne.w	8007212 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007348:	4b18      	ldr	r3, [pc, #96]	@ (80073ac <xQueueSemaphoreTake+0x22c>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	e75b      	b.n	8007212 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800735a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800735c:	f000 f8d0 	bl	8007500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007360:	f000 fc2c 	bl	8007bbc <xTaskResumeAll>
 8007364:	e755      	b.n	8007212 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007368:	f000 f8ca 	bl	8007500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800736c:	f000 fc26 	bl	8007bbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007372:	f000 f917 	bl	80075a4 <prvIsQueueEmpty>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	f43f af4a 	beq.w	8007212 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00d      	beq.n	80073a0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007384:	f001 ff7a 	bl	800927c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007388:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800738a:	f000 f811 	bl	80073b0 <prvGetDisinheritPriorityAfterTimeout>
 800738e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007396:	4618      	mov	r0, r3
 8007398:	f001 f912 	bl	80085c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800739c:	f001 ffa4 	bl	80092e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3738      	adds	r7, #56	@ 0x38
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	e001      	b.n	80073d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80073d2:	68fb      	ldr	r3, [r7, #12]
	}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d14d      	bne.n	80074a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	4618      	mov	r0, r3
 800740c:	f001 f864 	bl	80084d8 <xTaskPriorityDisinherit>
 8007410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	e043      	b.n	80074a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d119      	bne.n	8007454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6858      	ldr	r0, [r3, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	461a      	mov	r2, r3
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	f002 fae8 	bl	8009a00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007438:	441a      	add	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	d32b      	bcc.n	80074a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	e026      	b.n	80074a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68d8      	ldr	r0, [r3, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745c:	461a      	mov	r2, r3
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	f002 face 	bl	8009a00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	425b      	negs	r3, r3
 800746e:	441a      	add	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d207      	bcs.n	8007490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007488:	425b      	negs	r3, r3
 800748a:	441a      	add	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d105      	bne.n	80074a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3b01      	subs	r3, #1
 80074a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80074aa:	697b      	ldr	r3, [r7, #20]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	441a      	add	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d303      	bcc.n	80074e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68d9      	ldr	r1, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f0:	461a      	mov	r2, r3
 80074f2:	6838      	ldr	r0, [r7, #0]
 80074f4:	f002 fa84 	bl	8009a00 <memcpy>
	}
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007508:	f001 feb8 	bl	800927c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007514:	e011      	b.n	800753a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d012      	beq.n	8007544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	@ 0x24
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fd74 	bl	8008010 <xTaskRemoveFromEventList>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800752e:	f000 fe53 	bl	80081d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	3b01      	subs	r3, #1
 8007536:	b2db      	uxtb	r3, r3
 8007538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800753a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dce9      	bgt.n	8007516 <prvUnlockQueue+0x16>
 8007542:	e000      	b.n	8007546 <prvUnlockQueue+0x46>
					break;
 8007544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	22ff      	movs	r2, #255	@ 0xff
 800754a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800754e:	f001 fecb 	bl	80092e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007552:	f001 fe93 	bl	800927c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800755c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800755e:	e011      	b.n	8007584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d012      	beq.n	800758e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3310      	adds	r3, #16
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fd4f 	bl	8008010 <xTaskRemoveFromEventList>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007578:	f000 fe2e 	bl	80081d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	3b01      	subs	r3, #1
 8007580:	b2db      	uxtb	r3, r3
 8007582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007588:	2b00      	cmp	r3, #0
 800758a:	dce9      	bgt.n	8007560 <prvUnlockQueue+0x60>
 800758c:	e000      	b.n	8007590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800758e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	22ff      	movs	r2, #255	@ 0xff
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007598:	f001 fea6 	bl	80092e8 <vPortExitCritical>
}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075ac:	f001 fe66 	bl	800927c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075b8:	2301      	movs	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	e001      	b.n	80075c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075c2:	f001 fe91 	bl	80092e8 <vPortExitCritical>

	return xReturn;
 80075c6:	68fb      	ldr	r3, [r7, #12]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075d8:	f001 fe50 	bl	800927c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d102      	bne.n	80075ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e001      	b.n	80075f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075f2:	f001 fe79 	bl	80092e8 <vPortExitCritical>

	return xReturn;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e014      	b.n	800763a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007610:	4a0f      	ldr	r2, [pc, #60]	@ (8007650 <vQueueAddToRegistry+0x50>)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800761c:	490c      	ldr	r1, [pc, #48]	@ (8007650 <vQueueAddToRegistry+0x50>)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007626:	4a0a      	ldr	r2, [pc, #40]	@ (8007650 <vQueueAddToRegistry+0x50>)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	4413      	add	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007632:	e006      	b.n	8007642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b07      	cmp	r3, #7
 800763e:	d9e7      	bls.n	8007610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20000a6c 	.word	0x20000a6c

08007654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007664:	f001 fe0a 	bl	800927c <vPortEnterCritical>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800766e:	b25b      	sxtb	r3, r3
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d103      	bne.n	800767e <vQueueWaitForMessageRestricted+0x2a>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007684:	b25b      	sxtb	r3, r3
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d103      	bne.n	8007694 <vQueueWaitForMessageRestricted+0x40>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007694:	f001 fe28 	bl	80092e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	3324      	adds	r3, #36	@ 0x24
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fc83 	bl	8007fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076ae:	6978      	ldr	r0, [r7, #20]
 80076b0:	f7ff ff26 	bl	8007500 <prvUnlockQueue>
	}
 80076b4:	bf00      	nop
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08e      	sub	sp, #56	@ 0x38
 80076c0:	af04      	add	r7, sp, #16
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <xTaskCreateStatic+0x30>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	b672      	cpsid	i
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	b662      	cpsie	i
 80076e4:	623b      	str	r3, [r7, #32]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <xTaskCreateStatic+0x52>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	b672      	cpsid	i
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	b662      	cpsie	i
 8007706:	61fb      	str	r3, [r7, #28]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800770e:	23a8      	movs	r3, #168	@ 0xa8
 8007710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	2ba8      	cmp	r3, #168	@ 0xa8
 8007716:	d00d      	beq.n	8007734 <xTaskCreateStatic+0x78>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	b672      	cpsid	i
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	b662      	cpsie	i
 800772c:	61bb      	str	r3, [r7, #24]
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007734:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01e      	beq.n	800777a <xTaskCreateStatic+0xbe>
 800773c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01b      	beq.n	800777a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800774a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	2202      	movs	r2, #2
 8007750:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007754:	2300      	movs	r3, #0
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f851 	bl	8007814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007774:	f000 f8f8 	bl	8007968 <prvAddNewTaskToReadyList>
 8007778:	e001      	b.n	800777e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800777e:	697b      	ldr	r3, [r7, #20]
	}
 8007780:	4618      	mov	r0, r3
 8007782:	3728      	adds	r7, #40	@ 0x28
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	@ 0x30
 800778c:	af04      	add	r7, sp, #16
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fe9b 	bl	80094d8 <pvPortMalloc>
 80077a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00e      	beq.n	80077c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077aa:	20a8      	movs	r0, #168	@ 0xa8
 80077ac:	f001 fe94 	bl	80094d8 <pvPortMalloc>
 80077b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80077be:	e005      	b.n	80077cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077c0:	6978      	ldr	r0, [r7, #20]
 80077c2:	f001 ff57 	bl	8009674 <vPortFree>
 80077c6:	e001      	b.n	80077cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d017      	beq.n	8007802 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077da:	88fa      	ldrh	r2, [r7, #6]
 80077dc:	2300      	movs	r3, #0
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f80f 	bl	8007814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077f6:	69f8      	ldr	r0, [r7, #28]
 80077f8:	f000 f8b6 	bl	8007968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077fc:	2301      	movs	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	e002      	b.n	8007808 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007802:	f04f 33ff 	mov.w	r3, #4294967295
 8007806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007808:	69bb      	ldr	r3, [r7, #24]
	}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	461a      	mov	r2, r3
 800782c:	21a5      	movs	r1, #165	@ 0xa5
 800782e:	f002 f85d 	bl	80098ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800783c:	440b      	add	r3, r1
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	617b      	str	r3, [r7, #20]
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	e7fd      	b.n	800786e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01f      	beq.n	80078b8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e012      	b.n	80078a4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	7819      	ldrb	r1, [r3, #0]
 8007886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	3334      	adds	r3, #52	@ 0x34
 800788e:	460a      	mov	r2, r1
 8007890:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d006      	beq.n	80078ac <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d9e9      	bls.n	800787e <prvInitialiseNewTask+0x6a>
 80078aa:	e000      	b.n	80078ae <prvInitialiseNewTask+0x9a>
			{
				break;
 80078ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078b6:	e003      	b.n	80078c0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	2b37      	cmp	r3, #55	@ 0x37
 80078c4:	d901      	bls.n	80078ca <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078c6:	2337      	movs	r3, #55	@ 0x37
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2200      	movs	r2, #0
 80078da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe ff0d 	bl	8006700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	3318      	adds	r3, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe ff08 	bl	8006700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	2200      	movs	r2, #0
 8007912:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	3354      	adds	r3, #84	@ 0x54
 800791a:	224c      	movs	r2, #76	@ 0x4c
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f001 ffe4 	bl	80098ec <memset>
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	4a0d      	ldr	r2, [pc, #52]	@ (800795c <prvInitialiseNewTask+0x148>)
 8007928:	659a      	str	r2, [r3, #88]	@ 0x58
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <prvInitialiseNewTask+0x14c>)
 800792e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	4a0c      	ldr	r2, [pc, #48]	@ (8007964 <prvInitialiseNewTask+0x150>)
 8007934:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	68f9      	ldr	r1, [r7, #12]
 800793a:	69b8      	ldr	r0, [r7, #24]
 800793c:	f001 fb8c 	bl	8009058 <pxPortInitialiseStack>
 8007940:	4602      	mov	r2, r0
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007952:	bf00      	nop
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20004cf8 	.word	0x20004cf8
 8007960:	20004d60 	.word	0x20004d60
 8007964:	20004dc8 	.word	0x20004dc8

08007968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007970:	f001 fc84 	bl	800927c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007974:	4b2d      	ldr	r3, [pc, #180]	@ (8007a2c <prvAddNewTaskToReadyList+0xc4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	4a2c      	ldr	r2, [pc, #176]	@ (8007a2c <prvAddNewTaskToReadyList+0xc4>)
 800797c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800797e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007986:	4a2a      	ldr	r2, [pc, #168]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800798c:	4b27      	ldr	r3, [pc, #156]	@ (8007a2c <prvAddNewTaskToReadyList+0xc4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d110      	bne.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007994:	f000 fc44 	bl	8008220 <prvInitialiseTaskLists>
 8007998:	e00d      	b.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800799a:	4b26      	ldr	r3, [pc, #152]	@ (8007a34 <prvAddNewTaskToReadyList+0xcc>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079a2:	4b23      	ldr	r3, [pc, #140]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d802      	bhi.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079b6:	4b20      	ldr	r3, [pc, #128]	@ (8007a38 <prvAddNewTaskToReadyList+0xd0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007a38 <prvAddNewTaskToReadyList+0xd0>)
 80079be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a38 <prvAddNewTaskToReadyList+0xd0>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079cc:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <prvAddNewTaskToReadyList+0xd4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d903      	bls.n	80079dc <prvAddNewTaskToReadyList+0x74>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d8:	4a18      	ldr	r2, [pc, #96]	@ (8007a3c <prvAddNewTaskToReadyList+0xd4>)
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4a15      	ldr	r2, [pc, #84]	@ (8007a40 <prvAddNewTaskToReadyList+0xd8>)
 80079ea:	441a      	add	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f7fe fe91 	bl	800671a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 fc76 	bl	80092e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a34 <prvAddNewTaskToReadyList+0xcc>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a04:	4b0a      	ldr	r3, [pc, #40]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d207      	bcs.n	8007a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a12:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <prvAddNewTaskToReadyList+0xdc>)
 8007a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000f80 	.word	0x20000f80
 8007a30:	20000aac 	.word	0x20000aac
 8007a34:	20000f8c 	.word	0x20000f8c
 8007a38:	20000f9c 	.word	0x20000f9c
 8007a3c:	20000f88 	.word	0x20000f88
 8007a40:	20000ab0 	.word	0x20000ab0
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01a      	beq.n	8007a90 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a5a:	4b15      	ldr	r3, [pc, #84]	@ (8007ab0 <vTaskDelay+0x68>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00d      	beq.n	8007a7e <vTaskDelay+0x36>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	60bb      	str	r3, [r7, #8]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007a7e:	f000 f88f 	bl	8007ba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fe37 	bl	80086f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a8a:	f000 f897 	bl	8007bbc <xTaskResumeAll>
 8007a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007a96:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <vTaskDelay+0x6c>)
 8007a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000fa8 	.word	0x20000fa8
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	@ 0x28
 8007abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ac6:	463a      	mov	r2, r7
 8007ac8:	1d39      	adds	r1, r7, #4
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fdc2 	bl	8006658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	9202      	str	r2, [sp, #8]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	460a      	mov	r2, r1
 8007ae6:	4926      	ldr	r1, [pc, #152]	@ (8007b80 <vTaskStartScheduler+0xc8>)
 8007ae8:	4826      	ldr	r0, [pc, #152]	@ (8007b84 <vTaskStartScheduler+0xcc>)
 8007aea:	f7ff fde7 	bl	80076bc <xTaskCreateStatic>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4a25      	ldr	r2, [pc, #148]	@ (8007b88 <vTaskStartScheduler+0xd0>)
 8007af2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007af4:	4b24      	ldr	r3, [pc, #144]	@ (8007b88 <vTaskStartScheduler+0xd0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007afc:	2301      	movs	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	e001      	b.n	8007b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d102      	bne.n	8007b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b0c:	f000 fe48 	bl	80087a0 <xTimerCreateTimerTask>
 8007b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d11d      	bne.n	8007b54 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	613b      	str	r3, [r7, #16]
}
 8007b2e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b30:	4b16      	ldr	r3, [pc, #88]	@ (8007b8c <vTaskStartScheduler+0xd4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3354      	adds	r3, #84	@ 0x54
 8007b36:	4a16      	ldr	r2, [pc, #88]	@ (8007b90 <vTaskStartScheduler+0xd8>)
 8007b38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b3a:	4b16      	ldr	r3, [pc, #88]	@ (8007b94 <vTaskStartScheduler+0xdc>)
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b42:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <vTaskStartScheduler+0xe0>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b48:	4b14      	ldr	r3, [pc, #80]	@ (8007b9c <vTaskStartScheduler+0xe4>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b4e:	f001 fb17 	bl	8009180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b52:	e011      	b.n	8007b78 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5a:	d10d      	bne.n	8007b78 <vTaskStartScheduler+0xc0>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	60fb      	str	r3, [r7, #12]
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <vTaskStartScheduler+0xbc>
}
 8007b78:	bf00      	nop
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	0800a468 	.word	0x0800a468
 8007b84:	080081f1 	.word	0x080081f1
 8007b88:	20000fa4 	.word	0x20000fa4
 8007b8c:	20000aac 	.word	0x20000aac
 8007b90:	20000014 	.word	0x20000014
 8007b94:	20000fa0 	.word	0x20000fa0
 8007b98:	20000f8c 	.word	0x20000f8c
 8007b9c:	20000f84 	.word	0x20000f84

08007ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ba4:	4b04      	ldr	r3, [pc, #16]	@ (8007bb8 <vTaskSuspendAll+0x18>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	4a03      	ldr	r2, [pc, #12]	@ (8007bb8 <vTaskSuspendAll+0x18>)
 8007bac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007bae:	bf00      	nop
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	20000fa8 	.word	0x20000fa8

08007bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bca:	4b43      	ldr	r3, [pc, #268]	@ (8007cd8 <xTaskResumeAll+0x11c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10d      	bne.n	8007bee <xTaskResumeAll+0x32>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd6:	b672      	cpsid	i
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	b662      	cpsie	i
 8007be6:	603b      	str	r3, [r7, #0]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bee:	f001 fb45 	bl	800927c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bf2:	4b39      	ldr	r3, [pc, #228]	@ (8007cd8 <xTaskResumeAll+0x11c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	4a37      	ldr	r2, [pc, #220]	@ (8007cd8 <xTaskResumeAll+0x11c>)
 8007bfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bfc:	4b36      	ldr	r3, [pc, #216]	@ (8007cd8 <xTaskResumeAll+0x11c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d162      	bne.n	8007cca <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c04:	4b35      	ldr	r3, [pc, #212]	@ (8007cdc <xTaskResumeAll+0x120>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d05e      	beq.n	8007cca <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c0c:	e02f      	b.n	8007c6e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c0e:	4b34      	ldr	r3, [pc, #208]	@ (8007ce0 <xTaskResumeAll+0x124>)
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3318      	adds	r3, #24
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fdda 	bl	80067d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fdd5 	bl	80067d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ce4 <xTaskResumeAll+0x128>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d903      	bls.n	8007c3e <xTaskResumeAll+0x82>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce4 <xTaskResumeAll+0x128>)
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4a27      	ldr	r2, [pc, #156]	@ (8007ce8 <xTaskResumeAll+0x12c>)
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3304      	adds	r3, #4
 8007c52:	4619      	mov	r1, r3
 8007c54:	4610      	mov	r0, r2
 8007c56:	f7fe fd60 	bl	800671a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5e:	4b23      	ldr	r3, [pc, #140]	@ (8007cec <xTaskResumeAll+0x130>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d302      	bcc.n	8007c6e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007c68:	4b21      	ldr	r3, [pc, #132]	@ (8007cf0 <xTaskResumeAll+0x134>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce0 <xTaskResumeAll+0x124>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1cb      	bne.n	8007c0e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c7c:	f000 fb76 	bl	800836c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c80:	4b1c      	ldr	r3, [pc, #112]	@ (8007cf4 <xTaskResumeAll+0x138>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d010      	beq.n	8007cae <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c8c:	f000 f846 	bl	8007d1c <xTaskIncrementTick>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007c96:	4b16      	ldr	r3, [pc, #88]	@ (8007cf0 <xTaskResumeAll+0x134>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1f1      	bne.n	8007c8c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007ca8:	4b12      	ldr	r3, [pc, #72]	@ (8007cf4 <xTaskResumeAll+0x138>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cae:	4b10      	ldr	r3, [pc, #64]	@ (8007cf0 <xTaskResumeAll+0x134>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cba:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf8 <xTaskResumeAll+0x13c>)
 8007cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cca:	f001 fb0d 	bl	80092e8 <vPortExitCritical>

	return xAlreadyYielded;
 8007cce:	68bb      	ldr	r3, [r7, #8]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20000fa8 	.word	0x20000fa8
 8007cdc:	20000f80 	.word	0x20000f80
 8007ce0:	20000f40 	.word	0x20000f40
 8007ce4:	20000f88 	.word	0x20000f88
 8007ce8:	20000ab0 	.word	0x20000ab0
 8007cec:	20000aac 	.word	0x20000aac
 8007cf0:	20000f94 	.word	0x20000f94
 8007cf4:	20000f90 	.word	0x20000f90
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d02:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <xTaskGetTickCount+0x1c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d08:	687b      	ldr	r3, [r7, #4]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	20000f84 	.word	0x20000f84

08007d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d26:	4b50      	ldr	r3, [pc, #320]	@ (8007e68 <xTaskIncrementTick+0x14c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f040 808c 	bne.w	8007e48 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d30:	4b4e      	ldr	r3, [pc, #312]	@ (8007e6c <xTaskIncrementTick+0x150>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d38:	4a4c      	ldr	r2, [pc, #304]	@ (8007e6c <xTaskIncrementTick+0x150>)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d123      	bne.n	8007d8c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d44:	4b4a      	ldr	r3, [pc, #296]	@ (8007e70 <xTaskIncrementTick+0x154>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00d      	beq.n	8007d6a <xTaskIncrementTick+0x4e>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	b672      	cpsid	i
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	b662      	cpsie	i
 8007d62:	603b      	str	r3, [r7, #0]
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	e7fd      	b.n	8007d66 <xTaskIncrementTick+0x4a>
 8007d6a:	4b41      	ldr	r3, [pc, #260]	@ (8007e70 <xTaskIncrementTick+0x154>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	4b40      	ldr	r3, [pc, #256]	@ (8007e74 <xTaskIncrementTick+0x158>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a3e      	ldr	r2, [pc, #248]	@ (8007e70 <xTaskIncrementTick+0x154>)
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	4a3e      	ldr	r2, [pc, #248]	@ (8007e74 <xTaskIncrementTick+0x158>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e78 <xTaskIncrementTick+0x15c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a3c      	ldr	r2, [pc, #240]	@ (8007e78 <xTaskIncrementTick+0x15c>)
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	f000 faf0 	bl	800836c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8007e7c <xTaskIncrementTick+0x160>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d349      	bcc.n	8007e2a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d96:	4b36      	ldr	r3, [pc, #216]	@ (8007e70 <xTaskIncrementTick+0x154>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007da0:	4b36      	ldr	r3, [pc, #216]	@ (8007e7c <xTaskIncrementTick+0x160>)
 8007da2:	f04f 32ff 	mov.w	r2, #4294967295
 8007da6:	601a      	str	r2, [r3, #0]
					break;
 8007da8:	e03f      	b.n	8007e2a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007daa:	4b31      	ldr	r3, [pc, #196]	@ (8007e70 <xTaskIncrementTick+0x154>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d203      	bcs.n	8007dca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8007e7c <xTaskIncrementTick+0x160>)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dc8:	e02f      	b.n	8007e2a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fd00 	bl	80067d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	3318      	adds	r3, #24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fcf7 	bl	80067d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dea:	4b25      	ldr	r3, [pc, #148]	@ (8007e80 <xTaskIncrementTick+0x164>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d903      	bls.n	8007dfa <xTaskIncrementTick+0xde>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df6:	4a22      	ldr	r2, [pc, #136]	@ (8007e80 <xTaskIncrementTick+0x164>)
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4a1f      	ldr	r2, [pc, #124]	@ (8007e84 <xTaskIncrementTick+0x168>)
 8007e08:	441a      	add	r2, r3
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4610      	mov	r0, r2
 8007e12:	f7fe fc82 	bl	800671a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8007e88 <xTaskIncrementTick+0x16c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d3b8      	bcc.n	8007d96 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e28:	e7b5      	b.n	8007d96 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e2a:	4b17      	ldr	r3, [pc, #92]	@ (8007e88 <xTaskIncrementTick+0x16c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e30:	4914      	ldr	r1, [pc, #80]	@ (8007e84 <xTaskIncrementTick+0x168>)
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d907      	bls.n	8007e52 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007e42:	2301      	movs	r3, #1
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e004      	b.n	8007e52 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e48:	4b10      	ldr	r3, [pc, #64]	@ (8007e8c <xTaskIncrementTick+0x170>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8007e8c <xTaskIncrementTick+0x170>)
 8007e50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e52:	4b0f      	ldr	r3, [pc, #60]	@ (8007e90 <xTaskIncrementTick+0x174>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e5e:	697b      	ldr	r3, [r7, #20]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20000fa8 	.word	0x20000fa8
 8007e6c:	20000f84 	.word	0x20000f84
 8007e70:	20000f38 	.word	0x20000f38
 8007e74:	20000f3c 	.word	0x20000f3c
 8007e78:	20000f98 	.word	0x20000f98
 8007e7c:	20000fa0 	.word	0x20000fa0
 8007e80:	20000f88 	.word	0x20000f88
 8007e84:	20000ab0 	.word	0x20000ab0
 8007e88:	20000aac 	.word	0x20000aac
 8007e8c:	20000f90 	.word	0x20000f90
 8007e90:	20000f94 	.word	0x20000f94

08007e94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8007f4c <vTaskSwitchContext+0xb8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8007f50 <vTaskSwitchContext+0xbc>)
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ea8:	e049      	b.n	8007f3e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007eaa:	4b29      	ldr	r3, [pc, #164]	@ (8007f50 <vTaskSwitchContext+0xbc>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb0:	4b28      	ldr	r3, [pc, #160]	@ (8007f54 <vTaskSwitchContext+0xc0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	e013      	b.n	8007ee0 <vTaskSwitchContext+0x4c>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <vTaskSwitchContext+0x46>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	b672      	cpsid	i
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	b662      	cpsie	i
 8007ed2:	607b      	str	r3, [r7, #4]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <vTaskSwitchContext+0x42>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	491d      	ldr	r1, [pc, #116]	@ (8007f58 <vTaskSwitchContext+0xc4>)
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0e1      	beq.n	8007eb8 <vTaskSwitchContext+0x24>
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4a16      	ldr	r2, [pc, #88]	@ (8007f58 <vTaskSwitchContext+0xc4>)
 8007f00:	4413      	add	r3, r2
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	605a      	str	r2, [r3, #4]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	3308      	adds	r3, #8
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d104      	bne.n	8007f24 <vTaskSwitchContext+0x90>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	605a      	str	r2, [r3, #4]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f5c <vTaskSwitchContext+0xc8>)
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	4a09      	ldr	r2, [pc, #36]	@ (8007f54 <vTaskSwitchContext+0xc0>)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f34:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <vTaskSwitchContext+0xc8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3354      	adds	r3, #84	@ 0x54
 8007f3a:	4a09      	ldr	r2, [pc, #36]	@ (8007f60 <vTaskSwitchContext+0xcc>)
 8007f3c:	6013      	str	r3, [r2, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000fa8 	.word	0x20000fa8
 8007f50:	20000f94 	.word	0x20000f94
 8007f54:	20000f88 	.word	0x20000f88
 8007f58:	20000ab0 	.word	0x20000ab0
 8007f5c:	20000aac 	.word	0x20000aac
 8007f60:	20000014 	.word	0x20000014

08007f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10d      	bne.n	8007f90 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f78:	b672      	cpsid	i
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	b662      	cpsie	i
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	e7fd      	b.n	8007f8c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f90:	4b07      	ldr	r3, [pc, #28]	@ (8007fb0 <vTaskPlaceOnEventList+0x4c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3318      	adds	r3, #24
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7fe fbe2 	bl	8006762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	6838      	ldr	r0, [r7, #0]
 8007fa2:	f000 fba9 	bl	80086f8 <prvAddCurrentTaskToDelayedList>
}
 8007fa6:	bf00      	nop
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000aac 	.word	0x20000aac

08007fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10d      	bne.n	8007fe2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	b672      	cpsid	i
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	b662      	cpsie	i
 8007fda:	617b      	str	r3, [r7, #20]
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	e7fd      	b.n	8007fde <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800800c <vTaskPlaceOnEventListRestricted+0x58>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3318      	adds	r3, #24
 8007fe8:	4619      	mov	r1, r3
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7fe fb95 	bl	800671a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	68b8      	ldr	r0, [r7, #8]
 8008000:	f000 fb7a 	bl	80086f8 <prvAddCurrentTaskToDelayedList>
	}
 8008004:	bf00      	nop
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20000aac 	.word	0x20000aac

08008010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10d      	bne.n	8008042 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	b672      	cpsid	i
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	b662      	cpsie	i
 800803a:	60fb      	str	r3, [r7, #12]
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	e7fd      	b.n	800803e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3318      	adds	r3, #24
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fbc4 	bl	80067d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800804c:	4b1d      	ldr	r3, [pc, #116]	@ (80080c4 <xTaskRemoveFromEventList+0xb4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d11d      	bne.n	8008090 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	3304      	adds	r3, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe fbbb 	bl	80067d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008062:	4b19      	ldr	r3, [pc, #100]	@ (80080c8 <xTaskRemoveFromEventList+0xb8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d903      	bls.n	8008072 <xTaskRemoveFromEventList+0x62>
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806e:	4a16      	ldr	r2, [pc, #88]	@ (80080c8 <xTaskRemoveFromEventList+0xb8>)
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4a13      	ldr	r2, [pc, #76]	@ (80080cc <xTaskRemoveFromEventList+0xbc>)
 8008080:	441a      	add	r2, r3
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3304      	adds	r3, #4
 8008086:	4619      	mov	r1, r3
 8008088:	4610      	mov	r0, r2
 800808a:	f7fe fb46 	bl	800671a <vListInsertEnd>
 800808e:	e005      	b.n	800809c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3318      	adds	r3, #24
 8008094:	4619      	mov	r1, r3
 8008096:	480e      	ldr	r0, [pc, #56]	@ (80080d0 <xTaskRemoveFromEventList+0xc0>)
 8008098:	f7fe fb3f 	bl	800671a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a0:	4b0c      	ldr	r3, [pc, #48]	@ (80080d4 <xTaskRemoveFromEventList+0xc4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d905      	bls.n	80080b6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080aa:	2301      	movs	r3, #1
 80080ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080ae:	4b0a      	ldr	r3, [pc, #40]	@ (80080d8 <xTaskRemoveFromEventList+0xc8>)
 80080b0:	2201      	movs	r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e001      	b.n	80080ba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080ba:	697b      	ldr	r3, [r7, #20]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000fa8 	.word	0x20000fa8
 80080c8:	20000f88 	.word	0x20000f88
 80080cc:	20000ab0 	.word	0x20000ab0
 80080d0:	20000f40 	.word	0x20000f40
 80080d4:	20000aac 	.word	0x20000aac
 80080d8:	20000f94 	.word	0x20000f94

080080dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080e4:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <vTaskInternalSetTimeOutState+0x24>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080ec:	4b05      	ldr	r3, [pc, #20]	@ (8008104 <vTaskInternalSetTimeOutState+0x28>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	605a      	str	r2, [r3, #4]
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	20000f98 	.word	0x20000f98
 8008104:	20000f84 	.word	0x20000f84

08008108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10d      	bne.n	8008134 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	b672      	cpsid	i
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	b662      	cpsie	i
 800812c:	613b      	str	r3, [r7, #16]
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10d      	bne.n	8008156 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	b672      	cpsid	i
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	b662      	cpsie	i
 800814e:	60fb      	str	r3, [r7, #12]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008156:	f001 f891 	bl	800927c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800815a:	4b1d      	ldr	r3, [pc, #116]	@ (80081d0 <xTaskCheckForTimeOut+0xc8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008172:	d102      	bne.n	800817a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e023      	b.n	80081c2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b15      	ldr	r3, [pc, #84]	@ (80081d4 <xTaskCheckForTimeOut+0xcc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	429a      	cmp	r2, r3
 8008184:	d007      	beq.n	8008196 <xTaskCheckForTimeOut+0x8e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	429a      	cmp	r2, r3
 800818e:	d302      	bcc.n	8008196 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	e015      	b.n	80081c2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	429a      	cmp	r2, r3
 800819e:	d20b      	bcs.n	80081b8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	1ad2      	subs	r2, r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff ff95 	bl	80080dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	e004      	b.n	80081c2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081be:	2301      	movs	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081c2:	f001 f891 	bl	80092e8 <vPortExitCritical>

	return xReturn;
 80081c6:	69fb      	ldr	r3, [r7, #28]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20000f84 	.word	0x20000f84
 80081d4:	20000f98 	.word	0x20000f98

080081d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081dc:	4b03      	ldr	r3, [pc, #12]	@ (80081ec <vTaskMissedYield+0x14>)
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000f94 	.word	0x20000f94

080081f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081f8:	f000 f852 	bl	80082a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081fc:	4b06      	ldr	r3, [pc, #24]	@ (8008218 <prvIdleTask+0x28>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d9f9      	bls.n	80081f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008204:	4b05      	ldr	r3, [pc, #20]	@ (800821c <prvIdleTask+0x2c>)
 8008206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008214:	e7f0      	b.n	80081f8 <prvIdleTask+0x8>
 8008216:	bf00      	nop
 8008218:	20000ab0 	.word	0x20000ab0
 800821c:	e000ed04 	.word	0xe000ed04

08008220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	e00c      	b.n	8008246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4a12      	ldr	r2, [pc, #72]	@ (8008280 <prvInitialiseTaskLists+0x60>)
 8008238:	4413      	add	r3, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fa40 	bl	80066c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3301      	adds	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b37      	cmp	r3, #55	@ 0x37
 800824a:	d9ef      	bls.n	800822c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800824c:	480d      	ldr	r0, [pc, #52]	@ (8008284 <prvInitialiseTaskLists+0x64>)
 800824e:	f7fe fa37 	bl	80066c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008252:	480d      	ldr	r0, [pc, #52]	@ (8008288 <prvInitialiseTaskLists+0x68>)
 8008254:	f7fe fa34 	bl	80066c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008258:	480c      	ldr	r0, [pc, #48]	@ (800828c <prvInitialiseTaskLists+0x6c>)
 800825a:	f7fe fa31 	bl	80066c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800825e:	480c      	ldr	r0, [pc, #48]	@ (8008290 <prvInitialiseTaskLists+0x70>)
 8008260:	f7fe fa2e 	bl	80066c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008264:	480b      	ldr	r0, [pc, #44]	@ (8008294 <prvInitialiseTaskLists+0x74>)
 8008266:	f7fe fa2b 	bl	80066c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800826a:	4b0b      	ldr	r3, [pc, #44]	@ (8008298 <prvInitialiseTaskLists+0x78>)
 800826c:	4a05      	ldr	r2, [pc, #20]	@ (8008284 <prvInitialiseTaskLists+0x64>)
 800826e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008270:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <prvInitialiseTaskLists+0x7c>)
 8008272:	4a05      	ldr	r2, [pc, #20]	@ (8008288 <prvInitialiseTaskLists+0x68>)
 8008274:	601a      	str	r2, [r3, #0]
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000ab0 	.word	0x20000ab0
 8008284:	20000f10 	.word	0x20000f10
 8008288:	20000f24 	.word	0x20000f24
 800828c:	20000f40 	.word	0x20000f40
 8008290:	20000f54 	.word	0x20000f54
 8008294:	20000f6c 	.word	0x20000f6c
 8008298:	20000f38 	.word	0x20000f38
 800829c:	20000f3c 	.word	0x20000f3c

080082a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a6:	e019      	b.n	80082dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082a8:	f000 ffe8 	bl	800927c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ac:	4b10      	ldr	r3, [pc, #64]	@ (80082f0 <prvCheckTasksWaitingTermination+0x50>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fa8b 	bl	80067d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <prvCheckTasksWaitingTermination+0x54>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	4a0b      	ldr	r2, [pc, #44]	@ (80082f4 <prvCheckTasksWaitingTermination+0x54>)
 80082c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082c8:	4b0b      	ldr	r3, [pc, #44]	@ (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	4a0a      	ldr	r2, [pc, #40]	@ (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082d2:	f001 f809 	bl	80092e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f810 	bl	80082fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e1      	bne.n	80082a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000f54 	.word	0x20000f54
 80082f4:	20000f80 	.word	0x20000f80
 80082f8:	20000f68 	.word	0x20000f68

080082fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3354      	adds	r3, #84	@ 0x54
 8008308:	4618      	mov	r0, r3
 800830a:	f001 faf7 	bl	80098fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008314:	2b00      	cmp	r3, #0
 8008316:	d108      	bne.n	800832a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831c:	4618      	mov	r0, r3
 800831e:	f001 f9a9 	bl	8009674 <vPortFree>
				vPortFree( pxTCB );
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 f9a6 	bl	8009674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008328:	e01b      	b.n	8008362 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008330:	2b01      	cmp	r3, #1
 8008332:	d103      	bne.n	800833c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f99d 	bl	8009674 <vPortFree>
	}
 800833a:	e012      	b.n	8008362 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008342:	2b02      	cmp	r3, #2
 8008344:	d00d      	beq.n	8008362 <prvDeleteTCB+0x66>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834a:	b672      	cpsid	i
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	b662      	cpsie	i
 800835a:	60fb      	str	r3, [r7, #12]
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	e7fd      	b.n	800835e <prvDeleteTCB+0x62>
	}
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008372:	4b0c      	ldr	r3, [pc, #48]	@ (80083a4 <prvResetNextTaskUnblockTime+0x38>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800837c:	4b0a      	ldr	r3, [pc, #40]	@ (80083a8 <prvResetNextTaskUnblockTime+0x3c>)
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008384:	e008      	b.n	8008398 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008386:	4b07      	ldr	r3, [pc, #28]	@ (80083a4 <prvResetNextTaskUnblockTime+0x38>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	4a04      	ldr	r2, [pc, #16]	@ (80083a8 <prvResetNextTaskUnblockTime+0x3c>)
 8008396:	6013      	str	r3, [r2, #0]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20000f38 	.word	0x20000f38
 80083a8:	20000fa0 	.word	0x20000fa0

080083ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80083b2:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <xTaskGetCurrentTaskHandle+0x1c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80083b8:	687b      	ldr	r3, [r7, #4]
	}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000aac 	.word	0x20000aac

080083cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008400 <xTaskGetSchedulerState+0x34>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083da:	2301      	movs	r3, #1
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	e008      	b.n	80083f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e0:	4b08      	ldr	r3, [pc, #32]	@ (8008404 <xTaskGetSchedulerState+0x38>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083e8:	2302      	movs	r3, #2
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e001      	b.n	80083f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083f2:	687b      	ldr	r3, [r7, #4]
	}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	20000f8c 	.word	0x20000f8c
 8008404:	20000fa8 	.word	0x20000fa8

08008408 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d051      	beq.n	80084c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008422:	4b2a      	ldr	r3, [pc, #168]	@ (80084cc <xTaskPriorityInherit+0xc4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008428:	429a      	cmp	r2, r3
 800842a:	d241      	bcs.n	80084b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	db06      	blt.n	8008442 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008434:	4b25      	ldr	r3, [pc, #148]	@ (80084cc <xTaskPriorityInherit+0xc4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	6959      	ldr	r1, [r3, #20]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4a1f      	ldr	r2, [pc, #124]	@ (80084d0 <xTaskPriorityInherit+0xc8>)
 8008454:	4413      	add	r3, r2
 8008456:	4299      	cmp	r1, r3
 8008458:	d122      	bne.n	80084a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	3304      	adds	r3, #4
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe f9b8 	bl	80067d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008464:	4b19      	ldr	r3, [pc, #100]	@ (80084cc <xTaskPriorityInherit+0xc4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008472:	4b18      	ldr	r3, [pc, #96]	@ (80084d4 <xTaskPriorityInherit+0xcc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d903      	bls.n	8008482 <xTaskPriorityInherit+0x7a>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847e:	4a15      	ldr	r2, [pc, #84]	@ (80084d4 <xTaskPriorityInherit+0xcc>)
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4a10      	ldr	r2, [pc, #64]	@ (80084d0 <xTaskPriorityInherit+0xc8>)
 8008490:	441a      	add	r2, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3304      	adds	r3, #4
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	f7fe f93e 	bl	800671a <vListInsertEnd>
 800849e:	e004      	b.n	80084aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	@ (80084cc <xTaskPriorityInherit+0xc4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80084aa:	2301      	movs	r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e008      	b.n	80084c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084b4:	4b05      	ldr	r3, [pc, #20]	@ (80084cc <xTaskPriorityInherit+0xc4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d201      	bcs.n	80084c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084c2:	68fb      	ldr	r3, [r7, #12]
	}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000aac 	.word	0x20000aac
 80084d0:	20000ab0 	.word	0x20000ab0
 80084d4:	20000f88 	.word	0x20000f88

080084d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d05c      	beq.n	80085a8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084ee:	4b31      	ldr	r3, [pc, #196]	@ (80085b4 <xTaskPriorityDisinherit+0xdc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d00d      	beq.n	8008514 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fc:	b672      	cpsid	i
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	b662      	cpsie	i
 800850c:	60fb      	str	r3, [r7, #12]
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10d      	bne.n	8008538 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	b672      	cpsid	i
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	b662      	cpsie	i
 8008530:	60bb      	str	r3, [r7, #8]
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	e7fd      	b.n	8008534 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800853c:	1e5a      	subs	r2, r3, #1
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800854a:	429a      	cmp	r2, r3
 800854c:	d02c      	beq.n	80085a8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008552:	2b00      	cmp	r3, #0
 8008554:	d128      	bne.n	80085a8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe f93a 	bl	80067d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008578:	4b0f      	ldr	r3, [pc, #60]	@ (80085b8 <xTaskPriorityDisinherit+0xe0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d903      	bls.n	8008588 <xTaskPriorityDisinherit+0xb0>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008584:	4a0c      	ldr	r2, [pc, #48]	@ (80085b8 <xTaskPriorityDisinherit+0xe0>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4a09      	ldr	r2, [pc, #36]	@ (80085bc <xTaskPriorityDisinherit+0xe4>)
 8008596:	441a      	add	r2, r3
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f7fe f8bb 	bl	800671a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085a8:	697b      	ldr	r3, [r7, #20]
	}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000aac 	.word	0x20000aac
 80085b8:	20000f88 	.word	0x20000f88
 80085bc:	20000ab0 	.word	0x20000ab0

080085c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d070      	beq.n	80086ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10d      	bne.n	80085fc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e4:	b672      	cpsid	i
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	b662      	cpsie	i
 80085f4:	60fb      	str	r3, [r7, #12]
}
 80085f6:	bf00      	nop
 80085f8:	bf00      	nop
 80085fa:	e7fd      	b.n	80085f8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d902      	bls.n	800860c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	e002      	b.n	8008612 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008610:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	429a      	cmp	r2, r3
 800861a:	d04e      	beq.n	80086ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	429a      	cmp	r2, r3
 8008624:	d149      	bne.n	80086ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008626:	4b27      	ldr	r3, [pc, #156]	@ (80086c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d10d      	bne.n	800864c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008634:	b672      	cpsid	i
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	b662      	cpsie	i
 8008644:	60bb      	str	r3, [r7, #8]
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008650:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	db04      	blt.n	800866a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	6959      	ldr	r1, [r3, #20]
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a13      	ldr	r2, [pc, #76]	@ (80086c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800867a:	4413      	add	r3, r2
 800867c:	4299      	cmp	r1, r3
 800867e:	d11c      	bne.n	80086ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	3304      	adds	r3, #4
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe f8a5 	bl	80067d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868e:	4b0f      	ldr	r3, [pc, #60]	@ (80086cc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d903      	bls.n	800869e <vTaskPriorityDisinheritAfterTimeout+0xde>
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869a:	4a0c      	ldr	r2, [pc, #48]	@ (80086cc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4a07      	ldr	r2, [pc, #28]	@ (80086c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80086ac:	441a      	add	r2, r3
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	3304      	adds	r3, #4
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f7fe f830 	bl	800671a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086ba:	bf00      	nop
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000aac 	.word	0x20000aac
 80086c8:	20000ab0 	.word	0x20000ab0
 80086cc:	20000f88 	.word	0x20000f88

080086d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80086d4:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80086dc:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086e2:	3201      	adds	r2, #1
 80086e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80086e6:	4b03      	ldr	r3, [pc, #12]	@ (80086f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086e8:	681b      	ldr	r3, [r3, #0]
	}
 80086ea:	4618      	mov	r0, r3
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20000aac 	.word	0x20000aac

080086f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008702:	4b21      	ldr	r3, [pc, #132]	@ (8008788 <prvAddCurrentTaskToDelayedList+0x90>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008708:	4b20      	ldr	r3, [pc, #128]	@ (800878c <prvAddCurrentTaskToDelayedList+0x94>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3304      	adds	r3, #4
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe f860 	bl	80067d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871a:	d10a      	bne.n	8008732 <prvAddCurrentTaskToDelayedList+0x3a>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008722:	4b1a      	ldr	r3, [pc, #104]	@ (800878c <prvAddCurrentTaskToDelayedList+0x94>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	4819      	ldr	r0, [pc, #100]	@ (8008790 <prvAddCurrentTaskToDelayedList+0x98>)
 800872c:	f7fd fff5 	bl	800671a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008730:	e026      	b.n	8008780 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4413      	add	r3, r2
 8008738:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800873a:	4b14      	ldr	r3, [pc, #80]	@ (800878c <prvAddCurrentTaskToDelayedList+0x94>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	429a      	cmp	r2, r3
 8008748:	d209      	bcs.n	800875e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800874a:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <prvAddCurrentTaskToDelayedList+0x9c>)
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4b0f      	ldr	r3, [pc, #60]	@ (800878c <prvAddCurrentTaskToDelayedList+0x94>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f7fe f803 	bl	8006762 <vListInsert>
}
 800875c:	e010      	b.n	8008780 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800875e:	4b0e      	ldr	r3, [pc, #56]	@ (8008798 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <prvAddCurrentTaskToDelayedList+0x94>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3304      	adds	r3, #4
 8008768:	4619      	mov	r1, r3
 800876a:	4610      	mov	r0, r2
 800876c:	f7fd fff9 	bl	8006762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008770:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	d202      	bcs.n	8008780 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800877a:	4a08      	ldr	r2, [pc, #32]	@ (800879c <prvAddCurrentTaskToDelayedList+0xa4>)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	6013      	str	r3, [r2, #0]
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20000f84 	.word	0x20000f84
 800878c:	20000aac 	.word	0x20000aac
 8008790:	20000f6c 	.word	0x20000f6c
 8008794:	20000f3c 	.word	0x20000f3c
 8008798:	20000f38 	.word	0x20000f38
 800879c:	20000fa0 	.word	0x20000fa0

080087a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	@ 0x28
 80087a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087aa:	f000 fbc5 	bl	8008f38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008828 <xTimerCreateTimerTask+0x88>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d021      	beq.n	80087fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087be:	1d3a      	adds	r2, r7, #4
 80087c0:	f107 0108 	add.w	r1, r7, #8
 80087c4:	f107 030c 	add.w	r3, r7, #12
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fd ff5f 	bl	800668c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	9202      	str	r2, [sp, #8]
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	2306      	movs	r3, #6
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	460a      	mov	r2, r1
 80087e0:	4912      	ldr	r1, [pc, #72]	@ (800882c <xTimerCreateTimerTask+0x8c>)
 80087e2:	4813      	ldr	r0, [pc, #76]	@ (8008830 <xTimerCreateTimerTask+0x90>)
 80087e4:	f7fe ff6a 	bl	80076bc <xTaskCreateStatic>
 80087e8:	4603      	mov	r3, r0
 80087ea:	4a12      	ldr	r2, [pc, #72]	@ (8008834 <xTimerCreateTimerTask+0x94>)
 80087ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087ee:	4b11      	ldr	r3, [pc, #68]	@ (8008834 <xTimerCreateTimerTask+0x94>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087f6:	2301      	movs	r3, #1
 80087f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10d      	bne.n	800881c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	b672      	cpsid	i
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	b662      	cpsie	i
 8008814:	613b      	str	r3, [r7, #16]
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	e7fd      	b.n	8008818 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800881c:	697b      	ldr	r3, [r7, #20]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20000fdc 	.word	0x20000fdc
 800882c:	0800a470 	.word	0x0800a470
 8008830:	08008ac1 	.word	0x08008ac1
 8008834:	20000fe0 	.word	0x20000fe0

08008838 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008846:	202c      	movs	r0, #44	@ 0x2c
 8008848:	f000 fe46 	bl	80094d8 <pvPortMalloc>
 800884c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00d      	beq.n	8008870 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f849 	bl	8008902 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008870:	697b      	ldr	r3, [r7, #20]
	}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800887a:	b580      	push	{r7, lr}
 800887c:	b08a      	sub	sp, #40	@ 0x28
 800887e:	af02      	add	r7, sp, #8
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008888:	232c      	movs	r3, #44	@ 0x2c
 800888a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2b2c      	cmp	r3, #44	@ 0x2c
 8008890:	d00d      	beq.n	80088ae <xTimerCreateStatic+0x34>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	b672      	cpsid	i
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	b662      	cpsie	i
 80088a6:	61bb      	str	r3, [r7, #24]
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10d      	bne.n	80088d2 <xTimerCreateStatic+0x58>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ba:	b672      	cpsid	i
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	b662      	cpsie	i
 80088ca:	617b      	str	r3, [r7, #20]
}
 80088cc:	bf00      	nop
 80088ce:	bf00      	nop
 80088d0:	e7fd      	b.n	80088ce <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80088d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00d      	beq.n	80088f8 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	68b9      	ldr	r1, [r7, #8]
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f805 	bl	8008902 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80088f8:	69fb      	ldr	r3, [r7, #28]
	}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3720      	adds	r7, #32
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10d      	bne.n	8008932 <prvInitialiseNewTimer+0x30>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	b672      	cpsid	i
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	b662      	cpsie	i
 800892a:	617b      	str	r3, [r7, #20]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01e      	beq.n	8008976 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008938:	f000 fafe 	bl	8008f38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800894e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008950:	6a3a      	ldr	r2, [r7, #32]
 8008952:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	3304      	adds	r3, #4
 8008958:	4618      	mov	r0, r3
 800895a:	f7fd fed1 	bl	8006700 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800896a:	f043 0304 	orr.w	r3, r3, #4
 800896e:	b2da      	uxtb	r2, r3
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008976:	bf00      	nop
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	@ 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800898e:	2300      	movs	r3, #0
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10d      	bne.n	80089b4 <xTimerGenericCommand+0x34>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899c:	b672      	cpsid	i
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	b662      	cpsie	i
 80089ac:	623b      	str	r3, [r7, #32]
}
 80089ae:	bf00      	nop
 80089b0:	bf00      	nop
 80089b2:	e7fd      	b.n	80089b0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089b4:	4b19      	ldr	r3, [pc, #100]	@ (8008a1c <xTimerGenericCommand+0x9c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d02a      	beq.n	8008a12 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	dc18      	bgt.n	8008a00 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089ce:	f7ff fcfd 	bl	80083cc <xTaskGetSchedulerState>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d109      	bne.n	80089ec <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089d8:	4b10      	ldr	r3, [pc, #64]	@ (8008a1c <xTimerGenericCommand+0x9c>)
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	f107 0110 	add.w	r1, r7, #16
 80089e0:	2300      	movs	r3, #0
 80089e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e4:	f7fe f936 	bl	8006c54 <xQueueGenericSend>
 80089e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80089ea:	e012      	b.n	8008a12 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089ec:	4b0b      	ldr	r3, [pc, #44]	@ (8008a1c <xTimerGenericCommand+0x9c>)
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	f107 0110 	add.w	r1, r7, #16
 80089f4:	2300      	movs	r3, #0
 80089f6:	2200      	movs	r2, #0
 80089f8:	f7fe f92c 	bl	8006c54 <xQueueGenericSend>
 80089fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80089fe:	e008      	b.n	8008a12 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a00:	4b06      	ldr	r3, [pc, #24]	@ (8008a1c <xTimerGenericCommand+0x9c>)
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	f107 0110 	add.w	r1, r7, #16
 8008a08:	2300      	movs	r3, #0
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	f7fe fa2c 	bl	8006e68 <xQueueGenericSendFromISR>
 8008a10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3728      	adds	r7, #40	@ 0x28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000fdc 	.word	0x20000fdc

08008a20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af02      	add	r7, sp, #8
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a2a:	4b24      	ldr	r3, [pc, #144]	@ (8008abc <prvProcessExpiredTimer+0x9c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fd fecb 	bl	80067d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a44:	f003 0304 	and.w	r3, r3, #4
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d025      	beq.n	8008a98 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	699a      	ldr	r2, [r3, #24]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	18d1      	adds	r1, r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	6978      	ldr	r0, [r7, #20]
 8008a5a:	f000 f8d7 	bl	8008c0c <prvInsertTimerInActiveList>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d022      	beq.n	8008aaa <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a64:	2300      	movs	r3, #0
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f7ff ff86 	bl	8008980 <xTimerGenericCommand>
 8008a74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d116      	bne.n	8008aaa <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a80:	b672      	cpsid	i
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	b662      	cpsie	i
 8008a90:	60fb      	str	r3, [r7, #12]
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	6978      	ldr	r0, [r7, #20]
 8008ab0:	4798      	blx	r3
}
 8008ab2:	bf00      	nop
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000fd4 	.word	0x20000fd4

08008ac0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f859 	bl	8008b84 <prvGetNextExpireTime>
 8008ad2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f805 	bl	8008ae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ade:	f000 f8d7 	bl	8008c90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ae2:	bf00      	nop
 8008ae4:	e7f0      	b.n	8008ac8 <prvTimerTask+0x8>
	...

08008ae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008af2:	f7ff f855 	bl	8007ba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008af6:	f107 0308 	add.w	r3, r7, #8
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f866 	bl	8008bcc <prvSampleTimeNow>
 8008b00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d130      	bne.n	8008b6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <prvProcessTimerOrBlockTask+0x3c>
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d806      	bhi.n	8008b24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b16:	f7ff f851 	bl	8007bbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b1a:	68f9      	ldr	r1, [r7, #12]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff ff7f 	bl	8008a20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b22:	e024      	b.n	8008b6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d008      	beq.n	8008b3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b2a:	4b13      	ldr	r3, [pc, #76]	@ (8008b78 <prvProcessTimerOrBlockTask+0x90>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <prvProcessTimerOrBlockTask+0x50>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e000      	b.n	8008b3a <prvProcessTimerOrBlockTask+0x52>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b7c <prvProcessTimerOrBlockTask+0x94>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7fe fd83 	bl	8007654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b4e:	f7ff f835 	bl	8007bbc <xTaskResumeAll>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b58:	4b09      	ldr	r3, [pc, #36]	@ (8008b80 <prvProcessTimerOrBlockTask+0x98>)
 8008b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	f3bf 8f6f 	isb	sy
}
 8008b68:	e001      	b.n	8008b6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b6a:	f7ff f827 	bl	8007bbc <xTaskResumeAll>
}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000fd8 	.word	0x20000fd8
 8008b7c:	20000fdc 	.word	0x20000fdc
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc8 <prvGetNextExpireTime+0x44>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <prvGetNextExpireTime+0x16>
 8008b96:	2201      	movs	r2, #1
 8008b98:	e000      	b.n	8008b9c <prvGetNextExpireTime+0x18>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ba8:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <prvGetNextExpireTime+0x44>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e001      	b.n	8008bb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000fd4 	.word	0x20000fd4

08008bcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bd4:	f7ff f892 	bl	8007cfc <xTaskGetTickCount>
 8008bd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bda:	4b0b      	ldr	r3, [pc, #44]	@ (8008c08 <prvSampleTimeNow+0x3c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d205      	bcs.n	8008bf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008be4:	f000 f940 	bl	8008e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bf6:	4a04      	ldr	r2, [pc, #16]	@ (8008c08 <prvSampleTimeNow+0x3c>)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000fe4 	.word	0x20000fe4

08008c0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d812      	bhi.n	8008c58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	1ad2      	subs	r2, r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d302      	bcc.n	8008c46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e01b      	b.n	8008c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c46:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <prvInsertTimerInActiveList+0x7c>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f7fd fd86 	bl	8006762 <vListInsert>
 8008c56:	e012      	b.n	8008c7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d206      	bcs.n	8008c6e <prvInsertTimerInActiveList+0x62>
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d302      	bcc.n	8008c6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e007      	b.n	8008c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c6e:	4b07      	ldr	r3, [pc, #28]	@ (8008c8c <prvInsertTimerInActiveList+0x80>)
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7fd fd72 	bl	8006762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c7e:	697b      	ldr	r3, [r7, #20]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20000fd8 	.word	0x20000fd8
 8008c8c:	20000fd4 	.word	0x20000fd4

08008c90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08e      	sub	sp, #56	@ 0x38
 8008c94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c96:	e0d4      	b.n	8008e42 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	da1b      	bge.n	8008cd6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c9e:	1d3b      	adds	r3, r7, #4
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10d      	bne.n	8008cc6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cae:	b672      	cpsid	i
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	b662      	cpsie	i
 8008cbe:	61fb      	str	r3, [r7, #28]
}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	e7fd      	b.n	8008cc2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ccc:	6850      	ldr	r0, [r2, #4]
 8008cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd0:	6892      	ldr	r2, [r2, #8]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f2c0 80b2 	blt.w	8008e42 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cec:	3304      	adds	r3, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fd fd70 	bl	80067d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cf4:	463b      	mov	r3, r7
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff ff68 	bl	8008bcc <prvSampleTimeNow>
 8008cfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b09      	cmp	r3, #9
 8008d02:	f200 809b 	bhi.w	8008e3c <prvProcessReceivedCommands+0x1ac>
 8008d06:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <prvProcessReceivedCommands+0x7c>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d35 	.word	0x08008d35
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d35 	.word	0x08008d35
 8008d18:	08008daf 	.word	0x08008daf
 8008d1c:	08008dc3 	.word	0x08008dc3
 8008d20:	08008e13 	.word	0x08008e13
 8008d24:	08008d35 	.word	0x08008d35
 8008d28:	08008d35 	.word	0x08008d35
 8008d2c:	08008daf 	.word	0x08008daf
 8008d30:	08008dc3 	.word	0x08008dc3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	18d1      	adds	r1, r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d54:	f7ff ff5a 	bl	8008c0c <prvInsertTimerInActiveList>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d070      	beq.n	8008e40 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d065      	beq.n	8008e40 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	441a      	add	r2, r3
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	2300      	movs	r3, #0
 8008d82:	2100      	movs	r1, #0
 8008d84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d86:	f7ff fdfb 	bl	8008980 <xTimerGenericCommand>
 8008d8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d156      	bne.n	8008e40 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	b672      	cpsid	i
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	b662      	cpsie	i
 8008da6:	61bb      	str	r3, [r7, #24]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008db4:	f023 0301 	bic.w	r3, r3, #1
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008dc0:	e03f      	b.n	8008e42 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dc8:	f043 0301 	orr.w	r3, r3, #1
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10d      	bne.n	8008dfe <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de6:	b672      	cpsid	i
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	b662      	cpsie	i
 8008df6:	617b      	str	r3, [r7, #20]
}
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	e7fd      	b.n	8008dfa <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	18d1      	adds	r1, r2, r3
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0c:	f7ff fefe 	bl	8008c0c <prvInsertTimerInActiveList>
					break;
 8008e10:	e017      	b.n	8008e42 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d103      	bne.n	8008e28 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e22:	f000 fc27 	bl	8009674 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e26:	e00c      	b.n	8008e42 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e2e:	f023 0301 	bic.w	r3, r3, #1
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e3a:	e002      	b.n	8008e42 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008e3c:	bf00      	nop
 8008e3e:	e000      	b.n	8008e42 <prvProcessReceivedCommands+0x1b2>
					break;
 8008e40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e42:	4b08      	ldr	r3, [pc, #32]	@ (8008e64 <prvProcessReceivedCommands+0x1d4>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	1d39      	adds	r1, r7, #4
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe f8b0 	bl	8006fb0 <xQueueReceive>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f47f af20 	bne.w	8008c98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	3730      	adds	r7, #48	@ 0x30
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20000fdc 	.word	0x20000fdc

08008e68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e6e:	e04b      	b.n	8008f08 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e70:	4b2f      	ldr	r3, [pc, #188]	@ (8008f30 <prvSwitchTimerLists+0xc8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8008f30 <prvSwitchTimerLists+0xc8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fd fca3 	bl	80067d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d031      	beq.n	8008f08 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4413      	add	r3, r2
 8008eac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d90e      	bls.n	8008ed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f30 <prvSwitchTimerLists+0xc8>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f7fd fc48 	bl	8006762 <vListInsert>
 8008ed2:	e019      	b.n	8008f08 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	2100      	movs	r1, #0
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fd4e 	bl	8008980 <xTimerGenericCommand>
 8008ee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10d      	bne.n	8008f08 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef0:	b672      	cpsid	i
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	b662      	cpsie	i
 8008f00:	603b      	str	r3, [r7, #0]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f08:	4b09      	ldr	r3, [pc, #36]	@ (8008f30 <prvSwitchTimerLists+0xc8>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1ae      	bne.n	8008e70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f12:	4b07      	ldr	r3, [pc, #28]	@ (8008f30 <prvSwitchTimerLists+0xc8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f18:	4b06      	ldr	r3, [pc, #24]	@ (8008f34 <prvSwitchTimerLists+0xcc>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a04      	ldr	r2, [pc, #16]	@ (8008f30 <prvSwitchTimerLists+0xc8>)
 8008f1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f20:	4a04      	ldr	r2, [pc, #16]	@ (8008f34 <prvSwitchTimerLists+0xcc>)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	6013      	str	r3, [r2, #0]
}
 8008f26:	bf00      	nop
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000fd4 	.word	0x20000fd4
 8008f34:	20000fd8 	.word	0x20000fd8

08008f38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f3e:	f000 f99d 	bl	800927c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f42:	4b15      	ldr	r3, [pc, #84]	@ (8008f98 <prvCheckForValidListAndQueue+0x60>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d120      	bne.n	8008f8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f4a:	4814      	ldr	r0, [pc, #80]	@ (8008f9c <prvCheckForValidListAndQueue+0x64>)
 8008f4c:	f7fd fbb8 	bl	80066c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f50:	4813      	ldr	r0, [pc, #76]	@ (8008fa0 <prvCheckForValidListAndQueue+0x68>)
 8008f52:	f7fd fbb5 	bl	80066c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f56:	4b13      	ldr	r3, [pc, #76]	@ (8008fa4 <prvCheckForValidListAndQueue+0x6c>)
 8008f58:	4a10      	ldr	r2, [pc, #64]	@ (8008f9c <prvCheckForValidListAndQueue+0x64>)
 8008f5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f5c:	4b12      	ldr	r3, [pc, #72]	@ (8008fa8 <prvCheckForValidListAndQueue+0x70>)
 8008f5e:	4a10      	ldr	r2, [pc, #64]	@ (8008fa0 <prvCheckForValidListAndQueue+0x68>)
 8008f60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f62:	2300      	movs	r3, #0
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	4b11      	ldr	r3, [pc, #68]	@ (8008fac <prvCheckForValidListAndQueue+0x74>)
 8008f68:	4a11      	ldr	r2, [pc, #68]	@ (8008fb0 <prvCheckForValidListAndQueue+0x78>)
 8008f6a:	2110      	movs	r1, #16
 8008f6c:	200a      	movs	r0, #10
 8008f6e:	f7fd fcc7 	bl	8006900 <xQueueGenericCreateStatic>
 8008f72:	4603      	mov	r3, r0
 8008f74:	4a08      	ldr	r2, [pc, #32]	@ (8008f98 <prvCheckForValidListAndQueue+0x60>)
 8008f76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f78:	4b07      	ldr	r3, [pc, #28]	@ (8008f98 <prvCheckForValidListAndQueue+0x60>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f80:	4b05      	ldr	r3, [pc, #20]	@ (8008f98 <prvCheckForValidListAndQueue+0x60>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	490b      	ldr	r1, [pc, #44]	@ (8008fb4 <prvCheckForValidListAndQueue+0x7c>)
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fb3a 	bl	8007600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f8c:	f000 f9ac 	bl	80092e8 <vPortExitCritical>
}
 8008f90:	bf00      	nop
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20000fdc 	.word	0x20000fdc
 8008f9c:	20000fac 	.word	0x20000fac
 8008fa0:	20000fc0 	.word	0x20000fc0
 8008fa4:	20000fd4 	.word	0x20000fd4
 8008fa8:	20000fd8 	.word	0x20000fd8
 8008fac:	20001088 	.word	0x20001088
 8008fb0:	20000fe8 	.word	0x20000fe8
 8008fb4:	0800a478 	.word	0x0800a478

08008fb8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10d      	bne.n	8008fe6 <xTimerIsTimerActive+0x2e>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fce:	b672      	cpsid	i
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	b662      	cpsie	i
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <xTimerIsTimerActive+0x2a>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8008fe6:	f000 f949 	bl	800927c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d102      	bne.n	8008ffe <xTimerIsTimerActive+0x46>
		{
			xReturn = pdFALSE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e001      	b.n	8009002 <xTimerIsTimerActive+0x4a>
		}
		else
		{
			xReturn = pdTRUE;
 8008ffe:	2301      	movs	r3, #1
 8009000:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009002:	f000 f971 	bl	80092e8 <vPortExitCritical>

	return xReturn;
 8009006:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8009008:	4618      	mov	r0, r3
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10d      	bne.n	800903e <pvTimerGetTimerID+0x2e>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	b672      	cpsid	i
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	b662      	cpsie	i
 8009036:	60fb      	str	r3, [r7, #12]
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	e7fd      	b.n	800903a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800903e:	f000 f91d 	bl	800927c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009048:	f000 f94e 	bl	80092e8 <vPortExitCritical>

	return pvReturn;
 800904c:	693b      	ldr	r3, [r7, #16]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3b04      	subs	r3, #4
 8009068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3b04      	subs	r3, #4
 8009076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f023 0201 	bic.w	r2, r3, #1
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b04      	subs	r3, #4
 8009086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009088:	4a0c      	ldr	r2, [pc, #48]	@ (80090bc <pxPortInitialiseStack+0x64>)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b14      	subs	r3, #20
 8009092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3b04      	subs	r3, #4
 800909e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f06f 0202 	mvn.w	r2, #2
 80090a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3b20      	subs	r3, #32
 80090ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090ae:	68fb      	ldr	r3, [r7, #12]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	080090c1 	.word	0x080090c1

080090c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090ca:	4b15      	ldr	r3, [pc, #84]	@ (8009120 <prvTaskExitError+0x60>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d2:	d00d      	beq.n	80090f0 <prvTaskExitError+0x30>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d8:	b672      	cpsid	i
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	b662      	cpsie	i
 80090e8:	60fb      	str	r3, [r7, #12]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <prvTaskExitError+0x2c>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	b672      	cpsid	i
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	b662      	cpsie	i
 8009104:	60bb      	str	r3, [r7, #8]
}
 8009106:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009108:	bf00      	nop
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0fc      	beq.n	800910a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	20000010 	.word	0x20000010
	...

08009130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009130:	4b07      	ldr	r3, [pc, #28]	@ (8009150 <pxCurrentTCBConst2>)
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	6808      	ldr	r0, [r1, #0]
 8009136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	f380 8809 	msr	PSP, r0
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f04f 0000 	mov.w	r0, #0
 8009146:	f380 8811 	msr	BASEPRI, r0
 800914a:	4770      	bx	lr
 800914c:	f3af 8000 	nop.w

08009150 <pxCurrentTCBConst2>:
 8009150:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop

08009158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009158:	4808      	ldr	r0, [pc, #32]	@ (800917c <prvPortStartFirstTask+0x24>)
 800915a:	6800      	ldr	r0, [r0, #0]
 800915c:	6800      	ldr	r0, [r0, #0]
 800915e:	f380 8808 	msr	MSP, r0
 8009162:	f04f 0000 	mov.w	r0, #0
 8009166:	f380 8814 	msr	CONTROL, r0
 800916a:	b662      	cpsie	i
 800916c:	b661      	cpsie	f
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	df00      	svc	0
 8009178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800917a:	bf00      	nop
 800917c:	e000ed08 	.word	0xe000ed08

08009180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009186:	4b37      	ldr	r3, [pc, #220]	@ (8009264 <xPortStartScheduler+0xe4>)
 8009188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	22ff      	movs	r2, #255	@ 0xff
 8009196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	b2db      	uxtb	r3, r3
 800919e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009268 <xPortStartScheduler+0xe8>)
 80091ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091ae:	4b2f      	ldr	r3, [pc, #188]	@ (800926c <xPortStartScheduler+0xec>)
 80091b0:	2207      	movs	r2, #7
 80091b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091b4:	e009      	b.n	80091ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80091b6:	4b2d      	ldr	r3, [pc, #180]	@ (800926c <xPortStartScheduler+0xec>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	4a2b      	ldr	r2, [pc, #172]	@ (800926c <xPortStartScheduler+0xec>)
 80091be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091d2:	2b80      	cmp	r3, #128	@ 0x80
 80091d4:	d0ef      	beq.n	80091b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091d6:	4b25      	ldr	r3, [pc, #148]	@ (800926c <xPortStartScheduler+0xec>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f1c3 0307 	rsb	r3, r3, #7
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d00d      	beq.n	80091fe <xPortStartScheduler+0x7e>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e6:	b672      	cpsid	i
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	b662      	cpsie	i
 80091f6:	60bb      	str	r3, [r7, #8]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091fe:	4b1b      	ldr	r3, [pc, #108]	@ (800926c <xPortStartScheduler+0xec>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	4a19      	ldr	r2, [pc, #100]	@ (800926c <xPortStartScheduler+0xec>)
 8009206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009208:	4b18      	ldr	r3, [pc, #96]	@ (800926c <xPortStartScheduler+0xec>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009210:	4a16      	ldr	r2, [pc, #88]	@ (800926c <xPortStartScheduler+0xec>)
 8009212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	b2da      	uxtb	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800921c:	4b14      	ldr	r3, [pc, #80]	@ (8009270 <xPortStartScheduler+0xf0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a13      	ldr	r2, [pc, #76]	@ (8009270 <xPortStartScheduler+0xf0>)
 8009222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009228:	4b11      	ldr	r3, [pc, #68]	@ (8009270 <xPortStartScheduler+0xf0>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a10      	ldr	r2, [pc, #64]	@ (8009270 <xPortStartScheduler+0xf0>)
 800922e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009234:	f000 f8dc 	bl	80093f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009238:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <xPortStartScheduler+0xf4>)
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800923e:	f000 f8fb 	bl	8009438 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009242:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <xPortStartScheduler+0xf8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a0c      	ldr	r2, [pc, #48]	@ (8009278 <xPortStartScheduler+0xf8>)
 8009248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800924c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800924e:	f7ff ff83 	bl	8009158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009252:	f7fe fe1f 	bl	8007e94 <vTaskSwitchContext>
	prvTaskExitError();
 8009256:	f7ff ff33 	bl	80090c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	e000e400 	.word	0xe000e400
 8009268:	200010d8 	.word	0x200010d8
 800926c:	200010dc 	.word	0x200010dc
 8009270:	e000ed20 	.word	0xe000ed20
 8009274:	20000010 	.word	0x20000010
 8009278:	e000ef34 	.word	0xe000ef34

0800927c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009286:	b672      	cpsid	i
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	b662      	cpsie	i
 8009296:	607b      	str	r3, [r7, #4]
}
 8009298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800929a:	4b11      	ldr	r3, [pc, #68]	@ (80092e0 <vPortEnterCritical+0x64>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3301      	adds	r3, #1
 80092a0:	4a0f      	ldr	r2, [pc, #60]	@ (80092e0 <vPortEnterCritical+0x64>)
 80092a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092a4:	4b0e      	ldr	r3, [pc, #56]	@ (80092e0 <vPortEnterCritical+0x64>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d112      	bne.n	80092d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092ac:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <vPortEnterCritical+0x68>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00d      	beq.n	80092d2 <vPortEnterCritical+0x56>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	b672      	cpsid	i
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	b662      	cpsie	i
 80092ca:	603b      	str	r3, [r7, #0]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <vPortEnterCritical+0x52>
	}
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20000010 	.word	0x20000010
 80092e4:	e000ed04 	.word	0xe000ed04

080092e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092ee:	4b13      	ldr	r3, [pc, #76]	@ (800933c <vPortExitCritical+0x54>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10d      	bne.n	8009312 <vPortExitCritical+0x2a>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fa:	b672      	cpsid	i
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	b662      	cpsie	i
 800930a:	607b      	str	r3, [r7, #4]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009312:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <vPortExitCritical+0x54>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3b01      	subs	r3, #1
 8009318:	4a08      	ldr	r2, [pc, #32]	@ (800933c <vPortExitCritical+0x54>)
 800931a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800931c:	4b07      	ldr	r3, [pc, #28]	@ (800933c <vPortExitCritical+0x54>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d105      	bne.n	8009330 <vPortExitCritical+0x48>
 8009324:	2300      	movs	r3, #0
 8009326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f383 8811 	msr	BASEPRI, r3
}
 800932e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	20000010 	.word	0x20000010

08009340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009340:	f3ef 8009 	mrs	r0, PSP
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <pxCurrentTCBConst>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	f01e 0f10 	tst.w	lr, #16
 8009350:	bf08      	it	eq
 8009352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	6010      	str	r0, [r2, #0]
 800935c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009364:	b672      	cpsid	i
 8009366:	f380 8811 	msr	BASEPRI, r0
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	b662      	cpsie	i
 8009374:	f7fe fd8e 	bl	8007e94 <vTaskSwitchContext>
 8009378:	f04f 0000 	mov.w	r0, #0
 800937c:	f380 8811 	msr	BASEPRI, r0
 8009380:	bc09      	pop	{r0, r3}
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	6808      	ldr	r0, [r1, #0]
 8009386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938a:	f01e 0f10 	tst.w	lr, #16
 800938e:	bf08      	it	eq
 8009390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009394:	f380 8809 	msr	PSP, r0
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop

080093a0 <pxCurrentTCBConst>:
 80093a0:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop

080093a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	b672      	cpsid	i
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	b662      	cpsie	i
 80093c2:	607b      	str	r3, [r7, #4]
}
 80093c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093c6:	f7fe fca9 	bl	8007d1c <xTaskIncrementTick>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093d0:	4b06      	ldr	r3, [pc, #24]	@ (80093ec <SysTick_Handler+0x44>)
 80093d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f383 8811 	msr	BASEPRI, r3
}
 80093e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009424 <vPortSetupTimerInterrupt+0x34>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <vPortSetupTimerInterrupt+0x38>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009400:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <vPortSetupTimerInterrupt+0x3c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a0a      	ldr	r2, [pc, #40]	@ (8009430 <vPortSetupTimerInterrupt+0x40>)
 8009406:	fba2 2303 	umull	r2, r3, r2, r3
 800940a:	099b      	lsrs	r3, r3, #6
 800940c:	4a09      	ldr	r2, [pc, #36]	@ (8009434 <vPortSetupTimerInterrupt+0x44>)
 800940e:	3b01      	subs	r3, #1
 8009410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009412:	4b04      	ldr	r3, [pc, #16]	@ (8009424 <vPortSetupTimerInterrupt+0x34>)
 8009414:	2207      	movs	r2, #7
 8009416:	601a      	str	r2, [r3, #0]
}
 8009418:	bf00      	nop
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	e000e010 	.word	0xe000e010
 8009428:	e000e018 	.word	0xe000e018
 800942c:	20000004 	.word	0x20000004
 8009430:	10624dd3 	.word	0x10624dd3
 8009434:	e000e014 	.word	0xe000e014

08009438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009438:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009448 <vPortEnableVFP+0x10>
 800943c:	6801      	ldr	r1, [r0, #0]
 800943e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009442:	6001      	str	r1, [r0, #0]
 8009444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009446:	bf00      	nop
 8009448:	e000ed88 	.word	0xe000ed88

0800944c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009452:	f3ef 8305 	mrs	r3, IPSR
 8009456:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b0f      	cmp	r3, #15
 800945c:	d917      	bls.n	800948e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800945e:	4a1a      	ldr	r2, [pc, #104]	@ (80094c8 <vPortValidateInterruptPriority+0x7c>)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009468:	4b18      	ldr	r3, [pc, #96]	@ (80094cc <vPortValidateInterruptPriority+0x80>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	7afa      	ldrb	r2, [r7, #11]
 800946e:	429a      	cmp	r2, r3
 8009470:	d20d      	bcs.n	800948e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	b672      	cpsid	i
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	b662      	cpsie	i
 8009486:	607b      	str	r3, [r7, #4]
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	e7fd      	b.n	800948a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800948e:	4b10      	ldr	r3, [pc, #64]	@ (80094d0 <vPortValidateInterruptPriority+0x84>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009496:	4b0f      	ldr	r3, [pc, #60]	@ (80094d4 <vPortValidateInterruptPriority+0x88>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d90d      	bls.n	80094ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	b672      	cpsid	i
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	b662      	cpsie	i
 80094b2:	603b      	str	r3, [r7, #0]
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	e7fd      	b.n	80094b6 <vPortValidateInterruptPriority+0x6a>
	}
 80094ba:	bf00      	nop
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	e000e3f0 	.word	0xe000e3f0
 80094cc:	200010d8 	.word	0x200010d8
 80094d0:	e000ed0c 	.word	0xe000ed0c
 80094d4:	200010dc 	.word	0x200010dc

080094d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	@ 0x28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094e4:	f7fe fb5c 	bl	8007ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094e8:	4b5d      	ldr	r3, [pc, #372]	@ (8009660 <pvPortMalloc+0x188>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094f0:	f000 f920 	bl	8009734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094f4:	4b5b      	ldr	r3, [pc, #364]	@ (8009664 <pvPortMalloc+0x18c>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4013      	ands	r3, r2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f040 8094 	bne.w	800962a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d020      	beq.n	800954a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009508:	2208      	movs	r2, #8
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	2b00      	cmp	r3, #0
 8009518:	d017      	beq.n	800954a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f023 0307 	bic.w	r3, r3, #7
 8009520:	3308      	adds	r3, #8
 8009522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00d      	beq.n	800954a <pvPortMalloc+0x72>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	b672      	cpsid	i
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	b662      	cpsie	i
 8009542:	617b      	str	r3, [r7, #20]
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d06c      	beq.n	800962a <pvPortMalloc+0x152>
 8009550:	4b45      	ldr	r3, [pc, #276]	@ (8009668 <pvPortMalloc+0x190>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	429a      	cmp	r2, r3
 8009558:	d867      	bhi.n	800962a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800955a:	4b44      	ldr	r3, [pc, #272]	@ (800966c <pvPortMalloc+0x194>)
 800955c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800955e:	4b43      	ldr	r3, [pc, #268]	@ (800966c <pvPortMalloc+0x194>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009564:	e004      	b.n	8009570 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d903      	bls.n	8009582 <pvPortMalloc+0xaa>
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1f1      	bne.n	8009566 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009582:	4b37      	ldr	r3, [pc, #220]	@ (8009660 <pvPortMalloc+0x188>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009588:	429a      	cmp	r2, r3
 800958a:	d04e      	beq.n	800962a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2208      	movs	r2, #8
 8009592:	4413      	add	r3, r2
 8009594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	1ad2      	subs	r2, r2, r3
 80095a6:	2308      	movs	r3, #8
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d922      	bls.n	80095f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00d      	beq.n	80095dc <pvPortMalloc+0x104>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	b672      	cpsid	i
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	b662      	cpsie	i
 80095d4:	613b      	str	r3, [r7, #16]
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	1ad2      	subs	r2, r2, r3
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095ee:	69b8      	ldr	r0, [r7, #24]
 80095f0:	f000 f902 	bl	80097f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009668 <pvPortMalloc+0x190>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009668 <pvPortMalloc+0x190>)
 8009600:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009602:	4b19      	ldr	r3, [pc, #100]	@ (8009668 <pvPortMalloc+0x190>)
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b1a      	ldr	r3, [pc, #104]	@ (8009670 <pvPortMalloc+0x198>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d203      	bcs.n	8009616 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800960e:	4b16      	ldr	r3, [pc, #88]	@ (8009668 <pvPortMalloc+0x190>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a17      	ldr	r2, [pc, #92]	@ (8009670 <pvPortMalloc+0x198>)
 8009614:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	4b12      	ldr	r3, [pc, #72]	@ (8009664 <pvPortMalloc+0x18c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	431a      	orrs	r2, r3
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800962a:	f7fe fac7 	bl	8007bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f003 0307 	and.w	r3, r3, #7
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00d      	beq.n	8009654 <pvPortMalloc+0x17c>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	b672      	cpsid	i
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	b662      	cpsie	i
 800964c:	60fb      	str	r3, [r7, #12]
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <pvPortMalloc+0x178>
	return pvReturn;
 8009654:	69fb      	ldr	r3, [r7, #28]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3728      	adds	r7, #40	@ 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20004ce8 	.word	0x20004ce8
 8009664:	20004cf4 	.word	0x20004cf4
 8009668:	20004cec 	.word	0x20004cec
 800966c:	20004ce0 	.word	0x20004ce0
 8009670:	20004cf0 	.word	0x20004cf0

08009674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d04e      	beq.n	8009724 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009686:	2308      	movs	r3, #8
 8009688:	425b      	negs	r3, r3
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	4b24      	ldr	r3, [pc, #144]	@ (800972c <vPortFree+0xb8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4013      	ands	r3, r2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10d      	bne.n	80096be <vPortFree+0x4a>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	b672      	cpsid	i
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	b662      	cpsie	i
 80096b6:	60fb      	str	r3, [r7, #12]
}
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	e7fd      	b.n	80096ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00d      	beq.n	80096e2 <vPortFree+0x6e>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	b672      	cpsid	i
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	b662      	cpsie	i
 80096da:	60bb      	str	r3, [r7, #8]
}
 80096dc:	bf00      	nop
 80096de:	bf00      	nop
 80096e0:	e7fd      	b.n	80096de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	4b11      	ldr	r3, [pc, #68]	@ (800972c <vPortFree+0xb8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4013      	ands	r3, r2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d019      	beq.n	8009724 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d115      	bne.n	8009724 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b0b      	ldr	r3, [pc, #44]	@ (800972c <vPortFree+0xb8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	43db      	mvns	r3, r3
 8009702:	401a      	ands	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009708:	f7fe fa4a 	bl	8007ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	4b07      	ldr	r3, [pc, #28]	@ (8009730 <vPortFree+0xbc>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4413      	add	r3, r2
 8009716:	4a06      	ldr	r2, [pc, #24]	@ (8009730 <vPortFree+0xbc>)
 8009718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800971a:	6938      	ldr	r0, [r7, #16]
 800971c:	f000 f86c 	bl	80097f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009720:	f7fe fa4c 	bl	8007bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009724:	bf00      	nop
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20004cf4 	.word	0x20004cf4
 8009730:	20004cec 	.word	0x20004cec

08009734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800973a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800973e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009740:	4b27      	ldr	r3, [pc, #156]	@ (80097e0 <prvHeapInit+0xac>)
 8009742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00c      	beq.n	8009768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3307      	adds	r3, #7
 8009752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f023 0307 	bic.w	r3, r3, #7
 800975a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	4a1f      	ldr	r2, [pc, #124]	@ (80097e0 <prvHeapInit+0xac>)
 8009764:	4413      	add	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800976c:	4a1d      	ldr	r2, [pc, #116]	@ (80097e4 <prvHeapInit+0xb0>)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009772:	4b1c      	ldr	r3, [pc, #112]	@ (80097e4 <prvHeapInit+0xb0>)
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	4413      	add	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009780:	2208      	movs	r2, #8
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0307 	bic.w	r3, r3, #7
 800978e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4a15      	ldr	r2, [pc, #84]	@ (80097e8 <prvHeapInit+0xb4>)
 8009794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009796:	4b14      	ldr	r3, [pc, #80]	@ (80097e8 <prvHeapInit+0xb4>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800979e:	4b12      	ldr	r3, [pc, #72]	@ (80097e8 <prvHeapInit+0xb4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097b4:	4b0c      	ldr	r3, [pc, #48]	@ (80097e8 <prvHeapInit+0xb4>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	4a0a      	ldr	r2, [pc, #40]	@ (80097ec <prvHeapInit+0xb8>)
 80097c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	4a09      	ldr	r2, [pc, #36]	@ (80097f0 <prvHeapInit+0xbc>)
 80097ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097cc:	4b09      	ldr	r3, [pc, #36]	@ (80097f4 <prvHeapInit+0xc0>)
 80097ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80097d2:	601a      	str	r2, [r3, #0]
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	200010e0 	.word	0x200010e0
 80097e4:	20004ce0 	.word	0x20004ce0
 80097e8:	20004ce8 	.word	0x20004ce8
 80097ec:	20004cf0 	.word	0x20004cf0
 80097f0:	20004cec 	.word	0x20004cec
 80097f4:	20004cf4 	.word	0x20004cf4

080097f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009800:	4b28      	ldr	r3, [pc, #160]	@ (80098a4 <prvInsertBlockIntoFreeList+0xac>)
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e002      	b.n	800980c <prvInsertBlockIntoFreeList+0x14>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	429a      	cmp	r2, r3
 8009814:	d8f7      	bhi.n	8009806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	4413      	add	r3, r2
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	429a      	cmp	r2, r3
 8009826:	d108      	bne.n	800983a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	441a      	add	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	441a      	add	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d118      	bne.n	8009880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b15      	ldr	r3, [pc, #84]	@ (80098a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d00d      	beq.n	8009876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	441a      	add	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e008      	b.n	8009888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009876:	4b0c      	ldr	r3, [pc, #48]	@ (80098a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e003      	b.n	8009888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d002      	beq.n	8009896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20004ce0 	.word	0x20004ce0
 80098a8:	20004ce8 	.word	0x20004ce8

080098ac <siprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b500      	push	{lr}
 80098b0:	b09c      	sub	sp, #112	@ 0x70
 80098b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80098b4:	9002      	str	r0, [sp, #8]
 80098b6:	9006      	str	r0, [sp, #24]
 80098b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098bc:	4809      	ldr	r0, [pc, #36]	@ (80098e4 <siprintf+0x38>)
 80098be:	9107      	str	r1, [sp, #28]
 80098c0:	9104      	str	r1, [sp, #16]
 80098c2:	4909      	ldr	r1, [pc, #36]	@ (80098e8 <siprintf+0x3c>)
 80098c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c8:	9105      	str	r1, [sp, #20]
 80098ca:	6800      	ldr	r0, [r0, #0]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	a902      	add	r1, sp, #8
 80098d0:	f000 f9f8 	bl	8009cc4 <_svfiprintf_r>
 80098d4:	9b02      	ldr	r3, [sp, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	b01c      	add	sp, #112	@ 0x70
 80098dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e0:	b003      	add	sp, #12
 80098e2:	4770      	bx	lr
 80098e4:	20000014 	.word	0x20000014
 80098e8:	ffff0208 	.word	0xffff0208

080098ec <memset>:
 80098ec:	4402      	add	r2, r0
 80098ee:	4603      	mov	r3, r0
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d100      	bne.n	80098f6 <memset+0xa>
 80098f4:	4770      	bx	lr
 80098f6:	f803 1b01 	strb.w	r1, [r3], #1
 80098fa:	e7f9      	b.n	80098f0 <memset+0x4>

080098fc <_reclaim_reent>:
 80098fc:	4b29      	ldr	r3, [pc, #164]	@ (80099a4 <_reclaim_reent+0xa8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4283      	cmp	r3, r0
 8009902:	b570      	push	{r4, r5, r6, lr}
 8009904:	4604      	mov	r4, r0
 8009906:	d04b      	beq.n	80099a0 <_reclaim_reent+0xa4>
 8009908:	69c3      	ldr	r3, [r0, #28]
 800990a:	b1ab      	cbz	r3, 8009938 <_reclaim_reent+0x3c>
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	b16b      	cbz	r3, 800992c <_reclaim_reent+0x30>
 8009910:	2500      	movs	r5, #0
 8009912:	69e3      	ldr	r3, [r4, #28]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	5959      	ldr	r1, [r3, r5]
 8009918:	2900      	cmp	r1, #0
 800991a:	d13b      	bne.n	8009994 <_reclaim_reent+0x98>
 800991c:	3504      	adds	r5, #4
 800991e:	2d80      	cmp	r5, #128	@ 0x80
 8009920:	d1f7      	bne.n	8009912 <_reclaim_reent+0x16>
 8009922:	69e3      	ldr	r3, [r4, #28]
 8009924:	4620      	mov	r0, r4
 8009926:	68d9      	ldr	r1, [r3, #12]
 8009928:	f000 f878 	bl	8009a1c <_free_r>
 800992c:	69e3      	ldr	r3, [r4, #28]
 800992e:	6819      	ldr	r1, [r3, #0]
 8009930:	b111      	cbz	r1, 8009938 <_reclaim_reent+0x3c>
 8009932:	4620      	mov	r0, r4
 8009934:	f000 f872 	bl	8009a1c <_free_r>
 8009938:	6961      	ldr	r1, [r4, #20]
 800993a:	b111      	cbz	r1, 8009942 <_reclaim_reent+0x46>
 800993c:	4620      	mov	r0, r4
 800993e:	f000 f86d 	bl	8009a1c <_free_r>
 8009942:	69e1      	ldr	r1, [r4, #28]
 8009944:	b111      	cbz	r1, 800994c <_reclaim_reent+0x50>
 8009946:	4620      	mov	r0, r4
 8009948:	f000 f868 	bl	8009a1c <_free_r>
 800994c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800994e:	b111      	cbz	r1, 8009956 <_reclaim_reent+0x5a>
 8009950:	4620      	mov	r0, r4
 8009952:	f000 f863 	bl	8009a1c <_free_r>
 8009956:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009958:	b111      	cbz	r1, 8009960 <_reclaim_reent+0x64>
 800995a:	4620      	mov	r0, r4
 800995c:	f000 f85e 	bl	8009a1c <_free_r>
 8009960:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009962:	b111      	cbz	r1, 800996a <_reclaim_reent+0x6e>
 8009964:	4620      	mov	r0, r4
 8009966:	f000 f859 	bl	8009a1c <_free_r>
 800996a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800996c:	b111      	cbz	r1, 8009974 <_reclaim_reent+0x78>
 800996e:	4620      	mov	r0, r4
 8009970:	f000 f854 	bl	8009a1c <_free_r>
 8009974:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009976:	b111      	cbz	r1, 800997e <_reclaim_reent+0x82>
 8009978:	4620      	mov	r0, r4
 800997a:	f000 f84f 	bl	8009a1c <_free_r>
 800997e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009980:	b111      	cbz	r1, 8009988 <_reclaim_reent+0x8c>
 8009982:	4620      	mov	r0, r4
 8009984:	f000 f84a 	bl	8009a1c <_free_r>
 8009988:	6a23      	ldr	r3, [r4, #32]
 800998a:	b14b      	cbz	r3, 80099a0 <_reclaim_reent+0xa4>
 800998c:	4620      	mov	r0, r4
 800998e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009992:	4718      	bx	r3
 8009994:	680e      	ldr	r6, [r1, #0]
 8009996:	4620      	mov	r0, r4
 8009998:	f000 f840 	bl	8009a1c <_free_r>
 800999c:	4631      	mov	r1, r6
 800999e:	e7bb      	b.n	8009918 <_reclaim_reent+0x1c>
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
 80099a2:	bf00      	nop
 80099a4:	20000014 	.word	0x20000014

080099a8 <__errno>:
 80099a8:	4b01      	ldr	r3, [pc, #4]	@ (80099b0 <__errno+0x8>)
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20000014 	.word	0x20000014

080099b4 <__libc_init_array>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	4d0d      	ldr	r5, [pc, #52]	@ (80099ec <__libc_init_array+0x38>)
 80099b8:	4c0d      	ldr	r4, [pc, #52]	@ (80099f0 <__libc_init_array+0x3c>)
 80099ba:	1b64      	subs	r4, r4, r5
 80099bc:	10a4      	asrs	r4, r4, #2
 80099be:	2600      	movs	r6, #0
 80099c0:	42a6      	cmp	r6, r4
 80099c2:	d109      	bne.n	80099d8 <__libc_init_array+0x24>
 80099c4:	4d0b      	ldr	r5, [pc, #44]	@ (80099f4 <__libc_init_array+0x40>)
 80099c6:	4c0c      	ldr	r4, [pc, #48]	@ (80099f8 <__libc_init_array+0x44>)
 80099c8:	f000 fc66 	bl	800a298 <_init>
 80099cc:	1b64      	subs	r4, r4, r5
 80099ce:	10a4      	asrs	r4, r4, #2
 80099d0:	2600      	movs	r6, #0
 80099d2:	42a6      	cmp	r6, r4
 80099d4:	d105      	bne.n	80099e2 <__libc_init_array+0x2e>
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099dc:	4798      	blx	r3
 80099de:	3601      	adds	r6, #1
 80099e0:	e7ee      	b.n	80099c0 <__libc_init_array+0xc>
 80099e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e6:	4798      	blx	r3
 80099e8:	3601      	adds	r6, #1
 80099ea:	e7f2      	b.n	80099d2 <__libc_init_array+0x1e>
 80099ec:	0800a5b0 	.word	0x0800a5b0
 80099f0:	0800a5b0 	.word	0x0800a5b0
 80099f4:	0800a5b0 	.word	0x0800a5b0
 80099f8:	0800a5b4 	.word	0x0800a5b4

080099fc <__retarget_lock_acquire_recursive>:
 80099fc:	4770      	bx	lr

080099fe <__retarget_lock_release_recursive>:
 80099fe:	4770      	bx	lr

08009a00 <memcpy>:
 8009a00:	440a      	add	r2, r1
 8009a02:	4291      	cmp	r1, r2
 8009a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a08:	d100      	bne.n	8009a0c <memcpy+0xc>
 8009a0a:	4770      	bx	lr
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a16:	4291      	cmp	r1, r2
 8009a18:	d1f9      	bne.n	8009a0e <memcpy+0xe>
 8009a1a:	bd10      	pop	{r4, pc}

08009a1c <_free_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4605      	mov	r5, r0
 8009a20:	2900      	cmp	r1, #0
 8009a22:	d041      	beq.n	8009aa8 <_free_r+0x8c>
 8009a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a28:	1f0c      	subs	r4, r1, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfb8      	it	lt
 8009a2e:	18e4      	addlt	r4, r4, r3
 8009a30:	f000 f8e0 	bl	8009bf4 <__malloc_lock>
 8009a34:	4a1d      	ldr	r2, [pc, #116]	@ (8009aac <_free_r+0x90>)
 8009a36:	6813      	ldr	r3, [r2, #0]
 8009a38:	b933      	cbnz	r3, 8009a48 <_free_r+0x2c>
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	6014      	str	r4, [r2, #0]
 8009a3e:	4628      	mov	r0, r5
 8009a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a44:	f000 b8dc 	b.w	8009c00 <__malloc_unlock>
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d908      	bls.n	8009a5e <_free_r+0x42>
 8009a4c:	6820      	ldr	r0, [r4, #0]
 8009a4e:	1821      	adds	r1, r4, r0
 8009a50:	428b      	cmp	r3, r1
 8009a52:	bf01      	itttt	eq
 8009a54:	6819      	ldreq	r1, [r3, #0]
 8009a56:	685b      	ldreq	r3, [r3, #4]
 8009a58:	1809      	addeq	r1, r1, r0
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	e7ed      	b.n	8009a3a <_free_r+0x1e>
 8009a5e:	461a      	mov	r2, r3
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	b10b      	cbz	r3, 8009a68 <_free_r+0x4c>
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	d9fa      	bls.n	8009a5e <_free_r+0x42>
 8009a68:	6811      	ldr	r1, [r2, #0]
 8009a6a:	1850      	adds	r0, r2, r1
 8009a6c:	42a0      	cmp	r0, r4
 8009a6e:	d10b      	bne.n	8009a88 <_free_r+0x6c>
 8009a70:	6820      	ldr	r0, [r4, #0]
 8009a72:	4401      	add	r1, r0
 8009a74:	1850      	adds	r0, r2, r1
 8009a76:	4283      	cmp	r3, r0
 8009a78:	6011      	str	r1, [r2, #0]
 8009a7a:	d1e0      	bne.n	8009a3e <_free_r+0x22>
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	6053      	str	r3, [r2, #4]
 8009a82:	4408      	add	r0, r1
 8009a84:	6010      	str	r0, [r2, #0]
 8009a86:	e7da      	b.n	8009a3e <_free_r+0x22>
 8009a88:	d902      	bls.n	8009a90 <_free_r+0x74>
 8009a8a:	230c      	movs	r3, #12
 8009a8c:	602b      	str	r3, [r5, #0]
 8009a8e:	e7d6      	b.n	8009a3e <_free_r+0x22>
 8009a90:	6820      	ldr	r0, [r4, #0]
 8009a92:	1821      	adds	r1, r4, r0
 8009a94:	428b      	cmp	r3, r1
 8009a96:	bf04      	itt	eq
 8009a98:	6819      	ldreq	r1, [r3, #0]
 8009a9a:	685b      	ldreq	r3, [r3, #4]
 8009a9c:	6063      	str	r3, [r4, #4]
 8009a9e:	bf04      	itt	eq
 8009aa0:	1809      	addeq	r1, r1, r0
 8009aa2:	6021      	streq	r1, [r4, #0]
 8009aa4:	6054      	str	r4, [r2, #4]
 8009aa6:	e7ca      	b.n	8009a3e <_free_r+0x22>
 8009aa8:	bd38      	pop	{r3, r4, r5, pc}
 8009aaa:	bf00      	nop
 8009aac:	20004e3c 	.word	0x20004e3c

08009ab0 <sbrk_aligned>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8009af0 <sbrk_aligned+0x40>)
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	6831      	ldr	r1, [r6, #0]
 8009ab8:	4605      	mov	r5, r0
 8009aba:	b911      	cbnz	r1, 8009ac2 <sbrk_aligned+0x12>
 8009abc:	f000 fba6 	bl	800a20c <_sbrk_r>
 8009ac0:	6030      	str	r0, [r6, #0]
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f000 fba1 	bl	800a20c <_sbrk_r>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	d103      	bne.n	8009ad6 <sbrk_aligned+0x26>
 8009ace:	f04f 34ff 	mov.w	r4, #4294967295
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	bd70      	pop	{r4, r5, r6, pc}
 8009ad6:	1cc4      	adds	r4, r0, #3
 8009ad8:	f024 0403 	bic.w	r4, r4, #3
 8009adc:	42a0      	cmp	r0, r4
 8009ade:	d0f8      	beq.n	8009ad2 <sbrk_aligned+0x22>
 8009ae0:	1a21      	subs	r1, r4, r0
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 fb92 	bl	800a20c <_sbrk_r>
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d1f2      	bne.n	8009ad2 <sbrk_aligned+0x22>
 8009aec:	e7ef      	b.n	8009ace <sbrk_aligned+0x1e>
 8009aee:	bf00      	nop
 8009af0:	20004e38 	.word	0x20004e38

08009af4 <_malloc_r>:
 8009af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af8:	1ccd      	adds	r5, r1, #3
 8009afa:	f025 0503 	bic.w	r5, r5, #3
 8009afe:	3508      	adds	r5, #8
 8009b00:	2d0c      	cmp	r5, #12
 8009b02:	bf38      	it	cc
 8009b04:	250c      	movcc	r5, #12
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	4606      	mov	r6, r0
 8009b0a:	db01      	blt.n	8009b10 <_malloc_r+0x1c>
 8009b0c:	42a9      	cmp	r1, r5
 8009b0e:	d904      	bls.n	8009b1a <_malloc_r+0x26>
 8009b10:	230c      	movs	r3, #12
 8009b12:	6033      	str	r3, [r6, #0]
 8009b14:	2000      	movs	r0, #0
 8009b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bf0 <_malloc_r+0xfc>
 8009b1e:	f000 f869 	bl	8009bf4 <__malloc_lock>
 8009b22:	f8d8 3000 	ldr.w	r3, [r8]
 8009b26:	461c      	mov	r4, r3
 8009b28:	bb44      	cbnz	r4, 8009b7c <_malloc_r+0x88>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff ffbf 	bl	8009ab0 <sbrk_aligned>
 8009b32:	1c43      	adds	r3, r0, #1
 8009b34:	4604      	mov	r4, r0
 8009b36:	d158      	bne.n	8009bea <_malloc_r+0xf6>
 8009b38:	f8d8 4000 	ldr.w	r4, [r8]
 8009b3c:	4627      	mov	r7, r4
 8009b3e:	2f00      	cmp	r7, #0
 8009b40:	d143      	bne.n	8009bca <_malloc_r+0xd6>
 8009b42:	2c00      	cmp	r4, #0
 8009b44:	d04b      	beq.n	8009bde <_malloc_r+0xea>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	4639      	mov	r1, r7
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	eb04 0903 	add.w	r9, r4, r3
 8009b50:	f000 fb5c 	bl	800a20c <_sbrk_r>
 8009b54:	4581      	cmp	r9, r0
 8009b56:	d142      	bne.n	8009bde <_malloc_r+0xea>
 8009b58:	6821      	ldr	r1, [r4, #0]
 8009b5a:	1a6d      	subs	r5, r5, r1
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff ffa6 	bl	8009ab0 <sbrk_aligned>
 8009b64:	3001      	adds	r0, #1
 8009b66:	d03a      	beq.n	8009bde <_malloc_r+0xea>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	442b      	add	r3, r5
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	bb62      	cbnz	r2, 8009bd0 <_malloc_r+0xdc>
 8009b76:	f8c8 7000 	str.w	r7, [r8]
 8009b7a:	e00f      	b.n	8009b9c <_malloc_r+0xa8>
 8009b7c:	6822      	ldr	r2, [r4, #0]
 8009b7e:	1b52      	subs	r2, r2, r5
 8009b80:	d420      	bmi.n	8009bc4 <_malloc_r+0xd0>
 8009b82:	2a0b      	cmp	r2, #11
 8009b84:	d917      	bls.n	8009bb6 <_malloc_r+0xc2>
 8009b86:	1961      	adds	r1, r4, r5
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	6025      	str	r5, [r4, #0]
 8009b8c:	bf18      	it	ne
 8009b8e:	6059      	strne	r1, [r3, #4]
 8009b90:	6863      	ldr	r3, [r4, #4]
 8009b92:	bf08      	it	eq
 8009b94:	f8c8 1000 	streq.w	r1, [r8]
 8009b98:	5162      	str	r2, [r4, r5]
 8009b9a:	604b      	str	r3, [r1, #4]
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f000 f82f 	bl	8009c00 <__malloc_unlock>
 8009ba2:	f104 000b 	add.w	r0, r4, #11
 8009ba6:	1d23      	adds	r3, r4, #4
 8009ba8:	f020 0007 	bic.w	r0, r0, #7
 8009bac:	1ac2      	subs	r2, r0, r3
 8009bae:	bf1c      	itt	ne
 8009bb0:	1a1b      	subne	r3, r3, r0
 8009bb2:	50a3      	strne	r3, [r4, r2]
 8009bb4:	e7af      	b.n	8009b16 <_malloc_r+0x22>
 8009bb6:	6862      	ldr	r2, [r4, #4]
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	bf0c      	ite	eq
 8009bbc:	f8c8 2000 	streq.w	r2, [r8]
 8009bc0:	605a      	strne	r2, [r3, #4]
 8009bc2:	e7eb      	b.n	8009b9c <_malloc_r+0xa8>
 8009bc4:	4623      	mov	r3, r4
 8009bc6:	6864      	ldr	r4, [r4, #4]
 8009bc8:	e7ae      	b.n	8009b28 <_malloc_r+0x34>
 8009bca:	463c      	mov	r4, r7
 8009bcc:	687f      	ldr	r7, [r7, #4]
 8009bce:	e7b6      	b.n	8009b3e <_malloc_r+0x4a>
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	d1fb      	bne.n	8009bd0 <_malloc_r+0xdc>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	6053      	str	r3, [r2, #4]
 8009bdc:	e7de      	b.n	8009b9c <_malloc_r+0xa8>
 8009bde:	230c      	movs	r3, #12
 8009be0:	6033      	str	r3, [r6, #0]
 8009be2:	4630      	mov	r0, r6
 8009be4:	f000 f80c 	bl	8009c00 <__malloc_unlock>
 8009be8:	e794      	b.n	8009b14 <_malloc_r+0x20>
 8009bea:	6005      	str	r5, [r0, #0]
 8009bec:	e7d6      	b.n	8009b9c <_malloc_r+0xa8>
 8009bee:	bf00      	nop
 8009bf0:	20004e3c 	.word	0x20004e3c

08009bf4 <__malloc_lock>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	@ (8009bfc <__malloc_lock+0x8>)
 8009bf6:	f7ff bf01 	b.w	80099fc <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20004e34 	.word	0x20004e34

08009c00 <__malloc_unlock>:
 8009c00:	4801      	ldr	r0, [pc, #4]	@ (8009c08 <__malloc_unlock+0x8>)
 8009c02:	f7ff befc 	b.w	80099fe <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	20004e34 	.word	0x20004e34

08009c0c <__ssputs_r>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	688e      	ldr	r6, [r1, #8]
 8009c12:	461f      	mov	r7, r3
 8009c14:	42be      	cmp	r6, r7
 8009c16:	680b      	ldr	r3, [r1, #0]
 8009c18:	4682      	mov	sl, r0
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	4690      	mov	r8, r2
 8009c1e:	d82d      	bhi.n	8009c7c <__ssputs_r+0x70>
 8009c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c28:	d026      	beq.n	8009c78 <__ssputs_r+0x6c>
 8009c2a:	6965      	ldr	r5, [r4, #20]
 8009c2c:	6909      	ldr	r1, [r1, #16]
 8009c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c32:	eba3 0901 	sub.w	r9, r3, r1
 8009c36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c3a:	1c7b      	adds	r3, r7, #1
 8009c3c:	444b      	add	r3, r9
 8009c3e:	106d      	asrs	r5, r5, #1
 8009c40:	429d      	cmp	r5, r3
 8009c42:	bf38      	it	cc
 8009c44:	461d      	movcc	r5, r3
 8009c46:	0553      	lsls	r3, r2, #21
 8009c48:	d527      	bpl.n	8009c9a <__ssputs_r+0x8e>
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	f7ff ff52 	bl	8009af4 <_malloc_r>
 8009c50:	4606      	mov	r6, r0
 8009c52:	b360      	cbz	r0, 8009cae <__ssputs_r+0xa2>
 8009c54:	6921      	ldr	r1, [r4, #16]
 8009c56:	464a      	mov	r2, r9
 8009c58:	f7ff fed2 	bl	8009a00 <memcpy>
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	6126      	str	r6, [r4, #16]
 8009c6a:	6165      	str	r5, [r4, #20]
 8009c6c:	444e      	add	r6, r9
 8009c6e:	eba5 0509 	sub.w	r5, r5, r9
 8009c72:	6026      	str	r6, [r4, #0]
 8009c74:	60a5      	str	r5, [r4, #8]
 8009c76:	463e      	mov	r6, r7
 8009c78:	42be      	cmp	r6, r7
 8009c7a:	d900      	bls.n	8009c7e <__ssputs_r+0x72>
 8009c7c:	463e      	mov	r6, r7
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	4632      	mov	r2, r6
 8009c82:	4641      	mov	r1, r8
 8009c84:	f000 faa8 	bl	800a1d8 <memmove>
 8009c88:	68a3      	ldr	r3, [r4, #8]
 8009c8a:	1b9b      	subs	r3, r3, r6
 8009c8c:	60a3      	str	r3, [r4, #8]
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	4433      	add	r3, r6
 8009c92:	6023      	str	r3, [r4, #0]
 8009c94:	2000      	movs	r0, #0
 8009c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	f000 fac6 	bl	800a22c <_realloc_r>
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d1e0      	bne.n	8009c68 <__ssputs_r+0x5c>
 8009ca6:	6921      	ldr	r1, [r4, #16]
 8009ca8:	4650      	mov	r0, sl
 8009caa:	f7ff feb7 	bl	8009a1c <_free_r>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	f8ca 3000 	str.w	r3, [sl]
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	e7e9      	b.n	8009c96 <__ssputs_r+0x8a>
	...

08009cc4 <_svfiprintf_r>:
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	4698      	mov	r8, r3
 8009cca:	898b      	ldrh	r3, [r1, #12]
 8009ccc:	061b      	lsls	r3, r3, #24
 8009cce:	b09d      	sub	sp, #116	@ 0x74
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	d510      	bpl.n	8009cfa <_svfiprintf_r+0x36>
 8009cd8:	690b      	ldr	r3, [r1, #16]
 8009cda:	b973      	cbnz	r3, 8009cfa <_svfiprintf_r+0x36>
 8009cdc:	2140      	movs	r1, #64	@ 0x40
 8009cde:	f7ff ff09 	bl	8009af4 <_malloc_r>
 8009ce2:	6028      	str	r0, [r5, #0]
 8009ce4:	6128      	str	r0, [r5, #16]
 8009ce6:	b930      	cbnz	r0, 8009cf6 <_svfiprintf_r+0x32>
 8009ce8:	230c      	movs	r3, #12
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	b01d      	add	sp, #116	@ 0x74
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	2340      	movs	r3, #64	@ 0x40
 8009cf8:	616b      	str	r3, [r5, #20]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cfe:	2320      	movs	r3, #32
 8009d00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d08:	2330      	movs	r3, #48	@ 0x30
 8009d0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ea8 <_svfiprintf_r+0x1e4>
 8009d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d12:	f04f 0901 	mov.w	r9, #1
 8009d16:	4623      	mov	r3, r4
 8009d18:	469a      	mov	sl, r3
 8009d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d1e:	b10a      	cbz	r2, 8009d24 <_svfiprintf_r+0x60>
 8009d20:	2a25      	cmp	r2, #37	@ 0x25
 8009d22:	d1f9      	bne.n	8009d18 <_svfiprintf_r+0x54>
 8009d24:	ebba 0b04 	subs.w	fp, sl, r4
 8009d28:	d00b      	beq.n	8009d42 <_svfiprintf_r+0x7e>
 8009d2a:	465b      	mov	r3, fp
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4638      	mov	r0, r7
 8009d32:	f7ff ff6b 	bl	8009c0c <__ssputs_r>
 8009d36:	3001      	adds	r0, #1
 8009d38:	f000 80a7 	beq.w	8009e8a <_svfiprintf_r+0x1c6>
 8009d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d3e:	445a      	add	r2, fp
 8009d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d42:	f89a 3000 	ldrb.w	r3, [sl]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 809f 	beq.w	8009e8a <_svfiprintf_r+0x1c6>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d56:	f10a 0a01 	add.w	sl, sl, #1
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	9307      	str	r3, [sp, #28]
 8009d5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d62:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d64:	4654      	mov	r4, sl
 8009d66:	2205      	movs	r2, #5
 8009d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6c:	484e      	ldr	r0, [pc, #312]	@ (8009ea8 <_svfiprintf_r+0x1e4>)
 8009d6e:	f7f6 fa57 	bl	8000220 <memchr>
 8009d72:	9a04      	ldr	r2, [sp, #16]
 8009d74:	b9d8      	cbnz	r0, 8009dae <_svfiprintf_r+0xea>
 8009d76:	06d0      	lsls	r0, r2, #27
 8009d78:	bf44      	itt	mi
 8009d7a:	2320      	movmi	r3, #32
 8009d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d80:	0711      	lsls	r1, r2, #28
 8009d82:	bf44      	itt	mi
 8009d84:	232b      	movmi	r3, #43	@ 0x2b
 8009d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d90:	d015      	beq.n	8009dbe <_svfiprintf_r+0xfa>
 8009d92:	9a07      	ldr	r2, [sp, #28]
 8009d94:	4654      	mov	r4, sl
 8009d96:	2000      	movs	r0, #0
 8009d98:	f04f 0c0a 	mov.w	ip, #10
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009da2:	3b30      	subs	r3, #48	@ 0x30
 8009da4:	2b09      	cmp	r3, #9
 8009da6:	d94b      	bls.n	8009e40 <_svfiprintf_r+0x17c>
 8009da8:	b1b0      	cbz	r0, 8009dd8 <_svfiprintf_r+0x114>
 8009daa:	9207      	str	r2, [sp, #28]
 8009dac:	e014      	b.n	8009dd8 <_svfiprintf_r+0x114>
 8009dae:	eba0 0308 	sub.w	r3, r0, r8
 8009db2:	fa09 f303 	lsl.w	r3, r9, r3
 8009db6:	4313      	orrs	r3, r2
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	46a2      	mov	sl, r4
 8009dbc:	e7d2      	b.n	8009d64 <_svfiprintf_r+0xa0>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	1d19      	adds	r1, r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	9103      	str	r1, [sp, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfbb      	ittet	lt
 8009dca:	425b      	neglt	r3, r3
 8009dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8009dd0:	9307      	strge	r3, [sp, #28]
 8009dd2:	9307      	strlt	r3, [sp, #28]
 8009dd4:	bfb8      	it	lt
 8009dd6:	9204      	strlt	r2, [sp, #16]
 8009dd8:	7823      	ldrb	r3, [r4, #0]
 8009dda:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ddc:	d10a      	bne.n	8009df4 <_svfiprintf_r+0x130>
 8009dde:	7863      	ldrb	r3, [r4, #1]
 8009de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009de2:	d132      	bne.n	8009e4a <_svfiprintf_r+0x186>
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	1d1a      	adds	r2, r3, #4
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	9203      	str	r2, [sp, #12]
 8009dec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009df0:	3402      	adds	r4, #2
 8009df2:	9305      	str	r3, [sp, #20]
 8009df4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009eb8 <_svfiprintf_r+0x1f4>
 8009df8:	7821      	ldrb	r1, [r4, #0]
 8009dfa:	2203      	movs	r2, #3
 8009dfc:	4650      	mov	r0, sl
 8009dfe:	f7f6 fa0f 	bl	8000220 <memchr>
 8009e02:	b138      	cbz	r0, 8009e14 <_svfiprintf_r+0x150>
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	eba0 000a 	sub.w	r0, r0, sl
 8009e0a:	2240      	movs	r2, #64	@ 0x40
 8009e0c:	4082      	lsls	r2, r0
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	3401      	adds	r4, #1
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e18:	4824      	ldr	r0, [pc, #144]	@ (8009eac <_svfiprintf_r+0x1e8>)
 8009e1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e1e:	2206      	movs	r2, #6
 8009e20:	f7f6 f9fe 	bl	8000220 <memchr>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d036      	beq.n	8009e96 <_svfiprintf_r+0x1d2>
 8009e28:	4b21      	ldr	r3, [pc, #132]	@ (8009eb0 <_svfiprintf_r+0x1ec>)
 8009e2a:	bb1b      	cbnz	r3, 8009e74 <_svfiprintf_r+0x1b0>
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	3307      	adds	r3, #7
 8009e30:	f023 0307 	bic.w	r3, r3, #7
 8009e34:	3308      	adds	r3, #8
 8009e36:	9303      	str	r3, [sp, #12]
 8009e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3a:	4433      	add	r3, r6
 8009e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e3e:	e76a      	b.n	8009d16 <_svfiprintf_r+0x52>
 8009e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e44:	460c      	mov	r4, r1
 8009e46:	2001      	movs	r0, #1
 8009e48:	e7a8      	b.n	8009d9c <_svfiprintf_r+0xd8>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	3401      	adds	r4, #1
 8009e4e:	9305      	str	r3, [sp, #20]
 8009e50:	4619      	mov	r1, r3
 8009e52:	f04f 0c0a 	mov.w	ip, #10
 8009e56:	4620      	mov	r0, r4
 8009e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e5c:	3a30      	subs	r2, #48	@ 0x30
 8009e5e:	2a09      	cmp	r2, #9
 8009e60:	d903      	bls.n	8009e6a <_svfiprintf_r+0x1a6>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0c6      	beq.n	8009df4 <_svfiprintf_r+0x130>
 8009e66:	9105      	str	r1, [sp, #20]
 8009e68:	e7c4      	b.n	8009df4 <_svfiprintf_r+0x130>
 8009e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e6e:	4604      	mov	r4, r0
 8009e70:	2301      	movs	r3, #1
 8009e72:	e7f0      	b.n	8009e56 <_svfiprintf_r+0x192>
 8009e74:	ab03      	add	r3, sp, #12
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	462a      	mov	r2, r5
 8009e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009eb4 <_svfiprintf_r+0x1f0>)
 8009e7c:	a904      	add	r1, sp, #16
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f3af 8000 	nop.w
 8009e84:	1c42      	adds	r2, r0, #1
 8009e86:	4606      	mov	r6, r0
 8009e88:	d1d6      	bne.n	8009e38 <_svfiprintf_r+0x174>
 8009e8a:	89ab      	ldrh	r3, [r5, #12]
 8009e8c:	065b      	lsls	r3, r3, #25
 8009e8e:	f53f af2d 	bmi.w	8009cec <_svfiprintf_r+0x28>
 8009e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e94:	e72c      	b.n	8009cf0 <_svfiprintf_r+0x2c>
 8009e96:	ab03      	add	r3, sp, #12
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	462a      	mov	r2, r5
 8009e9c:	4b05      	ldr	r3, [pc, #20]	@ (8009eb4 <_svfiprintf_r+0x1f0>)
 8009e9e:	a904      	add	r1, sp, #16
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f000 f879 	bl	8009f98 <_printf_i>
 8009ea6:	e7ed      	b.n	8009e84 <_svfiprintf_r+0x1c0>
 8009ea8:	0800a574 	.word	0x0800a574
 8009eac:	0800a57e 	.word	0x0800a57e
 8009eb0:	00000000 	.word	0x00000000
 8009eb4:	08009c0d 	.word	0x08009c0d
 8009eb8:	0800a57a 	.word	0x0800a57a

08009ebc <_printf_common>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	4616      	mov	r6, r2
 8009ec2:	4698      	mov	r8, r3
 8009ec4:	688a      	ldr	r2, [r1, #8]
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	bfb8      	it	lt
 8009ed0:	4613      	movlt	r3, r2
 8009ed2:	6033      	str	r3, [r6, #0]
 8009ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ed8:	4607      	mov	r7, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b10a      	cbz	r2, 8009ee2 <_printf_common+0x26>
 8009ede:	3301      	adds	r3, #1
 8009ee0:	6033      	str	r3, [r6, #0]
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	0699      	lsls	r1, r3, #26
 8009ee6:	bf42      	ittt	mi
 8009ee8:	6833      	ldrmi	r3, [r6, #0]
 8009eea:	3302      	addmi	r3, #2
 8009eec:	6033      	strmi	r3, [r6, #0]
 8009eee:	6825      	ldr	r5, [r4, #0]
 8009ef0:	f015 0506 	ands.w	r5, r5, #6
 8009ef4:	d106      	bne.n	8009f04 <_printf_common+0x48>
 8009ef6:	f104 0a19 	add.w	sl, r4, #25
 8009efa:	68e3      	ldr	r3, [r4, #12]
 8009efc:	6832      	ldr	r2, [r6, #0]
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	42ab      	cmp	r3, r5
 8009f02:	dc26      	bgt.n	8009f52 <_printf_common+0x96>
 8009f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f08:	6822      	ldr	r2, [r4, #0]
 8009f0a:	3b00      	subs	r3, #0
 8009f0c:	bf18      	it	ne
 8009f0e:	2301      	movne	r3, #1
 8009f10:	0692      	lsls	r2, r2, #26
 8009f12:	d42b      	bmi.n	8009f6c <_printf_common+0xb0>
 8009f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f18:	4641      	mov	r1, r8
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	47c8      	blx	r9
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d01e      	beq.n	8009f60 <_printf_common+0xa4>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	6922      	ldr	r2, [r4, #16]
 8009f26:	f003 0306 	and.w	r3, r3, #6
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	bf02      	ittt	eq
 8009f2e:	68e5      	ldreq	r5, [r4, #12]
 8009f30:	6833      	ldreq	r3, [r6, #0]
 8009f32:	1aed      	subeq	r5, r5, r3
 8009f34:	68a3      	ldr	r3, [r4, #8]
 8009f36:	bf0c      	ite	eq
 8009f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f3c:	2500      	movne	r5, #0
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	bfc4      	itt	gt
 8009f42:	1a9b      	subgt	r3, r3, r2
 8009f44:	18ed      	addgt	r5, r5, r3
 8009f46:	2600      	movs	r6, #0
 8009f48:	341a      	adds	r4, #26
 8009f4a:	42b5      	cmp	r5, r6
 8009f4c:	d11a      	bne.n	8009f84 <_printf_common+0xc8>
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e008      	b.n	8009f64 <_printf_common+0xa8>
 8009f52:	2301      	movs	r3, #1
 8009f54:	4652      	mov	r2, sl
 8009f56:	4641      	mov	r1, r8
 8009f58:	4638      	mov	r0, r7
 8009f5a:	47c8      	blx	r9
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d103      	bne.n	8009f68 <_printf_common+0xac>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f68:	3501      	adds	r5, #1
 8009f6a:	e7c6      	b.n	8009efa <_printf_common+0x3e>
 8009f6c:	18e1      	adds	r1, r4, r3
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	2030      	movs	r0, #48	@ 0x30
 8009f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f76:	4422      	add	r2, r4
 8009f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f80:	3302      	adds	r3, #2
 8009f82:	e7c7      	b.n	8009f14 <_printf_common+0x58>
 8009f84:	2301      	movs	r3, #1
 8009f86:	4622      	mov	r2, r4
 8009f88:	4641      	mov	r1, r8
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c8      	blx	r9
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d0e6      	beq.n	8009f60 <_printf_common+0xa4>
 8009f92:	3601      	adds	r6, #1
 8009f94:	e7d9      	b.n	8009f4a <_printf_common+0x8e>
	...

08009f98 <_printf_i>:
 8009f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9c:	7e0f      	ldrb	r7, [r1, #24]
 8009f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fa0:	2f78      	cmp	r7, #120	@ 0x78
 8009fa2:	4691      	mov	r9, r2
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	469a      	mov	sl, r3
 8009faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fae:	d807      	bhi.n	8009fc0 <_printf_i+0x28>
 8009fb0:	2f62      	cmp	r7, #98	@ 0x62
 8009fb2:	d80a      	bhi.n	8009fca <_printf_i+0x32>
 8009fb4:	2f00      	cmp	r7, #0
 8009fb6:	f000 80d2 	beq.w	800a15e <_printf_i+0x1c6>
 8009fba:	2f58      	cmp	r7, #88	@ 0x58
 8009fbc:	f000 80b9 	beq.w	800a132 <_printf_i+0x19a>
 8009fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fc8:	e03a      	b.n	800a040 <_printf_i+0xa8>
 8009fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fce:	2b15      	cmp	r3, #21
 8009fd0:	d8f6      	bhi.n	8009fc0 <_printf_i+0x28>
 8009fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8009fd8 <_printf_i+0x40>)
 8009fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fd8:	0800a031 	.word	0x0800a031
 8009fdc:	0800a045 	.word	0x0800a045
 8009fe0:	08009fc1 	.word	0x08009fc1
 8009fe4:	08009fc1 	.word	0x08009fc1
 8009fe8:	08009fc1 	.word	0x08009fc1
 8009fec:	08009fc1 	.word	0x08009fc1
 8009ff0:	0800a045 	.word	0x0800a045
 8009ff4:	08009fc1 	.word	0x08009fc1
 8009ff8:	08009fc1 	.word	0x08009fc1
 8009ffc:	08009fc1 	.word	0x08009fc1
 800a000:	08009fc1 	.word	0x08009fc1
 800a004:	0800a145 	.word	0x0800a145
 800a008:	0800a06f 	.word	0x0800a06f
 800a00c:	0800a0ff 	.word	0x0800a0ff
 800a010:	08009fc1 	.word	0x08009fc1
 800a014:	08009fc1 	.word	0x08009fc1
 800a018:	0800a167 	.word	0x0800a167
 800a01c:	08009fc1 	.word	0x08009fc1
 800a020:	0800a06f 	.word	0x0800a06f
 800a024:	08009fc1 	.word	0x08009fc1
 800a028:	08009fc1 	.word	0x08009fc1
 800a02c:	0800a107 	.word	0x0800a107
 800a030:	6833      	ldr	r3, [r6, #0]
 800a032:	1d1a      	adds	r2, r3, #4
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6032      	str	r2, [r6, #0]
 800a038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a03c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a040:	2301      	movs	r3, #1
 800a042:	e09d      	b.n	800a180 <_printf_i+0x1e8>
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	6820      	ldr	r0, [r4, #0]
 800a048:	1d19      	adds	r1, r3, #4
 800a04a:	6031      	str	r1, [r6, #0]
 800a04c:	0606      	lsls	r6, r0, #24
 800a04e:	d501      	bpl.n	800a054 <_printf_i+0xbc>
 800a050:	681d      	ldr	r5, [r3, #0]
 800a052:	e003      	b.n	800a05c <_printf_i+0xc4>
 800a054:	0645      	lsls	r5, r0, #25
 800a056:	d5fb      	bpl.n	800a050 <_printf_i+0xb8>
 800a058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a05c:	2d00      	cmp	r5, #0
 800a05e:	da03      	bge.n	800a068 <_printf_i+0xd0>
 800a060:	232d      	movs	r3, #45	@ 0x2d
 800a062:	426d      	negs	r5, r5
 800a064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a068:	4859      	ldr	r0, [pc, #356]	@ (800a1d0 <_printf_i+0x238>)
 800a06a:	230a      	movs	r3, #10
 800a06c:	e011      	b.n	800a092 <_printf_i+0xfa>
 800a06e:	6821      	ldr	r1, [r4, #0]
 800a070:	6833      	ldr	r3, [r6, #0]
 800a072:	0608      	lsls	r0, r1, #24
 800a074:	f853 5b04 	ldr.w	r5, [r3], #4
 800a078:	d402      	bmi.n	800a080 <_printf_i+0xe8>
 800a07a:	0649      	lsls	r1, r1, #25
 800a07c:	bf48      	it	mi
 800a07e:	b2ad      	uxthmi	r5, r5
 800a080:	2f6f      	cmp	r7, #111	@ 0x6f
 800a082:	4853      	ldr	r0, [pc, #332]	@ (800a1d0 <_printf_i+0x238>)
 800a084:	6033      	str	r3, [r6, #0]
 800a086:	bf14      	ite	ne
 800a088:	230a      	movne	r3, #10
 800a08a:	2308      	moveq	r3, #8
 800a08c:	2100      	movs	r1, #0
 800a08e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a092:	6866      	ldr	r6, [r4, #4]
 800a094:	60a6      	str	r6, [r4, #8]
 800a096:	2e00      	cmp	r6, #0
 800a098:	bfa2      	ittt	ge
 800a09a:	6821      	ldrge	r1, [r4, #0]
 800a09c:	f021 0104 	bicge.w	r1, r1, #4
 800a0a0:	6021      	strge	r1, [r4, #0]
 800a0a2:	b90d      	cbnz	r5, 800a0a8 <_printf_i+0x110>
 800a0a4:	2e00      	cmp	r6, #0
 800a0a6:	d04b      	beq.n	800a140 <_printf_i+0x1a8>
 800a0a8:	4616      	mov	r6, r2
 800a0aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0ae:	fb03 5711 	mls	r7, r3, r1, r5
 800a0b2:	5dc7      	ldrb	r7, [r0, r7]
 800a0b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0b8:	462f      	mov	r7, r5
 800a0ba:	42bb      	cmp	r3, r7
 800a0bc:	460d      	mov	r5, r1
 800a0be:	d9f4      	bls.n	800a0aa <_printf_i+0x112>
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d10b      	bne.n	800a0dc <_printf_i+0x144>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	07df      	lsls	r7, r3, #31
 800a0c8:	d508      	bpl.n	800a0dc <_printf_i+0x144>
 800a0ca:	6923      	ldr	r3, [r4, #16]
 800a0cc:	6861      	ldr	r1, [r4, #4]
 800a0ce:	4299      	cmp	r1, r3
 800a0d0:	bfde      	ittt	le
 800a0d2:	2330      	movle	r3, #48	@ 0x30
 800a0d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0dc:	1b92      	subs	r2, r2, r6
 800a0de:	6122      	str	r2, [r4, #16]
 800a0e0:	f8cd a000 	str.w	sl, [sp]
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	aa03      	add	r2, sp, #12
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	f7ff fee6 	bl	8009ebc <_printf_common>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d14a      	bne.n	800a18a <_printf_i+0x1f2>
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	b004      	add	sp, #16
 800a0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	f043 0320 	orr.w	r3, r3, #32
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	4833      	ldr	r0, [pc, #204]	@ (800a1d4 <_printf_i+0x23c>)
 800a108:	2778      	movs	r7, #120	@ 0x78
 800a10a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	6831      	ldr	r1, [r6, #0]
 800a112:	061f      	lsls	r7, r3, #24
 800a114:	f851 5b04 	ldr.w	r5, [r1], #4
 800a118:	d402      	bmi.n	800a120 <_printf_i+0x188>
 800a11a:	065f      	lsls	r7, r3, #25
 800a11c:	bf48      	it	mi
 800a11e:	b2ad      	uxthmi	r5, r5
 800a120:	6031      	str	r1, [r6, #0]
 800a122:	07d9      	lsls	r1, r3, #31
 800a124:	bf44      	itt	mi
 800a126:	f043 0320 	orrmi.w	r3, r3, #32
 800a12a:	6023      	strmi	r3, [r4, #0]
 800a12c:	b11d      	cbz	r5, 800a136 <_printf_i+0x19e>
 800a12e:	2310      	movs	r3, #16
 800a130:	e7ac      	b.n	800a08c <_printf_i+0xf4>
 800a132:	4827      	ldr	r0, [pc, #156]	@ (800a1d0 <_printf_i+0x238>)
 800a134:	e7e9      	b.n	800a10a <_printf_i+0x172>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	f023 0320 	bic.w	r3, r3, #32
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	e7f6      	b.n	800a12e <_printf_i+0x196>
 800a140:	4616      	mov	r6, r2
 800a142:	e7bd      	b.n	800a0c0 <_printf_i+0x128>
 800a144:	6833      	ldr	r3, [r6, #0]
 800a146:	6825      	ldr	r5, [r4, #0]
 800a148:	6961      	ldr	r1, [r4, #20]
 800a14a:	1d18      	adds	r0, r3, #4
 800a14c:	6030      	str	r0, [r6, #0]
 800a14e:	062e      	lsls	r6, r5, #24
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	d501      	bpl.n	800a158 <_printf_i+0x1c0>
 800a154:	6019      	str	r1, [r3, #0]
 800a156:	e002      	b.n	800a15e <_printf_i+0x1c6>
 800a158:	0668      	lsls	r0, r5, #25
 800a15a:	d5fb      	bpl.n	800a154 <_printf_i+0x1bc>
 800a15c:	8019      	strh	r1, [r3, #0]
 800a15e:	2300      	movs	r3, #0
 800a160:	6123      	str	r3, [r4, #16]
 800a162:	4616      	mov	r6, r2
 800a164:	e7bc      	b.n	800a0e0 <_printf_i+0x148>
 800a166:	6833      	ldr	r3, [r6, #0]
 800a168:	1d1a      	adds	r2, r3, #4
 800a16a:	6032      	str	r2, [r6, #0]
 800a16c:	681e      	ldr	r6, [r3, #0]
 800a16e:	6862      	ldr	r2, [r4, #4]
 800a170:	2100      	movs	r1, #0
 800a172:	4630      	mov	r0, r6
 800a174:	f7f6 f854 	bl	8000220 <memchr>
 800a178:	b108      	cbz	r0, 800a17e <_printf_i+0x1e6>
 800a17a:	1b80      	subs	r0, r0, r6
 800a17c:	6060      	str	r0, [r4, #4]
 800a17e:	6863      	ldr	r3, [r4, #4]
 800a180:	6123      	str	r3, [r4, #16]
 800a182:	2300      	movs	r3, #0
 800a184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a188:	e7aa      	b.n	800a0e0 <_printf_i+0x148>
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	4632      	mov	r2, r6
 800a18e:	4649      	mov	r1, r9
 800a190:	4640      	mov	r0, r8
 800a192:	47d0      	blx	sl
 800a194:	3001      	adds	r0, #1
 800a196:	d0ad      	beq.n	800a0f4 <_printf_i+0x15c>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	079b      	lsls	r3, r3, #30
 800a19c:	d413      	bmi.n	800a1c6 <_printf_i+0x22e>
 800a19e:	68e0      	ldr	r0, [r4, #12]
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	4298      	cmp	r0, r3
 800a1a4:	bfb8      	it	lt
 800a1a6:	4618      	movlt	r0, r3
 800a1a8:	e7a6      	b.n	800a0f8 <_printf_i+0x160>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	47d0      	blx	sl
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d09d      	beq.n	800a0f4 <_printf_i+0x15c>
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	68e3      	ldr	r3, [r4, #12]
 800a1bc:	9903      	ldr	r1, [sp, #12]
 800a1be:	1a5b      	subs	r3, r3, r1
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	dcf2      	bgt.n	800a1aa <_printf_i+0x212>
 800a1c4:	e7eb      	b.n	800a19e <_printf_i+0x206>
 800a1c6:	2500      	movs	r5, #0
 800a1c8:	f104 0619 	add.w	r6, r4, #25
 800a1cc:	e7f5      	b.n	800a1ba <_printf_i+0x222>
 800a1ce:	bf00      	nop
 800a1d0:	0800a585 	.word	0x0800a585
 800a1d4:	0800a596 	.word	0x0800a596

0800a1d8 <memmove>:
 800a1d8:	4288      	cmp	r0, r1
 800a1da:	b510      	push	{r4, lr}
 800a1dc:	eb01 0402 	add.w	r4, r1, r2
 800a1e0:	d902      	bls.n	800a1e8 <memmove+0x10>
 800a1e2:	4284      	cmp	r4, r0
 800a1e4:	4623      	mov	r3, r4
 800a1e6:	d807      	bhi.n	800a1f8 <memmove+0x20>
 800a1e8:	1e43      	subs	r3, r0, #1
 800a1ea:	42a1      	cmp	r1, r4
 800a1ec:	d008      	beq.n	800a200 <memmove+0x28>
 800a1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1f6:	e7f8      	b.n	800a1ea <memmove+0x12>
 800a1f8:	4402      	add	r2, r0
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	428a      	cmp	r2, r1
 800a1fe:	d100      	bne.n	800a202 <memmove+0x2a>
 800a200:	bd10      	pop	{r4, pc}
 800a202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a20a:	e7f7      	b.n	800a1fc <memmove+0x24>

0800a20c <_sbrk_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d06      	ldr	r5, [pc, #24]	@ (800a228 <_sbrk_r+0x1c>)
 800a210:	2300      	movs	r3, #0
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	f7f8 f836 	bl	8002288 <_sbrk>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_sbrk_r+0x1a>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_sbrk_r+0x1a>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20004e30 	.word	0x20004e30

0800a22c <_realloc_r>:
 800a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a230:	4680      	mov	r8, r0
 800a232:	4615      	mov	r5, r2
 800a234:	460c      	mov	r4, r1
 800a236:	b921      	cbnz	r1, 800a242 <_realloc_r+0x16>
 800a238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a23c:	4611      	mov	r1, r2
 800a23e:	f7ff bc59 	b.w	8009af4 <_malloc_r>
 800a242:	b92a      	cbnz	r2, 800a250 <_realloc_r+0x24>
 800a244:	f7ff fbea 	bl	8009a1c <_free_r>
 800a248:	2400      	movs	r4, #0
 800a24a:	4620      	mov	r0, r4
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	f000 f81a 	bl	800a288 <_malloc_usable_size_r>
 800a254:	4285      	cmp	r5, r0
 800a256:	4606      	mov	r6, r0
 800a258:	d802      	bhi.n	800a260 <_realloc_r+0x34>
 800a25a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a25e:	d8f4      	bhi.n	800a24a <_realloc_r+0x1e>
 800a260:	4629      	mov	r1, r5
 800a262:	4640      	mov	r0, r8
 800a264:	f7ff fc46 	bl	8009af4 <_malloc_r>
 800a268:	4607      	mov	r7, r0
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d0ec      	beq.n	800a248 <_realloc_r+0x1c>
 800a26e:	42b5      	cmp	r5, r6
 800a270:	462a      	mov	r2, r5
 800a272:	4621      	mov	r1, r4
 800a274:	bf28      	it	cs
 800a276:	4632      	movcs	r2, r6
 800a278:	f7ff fbc2 	bl	8009a00 <memcpy>
 800a27c:	4621      	mov	r1, r4
 800a27e:	4640      	mov	r0, r8
 800a280:	f7ff fbcc 	bl	8009a1c <_free_r>
 800a284:	463c      	mov	r4, r7
 800a286:	e7e0      	b.n	800a24a <_realloc_r+0x1e>

0800a288 <_malloc_usable_size_r>:
 800a288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a28c:	1f18      	subs	r0, r3, #4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfbc      	itt	lt
 800a292:	580b      	ldrlt	r3, [r1, r0]
 800a294:	18c0      	addlt	r0, r0, r3
 800a296:	4770      	bx	lr

0800a298 <_init>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	bf00      	nop
 800a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29e:	bc08      	pop	{r3}
 800a2a0:	469e      	mov	lr, r3
 800a2a2:	4770      	bx	lr

0800a2a4 <_fini>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	bf00      	nop
 800a2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2aa:	bc08      	pop	{r3}
 800a2ac:	469e      	mov	lr, r3
 800a2ae:	4770      	bx	lr
