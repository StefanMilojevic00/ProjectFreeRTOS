
AirQualityDetectorRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f124  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800f2f8  0800f2f8  000102f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa30  0800fa30  00011338  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa30  0800fa30  00010a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa38  0800fa38  00011338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa38  0800fa38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa3c  0800fa3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  0800fa40  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cac  20000338  0800fd78  00011338  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005fe4  0800fd78  00011fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011338  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216c8  00000000  00000000  00011368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000528c  00000000  00000000  00032a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00037cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001402  00000000  00000000  000396e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cde5  00000000  00000000  0003aaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258ee  00000000  00000000  000678cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107061  00000000  00000000  0008d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019421e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e2c  00000000  00000000  00194264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0019c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f2dc 	.word	0x0800f2dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	0800f2dc 	.word	0x0800f2dc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f965 	bl	8001344 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000354 	.word	0x20000354

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f97e 	bl	80013a8 <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000354 	.word	0x20000354

080010b8 <SetIndicatorLEDsNum>:

void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 fa20 	bl	800150c <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000354 	.word	0x20000354

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f8a5 	bl	8001230 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	20000384 	.word	0x20000384

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f8ab 	bl	8001256 <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000384 	.word	0x20000384

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f8a1 	bl	8001256 <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000384 	.word	0x20000384

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d051      	beq.n	800121e <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	899b      	ldrh	r3, [r3, #12]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f003 f97d 	bl	8004484 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d843      	bhi.n	800121e <ReadButton+0xb6>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <ReadButton+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011fb 	.word	0x080011fb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d130      	bne.n	8001218 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80011c2:	e029      	b.n	8001218 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]

                break;
 80011d0:	e025      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10a      	bne.n	80011f2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	739a      	strb	r2, [r3, #14]
                break;
 80011f8:	e011      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d005      	beq.n	800121c <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	739a      	strb	r2, [r3, #14]
                }
                break;
 8001216:	e001      	b.n	800121c <ReadButton+0xb4>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <ReadButton+0xb6>
                break;
 800121c:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	73bb      	strb	r3, [r7, #14]
    return retval;
 8001224:	7bbb      	ldrb	r3, [r7, #14]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	809a      	strh	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	f003 f921 	bl	80044b4 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001280:	f000 f9ca 	bl	8001618 <MQ9_GetRawValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f9dc 	bl	8001648 <MQ9_ConverRaw2Real>
 8001290:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f003 f8e4 	bl	80044b4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ec:	e007      	b.n	80012fe <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f003 f8db 	bl	80044b4 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800130c:	2208      	movs	r2, #8
 800130e:	4903      	ldr	r1, [pc, #12]	@ (800131c <LED_init+0x14>)
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <LED_init+0x18>)
 8001312:	f7ff ffc7 	bl	80012a4 <CreateNewSingleLED>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	2000038c 	.word	0x2000038c

08001324 <LED_Drive>:

void LED_Drive(bool state)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <LED_Drive+0x1c>)
 8001334:	f7ff ffc9 	bl	80012ca <UpdateSingleLED>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000038c 	.word	0x2000038c

08001344 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8b3a      	ldrh	r2, [r7, #24]
 800136a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8c3a      	ldrh	r2, [r7, #32]
 8001376:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001382:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800138e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800139a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014f4 <LedRowWrite+0x14c>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f003 f86f 	bl	80044b4 <HAL_GPIO_WritePin>
 80013d6:	e007      	b.n	80013e8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f003 f866 	bl	80044b4 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 800)
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014f8 <LedRowWrite+0x150>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd08      	ble.n	800140c <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f003 f855 	bl	80044b4 <HAL_GPIO_WritePin>
 800140a:	e007      	b.n	800141c <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f003 f84c 	bl	80044b4 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1500)
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014fc <LedRowWrite+0x154>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	dd08      	ble.n	8001440 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f003 f83b 	bl	80044b4 <HAL_GPIO_WritePin>
 800143e:	e007      	b.n	8001450 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6918      	ldr	r0, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f003 f832 	bl	80044b4 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2200)
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001500 <LedRowWrite+0x158>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6998      	ldr	r0, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f003 f821 	bl	80044b4 <HAL_GPIO_WritePin>
 8001472:	e007      	b.n	8001484 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6998      	ldr	r0, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b9b      	ldrh	r3, [r3, #28]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f003 f818 	bl	80044b4 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 8001484:	edd7 7a00 	vldr	s15, [r7]
 8001488:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001504 <LedRowWrite+0x15c>
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd08      	ble.n	80014a8 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f003 f807 	bl	80044b4 <HAL_GPIO_WritePin>
 80014a6:	e007      	b.n	80014b8 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a18      	ldr	r0, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 fffe 	bl	80044b4 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 4000)
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001508 <LedRowWrite+0x160>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd08      	ble.n	80014dc <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 ffed 	bl	80044b4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 80014da:	e007      	b.n	80014ec <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 ffe4 	bl	80044b4 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	43c80000 	.word	0x43c80000
 80014f8:	44480000 	.word	0x44480000
 80014fc:	44bb8000 	.word	0x44bb8000
 8001500:	45098000 	.word	0x45098000
 8001504:	453b8000 	.word	0x453b8000
 8001508:	457a0000 	.word	0x457a0000

0800150c <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d877      	bhi.n	800160e <LedRowWriteNum+0x102>
	{
		if(num > 0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f002 ffc0 	bl	80044b4 <HAL_GPIO_WritePin>
 8001534:	e007      	b.n	8001546 <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 ffb7 	bl	80044b4 <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d908      	bls.n	800155e <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f002 ffac 	bl	80044b4 <HAL_GPIO_WritePin>
 800155c:	e007      	b.n	800156e <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f002 ffa3 	bl	80044b4 <HAL_GPIO_WritePin>
		}

		if(num > 2)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d908      	bls.n	8001586 <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6918      	ldr	r0, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a9b      	ldrh	r3, [r3, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f002 ff98 	bl	80044b4 <HAL_GPIO_WritePin>
 8001584:	e007      	b.n	8001596 <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6918      	ldr	r0, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8a9b      	ldrh	r3, [r3, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 ff8f 	bl	80044b4 <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d908      	bls.n	80015ae <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8b9b      	ldrh	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 ff84 	bl	80044b4 <HAL_GPIO_WritePin>
 80015ac:	e007      	b.n	80015be <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6998      	ldr	r0, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8b9b      	ldrh	r3, [r3, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f002 ff7b 	bl	80044b4 <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d908      	bls.n	80015d6 <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a18      	ldr	r0, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 ff70 	bl	80044b4 <HAL_GPIO_WritePin>
 80015d4:	e007      	b.n	80015e6 <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f002 ff67 	bl	80044b4 <HAL_GPIO_WritePin>
		}

		if(num > 5)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 ff5c 	bl	80044b4 <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 80015fc:	e007      	b.n	800160e <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f002 ff53 	bl	80044b4 <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001620:	f001 ff70 	bl	8003504 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 800162a:	f002 f839 	bl	80036a0 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001630:	f002 f8c1 	bl	80037b6 <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001638:	88fb      	ldrh	r3, [r7, #6]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003e0 	.word	0x200003e0

08001648 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MQ9_ConverRaw2Real+0x48>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MQ9_ConverRaw2Real+0x4c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000

08001698 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800169c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a0:	4902      	ldr	r1, [pc, #8]	@ (80016ac <SignalSystemInit+0x14>)
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SignalSystemInit+0x18>)
 80016a4:	f7ff fd3a 	bl	800111c <CreateNewButton>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	20000394 	.word	0x20000394

080016b4 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ReadSignal+0x20>)
 80016c0:	f7ff fd52 	bl	8001168 <ReadButton>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	return Status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000394 	.word	0x20000394

080016d8 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe fdf5 	bl	80002d0 <strlen>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	480e      	ldr	r0, [pc, #56]	@ (800172c <UART_TransmitString+0x54>)
 80016f2:	f004 fb33 	bl	8005d5c <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <UART_TransmitString+0x58>)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4611      	mov	r1, r2
 8001700:	8019      	strh	r1, [r3, #0]
 8001702:	3302      	adds	r3, #2
 8001704:	0c12      	lsrs	r2, r2, #16
 8001706:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fddf 	bl	80002d0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 010c 	add.w	r1, r7, #12
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <UART_TransmitString+0x54>)
 8001720:	f004 fb1c 	bl	8005d5c <HAL_UART_Transmit>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000044c 	.word	0x2000044c
 8001730:	0800f2f8 	.word	0x0800f2f8

08001734 <UART_TransmitStringWithoutNewLine>:

void UART_TransmitStringWithoutNewLine(char* str)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7fe fdc7 	bl	80002d0 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <UART_TransmitStringWithoutNewLine+0x28>)
 800174e:	f004 fb05 	bl	8005d5c <HAL_UART_Transmit>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000044c 	.word	0x2000044c

08001760 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	@ 0x40
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe ff1c 	bl	80005a8 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	f107 000c 	add.w	r0, r7, #12
 8001778:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <UART_TransmitFloat+0x44>)
 800177a:	f00a f90d 	bl	800b998 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fda4 	bl	80002d0 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	f107 010c 	add.w	r1, r7, #12
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <UART_TransmitFloat+0x48>)
 8001796:	f004 fae1 	bl	8005d5c <HAL_UART_Transmit>
}
 800179a:	bf00      	nop
 800179c:	3740      	adds	r7, #64	@ 0x40
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800f2fc 	.word	0x0800f2fc
 80017a8:	2000044c 	.word	0x2000044c

080017ac <HelpSendUART>:

void HelpSendUART(uint16_t NumOfElements, char** CommandMatrix)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	80fb      	strh	r3, [r7, #6]
	uint16_t iterator = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	81fb      	strh	r3, [r7, #14]
	UART_TransmitString("\n===  UART Commands ===\n");
 80017bc:	480e      	ldr	r0, [pc, #56]	@ (80017f8 <HelpSendUART+0x4c>)
 80017be:	f7ff ff8b 	bl	80016d8 <UART_TransmitString>
	while(iterator < NumOfElements)
 80017c2:	e00d      	b.n	80017e0 <HelpSendUART+0x34>
	{
		UART_TransmitStringWithoutNewLine("\t");
 80017c4:	480d      	ldr	r0, [pc, #52]	@ (80017fc <HelpSendUART+0x50>)
 80017c6:	f7ff ffb5 	bl	8001734 <UART_TransmitStringWithoutNewLine>
		UART_TransmitString(CommandMatrix[iterator]);
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff7f 	bl	80016d8 <UART_TransmitString>

		iterator++;
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	3301      	adds	r3, #1
 80017de:	81fb      	strh	r3, [r7, #14]
	while(iterator < NumOfElements)
 80017e0:	89fa      	ldrh	r2, [r7, #14]
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d3ed      	bcc.n	80017c4 <HelpSendUART+0x18>
	}
	UART_TransmitString("\n==========\n");
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HelpSendUART+0x54>)
 80017ea:	f7ff ff75 	bl	80016d8 <UART_TransmitString>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800f304 	.word	0x0800f304
 80017fc:	0800f320 	.word	0x0800f320
 8001800:	0800f324 	.word	0x0800f324

08001804 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 800180c:	4a36      	ldr	r2, [pc, #216]	@ (80018e8 <TerminalHandler+0xe4>)
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	8019      	strh	r1, [r3, #0]
 8001818:	3302      	adds	r3, #2
 800181a:	0c12      	lsrs	r2, r2, #16
 800181c:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 800181e:	4a33      	ldr	r2, [pc, #204]	@ (80018ec <TerminalHandler+0xe8>)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	7019      	strb	r1, [r3, #0]
	//HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));

	if(huart->Instance == USART1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <TerminalHandler+0xec>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d14d      	bne.n	80018d4 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <TerminalHandler+0xf0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8001840:	f000 f872 	bl	8001928 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <TerminalHandler+0xf4>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b0d      	cmp	r3, #13
 800184a:	d02f      	beq.n	80018ac <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <TerminalHandler+0xf4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d117      	bne.n	8001884 <TerminalHandler+0x80>
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <TerminalHandler+0xf0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <TerminalHandler+0xf0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <TerminalHandler+0xf8>)
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <TerminalHandler+0xf0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <TerminalHandler+0xf0>)
 8001872:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8001874:	f107 010c 	add.w	r1, r7, #12
 8001878:	230a      	movs	r3, #10
 800187a:	2205      	movs	r2, #5
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f004 fa6d 	bl	8005d5c <HAL_UART_Transmit>
 8001882:	e00c      	b.n	800189e <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <TerminalHandler+0xf0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <TerminalHandler+0xf4>)
 800188c:	7819      	ldrb	r1, [r3, #0]
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <TerminalHandler+0xf8>)
 8001890:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <TerminalHandler+0xf0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <TerminalHandler+0xf0>)
 800189c:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 800189e:	230a      	movs	r3, #10
 80018a0:	2201      	movs	r2, #1
 80018a2:	4915      	ldr	r1, [pc, #84]	@ (80018f8 <TerminalHandler+0xf4>)
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f004 fa59 	bl	8005d5c <HAL_UART_Transmit>
 80018aa:	e013      	b.n	80018d4 <TerminalHandler+0xd0>
			//RxData[0] = '\0'; //added while debbuging
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <TerminalHandler+0xf0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <TerminalHandler+0xf4>)
 80018b4:	7819      	ldrb	r1, [r3, #0]
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <TerminalHandler+0xf8>)
 80018b8:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <TerminalHandler+0xf0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <TerminalHandler+0xfc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 80018c6:	f107 0114 	add.w	r1, r7, #20
 80018ca:	230a      	movs	r3, #10
 80018cc:	2203      	movs	r2, #3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f004 fa44 	bl	8005d5c <HAL_UART_Transmit>
			//RxData[0] = '\0'; //added while debbuging
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 80018d4:	2201      	movs	r2, #1
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <TerminalHandler+0xf4>)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f004 fac2 	bl	8005e62 <HAL_UART_Receive_IT>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800f334 	.word	0x0800f334
 80018ec:	0800f338 	.word	0x0800f338
 80018f0:	40011000 	.word	0x40011000
 80018f4:	200003a4 	.word	0x200003a4
 80018f8:	200003a8 	.word	0x200003a8
 80018fc:	200003ac 	.word	0x200003ac
 8001900:	200003de 	.word	0x200003de

08001904 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 800190c:	2201      	movs	r2, #1
 800190e:	4905      	ldr	r1, [pc, #20]	@ (8001924 <TerminalInit+0x20>)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f004 faa6 	bl	8005e62 <HAL_UART_Receive_IT>
	ClearRxBuffer();
 8001916:	f000 f807 	bl	8001928 <ClearRxBuffer>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003a8 	.word	0x200003a8

08001928 <ClearRxBuffer>:

void ClearRxBuffer()
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 50; counter++)
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e007      	b.n	8001944 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8001934:	4a09      	ldr	r2, [pc, #36]	@ (800195c <ClearRxBuffer+0x34>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 50; counter++)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b31      	cmp	r3, #49	@ 0x31
 8001948:	ddf4      	ble.n	8001934 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <ClearRxBuffer+0x38>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200003ac 	.word	0x200003ac
 8001960:	200003de 	.word	0x200003de

08001964 <IsTransferComplete>:

bool IsTransferComplete()
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	return transferCompleteFlag;
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <IsTransferComplete+0x14>)
 800196a:	781b      	ldrb	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200003de 	.word	0x200003de

0800197c <GetRxBuffer>:

char* GetRxBuffer()
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	return (char*)RxBuffer;
 8001980:	4b02      	ldr	r3, [pc, #8]	@ (800198c <GetRxBuffer+0x10>)
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	200003ac 	.word	0x200003ac

08001990 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff33 	bl	8001804 <TerminalHandler>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <StringCompareFromUART>:


bool StringCompareFromUART(char* cmd_string, char** matrix,  uint16_t numOfStrings, uint16_t* index)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]

	    uint16_t count = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	82fb      	strh	r3, [r7, #22]
	    bool foundIt = false;
 80019ba:	2300      	movs	r3, #0
 80019bc:	757b      	strb	r3, [r7, #21]
	    bool retval;
	    cmd_string = strupr(cmd_string);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f00a f856 	bl	800ba70 <strupr>
 80019c4:	60f8      	str	r0, [r7, #12]
	    while((count < numOfStrings) && (foundIt == false))
 80019c6:	e013      	b.n	80019f0 <StringCompareFromUART+0x4a>
	    {

	        if(strcmp(cmd_string, matrix[count]) == 0)
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	4413      	add	r3, r2
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7fe fc1b 	bl	8000210 <strcmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <StringCompareFromUART+0x44>
	        {
	            *index = count;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	8afa      	ldrh	r2, [r7, #22]
 80019e4:	801a      	strh	r2, [r3, #0]
	            foundIt = true;
 80019e6:	2301      	movs	r3, #1
 80019e8:	757b      	strb	r3, [r7, #21]

	        }
	        count++;
 80019ea:	8afb      	ldrh	r3, [r7, #22]
 80019ec:	3301      	adds	r3, #1
 80019ee:	82fb      	strh	r3, [r7, #22]
	    while((count < numOfStrings) && (foundIt == false))
 80019f0:	8afa      	ldrh	r2, [r7, #22]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d205      	bcs.n	8001a04 <StringCompareFromUART+0x5e>
 80019f8:	7d7b      	ldrb	r3, [r7, #21]
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e1      	bne.n	80019c8 <StringCompareFromUART+0x22>
	    }

	    if(foundIt)
 8001a04:	7d7b      	ldrb	r3, [r7, #21]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <StringCompareFromUART+0x6a>
	    {
	        retval = true;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	753b      	strb	r3, [r7, #20]
 8001a0e:	e001      	b.n	8001a14 <StringCompareFromUART+0x6e>
	    }
	    else
	    {
	        retval = false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	753b      	strb	r3, [r7, #20]
	    }

	    return retval;
 8001a14:	7d3b      	ldrb	r3, [r7, #20]

}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <DevicesInit>:
#include "Variables.h"

extern UART_HandleTypeDef huart1;

void DevicesInit()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	AlarmInit();
 8001a24:	f7ff fb58 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 8001a28:	f7ff fe36 	bl	8001698 <SignalSystemInit>
	AirQualityIncicatorInit();
 8001a2c:	f7ff fb0a 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 8001a30:	f7ff fc6a 	bl	8001308 <LED_init>
	TerminalInit(&huart1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <DevicesInit+0x20>)
 8001a36:	f7ff ff65 	bl	8001904 <TerminalInit>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000044c 	.word	0x2000044c

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f001 fceb 	bl	8003422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f894 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f000 f9a6 	bl	8001da0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001a54:	f000 f900 	bl	8001c58 <MX_ADC3_Init>
  MX_CRC_Init();
 8001a58:	f000 f950 	bl	8001cfc <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001a5c:	f000 f970 	bl	8001d40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DevicesInit(); // Function that initializes all of systems components
 8001a60:	f7ff ffde 	bl	8001a20 <DevicesInit>
//  osTimerStart(LEDTimerHandle, 3000);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a64:	f005 fc10 	bl	8007288 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RegimeMutex */
  RegimeMutexHandle = osMutexNew(&RegimeMutex_attributes);
 8001a68:	4828      	ldr	r0, [pc, #160]	@ (8001b0c <main+0xc8>)
 8001a6a:	f005 fe25 	bl	80076b8 <osMutexNew>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <main+0xcc>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* creation of LED_Blink_Mutex */
  LED_Blink_MutexHandle = osMutexNew(&LED_Blink_Mutex_attributes);
 8001a74:	4827      	ldr	r0, [pc, #156]	@ (8001b14 <main+0xd0>)
 8001a76:	f005 fe1f 	bl	80076b8 <osMutexNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <main+0xd4>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8001a80:	4826      	ldr	r0, [pc, #152]	@ (8001b1c <main+0xd8>)
 8001a82:	f005 fe19 	bl	80076b8 <osMutexNew>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a25      	ldr	r2, [pc, #148]	@ (8001b20 <main+0xdc>)
 8001a8a:	6013      	str	r3, [r2, #0]

  /* creation of LED_FSM_Mutex */
  LED_FSM_MutexHandle = osMutexNew(&LED_FSM_Mutex_attributes);
 8001a8c:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <main+0xe0>)
 8001a8e:	f005 fe13 	bl	80076b8 <osMutexNew>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a24      	ldr	r2, [pc, #144]	@ (8001b28 <main+0xe4>)
 8001a96:	6013      	str	r3, [r2, #0]

  /* creation of ButtonCountMutex */
  ButtonCountMutexHandle = osMutexNew(&ButtonCountMutex_attributes);
 8001a98:	4824      	ldr	r0, [pc, #144]	@ (8001b2c <main+0xe8>)
 8001a9a:	f005 fe0d 	bl	80076b8 <osMutexNew>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a23      	ldr	r2, [pc, #140]	@ (8001b30 <main+0xec>)
 8001aa2:	6013      	str	r3, [r2, #0]

  /* creation of SystemWorkStateMutex */
  SystemWorkStateMutexHandle = osMutexNew(&SystemWorkStateMutex_attributes);
 8001aa4:	4823      	ldr	r0, [pc, #140]	@ (8001b34 <main+0xf0>)
 8001aa6:	f005 fe07 	bl	80076b8 <osMutexNew>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a22      	ldr	r2, [pc, #136]	@ (8001b38 <main+0xf4>)
 8001aae:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(ButtonTimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 8001ab0:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <main+0xf8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4822      	ldr	r0, [pc, #136]	@ (8001b40 <main+0xfc>)
 8001ab8:	f005 fd3a 	bl	8007530 <osTimerNew>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <main+0x100>)
 8001ac0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8001ac2:	4a21      	ldr	r2, [pc, #132]	@ (8001b48 <main+0x104>)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4821      	ldr	r0, [pc, #132]	@ (8001b4c <main+0x108>)
 8001ac8:	f005 fc48 	bl	800735c <osThreadNew>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <main+0x10c>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* creation of TerminalTask */
  TerminalTaskHandle = osThreadNew(StartTerminalTask, NULL, &TerminalTask_attributes);
 8001ad2:	4a20      	ldr	r2, [pc, #128]	@ (8001b54 <main+0x110>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4820      	ldr	r0, [pc, #128]	@ (8001b58 <main+0x114>)
 8001ad8:	f005 fc40 	bl	800735c <osThreadNew>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a1f      	ldr	r2, [pc, #124]	@ (8001b5c <main+0x118>)
 8001ae0:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b60 <main+0x11c>)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	481f      	ldr	r0, [pc, #124]	@ (8001b64 <main+0x120>)
 8001ae8:	f005 fc38 	bl	800735c <osThreadNew>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <main+0x124>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* creation of SingleLEDTask */
  SingleLEDTaskHandle = osThreadNew(StartSingleLEDTask, NULL, &SingleLEDTask_attributes);
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <main+0x128>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	481e      	ldr	r0, [pc, #120]	@ (8001b70 <main+0x12c>)
 8001af8:	f005 fc30 	bl	800735c <osThreadNew>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <main+0x130>)
 8001b00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b02:	f005 fbf5 	bl	80072f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b06:	bf00      	nop
 8001b08:	e7fd      	b.n	8001b06 <main+0xc2>
 8001b0a:	bf00      	nop
 8001b0c:	0800f588 	.word	0x0800f588
 8001b10:	200004e8 	.word	0x200004e8
 8001b14:	0800f598 	.word	0x0800f598
 8001b18:	200004ec 	.word	0x200004ec
 8001b1c:	0800f5a8 	.word	0x0800f5a8
 8001b20:	200004f0 	.word	0x200004f0
 8001b24:	0800f5b8 	.word	0x0800f5b8
 8001b28:	200004f4 	.word	0x200004f4
 8001b2c:	0800f5c8 	.word	0x0800f5c8
 8001b30:	200004f8 	.word	0x200004f8
 8001b34:	0800f5d8 	.word	0x0800f5d8
 8001b38:	200004fc 	.word	0x200004fc
 8001b3c:	0800f578 	.word	0x0800f578
 8001b40:	08002d69 	.word	0x08002d69
 8001b44:	200004e4 	.word	0x200004e4
 8001b48:	0800f4e8 	.word	0x0800f4e8
 8001b4c:	08002659 	.word	0x08002659
 8001b50:	200004d4 	.word	0x200004d4
 8001b54:	0800f50c 	.word	0x0800f50c
 8001b58:	0800297d 	.word	0x0800297d
 8001b5c:	200004d8 	.word	0x200004d8
 8001b60:	0800f530 	.word	0x0800f530
 8001b64:	08002b8d 	.word	0x08002b8d
 8001b68:	200004dc 	.word	0x200004dc
 8001b6c:	0800f554 	.word	0x0800f554
 8001b70:	08002bfd 	.word	0x08002bfd
 8001b74:	200004e0 	.word	0x200004e0

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	@ 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	2230      	movs	r2, #48	@ 0x30
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f009 ff69 	bl	800ba5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b9c:	f002 fca4 	bl	80044e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <SystemClock_Config+0xd8>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c50 <SystemClock_Config+0xd8>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bac:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <SystemClock_Config+0xd8>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a25      	ldr	r2, [pc, #148]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001be4:	2319      	movs	r3, #25
 8001be6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001be8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fcd4 	bl	80045a8 <HAL_RCC_OscConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c06:	f001 f92f 	bl	8002e68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c0a:	f002 fc7d 	bl	8004508 <HAL_PWREx_EnableOverDrive>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c14:	f001 f928 	bl	8002e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c18:	230f      	movs	r3, #15
 8001c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2106      	movs	r1, #6
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 ff5a 	bl	8004af0 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001c42:	f001 f911 	bl	8002e68 <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3750      	adds	r7, #80	@ 0x50
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c6c:	4a21      	ldr	r2, [pc, #132]	@ (8001cf4 <MX_ADC3_Init+0x9c>)
 8001c6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001c9a:	4a17      	ldr	r2, [pc, #92]	@ (8001cf8 <MX_ADC3_Init+0xa0>)
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cb8:	480d      	ldr	r0, [pc, #52]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cba:	f001 fbdf 	bl	800347c <HAL_ADC_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001cc4:	f001 f8d0 	bl	8002e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_ADC3_Init+0x98>)
 8001cda:	f001 fd79 	bl	80037d0 <HAL_ADC_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001ce4:	f001 f8c0 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200003e0 	.word	0x200003e0
 8001cf4:	40012200 	.word	0x40012200
 8001cf8:	0f000001 	.word	0x0f000001

08001cfc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d02:	4a0e      	ldr	r2, [pc, #56]	@ (8001d3c <MX_CRC_Init+0x40>)
 8001d04:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	@ (8001d38 <MX_CRC_Init+0x3c>)
 8001d26:	f002 f885 	bl	8003e34 <HAL_CRC_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001d30:	f001 f89a 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000428 	.word	0x20000428
 8001d3c:	40023000 	.word	0x40023000

08001d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <MX_USART1_UART_Init+0x5c>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_USART1_UART_Init+0x58>)
 8001d84:	f003 ff9c 	bl	8005cc0 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d8e:	f001 f86b 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000044c 	.word	0x2000044c
 8001d9c:	40011000 	.word	0x40011000

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b090      	sub	sp, #64	@ 0x40
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db6:	4baf      	ldr	r3, [pc, #700]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4aae      	ldr	r2, [pc, #696]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4bac      	ldr	r3, [pc, #688]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dce:	4ba9      	ldr	r3, [pc, #676]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4aa8      	ldr	r2, [pc, #672]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4ba6      	ldr	r3, [pc, #664]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4ba3      	ldr	r3, [pc, #652]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4aa2      	ldr	r2, [pc, #648]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4ba0      	ldr	r3, [pc, #640]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	4b9d      	ldr	r3, [pc, #628]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a9c      	ldr	r2, [pc, #624]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b9a      	ldr	r3, [pc, #616]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b97      	ldr	r3, [pc, #604]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a96      	ldr	r2, [pc, #600]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b94      	ldr	r3, [pc, #592]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b91      	ldr	r3, [pc, #580]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a90      	ldr	r2, [pc, #576]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e46:	4b8b      	ldr	r3, [pc, #556]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a8a      	ldr	r2, [pc, #552]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e5e:	4b85      	ldr	r3, [pc, #532]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a84      	ldr	r2, [pc, #528]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b82      	ldr	r3, [pc, #520]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e76:	4b7f      	ldr	r3, [pc, #508]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b7c      	ldr	r3, [pc, #496]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	4b79      	ldr	r3, [pc, #484]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a78      	ldr	r2, [pc, #480]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b76      	ldr	r3, [pc, #472]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea6:	4b73      	ldr	r3, [pc, #460]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a72      	ldr	r2, [pc, #456]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b70      	ldr	r3, [pc, #448]	@ (8002074 <MX_GPIO_Init+0x2d4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	486d      	ldr	r0, [pc, #436]	@ (8002078 <MX_GPIO_Init+0x2d8>)
 8001ec4:	f002 faf6 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2120      	movs	r1, #32
 8001ecc:	486b      	ldr	r0, [pc, #428]	@ (800207c <MX_GPIO_Init+0x2dc>)
 8001ece:	f002 faf1 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	210d      	movs	r1, #13
 8001ed6:	486a      	ldr	r0, [pc, #424]	@ (8002080 <MX_GPIO_Init+0x2e0>)
 8001ed8:	f002 faec 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2108      	movs	r1, #8
 8001ee0:	4868      	ldr	r0, [pc, #416]	@ (8002084 <MX_GPIO_Init+0x2e4>)
 8001ee2:	f002 fae7 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001eec:	4864      	ldr	r0, [pc, #400]	@ (8002080 <MX_GPIO_Init+0x2e0>)
 8001eee:	f002 fae1 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001ef8:	4863      	ldr	r0, [pc, #396]	@ (8002088 <MX_GPIO_Init+0x2e8>)
 8001efa:	f002 fadb 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	4862      	ldr	r0, [pc, #392]	@ (800208c <MX_GPIO_Init+0x2ec>)
 8001f04:	f002 fad6 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	21c8      	movs	r1, #200	@ 0xc8
 8001f0c:	4860      	ldr	r0, [pc, #384]	@ (8002090 <MX_GPIO_Init+0x2f0>)
 8001f0e:	f002 fad1 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001f12:	2310      	movs	r3, #16
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f22:	230e      	movs	r3, #14
 8001f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4859      	ldr	r0, [pc, #356]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001f2e:	f002 f8fd 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001f32:	2308      	movs	r3, #8
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f42:	4619      	mov	r1, r3
 8001f44:	4853      	ldr	r0, [pc, #332]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001f46:	f002 f8f1 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f5a:	2309      	movs	r3, #9
 8001f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f62:	4619      	mov	r1, r3
 8001f64:	484b      	ldr	r0, [pc, #300]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001f66:	f002 f8e1 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f6a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f7c:	230b      	movs	r3, #11
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4842      	ldr	r0, [pc, #264]	@ (8002090 <MX_GPIO_Init+0x2f0>)
 8001f88:	f002 f8d0 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001f8c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	483a      	ldr	r0, [pc, #232]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 8001faa:	f002 f8bf 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001fae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb4:	2312      	movs	r3, #18
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fc8:	4619      	mov	r1, r3
 8001fca:	482b      	ldr	r0, [pc, #172]	@ (8002078 <MX_GPIO_Init+0x2d8>)
 8001fcc:	f002 f8ae 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4824      	ldr	r0, [pc, #144]	@ (8002078 <MX_GPIO_Init+0x2d8>)
 8001fe8:	f002 f8a0 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002004:	4619      	mov	r1, r3
 8002006:	481d      	ldr	r0, [pc, #116]	@ (800207c <MX_GPIO_Init+0x2dc>)
 8002008:	f002 f890 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800200c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800201e:	230c      	movs	r3, #12
 8002020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002026:	4619      	mov	r1, r3
 8002028:	4818      	ldr	r0, [pc, #96]	@ (800208c <MX_GPIO_Init+0x2ec>)
 800202a:	f002 f87f 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800202e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002040:	2301      	movs	r3, #1
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002048:	4619      	mov	r1, r3
 800204a:	4813      	ldr	r0, [pc, #76]	@ (8002098 <MX_GPIO_Init+0x2f8>)
 800204c:	f002 f86e 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002050:	2360      	movs	r3, #96	@ 0x60
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002060:	230d      	movs	r3, #13
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002068:	4619      	mov	r1, r3
 800206a:	480a      	ldr	r0, [pc, #40]	@ (8002094 <MX_GPIO_Init+0x2f4>)
 800206c:	f002 f85e 	bl	800412c <HAL_GPIO_Init>
 8002070:	e014      	b.n	800209c <MX_GPIO_Init+0x2fc>
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40022000 	.word	0x40022000
 8002084:	40022800 	.word	0x40022800
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40020800 	.word	0x40020800
 8002090:	40021800 	.word	0x40021800
 8002094:	40021000 	.word	0x40021000
 8002098:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800209c:	2340      	movs	r3, #64	@ 0x40
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020ac:	230a      	movs	r3, #10
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	48bc      	ldr	r0, [pc, #752]	@ (80023a8 <MX_GPIO_Init+0x608>)
 80020b8:	f002 f838 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80020bc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020ce:	230c      	movs	r3, #12
 80020d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d6:	4619      	mov	r1, r3
 80020d8:	48b4      	ldr	r0, [pc, #720]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80020da:	f002 f827 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020de:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f0:	230e      	movs	r3, #14
 80020f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f8:	4619      	mov	r1, r3
 80020fa:	48ad      	ldr	r0, [pc, #692]	@ (80023b0 <MX_GPIO_Init+0x610>)
 80020fc:	f002 f816 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002112:	4619      	mov	r1, r3
 8002114:	48a6      	ldr	r0, [pc, #664]	@ (80023b0 <MX_GPIO_Init+0x610>)
 8002116:	f002 f809 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800211a:	2340      	movs	r3, #64	@ 0x40
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800211e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212c:	4619      	mov	r1, r3
 800212e:	48a1      	ldr	r0, [pc, #644]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002130:	f001 fffc 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002134:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002146:	230c      	movs	r3, #12
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800214e:	4619      	mov	r1, r3
 8002150:	4898      	ldr	r0, [pc, #608]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002152:	f001 ffeb 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002156:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800215a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002168:	230a      	movs	r3, #10
 800216a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002170:	4619      	mov	r1, r3
 8002172:	4891      	ldr	r0, [pc, #580]	@ (80023b8 <MX_GPIO_Init+0x618>)
 8002174:	f001 ffda 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002178:	23f0      	movs	r3, #240	@ 0xf0
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002188:	230a      	movs	r3, #10
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800218c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002190:	4619      	mov	r1, r3
 8002192:	488a      	ldr	r0, [pc, #552]	@ (80023bc <MX_GPIO_Init+0x61c>)
 8002194:	f001 ffca 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002198:	23f7      	movs	r3, #247	@ 0xf7
 800219a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021a8:	230e      	movs	r3, #14
 80021aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80021ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021b0:	4619      	mov	r1, r3
 80021b2:	4883      	ldr	r0, [pc, #524]	@ (80023c0 <MX_GPIO_Init+0x620>)
 80021b4:	f001 ffba 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80021b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021ca:	2309      	movs	r3, #9
 80021cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4875      	ldr	r0, [pc, #468]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80021d6:	f001 ffa9 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80021da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80021ec:	230a      	movs	r3, #10
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	486d      	ldr	r0, [pc, #436]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80021f8:	f001 ff98 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021fc:	2320      	movs	r3, #32
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002210:	4619      	mov	r1, r3
 8002212:	4868      	ldr	r0, [pc, #416]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002214:	f001 ff8a 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002218:	2308      	movs	r3, #8
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002228:	230d      	movs	r3, #13
 800222a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002230:	4619      	mov	r1, r3
 8002232:	4860      	ldr	r0, [pc, #384]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002234:	f001 ff7a 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8002238:	230d      	movs	r3, #13
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002240:	2302      	movs	r3, #2
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002248:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800224c:	4619      	mov	r1, r3
 800224e:	485b      	ldr	r0, [pc, #364]	@ (80023bc <MX_GPIO_Init+0x61c>)
 8002250:	f001 ff6c 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225a:	2300      	movs	r3, #0
 800225c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002266:	4619      	mov	r1, r3
 8002268:	4856      	ldr	r0, [pc, #344]	@ (80023c4 <MX_GPIO_Init+0x624>)
 800226a:	f001 ff5f 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800226e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002280:	230c      	movs	r3, #12
 8002282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002284:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	484f      	ldr	r0, [pc, #316]	@ (80023c8 <MX_GPIO_Init+0x628>)
 800228c:	f001 ff4e 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002290:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022a2:	230e      	movs	r3, #14
 80022a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	4843      	ldr	r0, [pc, #268]	@ (80023bc <MX_GPIO_Init+0x61c>)
 80022ae:	f001 ff3d 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80022b2:	2308      	movs	r3, #8
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c6:	4619      	mov	r1, r3
 80022c8:	483d      	ldr	r0, [pc, #244]	@ (80023c0 <MX_GPIO_Init+0x620>)
 80022ca:	f001 ff2f 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80022ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022e0:	230d      	movs	r3, #13
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e8:	4619      	mov	r1, r3
 80022ea:	4830      	ldr	r0, [pc, #192]	@ (80023ac <MX_GPIO_Init+0x60c>)
 80022ec:	f001 ff1e 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022f0:	2310      	movs	r3, #16
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002300:	4619      	mov	r1, r3
 8002302:	482c      	ldr	r0, [pc, #176]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002304:	f001 ff12 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002308:	2304      	movs	r3, #4
 800230a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002318:	230c      	movs	r3, #12
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002320:	4619      	mov	r1, r3
 8002322:	4824      	ldr	r0, [pc, #144]	@ (80023b4 <MX_GPIO_Init+0x614>)
 8002324:	f001 ff02 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002328:	f248 0304 	movw	r3, #32772	@ 0x8004
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232e:	2300      	movs	r3, #0
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233a:	4619      	mov	r1, r3
 800233c:	4823      	ldr	r0, [pc, #140]	@ (80023cc <MX_GPIO_Init+0x62c>)
 800233e:	f001 fef5 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002342:	2302      	movs	r3, #2
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002352:	2305      	movs	r3, #5
 8002354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800235a:	4619      	mov	r1, r3
 800235c:	4817      	ldr	r0, [pc, #92]	@ (80023bc <MX_GPIO_Init+0x61c>)
 800235e:	f001 fee5 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	4810      	ldr	r0, [pc, #64]	@ (80023bc <MX_GPIO_Init+0x61c>)
 800237c:	f001 fed6 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002380:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	480c      	ldr	r0, [pc, #48]	@ (80023cc <MX_GPIO_Init+0x62c>)
 800239a:	f001 fec7 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800239e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e013      	b.n	80023d0 <MX_GPIO_Init+0x630>
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40022400 	.word	0x40022400
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40022800 	.word	0x40022800
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023da:	230d      	movs	r3, #13
 80023dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	4895      	ldr	r0, [pc, #596]	@ (800263c <MX_GPIO_Init+0x89c>)
 80023e6:	f001 fea1 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80023ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023f4:	2302      	movs	r3, #2
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 80023f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023fc:	4619      	mov	r1, r3
 80023fe:	4890      	ldr	r0, [pc, #576]	@ (8002640 <MX_GPIO_Init+0x8a0>)
 8002400:	f001 fe94 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002416:	2301      	movs	r3, #1
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800241a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800241e:	4619      	mov	r1, r3
 8002420:	4888      	ldr	r0, [pc, #544]	@ (8002644 <MX_GPIO_Init+0x8a4>)
 8002422:	f001 fe83 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800242c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	4880      	ldr	r0, [pc, #512]	@ (8002640 <MX_GPIO_Init+0x8a0>)
 800243e:	f001 fe75 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002452:	2308      	movs	r3, #8
 8002454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800245a:	4619      	mov	r1, r3
 800245c:	487a      	ldr	r0, [pc, #488]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 800245e:	f001 fe65 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8002462:	2340      	movs	r3, #64	@ 0x40
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002466:	2301      	movs	r3, #1
 8002468:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800246a:	2302      	movs	r3, #2
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	4873      	ldr	r0, [pc, #460]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 800247a:	f001 fe57 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800247e:	2328      	movs	r3, #40	@ 0x28
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800248e:	230c      	movs	r3, #12
 8002490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002492:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	4868      	ldr	r0, [pc, #416]	@ (800263c <MX_GPIO_Init+0x89c>)
 800249a:	f001 fe47 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 800249e:	23c0      	movs	r3, #192	@ 0xc0
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024a6:	2302      	movs	r3, #2
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	4865      	ldr	r0, [pc, #404]	@ (800264c <MX_GPIO_Init+0x8ac>)
 80024b6:	f001 fe39 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80024ba:	2308      	movs	r3, #8
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ca:	230c      	movs	r3, #12
 80024cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d2:	4619      	mov	r1, r3
 80024d4:	485c      	ldr	r0, [pc, #368]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 80024d6:	f001 fe29 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024da:	2332      	movs	r3, #50	@ 0x32
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024ea:	230b      	movs	r3, #11
 80024ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	4854      	ldr	r0, [pc, #336]	@ (8002648 <MX_GPIO_Init+0x8a8>)
 80024f6:	f001 fe19 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024fa:	2304      	movs	r3, #4
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800250a:	2309      	movs	r3, #9
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	484e      	ldr	r0, [pc, #312]	@ (8002650 <MX_GPIO_Init+0x8b0>)
 8002516:	f001 fe09 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800251a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800252c:	2309      	movs	r3, #9
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	4847      	ldr	r0, [pc, #284]	@ (8002654 <MX_GPIO_Init+0x8b4>)
 8002538:	f001 fdf8 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800253c:	2308      	movs	r3, #8
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002550:	4619      	mov	r1, r3
 8002552:	483e      	ldr	r0, [pc, #248]	@ (800264c <MX_GPIO_Init+0x8ac>)
 8002554:	f001 fdea 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002558:	2304      	movs	r3, #4
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255c:	2300      	movs	r3, #0
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002568:	4619      	mov	r1, r3
 800256a:	4838      	ldr	r0, [pc, #224]	@ (800264c <MX_GPIO_Init+0x8ac>)
 800256c:	f001 fdde 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002570:	2386      	movs	r3, #134	@ 0x86
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002580:	230b      	movs	r3, #11
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002588:	4619      	mov	r1, r3
 800258a:	482e      	ldr	r0, [pc, #184]	@ (8002644 <MX_GPIO_Init+0x8a4>)
 800258c:	f001 fdce 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002590:	2350      	movs	r3, #80	@ 0x50
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80025a0:	230d      	movs	r3, #13
 80025a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a8:	4619      	mov	r1, r3
 80025aa:	4826      	ldr	r0, [pc, #152]	@ (8002644 <MX_GPIO_Init+0x8a4>)
 80025ac:	f001 fdbe 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80025b0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b6:	2312      	movs	r3, #18
 80025b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025c2:	2304      	movs	r3, #4
 80025c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ca:	4619      	mov	r1, r3
 80025cc:	481b      	ldr	r0, [pc, #108]	@ (800263c <MX_GPIO_Init+0x89c>)
 80025ce:	f001 fdad 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80025d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025e4:	230a      	movs	r3, #10
 80025e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4818      	ldr	r0, [pc, #96]	@ (8002650 <MX_GPIO_Init+0x8b0>)
 80025f0:	f001 fd9c 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 80025f4:	2340      	movs	r3, #64	@ 0x40
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025fc:	2302      	movs	r3, #2
 80025fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002608:	4619      	mov	r1, r3
 800260a:	480c      	ldr	r0, [pc, #48]	@ (800263c <MX_GPIO_Init+0x89c>)
 800260c:	f001 fd8e 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002610:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002622:	2305      	movs	r3, #5
 8002624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	4808      	ldr	r0, [pc, #32]	@ (8002650 <MX_GPIO_Init+0x8b0>)
 800262e:	f001 fd7d 	bl	800412c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002632:	bf00      	nop
 8002634:	3740      	adds	r7, #64	@ 0x40
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40022000 	.word	0x40022000
 8002644:	40020000 	.word	0x40020000
 8002648:	40020800 	.word	0x40020800
 800264c:	40021800 	.word	0x40021800
 8002650:	40020400 	.word	0x40020400
 8002654:	40020c00 	.word	0x40020c00

08002658 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Setup code
	ProgramStateFSM progStateLocal;
	float PPMValue;
	bool sentAlarmMSG = false; // flag to transmit alarm msg only once
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]
	bool meassuring = false;
 8002664:	2300      	movs	r3, #0
 8002666:	75bb      	strb	r3, [r7, #22]
	uint16_t delay_main_task_time = 5;
 8002668:	2305      	movs	r3, #5
 800266a:	82bb      	strh	r3, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 800266c:	4bb3      	ldr	r3, [pc, #716]	@ (800293c <StartMainTask+0x2e4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	4618      	mov	r0, r3
 8002676:	f005 f8b9 	bl	80077ec <osMutexAcquire>
	  progStateLocal = progState;
 800267a:	4bb1      	ldr	r3, [pc, #708]	@ (8002940 <StartMainTask+0x2e8>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	74fb      	strb	r3, [r7, #19]
	  osMutexRelease(RegimeMutexHandle);
 8002680:	4bae      	ldr	r3, [pc, #696]	@ (800293c <StartMainTask+0x2e4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f005 f90f 	bl	80078a8 <osMutexRelease>

	  PPMValue = ReadGasSensor();
 800268a:	f7fe fdf6 	bl	800127a <ReadGasSensor>
 800268e:	ed87 0a03 	vstr	s0, [r7, #12]

	  switch(progStateLocal)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b04      	cmp	r3, #4
 8002696:	f200 80de 	bhi.w	8002856 <StartMainTask+0x1fe>
 800269a:	a201      	add	r2, pc, #4	@ (adr r2, 80026a0 <StartMainTask+0x48>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026b5 	.word	0x080026b5
 80026a4:	08002745 	.word	0x08002745
 80026a8:	0800274f 	.word	0x0800274f
 80026ac:	080027a7 	.word	0x080027a7
 80026b0:	080027ff 	.word	0x080027ff
	  {
	  	  case P_IDLE_START:

	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80026b4:	4ba3      	ldr	r3, [pc, #652]	@ (8002944 <StartMainTask+0x2ec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	4618      	mov	r0, r3
 80026be:	f005 f895 	bl	80077ec <osMutexAcquire>

	  		  HelpSendUART(len_of_array, cmdStrings);
 80026c2:	2314      	movs	r3, #20
 80026c4:	49a0      	ldr	r1, [pc, #640]	@ (8002948 <StartMainTask+0x2f0>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f870 	bl	80017ac <HelpSendUART>
	  		  UART_TransmitString(IdleMSG);
 80026cc:	489f      	ldr	r0, [pc, #636]	@ (800294c <StartMainTask+0x2f4>)
 80026ce:	f7ff f803 	bl	80016d8 <UART_TransmitString>
	  		  osMutexRelease(UARTMutexHandle);
 80026d2:	4b9c      	ldr	r3, [pc, #624]	@ (8002944 <StartMainTask+0x2ec>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 f8e6 	bl	80078a8 <osMutexRelease>

	  		  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 80026dc:	4b97      	ldr	r3, [pc, #604]	@ (800293c <StartMainTask+0x2e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 f881 	bl	80077ec <osMutexAcquire>
	  		  progState = P_IDLE;
 80026ea:	4b95      	ldr	r3, [pc, #596]	@ (8002940 <StartMainTask+0x2e8>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(RegimeMutexHandle);
 80026f0:	4b92      	ldr	r3, [pc, #584]	@ (800293c <StartMainTask+0x2e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 f8d7 	bl	80078a8 <osMutexRelease>

	  		  // LED Blink logic //
	  		  //osTimerStart(LEDTimerCallback,500);

	  		  osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 80026fa:	4b95      	ldr	r3, [pc, #596]	@ (8002950 <StartMainTask+0x2f8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002702:	4618      	mov	r0, r3
 8002704:	f005 f872 	bl	80077ec <osMutexAcquire>
	  		  ledState = LED_OFF;
 8002708:	4b92      	ldr	r3, [pc, #584]	@ (8002954 <StartMainTask+0x2fc>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(LED_FSM_MutexHandle);
 800270e:	4b90      	ldr	r3, [pc, #576]	@ (8002950 <StartMainTask+0x2f8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f005 f8c8 	bl	80078a8 <osMutexRelease>

	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 8002718:	4b8f      	ldr	r3, [pc, #572]	@ (8002958 <StartMainTask+0x300>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	4618      	mov	r0, r3
 8002722:	f005 f863 	bl	80077ec <osMutexAcquire>
	  		  progChangeState = PC_IDLE;
 8002726:	4b8d      	ldr	r3, [pc, #564]	@ (800295c <StartMainTask+0x304>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(SystemWorkStateMutexHandle);
 800272c:	4b8a      	ldr	r3, [pc, #552]	@ (8002958 <StartMainTask+0x300>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f005 f8b9 	bl	80078a8 <osMutexRelease>

	  		  meassuring = false;
 8002736:	2300      	movs	r3, #0
 8002738:	75bb      	strb	r3, [r7, #22]
	  		  SetIndicatorLEDs(0); // resets the indicator
 800273a:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8002960 <StartMainTask+0x308>
 800273e:	f7fe fcab 	bl	8001098 <SetIndicatorLEDs>

		  break;
 8002742:	e088      	b.n	8002856 <StartMainTask+0x1fe>

	  	  case P_IDLE:

	  		  //System waits for configuration
	  		  meassuring = false;
 8002744:	2300      	movs	r3, #0
 8002746:	75bb      	strb	r3, [r7, #22]
	  		  delay_main_task_time = 5;
 8002748:	2305      	movs	r3, #5
 800274a:	82bb      	strh	r3, [r7, #20]

		  break;
 800274c:	e083      	b.n	8002856 <StartMainTask+0x1fe>

	  	  case P_WORK_S1:

	  		  meassuring = true;
 800274e:	2301      	movs	r3, #1
 8002750:	75bb      	strb	r3, [r7, #22]

	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002752:	4b7c      	ldr	r3, [pc, #496]	@ (8002944 <StartMainTask+0x2ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f04f 31ff 	mov.w	r1, #4294967295
 800275a:	4618      	mov	r0, r3
 800275c:	f005 f846 	bl	80077ec <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 8002760:	4880      	ldr	r0, [pc, #512]	@ (8002964 <StartMainTask+0x30c>)
 8002762:	f7fe ffb9 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002766:	ed97 0a03 	vldr	s0, [r7, #12]
 800276a:	f7fe fff9 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 800276e:	4b75      	ldr	r3, [pc, #468]	@ (8002944 <StartMainTask+0x2ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f005 f898 	bl	80078a8 <osMutexRelease>
	  		  delay_main_task_time = 1000;
 8002778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277c:	82bb      	strh	r3, [r7, #20]

	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 800277e:	4b76      	ldr	r3, [pc, #472]	@ (8002958 <StartMainTask+0x300>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f04f 31ff 	mov.w	r1, #4294967295
 8002786:	4618      	mov	r0, r3
 8002788:	f005 f830 	bl	80077ec <osMutexAcquire>
	  		  if(progChangeState == PC_IDLE)
 800278c:	4b73      	ldr	r3, [pc, #460]	@ (800295c <StartMainTask+0x304>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <StartMainTask+0x142>
	  		  {
		  		  progChangeState = PC_WORK_START;
 8002794:	4b71      	ldr	r3, [pc, #452]	@ (800295c <StartMainTask+0x304>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
	  		  }
	  	      osMutexRelease(SystemWorkStateMutexHandle);
 800279a:	4b6f      	ldr	r3, [pc, #444]	@ (8002958 <StartMainTask+0x300>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f005 f882 	bl	80078a8 <osMutexRelease>

		  break;
 80027a4:	e057      	b.n	8002856 <StartMainTask+0x1fe>

	  	  case P_WORK_S3:

	  		  meassuring = true;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75bb      	strb	r3, [r7, #22]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80027aa:	4b66      	ldr	r3, [pc, #408]	@ (8002944 <StartMainTask+0x2ec>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f04f 31ff 	mov.w	r1, #4294967295
 80027b2:	4618      	mov	r0, r3
 80027b4:	f005 f81a 	bl	80077ec <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 80027b8:	486a      	ldr	r0, [pc, #424]	@ (8002964 <StartMainTask+0x30c>)
 80027ba:	f7fe ff8d 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 80027be:	ed97 0a03 	vldr	s0, [r7, #12]
 80027c2:	f7fe ffcd 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 80027c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002944 <StartMainTask+0x2ec>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 f86c 	bl	80078a8 <osMutexRelease>

	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 80027d0:	4b61      	ldr	r3, [pc, #388]	@ (8002958 <StartMainTask+0x300>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295
 80027d8:	4618      	mov	r0, r3
 80027da:	f005 f807 	bl	80077ec <osMutexAcquire>
	  		  if(progChangeState == PC_IDLE)
 80027de:	4b5f      	ldr	r3, [pc, #380]	@ (800295c <StartMainTask+0x304>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <StartMainTask+0x194>
	  		  {
		  		  progChangeState = PC_WORK_START;
 80027e6:	4b5d      	ldr	r3, [pc, #372]	@ (800295c <StartMainTask+0x304>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
	  		  }
	  	      osMutexRelease(SystemWorkStateMutexHandle);
 80027ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002958 <StartMainTask+0x300>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f005 f859 	bl	80078a8 <osMutexRelease>
	  	      delay_main_task_time = 3000;
 80027f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80027fa:	82bb      	strh	r3, [r7, #20]
		  break;
 80027fc:	e02b      	b.n	8002856 <StartMainTask+0x1fe>

	  	  case P_WORK_S5:

	  		  meassuring = true;
 80027fe:	2301      	movs	r3, #1
 8002800:	75bb      	strb	r3, [r7, #22]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002802:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <StartMainTask+0x2ec>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f04f 31ff 	mov.w	r1, #4294967295
 800280a:	4618      	mov	r0, r3
 800280c:	f004 ffee 	bl	80077ec <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 8002810:	4854      	ldr	r0, [pc, #336]	@ (8002964 <StartMainTask+0x30c>)
 8002812:	f7fe ff61 	bl	80016d8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002816:	ed97 0a03 	vldr	s0, [r7, #12]
 800281a:	f7fe ffa1 	bl	8001760 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 800281e:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <StartMainTask+0x2ec>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f005 f840 	bl	80078a8 <osMutexRelease>

	  		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 8002828:	4b4b      	ldr	r3, [pc, #300]	@ (8002958 <StartMainTask+0x300>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	4618      	mov	r0, r3
 8002832:	f004 ffdb 	bl	80077ec <osMutexAcquire>
	  		  if(progChangeState == PC_IDLE)
 8002836:	4b49      	ldr	r3, [pc, #292]	@ (800295c <StartMainTask+0x304>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <StartMainTask+0x1ec>
	  		  {
		  		  progChangeState = PC_WORK_START;
 800283e:	4b47      	ldr	r3, [pc, #284]	@ (800295c <StartMainTask+0x304>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
	  		  }
	  	      osMutexRelease(SystemWorkStateMutexHandle);
 8002844:	4b44      	ldr	r3, [pc, #272]	@ (8002958 <StartMainTask+0x300>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f005 f82d 	bl	80078a8 <osMutexRelease>

	  	      delay_main_task_time = 5000;
 800284e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002852:	82bb      	strh	r3, [r7, #20]

		  break;
 8002854:	bf00      	nop
	  }
		  osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 8002856:	4b40      	ldr	r3, [pc, #256]	@ (8002958 <StartMainTask+0x300>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 31ff 	mov.w	r1, #4294967295
 800285e:	4618      	mov	r0, r3
 8002860:	f004 ffc4 	bl	80077ec <osMutexAcquire>
		  if(progChangeState == PC_WORK_START)
 8002864:	4b3d      	ldr	r3, [pc, #244]	@ (800295c <StartMainTask+0x304>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <StartMainTask+0x21a>
		  {
			  progChangeState = PC_WORK;
 800286c:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <StartMainTask+0x304>)
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
		  }
	      osMutexRelease(SystemWorkStateMutexHandle);
 8002872:	4b39      	ldr	r3, [pc, #228]	@ (8002958 <StartMainTask+0x300>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f005 f816 	bl	80078a8 <osMutexRelease>

	  //Take action
	  //Setting the indicator system
	  if(meassuring == true)
 800287c:	7dbb      	ldrb	r3, [r7, #22]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <StartMainTask+0x232>
	  {
		  SetIndicatorLEDs(PPMValue);
 8002882:	ed97 0a03 	vldr	s0, [r7, #12]
 8002886:	f7fe fc07 	bl	8001098 <SetIndicatorLEDs>
	  }

	  //Check for contamination
	  if(meassuring == true)
 800288a:	7dbb      	ldrb	r3, [r7, #22]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d050      	beq.n	8002932 <StartMainTask+0x2da>
	  {
		  if(PPMValue > DangerousPPM)
 8002890:	edd7 7a03 	vldr	s15, [r7, #12]
 8002894:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002968 <StartMainTask+0x310>
 8002898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	dd22      	ble.n	80028e8 <StartMainTask+0x290>
		  {
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80028a2:	4b28      	ldr	r3, [pc, #160]	@ (8002944 <StartMainTask+0x2ec>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f04f 31ff 	mov.w	r1, #4294967295
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 ff9e 	bl	80077ec <osMutexAcquire>
			  UART_TransmitString(AlertMSG);
 80028b0:	482e      	ldr	r0, [pc, #184]	@ (800296c <StartMainTask+0x314>)
 80028b2:	f7fe ff11 	bl	80016d8 <UART_TransmitString>
			  osMutexRelease(UARTMutexHandle);
 80028b6:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <StartMainTask+0x2ec>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 fff4 	bl	80078a8 <osMutexRelease>

			  osMutexAcquire(LED_Blink_MutexHandle, osWaitForever);
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <StartMainTask+0x318>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 ff8f 	bl	80077ec <osMutexAcquire>
				quality_status = false;
 80028ce:	4b29      	ldr	r3, [pc, #164]	@ (8002974 <StartMainTask+0x31c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(LED_Blink_MutexHandle);
 80028d4:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <StartMainTask+0x318>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 ffe5 	bl	80078a8 <osMutexRelease>

			  sentAlarmMSG = true;
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
			  AlarmON();
 80028e2:	f7fe fc07 	bl	80010f4 <AlarmON>
 80028e6:	e024      	b.n	8002932 <StartMainTask+0x2da>
		  }
		  else
		  {
			  osMutexAcquire(LED_Blink_MutexHandle, osWaitForever);
 80028e8:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <StartMainTask+0x318>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 ff7b 	bl	80077ec <osMutexAcquire>
				quality_status = true;
 80028f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002974 <StartMainTask+0x31c>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(LED_Blink_MutexHandle);
 80028fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <StartMainTask+0x318>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f004 ffd1 	bl	80078a8 <osMutexRelease>

			  AlarmOFF();
 8002906:	f7fe fbff 	bl	8001108 <AlarmOFF>
			  if(sentAlarmMSG == true)
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <StartMainTask+0x2da>
			  {
				  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <StartMainTask+0x2ec>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	4618      	mov	r0, r3
 800291a:	f004 ff67 	bl	80077ec <osMutexAcquire>
				  UART_TransmitString(RoomClearedMSG);
 800291e:	4816      	ldr	r0, [pc, #88]	@ (8002978 <StartMainTask+0x320>)
 8002920:	f7fe feda 	bl	80016d8 <UART_TransmitString>
				  osMutexRelease(UARTMutexHandle);
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <StartMainTask+0x2ec>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f004 ffbd 	bl	80078a8 <osMutexRelease>

				  sentAlarmMSG = false; // to be avaliable for next time danger happens
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
			  }
		  }
	  }
	  osDelay(delay_main_task_time);
 8002932:	8abb      	ldrh	r3, [r7, #20]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fdb7 	bl	80074a8 <osDelay>
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 800293a:	e697      	b.n	800266c <StartMainTask+0x14>
 800293c:	200004e8 	.word	0x200004e8
 8002940:	20000501 	.word	0x20000501
 8002944:	200004f0 	.word	0x200004f0
 8002948:	20000110 	.word	0x20000110
 800294c:	2000000c 	.word	0x2000000c
 8002950:	200004f4 	.word	0x200004f4
 8002954:	20000503 	.word	0x20000503
 8002958:	200004fc 	.word	0x200004fc
 800295c:	20000502 	.word	0x20000502
 8002960:	00000000 	.word	0x00000000
 8002964:	2000002c 	.word	0x2000002c
 8002968:	44fa0000 	.word	0x44fa0000
 800296c:	20000034 	.word	0x20000034
 8002970:	200004ec 	.word	0x200004ec
 8002974:	20000008 	.word	0x20000008
 8002978:	20000058 	.word	0x20000058

0800297c <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void *argument)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	bool CommandStatus;
	float LocalPPM;
  /* Infinite loop */
  for(;;)
  {
	  if(IsTransferComplete() == true)
 8002984:	f7fe ffee 	bl	8001964 <IsTransferComplete>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80e3 	beq.w	8002b56 <StartTerminalTask+0x1da>
	  {
		  CommandStatus = StringCompareFromUART(GetRxBuffer(), cmdStrings, len_of_array, &CommandIndex);
 8002990:	f7fe fff4 	bl	800197c <GetRxBuffer>
 8002994:	2214      	movs	r2, #20
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4971      	ldr	r1, [pc, #452]	@ (8002b60 <StartTerminalTask+0x1e4>)
 800299c:	f7ff f803 	bl	80019a6 <StringCompareFromUART>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
		  if(CommandStatus == false)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d018      	beq.n	80029e2 <StartTerminalTask+0x66>
		  {
			  UART_TransmitString(ErrorMSG);
 80029b0:	486c      	ldr	r0, [pc, #432]	@ (8002b64 <StartTerminalTask+0x1e8>)
 80029b2:	f7fe fe91 	bl	80016d8 <UART_TransmitString>
			  ClearRxBuffer();
 80029b6:	f7fe ffb7 	bl	8001928 <ClearRxBuffer>
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80029ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002b68 <StartTerminalTask+0x1ec>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f04f 31ff 	mov.w	r1, #4294967295
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 ff12 	bl	80077ec <osMutexAcquire>
			  HelpSendUART(len_of_array, cmdStrings);
 80029c8:	2314      	movs	r3, #20
 80029ca:	4965      	ldr	r1, [pc, #404]	@ (8002b60 <StartTerminalTask+0x1e4>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe feed 	bl	80017ac <HelpSendUART>
			  osMutexRelease(UARTMutexHandle);
 80029d2:	4b65      	ldr	r3, [pc, #404]	@ (8002b68 <StartTerminalTask+0x1ec>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 ff66 	bl	80078a8 <osMutexRelease>
			  progStateLocal = P_IDLE;
 80029dc:	2301      	movs	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
 80029e0:	e0b9      	b.n	8002b56 <StartTerminalTask+0x1da>
		  }
		  else
		  {
			  ClearRxBuffer();
 80029e2:	f7fe ffa1 	bl	8001928 <ClearRxBuffer>
				uartCmdState = CommandIndex;
 80029e6:	89bb      	ldrh	r3, [r7, #12]
 80029e8:	73bb      	strb	r3, [r7, #14]

				switch(uartCmdState)
 80029ea:	7bbb      	ldrb	r3, [r7, #14]
 80029ec:	2b14      	cmp	r3, #20
 80029ee:	f200 80a3 	bhi.w	8002b38 <StartTerminalTask+0x1bc>
 80029f2:	a201      	add	r2, pc, #4	@ (adr r2, 80029f8 <StartTerminalTask+0x7c>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a4d 	.word	0x08002a4d
 80029fc:	08002a53 	.word	0x08002a53
 8002a00:	08002a5f 	.word	0x08002a5f
 8002a04:	08002a6b 	.word	0x08002a6b
 8002a08:	08002a77 	.word	0x08002a77
 8002a0c:	08002a81 	.word	0x08002a81
 8002a10:	08002a91 	.word	0x08002a91
 8002a14:	08002a9d 	.word	0x08002a9d
 8002a18:	08002aa9 	.word	0x08002aa9
 8002a1c:	08002ab3 	.word	0x08002ab3
 8002a20:	08002abd 	.word	0x08002abd
 8002a24:	08002ac9 	.word	0x08002ac9
 8002a28:	08002ad5 	.word	0x08002ad5
 8002a2c:	08002ae1 	.word	0x08002ae1
 8002a30:	08002aed 	.word	0x08002aed
 8002a34:	08002af9 	.word	0x08002af9
 8002a38:	08002b05 	.word	0x08002b05
 8002a3c:	08002b11 	.word	0x08002b11
 8002a40:	08002b1d 	.word	0x08002b1d
 8002a44:	08002b29 	.word	0x08002b29
 8002a48:	08002b39 	.word	0x08002b39
				{
					case cmd_0:

						progStateLocal = P_IDLE_START;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	75fb      	strb	r3, [r7, #23]

						break;
 8002a50:	e072      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_1:

						progStateLocal = P_WORK_S1;
 8002a52:	2302      	movs	r3, #2
 8002a54:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S1WorkStateMSG);
 8002a56:	4845      	ldr	r0, [pc, #276]	@ (8002b6c <StartTerminalTask+0x1f0>)
 8002a58:	f7fe fe3e 	bl	80016d8 <UART_TransmitString>

						break;
 8002a5c:	e06c      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_2:

						progStateLocal = P_WORK_S3;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S3WorkStateMSG);
 8002a62:	4843      	ldr	r0, [pc, #268]	@ (8002b70 <StartTerminalTask+0x1f4>)
 8002a64:	f7fe fe38 	bl	80016d8 <UART_TransmitString>

						break;
 8002a68:	e066      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_3:

						progStateLocal = P_WORK_S5;
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S5WorkStateMSG);
 8002a6e:	4841      	ldr	r0, [pc, #260]	@ (8002b74 <StartTerminalTask+0x1f8>)
 8002a70:	f7fe fe32 	bl	80016d8 <UART_TransmitString>

						break;
 8002a74:	e060      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_4:

						LocalPPM = ReadGasSensor();
 8002a76:	f7fe fc00 	bl	800127a <ReadGasSensor>
 8002a7a:	ed87 0a04 	vstr	s0, [r7, #16]

						break;
 8002a7e:	e05b      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_5:

						UART_TransmitString(PPM_MSG);
 8002a80:	483d      	ldr	r0, [pc, #244]	@ (8002b78 <StartTerminalTask+0x1fc>)
 8002a82:	f7fe fe29 	bl	80016d8 <UART_TransmitString>
						UART_TransmitFloat(LocalPPM);
 8002a86:	ed97 0a04 	vldr	s0, [r7, #16]
 8002a8a:	f7fe fe69 	bl	8001760 <UART_TransmitFloat>

						break;
 8002a8e:	e053      	b.n	8002b38 <StartTerminalTask+0x1bc>


					case cmd_6:

						UART_TransmitString(FAN_ON);
 8002a90:	483a      	ldr	r0, [pc, #232]	@ (8002b7c <StartTerminalTask+0x200>)
 8002a92:	f7fe fe21 	bl	80016d8 <UART_TransmitString>


						progStateLocal = P_IDLE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]

						break;
 8002a9a:	e04d      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_7:

						UART_TransmitString(FAN_OFF);
 8002a9c:	4838      	ldr	r0, [pc, #224]	@ (8002b80 <StartTerminalTask+0x204>)
 8002a9e:	f7fe fe1b 	bl	80016d8 <UART_TransmitString>
						progStateLocal = P_IDLE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]

						break;
 8002aa6:	e047      	b.n	8002b38 <StartTerminalTask+0x1bc>


					case cmd_8:

						AlarmON();
 8002aa8:	f7fe fb24 	bl	80010f4 <AlarmON>
						progStateLocal = P_IDLE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	75fb      	strb	r3, [r7, #23]

						break;
 8002ab0:	e042      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_9:

						AlarmOFF();
 8002ab2:	f7fe fb29 	bl	8001108 <AlarmOFF>
						progStateLocal = P_IDLE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]

						break;
 8002aba:	e03d      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_10:

						LED_Drive(true);
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7fe fc31 	bl	8001324 <LED_Drive>
						progStateLocal = P_IDLE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]

						break;
 8002ac6:	e037      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_11:

						LED_Drive(false);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fe fc2b 	bl	8001324 <LED_Drive>
						progStateLocal = P_IDLE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]

						break;
 8002ad2:	e031      	b.n	8002b38 <StartTerminalTask+0x1bc>


					case cmd_12:

						SetIndicatorLEDsNum(0);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe faef 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]

						break;
 8002ade:	e02b      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_13:

						SetIndicatorLEDsNum(1);
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7fe fae9 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]

						break;
 8002aea:	e025      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_14:

						SetIndicatorLEDsNum(2);
 8002aec:	2002      	movs	r0, #2
 8002aee:	f7fe fae3 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]

						break;
 8002af6:	e01f      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_15:

						SetIndicatorLEDsNum(3);
 8002af8:	2003      	movs	r0, #3
 8002afa:	f7fe fadd 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]

						break;
 8002b02:	e019      	b.n	8002b38 <StartTerminalTask+0x1bc>


					case cmd_16:

						SetIndicatorLEDsNum(4);
 8002b04:	2004      	movs	r0, #4
 8002b06:	f7fe fad7 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]

						break;
 8002b0e:	e013      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_17:

						SetIndicatorLEDsNum(5);
 8002b10:	2005      	movs	r0, #5
 8002b12:	f7fe fad1 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]

						break;
 8002b1a:	e00d      	b.n	8002b38 <StartTerminalTask+0x1bc>


					case cmd_18:

						SetIndicatorLEDsNum(6);
 8002b1c:	2006      	movs	r0, #6
 8002b1e:	f7fe facb 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]

						break;
 8002b26:	e007      	b.n	8002b38 <StartTerminalTask+0x1bc>

					case cmd_19:

						HelpSendUART(len_of_array, cmdStrings);
 8002b28:	2314      	movs	r3, #20
 8002b2a:	490d      	ldr	r1, [pc, #52]	@ (8002b60 <StartTerminalTask+0x1e4>)
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fe3d 	bl	80017ac <HelpSendUART>
						progStateLocal = P_IDLE;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]

						break;
 8002b36:	bf00      	nop
						break;
				}

				//ClearRxBuffer();

				osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002b38:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <StartTerminalTask+0x208>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fe53 	bl	80077ec <osMutexAcquire>
				progState = progStateLocal;
 8002b46:	4a10      	ldr	r2, [pc, #64]	@ (8002b88 <StartTerminalTask+0x20c>)
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	7013      	strb	r3, [r2, #0]
				osMutexRelease(RegimeMutexHandle);
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <StartTerminalTask+0x208>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 fea9 	bl	80078a8 <osMutexRelease>
		  }
	  }

    osDelay(100);
 8002b56:	2064      	movs	r0, #100	@ 0x64
 8002b58:	f004 fca6 	bl	80074a8 <osDelay>
	  if(IsTransferComplete() == true)
 8002b5c:	e712      	b.n	8002984 <StartTerminalTask+0x8>
 8002b5e:	bf00      	nop
 8002b60:	20000110 	.word	0x20000110
 8002b64:	200000e0 	.word	0x200000e0
 8002b68:	200004f0 	.word	0x200004f0
 8002b6c:	20000080 	.word	0x20000080
 8002b70:	20000098 	.word	0x20000098
 8002b74:	200000b0 	.word	0x200000b0
 8002b78:	2000002c 	.word	0x2000002c
 8002b7c:	200000c8 	.word	0x200000c8
 8002b80:	200000d4 	.word	0x200000d4
 8002b84:	200004e8 	.word	0x200004e8
 8002b88:	20000501 	.word	0x20000501

08002b8c <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
	bool read_button_flag = true;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73bb      	strb	r3, [r7, #14]
	bool press_button_flag = false;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
	press_button_flag = ReadSignal(&read_button_flag);
 8002b9c:	f107 030e 	add.w	r3, r7, #14
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fd87 	bl	80016b4 <ReadSignal>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
    if(press_button_flag == true)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <StartButtonTask+0x5c>
    {
    	osTimerStart(ButtonTimerHandle, 3000);
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <StartButtonTask+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fd3d 	bl	8007638 <osTimerStart>

    	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <StartButtonTask+0x68>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 fe10 	bl	80077ec <osMutexAcquire>
    	button_press_counter++;
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <StartButtonTask+0x6c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <StartButtonTask+0x6c>)
 8002bd8:	701a      	strb	r2, [r3, #0]
    	osMutexRelease(ButtonCountMutexHandle);
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <StartButtonTask+0x68>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fe62 	bl	80078a8 <osMutexRelease>

    	press_button_flag = false;
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
    }
    osDelay(5);
 8002be8:	2005      	movs	r0, #5
 8002bea:	f004 fc5d 	bl	80074a8 <osDelay>
	press_button_flag = ReadSignal(&read_button_flag);
 8002bee:	e7d5      	b.n	8002b9c <StartButtonTask+0x10>
 8002bf0:	200004e4 	.word	0x200004e4
 8002bf4:	200004f8 	.word	0x200004f8
 8002bf8:	20000500 	.word	0x20000500

08002bfc <StartSingleLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSingleLEDTask */
void StartSingleLEDTask(void *argument)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSingleLEDTask */

	LED_StatusFSM ledStateLocal;
	bool quality_status_local;
	ProgramStateFSM progStateLocal;
	bool local_task_enable = false;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73bb      	strb	r3, [r7, #14]

	uint16_t delay_time = 10;
 8002c08:	230a      	movs	r3, #10
 8002c0a:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	//============ Update from mutex ============//
	osMutexAcquire(LED_Blink_MutexHandle, osWaitForever);
 8002c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002d48 <StartSingleLEDTask+0x14c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 fde9 	bl	80077ec <osMutexAcquire>
		quality_status_local = quality_status;
 8002c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d4c <StartSingleLEDTask+0x150>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	72fb      	strb	r3, [r7, #11]
	osMutexRelease(LED_Blink_MutexHandle);
 8002c20:	4b49      	ldr	r3, [pc, #292]	@ (8002d48 <StartSingleLEDTask+0x14c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fe3f 	bl	80078a8 <osMutexRelease>

	osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8002c2a:	4b49      	ldr	r3, [pc, #292]	@ (8002d50 <StartSingleLEDTask+0x154>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fdda 	bl	80077ec <osMutexAcquire>
		ledStateLocal = ledState;
 8002c38:	4b46      	ldr	r3, [pc, #280]	@ (8002d54 <StartSingleLEDTask+0x158>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(LED_FSM_MutexHandle);
 8002c3e:	4b44      	ldr	r3, [pc, #272]	@ (8002d50 <StartSingleLEDTask+0x154>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fe30 	bl	80078a8 <osMutexRelease>

	osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002c48:	4b43      	ldr	r3, [pc, #268]	@ (8002d58 <StartSingleLEDTask+0x15c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fdcb 	bl	80077ec <osMutexAcquire>
		progStateLocal = progState;
 8002c56:	4b41      	ldr	r3, [pc, #260]	@ (8002d5c <StartSingleLEDTask+0x160>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	72bb      	strb	r3, [r7, #10]
	osMutexRelease(RegimeMutexHandle);
 8002c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d58 <StartSingleLEDTask+0x15c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fe21 	bl	80078a8 <osMutexRelease>
	//========== END Update from mutex ==========//

	if((progStateLocal != P_IDLE_START) && (progStateLocal != P_IDLE))
 8002c66:	7abb      	ldrb	r3, [r7, #10]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d067      	beq.n	8002d3c <StartSingleLEDTask+0x140>
 8002c6c:	7abb      	ldrb	r3, [r7, #10]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d064      	beq.n	8002d3c <StartSingleLEDTask+0x140>
	{
		//============ Checking does system first time in work state after idle state ============//
		osMutexAcquire(SystemWorkStateMutexHandle, osWaitForever);
 8002c72:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <StartSingleLEDTask+0x164>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fdb6 	bl	80077ec <osMutexAcquire>
		if(progChangeState == PC_WORK)
 8002c80:	4b38      	ldr	r3, [pc, #224]	@ (8002d64 <StartSingleLEDTask+0x168>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d105      	bne.n	8002c94 <StartSingleLEDTask+0x98>
		{
			local_task_enable = true;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73bb      	strb	r3, [r7, #14]
			progChangeState = PC_WORK_CHECK;
 8002c8c:	4b35      	ldr	r3, [pc, #212]	@ (8002d64 <StartSingleLEDTask+0x168>)
 8002c8e:	2203      	movs	r2, #3
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e001      	b.n	8002c98 <StartSingleLEDTask+0x9c>
		}
		else
		{
			local_task_enable = false;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73bb      	strb	r3, [r7, #14]
		}
		osMutexRelease(SystemWorkStateMutexHandle);
 8002c98:	4b31      	ldr	r3, [pc, #196]	@ (8002d60 <StartSingleLEDTask+0x164>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 fe03 	bl	80078a8 <osMutexRelease>
		//========= END  Checking does system first time in work state after idle state =========//

		//============ Update logic state ===================//

		if(local_task_enable == true)
 8002ca2:	7bbb      	ldrb	r3, [r7, #14]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <StartSingleLEDTask+0xce>
		{
			if(quality_status_local == true)
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <StartSingleLEDTask+0xb8>
			{
				ledStateLocal = LED_ON_CORRECT;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	e007      	b.n	8002cc4 <StartSingleLEDTask+0xc8>
			}
			else if(quality_status_local == false)
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
 8002cb6:	f083 0301 	eor.w	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <StartSingleLEDTask+0xc8>
			{
				ledStateLocal = LED_ON_INCORRECT;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	73fb      	strb	r3, [r7, #15]
			}
			local_task_enable = false;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73bb      	strb	r3, [r7, #14]
 8002cc8:	e029      	b.n	8002d1e <StartSingleLEDTask+0x122>
		}
		else
		{
			switch(ledStateLocal)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d01e      	beq.n	8002d0e <StartSingleLEDTask+0x112>
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	dc24      	bgt.n	8002d1e <StartSingleLEDTask+0x122>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <StartSingleLEDTask+0xe2>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d00f      	beq.n	8002cfc <StartSingleLEDTask+0x100>
 8002cdc:	e01f      	b.n	8002d1e <StartSingleLEDTask+0x122>
			{
				case LED_OFF:
					LED_Drive(false);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7fe fb20 	bl	8001324 <LED_Drive>
					delay_time = 3000;
 8002ce4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002ce8:	81bb      	strh	r3, [r7, #12]
					if(quality_status_local == true)
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <StartSingleLEDTask+0xfa>
					{
						ledStateLocal = LED_ON_CORRECT;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
					else
					{
						ledStateLocal = LED_ON_INCORRECT;
					}

					break;
 8002cf4:	e013      	b.n	8002d1e <StartSingleLEDTask+0x122>
						ledStateLocal = LED_ON_INCORRECT;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	73fb      	strb	r3, [r7, #15]
					break;
 8002cfa:	e010      	b.n	8002d1e <StartSingleLEDTask+0x122>

				case LED_ON_CORRECT:
					LED_Drive(true);
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7fe fb11 	bl	8001324 <LED_Drive>
					delay_time = 2000;
 8002d02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d06:	81bb      	strh	r3, [r7, #12]
					ledStateLocal = LED_OFF;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]

					break;
 8002d0c:	e007      	b.n	8002d1e <StartSingleLEDTask+0x122>

				case LED_ON_INCORRECT:

					LED_Drive(true);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f7fe fb08 	bl	8001324 <LED_Drive>
					delay_time = 100;
 8002d14:	2364      	movs	r3, #100	@ 0x64
 8002d16:	81bb      	strh	r3, [r7, #12]
					ledStateLocal = LED_OFF;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]

					break;
 8002d1c:	bf00      	nop
			}
		}

		//========== Keep LED state for delay_time ===========//
		osMutexAcquire(LED_FSM_MutexHandle, osWaitForever);
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <StartSingleLEDTask+0x154>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f04f 31ff 	mov.w	r1, #4294967295
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fd60 	bl	80077ec <osMutexAcquire>
			ledState = ledStateLocal;
 8002d2c:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <StartSingleLEDTask+0x158>)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	7013      	strb	r3, [r2, #0]
		osMutexRelease(LED_FSM_MutexHandle);
 8002d32:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <StartSingleLEDTask+0x154>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 fdb6 	bl	80078a8 <osMutexRelease>
		//========== END Keep LED state for delay_time ===========//

	}

	//============ Keep LED state for delay_time or task delay execute =============//
	osDelay(delay_time);
 8002d3c:	89bb      	ldrh	r3, [r7, #12]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 fbb2 	bl	80074a8 <osDelay>
	osMutexAcquire(LED_Blink_MutexHandle, osWaitForever);
 8002d44:	e762      	b.n	8002c0c <StartSingleLEDTask+0x10>
 8002d46:	bf00      	nop
 8002d48:	200004ec 	.word	0x200004ec
 8002d4c:	20000008 	.word	0x20000008
 8002d50:	200004f4 	.word	0x200004f4
 8002d54:	20000503 	.word	0x20000503
 8002d58:	200004e8 	.word	0x200004e8
 8002d5c:	20000501 	.word	0x20000501
 8002d60:	200004fc 	.word	0x200004fc
 8002d64:	20000502 	.word	0x20000502

08002d68 <ButtonTimerCallback>:
  /* USER CODE END StartSingleLEDTask */
}

/* ButtonTimerCallback function */
void ButtonTimerCallback(void *argument)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTimerCallback */
	ProgramStateFSM progStateLocal;
	uint8_t ButtonCountLocal;

	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <ButtonTimerCallback+0xc0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fd37 	bl	80077ec <osMutexAcquire>
	ButtonCountLocal = button_press_counter;
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <ButtonTimerCallback+0xc4>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	73bb      	strb	r3, [r7, #14]
	osMutexRelease(ButtonCountMutexHandle);
 8002d84:	4b28      	ldr	r3, [pc, #160]	@ (8002e28 <ButtonTimerCallback+0xc0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 fd8d 	bl	80078a8 <osMutexRelease>

	switch(ButtonCountLocal)
 8002d8e:	7bbb      	ldrb	r3, [r7, #14]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d827      	bhi.n	8002de4 <ButtonTimerCallback+0x7c>
 8002d94:	a201      	add	r2, pc, #4	@ (adr r2, 8002d9c <ButtonTimerCallback+0x34>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002db5 	.word	0x08002db5
 8002da0:	08002dbb 	.word	0x08002dbb
 8002da4:	08002dc7 	.word	0x08002dc7
 8002da8:	08002dd3 	.word	0x08002dd3
 8002dac:	08002de5 	.word	0x08002de5
 8002db0:	08002ddf 	.word	0x08002ddf
	{
		case 0:

			progStateLocal = P_IDLE_START;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]

			break;
 8002db8:	e014      	b.n	8002de4 <ButtonTimerCallback+0x7c>

		case 1:

			progStateLocal = P_WORK_S1;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S1WorkStateMSG);
 8002dbe:	481c      	ldr	r0, [pc, #112]	@ (8002e30 <ButtonTimerCallback+0xc8>)
 8002dc0:	f7fe fc8a 	bl	80016d8 <UART_TransmitString>

			break;
 8002dc4:	e00e      	b.n	8002de4 <ButtonTimerCallback+0x7c>

		case 2:

			progStateLocal = P_WORK_S3;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S3WorkStateMSG);
 8002dca:	481a      	ldr	r0, [pc, #104]	@ (8002e34 <ButtonTimerCallback+0xcc>)
 8002dcc:	f7fe fc84 	bl	80016d8 <UART_TransmitString>

			break;
 8002dd0:	e008      	b.n	8002de4 <ButtonTimerCallback+0x7c>

		case 3:

			progStateLocal = P_WORK_S5;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	73fb      	strb	r3, [r7, #15]
			UART_TransmitString(S5WorkStateMSG);
 8002dd6:	4818      	ldr	r0, [pc, #96]	@ (8002e38 <ButtonTimerCallback+0xd0>)
 8002dd8:	f7fe fc7e 	bl	80016d8 <UART_TransmitString>

			break;
 8002ddc:	e002      	b.n	8002de4 <ButtonTimerCallback+0x7c>

			break;

		case 5:

			progStateLocal = P_IDLE_START;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]

			break;
 8002de2:	bf00      	nop

	}

	osMutexAcquire(ButtonCountMutexHandle, osWaitForever);
 8002de4:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <ButtonTimerCallback+0xc0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 fcfd 	bl	80077ec <osMutexAcquire>
	button_press_counter = 0;
 8002df2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <ButtonTimerCallback+0xc4>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
	osMutexRelease(ButtonCountMutexHandle);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <ButtonTimerCallback+0xc0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 fd53 	bl	80078a8 <osMutexRelease>

    osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002e02:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <ButtonTimerCallback+0xd4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fcee 	bl	80077ec <osMutexAcquire>
    progState = progStateLocal;
 8002e10:	4a0b      	ldr	r2, [pc, #44]	@ (8002e40 <ButtonTimerCallback+0xd8>)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	7013      	strb	r3, [r2, #0]
	osMutexRelease(RegimeMutexHandle);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <ButtonTimerCallback+0xd4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 fd44 	bl	80078a8 <osMutexRelease>

   //osTimerStop(ButtonTimerHandle);
  /* USER CODE END ButtonTimerCallback */
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200004f8 	.word	0x200004f8
 8002e2c:	20000500 	.word	0x20000500
 8002e30:	20000080 	.word	0x20000080
 8002e34:	20000098 	.word	0x20000098
 8002e38:	200000b0 	.word	0x200000b0
 8002e3c:	200004e8 	.word	0x200004e8
 8002e40:	20000501 	.word	0x20000501

08002e44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e56:	f000 faf1 	bl	800343c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40002000 	.word	0x40002000

08002e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6c:	b672      	cpsid	i
}
 8002e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <Error_Handler+0x8>

08002e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	210f      	movs	r1, #15
 8002eae:	f06f 0001 	mvn.w	r0, #1
 8002eb2:	f000 ff95 	bl	8003de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800

08002ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	@ (8002f68 <HAL_ADC_MspInit+0xa4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d13c      	bne.n	8002f60 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	4a20      	ldr	r2, [pc, #128]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002eec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002efe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a1a      	ldr	r2, [pc, #104]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002f04:	f043 0320 	orr.w	r3, r3, #32
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b18      	ldr	r3, [pc, #96]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_ADC_MspInit+0xa8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002f2e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002f32:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f34:	2303      	movs	r3, #3
 8002f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4619      	mov	r1, r3
 8002f42:	480b      	ldr	r0, [pc, #44]	@ (8002f70 <HAL_ADC_MspInit+0xac>)
 8002f44:	f001 f8f2 	bl	800412c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4806      	ldr	r0, [pc, #24]	@ (8002f74 <HAL_ADC_MspInit+0xb0>)
 8002f5c:	f001 f8e6 	bl	800412c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f60:	bf00      	nop
 8002f62:	3728      	adds	r7, #40	@ 0x28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40012200 	.word	0x40012200
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40021400 	.word	0x40021400
 8002f74:	40020000 	.word	0x40020000

08002f78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <HAL_CRC_MspInit+0x38>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10b      	bne.n	8002fa2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_CRC_MspInit+0x3c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4a09      	ldr	r2, [pc, #36]	@ (8002fb4 <HAL_CRC_MspInit+0x3c>)
 8002f90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f96:	4b07      	ldr	r3, [pc, #28]	@ (8002fb4 <HAL_CRC_MspInit+0x3c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023000 	.word	0x40023000
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b0ac      	sub	sp, #176	@ 0xb0
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd0:	f107 0318 	add.w	r3, r7, #24
 8002fd4:	2284      	movs	r2, #132	@ 0x84
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f008 fd40 	bl	800ba5e <memset>
  if(huart->Instance==USART1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a36      	ldr	r2, [pc, #216]	@ (80030bc <HAL_UART_MspInit+0x104>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d164      	bne.n	80030b2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fe8:	2340      	movs	r3, #64	@ 0x40
 8002fea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fec:	2300      	movs	r3, #0
 8002fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff0:	f107 0318 	add.w	r3, r7, #24
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 ff93 	bl	8004f20 <HAL_RCCEx_PeriphCLKConfig>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003000:	f7ff ff32 	bl	8002e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003004:	4b2e      	ldr	r3, [pc, #184]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	4a2d      	ldr	r2, [pc, #180]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301c:	4b28      	ldr	r3, [pc, #160]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	4a27      	ldr	r2, [pc, #156]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	6313      	str	r3, [r2, #48]	@ 0x30
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003034:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	4a21      	ldr	r2, [pc, #132]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003040:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <HAL_UART_MspInit+0x108>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003064:	2307      	movs	r3, #7
 8003066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800306e:	4619      	mov	r1, r3
 8003070:	4814      	ldr	r0, [pc, #80]	@ (80030c4 <HAL_UART_MspInit+0x10c>)
 8003072:	f001 f85b 	bl	800412c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003076:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800307a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307e:	2302      	movs	r3, #2
 8003080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003090:	2307      	movs	r3, #7
 8003092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003096:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800309a:	4619      	mov	r1, r3
 800309c:	480a      	ldr	r0, [pc, #40]	@ (80030c8 <HAL_UART_MspInit+0x110>)
 800309e:	f001 f845 	bl	800412c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2105      	movs	r1, #5
 80030a6:	2025      	movs	r0, #37	@ 0x25
 80030a8:	f000 fe9a 	bl	8003de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030ac:	2025      	movs	r0, #37	@ 0x25
 80030ae:	f000 feb3 	bl	8003e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030b2:	bf00      	nop
 80030b4:	37b0      	adds	r7, #176	@ 0xb0
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40011000 	.word	0x40011000
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020000 	.word	0x40020000

080030cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08e      	sub	sp, #56	@ 0x38
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80030dc:	4b33      	ldr	r3, [pc, #204]	@ (80031ac <HAL_InitTick+0xe0>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	4a32      	ldr	r2, [pc, #200]	@ (80031ac <HAL_InitTick+0xe0>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e8:	4b30      	ldr	r3, [pc, #192]	@ (80031ac <HAL_InitTick+0xe0>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030f4:	f107 0210 	add.w	r2, r7, #16
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 fedc 	bl	8004ebc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800310e:	f001 fead 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8003112:	6378      	str	r0, [r7, #52]	@ 0x34
 8003114:	e004      	b.n	8003120 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003116:	f001 fea9 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 800311a:	4603      	mov	r3, r0
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	4a23      	ldr	r2, [pc, #140]	@ (80031b0 <HAL_InitTick+0xe4>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	0c9b      	lsrs	r3, r3, #18
 800312a:	3b01      	subs	r3, #1
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800312e:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <HAL_InitTick+0xe8>)
 8003130:	4a21      	ldr	r2, [pc, #132]	@ (80031b8 <HAL_InitTick+0xec>)
 8003132:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003134:	4b1f      	ldr	r3, [pc, #124]	@ (80031b4 <HAL_InitTick+0xe8>)
 8003136:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800313a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800313c:	4a1d      	ldr	r2, [pc, #116]	@ (80031b4 <HAL_InitTick+0xe8>)
 800313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003140:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <HAL_InitTick+0xe8>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003148:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <HAL_InitTick+0xe8>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800314e:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_InitTick+0xe8>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003154:	4817      	ldr	r0, [pc, #92]	@ (80031b4 <HAL_InitTick+0xe8>)
 8003156:	f002 fad3 	bl	8005700 <HAL_TIM_Base_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003160:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11b      	bne.n	80031a0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003168:	4812      	ldr	r0, [pc, #72]	@ (80031b4 <HAL_InitTick+0xe8>)
 800316a:	f002 fb2b 	bl	80057c4 <HAL_TIM_Base_Start_IT>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003174:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003178:	2b00      	cmp	r3, #0
 800317a:	d111      	bne.n	80031a0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800317c:	202d      	movs	r0, #45	@ 0x2d
 800317e:	f000 fe4b 	bl	8003e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d808      	bhi.n	800319a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003188:	2200      	movs	r2, #0
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	202d      	movs	r0, #45	@ 0x2d
 800318e:	f000 fe27 	bl	8003de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003192:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <HAL_InitTick+0xf0>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	e002      	b.n	80031a0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80031a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3738      	adds	r7, #56	@ 0x38
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	431bde83 	.word	0x431bde83
 80031b4:	20000504 	.word	0x20000504
 80031b8:	40002000 	.word	0x40002000
 80031bc:	20000164 	.word	0x20000164

080031c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <NMI_Handler+0x4>

080031c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <MemManage_Handler+0x4>

080031d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <BusFault_Handler+0x4>

080031e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <UsageFault_Handler+0x4>

080031e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031fc:	4802      	ldr	r0, [pc, #8]	@ (8003208 <USART1_IRQHandler+0x10>)
 80031fe:	f002 fe75 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2000044c 	.word	0x2000044c

0800320c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003210:	4802      	ldr	r0, [pc, #8]	@ (800321c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003212:	f002 fb4f 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000504 	.word	0x20000504

08003220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return 1;
 8003224:	2301      	movs	r3, #1
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_kill>:

int _kill(int pid, int sig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800323a:	f008 fccb 	bl	800bbd4 <__errno>
 800323e:	4603      	mov	r3, r0
 8003240:	2216      	movs	r2, #22
 8003242:	601a      	str	r2, [r3, #0]
  return -1;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_exit>:

void _exit (int status)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ffe7 	bl	8003230 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003262:	bf00      	nop
 8003264:	e7fd      	b.n	8003262 <_exit+0x12>

08003266 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e00a      	b.n	800328e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003278:	f3af 8000 	nop.w
 800327c:	4601      	mov	r1, r0
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	60ba      	str	r2, [r7, #8]
 8003284:	b2ca      	uxtb	r2, r1
 8003286:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3301      	adds	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	dbf0      	blt.n	8003278 <_read+0x12>
  }

  return len;
 8003296:	687b      	ldr	r3, [r7, #4]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e009      	b.n	80032c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	60ba      	str	r2, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3301      	adds	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	dbf1      	blt.n	80032b2 <_write+0x12>
  }
  return len;
 80032ce:	687b      	ldr	r3, [r7, #4]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_close>:

int _close(int file)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003300:	605a      	str	r2, [r3, #4]
  return 0;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <_isatty>:

int _isatty(int file)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003318:	2301      	movs	r3, #1
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003348:	4a14      	ldr	r2, [pc, #80]	@ (800339c <_sbrk+0x5c>)
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <_sbrk+0x60>)
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <_sbrk+0x64>)
 800335e:	4a12      	ldr	r2, [pc, #72]	@ (80033a8 <_sbrk+0x68>)
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003362:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	429a      	cmp	r2, r3
 800336e:	d207      	bcs.n	8003380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003370:	f008 fc30 	bl	800bbd4 <__errno>
 8003374:	4603      	mov	r3, r0
 8003376:	220c      	movs	r2, #12
 8003378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295
 800337e:	e009      	b.n	8003394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003380:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <_sbrk+0x64>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003386:	4b07      	ldr	r3, [pc, #28]	@ (80033a4 <_sbrk+0x64>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	4a05      	ldr	r2, [pc, #20]	@ (80033a4 <_sbrk+0x64>)
 8003390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20050000 	.word	0x20050000
 80033a0:	00000400 	.word	0x00000400
 80033a4:	20000550 	.word	0x20000550
 80033a8:	20005fe8 	.word	0x20005fe8

080033ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <SystemInit+0x20>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <SystemInit+0x20>)
 80033b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033d4:	480d      	ldr	r0, [pc, #52]	@ (800340c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033d6:	490e      	ldr	r1, [pc, #56]	@ (8003410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033dc:	e002      	b.n	80033e4 <LoopCopyDataInit>

080033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e2:	3304      	adds	r3, #4

080033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e8:	d3f9      	bcc.n	80033de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033ec:	4c0b      	ldr	r4, [pc, #44]	@ (800341c <LoopFillZerobss+0x26>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f0:	e001      	b.n	80033f6 <LoopFillZerobss>

080033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f4:	3204      	adds	r2, #4

080033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f8:	d3fb      	bcc.n	80033f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033fa:	f7ff ffd7 	bl	80033ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033fe:	f008 fbef 	bl	800bbe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003402:	f7fe fb1f 	bl	8001a44 <main>
  bx  lr    
 8003406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003408:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800340c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003410:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8003414:	0800fa40 	.word	0x0800fa40
  ldr r2, =_sbss
 8003418:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 800341c:	20005fe4 	.word	0x20005fe4

08003420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC_IRQHandler>

08003422 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003426:	2003      	movs	r0, #3
 8003428:	f000 fccf 	bl	8003dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342c:	200f      	movs	r0, #15
 800342e:	f7ff fe4d 	bl	80030cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003432:	f7ff fd1f 	bl	8002e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_IncTick+0x20>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_IncTick+0x24>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <HAL_IncTick+0x24>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000168 	.word	0x20000168
 8003460:	20000554 	.word	0x20000554

08003464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return uwTick;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_GetTick+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000554 	.word	0x20000554

0800347c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e031      	b.n	80034f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fd12 	bl	8002ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_ADC_Init+0x84>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fad6 	bl	8003a7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80034e6:	e001      	b.n	80034ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	ffffeefd 	.word	0xffffeefd

08003504 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_ADC_Start+0x1a>
 800351a:	2302      	movs	r3, #2
 800351c:	e0ad      	b.n	800367a <HAL_ADC_Start+0x176>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d018      	beq.n	8003566 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003544:	4b50      	ldr	r3, [pc, #320]	@ (8003688 <HAL_ADC_Start+0x184>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a50      	ldr	r2, [pc, #320]	@ (800368c <HAL_ADC_Start+0x188>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0c9a      	lsrs	r2, r3, #18
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003558:	e002      	b.n	8003560 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3b01      	subs	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f9      	bne.n	800355a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d175      	bne.n	8003660 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003578:	4b45      	ldr	r3, [pc, #276]	@ (8003690 <HAL_ADC_Start+0x18c>)
 800357a:	4013      	ands	r3, r2
 800357c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800359a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ae:	d106      	bne.n	80035be <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b4:	f023 0206 	bic.w	r2, r3, #6
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80035bc:	e002      	b.n	80035c4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80035d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80035d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003694 <HAL_ADC_Start+0x190>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d143      	bne.n	8003678 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	e03a      	b.n	8003678 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a24      	ldr	r2, [pc, #144]	@ (8003698 <HAL_ADC_Start+0x194>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d10e      	bne.n	800362a <HAL_ADC_Start+0x126>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003628:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800362a:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <HAL_ADC_Start+0x190>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d120      	bne.n	8003678 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a18      	ldr	r2, [pc, #96]	@ (800369c <HAL_ADC_Start+0x198>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d11b      	bne.n	8003678 <HAL_ADC_Start+0x174>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d114      	bne.n	8003678 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	e00b      	b.n	8003678 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000160 	.word	0x20000160
 800368c:	431bde83 	.word	0x431bde83
 8003690:	fffff8fe 	.word	0xfffff8fe
 8003694:	40012300 	.word	0x40012300
 8003698:	40012000 	.word	0x40012000
 800369c:	40012200 	.word	0x40012200

080036a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036bc:	d113      	bne.n	80036e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036cc:	d10b      	bne.n	80036e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e063      	b.n	80037ae <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80036e6:	f7ff febd 	bl	8003464 <HAL_GetTick>
 80036ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036ec:	e021      	b.n	8003732 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d01d      	beq.n	8003732 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_ADC_PollForConversion+0x6c>
 80036fc:	f7ff feb2 	bl	8003464 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d212      	bcs.n	8003732 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d00b      	beq.n	8003732 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f043 0204 	orr.w	r2, r3, #4
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e03d      	b.n	80037ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b02      	cmp	r3, #2
 800373e:	d1d6      	bne.n	80036ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0212 	mvn.w	r2, #18
 8003748:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d123      	bne.n	80037ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11f      	bne.n	80037ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003784:	2b00      	cmp	r3, #0
 8003786:	d111      	bne.n	80037ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	f043 0201 	orr.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x1c>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e136      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x28a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d93a      	bls.n	8003872 <HAL_ADC_ConfigChannel+0xa2>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003804:	d035      	beq.n	8003872 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68d9      	ldr	r1, [r3, #12]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	3b1e      	subs	r3, #30
 800381c:	2207      	movs	r2, #7
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	400a      	ands	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a8d      	ldr	r2, [pc, #564]	@ (8003a68 <HAL_ADC_ConfigChannel+0x298>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10a      	bne.n	800384c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68d9      	ldr	r1, [r3, #12]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	061a      	lsls	r2, r3, #24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800384a:	e035      	b.n	80038b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68d9      	ldr	r1, [r3, #12]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	4618      	mov	r0, r3
 800385e:	4603      	mov	r3, r0
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4403      	add	r3, r0
 8003864:	3b1e      	subs	r3, #30
 8003866:	409a      	lsls	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003870:	e022      	b.n	80038b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6919      	ldr	r1, [r3, #16]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	2207      	movs	r2, #7
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43da      	mvns	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	400a      	ands	r2, r1
 8003894:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6919      	ldr	r1, [r3, #16]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4403      	add	r3, r0
 80038ae:	409a      	lsls	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b06      	cmp	r3, #6
 80038be:	d824      	bhi.n	800390a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	3b05      	subs	r3, #5
 80038d2:	221f      	movs	r2, #31
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43da      	mvns	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	400a      	ands	r2, r1
 80038e0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4618      	mov	r0, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	3b05      	subs	r3, #5
 80038fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	635a      	str	r2, [r3, #52]	@ 0x34
 8003908:	e04c      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d824      	bhi.n	800395c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	3b23      	subs	r3, #35	@ 0x23
 8003924:	221f      	movs	r2, #31
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	400a      	ands	r2, r1
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	3b23      	subs	r3, #35	@ 0x23
 800394e:	fa00 f203 	lsl.w	r2, r0, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
 800395a:	e023      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	3b41      	subs	r3, #65	@ 0x41
 800396e:	221f      	movs	r2, #31
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43da      	mvns	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	400a      	ands	r2, r1
 800397c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	4618      	mov	r0, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	3b41      	subs	r3, #65	@ 0x41
 8003998:	fa00 f203 	lsl.w	r2, r0, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a30      	ldr	r2, [pc, #192]	@ (8003a6c <HAL_ADC_ConfigChannel+0x29c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10a      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1f4>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039b6:	d105      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80039b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 80039be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80039c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a28      	ldr	r2, [pc, #160]	@ (8003a6c <HAL_ADC_ConfigChannel+0x29c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10f      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x21e>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b12      	cmp	r3, #18
 80039d4:	d10b      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80039d6:	4b26      	ldr	r3, [pc, #152]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a25      	ldr	r2, [pc, #148]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 80039dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039e0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039e2:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a22      	ldr	r2, [pc, #136]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a6c <HAL_ADC_ConfigChannel+0x29c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d12b      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x280>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a68 <HAL_ADC_ConfigChannel+0x298>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x23a>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b11      	cmp	r3, #17
 8003a08:	d122      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003a0a:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a18      	ldr	r2, [pc, #96]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a10:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003a14:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a16:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a20:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a10      	ldr	r2, [pc, #64]	@ (8003a68 <HAL_ADC_ConfigChannel+0x298>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d111      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003a2c:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <HAL_ADC_ConfigChannel+0x2a4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a11      	ldr	r2, [pc, #68]	@ (8003a78 <HAL_ADC_ConfigChannel+0x2a8>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0c9a      	lsrs	r2, r3, #18
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a42:	e002      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f9      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	10000012 	.word	0x10000012
 8003a6c:	40012000 	.word	0x40012000
 8003a70:	40012300 	.word	0x40012300
 8003a74:	20000160 	.word	0x20000160
 8003a78:	431bde83 	.word	0x431bde83

08003a7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a84:	4b78      	ldr	r3, [pc, #480]	@ (8003c68 <ADC_Init+0x1ec>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a77      	ldr	r2, [pc, #476]	@ (8003c68 <ADC_Init+0x1ec>)
 8003a8a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003a8e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a90:	4b75      	ldr	r3, [pc, #468]	@ (8003c68 <ADC_Init+0x1ec>)
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4973      	ldr	r1, [pc, #460]	@ (8003c68 <ADC_Init+0x1ec>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	021a      	lsls	r2, r3, #8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6899      	ldr	r1, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	4a58      	ldr	r2, [pc, #352]	@ (8003c6c <ADC_Init+0x1f0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6899      	ldr	r1, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e00f      	b.n	8003b76 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0202 	bic.w	r2, r2, #2
 8003b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6899      	ldr	r1, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	005a      	lsls	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01b      	beq.n	8003bdc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003bc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	035a      	lsls	r2, r3, #13
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	e007      	b.n	8003bec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	051a      	lsls	r2, r3, #20
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c2e:	025a      	lsls	r2, r3, #9
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6899      	ldr	r1, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	029a      	lsls	r2, r3, #10
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40012300 	.word	0x40012300
 8003c6c:	0f000001 	.word	0x0f000001

08003c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c98:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9e:	4a04      	ldr	r2, [pc, #16]	@ (8003cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	60d3      	str	r3, [r2, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000ed00 	.word	0xe000ed00
 8003cb4:	05fa0000 	.word	0x05fa0000

08003cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cbc:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	f003 0307 	and.w	r3, r3, #7
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	db0b      	blt.n	8003cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	4907      	ldr	r1, [pc, #28]	@ (8003d0c <__NVIC_EnableIRQ+0x38>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000e100 	.word	0xe000e100

08003d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	db0a      	blt.n	8003d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	490c      	ldr	r1, [pc, #48]	@ (8003d5c <__NVIC_SetPriority+0x4c>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	0112      	lsls	r2, r2, #4
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	440b      	add	r3, r1
 8003d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d38:	e00a      	b.n	8003d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4908      	ldr	r1, [pc, #32]	@ (8003d60 <__NVIC_SetPriority+0x50>)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	3b04      	subs	r3, #4
 8003d48:	0112      	lsls	r2, r2, #4
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	761a      	strb	r2, [r3, #24]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e100 	.word	0xe000e100
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f1c3 0307 	rsb	r3, r3, #7
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf28      	it	cs
 8003d82:	2304      	movcs	r3, #4
 8003d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d902      	bls.n	8003d94 <NVIC_EncodePriority+0x30>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3b03      	subs	r3, #3
 8003d92:	e000      	b.n	8003d96 <NVIC_EncodePriority+0x32>
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	401a      	ands	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dac:	f04f 31ff 	mov.w	r1, #4294967295
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43d9      	mvns	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	4313      	orrs	r3, r2
         );
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ff4c 	bl	8003c70 <__NVIC_SetPriorityGrouping>
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df2:	f7ff ff61 	bl	8003cb8 <__NVIC_GetPriorityGrouping>
 8003df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	6978      	ldr	r0, [r7, #20]
 8003dfe:	f7ff ffb1 	bl	8003d64 <NVIC_EncodePriority>
 8003e02:	4602      	mov	r2, r0
 8003e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ff80 	bl	8003d10 <__NVIC_SetPriority>
}
 8003e10:	bf00      	nop
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff54 	bl	8003cd4 <__NVIC_EnableIRQ>
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e054      	b.n	8003ef0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7f5b      	ldrb	r3, [r3, #29]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff f88e 	bl	8002f78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	791b      	ldrb	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a22      	ldr	r2, [pc, #136]	@ (8003ef8 <HAL_CRC_Init+0xc4>)
 8003e70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0218 	bic.w	r2, r2, #24
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	e00c      	b.n	8003e9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f834 	bl	8003efc <HAL_CRCEx_Polynomial_Set>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e028      	b.n	8003ef0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	795b      	ldrb	r3, [r3, #5]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003eae:	611a      	str	r2, [r3, #16]
 8003eb0:	e004      	b.n	8003ebc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6912      	ldr	r2, [r2, #16]
 8003eba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	04c11db7 	.word	0x04c11db7

08003efc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f0c:	231f      	movs	r3, #31
 8003f0e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f10:	bf00      	nop
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1e5a      	subs	r2, r3, #1
 8003f16:	613a      	str	r2, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <HAL_CRCEx_Polynomial_Set+0x34>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b18      	cmp	r3, #24
 8003f34:	d846      	bhi.n	8003fc4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003f36:	a201      	add	r2, pc, #4	@ (adr r2, 8003f3c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003fcb 	.word	0x08003fcb
 8003f40:	08003fc5 	.word	0x08003fc5
 8003f44:	08003fc5 	.word	0x08003fc5
 8003f48:	08003fc5 	.word	0x08003fc5
 8003f4c:	08003fc5 	.word	0x08003fc5
 8003f50:	08003fc5 	.word	0x08003fc5
 8003f54:	08003fc5 	.word	0x08003fc5
 8003f58:	08003fc5 	.word	0x08003fc5
 8003f5c:	08003fb9 	.word	0x08003fb9
 8003f60:	08003fc5 	.word	0x08003fc5
 8003f64:	08003fc5 	.word	0x08003fc5
 8003f68:	08003fc5 	.word	0x08003fc5
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	08003fc5 	.word	0x08003fc5
 8003f78:	08003fc5 	.word	0x08003fc5
 8003f7c:	08003fad 	.word	0x08003fad
 8003f80:	08003fc5 	.word	0x08003fc5
 8003f84:	08003fc5 	.word	0x08003fc5
 8003f88:	08003fc5 	.word	0x08003fc5
 8003f8c:	08003fc5 	.word	0x08003fc5
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08003fc5 	.word	0x08003fc5
 8003f98:	08003fc5 	.word	0x08003fc5
 8003f9c:	08003fa1 	.word	0x08003fa1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d913      	bls.n	8003fce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003faa:	e010      	b.n	8003fce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b07      	cmp	r3, #7
 8003fb0:	d90f      	bls.n	8003fd2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fb6:	e00c      	b.n	8003fd2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d90b      	bls.n	8003fd6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fc2:	e008      	b.n	8003fd6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc8:	e006      	b.n	8003fd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fca:	bf00      	nop
 8003fcc:	e004      	b.n	8003fd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fd6:	bf00      	nop
  }
  if (status == HAL_OK)
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 0118 	bic.w	r1, r3, #24
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004016:	f7ff fa25 	bl	8003464 <HAL_GetTick>
 800401a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d008      	beq.n	800403a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	@ 0x80
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e052      	b.n	80040e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0216 	bic.w	r2, r2, #22
 8004048:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004058:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_DMA_Abort+0x62>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0208 	bic.w	r2, r2, #8
 8004078:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800408a:	e013      	b.n	80040b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800408c:	f7ff f9ea 	bl	8003464 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b05      	cmp	r3, #5
 8004098:	d90c      	bls.n	80040b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2203      	movs	r2, #3
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e015      	b.n	80040e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e4      	bne.n	800408c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c6:	223f      	movs	r2, #63	@ 0x3f
 80040c8:	409a      	lsls	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2280      	movs	r2, #128	@ 0x80
 8004100:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e00c      	b.n	8004120 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2205      	movs	r2, #5
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	@ 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	e175      	b.n	8004438 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800414c:	2201      	movs	r2, #1
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	429a      	cmp	r2, r3
 8004166:	f040 8164 	bne.w	8004432 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d005      	beq.n	8004182 <HAL_GPIO_Init+0x56>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d130      	bne.n	80041e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2203      	movs	r2, #3
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041b8:	2201      	movs	r2, #1
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 0201 	and.w	r2, r3, #1
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d017      	beq.n	8004220 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	2203      	movs	r2, #3
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d123      	bne.n	8004274 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	08da      	lsrs	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3208      	adds	r2, #8
 8004234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	220f      	movs	r2, #15
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	08da      	lsrs	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3208      	adds	r2, #8
 800426e:	69b9      	ldr	r1, [r7, #24]
 8004270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	2203      	movs	r2, #3
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0203 	and.w	r2, r3, #3
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80be 	beq.w	8004432 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b6:	4b66      	ldr	r3, [pc, #408]	@ (8004450 <HAL_GPIO_Init+0x324>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	4a65      	ldr	r2, [pc, #404]	@ (8004450 <HAL_GPIO_Init+0x324>)
 80042bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042c2:	4b63      	ldr	r3, [pc, #396]	@ (8004450 <HAL_GPIO_Init+0x324>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80042ce:	4a61      	ldr	r2, [pc, #388]	@ (8004454 <HAL_GPIO_Init+0x328>)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	3302      	adds	r3, #2
 80042d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	220f      	movs	r2, #15
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a58      	ldr	r2, [pc, #352]	@ (8004458 <HAL_GPIO_Init+0x32c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d037      	beq.n	800436a <HAL_GPIO_Init+0x23e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a57      	ldr	r2, [pc, #348]	@ (800445c <HAL_GPIO_Init+0x330>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d031      	beq.n	8004366 <HAL_GPIO_Init+0x23a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a56      	ldr	r2, [pc, #344]	@ (8004460 <HAL_GPIO_Init+0x334>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02b      	beq.n	8004362 <HAL_GPIO_Init+0x236>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a55      	ldr	r2, [pc, #340]	@ (8004464 <HAL_GPIO_Init+0x338>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d025      	beq.n	800435e <HAL_GPIO_Init+0x232>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a54      	ldr	r2, [pc, #336]	@ (8004468 <HAL_GPIO_Init+0x33c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01f      	beq.n	800435a <HAL_GPIO_Init+0x22e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a53      	ldr	r2, [pc, #332]	@ (800446c <HAL_GPIO_Init+0x340>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d019      	beq.n	8004356 <HAL_GPIO_Init+0x22a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a52      	ldr	r2, [pc, #328]	@ (8004470 <HAL_GPIO_Init+0x344>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_GPIO_Init+0x226>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a51      	ldr	r2, [pc, #324]	@ (8004474 <HAL_GPIO_Init+0x348>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00d      	beq.n	800434e <HAL_GPIO_Init+0x222>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a50      	ldr	r2, [pc, #320]	@ (8004478 <HAL_GPIO_Init+0x34c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <HAL_GPIO_Init+0x21e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a4f      	ldr	r2, [pc, #316]	@ (800447c <HAL_GPIO_Init+0x350>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_GPIO_Init+0x21a>
 8004342:	2309      	movs	r3, #9
 8004344:	e012      	b.n	800436c <HAL_GPIO_Init+0x240>
 8004346:	230a      	movs	r3, #10
 8004348:	e010      	b.n	800436c <HAL_GPIO_Init+0x240>
 800434a:	2308      	movs	r3, #8
 800434c:	e00e      	b.n	800436c <HAL_GPIO_Init+0x240>
 800434e:	2307      	movs	r3, #7
 8004350:	e00c      	b.n	800436c <HAL_GPIO_Init+0x240>
 8004352:	2306      	movs	r3, #6
 8004354:	e00a      	b.n	800436c <HAL_GPIO_Init+0x240>
 8004356:	2305      	movs	r3, #5
 8004358:	e008      	b.n	800436c <HAL_GPIO_Init+0x240>
 800435a:	2304      	movs	r3, #4
 800435c:	e006      	b.n	800436c <HAL_GPIO_Init+0x240>
 800435e:	2303      	movs	r3, #3
 8004360:	e004      	b.n	800436c <HAL_GPIO_Init+0x240>
 8004362:	2302      	movs	r3, #2
 8004364:	e002      	b.n	800436c <HAL_GPIO_Init+0x240>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_GPIO_Init+0x240>
 800436a:	2300      	movs	r3, #0
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	f002 0203 	and.w	r2, r2, #3
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	4093      	lsls	r3, r2
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4313      	orrs	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800437c:	4935      	ldr	r1, [pc, #212]	@ (8004454 <HAL_GPIO_Init+0x328>)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	3302      	adds	r3, #2
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800438a:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <HAL_GPIO_Init+0x354>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ae:	4a34      	ldr	r2, [pc, #208]	@ (8004480 <HAL_GPIO_Init+0x354>)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043b4:	4b32      	ldr	r3, [pc, #200]	@ (8004480 <HAL_GPIO_Init+0x354>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043d8:	4a29      	ldr	r2, [pc, #164]	@ (8004480 <HAL_GPIO_Init+0x354>)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043de:	4b28      	ldr	r3, [pc, #160]	@ (8004480 <HAL_GPIO_Init+0x354>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004402:	4a1f      	ldr	r2, [pc, #124]	@ (8004480 <HAL_GPIO_Init+0x354>)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004408:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <HAL_GPIO_Init+0x354>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800442c:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <HAL_GPIO_Init+0x354>)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3301      	adds	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b0f      	cmp	r3, #15
 800443c:	f67f ae86 	bls.w	800414c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3724      	adds	r7, #36	@ 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800
 8004454:	40013800 	.word	0x40013800
 8004458:	40020000 	.word	0x40020000
 800445c:	40020400 	.word	0x40020400
 8004460:	40020800 	.word	0x40020800
 8004464:	40020c00 	.word	0x40020c00
 8004468:	40021000 	.word	0x40021000
 800446c:	40021400 	.word	0x40021400
 8004470:	40021800 	.word	0x40021800
 8004474:	40021c00 	.word	0x40021c00
 8004478:	40022000 	.word	0x40022000
 800447c:	40022400 	.word	0x40022400
 8004480:	40013c00 	.word	0x40013c00

08004484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	e001      	b.n	80044a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
 80044c0:	4613      	mov	r3, r2
 80044c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044c4:	787b      	ldrb	r3, [r7, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ca:	887a      	ldrh	r2, [r7, #2]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80044d0:	e003      	b.n	80044da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	041a      	lsls	r2, r3, #16
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	619a      	str	r2, [r3, #24]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ec:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a04      	ldr	r2, [pc, #16]	@ (8004504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40007000 	.word	0x40007000

08004508 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	4b23      	ldr	r3, [pc, #140]	@ (80045a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	4a22      	ldr	r2, [pc, #136]	@ (80045a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451c:	6413      	str	r3, [r2, #64]	@ 0x40
 800451e:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800452a:	4b1e      	ldr	r3, [pc, #120]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1d      	ldr	r2, [pc, #116]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004534:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004536:	f7fe ff95 	bl	8003464 <HAL_GetTick>
 800453a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800453c:	e009      	b.n	8004552 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800453e:	f7fe ff91 	bl	8003464 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800454c:	d901      	bls.n	8004552 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e022      	b.n	8004598 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004552:	4b14      	ldr	r3, [pc, #80]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455e:	d1ee      	bne.n	800453e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004560:	4b10      	ldr	r3, [pc, #64]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0f      	ldr	r2, [pc, #60]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800456c:	f7fe ff7a 	bl	8003464 <HAL_GetTick>
 8004570:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004572:	e009      	b.n	8004588 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004574:	f7fe ff76 	bl	8003464 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004582:	d901      	bls.n	8004588 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e007      	b.n	8004598 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004594:	d1ee      	bne.n	8004574 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40007000 	.word	0x40007000

080045a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80045b0:	2300      	movs	r3, #0
 80045b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e291      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8087 	beq.w	80046da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045cc:	4b96      	ldr	r3, [pc, #600]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d00c      	beq.n	80045f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d8:	4b93      	ldr	r3, [pc, #588]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d112      	bne.n	800460a <HAL_RCC_OscConfig+0x62>
 80045e4:	4b90      	ldr	r3, [pc, #576]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f0:	d10b      	bne.n	800460a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d06c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x130>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d168      	bne.n	80046d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e26b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x7a>
 8004614:	4b84      	ldr	r3, [pc, #528]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a83      	ldr	r2, [pc, #524]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e02e      	b.n	8004680 <HAL_RCC_OscConfig+0xd8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x9c>
 800462a:	4b7f      	ldr	r3, [pc, #508]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7e      	ldr	r2, [pc, #504]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b7c      	ldr	r3, [pc, #496]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7b      	ldr	r2, [pc, #492]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800463c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xd8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0xc0>
 800464e:	4b76      	ldr	r3, [pc, #472]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a75      	ldr	r2, [pc, #468]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a72      	ldr	r2, [pc, #456]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xd8>
 8004668:	4b6f      	ldr	r3, [pc, #444]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6e      	ldr	r2, [pc, #440]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b6c      	ldr	r3, [pc, #432]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a6b      	ldr	r2, [pc, #428]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800467e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fe feec 	bl	8003464 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fe fee8 	bl	8003464 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	@ 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e21f      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b61      	ldr	r3, [pc, #388]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xe8>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fe fed8 	bl	8003464 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fed4 	bl	8003464 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	@ 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e20b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b57      	ldr	r3, [pc, #348]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x110>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d069      	beq.n	80047ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e6:	4b50      	ldr	r3, [pc, #320]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11c      	bne.n	8004738 <HAL_RCC_OscConfig+0x190>
 80046fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	4b47      	ldr	r3, [pc, #284]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x17a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1df      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	4b41      	ldr	r3, [pc, #260]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	493d      	ldr	r1, [pc, #244]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	e040      	b.n	80047ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d023      	beq.n	8004788 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004740:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a38      	ldr	r2, [pc, #224]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fe fe8a 	bl	8003464 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004754:	f7fe fe86 	bl	8003464 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1bd      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004766:	4b30      	ldr	r3, [pc, #192]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004772:	4b2d      	ldr	r3, [pc, #180]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4929      	ldr	r1, [pc, #164]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]
 8004786:	e018      	b.n	80047ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004788:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a26      	ldr	r2, [pc, #152]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe fe66 	bl	8003464 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479c:	f7fe fe62 	bl	8003464 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e199      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d038      	beq.n	8004838 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d019      	beq.n	8004802 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ce:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80047d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d2:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fe fe43 	bl	8003464 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fe fe3f 	bl	8003464 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e176      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 80047f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x23a>
 8004800:	e01a      	b.n	8004838 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004802:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004806:	4a08      	ldr	r2, [pc, #32]	@ (8004828 <HAL_RCC_OscConfig+0x280>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fe fe29 	bl	8003464 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004816:	f7fe fe25 	bl	8003464 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d903      	bls.n	800482c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e15c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
 8004828:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	4b91      	ldr	r3, [pc, #580]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 800482e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ee      	bne.n	8004816 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a4 	beq.w	800498e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004846:	4b8b      	ldr	r3, [pc, #556]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10d      	bne.n	800486e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4b88      	ldr	r3, [pc, #544]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	4a87      	ldr	r2, [pc, #540]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485c:	6413      	str	r3, [r2, #64]	@ 0x40
 800485e:	4b85      	ldr	r3, [pc, #532]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800486e:	4b82      	ldr	r3, [pc, #520]	@ (8004a78 <HAL_RCC_OscConfig+0x4d0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d118      	bne.n	80048ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800487a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a78 <HAL_RCC_OscConfig+0x4d0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a78 <HAL_RCC_OscConfig+0x4d0>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004886:	f7fe fded 	bl	8003464 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488e:	f7fe fde9 	bl	8003464 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b64      	cmp	r3, #100	@ 0x64
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e120      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a0:	4b75      	ldr	r3, [pc, #468]	@ (8004a78 <HAL_RCC_OscConfig+0x4d0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x31a>
 80048b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c0:	e02d      	b.n	800491e <HAL_RCC_OscConfig+0x376>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x33c>
 80048ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	4a69      	ldr	r2, [pc, #420]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d6:	4b67      	ldr	r3, [pc, #412]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	4a66      	ldr	r2, [pc, #408]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048dc:	f023 0304 	bic.w	r3, r3, #4
 80048e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e2:	e01c      	b.n	800491e <HAL_RCC_OscConfig+0x376>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d10c      	bne.n	8004906 <HAL_RCC_OscConfig+0x35e>
 80048ec:	4b61      	ldr	r3, [pc, #388]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	4a60      	ldr	r2, [pc, #384]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048f2:	f043 0304 	orr.w	r3, r3, #4
 80048f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	@ 0x70
 8004904:	e00b      	b.n	800491e <HAL_RCC_OscConfig+0x376>
 8004906:	4b5b      	ldr	r3, [pc, #364]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	4a5a      	ldr	r2, [pc, #360]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	6713      	str	r3, [r2, #112]	@ 0x70
 8004912:	4b58      	ldr	r3, [pc, #352]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004916:	4a57      	ldr	r2, [pc, #348]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d015      	beq.n	8004952 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004926:	f7fe fd9d 	bl	8003464 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492e:	f7fe fd99 	bl	8003464 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e0ce      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004944:	4b4b      	ldr	r3, [pc, #300]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0ee      	beq.n	800492e <HAL_RCC_OscConfig+0x386>
 8004950:	e014      	b.n	800497c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004952:	f7fe fd87 	bl	8003464 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004958:	e00a      	b.n	8004970 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495a:	f7fe fd83 	bl	8003464 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004968:	4293      	cmp	r3, r2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e0b8      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004970:	4b40      	ldr	r3, [pc, #256]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1ee      	bne.n	800495a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d105      	bne.n	800498e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004982:	4b3c      	ldr	r3, [pc, #240]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	4a3b      	ldr	r2, [pc, #236]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80a4 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004998:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d06b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d149      	bne.n	8004a40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ac:	4b31      	ldr	r3, [pc, #196]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a30      	ldr	r2, [pc, #192]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80049b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fe fd54 	bl	8003464 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fe fd50 	bl	8003464 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e087      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	4b28      	ldr	r3, [pc, #160]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	4313      	orrs	r3, r2
 8004a04:	4a1b      	ldr	r2, [pc, #108]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004a06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a0c:	4b19      	ldr	r3, [pc, #100]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a18      	ldr	r2, [pc, #96]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe fd24 	bl	8003464 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fe fd20 	bl	8003464 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e057      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x478>
 8004a3e:	e04f      	b.n	8004ae0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fd0a 	bl	8003464 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fe fd06 	bl	8003464 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e03d      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <HAL_RCC_OscConfig+0x4cc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4ac>
 8004a72:	e035      	b.n	8004ae0 <HAL_RCC_OscConfig+0x538>
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <HAL_RCC_OscConfig+0x544>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d028      	beq.n	8004adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d121      	bne.n	8004adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d11a      	bne.n	8004adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ab2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d111      	bne.n	8004adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800

08004af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0d0      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b67      	ldr	r3, [pc, #412]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 020f 	bic.w	r2, r3, #15
 8004b1e:	4965      	ldr	r1, [pc, #404]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a58      	ldr	r2, [pc, #352]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d040      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d115      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e073      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06b      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd2:	4b39      	ldr	r3, [pc, #228]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4936      	ldr	r1, [pc, #216]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be4:	f7fe fc3e 	bl	8003464 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bec:	f7fe fc3a 	bl	8003464 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e053      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 020c 	and.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d1eb      	bne.n	8004bec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c14:	4b27      	ldr	r3, [pc, #156]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d210      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 020f 	bic.w	r2, r3, #15
 8004c2a:	4922      	ldr	r1, [pc, #136]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f821 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	@ (8004cbc <HAL_RCC_ClockConfig+0x1cc>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1d0>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1d4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fa12 	bl	80030cc <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023c00 	.word	0x40023c00
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	0800f5e8 	.word	0x0800f5e8
 8004cc0:	20000160 	.word	0x20000160
 8004cc4:	20000164 	.word	0x20000164

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ccc:	b090      	sub	sp, #64	@ 0x40
 8004cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cd8:	2300      	movs	r3, #0
 8004cda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce0:	4b59      	ldr	r3, [pc, #356]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d00d      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x40>
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	f200 80a1 	bhi.w	8004e34 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x34>
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfa:	e09b      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b53      	ldr	r3, [pc, #332]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d00:	e09b      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d02:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d06:	e098      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d08:	4b4f      	ldr	r3, [pc, #316]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d12:	4b4d      	ldr	r3, [pc, #308]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d028      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	623b      	str	r3, [r7, #32]
 8004d28:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d30:	2100      	movs	r1, #0
 8004d32:	4b47      	ldr	r3, [pc, #284]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d34:	fb03 f201 	mul.w	r2, r3, r1
 8004d38:	2300      	movs	r3, #0
 8004d3a:	fb00 f303 	mul.w	r3, r0, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	4a43      	ldr	r2, [pc, #268]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d42:	fba0 1202 	umull	r1, r2, r0, r2
 8004d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d48:	460a      	mov	r2, r1
 8004d4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d4e:	4413      	add	r3, r2
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d54:	2200      	movs	r2, #0
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	61fa      	str	r2, [r7, #28]
 8004d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d62:	f7fb ffc1 	bl	8000ce8 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d6e:	e053      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d70:	4b35      	ldr	r3, [pc, #212]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	099b      	lsrs	r3, r3, #6
 8004d76:	2200      	movs	r2, #0
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	617a      	str	r2, [r7, #20]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d82:	f04f 0b00 	mov.w	fp, #0
 8004d86:	4652      	mov	r2, sl
 8004d88:	465b      	mov	r3, fp
 8004d8a:	f04f 0000 	mov.w	r0, #0
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	0159      	lsls	r1, r3, #5
 8004d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d98:	0150      	lsls	r0, r2, #5
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	ebb2 080a 	subs.w	r8, r2, sl
 8004da2:	eb63 090b 	sbc.w	r9, r3, fp
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004db2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004db6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dba:	ebb2 0408 	subs.w	r4, r2, r8
 8004dbe:	eb63 0509 	sbc.w	r5, r3, r9
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	00eb      	lsls	r3, r5, #3
 8004dcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd0:	00e2      	lsls	r2, r4, #3
 8004dd2:	4614      	mov	r4, r2
 8004dd4:	461d      	mov	r5, r3
 8004dd6:	eb14 030a 	adds.w	r3, r4, sl
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	eb45 030b 	adc.w	r3, r5, fp
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dee:	4629      	mov	r1, r5
 8004df0:	028b      	lsls	r3, r1, #10
 8004df2:	4621      	mov	r1, r4
 8004df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004df8:	4621      	mov	r1, r4
 8004dfa:	028a      	lsls	r2, r1, #10
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e02:	2200      	movs	r2, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	60fa      	str	r2, [r7, #12]
 8004e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e0c:	f7fb ff6c 	bl	8000ce8 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4613      	mov	r3, r2
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e18:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	3301      	adds	r3, #1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004e28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e32:	e002      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004e36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3740      	adds	r7, #64	@ 0x40
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e46:	bf00      	nop
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	00f42400 	.word	0x00f42400
 8004e50:	017d7840 	.word	0x017d7840

08004e54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e58:	4b03      	ldr	r3, [pc, #12]	@ (8004e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000160 	.word	0x20000160

08004e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e70:	f7ff fff0 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0a9b      	lsrs	r3, r3, #10
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	@ (8004e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	0800f5f8 	.word	0x0800f5f8

08004e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e98:	f7ff ffdc 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0b5b      	lsrs	r3, r3, #13
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	@ (8004eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800f5f8 	.word	0x0800f5f8

08004ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	220f      	movs	r2, #15
 8004eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ecc:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0203 	and.w	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ef0:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	08db      	lsrs	r3, r3, #3
 8004ef6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004efe:	4b07      	ldr	r3, [pc, #28]	@ (8004f1c <HAL_RCC_GetClockConfig+0x60>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	601a      	str	r2, [r3, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40023c00 	.word	0x40023c00

08004f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f48:	4b69      	ldr	r3, [pc, #420]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a68      	ldr	r2, [pc, #416]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f52:	6093      	str	r3, [r2, #8]
 8004f54:	4b66      	ldr	r3, [pc, #408]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5c:	4964      	ldr	r1, [pc, #400]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d017      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	4959      	ldr	r1, [pc, #356]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f98:	d101      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d017      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	494a      	ldr	r1, [pc, #296]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd4:	d101      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 808b 	beq.w	800511a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005004:	4b3a      	ldr	r3, [pc, #232]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	4a39      	ldr	r2, [pc, #228]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005010:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800501c:	4b35      	ldr	r3, [pc, #212]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a34      	ldr	r2, [pc, #208]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005028:	f7fe fa1c 	bl	8003464 <HAL_GetTick>
 800502c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005030:	f7fe fa18 	bl	8003464 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	@ 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e357      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800504e:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005056:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d035      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	429a      	cmp	r2, r3
 800506a:	d02e      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800506c:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005074:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005076:	4b1e      	ldr	r3, [pc, #120]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507a:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005080:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	4a1a      	ldr	r2, [pc, #104]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005094:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d114      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fe f9e0 	bl	8003464 <HAL_GetTick>
 80050a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a6:	e00a      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a8:	f7fe f9dc 	bl	8003464 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e319      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050be:	4b0c      	ldr	r3, [pc, #48]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0ee      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050d6:	d111      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050e4:	4b04      	ldr	r3, [pc, #16]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050e6:	400b      	ands	r3, r1
 80050e8:	4901      	ldr	r1, [pc, #4]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
 80050ee:	e00b      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40007000 	.word	0x40007000
 80050f8:	0ffffcff 	.word	0x0ffffcff
 80050fc:	4baa      	ldr	r3, [pc, #680]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4aa9      	ldr	r2, [pc, #676]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005102:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005106:	6093      	str	r3, [r2, #8]
 8005108:	4ba7      	ldr	r3, [pc, #668]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800510a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005114:	49a4      	ldr	r1, [pc, #656]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005116:	4313      	orrs	r3, r2
 8005118:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d010      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005126:	4ba0      	ldr	r3, [pc, #640]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800512c:	4a9e      	ldr	r2, [pc, #632]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800512e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005132:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005136:	4b9c      	ldr	r3, [pc, #624]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005138:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	4999      	ldr	r1, [pc, #612]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005154:	4b94      	ldr	r3, [pc, #592]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005162:	4991      	ldr	r1, [pc, #580]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005176:	4b8c      	ldr	r3, [pc, #560]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005184:	4988      	ldr	r1, [pc, #544]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005198:	4b83      	ldr	r3, [pc, #524]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051a6:	4980      	ldr	r1, [pc, #512]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051ba:	4b7b      	ldr	r3, [pc, #492]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c8:	4977      	ldr	r1, [pc, #476]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051dc:	4b72      	ldr	r3, [pc, #456]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e2:	f023 0203 	bic.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	496f      	ldr	r1, [pc, #444]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051fe:	4b6a      	ldr	r3, [pc, #424]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005204:	f023 020c 	bic.w	r2, r3, #12
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520c:	4966      	ldr	r1, [pc, #408]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005220:	4b61      	ldr	r3, [pc, #388]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	495e      	ldr	r1, [pc, #376]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005242:	4b59      	ldr	r3, [pc, #356]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005248:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005250:	4955      	ldr	r1, [pc, #340]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005264:	4b50      	ldr	r3, [pc, #320]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	494d      	ldr	r1, [pc, #308]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005286:	4b48      	ldr	r3, [pc, #288]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005294:	4944      	ldr	r1, [pc, #272]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80052a8:	4b3f      	ldr	r3, [pc, #252]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b6:	493c      	ldr	r1, [pc, #240]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80052ca:	4b37      	ldr	r3, [pc, #220]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d8:	4933      	ldr	r1, [pc, #204]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052ec:	4b2e      	ldr	r3, [pc, #184]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052fa:	492b      	ldr	r1, [pc, #172]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d011      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800530e:	4b26      	ldr	r3, [pc, #152]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005314:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800531c:	4922      	ldr	r1, [pc, #136]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800532c:	d101      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800532e:	2301      	movs	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800533e:	2301      	movs	r3, #1
 8005340:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800534e:	4b16      	ldr	r3, [pc, #88]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005354:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800535c:	4912      	ldr	r1, [pc, #72]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005370:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005376:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005380:	4909      	ldr	r1, [pc, #36]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d006      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80d9 	beq.w	800554e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800539c:	4b02      	ldr	r3, [pc, #8]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a01      	ldr	r2, [pc, #4]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053a6:	e001      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80053a8:	40023800 	.word	0x40023800
 80053ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ae:	f7fe f859 	bl	8003464 <HAL_GetTick>
 80053b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053b4:	e008      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053b6:	f7fe f855 	bl	8003464 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b64      	cmp	r3, #100	@ 0x64
 80053c2:	d901      	bls.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e194      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053c8:	4b6c      	ldr	r3, [pc, #432]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f0      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d021      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11d      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053e8:	4b64      	ldr	r3, [pc, #400]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053f6:	4b61      	ldr	r3, [pc, #388]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fc:	0e1b      	lsrs	r3, r3, #24
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	019a      	lsls	r2, r3, #6
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	431a      	orrs	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	4957      	ldr	r1, [pc, #348]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005434:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005442:	2b00      	cmp	r3, #0
 8005444:	d02e      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800544e:	d129      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005450:	4b4a      	ldr	r3, [pc, #296]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800545e:	4b47      	ldr	r3, [pc, #284]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005464:	0f1b      	lsrs	r3, r3, #28
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	019a      	lsls	r2, r3, #6
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	041b      	lsls	r3, r3, #16
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	061b      	lsls	r3, r3, #24
 800547e:	431a      	orrs	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	071b      	lsls	r3, r3, #28
 8005484:	493d      	ldr	r1, [pc, #244]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800548c:	4b3b      	ldr	r3, [pc, #236]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800548e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005492:	f023 021f 	bic.w	r2, r3, #31
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	3b01      	subs	r3, #1
 800549c:	4937      	ldr	r1, [pc, #220]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01d      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054b0:	4b32      	ldr	r3, [pc, #200]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b6:	0e1b      	lsrs	r3, r3, #24
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054be:	4b2f      	ldr	r3, [pc, #188]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c4:	0f1b      	lsrs	r3, r3, #28
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	019a      	lsls	r2, r3, #6
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	431a      	orrs	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	431a      	orrs	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	071b      	lsls	r3, r3, #28
 80054e4:	4925      	ldr	r1, [pc, #148]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d011      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	019a      	lsls	r2, r3, #6
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	061b      	lsls	r3, r3, #24
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	071b      	lsls	r3, r3, #28
 8005514:	4919      	ldr	r1, [pc, #100]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800551c:	4b17      	ldr	r3, [pc, #92]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a16      	ldr	r2, [pc, #88]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005522:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005528:	f7fd ff9c 	bl	8003464 <HAL_GetTick>
 800552c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005530:	f7fd ff98 	bl	8003464 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	@ 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e0d7      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005542:	4b0e      	ldr	r3, [pc, #56]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 80cd 	bne.w	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005556:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a08      	ldr	r2, [pc, #32]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005562:	f7fd ff7f 	bl	8003464 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005568:	e00a      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800556a:	f7fd ff7b 	bl	8003464 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b64      	cmp	r3, #100	@ 0x64
 8005576:	d903      	bls.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0ba      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800557c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005580:	4b5e      	ldr	r3, [pc, #376]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800558c:	d0ed      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d02e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d12a      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055b6:	4b51      	ldr	r3, [pc, #324]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055c4:	4b4d      	ldr	r3, [pc, #308]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ca:	0f1b      	lsrs	r3, r3, #28
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	019a      	lsls	r2, r3, #6
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	071b      	lsls	r3, r3, #28
 80055ea:	4944      	ldr	r1, [pc, #272]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055f2:	4b42      	ldr	r3, [pc, #264]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	3b01      	subs	r3, #1
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	493d      	ldr	r1, [pc, #244]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d022      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800561c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005620:	d11d      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005622:	4b36      	ldr	r3, [pc, #216]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005628:	0e1b      	lsrs	r3, r3, #24
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005630:	4b32      	ldr	r3, [pc, #200]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005636:	0f1b      	lsrs	r3, r3, #28
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	019a      	lsls	r2, r3, #6
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	431a      	orrs	r2, r3
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	061b      	lsls	r3, r3, #24
 8005650:	431a      	orrs	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	071b      	lsls	r3, r3, #28
 8005656:	4929      	ldr	r1, [pc, #164]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d028      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005670:	0e1b      	lsrs	r3, r3, #24
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005678:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	019a      	lsls	r2, r3, #6
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	431a      	orrs	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	061b      	lsls	r3, r3, #24
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	071b      	lsls	r3, r3, #28
 800569e:	4917      	ldr	r1, [pc, #92]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056a6:	4b15      	ldr	r3, [pc, #84]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	4911      	ldr	r1, [pc, #68]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056bc:	4b0f      	ldr	r3, [pc, #60]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0e      	ldr	r2, [pc, #56]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c8:	f7fd fecc 	bl	8003464 <HAL_GetTick>
 80056cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056d0:	f7fd fec8 	bl	8003464 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	@ 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e007      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056e2:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ee:	d1ef      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800

08005700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e049      	b.n	80057a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f841 	bl	80057ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f000 fa00 	bl	8005b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
	...

080057c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d001      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e054      	b.n	8005886 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a26      	ldr	r2, [pc, #152]	@ (8005894 <HAL_TIM_Base_Start_IT+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d022      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x80>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005806:	d01d      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x80>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <HAL_TIM_Base_Start_IT+0xd4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x80>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a21      	ldr	r2, [pc, #132]	@ (800589c <HAL_TIM_Base_Start_IT+0xd8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x80>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x80>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1e      	ldr	r2, [pc, #120]	@ (80058a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x80>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x80>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <HAL_TIM_Base_Start_IT+0xe8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d115      	bne.n	8005870 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	4b19      	ldr	r3, [pc, #100]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xec>)
 800584c:	4013      	ands	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b06      	cmp	r3, #6
 8005854:	d015      	beq.n	8005882 <HAL_TIM_Base_Start_IT+0xbe>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800585c:	d011      	beq.n	8005882 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	e008      	b.n	8005882 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e000      	b.n	8005884 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005882:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40010400 	.word	0x40010400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40001800 	.word	0x40001800
 80058b0:	00010007 	.word	0x00010007

080058b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0202 	mvn.w	r2, #2
 80058e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f905 	bl	8005b06 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f8f7 	bl	8005af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f908 	bl	8005b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d122      	bne.n	8005964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d11b      	bne.n	8005964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0204 	mvn.w	r2, #4
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8db 	bl	8005b06 <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8cd 	bl	8005af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8de 	bl	8005b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b08      	cmp	r3, #8
 8005970:	d122      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d11b      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0208 	mvn.w	r2, #8
 8005988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2204      	movs	r2, #4
 800598e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8b1 	bl	8005b06 <HAL_TIM_IC_CaptureCallback>
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8a3 	bl	8005af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8b4 	bl	8005b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d122      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d11b      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0210 	mvn.w	r2, #16
 80059dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2208      	movs	r2, #8
 80059e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f887 	bl	8005b06 <HAL_TIM_IC_CaptureCallback>
 80059f8:	e005      	b.n	8005a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f879 	bl	8005af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f88a 	bl	8005b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0201 	mvn.w	r2, #1
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fd fa06 	bl	8002e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d10e      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b80      	cmp	r3, #128	@ 0x80
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f91a 	bl	8005c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a72:	d10e      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7e:	2b80      	cmp	r3, #128	@ 0x80
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f90d 	bl	8005cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b40      	cmp	r3, #64	@ 0x40
 8005a9e:	d10e      	bne.n	8005abe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d107      	bne.n	8005abe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f838 	bl	8005b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f06f 0220 	mvn.w	r2, #32
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8cd 	bl	8005c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a40      	ldr	r2, [pc, #256]	@ (8005c58 <TIM_Base_SetConfig+0x114>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b62:	d00f      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3d      	ldr	r2, [pc, #244]	@ (8005c5c <TIM_Base_SetConfig+0x118>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3b      	ldr	r2, [pc, #236]	@ (8005c64 <TIM_Base_SetConfig+0x120>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	@ (8005c68 <TIM_Base_SetConfig+0x124>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2f      	ldr	r2, [pc, #188]	@ (8005c58 <TIM_Base_SetConfig+0x114>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba4:	d027      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c5c <TIM_Base_SetConfig+0x118>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d023      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c64 <TIM_Base_SetConfig+0x120>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	@ (8005c68 <TIM_Base_SetConfig+0x124>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a28      	ldr	r2, [pc, #160]	@ (8005c6c <TIM_Base_SetConfig+0x128>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a27      	ldr	r2, [pc, #156]	@ (8005c70 <TIM_Base_SetConfig+0x12c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a26      	ldr	r2, [pc, #152]	@ (8005c74 <TIM_Base_SetConfig+0x130>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a25      	ldr	r2, [pc, #148]	@ (8005c78 <TIM_Base_SetConfig+0x134>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a24      	ldr	r2, [pc, #144]	@ (8005c7c <TIM_Base_SetConfig+0x138>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	@ (8005c80 <TIM_Base_SetConfig+0x13c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c58 <TIM_Base_SetConfig+0x114>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0xf8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0c      	ldr	r2, [pc, #48]	@ (8005c68 <TIM_Base_SetConfig+0x124>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d103      	bne.n	8005c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	615a      	str	r2, [r3, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40010400 	.word	0x40010400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800
 8005c78:	40001800 	.word	0x40001800
 8005c7c:	40001c00 	.word	0x40001c00
 8005c80:	40002000 	.word	0x40002000

08005c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e040      	b.n	8005d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fd f968 	bl	8002fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	@ 0x24
 8005cec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fbe6 	bl	80064d0 <UART_SetConfig>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e022      	b.n	8005d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fe3e 	bl	8006998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fec5 	bl	8006adc <UART_CheckIdleState>
 8005d52:	4603      	mov	r3, r0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	@ 0x28
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d171      	bne.n	8005e58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_UART_Transmit+0x24>
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e06a      	b.n	8005e5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2221      	movs	r2, #33	@ 0x21
 8005d90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d92:	f7fd fb67 	bl	8003464 <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db0:	d108      	bne.n	8005dc4 <HAL_UART_Transmit+0x68>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e003      	b.n	8005dcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dcc:	e02c      	b.n	8005e28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2180      	movs	r1, #128	@ 0x80
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 feb6 	bl	8006b4a <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e038      	b.n	8005e5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	3302      	adds	r3, #2
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e007      	b.n	8005e16 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1cc      	bne.n	8005dce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2140      	movs	r1, #64	@ 0x40
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fe83 	bl	8006b4a <UART_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e005      	b.n	8005e5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e000      	b.n	8005e5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
  }
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08a      	sub	sp, #40	@ 0x28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d132      	bne.n	8005ee0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_UART_Receive_IT+0x24>
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02b      	b.n	8005ee2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	69f9      	ldr	r1, [r7, #28]
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fefe 	bl	8006cd8 <UART_Start_Receive_IT>
 8005edc:	4603      	mov	r3, r0
 8005ede:	e000      	b.n	8005ee2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3728      	adds	r7, #40	@ 0x28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b0ba      	sub	sp, #232	@ 0xe8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005f16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d115      	bne.n	8005f54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00f      	beq.n	8005f54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8297 	beq.w	8006478 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
      }
      return;
 8005f52:	e291      	b.n	8006478 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8117 	beq.w	800618c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f6e:	4b85      	ldr	r3, [pc, #532]	@ (8006184 <HAL_UART_IRQHandler+0x298>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 810a 	beq.w	800618c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d011      	beq.n	8005fa8 <HAL_UART_IRQHandler+0xbc>
 8005f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2201      	movs	r2, #1
 8005f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d011      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xec>
 8005fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d011      	beq.n	8006008 <HAL_UART_IRQHandler+0x11c>
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ffe:	f043 0202 	orr.w	r2, r3, #2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d017      	beq.n	8006044 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006024:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2208      	movs	r2, #8
 8006032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800603a:	f043 0208 	orr.w	r2, r3, #8
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800604c:	2b00      	cmp	r3, #0
 800604e:	d012      	beq.n	8006076 <HAL_UART_IRQHandler+0x18a>
 8006050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006054:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 81fd 	beq.w	800647c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00d      	beq.n	80060aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800608e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060be:	2b40      	cmp	r3, #64	@ 0x40
 80060c0:	d005      	beq.n	80060ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d04f      	beq.n	800616e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fec8 	bl	8006e64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d141      	bne.n	8006166 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006100:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800610e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006112:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800611a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1d9      	bne.n	80060e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006132:	2b00      	cmp	r3, #0
 8006134:	d013      	beq.n	800615e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800613a:	4a13      	ldr	r2, [pc, #76]	@ (8006188 <HAL_UART_IRQHandler+0x29c>)
 800613c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006142:	4618      	mov	r0, r3
 8006144:	f7fd ffd0 	bl	80040e8 <HAL_DMA_Abort_IT>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d017      	beq.n	800617e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006158:	4610      	mov	r0, r2
 800615a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615c:	e00f      	b.n	800617e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f9a0 	bl	80064a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006164:	e00b      	b.n	800617e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f99c 	bl	80064a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	e007      	b.n	800617e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f998 	bl	80064a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800617c:	e17e      	b.n	800647c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617e:	bf00      	nop
    return;
 8006180:	e17c      	b.n	800647c <HAL_UART_IRQHandler+0x590>
 8006182:	bf00      	nop
 8006184:	04000120 	.word	0x04000120
 8006188:	08006f2d 	.word	0x08006f2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 814c 	bne.w	800642e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8145 	beq.w	800642e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 813e 	beq.w	800642e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2210      	movs	r2, #16
 80061b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b40      	cmp	r3, #64	@ 0x40
 80061c6:	f040 80b6 	bne.w	8006336 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8150 	beq.w	8006480 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ea:	429a      	cmp	r2, r3
 80061ec:	f080 8148 	bcs.w	8006480 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006204:	f000 8086 	beq.w	8006314 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800621c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006232:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006236:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800623e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800624a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1da      	bne.n	8006208 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006262:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006276:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800627a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800627e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e1      	bne.n	8006252 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3308      	adds	r3, #8
 8006294:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800629e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e3      	bne.n	800628e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062e4:	f023 0310 	bic.w	r3, r3, #16
 80062e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e4      	bne.n	80062d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fe7a 	bl	8004008 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006326:	b29b      	uxth	r3, r3
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	b29b      	uxth	r3, r3
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8c2 	bl	80064b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006334:	e0a4      	b.n	8006480 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006342:	b29b      	uxth	r3, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8096 	beq.w	8006484 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8091 	beq.w	8006484 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006376:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006384:	647b      	str	r3, [r7, #68]	@ 0x44
 8006386:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800638a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e4      	bne.n	8006362 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	623b      	str	r3, [r7, #32]
   return(result);
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80063be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e3      	bne.n	8006398 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f023 0310 	bic.w	r3, r3, #16
 80063f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	69b9      	ldr	r1, [r7, #24]
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	617b      	str	r3, [r7, #20]
   return(result);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e4      	bne.n	80063e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f846 	bl	80064b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800642c:	e02a      	b.n	8006484 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01c      	beq.n	8006488 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
    }
    return;
 8006456:	e017      	b.n	8006488 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d012      	beq.n	800648a <HAL_UART_IRQHandler+0x59e>
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fd71 	bl	8006f58 <UART_EndTransmit_IT>
    return;
 8006476:	e008      	b.n	800648a <HAL_UART_IRQHandler+0x59e>
      return;
 8006478:	bf00      	nop
 800647a:	e006      	b.n	800648a <HAL_UART_IRQHandler+0x59e>
    return;
 800647c:	bf00      	nop
 800647e:	e004      	b.n	800648a <HAL_UART_IRQHandler+0x59e>
      return;
 8006480:	bf00      	nop
 8006482:	e002      	b.n	800648a <HAL_UART_IRQHandler+0x59e>
      return;
 8006484:	bf00      	nop
 8006486:	e000      	b.n	800648a <HAL_UART_IRQHandler+0x59e>
    return;
 8006488:	bf00      	nop
  }

}
 800648a:	37e8      	adds	r7, #232	@ 0xe8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4ba6      	ldr	r3, [pc, #664]	@ (8006794 <UART_SetConfig+0x2c4>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	6979      	ldr	r1, [r7, #20]
 8006504:	430b      	orrs	r3, r1
 8006506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	430a      	orrs	r2, r1
 8006540:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a94      	ldr	r2, [pc, #592]	@ (8006798 <UART_SetConfig+0x2c8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d120      	bne.n	800658e <UART_SetConfig+0xbe>
 800654c:	4b93      	ldr	r3, [pc, #588]	@ (800679c <UART_SetConfig+0x2cc>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d816      	bhi.n	8006588 <UART_SetConfig+0xb8>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <UART_SetConfig+0x90>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006571 	.word	0x08006571
 8006564:	0800657d 	.word	0x0800657d
 8006568:	08006577 	.word	0x08006577
 800656c:	08006583 	.word	0x08006583
 8006570:	2301      	movs	r3, #1
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e150      	b.n	8006818 <UART_SetConfig+0x348>
 8006576:	2302      	movs	r3, #2
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e14d      	b.n	8006818 <UART_SetConfig+0x348>
 800657c:	2304      	movs	r3, #4
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e14a      	b.n	8006818 <UART_SetConfig+0x348>
 8006582:	2308      	movs	r3, #8
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e147      	b.n	8006818 <UART_SetConfig+0x348>
 8006588:	2310      	movs	r3, #16
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e144      	b.n	8006818 <UART_SetConfig+0x348>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a83      	ldr	r2, [pc, #524]	@ (80067a0 <UART_SetConfig+0x2d0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d132      	bne.n	80065fe <UART_SetConfig+0x12e>
 8006598:	4b80      	ldr	r3, [pc, #512]	@ (800679c <UART_SetConfig+0x2cc>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659e:	f003 030c 	and.w	r3, r3, #12
 80065a2:	2b0c      	cmp	r3, #12
 80065a4:	d828      	bhi.n	80065f8 <UART_SetConfig+0x128>
 80065a6:	a201      	add	r2, pc, #4	@ (adr r2, 80065ac <UART_SetConfig+0xdc>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065e1 	.word	0x080065e1
 80065b0:	080065f9 	.word	0x080065f9
 80065b4:	080065f9 	.word	0x080065f9
 80065b8:	080065f9 	.word	0x080065f9
 80065bc:	080065ed 	.word	0x080065ed
 80065c0:	080065f9 	.word	0x080065f9
 80065c4:	080065f9 	.word	0x080065f9
 80065c8:	080065f9 	.word	0x080065f9
 80065cc:	080065e7 	.word	0x080065e7
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	080065f9 	.word	0x080065f9
 80065dc:	080065f3 	.word	0x080065f3
 80065e0:	2300      	movs	r3, #0
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e118      	b.n	8006818 <UART_SetConfig+0x348>
 80065e6:	2302      	movs	r3, #2
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e115      	b.n	8006818 <UART_SetConfig+0x348>
 80065ec:	2304      	movs	r3, #4
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e112      	b.n	8006818 <UART_SetConfig+0x348>
 80065f2:	2308      	movs	r3, #8
 80065f4:	77fb      	strb	r3, [r7, #31]
 80065f6:	e10f      	b.n	8006818 <UART_SetConfig+0x348>
 80065f8:	2310      	movs	r3, #16
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	e10c      	b.n	8006818 <UART_SetConfig+0x348>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a68      	ldr	r2, [pc, #416]	@ (80067a4 <UART_SetConfig+0x2d4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d120      	bne.n	800664a <UART_SetConfig+0x17a>
 8006608:	4b64      	ldr	r3, [pc, #400]	@ (800679c <UART_SetConfig+0x2cc>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006612:	2b30      	cmp	r3, #48	@ 0x30
 8006614:	d013      	beq.n	800663e <UART_SetConfig+0x16e>
 8006616:	2b30      	cmp	r3, #48	@ 0x30
 8006618:	d814      	bhi.n	8006644 <UART_SetConfig+0x174>
 800661a:	2b20      	cmp	r3, #32
 800661c:	d009      	beq.n	8006632 <UART_SetConfig+0x162>
 800661e:	2b20      	cmp	r3, #32
 8006620:	d810      	bhi.n	8006644 <UART_SetConfig+0x174>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <UART_SetConfig+0x15c>
 8006626:	2b10      	cmp	r3, #16
 8006628:	d006      	beq.n	8006638 <UART_SetConfig+0x168>
 800662a:	e00b      	b.n	8006644 <UART_SetConfig+0x174>
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e0f2      	b.n	8006818 <UART_SetConfig+0x348>
 8006632:	2302      	movs	r3, #2
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e0ef      	b.n	8006818 <UART_SetConfig+0x348>
 8006638:	2304      	movs	r3, #4
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e0ec      	b.n	8006818 <UART_SetConfig+0x348>
 800663e:	2308      	movs	r3, #8
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e0e9      	b.n	8006818 <UART_SetConfig+0x348>
 8006644:	2310      	movs	r3, #16
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e0e6      	b.n	8006818 <UART_SetConfig+0x348>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a56      	ldr	r2, [pc, #344]	@ (80067a8 <UART_SetConfig+0x2d8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d120      	bne.n	8006696 <UART_SetConfig+0x1c6>
 8006654:	4b51      	ldr	r3, [pc, #324]	@ (800679c <UART_SetConfig+0x2cc>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800665e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006660:	d013      	beq.n	800668a <UART_SetConfig+0x1ba>
 8006662:	2bc0      	cmp	r3, #192	@ 0xc0
 8006664:	d814      	bhi.n	8006690 <UART_SetConfig+0x1c0>
 8006666:	2b80      	cmp	r3, #128	@ 0x80
 8006668:	d009      	beq.n	800667e <UART_SetConfig+0x1ae>
 800666a:	2b80      	cmp	r3, #128	@ 0x80
 800666c:	d810      	bhi.n	8006690 <UART_SetConfig+0x1c0>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <UART_SetConfig+0x1a8>
 8006672:	2b40      	cmp	r3, #64	@ 0x40
 8006674:	d006      	beq.n	8006684 <UART_SetConfig+0x1b4>
 8006676:	e00b      	b.n	8006690 <UART_SetConfig+0x1c0>
 8006678:	2300      	movs	r3, #0
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e0cc      	b.n	8006818 <UART_SetConfig+0x348>
 800667e:	2302      	movs	r3, #2
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e0c9      	b.n	8006818 <UART_SetConfig+0x348>
 8006684:	2304      	movs	r3, #4
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e0c6      	b.n	8006818 <UART_SetConfig+0x348>
 800668a:	2308      	movs	r3, #8
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e0c3      	b.n	8006818 <UART_SetConfig+0x348>
 8006690:	2310      	movs	r3, #16
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e0c0      	b.n	8006818 <UART_SetConfig+0x348>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a44      	ldr	r2, [pc, #272]	@ (80067ac <UART_SetConfig+0x2dc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d125      	bne.n	80066ec <UART_SetConfig+0x21c>
 80066a0:	4b3e      	ldr	r3, [pc, #248]	@ (800679c <UART_SetConfig+0x2cc>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066ae:	d017      	beq.n	80066e0 <UART_SetConfig+0x210>
 80066b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066b4:	d817      	bhi.n	80066e6 <UART_SetConfig+0x216>
 80066b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ba:	d00b      	beq.n	80066d4 <UART_SetConfig+0x204>
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c0:	d811      	bhi.n	80066e6 <UART_SetConfig+0x216>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <UART_SetConfig+0x1fe>
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ca:	d006      	beq.n	80066da <UART_SetConfig+0x20a>
 80066cc:	e00b      	b.n	80066e6 <UART_SetConfig+0x216>
 80066ce:	2300      	movs	r3, #0
 80066d0:	77fb      	strb	r3, [r7, #31]
 80066d2:	e0a1      	b.n	8006818 <UART_SetConfig+0x348>
 80066d4:	2302      	movs	r3, #2
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e09e      	b.n	8006818 <UART_SetConfig+0x348>
 80066da:	2304      	movs	r3, #4
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e09b      	b.n	8006818 <UART_SetConfig+0x348>
 80066e0:	2308      	movs	r3, #8
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e098      	b.n	8006818 <UART_SetConfig+0x348>
 80066e6:	2310      	movs	r3, #16
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e095      	b.n	8006818 <UART_SetConfig+0x348>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2f      	ldr	r2, [pc, #188]	@ (80067b0 <UART_SetConfig+0x2e0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d125      	bne.n	8006742 <UART_SetConfig+0x272>
 80066f6:	4b29      	ldr	r3, [pc, #164]	@ (800679c <UART_SetConfig+0x2cc>)
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006700:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006704:	d017      	beq.n	8006736 <UART_SetConfig+0x266>
 8006706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800670a:	d817      	bhi.n	800673c <UART_SetConfig+0x26c>
 800670c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006710:	d00b      	beq.n	800672a <UART_SetConfig+0x25a>
 8006712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006716:	d811      	bhi.n	800673c <UART_SetConfig+0x26c>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <UART_SetConfig+0x254>
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006720:	d006      	beq.n	8006730 <UART_SetConfig+0x260>
 8006722:	e00b      	b.n	800673c <UART_SetConfig+0x26c>
 8006724:	2301      	movs	r3, #1
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e076      	b.n	8006818 <UART_SetConfig+0x348>
 800672a:	2302      	movs	r3, #2
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e073      	b.n	8006818 <UART_SetConfig+0x348>
 8006730:	2304      	movs	r3, #4
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e070      	b.n	8006818 <UART_SetConfig+0x348>
 8006736:	2308      	movs	r3, #8
 8006738:	77fb      	strb	r3, [r7, #31]
 800673a:	e06d      	b.n	8006818 <UART_SetConfig+0x348>
 800673c:	2310      	movs	r3, #16
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e06a      	b.n	8006818 <UART_SetConfig+0x348>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1b      	ldr	r2, [pc, #108]	@ (80067b4 <UART_SetConfig+0x2e4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d138      	bne.n	80067be <UART_SetConfig+0x2ee>
 800674c:	4b13      	ldr	r3, [pc, #76]	@ (800679c <UART_SetConfig+0x2cc>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006756:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800675a:	d017      	beq.n	800678c <UART_SetConfig+0x2bc>
 800675c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006760:	d82a      	bhi.n	80067b8 <UART_SetConfig+0x2e8>
 8006762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006766:	d00b      	beq.n	8006780 <UART_SetConfig+0x2b0>
 8006768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800676c:	d824      	bhi.n	80067b8 <UART_SetConfig+0x2e8>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <UART_SetConfig+0x2aa>
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006776:	d006      	beq.n	8006786 <UART_SetConfig+0x2b6>
 8006778:	e01e      	b.n	80067b8 <UART_SetConfig+0x2e8>
 800677a:	2300      	movs	r3, #0
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e04b      	b.n	8006818 <UART_SetConfig+0x348>
 8006780:	2302      	movs	r3, #2
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e048      	b.n	8006818 <UART_SetConfig+0x348>
 8006786:	2304      	movs	r3, #4
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e045      	b.n	8006818 <UART_SetConfig+0x348>
 800678c:	2308      	movs	r3, #8
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e042      	b.n	8006818 <UART_SetConfig+0x348>
 8006792:	bf00      	nop
 8006794:	efff69f3 	.word	0xefff69f3
 8006798:	40011000 	.word	0x40011000
 800679c:	40023800 	.word	0x40023800
 80067a0:	40004400 	.word	0x40004400
 80067a4:	40004800 	.word	0x40004800
 80067a8:	40004c00 	.word	0x40004c00
 80067ac:	40005000 	.word	0x40005000
 80067b0:	40011400 	.word	0x40011400
 80067b4:	40007800 	.word	0x40007800
 80067b8:	2310      	movs	r3, #16
 80067ba:	77fb      	strb	r3, [r7, #31]
 80067bc:	e02c      	b.n	8006818 <UART_SetConfig+0x348>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a72      	ldr	r2, [pc, #456]	@ (800698c <UART_SetConfig+0x4bc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d125      	bne.n	8006814 <UART_SetConfig+0x344>
 80067c8:	4b71      	ldr	r3, [pc, #452]	@ (8006990 <UART_SetConfig+0x4c0>)
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80067d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067d6:	d017      	beq.n	8006808 <UART_SetConfig+0x338>
 80067d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067dc:	d817      	bhi.n	800680e <UART_SetConfig+0x33e>
 80067de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e2:	d00b      	beq.n	80067fc <UART_SetConfig+0x32c>
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e8:	d811      	bhi.n	800680e <UART_SetConfig+0x33e>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <UART_SetConfig+0x326>
 80067ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067f2:	d006      	beq.n	8006802 <UART_SetConfig+0x332>
 80067f4:	e00b      	b.n	800680e <UART_SetConfig+0x33e>
 80067f6:	2300      	movs	r3, #0
 80067f8:	77fb      	strb	r3, [r7, #31]
 80067fa:	e00d      	b.n	8006818 <UART_SetConfig+0x348>
 80067fc:	2302      	movs	r3, #2
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e00a      	b.n	8006818 <UART_SetConfig+0x348>
 8006802:	2304      	movs	r3, #4
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e007      	b.n	8006818 <UART_SetConfig+0x348>
 8006808:	2308      	movs	r3, #8
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e004      	b.n	8006818 <UART_SetConfig+0x348>
 800680e:	2310      	movs	r3, #16
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e001      	b.n	8006818 <UART_SetConfig+0x348>
 8006814:	2310      	movs	r3, #16
 8006816:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006820:	d15b      	bne.n	80068da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006822:	7ffb      	ldrb	r3, [r7, #31]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d828      	bhi.n	800687a <UART_SetConfig+0x3aa>
 8006828:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <UART_SetConfig+0x360>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006855 	.word	0x08006855
 8006834:	0800685d 	.word	0x0800685d
 8006838:	08006865 	.word	0x08006865
 800683c:	0800687b 	.word	0x0800687b
 8006840:	0800686b 	.word	0x0800686b
 8006844:	0800687b 	.word	0x0800687b
 8006848:	0800687b 	.word	0x0800687b
 800684c:	0800687b 	.word	0x0800687b
 8006850:	08006873 	.word	0x08006873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006854:	f7fe fb0a 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8006858:	61b8      	str	r0, [r7, #24]
        break;
 800685a:	e013      	b.n	8006884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800685c:	f7fe fb1a 	bl	8004e94 <HAL_RCC_GetPCLK2Freq>
 8006860:	61b8      	str	r0, [r7, #24]
        break;
 8006862:	e00f      	b.n	8006884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006864:	4b4b      	ldr	r3, [pc, #300]	@ (8006994 <UART_SetConfig+0x4c4>)
 8006866:	61bb      	str	r3, [r7, #24]
        break;
 8006868:	e00c      	b.n	8006884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800686a:	f7fe fa2d 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 800686e:	61b8      	str	r0, [r7, #24]
        break;
 8006870:	e008      	b.n	8006884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006876:	61bb      	str	r3, [r7, #24]
        break;
 8006878:	e004      	b.n	8006884 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	77bb      	strb	r3, [r7, #30]
        break;
 8006882:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d074      	beq.n	8006974 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	005a      	lsls	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b0f      	cmp	r3, #15
 80068a4:	d916      	bls.n	80068d4 <UART_SetConfig+0x404>
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ac:	d212      	bcs.n	80068d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f023 030f 	bic.w	r3, r3, #15
 80068b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	89fa      	ldrh	r2, [r7, #14]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	e04f      	b.n	8006974 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	77bb      	strb	r3, [r7, #30]
 80068d8:	e04c      	b.n	8006974 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068da:	7ffb      	ldrb	r3, [r7, #31]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d828      	bhi.n	8006932 <UART_SetConfig+0x462>
 80068e0:	a201      	add	r2, pc, #4	@ (adr r2, 80068e8 <UART_SetConfig+0x418>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	0800690d 	.word	0x0800690d
 80068ec:	08006915 	.word	0x08006915
 80068f0:	0800691d 	.word	0x0800691d
 80068f4:	08006933 	.word	0x08006933
 80068f8:	08006923 	.word	0x08006923
 80068fc:	08006933 	.word	0x08006933
 8006900:	08006933 	.word	0x08006933
 8006904:	08006933 	.word	0x08006933
 8006908:	0800692b 	.word	0x0800692b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800690c:	f7fe faae 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8006910:	61b8      	str	r0, [r7, #24]
        break;
 8006912:	e013      	b.n	800693c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006914:	f7fe fabe 	bl	8004e94 <HAL_RCC_GetPCLK2Freq>
 8006918:	61b8      	str	r0, [r7, #24]
        break;
 800691a:	e00f      	b.n	800693c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800691c:	4b1d      	ldr	r3, [pc, #116]	@ (8006994 <UART_SetConfig+0x4c4>)
 800691e:	61bb      	str	r3, [r7, #24]
        break;
 8006920:	e00c      	b.n	800693c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006922:	f7fe f9d1 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8006926:	61b8      	str	r0, [r7, #24]
        break;
 8006928:	e008      	b.n	800693c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800692e:	61bb      	str	r3, [r7, #24]
        break;
 8006930:	e004      	b.n	800693c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	77bb      	strb	r3, [r7, #30]
        break;
 800693a:	bf00      	nop
    }

    if (pclk != 0U)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d018      	beq.n	8006974 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	085a      	lsrs	r2, r3, #1
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	441a      	add	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b0f      	cmp	r3, #15
 800695a:	d909      	bls.n	8006970 <UART_SetConfig+0x4a0>
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006962:	d205      	bcs.n	8006970 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60da      	str	r2, [r3, #12]
 800696e:	e001      	b.n	8006974 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006980:	7fbb      	ldrb	r3, [r7, #30]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40007c00 	.word	0x40007c00
 8006990:	40023800 	.word	0x40023800
 8006994:	00f42400 	.word	0x00f42400

08006998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01a      	beq.n	8006aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a96:	d10a      	bne.n	8006aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aec:	f7fc fcba 	bl	8003464 <HAL_GetTick>
 8006af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d10e      	bne.n	8006b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f81b 	bl	8006b4a <UART_WaitOnFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e011      	b.n	8006b42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b09c      	sub	sp, #112	@ 0x70
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	4613      	mov	r3, r2
 8006b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5a:	e0a7      	b.n	8006cac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	f000 80a3 	beq.w	8006cac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b66:	f7fc fc7d 	bl	8003464 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d13f      	bne.n	8006bfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b9c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ba0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e6      	bne.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bce:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006bd0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006bd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2220      	movs	r2, #32
 8006be6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e068      	b.n	8006cce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d050      	beq.n	8006cac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c18:	d148      	bne.n	8006cac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e6      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	613b      	str	r3, [r7, #16]
   return(result);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f023 0301 	bic.w	r3, r3, #1
 8006c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3308      	adds	r3, #8
 8006c74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c76:	623a      	str	r2, [r7, #32]
 8006c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	69f9      	ldr	r1, [r7, #28]
 8006c7c:	6a3a      	ldr	r2, [r7, #32]
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e5      	bne.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e010      	b.n	8006cce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	bf0c      	ite	eq
 8006cbc:	2301      	moveq	r3, #1
 8006cbe:	2300      	movne	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	f43f af48 	beq.w	8006b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3770      	adds	r7, #112	@ 0x70
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b097      	sub	sp, #92	@ 0x5c
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0a:	d10e      	bne.n	8006d2a <UART_Start_Receive_IT+0x52>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <UART_Start_Receive_IT+0x48>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d1e:	e02d      	b.n	8006d7c <UART_Start_Receive_IT+0xa4>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	22ff      	movs	r2, #255	@ 0xff
 8006d24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d28:	e028      	b.n	8006d7c <UART_Start_Receive_IT+0xa4>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10d      	bne.n	8006d4e <UART_Start_Receive_IT+0x76>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <UART_Start_Receive_IT+0x6c>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	22ff      	movs	r2, #255	@ 0xff
 8006d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d42:	e01b      	b.n	8006d7c <UART_Start_Receive_IT+0xa4>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	227f      	movs	r2, #127	@ 0x7f
 8006d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d4c:	e016      	b.n	8006d7c <UART_Start_Receive_IT+0xa4>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d56:	d10d      	bne.n	8006d74 <UART_Start_Receive_IT+0x9c>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <UART_Start_Receive_IT+0x92>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	227f      	movs	r2, #127	@ 0x7f
 8006d64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d68:	e008      	b.n	8006d7c <UART_Start_Receive_IT+0xa4>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	223f      	movs	r2, #63	@ 0x3f
 8006d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d72:	e003      	b.n	8006d7c <UART_Start_Receive_IT+0xa4>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2222      	movs	r2, #34	@ 0x22
 8006d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006dac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006dae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc8:	d107      	bne.n	8006dda <UART_Start_Receive_IT+0x102>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4a21      	ldr	r2, [pc, #132]	@ (8006e5c <UART_Start_Receive_IT+0x184>)
 8006dd6:	669a      	str	r2, [r3, #104]	@ 0x68
 8006dd8:	e002      	b.n	8006de0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a20      	ldr	r2, [pc, #128]	@ (8006e60 <UART_Start_Receive_IT+0x188>)
 8006dde:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d019      	beq.n	8006e1c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e08:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e6      	bne.n	8006de8 <UART_Start_Receive_IT+0x110>
 8006e1a:	e018      	b.n	8006e4e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f043 0320 	orr.w	r3, r3, #32
 8006e30:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	69f9      	ldr	r1, [r7, #28]
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e6      	bne.n	8006e1c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	375c      	adds	r7, #92	@ 0x5c
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	08007113 	.word	0x08007113
 8006e60:	08006fad 	.word	0x08006fad

08006e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b095      	sub	sp, #84	@ 0x54
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e6      	bne.n	8006e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f023 0301 	bic.w	r3, r3, #1
 8006eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3308      	adds	r3, #8
 8006ebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e5      	bne.n	8006e9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d118      	bne.n	8006f0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6979      	ldr	r1, [r7, #20]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	613b      	str	r3, [r7, #16]
   return(result);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f20:	bf00      	nop
 8006f22:	3754      	adds	r7, #84	@ 0x54
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff faaa 	bl	80064a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f50:	bf00      	nop
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f74:	61fb      	str	r3, [r7, #28]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6979      	ldr	r1, [r7, #20]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fa76 	bl	8006490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa4:	bf00      	nop
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b096      	sub	sp, #88	@ 0x58
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fba:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc4:	2b22      	cmp	r3, #34	@ 0x22
 8006fc6:	f040 8098 	bne.w	80070fa <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fd4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006fd8:	b2d9      	uxtb	r1, r3
 8006fda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe4:	400a      	ands	r2, r1
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d17b      	bne.n	800710a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007022:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007026:	653b      	str	r3, [r7, #80]	@ 0x50
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007030:	647b      	str	r3, [r7, #68]	@ 0x44
 8007032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800703e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e6      	bne.n	8007012 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3308      	adds	r3, #8
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	623b      	str	r3, [r7, #32]
   return(result);
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3308      	adds	r3, #8
 8007062:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007064:	633a      	str	r2, [r7, #48]	@ 0x30
 8007066:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e5      	bne.n	8007044 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007090:	2b01      	cmp	r3, #1
 8007092:	d12e      	bne.n	80070f2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0310 	bic.w	r3, r3, #16
 80070ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	d103      	bne.n	80070e2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2210      	movs	r2, #16
 80070e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff f9e4 	bl	80064b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070f0:	e00b      	b.n	800710a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fa fc4c 	bl	8001990 <HAL_UART_RxCpltCallback>
}
 80070f8:	e007      	b.n	800710a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699a      	ldr	r2, [r3, #24]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0208 	orr.w	r2, r2, #8
 8007108:	619a      	str	r2, [r3, #24]
}
 800710a:	bf00      	nop
 800710c:	3758      	adds	r7, #88	@ 0x58
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b096      	sub	sp, #88	@ 0x58
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007120:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800712a:	2b22      	cmp	r3, #34	@ 0x22
 800712c:	f040 8098 	bne.w	8007260 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007140:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007144:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007148:	4013      	ands	r3, r2
 800714a:	b29a      	uxth	r2, r3
 800714c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007154:	1c9a      	adds	r2, r3, #2
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d17b      	bne.n	8007270 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800718c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007196:	643b      	str	r3, [r7, #64]	@ 0x40
 8007198:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800719c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e6      	bne.n	8007178 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e5      	bne.n	80071aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d12e      	bne.n	8007258 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	60bb      	str	r3, [r7, #8]
   return(result);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 0310 	bic.w	r3, r3, #16
 8007214:	647b      	str	r3, [r7, #68]	@ 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6979      	ldr	r1, [r7, #20]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	613b      	str	r3, [r7, #16]
   return(result);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b10      	cmp	r3, #16
 800723e:	d103      	bne.n	8007248 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2210      	movs	r2, #16
 8007246:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff f931 	bl	80064b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007256:	e00b      	b.n	8007270 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fa fb99 	bl	8001990 <HAL_UART_RxCpltCallback>
}
 800725e:	e007      	b.n	8007270 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0208 	orr.w	r2, r2, #8
 800726e:	619a      	str	r2, [r3, #24]
}
 8007270:	bf00      	nop
 8007272:	3758      	adds	r7, #88	@ 0x58
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800728e:	f3ef 8305 	mrs	r3, IPSR
 8007292:	60bb      	str	r3, [r7, #8]
  return(result);
 8007294:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10f      	bne.n	80072ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729a:	f3ef 8310 	mrs	r3, PRIMASK
 800729e:	607b      	str	r3, [r7, #4]
  return(result);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072a6:	f3ef 8311 	mrs	r3, BASEPRI
 80072aa:	603b      	str	r3, [r7, #0]
  return(result);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <osKernelInitialize+0x3a>
 80072b2:	4b0e      	ldr	r3, [pc, #56]	@ (80072ec <osKernelInitialize+0x64>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d103      	bne.n	80072c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80072ba:	f06f 0305 	mvn.w	r3, #5
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e00c      	b.n	80072dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072c2:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <osKernelInitialize+0x64>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072ca:	4b08      	ldr	r3, [pc, #32]	@ (80072ec <osKernelInitialize+0x64>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e002      	b.n	80072dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80072d6:	f04f 33ff 	mov.w	r3, #4294967295
 80072da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000558 	.word	0x20000558

080072f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f6:	f3ef 8305 	mrs	r3, IPSR
 80072fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80072fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10f      	bne.n	8007322 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007302:	f3ef 8310 	mrs	r3, PRIMASK
 8007306:	607b      	str	r3, [r7, #4]
  return(result);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800730e:	f3ef 8311 	mrs	r3, BASEPRI
 8007312:	603b      	str	r3, [r7, #0]
  return(result);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <osKernelStart+0x3a>
 800731a:	4b0f      	ldr	r3, [pc, #60]	@ (8007358 <osKernelStart+0x68>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d103      	bne.n	800732a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007322:	f06f 0305 	mvn.w	r3, #5
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e010      	b.n	800734c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800732a:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <osKernelStart+0x68>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d109      	bne.n	8007346 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007332:	f7ff ffa1 	bl	8007278 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007336:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <osKernelStart+0x68>)
 8007338:	2202      	movs	r2, #2
 800733a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800733c:	f001 fd34 	bl	8008da8 <vTaskStartScheduler>
      stat = osOK;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	e002      	b.n	800734c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
 800734a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800734c:	68fb      	ldr	r3, [r7, #12]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000558 	.word	0x20000558

0800735c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b090      	sub	sp, #64	@ 0x40
 8007360:	af04      	add	r7, sp, #16
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736c:	f3ef 8305 	mrs	r3, IPSR
 8007370:	61fb      	str	r3, [r7, #28]
  return(result);
 8007372:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 808f 	bne.w	8007498 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800737a:	f3ef 8310 	mrs	r3, PRIMASK
 800737e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d105      	bne.n	8007392 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007386:	f3ef 8311 	mrs	r3, BASEPRI
 800738a:	617b      	str	r3, [r7, #20]
  return(result);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <osThreadNew+0x3e>
 8007392:	4b44      	ldr	r3, [pc, #272]	@ (80074a4 <osThreadNew+0x148>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d07e      	beq.n	8007498 <osThreadNew+0x13c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d07b      	beq.n	8007498 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80073a0:	2380      	movs	r3, #128	@ 0x80
 80073a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80073a4:	2318      	movs	r3, #24
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80073ac:	f04f 33ff 	mov.w	r3, #4294967295
 80073b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d045      	beq.n	8007444 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <osThreadNew+0x6a>
        name = attr->name;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <osThreadNew+0x90>
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	2b38      	cmp	r3, #56	@ 0x38
 80073de:	d805      	bhi.n	80073ec <osThreadNew+0x90>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <osThreadNew+0x94>
        return (NULL);
 80073ec:	2300      	movs	r3, #0
 80073ee:	e054      	b.n	800749a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	089b      	lsrs	r3, r3, #2
 80073fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00e      	beq.n	8007426 <osThreadNew+0xca>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2ba7      	cmp	r3, #167	@ 0xa7
 800740e:	d90a      	bls.n	8007426 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <osThreadNew+0xca>
        mem = 1;
 8007420:	2301      	movs	r3, #1
 8007422:	623b      	str	r3, [r7, #32]
 8007424:	e010      	b.n	8007448 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <osThreadNew+0xec>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <osThreadNew+0xec>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <osThreadNew+0xec>
          mem = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	623b      	str	r3, [r7, #32]
 8007442:	e001      	b.n	8007448 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d110      	bne.n	8007470 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 faa1 	bl	80089ac <xTaskCreateStatic>
 800746a:	4603      	mov	r3, r0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	e013      	b.n	8007498 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d110      	bne.n	8007498 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	b29a      	uxth	r2, r3
 800747a:	f107 0310 	add.w	r3, r7, #16
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f001 faf5 	bl	8008a78 <xTaskCreate>
 800748e:	4603      	mov	r3, r0
 8007490:	2b01      	cmp	r3, #1
 8007492:	d001      	beq.n	8007498 <osThreadNew+0x13c>
          hTask = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007498:	693b      	ldr	r3, [r7, #16]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3730      	adds	r7, #48	@ 0x30
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000558 	.word	0x20000558

080074a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b0:	f3ef 8305 	mrs	r3, IPSR
 80074b4:	613b      	str	r3, [r7, #16]
  return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10f      	bne.n	80074dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074bc:	f3ef 8310 	mrs	r3, PRIMASK
 80074c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074c8:	f3ef 8311 	mrs	r3, BASEPRI
 80074cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d007      	beq.n	80074e4 <osDelay+0x3c>
 80074d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007500 <osDelay+0x58>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d103      	bne.n	80074e4 <osDelay+0x3c>
    stat = osErrorISR;
 80074dc:	f06f 0305 	mvn.w	r3, #5
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e007      	b.n	80074f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fc22 	bl	8008d38 <vTaskDelay>
    }
  }

  return (stat);
 80074f4:	697b      	ldr	r3, [r7, #20]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000558 	.word	0x20000558

08007504 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f002 fecb 	bl	800a2a8 <pvTimerGetTimerID>
 8007512:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <TimerCallback+0x22>
    callb->func (callb->arg);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	6852      	ldr	r2, [r2, #4]
 8007522:	4610      	mov	r0, r2
 8007524:	4798      	blx	r3
  }
}
 8007526:	bf00      	nop
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b08e      	sub	sp, #56	@ 0x38
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	460b      	mov	r3, r1
 800753e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007540:	2300      	movs	r3, #0
 8007542:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007544:	f3ef 8305 	mrs	r3, IPSR
 8007548:	61bb      	str	r3, [r7, #24]
  return(result);
 800754a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800754c:	2b00      	cmp	r3, #0
 800754e:	d16a      	bne.n	8007626 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007550:	f3ef 8310 	mrs	r3, PRIMASK
 8007554:	617b      	str	r3, [r7, #20]
  return(result);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800755c:	f3ef 8311 	mrs	r3, BASEPRI
 8007560:	613b      	str	r3, [r7, #16]
  return(result);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <osTimerNew+0x40>
 8007568:	4b31      	ldr	r3, [pc, #196]	@ (8007630 <osTimerNew+0x100>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d05a      	beq.n	8007626 <osTimerNew+0xf6>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d057      	beq.n	8007626 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007576:	2008      	movs	r0, #8
 8007578:	f003 f8f6 	bl	800a768 <pvPortMalloc>
 800757c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d050      	beq.n	8007626 <osTimerNew+0xf6>
      callb->func = func;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d102      	bne.n	800759c <osTimerNew+0x6c>
        reload = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
 800759a:	e001      	b.n	80075a0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295
 80075a4:	623b      	str	r3, [r7, #32]
      name = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01c      	beq.n	80075ea <osTimerNew+0xba>
        if (attr->name != NULL) {
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <osTimerNew+0x8e>
          name = attr->name;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d006      	beq.n	80075d4 <osTimerNew+0xa4>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80075cc:	d902      	bls.n	80075d4 <osTimerNew+0xa4>
          mem = 1;
 80075ce:	2301      	movs	r3, #1
 80075d0:	623b      	str	r3, [r7, #32]
 80075d2:	e00c      	b.n	80075ee <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <osTimerNew+0xbe>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <osTimerNew+0xbe>
            mem = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	623b      	str	r3, [r7, #32]
 80075e8:	e001      	b.n	80075ee <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d10c      	bne.n	800760e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007634 <osTimerNew+0x104>)
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007602:	2101      	movs	r1, #1
 8007604:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007606:	f002 fab0 	bl	8009b6a <xTimerCreateStatic>
 800760a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800760c:	e00b      	b.n	8007626 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d108      	bne.n	8007626 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007614:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <osTimerNew+0x104>)
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761c:	2101      	movs	r1, #1
 800761e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007620:	f002 fa82 	bl	8009b28 <xTimerCreate>
 8007624:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8007628:	4618      	mov	r0, r3
 800762a:	3730      	adds	r7, #48	@ 0x30
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000558 	.word	0x20000558
 8007634:	08007505 	.word	0x08007505

08007638 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	@ 0x28
 800763c:	af02      	add	r7, sp, #8
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007646:	f3ef 8305 	mrs	r3, IPSR
 800764a:	617b      	str	r3, [r7, #20]
  return(result);
 800764c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10f      	bne.n	8007672 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007652:	f3ef 8310 	mrs	r3, PRIMASK
 8007656:	613b      	str	r3, [r7, #16]
  return(result);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800765e:	f3ef 8311 	mrs	r3, BASEPRI
 8007662:	60fb      	str	r3, [r7, #12]
  return(result);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d007      	beq.n	800767a <osTimerStart+0x42>
 800766a:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <osTimerStart+0x7c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d103      	bne.n	800767a <osTimerStart+0x42>
    stat = osErrorISR;
 8007672:	f06f 0305 	mvn.w	r3, #5
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	e017      	b.n	80076aa <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d103      	bne.n	8007688 <osTimerStart+0x50>
    stat = osErrorParameter;
 8007680:	f06f 0303 	mvn.w	r3, #3
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	e010      	b.n	80076aa <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007688:	2300      	movs	r3, #0
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	2300      	movs	r3, #0
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	2104      	movs	r1, #4
 8007692:	69b8      	ldr	r0, [r7, #24]
 8007694:	f002 faec 	bl	8009c70 <xTimerGenericCommand>
 8007698:	4603      	mov	r3, r0
 800769a:	2b01      	cmp	r3, #1
 800769c:	d102      	bne.n	80076a4 <osTimerStart+0x6c>
      stat = osOK;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	e002      	b.n	80076aa <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80076a4:	f06f 0302 	mvn.w	r3, #2
 80076a8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80076aa:	69fb      	ldr	r3, [r7, #28]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000558 	.word	0x20000558

080076b8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	@ 0x28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c4:	f3ef 8305 	mrs	r3, IPSR
 80076c8:	613b      	str	r3, [r7, #16]
  return(result);
 80076ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 8085 	bne.w	80077dc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d2:	f3ef 8310 	mrs	r3, PRIMASK
 80076d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d105      	bne.n	80076ea <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076de:	f3ef 8311 	mrs	r3, BASEPRI
 80076e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <osMutexNew+0x3a>
 80076ea:	4b3f      	ldr	r3, [pc, #252]	@ (80077e8 <osMutexNew+0x130>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d074      	beq.n	80077dc <osMutexNew+0x124>
    if (attr != NULL) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <osMutexNew+0x48>
      type = attr->attr_bits;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	623b      	str	r3, [r7, #32]
 80076fe:	e001      	b.n	8007704 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <osMutexNew+0x5c>
      rmtx = 1U;
 800770e:	2301      	movs	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e001      	b.n	8007718 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d15c      	bne.n	80077dc <osMutexNew+0x124>
      mem = -1;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d015      	beq.n	800775a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d006      	beq.n	8007744 <osMutexNew+0x8c>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b4f      	cmp	r3, #79	@ 0x4f
 800773c:	d902      	bls.n	8007744 <osMutexNew+0x8c>
          mem = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e00c      	b.n	800775e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d108      	bne.n	800775e <osMutexNew+0xa6>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <osMutexNew+0xa6>
            mem = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	61bb      	str	r3, [r7, #24]
 8007758:	e001      	b.n	800775e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d112      	bne.n	800778a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	4619      	mov	r1, r3
 8007770:	2004      	movs	r0, #4
 8007772:	f000 fb5c 	bl	8007e2e <xQueueCreateMutexStatic>
 8007776:	6278      	str	r0, [r7, #36]	@ 0x24
 8007778:	e016      	b.n	80077a8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	4619      	mov	r1, r3
 8007780:	2001      	movs	r0, #1
 8007782:	f000 fb54 	bl	8007e2e <xQueueCreateMutexStatic>
 8007786:	6278      	str	r0, [r7, #36]	@ 0x24
 8007788:	e00e      	b.n	80077a8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007796:	2004      	movs	r0, #4
 8007798:	f000 fb31 	bl	8007dfe <xQueueCreateMutex>
 800779c:	6278      	str	r0, [r7, #36]	@ 0x24
 800779e:	e003      	b.n	80077a8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80077a0:	2001      	movs	r0, #1
 80077a2:	f000 fb2c 	bl	8007dfe <xQueueCreateMutex>
 80077a6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <osMutexNew+0x110>
        if (attr != NULL) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <osMutexNew+0x104>
          name = attr->name;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e001      	b.n	80077c0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077c4:	f001 f894 	bl	80088f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d006      	beq.n	80077dc <osMutexNew+0x124>
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	f043 0301 	orr.w	r3, r3, #1
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80077dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3728      	adds	r7, #40	@ 0x28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000558 	.word	0x20000558

080077ec <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800780a:	f3ef 8305 	mrs	r3, IPSR
 800780e:	613b      	str	r3, [r7, #16]
  return(result);
 8007810:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10f      	bne.n	8007836 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007816:	f3ef 8310 	mrs	r3, PRIMASK
 800781a:	60fb      	str	r3, [r7, #12]
  return(result);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007822:	f3ef 8311 	mrs	r3, BASEPRI
 8007826:	60bb      	str	r3, [r7, #8]
  return(result);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d007      	beq.n	800783e <osMutexAcquire+0x52>
 800782e:	4b1d      	ldr	r3, [pc, #116]	@ (80078a4 <osMutexAcquire+0xb8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d103      	bne.n	800783e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007836:	f06f 0305 	mvn.w	r3, #5
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	e02c      	b.n	8007898 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007844:	f06f 0303 	mvn.w	r3, #3
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e025      	b.n	8007898 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d011      	beq.n	8007876 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	69b8      	ldr	r0, [r7, #24]
 8007856:	f000 fb3c 	bl	8007ed2 <xQueueTakeMutexRecursive>
 800785a:	4603      	mov	r3, r0
 800785c:	2b01      	cmp	r3, #1
 800785e:	d01b      	beq.n	8007898 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007866:	f06f 0301 	mvn.w	r3, #1
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	e014      	b.n	8007898 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800786e:	f06f 0302 	mvn.w	r3, #2
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	e010      	b.n	8007898 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	69b8      	ldr	r0, [r7, #24]
 800787a:	f000 fdf9 	bl	8008470 <xQueueSemaphoreTake>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d009      	beq.n	8007898 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800788a:	f06f 0301 	mvn.w	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	e002      	b.n	8007898 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007892:	f06f 0302 	mvn.w	r3, #2
 8007896:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007898:	69fb      	ldr	r3, [r7, #28]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3720      	adds	r7, #32
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000558 	.word	0x20000558

080078a8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f023 0301 	bic.w	r3, r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c4:	f3ef 8305 	mrs	r3, IPSR
 80078c8:	613b      	str	r3, [r7, #16]
  return(result);
 80078ca:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10f      	bne.n	80078f0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d0:	f3ef 8310 	mrs	r3, PRIMASK
 80078d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078dc:	f3ef 8311 	mrs	r3, BASEPRI
 80078e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <osMutexRelease+0x50>
 80078e8:	4b16      	ldr	r3, [pc, #88]	@ (8007944 <osMutexRelease+0x9c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d103      	bne.n	80078f8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80078f0:	f06f 0305 	mvn.w	r3, #5
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	e01f      	b.n	8007938 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d103      	bne.n	8007906 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80078fe:	f06f 0303 	mvn.w	r3, #3
 8007902:	61fb      	str	r3, [r7, #28]
 8007904:	e018      	b.n	8007938 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800790c:	69b8      	ldr	r0, [r7, #24]
 800790e:	f000 faa9 	bl	8007e64 <xQueueGiveMutexRecursive>
 8007912:	4603      	mov	r3, r0
 8007914:	2b01      	cmp	r3, #1
 8007916:	d00f      	beq.n	8007938 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007918:	f06f 0302 	mvn.w	r3, #2
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e00b      	b.n	8007938 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007920:	2300      	movs	r3, #0
 8007922:	2200      	movs	r2, #0
 8007924:	2100      	movs	r1, #0
 8007926:	69b8      	ldr	r0, [r7, #24]
 8007928:	f000 fb0c 	bl	8007f44 <xQueueGenericSend>
 800792c:	4603      	mov	r3, r0
 800792e:	2b01      	cmp	r3, #1
 8007930:	d002      	beq.n	8007938 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007932:	f06f 0302 	mvn.w	r3, #2
 8007936:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007938:	69fb      	ldr	r3, [r7, #28]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000558 	.word	0x20000558

08007948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4a07      	ldr	r2, [pc, #28]	@ (8007974 <vApplicationGetIdleTaskMemory+0x2c>)
 8007958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4a06      	ldr	r2, [pc, #24]	@ (8007978 <vApplicationGetIdleTaskMemory+0x30>)
 800795e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2280      	movs	r2, #128	@ 0x80
 8007964:	601a      	str	r2, [r3, #0]
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	2000055c 	.word	0x2000055c
 8007978:	20000604 	.word	0x20000604

0800797c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a07      	ldr	r2, [pc, #28]	@ (80079a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800798c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4a06      	ldr	r2, [pc, #24]	@ (80079ac <vApplicationGetTimerTaskMemory+0x30>)
 8007992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800799a:	601a      	str	r2, [r3, #0]
}
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000804 	.word	0x20000804
 80079ac:	200008ac 	.word	0x200008ac

080079b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f103 0208 	add.w	r2, r3, #8
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f103 0208 	add.w	r2, r3, #8
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 0208 	add.w	r2, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d103      	bne.n	8007a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e00c      	b.n	8007a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3308      	adds	r3, #8
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e002      	b.n	8007a80 <vListInsert+0x2e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d2f6      	bcs.n	8007a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6892      	ldr	r2, [r2, #8]
 8007ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6852      	ldr	r2, [r2, #4]
 8007ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d103      	bne.n	8007af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	1e5a      	subs	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10d      	bne.n	8007b48 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b30:	b672      	cpsid	i
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	b662      	cpsie	i
 8007b40:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007b48:	f002 fce0 	bl	800a50c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b54:	68f9      	ldr	r1, [r7, #12]
 8007b56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b58:	fb01 f303 	mul.w	r3, r1, r3
 8007b5c:	441a      	add	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	68f9      	ldr	r1, [r7, #12]
 8007b7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	441a      	add	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	22ff      	movs	r2, #255	@ 0xff
 8007b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	22ff      	movs	r2, #255	@ 0xff
 8007b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d114      	bne.n	8007bc8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01a      	beq.n	8007bdc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3310      	adds	r3, #16
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 fba8 	bl	8009300 <xTaskRemoveFromEventList>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d012      	beq.n	8007bdc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <xQueueGenericReset+0xd4>)
 8007bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	e009      	b.n	8007bdc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3310      	adds	r3, #16
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff feef 	bl	80079b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3324      	adds	r3, #36	@ 0x24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff feea 	bl	80079b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bdc:	f002 fccc 	bl	800a578 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007be0:	2301      	movs	r3, #1
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	@ 0x38
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10d      	bne.n	8007c20 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c08:	b672      	cpsid	i
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	b662      	cpsie	i
 8007c18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
 8007c1e:	e7fd      	b.n	8007c1c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	b672      	cpsid	i
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	b662      	cpsie	i
 8007c3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <xQueueGenericCreateStatic+0x5e>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <xQueueGenericCreateStatic+0x62>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <xQueueGenericCreateStatic+0x64>
 8007c52:	2300      	movs	r3, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10d      	bne.n	8007c74 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5c:	b672      	cpsid	i
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	b662      	cpsie	i
 8007c6c:	623b      	str	r3, [r7, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	e7fd      	b.n	8007c70 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <xQueueGenericCreateStatic+0x90>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <xQueueGenericCreateStatic+0x94>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <xQueueGenericCreateStatic+0x96>
 8007c84:	2300      	movs	r3, #0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	b672      	cpsid	i
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	b662      	cpsie	i
 8007c9e:	61fb      	str	r3, [r7, #28]
}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	e7fd      	b.n	8007ca2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ca6:	2350      	movs	r3, #80	@ 0x50
 8007ca8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b50      	cmp	r3, #80	@ 0x50
 8007cae:	d00d      	beq.n	8007ccc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	b672      	cpsid	i
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	b662      	cpsie	i
 8007cc4:	61bb      	str	r3, [r7, #24]
}
 8007cc6:	bf00      	nop
 8007cc8:	bf00      	nop
 8007cca:	e7fd      	b.n	8007cc8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ccc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00d      	beq.n	8007cf4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ce0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f848 	bl	8007d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3730      	adds	r7, #48	@ 0x30
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b08a      	sub	sp, #40	@ 0x28
 8007d02:	af02      	add	r7, sp, #8
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10d      	bne.n	8007d2e <xQueueGenericCreate+0x30>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	b672      	cpsid	i
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	b662      	cpsie	i
 8007d26:	613b      	str	r3, [r7, #16]
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	e7fd      	b.n	8007d2a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
 8007d38:	e004      	b.n	8007d44 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
 8007d42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	3350      	adds	r3, #80	@ 0x50
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f002 fd0d 	bl	800a768 <pvPortMalloc>
 8007d4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d011      	beq.n	8007d7a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	3350      	adds	r3, #80	@ 0x50
 8007d5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d68:	79fa      	ldrb	r2, [r7, #7]
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f805 	bl	8007d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	e002      	b.n	8007da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007db2:	2101      	movs	r1, #1
 8007db4:	69b8      	ldr	r0, [r7, #24]
 8007db6:	f7ff feaf 	bl	8007b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007dea:	2300      	movs	r3, #0
 8007dec:	2200      	movs	r2, #0
 8007dee:	2100      	movs	r1, #0
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f8a7 	bl	8007f44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	4603      	mov	r3, r0
 8007e06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6939      	ldr	r1, [r7, #16]
 8007e16:	6978      	ldr	r0, [r7, #20]
 8007e18:	f7ff ff71 	bl	8007cfe <xQueueGenericCreate>
 8007e1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff ffd3 	bl	8007dca <prvInitialiseMutex>

		return xNewQueue;
 8007e24:	68fb      	ldr	r3, [r7, #12]
	}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b088      	sub	sp, #32
 8007e32:	af02      	add	r7, sp, #8
 8007e34:	4603      	mov	r3, r0
 8007e36:	6039      	str	r1, [r7, #0]
 8007e38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	6939      	ldr	r1, [r7, #16]
 8007e4c:	6978      	ldr	r0, [r7, #20]
 8007e4e:	f7ff fecf 	bl	8007bf0 <xQueueGenericCreateStatic>
 8007e52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff ffb8 	bl	8007dca <prvInitialiseMutex>

		return xNewQueue;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
	}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10d      	bne.n	8007e92 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	b672      	cpsid	i
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	b662      	cpsie	i
 8007e8a:	60fb      	str	r3, [r7, #12]
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	e7fd      	b.n	8007e8e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	689c      	ldr	r4, [r3, #8]
 8007e96:	f001 fc01 	bl	800969c <xTaskGetCurrentTaskHandle>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	429c      	cmp	r4, r3
 8007e9e:	d111      	bne.n	8007ec4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	1e5a      	subs	r2, r3, #1
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6938      	ldr	r0, [r7, #16]
 8007eba:	f000 f843 	bl	8007f44 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e001      	b.n	8007ec8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007ec8:	697b      	ldr	r3, [r7, #20]
	}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd90      	pop	{r4, r7, pc}

08007ed2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007ed2:	b590      	push	{r4, r7, lr}
 8007ed4:	b087      	sub	sp, #28
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10d      	bne.n	8007f02 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	b672      	cpsid	i
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	b662      	cpsie	i
 8007efa:	60fb      	str	r3, [r7, #12]
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	e7fd      	b.n	8007efe <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	689c      	ldr	r4, [r3, #8]
 8007f06:	f001 fbc9 	bl	800969c <xTaskGetCurrentTaskHandle>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d107      	bne.n	8007f20 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e00c      	b.n	8007f3a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6938      	ldr	r0, [r7, #16]
 8007f24:	f000 faa4 	bl	8008470 <xQueueSemaphoreTake>
 8007f28:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007f3a:	697b      	ldr	r3, [r7, #20]
	}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd90      	pop	{r4, r7, pc}

08007f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08e      	sub	sp, #56	@ 0x38
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f52:	2300      	movs	r3, #0
 8007f54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10d      	bne.n	8007f7c <xQueueGenericSend+0x38>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	b672      	cpsid	i
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	b662      	cpsie	i
 8007f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f76:	bf00      	nop
 8007f78:	bf00      	nop
 8007f7a:	e7fd      	b.n	8007f78 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <xQueueGenericSend+0x46>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <xQueueGenericSend+0x4a>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <xQueueGenericSend+0x4c>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10d      	bne.n	8007fb0 <xQueueGenericSend+0x6c>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	b672      	cpsid	i
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	b662      	cpsie	i
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d103      	bne.n	8007fbe <xQueueGenericSend+0x7a>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <xQueueGenericSend+0x7e>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <xQueueGenericSend+0x80>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10d      	bne.n	8007fe4 <xQueueGenericSend+0xa0>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fcc:	b672      	cpsid	i
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	b662      	cpsie	i
 8007fdc:	623b      	str	r3, [r7, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	e7fd      	b.n	8007fe0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fe4:	f001 fb6a 	bl	80096bc <xTaskGetSchedulerState>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <xQueueGenericSend+0xb0>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <xQueueGenericSend+0xb4>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <xQueueGenericSend+0xb6>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10d      	bne.n	800801a <xQueueGenericSend+0xd6>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	b672      	cpsid	i
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	b662      	cpsie	i
 8008012:	61fb      	str	r3, [r7, #28]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800801a:	f002 fa77 	bl	800a50c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <xQueueGenericSend+0xec>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d129      	bne.n	8008084 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008036:	f000 fb4b 	bl	80086d0 <prvCopyDataToQueue>
 800803a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008040:	2b00      	cmp	r3, #0
 8008042:	d010      	beq.n	8008066 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	3324      	adds	r3, #36	@ 0x24
 8008048:	4618      	mov	r0, r3
 800804a:	f001 f959 	bl	8009300 <xTaskRemoveFromEventList>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d013      	beq.n	800807c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008054:	4b3f      	ldr	r3, [pc, #252]	@ (8008154 <xQueueGenericSend+0x210>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	e00a      	b.n	800807c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d007      	beq.n	800807c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800806c:	4b39      	ldr	r3, [pc, #228]	@ (8008154 <xQueueGenericSend+0x210>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800807c:	f002 fa7c 	bl	800a578 <vPortExitCritical>
				return pdPASS;
 8008080:	2301      	movs	r3, #1
 8008082:	e063      	b.n	800814c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800808a:	f002 fa75 	bl	800a578 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800808e:	2300      	movs	r3, #0
 8008090:	e05c      	b.n	800814c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008098:	f107 0314 	add.w	r3, r7, #20
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f995 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080a2:	2301      	movs	r3, #1
 80080a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a6:	f002 fa67 	bl	800a578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080aa:	f000 fef1 	bl	8008e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ae:	f002 fa2d 	bl	800a50c <vPortEnterCritical>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	d103      	bne.n	80080c8 <xQueueGenericSend+0x184>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080ce:	b25b      	sxtb	r3, r3
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d4:	d103      	bne.n	80080de <xQueueGenericSend+0x19a>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080de:	f002 fa4b 	bl	800a578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080e2:	1d3a      	adds	r2, r7, #4
 80080e4:	f107 0314 	add.w	r3, r7, #20
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 f984 	bl	80093f8 <xTaskCheckForTimeOut>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d124      	bne.n	8008140 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080f8:	f000 fbe2 	bl	80088c0 <prvIsQueueFull>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d018      	beq.n	8008134 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	3310      	adds	r3, #16
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f001 f8a2 	bl	8009254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008112:	f000 fb6d 	bl	80087f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008116:	f000 fec9 	bl	8008eac <xTaskResumeAll>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	f47f af7c 	bne.w	800801a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008122:	4b0c      	ldr	r3, [pc, #48]	@ (8008154 <xQueueGenericSend+0x210>)
 8008124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	e772      	b.n	800801a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008136:	f000 fb5b 	bl	80087f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800813a:	f000 feb7 	bl	8008eac <xTaskResumeAll>
 800813e:	e76c      	b.n	800801a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008142:	f000 fb55 	bl	80087f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008146:	f000 feb1 	bl	8008eac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800814a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800814c:	4618      	mov	r0, r3
 800814e:	3738      	adds	r7, #56	@ 0x38
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	e000ed04 	.word	0xe000ed04

08008158 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08e      	sub	sp, #56	@ 0x38
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10d      	bne.n	800818c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	b672      	cpsid	i
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	b662      	cpsie	i
 8008184:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <xQueueGenericSendFromISR+0x42>
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <xQueueGenericSendFromISR+0x46>
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <xQueueGenericSendFromISR+0x48>
 800819e:	2300      	movs	r3, #0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10d      	bne.n	80081c0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a8:	b672      	cpsid	i
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	b662      	cpsie	i
 80081b8:	623b      	str	r3, [r7, #32]
}
 80081ba:	bf00      	nop
 80081bc:	bf00      	nop
 80081be:	e7fd      	b.n	80081bc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d103      	bne.n	80081ce <xQueueGenericSendFromISR+0x76>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <xQueueGenericSendFromISR+0x7a>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <xQueueGenericSendFromISR+0x7c>
 80081d2:	2300      	movs	r3, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10d      	bne.n	80081f4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081dc:	b672      	cpsid	i
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	b662      	cpsie	i
 80081ec:	61fb      	str	r3, [r7, #28]
}
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	e7fd      	b.n	80081f0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081f4:	f002 fa72 	bl	800a6dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081f8:	f3ef 8211 	mrs	r2, BASEPRI
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	b672      	cpsid	i
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	b662      	cpsie	i
 8008210:	61ba      	str	r2, [r7, #24]
 8008212:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008214:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008216:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <xQueueGenericSendFromISR+0xd2>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d12c      	bne.n	8008284 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008230:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800823a:	f000 fa49 	bl	80086d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800823e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008246:	d112      	bne.n	800826e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	d016      	beq.n	800827e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	3324      	adds	r3, #36	@ 0x24
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f853 	bl	8009300 <xTaskRemoveFromEventList>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e007      	b.n	800827e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800826e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008272:	3301      	adds	r3, #1
 8008274:	b2db      	uxtb	r3, r3
 8008276:	b25a      	sxtb	r2, r3
 8008278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800827e:	2301      	movs	r3, #1
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008282:	e001      	b.n	8008288 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008284:	2300      	movs	r3, #0
 8008286:	637b      	str	r3, [r7, #52]	@ 0x34
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008292:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008296:	4618      	mov	r0, r3
 8008298:	3738      	adds	r7, #56	@ 0x38
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08c      	sub	sp, #48	@ 0x30
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ac:	2300      	movs	r3, #0
 80082ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10d      	bne.n	80082d6 <xQueueReceive+0x36>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	b672      	cpsid	i
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	b662      	cpsie	i
 80082ce:	623b      	str	r3, [r7, #32]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <xQueueReceive+0x44>
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <xQueueReceive+0x48>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e000      	b.n	80082ea <xQueueReceive+0x4a>
 80082e8:	2300      	movs	r3, #0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10d      	bne.n	800830a <xQueueReceive+0x6a>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	b672      	cpsid	i
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	b662      	cpsie	i
 8008302:	61fb      	str	r3, [r7, #28]
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	e7fd      	b.n	8008306 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800830a:	f001 f9d7 	bl	80096bc <xTaskGetSchedulerState>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <xQueueReceive+0x7a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <xQueueReceive+0x7e>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <xQueueReceive+0x80>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <xQueueReceive+0xa0>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	b672      	cpsid	i
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	b662      	cpsie	i
 8008338:	61bb      	str	r3, [r7, #24]
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008340:	f002 f8e4 	bl	800a50c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01f      	beq.n	8008390 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008354:	f000 fa26 	bl	80087a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	1e5a      	subs	r2, r3, #1
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00f      	beq.n	8008388 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	3310      	adds	r3, #16
 800836c:	4618      	mov	r0, r3
 800836e:	f000 ffc7 	bl	8009300 <xTaskRemoveFromEventList>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d007      	beq.n	8008388 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008378:	4b3c      	ldr	r3, [pc, #240]	@ (800846c <xQueueReceive+0x1cc>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008388:	f002 f8f6 	bl	800a578 <vPortExitCritical>
				return pdPASS;
 800838c:	2301      	movs	r3, #1
 800838e:	e069      	b.n	8008464 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008396:	f002 f8ef 	bl	800a578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800839a:	2300      	movs	r3, #0
 800839c:	e062      	b.n	8008464 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d106      	bne.n	80083b2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083a4:	f107 0310 	add.w	r3, r7, #16
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 f80f 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ae:	2301      	movs	r3, #1
 80083b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083b2:	f002 f8e1 	bl	800a578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b6:	f000 fd6b 	bl	8008e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083ba:	f002 f8a7 	bl	800a50c <vPortEnterCritical>
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083c4:	b25b      	sxtb	r3, r3
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d103      	bne.n	80083d4 <xQueueReceive+0x134>
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083da:	b25b      	sxtb	r3, r3
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d103      	bne.n	80083ea <xQueueReceive+0x14a>
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083ea:	f002 f8c5 	bl	800a578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083ee:	1d3a      	adds	r2, r7, #4
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fffe 	bl	80093f8 <xTaskCheckForTimeOut>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d123      	bne.n	800844a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008404:	f000 fa46 	bl	8008894 <prvIsQueueEmpty>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d017      	beq.n	800843e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800840e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008410:	3324      	adds	r3, #36	@ 0x24
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f000 ff1c 	bl	8009254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800841c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800841e:	f000 f9e7 	bl	80087f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008422:	f000 fd43 	bl	8008eac <xTaskResumeAll>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d189      	bne.n	8008340 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800842c:	4b0f      	ldr	r3, [pc, #60]	@ (800846c <xQueueReceive+0x1cc>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	e780      	b.n	8008340 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800843e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008440:	f000 f9d6 	bl	80087f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008444:	f000 fd32 	bl	8008eac <xTaskResumeAll>
 8008448:	e77a      	b.n	8008340 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800844a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800844c:	f000 f9d0 	bl	80087f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008450:	f000 fd2c 	bl	8008eac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008456:	f000 fa1d 	bl	8008894 <prvIsQueueEmpty>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	f43f af6f 	beq.w	8008340 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008464:	4618      	mov	r0, r3
 8008466:	3730      	adds	r7, #48	@ 0x30
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08e      	sub	sp, #56	@ 0x38
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800847a:	2300      	movs	r3, #0
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008482:	2300      	movs	r3, #0
 8008484:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10d      	bne.n	80084a8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008490:	b672      	cpsid	i
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	b662      	cpsie	i
 80084a0:	623b      	str	r3, [r7, #32]
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	e7fd      	b.n	80084a4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	b672      	cpsid	i
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	b662      	cpsie	i
 80084c4:	61fb      	str	r3, [r7, #28]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084cc:	f001 f8f6 	bl	80096bc <xTaskGetSchedulerState>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <xQueueSemaphoreTake+0x6c>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <xQueueSemaphoreTake+0x70>
 80084dc:	2301      	movs	r3, #1
 80084de:	e000      	b.n	80084e2 <xQueueSemaphoreTake+0x72>
 80084e0:	2300      	movs	r3, #0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10d      	bne.n	8008502 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	b672      	cpsid	i
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	b662      	cpsie	i
 80084fa:	61bb      	str	r3, [r7, #24]
}
 80084fc:	bf00      	nop
 80084fe:	bf00      	nop
 8008500:	e7fd      	b.n	80084fe <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008502:	f002 f803 	bl	800a50c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	2b00      	cmp	r3, #0
 8008510:	d024      	beq.n	800855c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	1e5a      	subs	r2, r3, #1
 8008516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008518:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800851a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d104      	bne.n	800852c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008522:	f001 fa4d 	bl	80099c0 <pvTaskIncrementMutexHeldCount>
 8008526:	4602      	mov	r2, r0
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800852c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00f      	beq.n	8008554 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	3310      	adds	r3, #16
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fee1 	bl	8009300 <xTaskRemoveFromEventList>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008544:	4b55      	ldr	r3, [pc, #340]	@ (800869c <xQueueSemaphoreTake+0x22c>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008554:	f002 f810 	bl	800a578 <vPortExitCritical>
				return pdPASS;
 8008558:	2301      	movs	r3, #1
 800855a:	e09a      	b.n	8008692 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d114      	bne.n	800858c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00d      	beq.n	8008584 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	b672      	cpsid	i
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	b662      	cpsie	i
 800857c:	617b      	str	r3, [r7, #20]
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	e7fd      	b.n	8008580 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008584:	f001 fff8 	bl	800a578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008588:	2300      	movs	r3, #0
 800858a:	e082      	b.n	8008692 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800858c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008592:	f107 030c 	add.w	r3, r7, #12
 8008596:	4618      	mov	r0, r3
 8008598:	f000 ff18 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085a0:	f001 ffea 	bl	800a578 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085a4:	f000 fc74 	bl	8008e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085a8:	f001 ffb0 	bl	800a50c <vPortEnterCritical>
 80085ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085b2:	b25b      	sxtb	r3, r3
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b8:	d103      	bne.n	80085c2 <xQueueSemaphoreTake+0x152>
 80085ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085c8:	b25b      	sxtb	r3, r3
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ce:	d103      	bne.n	80085d8 <xQueueSemaphoreTake+0x168>
 80085d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085d8:	f001 ffce 	bl	800a578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085dc:	463a      	mov	r2, r7
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 ff07 	bl	80093f8 <xTaskCheckForTimeOut>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d132      	bne.n	8008656 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085f2:	f000 f94f 	bl	8008894 <prvIsQueueEmpty>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d026      	beq.n	800864a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d109      	bne.n	8008618 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008604:	f001 ff82 	bl	800a50c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f001 f873 	bl	80096f8 <xTaskPriorityInherit>
 8008612:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008614:	f001 ffb0 	bl	800a578 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861a:	3324      	adds	r3, #36	@ 0x24
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fe17 	bl	8009254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008626:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008628:	f000 f8e2 	bl	80087f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800862c:	f000 fc3e 	bl	8008eac <xTaskResumeAll>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	f47f af65 	bne.w	8008502 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008638:	4b18      	ldr	r3, [pc, #96]	@ (800869c <xQueueSemaphoreTake+0x22c>)
 800863a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	e75b      	b.n	8008502 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800864a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800864c:	f000 f8d0 	bl	80087f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008650:	f000 fc2c 	bl	8008eac <xTaskResumeAll>
 8008654:	e755      	b.n	8008502 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008658:	f000 f8ca 	bl	80087f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800865c:	f000 fc26 	bl	8008eac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008660:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008662:	f000 f917 	bl	8008894 <prvIsQueueEmpty>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f43f af4a 	beq.w	8008502 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00d      	beq.n	8008690 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008674:	f001 ff4a 	bl	800a50c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008678:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800867a:	f000 f811 	bl	80086a0 <prvGetDisinheritPriorityAfterTimeout>
 800867e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008686:	4618      	mov	r0, r3
 8008688:	f001 f912 	bl	80098b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800868c:	f001 ff74 	bl	800a578 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008690:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008692:	4618      	mov	r0, r3
 8008694:	3738      	adds	r7, #56	@ 0x38
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d006      	beq.n	80086be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e001      	b.n	80086c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80086c2:	68fb      	ldr	r3, [r7, #12]
	}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10d      	bne.n	800870a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d14d      	bne.n	8008792 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 f864 	bl	80097c8 <xTaskPriorityDisinherit>
 8008700:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	609a      	str	r2, [r3, #8]
 8008708:	e043      	b.n	8008792 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d119      	bne.n	8008744 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6858      	ldr	r0, [r3, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008718:	461a      	mov	r2, r3
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	f003 fa87 	bl	800bc2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008728:	441a      	add	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	d32b      	bcc.n	8008792 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	e026      	b.n	8008792 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	68d8      	ldr	r0, [r3, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874c:	461a      	mov	r2, r3
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	f003 fa6d 	bl	800bc2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875c:	425b      	negs	r3, r3
 800875e:	441a      	add	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d207      	bcs.n	8008780 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008778:	425b      	negs	r3, r3
 800877a:	441a      	add	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d105      	bne.n	8008792 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	3b01      	subs	r3, #1
 8008790:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800879a:	697b      	ldr	r3, [r7, #20]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d018      	beq.n	80087e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087be:	441a      	add	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d303      	bcc.n	80087d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68d9      	ldr	r1, [r3, #12]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e0:	461a      	mov	r2, r3
 80087e2:	6838      	ldr	r0, [r7, #0]
 80087e4:	f003 fa23 	bl	800bc2e <memcpy>
	}
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087f8:	f001 fe88 	bl	800a50c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008802:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008804:	e011      	b.n	800882a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	d012      	beq.n	8008834 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3324      	adds	r3, #36	@ 0x24
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fd74 	bl	8009300 <xTaskRemoveFromEventList>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800881e:	f000 fe53 	bl	80094c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	3b01      	subs	r3, #1
 8008826:	b2db      	uxtb	r3, r3
 8008828:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800882a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800882e:	2b00      	cmp	r3, #0
 8008830:	dce9      	bgt.n	8008806 <prvUnlockQueue+0x16>
 8008832:	e000      	b.n	8008836 <prvUnlockQueue+0x46>
					break;
 8008834:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	22ff      	movs	r2, #255	@ 0xff
 800883a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800883e:	f001 fe9b 	bl	800a578 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008842:	f001 fe63 	bl	800a50c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800884c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800884e:	e011      	b.n	8008874 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d012      	beq.n	800887e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3310      	adds	r3, #16
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fd4f 	bl	8009300 <xTaskRemoveFromEventList>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008868:	f000 fe2e 	bl	80094c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	3b01      	subs	r3, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	dce9      	bgt.n	8008850 <prvUnlockQueue+0x60>
 800887c:	e000      	b.n	8008880 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800887e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	22ff      	movs	r2, #255	@ 0xff
 8008884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008888:	f001 fe76 	bl	800a578 <vPortExitCritical>
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800889c:	f001 fe36 	bl	800a50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d102      	bne.n	80088ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e001      	b.n	80088b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088b2:	f001 fe61 	bl	800a578 <vPortExitCritical>

	return xReturn;
 80088b6:	68fb      	ldr	r3, [r7, #12]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088c8:	f001 fe20 	bl	800a50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d102      	bne.n	80088de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088d8:	2301      	movs	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	e001      	b.n	80088e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088e2:	f001 fe49 	bl	800a578 <vPortExitCritical>

	return xReturn;
 80088e6:	68fb      	ldr	r3, [r7, #12]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	e014      	b.n	800892a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008900:	4a0f      	ldr	r2, [pc, #60]	@ (8008940 <vQueueAddToRegistry+0x50>)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10b      	bne.n	8008924 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800890c:	490c      	ldr	r1, [pc, #48]	@ (8008940 <vQueueAddToRegistry+0x50>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008916:	4a0a      	ldr	r2, [pc, #40]	@ (8008940 <vQueueAddToRegistry+0x50>)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	4413      	add	r3, r2
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008922:	e006      	b.n	8008932 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3301      	adds	r3, #1
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b07      	cmp	r3, #7
 800892e:	d9e7      	bls.n	8008900 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	200018ac 	.word	0x200018ac

08008944 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008954:	f001 fdda 	bl	800a50c <vPortEnterCritical>
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800895e:	b25b      	sxtb	r3, r3
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d103      	bne.n	800896e <vQueueWaitForMessageRestricted+0x2a>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008974:	b25b      	sxtb	r3, r3
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d103      	bne.n	8008984 <vQueueWaitForMessageRestricted+0x40>
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008984:	f001 fdf8 	bl	800a578 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	3324      	adds	r3, #36	@ 0x24
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fc83 	bl	80092a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800899e:	6978      	ldr	r0, [r7, #20]
 80089a0:	f7ff ff26 	bl	80087f0 <prvUnlockQueue>
	}
 80089a4:	bf00      	nop
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08e      	sub	sp, #56	@ 0x38
 80089b0:	af04      	add	r7, sp, #16
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10d      	bne.n	80089dc <xTaskCreateStatic+0x30>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	b672      	cpsid	i
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	b662      	cpsie	i
 80089d4:	623b      	str	r3, [r7, #32]
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	e7fd      	b.n	80089d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10d      	bne.n	80089fe <xTaskCreateStatic+0x52>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	b672      	cpsid	i
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	b662      	cpsie	i
 80089f6:	61fb      	str	r3, [r7, #28]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089fe:	23a8      	movs	r3, #168	@ 0xa8
 8008a00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2ba8      	cmp	r3, #168	@ 0xa8
 8008a06:	d00d      	beq.n	8008a24 <xTaskCreateStatic+0x78>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0c:	b672      	cpsid	i
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	b662      	cpsie	i
 8008a1c:	61bb      	str	r3, [r7, #24]
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	e7fd      	b.n	8008a20 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <xTaskCreateStatic+0xbe>
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d01b      	beq.n	8008a6a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a44:	2300      	movs	r3, #0
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	9302      	str	r3, [sp, #8]
 8008a4c:	f107 0314 	add.w	r3, r7, #20
 8008a50:	9301      	str	r3, [sp, #4]
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 f851 	bl	8008b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a64:	f000 f8f8 	bl	8008c58 <prvAddNewTaskToReadyList>
 8008a68:	e001      	b.n	8008a6e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a6e:	697b      	ldr	r3, [r7, #20]
	}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3728      	adds	r7, #40	@ 0x28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08c      	sub	sp, #48	@ 0x30
 8008a7c:	af04      	add	r7, sp, #16
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	4613      	mov	r3, r2
 8008a86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a88:	88fb      	ldrh	r3, [r7, #6]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 fe6b 	bl	800a768 <pvPortMalloc>
 8008a92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00e      	beq.n	8008ab8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a9a:	20a8      	movs	r0, #168	@ 0xa8
 8008a9c:	f001 fe64 	bl	800a768 <pvPortMalloc>
 8008aa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8008aae:	e005      	b.n	8008abc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ab0:	6978      	ldr	r0, [r7, #20]
 8008ab2:	f001 ff27 	bl	800a904 <vPortFree>
 8008ab6:	e001      	b.n	8008abc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d017      	beq.n	8008af2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008aca:	88fa      	ldrh	r2, [r7, #6]
 8008acc:	2300      	movs	r3, #0
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	9302      	str	r3, [sp, #8]
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f80f 	bl	8008b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ae6:	69f8      	ldr	r0, [r7, #28]
 8008ae8:	f000 f8b6 	bl	8008c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008aec:	2301      	movs	r3, #1
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	e002      	b.n	8008af8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008af2:	f04f 33ff 	mov.w	r3, #4294967295
 8008af6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008af8:	69bb      	ldr	r3, [r7, #24]
	}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3720      	adds	r7, #32
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	21a5      	movs	r1, #165	@ 0xa5
 8008b1e:	f002 ff9e 	bl	800ba5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008b2c:	440b      	add	r3, r1
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00d      	beq.n	8008b62 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	b672      	cpsid	i
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	b662      	cpsie	i
 8008b5a:	617b      	str	r3, [r7, #20]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01f      	beq.n	8008ba8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	e012      	b.n	8008b94 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	4413      	add	r3, r2
 8008b74:	7819      	ldrb	r1, [r3, #0]
 8008b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	3334      	adds	r3, #52	@ 0x34
 8008b7e:	460a      	mov	r2, r1
 8008b80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	3301      	adds	r3, #1
 8008b92:	61fb      	str	r3, [r7, #28]
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	2b0f      	cmp	r3, #15
 8008b98:	d9e9      	bls.n	8008b6e <prvInitialiseNewTask+0x6a>
 8008b9a:	e000      	b.n	8008b9e <prvInitialiseNewTask+0x9a>
			{
				break;
 8008b9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ba6:	e003      	b.n	8008bb0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	2b37      	cmp	r3, #55	@ 0x37
 8008bb4:	d901      	bls.n	8008bba <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bb6:	2337      	movs	r3, #55	@ 0x37
 8008bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc8:	2200      	movs	r2, #0
 8008bca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe ff0d 	bl	80079f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	3318      	adds	r3, #24
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe ff08 	bl	80079f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bf4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	3354      	adds	r3, #84	@ 0x54
 8008c0a:	224c      	movs	r2, #76	@ 0x4c
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f002 ff25 	bl	800ba5e <memset>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	4a0d      	ldr	r2, [pc, #52]	@ (8008c4c <prvInitialiseNewTask+0x148>)
 8008c18:	659a      	str	r2, [r3, #88]	@ 0x58
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008c50 <prvInitialiseNewTask+0x14c>)
 8008c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	4a0c      	ldr	r2, [pc, #48]	@ (8008c54 <prvInitialiseNewTask+0x150>)
 8008c24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	68f9      	ldr	r1, [r7, #12]
 8008c2a:	69b8      	ldr	r0, [r7, #24]
 8008c2c:	f001 fb60 	bl	800a2f0 <pxPortInitialiseStack>
 8008c30:	4602      	mov	r2, r0
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c42:	bf00      	nop
 8008c44:	3720      	adds	r7, #32
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20005e98 	.word	0x20005e98
 8008c50:	20005f00 	.word	0x20005f00
 8008c54:	20005f68 	.word	0x20005f68

08008c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c60:	f001 fc54 	bl	800a50c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c64:	4b2d      	ldr	r3, [pc, #180]	@ (8008d1c <prvAddNewTaskToReadyList+0xc4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8008d1c <prvAddNewTaskToReadyList+0xc4>)
 8008c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8008d20 <prvAddNewTaskToReadyList+0xc8>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c76:	4a2a      	ldr	r2, [pc, #168]	@ (8008d20 <prvAddNewTaskToReadyList+0xc8>)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c7c:	4b27      	ldr	r3, [pc, #156]	@ (8008d1c <prvAddNewTaskToReadyList+0xc4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d110      	bne.n	8008ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c84:	f000 fc44 	bl	8009510 <prvInitialiseTaskLists>
 8008c88:	e00d      	b.n	8008ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c8a:	4b26      	ldr	r3, [pc, #152]	@ (8008d24 <prvAddNewTaskToReadyList+0xcc>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c92:	4b23      	ldr	r3, [pc, #140]	@ (8008d20 <prvAddNewTaskToReadyList+0xc8>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d802      	bhi.n	8008ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8008d20 <prvAddNewTaskToReadyList+0xc8>)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ca6:	4b20      	ldr	r3, [pc, #128]	@ (8008d28 <prvAddNewTaskToReadyList+0xd0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	4a1e      	ldr	r2, [pc, #120]	@ (8008d28 <prvAddNewTaskToReadyList+0xd0>)
 8008cae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d28 <prvAddNewTaskToReadyList+0xd0>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8008d2c <prvAddNewTaskToReadyList+0xd4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d903      	bls.n	8008ccc <prvAddNewTaskToReadyList+0x74>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc8:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <prvAddNewTaskToReadyList+0xd4>)
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4a15      	ldr	r2, [pc, #84]	@ (8008d30 <prvAddNewTaskToReadyList+0xd8>)
 8008cda:	441a      	add	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f7fe fe91 	bl	8007a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ce8:	f001 fc46 	bl	800a578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cec:	4b0d      	ldr	r3, [pc, #52]	@ (8008d24 <prvAddNewTaskToReadyList+0xcc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00e      	beq.n	8008d12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d20 <prvAddNewTaskToReadyList+0xc8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d207      	bcs.n	8008d12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d02:	4b0c      	ldr	r3, [pc, #48]	@ (8008d34 <prvAddNewTaskToReadyList+0xdc>)
 8008d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20001dc0 	.word	0x20001dc0
 8008d20:	200018ec 	.word	0x200018ec
 8008d24:	20001dcc 	.word	0x20001dcc
 8008d28:	20001ddc 	.word	0x20001ddc
 8008d2c:	20001dc8 	.word	0x20001dc8
 8008d30:	200018f0 	.word	0x200018f0
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01a      	beq.n	8008d80 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d4a:	4b15      	ldr	r3, [pc, #84]	@ (8008da0 <vTaskDelay+0x68>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00d      	beq.n	8008d6e <vTaskDelay+0x36>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	60bb      	str	r3, [r7, #8]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008d6e:	f000 f88f 	bl	8008e90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d72:	2100      	movs	r1, #0
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fe37 	bl	80099e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d7a:	f000 f897 	bl	8008eac <xTaskResumeAll>
 8008d7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d107      	bne.n	8008d96 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008d86:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <vTaskDelay+0x6c>)
 8008d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20001de8 	.word	0x20001de8
 8008da4:	e000ed04 	.word	0xe000ed04

08008da8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	@ 0x28
 8008dac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008db6:	463a      	mov	r2, r7
 8008db8:	1d39      	adds	r1, r7, #4
 8008dba:	f107 0308 	add.w	r3, r7, #8
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fdc2 	bl	8007948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	9202      	str	r2, [sp, #8]
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	460a      	mov	r2, r1
 8008dd6:	4926      	ldr	r1, [pc, #152]	@ (8008e70 <vTaskStartScheduler+0xc8>)
 8008dd8:	4826      	ldr	r0, [pc, #152]	@ (8008e74 <vTaskStartScheduler+0xcc>)
 8008dda:	f7ff fde7 	bl	80089ac <xTaskCreateStatic>
 8008dde:	4603      	mov	r3, r0
 8008de0:	4a25      	ldr	r2, [pc, #148]	@ (8008e78 <vTaskStartScheduler+0xd0>)
 8008de2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008de4:	4b24      	ldr	r3, [pc, #144]	@ (8008e78 <vTaskStartScheduler+0xd0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dec:	2301      	movs	r3, #1
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	e001      	b.n	8008df6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d102      	bne.n	8008e02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dfc:	f000 fe48 	bl	8009a90 <xTimerCreateTimerTask>
 8008e00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d11d      	bne.n	8008e44 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0c:	b672      	cpsid	i
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	b662      	cpsie	i
 8008e1c:	613b      	str	r3, [r7, #16]
}
 8008e1e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e20:	4b16      	ldr	r3, [pc, #88]	@ (8008e7c <vTaskStartScheduler+0xd4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3354      	adds	r3, #84	@ 0x54
 8008e26:	4a16      	ldr	r2, [pc, #88]	@ (8008e80 <vTaskStartScheduler+0xd8>)
 8008e28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e2a:	4b16      	ldr	r3, [pc, #88]	@ (8008e84 <vTaskStartScheduler+0xdc>)
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e32:	4b15      	ldr	r3, [pc, #84]	@ (8008e88 <vTaskStartScheduler+0xe0>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e38:	4b14      	ldr	r3, [pc, #80]	@ (8008e8c <vTaskStartScheduler+0xe4>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e3e:	f001 fae7 	bl	800a410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e42:	e011      	b.n	8008e68 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d10d      	bne.n	8008e68 <vTaskStartScheduler+0xc0>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e50:	b672      	cpsid	i
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	b662      	cpsie	i
 8008e60:	60fb      	str	r3, [r7, #12]
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	e7fd      	b.n	8008e64 <vTaskStartScheduler+0xbc>
}
 8008e68:	bf00      	nop
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	0800f4d0 	.word	0x0800f4d0
 8008e74:	080094e1 	.word	0x080094e1
 8008e78:	20001de4 	.word	0x20001de4
 8008e7c:	200018ec 	.word	0x200018ec
 8008e80:	2000017c 	.word	0x2000017c
 8008e84:	20001de0 	.word	0x20001de0
 8008e88:	20001dcc 	.word	0x20001dcc
 8008e8c:	20001dc4 	.word	0x20001dc4

08008e90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e94:	4b04      	ldr	r3, [pc, #16]	@ (8008ea8 <vTaskSuspendAll+0x18>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	4a03      	ldr	r2, [pc, #12]	@ (8008ea8 <vTaskSuspendAll+0x18>)
 8008e9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008e9e:	bf00      	nop
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	20001de8 	.word	0x20001de8

08008eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eba:	4b43      	ldr	r3, [pc, #268]	@ (8008fc8 <xTaskResumeAll+0x11c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10d      	bne.n	8008ede <xTaskResumeAll+0x32>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec6:	b672      	cpsid	i
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	b662      	cpsie	i
 8008ed6:	603b      	str	r3, [r7, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ede:	f001 fb15 	bl	800a50c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ee2:	4b39      	ldr	r3, [pc, #228]	@ (8008fc8 <xTaskResumeAll+0x11c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	4a37      	ldr	r2, [pc, #220]	@ (8008fc8 <xTaskResumeAll+0x11c>)
 8008eea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eec:	4b36      	ldr	r3, [pc, #216]	@ (8008fc8 <xTaskResumeAll+0x11c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d162      	bne.n	8008fba <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ef4:	4b35      	ldr	r3, [pc, #212]	@ (8008fcc <xTaskResumeAll+0x120>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d05e      	beq.n	8008fba <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008efc:	e02f      	b.n	8008f5e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008efe:	4b34      	ldr	r3, [pc, #208]	@ (8008fd0 <xTaskResumeAll+0x124>)
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3318      	adds	r3, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fdda 	bl	8007ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fdd5 	bl	8007ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd4 <xTaskResumeAll+0x128>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d903      	bls.n	8008f2e <xTaskResumeAll+0x82>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd4 <xTaskResumeAll+0x128>)
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4a27      	ldr	r2, [pc, #156]	@ (8008fd8 <xTaskResumeAll+0x12c>)
 8008f3c:	441a      	add	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fe fd60 	bl	8007a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4e:	4b23      	ldr	r3, [pc, #140]	@ (8008fdc <xTaskResumeAll+0x130>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008f58:	4b21      	ldr	r3, [pc, #132]	@ (8008fe0 <xTaskResumeAll+0x134>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd0 <xTaskResumeAll+0x124>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1cb      	bne.n	8008efe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f6c:	f000 fb76 	bl	800965c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f70:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe4 <xTaskResumeAll+0x138>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d010      	beq.n	8008f9e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f7c:	f000 f846 	bl	800900c <xTaskIncrementTick>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008f86:	4b16      	ldr	r3, [pc, #88]	@ (8008fe0 <xTaskResumeAll+0x134>)
 8008f88:	2201      	movs	r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f1      	bne.n	8008f7c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008f98:	4b12      	ldr	r3, [pc, #72]	@ (8008fe4 <xTaskResumeAll+0x138>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f9e:	4b10      	ldr	r3, [pc, #64]	@ (8008fe0 <xTaskResumeAll+0x134>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008faa:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe8 <xTaskResumeAll+0x13c>)
 8008fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fba:	f001 fadd 	bl	800a578 <vPortExitCritical>

	return xAlreadyYielded;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20001de8 	.word	0x20001de8
 8008fcc:	20001dc0 	.word	0x20001dc0
 8008fd0:	20001d80 	.word	0x20001d80
 8008fd4:	20001dc8 	.word	0x20001dc8
 8008fd8:	200018f0 	.word	0x200018f0
 8008fdc:	200018ec 	.word	0x200018ec
 8008fe0:	20001dd4 	.word	0x20001dd4
 8008fe4:	20001dd0 	.word	0x20001dd0
 8008fe8:	e000ed04 	.word	0xe000ed04

08008fec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ff2:	4b05      	ldr	r3, [pc, #20]	@ (8009008 <xTaskGetTickCount+0x1c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ff8:	687b      	ldr	r3, [r7, #4]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20001dc4 	.word	0x20001dc4

0800900c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009016:	4b50      	ldr	r3, [pc, #320]	@ (8009158 <xTaskIncrementTick+0x14c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f040 808c 	bne.w	8009138 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009020:	4b4e      	ldr	r3, [pc, #312]	@ (800915c <xTaskIncrementTick+0x150>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009028:	4a4c      	ldr	r2, [pc, #304]	@ (800915c <xTaskIncrementTick+0x150>)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d123      	bne.n	800907c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009034:	4b4a      	ldr	r3, [pc, #296]	@ (8009160 <xTaskIncrementTick+0x154>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00d      	beq.n	800905a <xTaskIncrementTick+0x4e>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009042:	b672      	cpsid	i
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	b662      	cpsie	i
 8009052:	603b      	str	r3, [r7, #0]
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <xTaskIncrementTick+0x4a>
 800905a:	4b41      	ldr	r3, [pc, #260]	@ (8009160 <xTaskIncrementTick+0x154>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	4b40      	ldr	r3, [pc, #256]	@ (8009164 <xTaskIncrementTick+0x158>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a3e      	ldr	r2, [pc, #248]	@ (8009160 <xTaskIncrementTick+0x154>)
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	4a3e      	ldr	r2, [pc, #248]	@ (8009164 <xTaskIncrementTick+0x158>)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	4b3e      	ldr	r3, [pc, #248]	@ (8009168 <xTaskIncrementTick+0x15c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a3c      	ldr	r2, [pc, #240]	@ (8009168 <xTaskIncrementTick+0x15c>)
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	f000 faf0 	bl	800965c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800907c:	4b3b      	ldr	r3, [pc, #236]	@ (800916c <xTaskIncrementTick+0x160>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	429a      	cmp	r2, r3
 8009084:	d349      	bcc.n	800911a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009086:	4b36      	ldr	r3, [pc, #216]	@ (8009160 <xTaskIncrementTick+0x154>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009090:	4b36      	ldr	r3, [pc, #216]	@ (800916c <xTaskIncrementTick+0x160>)
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	601a      	str	r2, [r3, #0]
					break;
 8009098:	e03f      	b.n	800911a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909a:	4b31      	ldr	r3, [pc, #196]	@ (8009160 <xTaskIncrementTick+0x154>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d203      	bcs.n	80090ba <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090b2:	4a2e      	ldr	r2, [pc, #184]	@ (800916c <xTaskIncrementTick+0x160>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090b8:	e02f      	b.n	800911a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	3304      	adds	r3, #4
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fd00 	bl	8007ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	3318      	adds	r3, #24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fcf7 	bl	8007ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090da:	4b25      	ldr	r3, [pc, #148]	@ (8009170 <xTaskIncrementTick+0x164>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d903      	bls.n	80090ea <xTaskIncrementTick+0xde>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	4a22      	ldr	r2, [pc, #136]	@ (8009170 <xTaskIncrementTick+0x164>)
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009174 <xTaskIncrementTick+0x168>)
 80090f8:	441a      	add	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4619      	mov	r1, r3
 8009100:	4610      	mov	r0, r2
 8009102:	f7fe fc82 	bl	8007a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800910a:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <xTaskIncrementTick+0x16c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	429a      	cmp	r2, r3
 8009112:	d3b8      	bcc.n	8009086 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009114:	2301      	movs	r3, #1
 8009116:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009118:	e7b5      	b.n	8009086 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800911a:	4b17      	ldr	r3, [pc, #92]	@ (8009178 <xTaskIncrementTick+0x16c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009120:	4914      	ldr	r1, [pc, #80]	@ (8009174 <xTaskIncrementTick+0x168>)
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d907      	bls.n	8009142 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009132:	2301      	movs	r3, #1
 8009134:	617b      	str	r3, [r7, #20]
 8009136:	e004      	b.n	8009142 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009138:	4b10      	ldr	r3, [pc, #64]	@ (800917c <xTaskIncrementTick+0x170>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	4a0f      	ldr	r2, [pc, #60]	@ (800917c <xTaskIncrementTick+0x170>)
 8009140:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009142:	4b0f      	ldr	r3, [pc, #60]	@ (8009180 <xTaskIncrementTick+0x174>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800914e:	697b      	ldr	r3, [r7, #20]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20001de8 	.word	0x20001de8
 800915c:	20001dc4 	.word	0x20001dc4
 8009160:	20001d78 	.word	0x20001d78
 8009164:	20001d7c 	.word	0x20001d7c
 8009168:	20001dd8 	.word	0x20001dd8
 800916c:	20001de0 	.word	0x20001de0
 8009170:	20001dc8 	.word	0x20001dc8
 8009174:	200018f0 	.word	0x200018f0
 8009178:	200018ec 	.word	0x200018ec
 800917c:	20001dd0 	.word	0x20001dd0
 8009180:	20001dd4 	.word	0x20001dd4

08009184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800918a:	4b2c      	ldr	r3, [pc, #176]	@ (800923c <vTaskSwitchContext+0xb8>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009192:	4b2b      	ldr	r3, [pc, #172]	@ (8009240 <vTaskSwitchContext+0xbc>)
 8009194:	2201      	movs	r2, #1
 8009196:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009198:	e049      	b.n	800922e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800919a:	4b29      	ldr	r3, [pc, #164]	@ (8009240 <vTaskSwitchContext+0xbc>)
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a0:	4b28      	ldr	r3, [pc, #160]	@ (8009244 <vTaskSwitchContext+0xc0>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	e013      	b.n	80091d0 <vTaskSwitchContext+0x4c>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10d      	bne.n	80091ca <vTaskSwitchContext+0x46>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	b672      	cpsid	i
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	b662      	cpsie	i
 80091c2:	607b      	str	r3, [r7, #4]
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	e7fd      	b.n	80091c6 <vTaskSwitchContext+0x42>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	491d      	ldr	r1, [pc, #116]	@ (8009248 <vTaskSwitchContext+0xc4>)
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0e1      	beq.n	80091a8 <vTaskSwitchContext+0x24>
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a16      	ldr	r2, [pc, #88]	@ (8009248 <vTaskSwitchContext+0xc4>)
 80091f0:	4413      	add	r3, r2
 80091f2:	60bb      	str	r3, [r7, #8]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	605a      	str	r2, [r3, #4]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	3308      	adds	r3, #8
 8009206:	429a      	cmp	r2, r3
 8009208:	d104      	bne.n	8009214 <vTaskSwitchContext+0x90>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	605a      	str	r2, [r3, #4]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	4a0c      	ldr	r2, [pc, #48]	@ (800924c <vTaskSwitchContext+0xc8>)
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	4a09      	ldr	r2, [pc, #36]	@ (8009244 <vTaskSwitchContext+0xc0>)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009224:	4b09      	ldr	r3, [pc, #36]	@ (800924c <vTaskSwitchContext+0xc8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3354      	adds	r3, #84	@ 0x54
 800922a:	4a09      	ldr	r2, [pc, #36]	@ (8009250 <vTaskSwitchContext+0xcc>)
 800922c:	6013      	str	r3, [r2, #0]
}
 800922e:	bf00      	nop
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20001de8 	.word	0x20001de8
 8009240:	20001dd4 	.word	0x20001dd4
 8009244:	20001dc8 	.word	0x20001dc8
 8009248:	200018f0 	.word	0x200018f0
 800924c:	200018ec 	.word	0x200018ec
 8009250:	2000017c 	.word	0x2000017c

08009254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10d      	bne.n	8009280 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	b672      	cpsid	i
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	b662      	cpsie	i
 8009278:	60fb      	str	r3, [r7, #12]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009280:	4b07      	ldr	r3, [pc, #28]	@ (80092a0 <vTaskPlaceOnEventList+0x4c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3318      	adds	r3, #24
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7fe fbe2 	bl	8007a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800928e:	2101      	movs	r1, #1
 8009290:	6838      	ldr	r0, [r7, #0]
 8009292:	f000 fba9 	bl	80099e8 <prvAddCurrentTaskToDelayedList>
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200018ec 	.word	0x200018ec

080092a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10d      	bne.n	80092d2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	b672      	cpsid	i
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	b662      	cpsie	i
 80092ca:	617b      	str	r3, [r7, #20]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092d2:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <vTaskPlaceOnEventListRestricted+0x58>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3318      	adds	r3, #24
 80092d8:	4619      	mov	r1, r3
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f7fe fb95 	bl	8007a0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80092e6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	68b8      	ldr	r0, [r7, #8]
 80092f0:	f000 fb7a 	bl	80099e8 <prvAddCurrentTaskToDelayedList>
	}
 80092f4:	bf00      	nop
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	200018ec 	.word	0x200018ec

08009300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10d      	bne.n	8009332 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	60fb      	str	r3, [r7, #12]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	3318      	adds	r3, #24
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fbc4 	bl	8007ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933c:	4b1d      	ldr	r3, [pc, #116]	@ (80093b4 <xTaskRemoveFromEventList+0xb4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d11d      	bne.n	8009380 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3304      	adds	r3, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fbbb 	bl	8007ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009352:	4b19      	ldr	r3, [pc, #100]	@ (80093b8 <xTaskRemoveFromEventList+0xb8>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d903      	bls.n	8009362 <xTaskRemoveFromEventList+0x62>
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935e:	4a16      	ldr	r2, [pc, #88]	@ (80093b8 <xTaskRemoveFromEventList+0xb8>)
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009366:	4613      	mov	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4a13      	ldr	r2, [pc, #76]	@ (80093bc <xTaskRemoveFromEventList+0xbc>)
 8009370:	441a      	add	r2, r3
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	3304      	adds	r3, #4
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f7fe fb46 	bl	8007a0a <vListInsertEnd>
 800937e:	e005      	b.n	800938c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	3318      	adds	r3, #24
 8009384:	4619      	mov	r1, r3
 8009386:	480e      	ldr	r0, [pc, #56]	@ (80093c0 <xTaskRemoveFromEventList+0xc0>)
 8009388:	f7fe fb3f 	bl	8007a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009390:	4b0c      	ldr	r3, [pc, #48]	@ (80093c4 <xTaskRemoveFromEventList+0xc4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009396:	429a      	cmp	r2, r3
 8009398:	d905      	bls.n	80093a6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800939a:	2301      	movs	r3, #1
 800939c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800939e:	4b0a      	ldr	r3, [pc, #40]	@ (80093c8 <xTaskRemoveFromEventList+0xc8>)
 80093a0:	2201      	movs	r2, #1
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	e001      	b.n	80093aa <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093aa:	697b      	ldr	r3, [r7, #20]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20001de8 	.word	0x20001de8
 80093b8:	20001dc8 	.word	0x20001dc8
 80093bc:	200018f0 	.word	0x200018f0
 80093c0:	20001d80 	.word	0x20001d80
 80093c4:	200018ec 	.word	0x200018ec
 80093c8:	20001dd4 	.word	0x20001dd4

080093cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <vTaskInternalSetTimeOutState+0x24>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093dc:	4b05      	ldr	r3, [pc, #20]	@ (80093f4 <vTaskInternalSetTimeOutState+0x28>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	605a      	str	r2, [r3, #4]
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20001dd8 	.word	0x20001dd8
 80093f4:	20001dc4 	.word	0x20001dc4

080093f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10d      	bne.n	8009424 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940c:	b672      	cpsid	i
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	b662      	cpsie	i
 800941c:	613b      	str	r3, [r7, #16]
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	e7fd      	b.n	8009420 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10d      	bne.n	8009446 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942e:	b672      	cpsid	i
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	b662      	cpsie	i
 800943e:	60fb      	str	r3, [r7, #12]
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009446:	f001 f861 	bl	800a50c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800944a:	4b1d      	ldr	r3, [pc, #116]	@ (80094c0 <xTaskCheckForTimeOut+0xc8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d102      	bne.n	800946a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e023      	b.n	80094b2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b15      	ldr	r3, [pc, #84]	@ (80094c4 <xTaskCheckForTimeOut+0xcc>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	d007      	beq.n	8009486 <xTaskCheckForTimeOut+0x8e>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	429a      	cmp	r2, r3
 800947e:	d302      	bcc.n	8009486 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	e015      	b.n	80094b2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	429a      	cmp	r2, r3
 800948e:	d20b      	bcs.n	80094a8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	1ad2      	subs	r2, r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff ff95 	bl	80093cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	e004      	b.n	80094b2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094ae:	2301      	movs	r3, #1
 80094b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094b2:	f001 f861 	bl	800a578 <vPortExitCritical>

	return xReturn;
 80094b6:	69fb      	ldr	r3, [r7, #28]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20001dc4 	.word	0x20001dc4
 80094c4:	20001dd8 	.word	0x20001dd8

080094c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094c8:	b480      	push	{r7}
 80094ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094cc:	4b03      	ldr	r3, [pc, #12]	@ (80094dc <vTaskMissedYield+0x14>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
}
 80094d2:	bf00      	nop
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20001dd4 	.word	0x20001dd4

080094e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094e8:	f000 f852 	bl	8009590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094ec:	4b06      	ldr	r3, [pc, #24]	@ (8009508 <prvIdleTask+0x28>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d9f9      	bls.n	80094e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094f4:	4b05      	ldr	r3, [pc, #20]	@ (800950c <prvIdleTask+0x2c>)
 80094f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009504:	e7f0      	b.n	80094e8 <prvIdleTask+0x8>
 8009506:	bf00      	nop
 8009508:	200018f0 	.word	0x200018f0
 800950c:	e000ed04 	.word	0xe000ed04

08009510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	e00c      	b.n	8009536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a12      	ldr	r2, [pc, #72]	@ (8009570 <prvInitialiseTaskLists+0x60>)
 8009528:	4413      	add	r3, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fa40 	bl	80079b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3301      	adds	r3, #1
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b37      	cmp	r3, #55	@ 0x37
 800953a:	d9ef      	bls.n	800951c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800953c:	480d      	ldr	r0, [pc, #52]	@ (8009574 <prvInitialiseTaskLists+0x64>)
 800953e:	f7fe fa37 	bl	80079b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009542:	480d      	ldr	r0, [pc, #52]	@ (8009578 <prvInitialiseTaskLists+0x68>)
 8009544:	f7fe fa34 	bl	80079b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009548:	480c      	ldr	r0, [pc, #48]	@ (800957c <prvInitialiseTaskLists+0x6c>)
 800954a:	f7fe fa31 	bl	80079b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800954e:	480c      	ldr	r0, [pc, #48]	@ (8009580 <prvInitialiseTaskLists+0x70>)
 8009550:	f7fe fa2e 	bl	80079b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009554:	480b      	ldr	r0, [pc, #44]	@ (8009584 <prvInitialiseTaskLists+0x74>)
 8009556:	f7fe fa2b 	bl	80079b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800955a:	4b0b      	ldr	r3, [pc, #44]	@ (8009588 <prvInitialiseTaskLists+0x78>)
 800955c:	4a05      	ldr	r2, [pc, #20]	@ (8009574 <prvInitialiseTaskLists+0x64>)
 800955e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009560:	4b0a      	ldr	r3, [pc, #40]	@ (800958c <prvInitialiseTaskLists+0x7c>)
 8009562:	4a05      	ldr	r2, [pc, #20]	@ (8009578 <prvInitialiseTaskLists+0x68>)
 8009564:	601a      	str	r2, [r3, #0]
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200018f0 	.word	0x200018f0
 8009574:	20001d50 	.word	0x20001d50
 8009578:	20001d64 	.word	0x20001d64
 800957c:	20001d80 	.word	0x20001d80
 8009580:	20001d94 	.word	0x20001d94
 8009584:	20001dac 	.word	0x20001dac
 8009588:	20001d78 	.word	0x20001d78
 800958c:	20001d7c 	.word	0x20001d7c

08009590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009596:	e019      	b.n	80095cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009598:	f000 ffb8 	bl	800a50c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959c:	4b10      	ldr	r3, [pc, #64]	@ (80095e0 <prvCheckTasksWaitingTermination+0x50>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe fa8b 	bl	8007ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4a0b      	ldr	r2, [pc, #44]	@ (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095b8:	4b0b      	ldr	r3, [pc, #44]	@ (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3b01      	subs	r3, #1
 80095be:	4a0a      	ldr	r2, [pc, #40]	@ (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095c2:	f000 ffd9 	bl	800a578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f810 	bl	80095ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095cc:	4b06      	ldr	r3, [pc, #24]	@ (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e1      	bne.n	8009598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20001d94 	.word	0x20001d94
 80095e4:	20001dc0 	.word	0x20001dc0
 80095e8:	20001da8 	.word	0x20001da8

080095ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3354      	adds	r3, #84	@ 0x54
 80095f8:	4618      	mov	r0, r3
 80095fa:	f002 fa5f 	bl	800babc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009604:	2b00      	cmp	r3, #0
 8009606:	d108      	bne.n	800961a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960c:	4618      	mov	r0, r3
 800960e:	f001 f979 	bl	800a904 <vPortFree>
				vPortFree( pxTCB );
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 f976 	bl	800a904 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009618:	e01b      	b.n	8009652 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009620:	2b01      	cmp	r3, #1
 8009622:	d103      	bne.n	800962c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 f96d 	bl	800a904 <vPortFree>
	}
 800962a:	e012      	b.n	8009652 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009632:	2b02      	cmp	r3, #2
 8009634:	d00d      	beq.n	8009652 <prvDeleteTCB+0x66>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	b672      	cpsid	i
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	b662      	cpsie	i
 800964a:	60fb      	str	r3, [r7, #12]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <prvDeleteTCB+0x62>
	}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009662:	4b0c      	ldr	r3, [pc, #48]	@ (8009694 <prvResetNextTaskUnblockTime+0x38>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d104      	bne.n	8009676 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800966c:	4b0a      	ldr	r3, [pc, #40]	@ (8009698 <prvResetNextTaskUnblockTime+0x3c>)
 800966e:	f04f 32ff 	mov.w	r2, #4294967295
 8009672:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009674:	e008      	b.n	8009688 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009676:	4b07      	ldr	r3, [pc, #28]	@ (8009694 <prvResetNextTaskUnblockTime+0x38>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	4a04      	ldr	r2, [pc, #16]	@ (8009698 <prvResetNextTaskUnblockTime+0x3c>)
 8009686:	6013      	str	r3, [r2, #0]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	20001d78 	.word	0x20001d78
 8009698:	20001de0 	.word	0x20001de0

0800969c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80096a2:	4b05      	ldr	r3, [pc, #20]	@ (80096b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80096a8:	687b      	ldr	r3, [r7, #4]
	}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	200018ec 	.word	0x200018ec

080096bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096c2:	4b0b      	ldr	r3, [pc, #44]	@ (80096f0 <xTaskGetSchedulerState+0x34>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096ca:	2301      	movs	r3, #1
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	e008      	b.n	80096e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d0:	4b08      	ldr	r3, [pc, #32]	@ (80096f4 <xTaskGetSchedulerState+0x38>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096d8:	2302      	movs	r3, #2
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	e001      	b.n	80096e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096de:	2300      	movs	r3, #0
 80096e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096e2:	687b      	ldr	r3, [r7, #4]
	}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20001dcc 	.word	0x20001dcc
 80096f4:	20001de8 	.word	0x20001de8

080096f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d051      	beq.n	80097b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009712:	4b2a      	ldr	r3, [pc, #168]	@ (80097bc <xTaskPriorityInherit+0xc4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009718:	429a      	cmp	r2, r3
 800971a:	d241      	bcs.n	80097a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	db06      	blt.n	8009732 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009724:	4b25      	ldr	r3, [pc, #148]	@ (80097bc <xTaskPriorityInherit+0xc4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6959      	ldr	r1, [r3, #20]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4a1f      	ldr	r2, [pc, #124]	@ (80097c0 <xTaskPriorityInherit+0xc8>)
 8009744:	4413      	add	r3, r2
 8009746:	4299      	cmp	r1, r3
 8009748:	d122      	bne.n	8009790 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	3304      	adds	r3, #4
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe f9b8 	bl	8007ac4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009754:	4b19      	ldr	r3, [pc, #100]	@ (80097bc <xTaskPriorityInherit+0xc4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009762:	4b18      	ldr	r3, [pc, #96]	@ (80097c4 <xTaskPriorityInherit+0xcc>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d903      	bls.n	8009772 <xTaskPriorityInherit+0x7a>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976e:	4a15      	ldr	r2, [pc, #84]	@ (80097c4 <xTaskPriorityInherit+0xcc>)
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4a10      	ldr	r2, [pc, #64]	@ (80097c0 <xTaskPriorityInherit+0xc8>)
 8009780:	441a      	add	r2, r3
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3304      	adds	r3, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7fe f93e 	bl	8007a0a <vListInsertEnd>
 800978e:	e004      	b.n	800979a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009790:	4b0a      	ldr	r3, [pc, #40]	@ (80097bc <xTaskPriorityInherit+0xc4>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800979a:	2301      	movs	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	e008      	b.n	80097b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097a4:	4b05      	ldr	r3, [pc, #20]	@ (80097bc <xTaskPriorityInherit+0xc4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d201      	bcs.n	80097b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80097ae:	2301      	movs	r3, #1
 80097b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097b2:	68fb      	ldr	r3, [r7, #12]
	}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200018ec 	.word	0x200018ec
 80097c0:	200018f0 	.word	0x200018f0
 80097c4:	20001dc8 	.word	0x20001dc8

080097c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d05c      	beq.n	8009898 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097de:	4b31      	ldr	r3, [pc, #196]	@ (80098a4 <xTaskPriorityDisinherit+0xdc>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d00d      	beq.n	8009804 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ec:	b672      	cpsid	i
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	b662      	cpsie	i
 80097fc:	60fb      	str	r3, [r7, #12]
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	e7fd      	b.n	8009800 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10d      	bne.n	8009828 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009810:	b672      	cpsid	i
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	b662      	cpsie	i
 8009820:	60bb      	str	r3, [r7, #8]
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800982c:	1e5a      	subs	r2, r3, #1
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800983a:	429a      	cmp	r2, r3
 800983c:	d02c      	beq.n	8009898 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009842:	2b00      	cmp	r3, #0
 8009844:	d128      	bne.n	8009898 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	3304      	adds	r3, #4
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe f93a 	bl	8007ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009868:	4b0f      	ldr	r3, [pc, #60]	@ (80098a8 <xTaskPriorityDisinherit+0xe0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d903      	bls.n	8009878 <xTaskPriorityDisinherit+0xb0>
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009874:	4a0c      	ldr	r2, [pc, #48]	@ (80098a8 <xTaskPriorityDisinherit+0xe0>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4a09      	ldr	r2, [pc, #36]	@ (80098ac <xTaskPriorityDisinherit+0xe4>)
 8009886:	441a      	add	r2, r3
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	3304      	adds	r3, #4
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f7fe f8bb 	bl	8007a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009894:	2301      	movs	r3, #1
 8009896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009898:	697b      	ldr	r3, [r7, #20]
	}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200018ec 	.word	0x200018ec
 80098a8:	20001dc8 	.word	0x20001dc8
 80098ac:	200018f0 	.word	0x200018f0

080098b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80098be:	2301      	movs	r3, #1
 80098c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d070      	beq.n	80099aa <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10d      	bne.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d4:	b672      	cpsid	i
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	b662      	cpsie	i
 80098e4:	60fb      	str	r3, [r7, #12]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d902      	bls.n	80098fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	e002      	b.n	8009902 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009900:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	429a      	cmp	r2, r3
 800990a:	d04e      	beq.n	80099aa <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	429a      	cmp	r2, r3
 8009914:	d149      	bne.n	80099aa <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009916:	4b27      	ldr	r3, [pc, #156]	@ (80099b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	429a      	cmp	r2, r3
 800991e:	d10d      	bne.n	800993c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	60bb      	str	r3, [r7, #8]
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	e7fd      	b.n	8009938 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	69fa      	ldr	r2, [r7, #28]
 8009946:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	db04      	blt.n	800995a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	6959      	ldr	r1, [r3, #20]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4a13      	ldr	r2, [pc, #76]	@ (80099b8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800996a:	4413      	add	r3, r2
 800996c:	4299      	cmp	r1, r3
 800996e:	d11c      	bne.n	80099aa <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	3304      	adds	r3, #4
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe f8a5 	bl	8007ac4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997e:	4b0f      	ldr	r3, [pc, #60]	@ (80099bc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d903      	bls.n	800998e <vTaskPriorityDisinheritAfterTimeout+0xde>
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998a:	4a0c      	ldr	r2, [pc, #48]	@ (80099bc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4a07      	ldr	r2, [pc, #28]	@ (80099b8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800999c:	441a      	add	r2, r3
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	3304      	adds	r3, #4
 80099a2:	4619      	mov	r1, r3
 80099a4:	4610      	mov	r0, r2
 80099a6:	f7fe f830 	bl	8007a0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099aa:	bf00      	nop
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200018ec 	.word	0x200018ec
 80099b8:	200018f0 	.word	0x200018f0
 80099bc:	20001dc8 	.word	0x20001dc8

080099c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099c4:	4b07      	ldr	r3, [pc, #28]	@ (80099e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099cc:	4b05      	ldr	r3, [pc, #20]	@ (80099e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099d2:	3201      	adds	r2, #1
 80099d4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80099d6:	4b03      	ldr	r3, [pc, #12]	@ (80099e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80099d8:	681b      	ldr	r3, [r3, #0]
	}
 80099da:	4618      	mov	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	200018ec 	.word	0x200018ec

080099e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099f2:	4b21      	ldr	r3, [pc, #132]	@ (8009a78 <prvAddCurrentTaskToDelayedList+0x90>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099f8:	4b20      	ldr	r3, [pc, #128]	@ (8009a7c <prvAddCurrentTaskToDelayedList+0x94>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3304      	adds	r3, #4
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe f860 	bl	8007ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0a:	d10a      	bne.n	8009a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a12:	4b1a      	ldr	r3, [pc, #104]	@ (8009a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3304      	adds	r3, #4
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4819      	ldr	r0, [pc, #100]	@ (8009a80 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a1c:	f7fd fff5 	bl	8007a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a20:	e026      	b.n	8009a70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a2a:	4b14      	ldr	r3, [pc, #80]	@ (8009a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d209      	bcs.n	8009a4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a3a:	4b12      	ldr	r3, [pc, #72]	@ (8009a84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7fe f803 	bl	8007a52 <vListInsert>
}
 8009a4c:	e010      	b.n	8009a70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3304      	adds	r3, #4
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7fd fff9 	bl	8007a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a60:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d202      	bcs.n	8009a70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a6a:	4a08      	ldr	r2, [pc, #32]	@ (8009a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	6013      	str	r3, [r2, #0]
}
 8009a70:	bf00      	nop
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20001dc4 	.word	0x20001dc4
 8009a7c:	200018ec 	.word	0x200018ec
 8009a80:	20001dac 	.word	0x20001dac
 8009a84:	20001d7c 	.word	0x20001d7c
 8009a88:	20001d78 	.word	0x20001d78
 8009a8c:	20001de0 	.word	0x20001de0

08009a90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	@ 0x28
 8009a94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a9a:	f000 fbc5 	bl	800a228 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b18 <xTimerCreateTimerTask+0x88>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d021      	beq.n	8009aea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009aae:	1d3a      	adds	r2, r7, #4
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fd ff5f 	bl	800797c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	9202      	str	r2, [sp, #8]
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	2313      	movs	r3, #19
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	2300      	movs	r3, #0
 8009ace:	460a      	mov	r2, r1
 8009ad0:	4912      	ldr	r1, [pc, #72]	@ (8009b1c <xTimerCreateTimerTask+0x8c>)
 8009ad2:	4813      	ldr	r0, [pc, #76]	@ (8009b20 <xTimerCreateTimerTask+0x90>)
 8009ad4:	f7fe ff6a 	bl	80089ac <xTaskCreateStatic>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4a12      	ldr	r2, [pc, #72]	@ (8009b24 <xTimerCreateTimerTask+0x94>)
 8009adc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ade:	4b11      	ldr	r3, [pc, #68]	@ (8009b24 <xTimerCreateTimerTask+0x94>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af4:	b672      	cpsid	i
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	b662      	cpsie	i
 8009b04:	613b      	str	r3, [r7, #16]
}
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	e7fd      	b.n	8009b08 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009b0c:	697b      	ldr	r3, [r7, #20]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20001e1c 	.word	0x20001e1c
 8009b1c:	0800f4d8 	.word	0x0800f4d8
 8009b20:	08009db1 	.word	0x08009db1
 8009b24:	20001e20 	.word	0x20001e20

08009b28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009b36:	202c      	movs	r0, #44	@ 0x2c
 8009b38:	f000 fe16 	bl	800a768 <pvPortMalloc>
 8009b3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00d      	beq.n	8009b60 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 f849 	bl	8009bf2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009b60:	697b      	ldr	r3, [r7, #20]
	}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b08a      	sub	sp, #40	@ 0x28
 8009b6e:	af02      	add	r7, sp, #8
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	607a      	str	r2, [r7, #4]
 8009b76:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009b78:	232c      	movs	r3, #44	@ 0x2c
 8009b7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2b2c      	cmp	r3, #44	@ 0x2c
 8009b80:	d00d      	beq.n	8009b9e <xTimerCreateStatic+0x34>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b86:	b672      	cpsid	i
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	b662      	cpsie	i
 8009b96:	61bb      	str	r3, [r7, #24]
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	e7fd      	b.n	8009b9a <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10d      	bne.n	8009bc2 <xTimerCreateStatic+0x58>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009baa:	b672      	cpsid	i
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	b662      	cpsie	i
 8009bba:	617b      	str	r3, [r7, #20]
}
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	e7fd      	b.n	8009bbe <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00d      	beq.n	8009be8 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 f805 	bl	8009bf2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009be8:	69fb      	ldr	r3, [r7, #28]
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b086      	sub	sp, #24
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	607a      	str	r2, [r7, #4]
 8009bfe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10d      	bne.n	8009c22 <prvInitialiseNewTimer+0x30>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	b672      	cpsid	i
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	b662      	cpsie	i
 8009c1a:	617b      	str	r3, [r7, #20]
}
 8009c1c:	bf00      	nop
 8009c1e:	bf00      	nop
 8009c20:	e7fd      	b.n	8009c1e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01e      	beq.n	8009c66 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009c28:	f000 fafe 	bl	800a228 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	6a3a      	ldr	r2, [r7, #32]
 8009c42:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	3304      	adds	r3, #4
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fd fed1 	bl	80079f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d008      	beq.n	8009c66 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c5a:	f043 0304 	orr.w	r3, r3, #4
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009c66:	bf00      	nop
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	@ 0x28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10d      	bne.n	8009ca4 <xTimerGenericCommand+0x34>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8c:	b672      	cpsid	i
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	b662      	cpsie	i
 8009c9c:	623b      	str	r3, [r7, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ca4:	4b19      	ldr	r3, [pc, #100]	@ (8009d0c <xTimerGenericCommand+0x9c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d02a      	beq.n	8009d02 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	dc18      	bgt.n	8009cf0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cbe:	f7ff fcfd 	bl	80096bc <xTaskGetSchedulerState>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d109      	bne.n	8009cdc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cc8:	4b10      	ldr	r3, [pc, #64]	@ (8009d0c <xTimerGenericCommand+0x9c>)
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	f107 0110 	add.w	r1, r7, #16
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cd4:	f7fe f936 	bl	8007f44 <xQueueGenericSend>
 8009cd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009cda:	e012      	b.n	8009d02 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8009d0c <xTimerGenericCommand+0x9c>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	f107 0110 	add.w	r1, r7, #16
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f7fe f92c 	bl	8007f44 <xQueueGenericSend>
 8009cec:	6278      	str	r0, [r7, #36]	@ 0x24
 8009cee:	e008      	b.n	8009d02 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cf0:	4b06      	ldr	r3, [pc, #24]	@ (8009d0c <xTimerGenericCommand+0x9c>)
 8009cf2:	6818      	ldr	r0, [r3, #0]
 8009cf4:	f107 0110 	add.w	r1, r7, #16
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	f7fe fa2c 	bl	8008158 <xQueueGenericSendFromISR>
 8009d00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3728      	adds	r7, #40	@ 0x28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20001e1c 	.word	0x20001e1c

08009d10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b088      	sub	sp, #32
 8009d14:	af02      	add	r7, sp, #8
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d1a:	4b24      	ldr	r3, [pc, #144]	@ (8009dac <prvProcessExpiredTimer+0x9c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	3304      	adds	r3, #4
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fd fecb 	bl	8007ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d025      	beq.n	8009d88 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	699a      	ldr	r2, [r3, #24]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	18d1      	adds	r1, r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	6978      	ldr	r0, [r7, #20]
 8009d4a:	f000 f8d7 	bl	8009efc <prvInsertTimerInActiveList>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d022      	beq.n	8009d9a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d54:	2300      	movs	r3, #0
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6978      	ldr	r0, [r7, #20]
 8009d60:	f7ff ff86 	bl	8009c70 <xTimerGenericCommand>
 8009d64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d116      	bne.n	8009d9a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d70:	b672      	cpsid	i
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	b662      	cpsie	i
 8009d80:	60fb      	str	r3, [r7, #12]
}
 8009d82:	bf00      	nop
 8009d84:	bf00      	nop
 8009d86:	e7fd      	b.n	8009d84 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	6978      	ldr	r0, [r7, #20]
 8009da0:	4798      	blx	r3
}
 8009da2:	bf00      	nop
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20001e14 	.word	0x20001e14

08009db0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009db8:	f107 0308 	add.w	r3, r7, #8
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 f859 	bl	8009e74 <prvGetNextExpireTime>
 8009dc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 f805 	bl	8009dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dce:	f000 f8d7 	bl	8009f80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dd2:	bf00      	nop
 8009dd4:	e7f0      	b.n	8009db8 <prvTimerTask+0x8>
	...

08009dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009de2:	f7ff f855 	bl	8008e90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009de6:	f107 0308 	add.w	r3, r7, #8
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 f866 	bl	8009ebc <prvSampleTimeNow>
 8009df0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d130      	bne.n	8009e5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <prvProcessTimerOrBlockTask+0x3c>
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d806      	bhi.n	8009e14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e06:	f7ff f851 	bl	8008eac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e0a:	68f9      	ldr	r1, [r7, #12]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff ff7f 	bl	8009d10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e12:	e024      	b.n	8009e5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d008      	beq.n	8009e2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e1a:	4b13      	ldr	r3, [pc, #76]	@ (8009e68 <prvProcessTimerOrBlockTask+0x90>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <prvProcessTimerOrBlockTask+0x50>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e000      	b.n	8009e2a <prvProcessTimerOrBlockTask+0x52>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e6c <prvProcessTimerOrBlockTask+0x94>)
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	f7fe fd83 	bl	8008944 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e3e:	f7ff f835 	bl	8008eac <xTaskResumeAll>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e48:	4b09      	ldr	r3, [pc, #36]	@ (8009e70 <prvProcessTimerOrBlockTask+0x98>)
 8009e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	f3bf 8f6f 	isb	sy
}
 8009e58:	e001      	b.n	8009e5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e5a:	f7ff f827 	bl	8008eac <xTaskResumeAll>
}
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20001e18 	.word	0x20001e18
 8009e6c:	20001e1c 	.word	0x20001e1c
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8009eb8 <prvGetNextExpireTime+0x44>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <prvGetNextExpireTime+0x16>
 8009e86:	2201      	movs	r2, #1
 8009e88:	e000      	b.n	8009e8c <prvGetNextExpireTime+0x18>
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d105      	bne.n	8009ea4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e98:	4b07      	ldr	r3, [pc, #28]	@ (8009eb8 <prvGetNextExpireTime+0x44>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	60fb      	str	r3, [r7, #12]
 8009ea2:	e001      	b.n	8009ea8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	20001e14 	.word	0x20001e14

08009ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ec4:	f7ff f892 	bl	8008fec <xTaskGetTickCount>
 8009ec8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009eca:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef8 <prvSampleTimeNow+0x3c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d205      	bcs.n	8009ee0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ed4:	f000 f940 	bl	800a158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e002      	b.n	8009ee6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ee6:	4a04      	ldr	r2, [pc, #16]	@ (8009ef8 <prvSampleTimeNow+0x3c>)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009eec:	68fb      	ldr	r3, [r7, #12]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20001e24 	.word	0x20001e24

08009efc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d812      	bhi.n	8009f48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	1ad2      	subs	r2, r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d302      	bcc.n	8009f36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f30:	2301      	movs	r3, #1
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	e01b      	b.n	8009f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f36:	4b10      	ldr	r3, [pc, #64]	@ (8009f78 <prvInsertTimerInActiveList+0x7c>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7fd fd86 	bl	8007a52 <vListInsert>
 8009f46:	e012      	b.n	8009f6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d206      	bcs.n	8009f5e <prvInsertTimerInActiveList+0x62>
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d302      	bcc.n	8009f5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	e007      	b.n	8009f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f5e:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <prvInsertTimerInActiveList+0x80>)
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7fd fd72 	bl	8007a52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f6e:	697b      	ldr	r3, [r7, #20]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20001e18 	.word	0x20001e18
 8009f7c:	20001e14 	.word	0x20001e14

08009f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08e      	sub	sp, #56	@ 0x38
 8009f84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f86:	e0d4      	b.n	800a132 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	da1b      	bge.n	8009fc6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f8e:	1d3b      	adds	r3, r7, #4
 8009f90:	3304      	adds	r3, #4
 8009f92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10d      	bne.n	8009fb6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9e:	b672      	cpsid	i
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	b662      	cpsie	i
 8009fae:	61fb      	str	r3, [r7, #28]
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	e7fd      	b.n	8009fb2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fbc:	6850      	ldr	r0, [r2, #4]
 8009fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fc0:	6892      	ldr	r2, [r2, #8]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f2c0 80b2 	blt.w	800a132 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d004      	beq.n	8009fe4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fd fd70 	bl	8007ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff ff68 	bl	8009ebc <prvSampleTimeNow>
 8009fec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b09      	cmp	r3, #9
 8009ff2:	f200 809b 	bhi.w	800a12c <prvProcessReceivedCommands+0x1ac>
 8009ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ffc <prvProcessReceivedCommands+0x7c>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a025 	.word	0x0800a025
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a025 	.word	0x0800a025
 800a008:	0800a09f 	.word	0x0800a09f
 800a00c:	0800a0b3 	.word	0x0800a0b3
 800a010:	0800a103 	.word	0x0800a103
 800a014:	0800a025 	.word	0x0800a025
 800a018:	0800a025 	.word	0x0800a025
 800a01c:	0800a09f 	.word	0x0800a09f
 800a020:	0800a0b3 	.word	0x0800a0b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a02a:	f043 0301 	orr.w	r3, r3, #1
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	18d1      	adds	r1, r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a044:	f7ff ff5a 	bl	8009efc <prvInsertTimerInActiveList>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d070      	beq.n	800a130 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d065      	beq.n	800a130 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	441a      	add	r2, r3
 800a06c:	2300      	movs	r3, #0
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2300      	movs	r3, #0
 800a072:	2100      	movs	r1, #0
 800a074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a076:	f7ff fdfb 	bl	8009c70 <xTimerGenericCommand>
 800a07a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d156      	bne.n	800a130 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	b672      	cpsid	i
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	b662      	cpsie	i
 800a096:	61bb      	str	r3, [r7, #24]
}
 800a098:	bf00      	nop
 800a09a:	bf00      	nop
 800a09c:	e7fd      	b.n	800a09a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0a4:	f023 0301 	bic.w	r3, r3, #1
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a0b0:	e03f      	b.n	800a132 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10d      	bne.n	800a0ee <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d6:	b672      	cpsid	i
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	b662      	cpsie	i
 800a0e6:	617b      	str	r3, [r7, #20]
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	e7fd      	b.n	800a0ea <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f0:	699a      	ldr	r2, [r3, #24]
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	18d1      	adds	r1, r2, r3
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0fc:	f7ff fefe 	bl	8009efc <prvInsertTimerInActiveList>
					break;
 800a100:	e017      	b.n	800a132 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d103      	bne.n	800a118 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a112:	f000 fbf7 	bl	800a904 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a116:	e00c      	b.n	800a132 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a11e:	f023 0301 	bic.w	r3, r3, #1
 800a122:	b2da      	uxtb	r2, r3
 800a124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a12a:	e002      	b.n	800a132 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a12c:	bf00      	nop
 800a12e:	e000      	b.n	800a132 <prvProcessReceivedCommands+0x1b2>
					break;
 800a130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a132:	4b08      	ldr	r3, [pc, #32]	@ (800a154 <prvProcessReceivedCommands+0x1d4>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	1d39      	adds	r1, r7, #4
 800a138:	2200      	movs	r2, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe f8b0 	bl	80082a0 <xQueueReceive>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	f47f af20 	bne.w	8009f88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	3730      	adds	r7, #48	@ 0x30
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20001e1c 	.word	0x20001e1c

0800a158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a15e:	e04b      	b.n	800a1f8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a160:	4b2f      	ldr	r3, [pc, #188]	@ (800a220 <prvSwitchTimerLists+0xc8>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16a:	4b2d      	ldr	r3, [pc, #180]	@ (800a220 <prvSwitchTimerLists+0xc8>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3304      	adds	r3, #4
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fd fca3 	bl	8007ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d031      	beq.n	800a1f8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	4413      	add	r3, r2
 800a19c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d90e      	bls.n	800a1c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a220 <prvSwitchTimerLists+0xc8>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7fd fc48 	bl	8007a52 <vListInsert>
 800a1c2:	e019      	b.n	800a1f8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fd4e 	bl	8009c70 <xTimerGenericCommand>
 800a1d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10d      	bne.n	800a1f8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e0:	b672      	cpsid	i
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	b662      	cpsie	i
 800a1f0:	603b      	str	r3, [r7, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	e7fd      	b.n	800a1f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1f8:	4b09      	ldr	r3, [pc, #36]	@ (800a220 <prvSwitchTimerLists+0xc8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1ae      	bne.n	800a160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a202:	4b07      	ldr	r3, [pc, #28]	@ (800a220 <prvSwitchTimerLists+0xc8>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a208:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <prvSwitchTimerLists+0xcc>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a04      	ldr	r2, [pc, #16]	@ (800a220 <prvSwitchTimerLists+0xc8>)
 800a20e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a210:	4a04      	ldr	r2, [pc, #16]	@ (800a224 <prvSwitchTimerLists+0xcc>)
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	6013      	str	r3, [r2, #0]
}
 800a216:	bf00      	nop
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20001e14 	.word	0x20001e14
 800a224:	20001e18 	.word	0x20001e18

0800a228 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a22e:	f000 f96d 	bl	800a50c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a232:	4b15      	ldr	r3, [pc, #84]	@ (800a288 <prvCheckForValidListAndQueue+0x60>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d120      	bne.n	800a27c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a23a:	4814      	ldr	r0, [pc, #80]	@ (800a28c <prvCheckForValidListAndQueue+0x64>)
 800a23c:	f7fd fbb8 	bl	80079b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a240:	4813      	ldr	r0, [pc, #76]	@ (800a290 <prvCheckForValidListAndQueue+0x68>)
 800a242:	f7fd fbb5 	bl	80079b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a246:	4b13      	ldr	r3, [pc, #76]	@ (800a294 <prvCheckForValidListAndQueue+0x6c>)
 800a248:	4a10      	ldr	r2, [pc, #64]	@ (800a28c <prvCheckForValidListAndQueue+0x64>)
 800a24a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a24c:	4b12      	ldr	r3, [pc, #72]	@ (800a298 <prvCheckForValidListAndQueue+0x70>)
 800a24e:	4a10      	ldr	r2, [pc, #64]	@ (800a290 <prvCheckForValidListAndQueue+0x68>)
 800a250:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a252:	2300      	movs	r3, #0
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	4b11      	ldr	r3, [pc, #68]	@ (800a29c <prvCheckForValidListAndQueue+0x74>)
 800a258:	4a11      	ldr	r2, [pc, #68]	@ (800a2a0 <prvCheckForValidListAndQueue+0x78>)
 800a25a:	2110      	movs	r1, #16
 800a25c:	2040      	movs	r0, #64	@ 0x40
 800a25e:	f7fd fcc7 	bl	8007bf0 <xQueueGenericCreateStatic>
 800a262:	4603      	mov	r3, r0
 800a264:	4a08      	ldr	r2, [pc, #32]	@ (800a288 <prvCheckForValidListAndQueue+0x60>)
 800a266:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a268:	4b07      	ldr	r3, [pc, #28]	@ (800a288 <prvCheckForValidListAndQueue+0x60>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a270:	4b05      	ldr	r3, [pc, #20]	@ (800a288 <prvCheckForValidListAndQueue+0x60>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	490b      	ldr	r1, [pc, #44]	@ (800a2a4 <prvCheckForValidListAndQueue+0x7c>)
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fb3a 	bl	80088f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a27c:	f000 f97c 	bl	800a578 <vPortExitCritical>
}
 800a280:	bf00      	nop
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20001e1c 	.word	0x20001e1c
 800a28c:	20001dec 	.word	0x20001dec
 800a290:	20001e00 	.word	0x20001e00
 800a294:	20001e14 	.word	0x20001e14
 800a298:	20001e18 	.word	0x20001e18
 800a29c:	20002228 	.word	0x20002228
 800a2a0:	20001e28 	.word	0x20001e28
 800a2a4:	0800f4e0 	.word	0x0800f4e0

0800a2a8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10d      	bne.n	800a2d6 <pvTimerGetTimerID+0x2e>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2be:	b672      	cpsid	i
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	b662      	cpsie	i
 800a2ce:	60fb      	str	r3, [r7, #12]
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	e7fd      	b.n	800a2d2 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800a2d6:	f000 f919 	bl	800a50c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a2e0:	f000 f94a 	bl	800a578 <vPortExitCritical>

	return pvReturn;
 800a2e4:	693b      	ldr	r3, [r7, #16]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3b04      	subs	r3, #4
 800a300:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	3b04      	subs	r3, #4
 800a30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f023 0201 	bic.w	r2, r3, #1
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3b04      	subs	r3, #4
 800a31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a320:	4a0c      	ldr	r2, [pc, #48]	@ (800a354 <pxPortInitialiseStack+0x64>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3b14      	subs	r3, #20
 800a32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3b04      	subs	r3, #4
 800a336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f06f 0202 	mvn.w	r2, #2
 800a33e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3b20      	subs	r3, #32
 800a344:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a346:	68fb      	ldr	r3, [r7, #12]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	0800a359 	.word	0x0800a359

0800a358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a362:	4b15      	ldr	r3, [pc, #84]	@ (800a3b8 <prvTaskExitError+0x60>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36a:	d00d      	beq.n	800a388 <prvTaskExitError+0x30>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a370:	b672      	cpsid	i
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	b662      	cpsie	i
 800a380:	60fb      	str	r3, [r7, #12]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <prvTaskExitError+0x2c>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38c:	b672      	cpsid	i
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	b662      	cpsie	i
 800a39c:	60bb      	str	r3, [r7, #8]
}
 800a39e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3a0:	bf00      	nop
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0fc      	beq.n	800a3a2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	2000016c 	.word	0x2000016c
 800a3bc:	00000000 	.word	0x00000000

0800a3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3c0:	4b07      	ldr	r3, [pc, #28]	@ (800a3e0 <pxCurrentTCBConst2>)
 800a3c2:	6819      	ldr	r1, [r3, #0]
 800a3c4:	6808      	ldr	r0, [r1, #0]
 800a3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ca:	f380 8809 	msr	PSP, r0
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f04f 0000 	mov.w	r0, #0
 800a3d6:	f380 8811 	msr	BASEPRI, r0
 800a3da:	4770      	bx	lr
 800a3dc:	f3af 8000 	nop.w

0800a3e0 <pxCurrentTCBConst2>:
 800a3e0:	200018ec 	.word	0x200018ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop

0800a3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3e8:	4808      	ldr	r0, [pc, #32]	@ (800a40c <prvPortStartFirstTask+0x24>)
 800a3ea:	6800      	ldr	r0, [r0, #0]
 800a3ec:	6800      	ldr	r0, [r0, #0]
 800a3ee:	f380 8808 	msr	MSP, r0
 800a3f2:	f04f 0000 	mov.w	r0, #0
 800a3f6:	f380 8814 	msr	CONTROL, r0
 800a3fa:	b662      	cpsie	i
 800a3fc:	b661      	cpsie	f
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	df00      	svc	0
 800a408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a40a:	bf00      	nop
 800a40c:	e000ed08 	.word	0xe000ed08

0800a410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a416:	4b37      	ldr	r3, [pc, #220]	@ (800a4f4 <xPortStartScheduler+0xe4>)
 800a418:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	22ff      	movs	r2, #255	@ 0xff
 800a426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	4b2f      	ldr	r3, [pc, #188]	@ (800a4f8 <xPortStartScheduler+0xe8>)
 800a43c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a43e:	4b2f      	ldr	r3, [pc, #188]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a440:	2207      	movs	r2, #7
 800a442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a444:	e009      	b.n	800a45a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a446:	4b2d      	ldr	r3, [pc, #180]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	4a2b      	ldr	r2, [pc, #172]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a44e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	b2db      	uxtb	r3, r3
 800a458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a462:	2b80      	cmp	r3, #128	@ 0x80
 800a464:	d0ef      	beq.n	800a446 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a466:	4b25      	ldr	r3, [pc, #148]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f1c3 0307 	rsb	r3, r3, #7
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d00d      	beq.n	800a48e <xPortStartScheduler+0x7e>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a476:	b672      	cpsid	i
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	b662      	cpsie	i
 800a486:	60bb      	str	r3, [r7, #8]
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	e7fd      	b.n	800a48a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a48e:	4b1b      	ldr	r3, [pc, #108]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	4a19      	ldr	r2, [pc, #100]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a498:	4b18      	ldr	r3, [pc, #96]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a4a0:	4a16      	ldr	r2, [pc, #88]	@ (800a4fc <xPortStartScheduler+0xec>)
 800a4a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4ac:	4b14      	ldr	r3, [pc, #80]	@ (800a500 <xPortStartScheduler+0xf0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a13      	ldr	r2, [pc, #76]	@ (800a500 <xPortStartScheduler+0xf0>)
 800a4b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a4b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4b8:	4b11      	ldr	r3, [pc, #68]	@ (800a500 <xPortStartScheduler+0xf0>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a10      	ldr	r2, [pc, #64]	@ (800a500 <xPortStartScheduler+0xf0>)
 800a4be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4c4:	f000 f8dc 	bl	800a680 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a504 <xPortStartScheduler+0xf4>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4ce:	f000 f8fb 	bl	800a6c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <xPortStartScheduler+0xf8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a508 <xPortStartScheduler+0xf8>)
 800a4d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a4dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4de:	f7ff ff83 	bl	800a3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4e2:	f7fe fe4f 	bl	8009184 <vTaskSwitchContext>
	prvTaskExitError();
 800a4e6:	f7ff ff37 	bl	800a358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	e000e400 	.word	0xe000e400
 800a4f8:	20002278 	.word	0x20002278
 800a4fc:	2000227c 	.word	0x2000227c
 800a500:	e000ed20 	.word	0xe000ed20
 800a504:	2000016c 	.word	0x2000016c
 800a508:	e000ef34 	.word	0xe000ef34

0800a50c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a516:	b672      	cpsid	i
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	b662      	cpsie	i
 800a526:	607b      	str	r3, [r7, #4]
}
 800a528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a52a:	4b11      	ldr	r3, [pc, #68]	@ (800a570 <vPortEnterCritical+0x64>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3301      	adds	r3, #1
 800a530:	4a0f      	ldr	r2, [pc, #60]	@ (800a570 <vPortEnterCritical+0x64>)
 800a532:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a534:	4b0e      	ldr	r3, [pc, #56]	@ (800a570 <vPortEnterCritical+0x64>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d112      	bne.n	800a562 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a53c:	4b0d      	ldr	r3, [pc, #52]	@ (800a574 <vPortEnterCritical+0x68>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00d      	beq.n	800a562 <vPortEnterCritical+0x56>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	b672      	cpsid	i
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	b662      	cpsie	i
 800a55a:	603b      	str	r3, [r7, #0]
}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	e7fd      	b.n	800a55e <vPortEnterCritical+0x52>
	}
}
 800a562:	bf00      	nop
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	2000016c 	.word	0x2000016c
 800a574:	e000ed04 	.word	0xe000ed04

0800a578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a57e:	4b13      	ldr	r3, [pc, #76]	@ (800a5cc <vPortExitCritical+0x54>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10d      	bne.n	800a5a2 <vPortExitCritical+0x2a>
	__asm volatile
 800a586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a58a:	b672      	cpsid	i
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	b662      	cpsie	i
 800a59a:	607b      	str	r3, [r7, #4]
}
 800a59c:	bf00      	nop
 800a59e:	bf00      	nop
 800a5a0:	e7fd      	b.n	800a59e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5cc <vPortExitCritical+0x54>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	4a08      	ldr	r2, [pc, #32]	@ (800a5cc <vPortExitCritical+0x54>)
 800a5aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5ac:	4b07      	ldr	r3, [pc, #28]	@ (800a5cc <vPortExitCritical+0x54>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d105      	bne.n	800a5c0 <vPortExitCritical+0x48>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	f383 8811 	msr	BASEPRI, r3
}
 800a5be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	2000016c 	.word	0x2000016c

0800a5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5d0:	f3ef 8009 	mrs	r0, PSP
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	4b15      	ldr	r3, [pc, #84]	@ (800a630 <pxCurrentTCBConst>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	f01e 0f10 	tst.w	lr, #16
 800a5e0:	bf08      	it	eq
 800a5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ea:	6010      	str	r0, [r2, #0]
 800a5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a5f4:	b672      	cpsid	i
 800a5f6:	f380 8811 	msr	BASEPRI, r0
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	b662      	cpsie	i
 800a604:	f7fe fdbe 	bl	8009184 <vTaskSwitchContext>
 800a608:	f04f 0000 	mov.w	r0, #0
 800a60c:	f380 8811 	msr	BASEPRI, r0
 800a610:	bc09      	pop	{r0, r3}
 800a612:	6819      	ldr	r1, [r3, #0]
 800a614:	6808      	ldr	r0, [r1, #0]
 800a616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61a:	f01e 0f10 	tst.w	lr, #16
 800a61e:	bf08      	it	eq
 800a620:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a624:	f380 8809 	msr	PSP, r0
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop

0800a630 <pxCurrentTCBConst>:
 800a630:	200018ec 	.word	0x200018ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop

0800a638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a642:	b672      	cpsid	i
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	b662      	cpsie	i
 800a652:	607b      	str	r3, [r7, #4]
}
 800a654:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a656:	f7fe fcd9 	bl	800900c <xTaskIncrementTick>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d003      	beq.n	800a668 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a660:	4b06      	ldr	r3, [pc, #24]	@ (800a67c <SysTick_Handler+0x44>)
 800a662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	2300      	movs	r3, #0
 800a66a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	f383 8811 	msr	BASEPRI, r3
}
 800a672:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a684:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b4 <vPortSetupTimerInterrupt+0x34>)
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a68a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b8 <vPortSetupTimerInterrupt+0x38>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a690:	4b0a      	ldr	r3, [pc, #40]	@ (800a6bc <vPortSetupTimerInterrupt+0x3c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a0a      	ldr	r2, [pc, #40]	@ (800a6c0 <vPortSetupTimerInterrupt+0x40>)
 800a696:	fba2 2303 	umull	r2, r3, r2, r3
 800a69a:	099b      	lsrs	r3, r3, #6
 800a69c:	4a09      	ldr	r2, [pc, #36]	@ (800a6c4 <vPortSetupTimerInterrupt+0x44>)
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6a2:	4b04      	ldr	r3, [pc, #16]	@ (800a6b4 <vPortSetupTimerInterrupt+0x34>)
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	601a      	str	r2, [r3, #0]
}
 800a6a8:	bf00      	nop
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	e000e010 	.word	0xe000e010
 800a6b8:	e000e018 	.word	0xe000e018
 800a6bc:	20000160 	.word	0x20000160
 800a6c0:	10624dd3 	.word	0x10624dd3
 800a6c4:	e000e014 	.word	0xe000e014

0800a6c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a6d8 <vPortEnableVFP+0x10>
 800a6cc:	6801      	ldr	r1, [r0, #0]
 800a6ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a6d2:	6001      	str	r1, [r0, #0]
 800a6d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6d6:	bf00      	nop
 800a6d8:	e000ed88 	.word	0xe000ed88

0800a6dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6e2:	f3ef 8305 	mrs	r3, IPSR
 800a6e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	d917      	bls.n	800a71e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a758 <vPortValidateInterruptPriority+0x7c>)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6f8:	4b18      	ldr	r3, [pc, #96]	@ (800a75c <vPortValidateInterruptPriority+0x80>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	7afa      	ldrb	r2, [r7, #11]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d20d      	bcs.n	800a71e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a706:	b672      	cpsid	i
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	b662      	cpsie	i
 800a716:	607b      	str	r3, [r7, #4]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a71e:	4b10      	ldr	r3, [pc, #64]	@ (800a760 <vPortValidateInterruptPriority+0x84>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a726:	4b0f      	ldr	r3, [pc, #60]	@ (800a764 <vPortValidateInterruptPriority+0x88>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d90d      	bls.n	800a74a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	b672      	cpsid	i
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	b662      	cpsie	i
 800a742:	603b      	str	r3, [r7, #0]
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	e7fd      	b.n	800a746 <vPortValidateInterruptPriority+0x6a>
	}
 800a74a:	bf00      	nop
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	e000e3f0 	.word	0xe000e3f0
 800a75c:	20002278 	.word	0x20002278
 800a760:	e000ed0c 	.word	0xe000ed0c
 800a764:	2000227c 	.word	0x2000227c

0800a768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08a      	sub	sp, #40	@ 0x28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a770:	2300      	movs	r3, #0
 800a772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a774:	f7fe fb8c 	bl	8008e90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a778:	4b5d      	ldr	r3, [pc, #372]	@ (800a8f0 <pvPortMalloc+0x188>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a780:	f000 f920 	bl	800a9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a784:	4b5b      	ldr	r3, [pc, #364]	@ (800a8f4 <pvPortMalloc+0x18c>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4013      	ands	r3, r2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 8094 	bne.w	800a8ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d020      	beq.n	800a7da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a798:	2208      	movs	r2, #8
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4413      	add	r3, r2
 800a79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d017      	beq.n	800a7da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f023 0307 	bic.w	r3, r3, #7
 800a7b0:	3308      	adds	r3, #8
 800a7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00d      	beq.n	800a7da <pvPortMalloc+0x72>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	b672      	cpsid	i
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	b662      	cpsie	i
 800a7d2:	617b      	str	r3, [r7, #20]
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d06c      	beq.n	800a8ba <pvPortMalloc+0x152>
 800a7e0:	4b45      	ldr	r3, [pc, #276]	@ (800a8f8 <pvPortMalloc+0x190>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d867      	bhi.n	800a8ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7ea:	4b44      	ldr	r3, [pc, #272]	@ (800a8fc <pvPortMalloc+0x194>)
 800a7ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7ee:	4b43      	ldr	r3, [pc, #268]	@ (800a8fc <pvPortMalloc+0x194>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7f4:	e004      	b.n	800a800 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d903      	bls.n	800a812 <pvPortMalloc+0xaa>
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1f1      	bne.n	800a7f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a812:	4b37      	ldr	r3, [pc, #220]	@ (800a8f0 <pvPortMalloc+0x188>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a818:	429a      	cmp	r2, r3
 800a81a:	d04e      	beq.n	800a8ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2208      	movs	r2, #8
 800a822:	4413      	add	r3, r2
 800a824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	1ad2      	subs	r2, r2, r3
 800a836:	2308      	movs	r3, #8
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d922      	bls.n	800a884 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4413      	add	r3, r2
 800a844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00d      	beq.n	800a86c <pvPortMalloc+0x104>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a854:	b672      	cpsid	i
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	b662      	cpsie	i
 800a864:	613b      	str	r3, [r7, #16]
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	e7fd      	b.n	800a868 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	1ad2      	subs	r2, r2, r3
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a87e:	69b8      	ldr	r0, [r7, #24]
 800a880:	f000 f902 	bl	800aa88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a884:	4b1c      	ldr	r3, [pc, #112]	@ (800a8f8 <pvPortMalloc+0x190>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8f8 <pvPortMalloc+0x190>)
 800a890:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a892:	4b19      	ldr	r3, [pc, #100]	@ (800a8f8 <pvPortMalloc+0x190>)
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	4b1a      	ldr	r3, [pc, #104]	@ (800a900 <pvPortMalloc+0x198>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d203      	bcs.n	800a8a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a89e:	4b16      	ldr	r3, [pc, #88]	@ (800a8f8 <pvPortMalloc+0x190>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a17      	ldr	r2, [pc, #92]	@ (800a900 <pvPortMalloc+0x198>)
 800a8a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	4b12      	ldr	r3, [pc, #72]	@ (800a8f4 <pvPortMalloc+0x18c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8ba:	f7fe faf7 	bl	8008eac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	f003 0307 	and.w	r3, r3, #7
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00d      	beq.n	800a8e4 <pvPortMalloc+0x17c>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	b672      	cpsid	i
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	b662      	cpsie	i
 800a8dc:	60fb      	str	r3, [r7, #12]
}
 800a8de:	bf00      	nop
 800a8e0:	bf00      	nop
 800a8e2:	e7fd      	b.n	800a8e0 <pvPortMalloc+0x178>
	return pvReturn;
 800a8e4:	69fb      	ldr	r3, [r7, #28]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3728      	adds	r7, #40	@ 0x28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20005e88 	.word	0x20005e88
 800a8f4:	20005e94 	.word	0x20005e94
 800a8f8:	20005e8c 	.word	0x20005e8c
 800a8fc:	20005e80 	.word	0x20005e80
 800a900:	20005e90 	.word	0x20005e90

0800a904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d04e      	beq.n	800a9b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a916:	2308      	movs	r3, #8
 800a918:	425b      	negs	r3, r3
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	4413      	add	r3, r2
 800a91e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	4b24      	ldr	r3, [pc, #144]	@ (800a9bc <vPortFree+0xb8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4013      	ands	r3, r2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10d      	bne.n	800a94e <vPortFree+0x4a>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a936:	b672      	cpsid	i
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	b662      	cpsie	i
 800a946:	60fb      	str	r3, [r7, #12]
}
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	e7fd      	b.n	800a94a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00d      	beq.n	800a972 <vPortFree+0x6e>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	b672      	cpsid	i
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	b662      	cpsie	i
 800a96a:	60bb      	str	r3, [r7, #8]
}
 800a96c:	bf00      	nop
 800a96e:	bf00      	nop
 800a970:	e7fd      	b.n	800a96e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b11      	ldr	r3, [pc, #68]	@ (800a9bc <vPortFree+0xb8>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4013      	ands	r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d019      	beq.n	800a9b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d115      	bne.n	800a9b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9bc <vPortFree+0xb8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	43db      	mvns	r3, r3
 800a992:	401a      	ands	r2, r3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a998:	f7fe fa7a 	bl	8008e90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4b07      	ldr	r3, [pc, #28]	@ (800a9c0 <vPortFree+0xbc>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	4a06      	ldr	r2, [pc, #24]	@ (800a9c0 <vPortFree+0xbc>)
 800a9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f000 f86c 	bl	800aa88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a9b0:	f7fe fa7c 	bl	8008eac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9b4:	bf00      	nop
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20005e94 	.word	0x20005e94
 800a9c0:	20005e8c 	.word	0x20005e8c

0800a9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9d0:	4b27      	ldr	r3, [pc, #156]	@ (800aa70 <prvHeapInit+0xac>)
 800a9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00c      	beq.n	800a9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3307      	adds	r3, #7
 800a9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0307 	bic.w	r3, r3, #7
 800a9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	4a1f      	ldr	r2, [pc, #124]	@ (800aa70 <prvHeapInit+0xac>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9fc:	4a1d      	ldr	r2, [pc, #116]	@ (800aa74 <prvHeapInit+0xb0>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa02:	4b1c      	ldr	r3, [pc, #112]	@ (800aa74 <prvHeapInit+0xb0>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa10:	2208      	movs	r2, #8
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f023 0307 	bic.w	r3, r3, #7
 800aa1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4a15      	ldr	r2, [pc, #84]	@ (800aa78 <prvHeapInit+0xb4>)
 800aa24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa26:	4b14      	ldr	r3, [pc, #80]	@ (800aa78 <prvHeapInit+0xb4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa2e:	4b12      	ldr	r3, [pc, #72]	@ (800aa78 <prvHeapInit+0xb4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa44:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <prvHeapInit+0xb4>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	@ (800aa7c <prvHeapInit+0xb8>)
 800aa52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4a09      	ldr	r2, [pc, #36]	@ (800aa80 <prvHeapInit+0xbc>)
 800aa5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa5c:	4b09      	ldr	r3, [pc, #36]	@ (800aa84 <prvHeapInit+0xc0>)
 800aa5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20002280 	.word	0x20002280
 800aa74:	20005e80 	.word	0x20005e80
 800aa78:	20005e88 	.word	0x20005e88
 800aa7c:	20005e90 	.word	0x20005e90
 800aa80:	20005e8c 	.word	0x20005e8c
 800aa84:	20005e94 	.word	0x20005e94

0800aa88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa90:	4b28      	ldr	r3, [pc, #160]	@ (800ab34 <prvInsertBlockIntoFreeList+0xac>)
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e002      	b.n	800aa9c <prvInsertBlockIntoFreeList+0x14>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d8f7      	bhi.n	800aa96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d108      	bne.n	800aaca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	441a      	add	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	441a      	add	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d118      	bne.n	800ab10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b15      	ldr	r3, [pc, #84]	@ (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d00d      	beq.n	800ab06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e008      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab06:	4b0c      	ldr	r3, [pc, #48]	@ (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	e003      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d002      	beq.n	800ab26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20005e80 	.word	0x20005e80
 800ab38:	20005e88 	.word	0x20005e88

0800ab3c <__cvt>:
 800ab3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	ec57 6b10 	vmov	r6, r7, d0
 800ab44:	2f00      	cmp	r7, #0
 800ab46:	460c      	mov	r4, r1
 800ab48:	4619      	mov	r1, r3
 800ab4a:	463b      	mov	r3, r7
 800ab4c:	bfbb      	ittet	lt
 800ab4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab52:	461f      	movlt	r7, r3
 800ab54:	2300      	movge	r3, #0
 800ab56:	232d      	movlt	r3, #45	@ 0x2d
 800ab58:	700b      	strb	r3, [r1, #0]
 800ab5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab60:	4691      	mov	r9, r2
 800ab62:	f023 0820 	bic.w	r8, r3, #32
 800ab66:	bfbc      	itt	lt
 800ab68:	4632      	movlt	r2, r6
 800ab6a:	4616      	movlt	r6, r2
 800ab6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab70:	d005      	beq.n	800ab7e <__cvt+0x42>
 800ab72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab76:	d100      	bne.n	800ab7a <__cvt+0x3e>
 800ab78:	3401      	adds	r4, #1
 800ab7a:	2102      	movs	r1, #2
 800ab7c:	e000      	b.n	800ab80 <__cvt+0x44>
 800ab7e:	2103      	movs	r1, #3
 800ab80:	ab03      	add	r3, sp, #12
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	ab02      	add	r3, sp, #8
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	ec47 6b10 	vmov	d0, r6, r7
 800ab8c:	4653      	mov	r3, sl
 800ab8e:	4622      	mov	r2, r4
 800ab90:	f001 f8ea 	bl	800bd68 <_dtoa_r>
 800ab94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab98:	4605      	mov	r5, r0
 800ab9a:	d119      	bne.n	800abd0 <__cvt+0x94>
 800ab9c:	f019 0f01 	tst.w	r9, #1
 800aba0:	d00e      	beq.n	800abc0 <__cvt+0x84>
 800aba2:	eb00 0904 	add.w	r9, r0, r4
 800aba6:	2200      	movs	r2, #0
 800aba8:	2300      	movs	r3, #0
 800abaa:	4630      	mov	r0, r6
 800abac:	4639      	mov	r1, r7
 800abae:	f7f5 ffbb 	bl	8000b28 <__aeabi_dcmpeq>
 800abb2:	b108      	cbz	r0, 800abb8 <__cvt+0x7c>
 800abb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800abb8:	2230      	movs	r2, #48	@ 0x30
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	454b      	cmp	r3, r9
 800abbe:	d31e      	bcc.n	800abfe <__cvt+0xc2>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abc4:	1b5b      	subs	r3, r3, r5
 800abc6:	4628      	mov	r0, r5
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	b004      	add	sp, #16
 800abcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abd4:	eb00 0904 	add.w	r9, r0, r4
 800abd8:	d1e5      	bne.n	800aba6 <__cvt+0x6a>
 800abda:	7803      	ldrb	r3, [r0, #0]
 800abdc:	2b30      	cmp	r3, #48	@ 0x30
 800abde:	d10a      	bne.n	800abf6 <__cvt+0xba>
 800abe0:	2200      	movs	r2, #0
 800abe2:	2300      	movs	r3, #0
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f7f5 ff9e 	bl	8000b28 <__aeabi_dcmpeq>
 800abec:	b918      	cbnz	r0, 800abf6 <__cvt+0xba>
 800abee:	f1c4 0401 	rsb	r4, r4, #1
 800abf2:	f8ca 4000 	str.w	r4, [sl]
 800abf6:	f8da 3000 	ldr.w	r3, [sl]
 800abfa:	4499      	add	r9, r3
 800abfc:	e7d3      	b.n	800aba6 <__cvt+0x6a>
 800abfe:	1c59      	adds	r1, r3, #1
 800ac00:	9103      	str	r1, [sp, #12]
 800ac02:	701a      	strb	r2, [r3, #0]
 800ac04:	e7d9      	b.n	800abba <__cvt+0x7e>

0800ac06 <__exponent>:
 800ac06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	bfba      	itte	lt
 800ac0c:	4249      	neglt	r1, r1
 800ac0e:	232d      	movlt	r3, #45	@ 0x2d
 800ac10:	232b      	movge	r3, #43	@ 0x2b
 800ac12:	2909      	cmp	r1, #9
 800ac14:	7002      	strb	r2, [r0, #0]
 800ac16:	7043      	strb	r3, [r0, #1]
 800ac18:	dd29      	ble.n	800ac6e <__exponent+0x68>
 800ac1a:	f10d 0307 	add.w	r3, sp, #7
 800ac1e:	461d      	mov	r5, r3
 800ac20:	270a      	movs	r7, #10
 800ac22:	461a      	mov	r2, r3
 800ac24:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac28:	fb07 1416 	mls	r4, r7, r6, r1
 800ac2c:	3430      	adds	r4, #48	@ 0x30
 800ac2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac32:	460c      	mov	r4, r1
 800ac34:	2c63      	cmp	r4, #99	@ 0x63
 800ac36:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	dcf1      	bgt.n	800ac22 <__exponent+0x1c>
 800ac3e:	3130      	adds	r1, #48	@ 0x30
 800ac40:	1e94      	subs	r4, r2, #2
 800ac42:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac46:	1c41      	adds	r1, r0, #1
 800ac48:	4623      	mov	r3, r4
 800ac4a:	42ab      	cmp	r3, r5
 800ac4c:	d30a      	bcc.n	800ac64 <__exponent+0x5e>
 800ac4e:	f10d 0309 	add.w	r3, sp, #9
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	42ac      	cmp	r4, r5
 800ac56:	bf88      	it	hi
 800ac58:	2300      	movhi	r3, #0
 800ac5a:	3302      	adds	r3, #2
 800ac5c:	4403      	add	r3, r0
 800ac5e:	1a18      	subs	r0, r3, r0
 800ac60:	b003      	add	sp, #12
 800ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac64:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac68:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac6c:	e7ed      	b.n	800ac4a <__exponent+0x44>
 800ac6e:	2330      	movs	r3, #48	@ 0x30
 800ac70:	3130      	adds	r1, #48	@ 0x30
 800ac72:	7083      	strb	r3, [r0, #2]
 800ac74:	70c1      	strb	r1, [r0, #3]
 800ac76:	1d03      	adds	r3, r0, #4
 800ac78:	e7f1      	b.n	800ac5e <__exponent+0x58>
	...

0800ac7c <_printf_float>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	b08d      	sub	sp, #52	@ 0x34
 800ac82:	460c      	mov	r4, r1
 800ac84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac88:	4616      	mov	r6, r2
 800ac8a:	461f      	mov	r7, r3
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	f000 ff01 	bl	800ba94 <_localeconv_r>
 800ac92:	6803      	ldr	r3, [r0, #0]
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f5 fb1a 	bl	80002d0 <strlen>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca0:	f8d8 3000 	ldr.w	r3, [r8]
 800aca4:	9005      	str	r0, [sp, #20]
 800aca6:	3307      	adds	r3, #7
 800aca8:	f023 0307 	bic.w	r3, r3, #7
 800acac:	f103 0208 	add.w	r2, r3, #8
 800acb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800acb4:	f8d4 b000 	ldr.w	fp, [r4]
 800acb8:	f8c8 2000 	str.w	r2, [r8]
 800acbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800acc4:	9307      	str	r3, [sp, #28]
 800acc6:	f8cd 8018 	str.w	r8, [sp, #24]
 800acca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800acce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acd2:	4b9c      	ldr	r3, [pc, #624]	@ (800af44 <_printf_float+0x2c8>)
 800acd4:	f04f 32ff 	mov.w	r2, #4294967295
 800acd8:	f7f5 ff58 	bl	8000b8c <__aeabi_dcmpun>
 800acdc:	bb70      	cbnz	r0, 800ad3c <_printf_float+0xc0>
 800acde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ace2:	4b98      	ldr	r3, [pc, #608]	@ (800af44 <_printf_float+0x2c8>)
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295
 800ace8:	f7f5 ff32 	bl	8000b50 <__aeabi_dcmple>
 800acec:	bb30      	cbnz	r0, 800ad3c <_printf_float+0xc0>
 800acee:	2200      	movs	r2, #0
 800acf0:	2300      	movs	r3, #0
 800acf2:	4640      	mov	r0, r8
 800acf4:	4649      	mov	r1, r9
 800acf6:	f7f5 ff21 	bl	8000b3c <__aeabi_dcmplt>
 800acfa:	b110      	cbz	r0, 800ad02 <_printf_float+0x86>
 800acfc:	232d      	movs	r3, #45	@ 0x2d
 800acfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad02:	4a91      	ldr	r2, [pc, #580]	@ (800af48 <_printf_float+0x2cc>)
 800ad04:	4b91      	ldr	r3, [pc, #580]	@ (800af4c <_printf_float+0x2d0>)
 800ad06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad0a:	bf94      	ite	ls
 800ad0c:	4690      	movls	r8, r2
 800ad0e:	4698      	movhi	r8, r3
 800ad10:	2303      	movs	r3, #3
 800ad12:	6123      	str	r3, [r4, #16]
 800ad14:	f02b 0304 	bic.w	r3, fp, #4
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	f04f 0900 	mov.w	r9, #0
 800ad1e:	9700      	str	r7, [sp, #0]
 800ad20:	4633      	mov	r3, r6
 800ad22:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad24:	4621      	mov	r1, r4
 800ad26:	4628      	mov	r0, r5
 800ad28:	f000 f9d2 	bl	800b0d0 <_printf_common>
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	f040 808d 	bne.w	800ae4c <_printf_float+0x1d0>
 800ad32:	f04f 30ff 	mov.w	r0, #4294967295
 800ad36:	b00d      	add	sp, #52	@ 0x34
 800ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	464b      	mov	r3, r9
 800ad40:	4640      	mov	r0, r8
 800ad42:	4649      	mov	r1, r9
 800ad44:	f7f5 ff22 	bl	8000b8c <__aeabi_dcmpun>
 800ad48:	b140      	cbz	r0, 800ad5c <_printf_float+0xe0>
 800ad4a:	464b      	mov	r3, r9
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bfbc      	itt	lt
 800ad50:	232d      	movlt	r3, #45	@ 0x2d
 800ad52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad56:	4a7e      	ldr	r2, [pc, #504]	@ (800af50 <_printf_float+0x2d4>)
 800ad58:	4b7e      	ldr	r3, [pc, #504]	@ (800af54 <_printf_float+0x2d8>)
 800ad5a:	e7d4      	b.n	800ad06 <_printf_float+0x8a>
 800ad5c:	6863      	ldr	r3, [r4, #4]
 800ad5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad62:	9206      	str	r2, [sp, #24]
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	d13b      	bne.n	800ade0 <_printf_float+0x164>
 800ad68:	2306      	movs	r3, #6
 800ad6a:	6063      	str	r3, [r4, #4]
 800ad6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad70:	2300      	movs	r3, #0
 800ad72:	6022      	str	r2, [r4, #0]
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad78:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad7c:	ab09      	add	r3, sp, #36	@ 0x24
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	6861      	ldr	r1, [r4, #4]
 800ad82:	ec49 8b10 	vmov	d0, r8, r9
 800ad86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f7ff fed6 	bl	800ab3c <__cvt>
 800ad90:	9b06      	ldr	r3, [sp, #24]
 800ad92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad94:	2b47      	cmp	r3, #71	@ 0x47
 800ad96:	4680      	mov	r8, r0
 800ad98:	d129      	bne.n	800adee <_printf_float+0x172>
 800ad9a:	1cc8      	adds	r0, r1, #3
 800ad9c:	db02      	blt.n	800ada4 <_printf_float+0x128>
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	4299      	cmp	r1, r3
 800ada2:	dd41      	ble.n	800ae28 <_printf_float+0x1ac>
 800ada4:	f1aa 0a02 	sub.w	sl, sl, #2
 800ada8:	fa5f fa8a 	uxtb.w	sl, sl
 800adac:	3901      	subs	r1, #1
 800adae:	4652      	mov	r2, sl
 800adb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800adb4:	9109      	str	r1, [sp, #36]	@ 0x24
 800adb6:	f7ff ff26 	bl	800ac06 <__exponent>
 800adba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adbc:	1813      	adds	r3, r2, r0
 800adbe:	2a01      	cmp	r2, #1
 800adc0:	4681      	mov	r9, r0
 800adc2:	6123      	str	r3, [r4, #16]
 800adc4:	dc02      	bgt.n	800adcc <_printf_float+0x150>
 800adc6:	6822      	ldr	r2, [r4, #0]
 800adc8:	07d2      	lsls	r2, r2, #31
 800adca:	d501      	bpl.n	800add0 <_printf_float+0x154>
 800adcc:	3301      	adds	r3, #1
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0a2      	beq.n	800ad1e <_printf_float+0xa2>
 800add8:	232d      	movs	r3, #45	@ 0x2d
 800adda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adde:	e79e      	b.n	800ad1e <_printf_float+0xa2>
 800ade0:	9a06      	ldr	r2, [sp, #24]
 800ade2:	2a47      	cmp	r2, #71	@ 0x47
 800ade4:	d1c2      	bne.n	800ad6c <_printf_float+0xf0>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1c0      	bne.n	800ad6c <_printf_float+0xf0>
 800adea:	2301      	movs	r3, #1
 800adec:	e7bd      	b.n	800ad6a <_printf_float+0xee>
 800adee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adf2:	d9db      	bls.n	800adac <_printf_float+0x130>
 800adf4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800adf8:	d118      	bne.n	800ae2c <_printf_float+0x1b0>
 800adfa:	2900      	cmp	r1, #0
 800adfc:	6863      	ldr	r3, [r4, #4]
 800adfe:	dd0b      	ble.n	800ae18 <_printf_float+0x19c>
 800ae00:	6121      	str	r1, [r4, #16]
 800ae02:	b913      	cbnz	r3, 800ae0a <_printf_float+0x18e>
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	07d0      	lsls	r0, r2, #31
 800ae08:	d502      	bpl.n	800ae10 <_printf_float+0x194>
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	440b      	add	r3, r1
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae12:	f04f 0900 	mov.w	r9, #0
 800ae16:	e7db      	b.n	800add0 <_printf_float+0x154>
 800ae18:	b913      	cbnz	r3, 800ae20 <_printf_float+0x1a4>
 800ae1a:	6822      	ldr	r2, [r4, #0]
 800ae1c:	07d2      	lsls	r2, r2, #31
 800ae1e:	d501      	bpl.n	800ae24 <_printf_float+0x1a8>
 800ae20:	3302      	adds	r3, #2
 800ae22:	e7f4      	b.n	800ae0e <_printf_float+0x192>
 800ae24:	2301      	movs	r3, #1
 800ae26:	e7f2      	b.n	800ae0e <_printf_float+0x192>
 800ae28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae2e:	4299      	cmp	r1, r3
 800ae30:	db05      	blt.n	800ae3e <_printf_float+0x1c2>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	6121      	str	r1, [r4, #16]
 800ae36:	07d8      	lsls	r0, r3, #31
 800ae38:	d5ea      	bpl.n	800ae10 <_printf_float+0x194>
 800ae3a:	1c4b      	adds	r3, r1, #1
 800ae3c:	e7e7      	b.n	800ae0e <_printf_float+0x192>
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	bfd4      	ite	le
 800ae42:	f1c1 0202 	rsble	r2, r1, #2
 800ae46:	2201      	movgt	r2, #1
 800ae48:	4413      	add	r3, r2
 800ae4a:	e7e0      	b.n	800ae0e <_printf_float+0x192>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	055a      	lsls	r2, r3, #21
 800ae50:	d407      	bmi.n	800ae62 <_printf_float+0x1e6>
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	4642      	mov	r2, r8
 800ae56:	4631      	mov	r1, r6
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b8      	blx	r7
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d12b      	bne.n	800aeb8 <_printf_float+0x23c>
 800ae60:	e767      	b.n	800ad32 <_printf_float+0xb6>
 800ae62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae66:	f240 80dd 	bls.w	800b024 <_printf_float+0x3a8>
 800ae6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2300      	movs	r3, #0
 800ae72:	f7f5 fe59 	bl	8000b28 <__aeabi_dcmpeq>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d033      	beq.n	800aee2 <_printf_float+0x266>
 800ae7a:	4a37      	ldr	r2, [pc, #220]	@ (800af58 <_printf_float+0x2dc>)
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	4631      	mov	r1, r6
 800ae80:	4628      	mov	r0, r5
 800ae82:	47b8      	blx	r7
 800ae84:	3001      	adds	r0, #1
 800ae86:	f43f af54 	beq.w	800ad32 <_printf_float+0xb6>
 800ae8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae8e:	4543      	cmp	r3, r8
 800ae90:	db02      	blt.n	800ae98 <_printf_float+0x21c>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	07d8      	lsls	r0, r3, #31
 800ae96:	d50f      	bpl.n	800aeb8 <_printf_float+0x23c>
 800ae98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f af45 	beq.w	800ad32 <_printf_float+0xb6>
 800aea8:	f04f 0900 	mov.w	r9, #0
 800aeac:	f108 38ff 	add.w	r8, r8, #4294967295
 800aeb0:	f104 0a1a 	add.w	sl, r4, #26
 800aeb4:	45c8      	cmp	r8, r9
 800aeb6:	dc09      	bgt.n	800aecc <_printf_float+0x250>
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	079b      	lsls	r3, r3, #30
 800aebc:	f100 8103 	bmi.w	800b0c6 <_printf_float+0x44a>
 800aec0:	68e0      	ldr	r0, [r4, #12]
 800aec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aec4:	4298      	cmp	r0, r3
 800aec6:	bfb8      	it	lt
 800aec8:	4618      	movlt	r0, r3
 800aeca:	e734      	b.n	800ad36 <_printf_float+0xba>
 800aecc:	2301      	movs	r3, #1
 800aece:	4652      	mov	r2, sl
 800aed0:	4631      	mov	r1, r6
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b8      	blx	r7
 800aed6:	3001      	adds	r0, #1
 800aed8:	f43f af2b 	beq.w	800ad32 <_printf_float+0xb6>
 800aedc:	f109 0901 	add.w	r9, r9, #1
 800aee0:	e7e8      	b.n	800aeb4 <_printf_float+0x238>
 800aee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	dc39      	bgt.n	800af5c <_printf_float+0x2e0>
 800aee8:	4a1b      	ldr	r2, [pc, #108]	@ (800af58 <_printf_float+0x2dc>)
 800aeea:	2301      	movs	r3, #1
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	f43f af1d 	beq.w	800ad32 <_printf_float+0xb6>
 800aef8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aefc:	ea59 0303 	orrs.w	r3, r9, r3
 800af00:	d102      	bne.n	800af08 <_printf_float+0x28c>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	07d9      	lsls	r1, r3, #31
 800af06:	d5d7      	bpl.n	800aeb8 <_printf_float+0x23c>
 800af08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	47b8      	blx	r7
 800af12:	3001      	adds	r0, #1
 800af14:	f43f af0d 	beq.w	800ad32 <_printf_float+0xb6>
 800af18:	f04f 0a00 	mov.w	sl, #0
 800af1c:	f104 0b1a 	add.w	fp, r4, #26
 800af20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af22:	425b      	negs	r3, r3
 800af24:	4553      	cmp	r3, sl
 800af26:	dc01      	bgt.n	800af2c <_printf_float+0x2b0>
 800af28:	464b      	mov	r3, r9
 800af2a:	e793      	b.n	800ae54 <_printf_float+0x1d8>
 800af2c:	2301      	movs	r3, #1
 800af2e:	465a      	mov	r2, fp
 800af30:	4631      	mov	r1, r6
 800af32:	4628      	mov	r0, r5
 800af34:	47b8      	blx	r7
 800af36:	3001      	adds	r0, #1
 800af38:	f43f aefb 	beq.w	800ad32 <_printf_float+0xb6>
 800af3c:	f10a 0a01 	add.w	sl, sl, #1
 800af40:	e7ee      	b.n	800af20 <_printf_float+0x2a4>
 800af42:	bf00      	nop
 800af44:	7fefffff 	.word	0x7fefffff
 800af48:	0800f600 	.word	0x0800f600
 800af4c:	0800f604 	.word	0x0800f604
 800af50:	0800f608 	.word	0x0800f608
 800af54:	0800f60c 	.word	0x0800f60c
 800af58:	0800f610 	.word	0x0800f610
 800af5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af62:	4553      	cmp	r3, sl
 800af64:	bfa8      	it	ge
 800af66:	4653      	movge	r3, sl
 800af68:	2b00      	cmp	r3, #0
 800af6a:	4699      	mov	r9, r3
 800af6c:	dc36      	bgt.n	800afdc <_printf_float+0x360>
 800af6e:	f04f 0b00 	mov.w	fp, #0
 800af72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af76:	f104 021a 	add.w	r2, r4, #26
 800af7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af7c:	9306      	str	r3, [sp, #24]
 800af7e:	eba3 0309 	sub.w	r3, r3, r9
 800af82:	455b      	cmp	r3, fp
 800af84:	dc31      	bgt.n	800afea <_printf_float+0x36e>
 800af86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af88:	459a      	cmp	sl, r3
 800af8a:	dc3a      	bgt.n	800b002 <_printf_float+0x386>
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	07da      	lsls	r2, r3, #31
 800af90:	d437      	bmi.n	800b002 <_printf_float+0x386>
 800af92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af94:	ebaa 0903 	sub.w	r9, sl, r3
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	ebaa 0303 	sub.w	r3, sl, r3
 800af9e:	4599      	cmp	r9, r3
 800afa0:	bfa8      	it	ge
 800afa2:	4699      	movge	r9, r3
 800afa4:	f1b9 0f00 	cmp.w	r9, #0
 800afa8:	dc33      	bgt.n	800b012 <_printf_float+0x396>
 800afaa:	f04f 0800 	mov.w	r8, #0
 800afae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afb2:	f104 0b1a 	add.w	fp, r4, #26
 800afb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb8:	ebaa 0303 	sub.w	r3, sl, r3
 800afbc:	eba3 0309 	sub.w	r3, r3, r9
 800afc0:	4543      	cmp	r3, r8
 800afc2:	f77f af79 	ble.w	800aeb8 <_printf_float+0x23c>
 800afc6:	2301      	movs	r3, #1
 800afc8:	465a      	mov	r2, fp
 800afca:	4631      	mov	r1, r6
 800afcc:	4628      	mov	r0, r5
 800afce:	47b8      	blx	r7
 800afd0:	3001      	adds	r0, #1
 800afd2:	f43f aeae 	beq.w	800ad32 <_printf_float+0xb6>
 800afd6:	f108 0801 	add.w	r8, r8, #1
 800afda:	e7ec      	b.n	800afb6 <_printf_float+0x33a>
 800afdc:	4642      	mov	r2, r8
 800afde:	4631      	mov	r1, r6
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b8      	blx	r7
 800afe4:	3001      	adds	r0, #1
 800afe6:	d1c2      	bne.n	800af6e <_printf_float+0x2f2>
 800afe8:	e6a3      	b.n	800ad32 <_printf_float+0xb6>
 800afea:	2301      	movs	r3, #1
 800afec:	4631      	mov	r1, r6
 800afee:	4628      	mov	r0, r5
 800aff0:	9206      	str	r2, [sp, #24]
 800aff2:	47b8      	blx	r7
 800aff4:	3001      	adds	r0, #1
 800aff6:	f43f ae9c 	beq.w	800ad32 <_printf_float+0xb6>
 800affa:	9a06      	ldr	r2, [sp, #24]
 800affc:	f10b 0b01 	add.w	fp, fp, #1
 800b000:	e7bb      	b.n	800af7a <_printf_float+0x2fe>
 800b002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	d1c0      	bne.n	800af92 <_printf_float+0x316>
 800b010:	e68f      	b.n	800ad32 <_printf_float+0xb6>
 800b012:	9a06      	ldr	r2, [sp, #24]
 800b014:	464b      	mov	r3, r9
 800b016:	4442      	add	r2, r8
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	d1c3      	bne.n	800afaa <_printf_float+0x32e>
 800b022:	e686      	b.n	800ad32 <_printf_float+0xb6>
 800b024:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b028:	f1ba 0f01 	cmp.w	sl, #1
 800b02c:	dc01      	bgt.n	800b032 <_printf_float+0x3b6>
 800b02e:	07db      	lsls	r3, r3, #31
 800b030:	d536      	bpl.n	800b0a0 <_printf_float+0x424>
 800b032:	2301      	movs	r3, #1
 800b034:	4642      	mov	r2, r8
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	f43f ae78 	beq.w	800ad32 <_printf_float+0xb6>
 800b042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f ae70 	beq.w	800ad32 <_printf_float+0xb6>
 800b052:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b056:	2200      	movs	r2, #0
 800b058:	2300      	movs	r3, #0
 800b05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b05e:	f7f5 fd63 	bl	8000b28 <__aeabi_dcmpeq>
 800b062:	b9c0      	cbnz	r0, 800b096 <_printf_float+0x41a>
 800b064:	4653      	mov	r3, sl
 800b066:	f108 0201 	add.w	r2, r8, #1
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b8      	blx	r7
 800b070:	3001      	adds	r0, #1
 800b072:	d10c      	bne.n	800b08e <_printf_float+0x412>
 800b074:	e65d      	b.n	800ad32 <_printf_float+0xb6>
 800b076:	2301      	movs	r3, #1
 800b078:	465a      	mov	r2, fp
 800b07a:	4631      	mov	r1, r6
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b8      	blx	r7
 800b080:	3001      	adds	r0, #1
 800b082:	f43f ae56 	beq.w	800ad32 <_printf_float+0xb6>
 800b086:	f108 0801 	add.w	r8, r8, #1
 800b08a:	45d0      	cmp	r8, sl
 800b08c:	dbf3      	blt.n	800b076 <_printf_float+0x3fa>
 800b08e:	464b      	mov	r3, r9
 800b090:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b094:	e6df      	b.n	800ae56 <_printf_float+0x1da>
 800b096:	f04f 0800 	mov.w	r8, #0
 800b09a:	f104 0b1a 	add.w	fp, r4, #26
 800b09e:	e7f4      	b.n	800b08a <_printf_float+0x40e>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	4642      	mov	r2, r8
 800b0a4:	e7e1      	b.n	800b06a <_printf_float+0x3ee>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	464a      	mov	r2, r9
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b8      	blx	r7
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	f43f ae3e 	beq.w	800ad32 <_printf_float+0xb6>
 800b0b6:	f108 0801 	add.w	r8, r8, #1
 800b0ba:	68e3      	ldr	r3, [r4, #12]
 800b0bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0be:	1a5b      	subs	r3, r3, r1
 800b0c0:	4543      	cmp	r3, r8
 800b0c2:	dcf0      	bgt.n	800b0a6 <_printf_float+0x42a>
 800b0c4:	e6fc      	b.n	800aec0 <_printf_float+0x244>
 800b0c6:	f04f 0800 	mov.w	r8, #0
 800b0ca:	f104 0919 	add.w	r9, r4, #25
 800b0ce:	e7f4      	b.n	800b0ba <_printf_float+0x43e>

0800b0d0 <_printf_common>:
 800b0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d4:	4616      	mov	r6, r2
 800b0d6:	4698      	mov	r8, r3
 800b0d8:	688a      	ldr	r2, [r1, #8]
 800b0da:	690b      	ldr	r3, [r1, #16]
 800b0dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	bfb8      	it	lt
 800b0e4:	4613      	movlt	r3, r2
 800b0e6:	6033      	str	r3, [r6, #0]
 800b0e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	b10a      	cbz	r2, 800b0f6 <_printf_common+0x26>
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	6033      	str	r3, [r6, #0]
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	0699      	lsls	r1, r3, #26
 800b0fa:	bf42      	ittt	mi
 800b0fc:	6833      	ldrmi	r3, [r6, #0]
 800b0fe:	3302      	addmi	r3, #2
 800b100:	6033      	strmi	r3, [r6, #0]
 800b102:	6825      	ldr	r5, [r4, #0]
 800b104:	f015 0506 	ands.w	r5, r5, #6
 800b108:	d106      	bne.n	800b118 <_printf_common+0x48>
 800b10a:	f104 0a19 	add.w	sl, r4, #25
 800b10e:	68e3      	ldr	r3, [r4, #12]
 800b110:	6832      	ldr	r2, [r6, #0]
 800b112:	1a9b      	subs	r3, r3, r2
 800b114:	42ab      	cmp	r3, r5
 800b116:	dc26      	bgt.n	800b166 <_printf_common+0x96>
 800b118:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b11c:	6822      	ldr	r2, [r4, #0]
 800b11e:	3b00      	subs	r3, #0
 800b120:	bf18      	it	ne
 800b122:	2301      	movne	r3, #1
 800b124:	0692      	lsls	r2, r2, #26
 800b126:	d42b      	bmi.n	800b180 <_printf_common+0xb0>
 800b128:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b12c:	4641      	mov	r1, r8
 800b12e:	4638      	mov	r0, r7
 800b130:	47c8      	blx	r9
 800b132:	3001      	adds	r0, #1
 800b134:	d01e      	beq.n	800b174 <_printf_common+0xa4>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	6922      	ldr	r2, [r4, #16]
 800b13a:	f003 0306 	and.w	r3, r3, #6
 800b13e:	2b04      	cmp	r3, #4
 800b140:	bf02      	ittt	eq
 800b142:	68e5      	ldreq	r5, [r4, #12]
 800b144:	6833      	ldreq	r3, [r6, #0]
 800b146:	1aed      	subeq	r5, r5, r3
 800b148:	68a3      	ldr	r3, [r4, #8]
 800b14a:	bf0c      	ite	eq
 800b14c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b150:	2500      	movne	r5, #0
 800b152:	4293      	cmp	r3, r2
 800b154:	bfc4      	itt	gt
 800b156:	1a9b      	subgt	r3, r3, r2
 800b158:	18ed      	addgt	r5, r5, r3
 800b15a:	2600      	movs	r6, #0
 800b15c:	341a      	adds	r4, #26
 800b15e:	42b5      	cmp	r5, r6
 800b160:	d11a      	bne.n	800b198 <_printf_common+0xc8>
 800b162:	2000      	movs	r0, #0
 800b164:	e008      	b.n	800b178 <_printf_common+0xa8>
 800b166:	2301      	movs	r3, #1
 800b168:	4652      	mov	r2, sl
 800b16a:	4641      	mov	r1, r8
 800b16c:	4638      	mov	r0, r7
 800b16e:	47c8      	blx	r9
 800b170:	3001      	adds	r0, #1
 800b172:	d103      	bne.n	800b17c <_printf_common+0xac>
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17c:	3501      	adds	r5, #1
 800b17e:	e7c6      	b.n	800b10e <_printf_common+0x3e>
 800b180:	18e1      	adds	r1, r4, r3
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	2030      	movs	r0, #48	@ 0x30
 800b186:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b18a:	4422      	add	r2, r4
 800b18c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b190:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b194:	3302      	adds	r3, #2
 800b196:	e7c7      	b.n	800b128 <_printf_common+0x58>
 800b198:	2301      	movs	r3, #1
 800b19a:	4622      	mov	r2, r4
 800b19c:	4641      	mov	r1, r8
 800b19e:	4638      	mov	r0, r7
 800b1a0:	47c8      	blx	r9
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	d0e6      	beq.n	800b174 <_printf_common+0xa4>
 800b1a6:	3601      	adds	r6, #1
 800b1a8:	e7d9      	b.n	800b15e <_printf_common+0x8e>
	...

0800b1ac <_printf_i>:
 800b1ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b0:	7e0f      	ldrb	r7, [r1, #24]
 800b1b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1b4:	2f78      	cmp	r7, #120	@ 0x78
 800b1b6:	4691      	mov	r9, r2
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	469a      	mov	sl, r3
 800b1be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1c2:	d807      	bhi.n	800b1d4 <_printf_i+0x28>
 800b1c4:	2f62      	cmp	r7, #98	@ 0x62
 800b1c6:	d80a      	bhi.n	800b1de <_printf_i+0x32>
 800b1c8:	2f00      	cmp	r7, #0
 800b1ca:	f000 80d2 	beq.w	800b372 <_printf_i+0x1c6>
 800b1ce:	2f58      	cmp	r7, #88	@ 0x58
 800b1d0:	f000 80b9 	beq.w	800b346 <_printf_i+0x19a>
 800b1d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1dc:	e03a      	b.n	800b254 <_printf_i+0xa8>
 800b1de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1e2:	2b15      	cmp	r3, #21
 800b1e4:	d8f6      	bhi.n	800b1d4 <_printf_i+0x28>
 800b1e6:	a101      	add	r1, pc, #4	@ (adr r1, 800b1ec <_printf_i+0x40>)
 800b1e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1ec:	0800b245 	.word	0x0800b245
 800b1f0:	0800b259 	.word	0x0800b259
 800b1f4:	0800b1d5 	.word	0x0800b1d5
 800b1f8:	0800b1d5 	.word	0x0800b1d5
 800b1fc:	0800b1d5 	.word	0x0800b1d5
 800b200:	0800b1d5 	.word	0x0800b1d5
 800b204:	0800b259 	.word	0x0800b259
 800b208:	0800b1d5 	.word	0x0800b1d5
 800b20c:	0800b1d5 	.word	0x0800b1d5
 800b210:	0800b1d5 	.word	0x0800b1d5
 800b214:	0800b1d5 	.word	0x0800b1d5
 800b218:	0800b359 	.word	0x0800b359
 800b21c:	0800b283 	.word	0x0800b283
 800b220:	0800b313 	.word	0x0800b313
 800b224:	0800b1d5 	.word	0x0800b1d5
 800b228:	0800b1d5 	.word	0x0800b1d5
 800b22c:	0800b37b 	.word	0x0800b37b
 800b230:	0800b1d5 	.word	0x0800b1d5
 800b234:	0800b283 	.word	0x0800b283
 800b238:	0800b1d5 	.word	0x0800b1d5
 800b23c:	0800b1d5 	.word	0x0800b1d5
 800b240:	0800b31b 	.word	0x0800b31b
 800b244:	6833      	ldr	r3, [r6, #0]
 800b246:	1d1a      	adds	r2, r3, #4
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6032      	str	r2, [r6, #0]
 800b24c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b250:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b254:	2301      	movs	r3, #1
 800b256:	e09d      	b.n	800b394 <_printf_i+0x1e8>
 800b258:	6833      	ldr	r3, [r6, #0]
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	1d19      	adds	r1, r3, #4
 800b25e:	6031      	str	r1, [r6, #0]
 800b260:	0606      	lsls	r6, r0, #24
 800b262:	d501      	bpl.n	800b268 <_printf_i+0xbc>
 800b264:	681d      	ldr	r5, [r3, #0]
 800b266:	e003      	b.n	800b270 <_printf_i+0xc4>
 800b268:	0645      	lsls	r5, r0, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0xb8>
 800b26c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b270:	2d00      	cmp	r5, #0
 800b272:	da03      	bge.n	800b27c <_printf_i+0xd0>
 800b274:	232d      	movs	r3, #45	@ 0x2d
 800b276:	426d      	negs	r5, r5
 800b278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b27c:	4859      	ldr	r0, [pc, #356]	@ (800b3e4 <_printf_i+0x238>)
 800b27e:	230a      	movs	r3, #10
 800b280:	e011      	b.n	800b2a6 <_printf_i+0xfa>
 800b282:	6821      	ldr	r1, [r4, #0]
 800b284:	6833      	ldr	r3, [r6, #0]
 800b286:	0608      	lsls	r0, r1, #24
 800b288:	f853 5b04 	ldr.w	r5, [r3], #4
 800b28c:	d402      	bmi.n	800b294 <_printf_i+0xe8>
 800b28e:	0649      	lsls	r1, r1, #25
 800b290:	bf48      	it	mi
 800b292:	b2ad      	uxthmi	r5, r5
 800b294:	2f6f      	cmp	r7, #111	@ 0x6f
 800b296:	4853      	ldr	r0, [pc, #332]	@ (800b3e4 <_printf_i+0x238>)
 800b298:	6033      	str	r3, [r6, #0]
 800b29a:	bf14      	ite	ne
 800b29c:	230a      	movne	r3, #10
 800b29e:	2308      	moveq	r3, #8
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2a6:	6866      	ldr	r6, [r4, #4]
 800b2a8:	60a6      	str	r6, [r4, #8]
 800b2aa:	2e00      	cmp	r6, #0
 800b2ac:	bfa2      	ittt	ge
 800b2ae:	6821      	ldrge	r1, [r4, #0]
 800b2b0:	f021 0104 	bicge.w	r1, r1, #4
 800b2b4:	6021      	strge	r1, [r4, #0]
 800b2b6:	b90d      	cbnz	r5, 800b2bc <_printf_i+0x110>
 800b2b8:	2e00      	cmp	r6, #0
 800b2ba:	d04b      	beq.n	800b354 <_printf_i+0x1a8>
 800b2bc:	4616      	mov	r6, r2
 800b2be:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2c2:	fb03 5711 	mls	r7, r3, r1, r5
 800b2c6:	5dc7      	ldrb	r7, [r0, r7]
 800b2c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2cc:	462f      	mov	r7, r5
 800b2ce:	42bb      	cmp	r3, r7
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	d9f4      	bls.n	800b2be <_printf_i+0x112>
 800b2d4:	2b08      	cmp	r3, #8
 800b2d6:	d10b      	bne.n	800b2f0 <_printf_i+0x144>
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	07df      	lsls	r7, r3, #31
 800b2dc:	d508      	bpl.n	800b2f0 <_printf_i+0x144>
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	6861      	ldr	r1, [r4, #4]
 800b2e2:	4299      	cmp	r1, r3
 800b2e4:	bfde      	ittt	le
 800b2e6:	2330      	movle	r3, #48	@ 0x30
 800b2e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2f0:	1b92      	subs	r2, r2, r6
 800b2f2:	6122      	str	r2, [r4, #16]
 800b2f4:	f8cd a000 	str.w	sl, [sp]
 800b2f8:	464b      	mov	r3, r9
 800b2fa:	aa03      	add	r2, sp, #12
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4640      	mov	r0, r8
 800b300:	f7ff fee6 	bl	800b0d0 <_printf_common>
 800b304:	3001      	adds	r0, #1
 800b306:	d14a      	bne.n	800b39e <_printf_i+0x1f2>
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	b004      	add	sp, #16
 800b30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	f043 0320 	orr.w	r3, r3, #32
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	4833      	ldr	r0, [pc, #204]	@ (800b3e8 <_printf_i+0x23c>)
 800b31c:	2778      	movs	r7, #120	@ 0x78
 800b31e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	6831      	ldr	r1, [r6, #0]
 800b326:	061f      	lsls	r7, r3, #24
 800b328:	f851 5b04 	ldr.w	r5, [r1], #4
 800b32c:	d402      	bmi.n	800b334 <_printf_i+0x188>
 800b32e:	065f      	lsls	r7, r3, #25
 800b330:	bf48      	it	mi
 800b332:	b2ad      	uxthmi	r5, r5
 800b334:	6031      	str	r1, [r6, #0]
 800b336:	07d9      	lsls	r1, r3, #31
 800b338:	bf44      	itt	mi
 800b33a:	f043 0320 	orrmi.w	r3, r3, #32
 800b33e:	6023      	strmi	r3, [r4, #0]
 800b340:	b11d      	cbz	r5, 800b34a <_printf_i+0x19e>
 800b342:	2310      	movs	r3, #16
 800b344:	e7ac      	b.n	800b2a0 <_printf_i+0xf4>
 800b346:	4827      	ldr	r0, [pc, #156]	@ (800b3e4 <_printf_i+0x238>)
 800b348:	e7e9      	b.n	800b31e <_printf_i+0x172>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	f023 0320 	bic.w	r3, r3, #32
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	e7f6      	b.n	800b342 <_printf_i+0x196>
 800b354:	4616      	mov	r6, r2
 800b356:	e7bd      	b.n	800b2d4 <_printf_i+0x128>
 800b358:	6833      	ldr	r3, [r6, #0]
 800b35a:	6825      	ldr	r5, [r4, #0]
 800b35c:	6961      	ldr	r1, [r4, #20]
 800b35e:	1d18      	adds	r0, r3, #4
 800b360:	6030      	str	r0, [r6, #0]
 800b362:	062e      	lsls	r6, r5, #24
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	d501      	bpl.n	800b36c <_printf_i+0x1c0>
 800b368:	6019      	str	r1, [r3, #0]
 800b36a:	e002      	b.n	800b372 <_printf_i+0x1c6>
 800b36c:	0668      	lsls	r0, r5, #25
 800b36e:	d5fb      	bpl.n	800b368 <_printf_i+0x1bc>
 800b370:	8019      	strh	r1, [r3, #0]
 800b372:	2300      	movs	r3, #0
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	4616      	mov	r6, r2
 800b378:	e7bc      	b.n	800b2f4 <_printf_i+0x148>
 800b37a:	6833      	ldr	r3, [r6, #0]
 800b37c:	1d1a      	adds	r2, r3, #4
 800b37e:	6032      	str	r2, [r6, #0]
 800b380:	681e      	ldr	r6, [r3, #0]
 800b382:	6862      	ldr	r2, [r4, #4]
 800b384:	2100      	movs	r1, #0
 800b386:	4630      	mov	r0, r6
 800b388:	f7f4 ff52 	bl	8000230 <memchr>
 800b38c:	b108      	cbz	r0, 800b392 <_printf_i+0x1e6>
 800b38e:	1b80      	subs	r0, r0, r6
 800b390:	6060      	str	r0, [r4, #4]
 800b392:	6863      	ldr	r3, [r4, #4]
 800b394:	6123      	str	r3, [r4, #16]
 800b396:	2300      	movs	r3, #0
 800b398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b39c:	e7aa      	b.n	800b2f4 <_printf_i+0x148>
 800b39e:	6923      	ldr	r3, [r4, #16]
 800b3a0:	4632      	mov	r2, r6
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	47d0      	blx	sl
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	d0ad      	beq.n	800b308 <_printf_i+0x15c>
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	079b      	lsls	r3, r3, #30
 800b3b0:	d413      	bmi.n	800b3da <_printf_i+0x22e>
 800b3b2:	68e0      	ldr	r0, [r4, #12]
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	4298      	cmp	r0, r3
 800b3b8:	bfb8      	it	lt
 800b3ba:	4618      	movlt	r0, r3
 800b3bc:	e7a6      	b.n	800b30c <_printf_i+0x160>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	47d0      	blx	sl
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d09d      	beq.n	800b308 <_printf_i+0x15c>
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	68e3      	ldr	r3, [r4, #12]
 800b3d0:	9903      	ldr	r1, [sp, #12]
 800b3d2:	1a5b      	subs	r3, r3, r1
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	dcf2      	bgt.n	800b3be <_printf_i+0x212>
 800b3d8:	e7eb      	b.n	800b3b2 <_printf_i+0x206>
 800b3da:	2500      	movs	r5, #0
 800b3dc:	f104 0619 	add.w	r6, r4, #25
 800b3e0:	e7f5      	b.n	800b3ce <_printf_i+0x222>
 800b3e2:	bf00      	nop
 800b3e4:	0800f612 	.word	0x0800f612
 800b3e8:	0800f623 	.word	0x0800f623

0800b3ec <_scanf_float>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	b087      	sub	sp, #28
 800b3f2:	4617      	mov	r7, r2
 800b3f4:	9303      	str	r3, [sp, #12]
 800b3f6:	688b      	ldr	r3, [r1, #8]
 800b3f8:	1e5a      	subs	r2, r3, #1
 800b3fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b3fe:	bf81      	itttt	hi
 800b400:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b404:	eb03 0b05 	addhi.w	fp, r3, r5
 800b408:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b40c:	608b      	strhi	r3, [r1, #8]
 800b40e:	680b      	ldr	r3, [r1, #0]
 800b410:	460a      	mov	r2, r1
 800b412:	f04f 0500 	mov.w	r5, #0
 800b416:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b41a:	f842 3b1c 	str.w	r3, [r2], #28
 800b41e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b422:	4680      	mov	r8, r0
 800b424:	460c      	mov	r4, r1
 800b426:	bf98      	it	ls
 800b428:	f04f 0b00 	movls.w	fp, #0
 800b42c:	9201      	str	r2, [sp, #4]
 800b42e:	4616      	mov	r6, r2
 800b430:	46aa      	mov	sl, r5
 800b432:	46a9      	mov	r9, r5
 800b434:	9502      	str	r5, [sp, #8]
 800b436:	68a2      	ldr	r2, [r4, #8]
 800b438:	b152      	cbz	r2, 800b450 <_scanf_float+0x64>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b4e      	cmp	r3, #78	@ 0x4e
 800b440:	d864      	bhi.n	800b50c <_scanf_float+0x120>
 800b442:	2b40      	cmp	r3, #64	@ 0x40
 800b444:	d83c      	bhi.n	800b4c0 <_scanf_float+0xd4>
 800b446:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b44a:	b2c8      	uxtb	r0, r1
 800b44c:	280e      	cmp	r0, #14
 800b44e:	d93a      	bls.n	800b4c6 <_scanf_float+0xda>
 800b450:	f1b9 0f00 	cmp.w	r9, #0
 800b454:	d003      	beq.n	800b45e <_scanf_float+0x72>
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b462:	f1ba 0f01 	cmp.w	sl, #1
 800b466:	f200 8117 	bhi.w	800b698 <_scanf_float+0x2ac>
 800b46a:	9b01      	ldr	r3, [sp, #4]
 800b46c:	429e      	cmp	r6, r3
 800b46e:	f200 8108 	bhi.w	800b682 <_scanf_float+0x296>
 800b472:	2001      	movs	r0, #1
 800b474:	b007      	add	sp, #28
 800b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b47e:	2a0d      	cmp	r2, #13
 800b480:	d8e6      	bhi.n	800b450 <_scanf_float+0x64>
 800b482:	a101      	add	r1, pc, #4	@ (adr r1, 800b488 <_scanf_float+0x9c>)
 800b484:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b488:	0800b5cf 	.word	0x0800b5cf
 800b48c:	0800b451 	.word	0x0800b451
 800b490:	0800b451 	.word	0x0800b451
 800b494:	0800b451 	.word	0x0800b451
 800b498:	0800b62f 	.word	0x0800b62f
 800b49c:	0800b607 	.word	0x0800b607
 800b4a0:	0800b451 	.word	0x0800b451
 800b4a4:	0800b451 	.word	0x0800b451
 800b4a8:	0800b5dd 	.word	0x0800b5dd
 800b4ac:	0800b451 	.word	0x0800b451
 800b4b0:	0800b451 	.word	0x0800b451
 800b4b4:	0800b451 	.word	0x0800b451
 800b4b8:	0800b451 	.word	0x0800b451
 800b4bc:	0800b595 	.word	0x0800b595
 800b4c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b4c4:	e7db      	b.n	800b47e <_scanf_float+0x92>
 800b4c6:	290e      	cmp	r1, #14
 800b4c8:	d8c2      	bhi.n	800b450 <_scanf_float+0x64>
 800b4ca:	a001      	add	r0, pc, #4	@ (adr r0, 800b4d0 <_scanf_float+0xe4>)
 800b4cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b4d0:	0800b585 	.word	0x0800b585
 800b4d4:	0800b451 	.word	0x0800b451
 800b4d8:	0800b585 	.word	0x0800b585
 800b4dc:	0800b61b 	.word	0x0800b61b
 800b4e0:	0800b451 	.word	0x0800b451
 800b4e4:	0800b52d 	.word	0x0800b52d
 800b4e8:	0800b56b 	.word	0x0800b56b
 800b4ec:	0800b56b 	.word	0x0800b56b
 800b4f0:	0800b56b 	.word	0x0800b56b
 800b4f4:	0800b56b 	.word	0x0800b56b
 800b4f8:	0800b56b 	.word	0x0800b56b
 800b4fc:	0800b56b 	.word	0x0800b56b
 800b500:	0800b56b 	.word	0x0800b56b
 800b504:	0800b56b 	.word	0x0800b56b
 800b508:	0800b56b 	.word	0x0800b56b
 800b50c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b50e:	d809      	bhi.n	800b524 <_scanf_float+0x138>
 800b510:	2b60      	cmp	r3, #96	@ 0x60
 800b512:	d8b2      	bhi.n	800b47a <_scanf_float+0x8e>
 800b514:	2b54      	cmp	r3, #84	@ 0x54
 800b516:	d07b      	beq.n	800b610 <_scanf_float+0x224>
 800b518:	2b59      	cmp	r3, #89	@ 0x59
 800b51a:	d199      	bne.n	800b450 <_scanf_float+0x64>
 800b51c:	2d07      	cmp	r5, #7
 800b51e:	d197      	bne.n	800b450 <_scanf_float+0x64>
 800b520:	2508      	movs	r5, #8
 800b522:	e02c      	b.n	800b57e <_scanf_float+0x192>
 800b524:	2b74      	cmp	r3, #116	@ 0x74
 800b526:	d073      	beq.n	800b610 <_scanf_float+0x224>
 800b528:	2b79      	cmp	r3, #121	@ 0x79
 800b52a:	e7f6      	b.n	800b51a <_scanf_float+0x12e>
 800b52c:	6821      	ldr	r1, [r4, #0]
 800b52e:	05c8      	lsls	r0, r1, #23
 800b530:	d51b      	bpl.n	800b56a <_scanf_float+0x17e>
 800b532:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b536:	6021      	str	r1, [r4, #0]
 800b538:	f109 0901 	add.w	r9, r9, #1
 800b53c:	f1bb 0f00 	cmp.w	fp, #0
 800b540:	d003      	beq.n	800b54a <_scanf_float+0x15e>
 800b542:	3201      	adds	r2, #1
 800b544:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b548:	60a2      	str	r2, [r4, #8]
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	60a3      	str	r3, [r4, #8]
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	3301      	adds	r3, #1
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3b01      	subs	r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
 800b55e:	f340 8087 	ble.w	800b670 <_scanf_float+0x284>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	e765      	b.n	800b436 <_scanf_float+0x4a>
 800b56a:	eb1a 0105 	adds.w	r1, sl, r5
 800b56e:	f47f af6f 	bne.w	800b450 <_scanf_float+0x64>
 800b572:	6822      	ldr	r2, [r4, #0]
 800b574:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b578:	6022      	str	r2, [r4, #0]
 800b57a:	460d      	mov	r5, r1
 800b57c:	468a      	mov	sl, r1
 800b57e:	f806 3b01 	strb.w	r3, [r6], #1
 800b582:	e7e2      	b.n	800b54a <_scanf_float+0x15e>
 800b584:	6822      	ldr	r2, [r4, #0]
 800b586:	0610      	lsls	r0, r2, #24
 800b588:	f57f af62 	bpl.w	800b450 <_scanf_float+0x64>
 800b58c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b590:	6022      	str	r2, [r4, #0]
 800b592:	e7f4      	b.n	800b57e <_scanf_float+0x192>
 800b594:	f1ba 0f00 	cmp.w	sl, #0
 800b598:	d10e      	bne.n	800b5b8 <_scanf_float+0x1cc>
 800b59a:	f1b9 0f00 	cmp.w	r9, #0
 800b59e:	d10e      	bne.n	800b5be <_scanf_float+0x1d2>
 800b5a0:	6822      	ldr	r2, [r4, #0]
 800b5a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5aa:	d108      	bne.n	800b5be <_scanf_float+0x1d2>
 800b5ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5b0:	6022      	str	r2, [r4, #0]
 800b5b2:	f04f 0a01 	mov.w	sl, #1
 800b5b6:	e7e2      	b.n	800b57e <_scanf_float+0x192>
 800b5b8:	f1ba 0f02 	cmp.w	sl, #2
 800b5bc:	d055      	beq.n	800b66a <_scanf_float+0x27e>
 800b5be:	2d01      	cmp	r5, #1
 800b5c0:	d002      	beq.n	800b5c8 <_scanf_float+0x1dc>
 800b5c2:	2d04      	cmp	r5, #4
 800b5c4:	f47f af44 	bne.w	800b450 <_scanf_float+0x64>
 800b5c8:	3501      	adds	r5, #1
 800b5ca:	b2ed      	uxtb	r5, r5
 800b5cc:	e7d7      	b.n	800b57e <_scanf_float+0x192>
 800b5ce:	f1ba 0f01 	cmp.w	sl, #1
 800b5d2:	f47f af3d 	bne.w	800b450 <_scanf_float+0x64>
 800b5d6:	f04f 0a02 	mov.w	sl, #2
 800b5da:	e7d0      	b.n	800b57e <_scanf_float+0x192>
 800b5dc:	b97d      	cbnz	r5, 800b5fe <_scanf_float+0x212>
 800b5de:	f1b9 0f00 	cmp.w	r9, #0
 800b5e2:	f47f af38 	bne.w	800b456 <_scanf_float+0x6a>
 800b5e6:	6822      	ldr	r2, [r4, #0]
 800b5e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5f0:	f040 8108 	bne.w	800b804 <_scanf_float+0x418>
 800b5f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5f8:	6022      	str	r2, [r4, #0]
 800b5fa:	2501      	movs	r5, #1
 800b5fc:	e7bf      	b.n	800b57e <_scanf_float+0x192>
 800b5fe:	2d03      	cmp	r5, #3
 800b600:	d0e2      	beq.n	800b5c8 <_scanf_float+0x1dc>
 800b602:	2d05      	cmp	r5, #5
 800b604:	e7de      	b.n	800b5c4 <_scanf_float+0x1d8>
 800b606:	2d02      	cmp	r5, #2
 800b608:	f47f af22 	bne.w	800b450 <_scanf_float+0x64>
 800b60c:	2503      	movs	r5, #3
 800b60e:	e7b6      	b.n	800b57e <_scanf_float+0x192>
 800b610:	2d06      	cmp	r5, #6
 800b612:	f47f af1d 	bne.w	800b450 <_scanf_float+0x64>
 800b616:	2507      	movs	r5, #7
 800b618:	e7b1      	b.n	800b57e <_scanf_float+0x192>
 800b61a:	6822      	ldr	r2, [r4, #0]
 800b61c:	0591      	lsls	r1, r2, #22
 800b61e:	f57f af17 	bpl.w	800b450 <_scanf_float+0x64>
 800b622:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b626:	6022      	str	r2, [r4, #0]
 800b628:	f8cd 9008 	str.w	r9, [sp, #8]
 800b62c:	e7a7      	b.n	800b57e <_scanf_float+0x192>
 800b62e:	6822      	ldr	r2, [r4, #0]
 800b630:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b634:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b638:	d006      	beq.n	800b648 <_scanf_float+0x25c>
 800b63a:	0550      	lsls	r0, r2, #21
 800b63c:	f57f af08 	bpl.w	800b450 <_scanf_float+0x64>
 800b640:	f1b9 0f00 	cmp.w	r9, #0
 800b644:	f000 80de 	beq.w	800b804 <_scanf_float+0x418>
 800b648:	0591      	lsls	r1, r2, #22
 800b64a:	bf58      	it	pl
 800b64c:	9902      	ldrpl	r1, [sp, #8]
 800b64e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b652:	bf58      	it	pl
 800b654:	eba9 0101 	subpl.w	r1, r9, r1
 800b658:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b65c:	bf58      	it	pl
 800b65e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b662:	6022      	str	r2, [r4, #0]
 800b664:	f04f 0900 	mov.w	r9, #0
 800b668:	e789      	b.n	800b57e <_scanf_float+0x192>
 800b66a:	f04f 0a03 	mov.w	sl, #3
 800b66e:	e786      	b.n	800b57e <_scanf_float+0x192>
 800b670:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b674:	4639      	mov	r1, r7
 800b676:	4640      	mov	r0, r8
 800b678:	4798      	blx	r3
 800b67a:	2800      	cmp	r0, #0
 800b67c:	f43f aedb 	beq.w	800b436 <_scanf_float+0x4a>
 800b680:	e6e6      	b.n	800b450 <_scanf_float+0x64>
 800b682:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b686:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b68a:	463a      	mov	r2, r7
 800b68c:	4640      	mov	r0, r8
 800b68e:	4798      	blx	r3
 800b690:	6923      	ldr	r3, [r4, #16]
 800b692:	3b01      	subs	r3, #1
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	e6e8      	b.n	800b46a <_scanf_float+0x7e>
 800b698:	1e6b      	subs	r3, r5, #1
 800b69a:	2b06      	cmp	r3, #6
 800b69c:	d824      	bhi.n	800b6e8 <_scanf_float+0x2fc>
 800b69e:	2d02      	cmp	r5, #2
 800b6a0:	d836      	bhi.n	800b710 <_scanf_float+0x324>
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	429e      	cmp	r6, r3
 800b6a6:	f67f aee4 	bls.w	800b472 <_scanf_float+0x86>
 800b6aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6b2:	463a      	mov	r2, r7
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4798      	blx	r3
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	6123      	str	r3, [r4, #16]
 800b6be:	e7f0      	b.n	800b6a2 <_scanf_float+0x2b6>
 800b6c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b6c8:	463a      	mov	r2, r7
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	4798      	blx	r3
 800b6ce:	6923      	ldr	r3, [r4, #16]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	6123      	str	r3, [r4, #16]
 800b6d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6d8:	fa5f fa8a 	uxtb.w	sl, sl
 800b6dc:	f1ba 0f02 	cmp.w	sl, #2
 800b6e0:	d1ee      	bne.n	800b6c0 <_scanf_float+0x2d4>
 800b6e2:	3d03      	subs	r5, #3
 800b6e4:	b2ed      	uxtb	r5, r5
 800b6e6:	1b76      	subs	r6, r6, r5
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	05da      	lsls	r2, r3, #23
 800b6ec:	d530      	bpl.n	800b750 <_scanf_float+0x364>
 800b6ee:	055b      	lsls	r3, r3, #21
 800b6f0:	d511      	bpl.n	800b716 <_scanf_float+0x32a>
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	429e      	cmp	r6, r3
 800b6f6:	f67f aebc 	bls.w	800b472 <_scanf_float+0x86>
 800b6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b702:	463a      	mov	r2, r7
 800b704:	4640      	mov	r0, r8
 800b706:	4798      	blx	r3
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	e7f0      	b.n	800b6f2 <_scanf_float+0x306>
 800b710:	46aa      	mov	sl, r5
 800b712:	46b3      	mov	fp, r6
 800b714:	e7de      	b.n	800b6d4 <_scanf_float+0x2e8>
 800b716:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	2965      	cmp	r1, #101	@ 0x65
 800b71e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b722:	f106 35ff 	add.w	r5, r6, #4294967295
 800b726:	6123      	str	r3, [r4, #16]
 800b728:	d00c      	beq.n	800b744 <_scanf_float+0x358>
 800b72a:	2945      	cmp	r1, #69	@ 0x45
 800b72c:	d00a      	beq.n	800b744 <_scanf_float+0x358>
 800b72e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b732:	463a      	mov	r2, r7
 800b734:	4640      	mov	r0, r8
 800b736:	4798      	blx	r3
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b73e:	3b01      	subs	r3, #1
 800b740:	1eb5      	subs	r5, r6, #2
 800b742:	6123      	str	r3, [r4, #16]
 800b744:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b748:	463a      	mov	r2, r7
 800b74a:	4640      	mov	r0, r8
 800b74c:	4798      	blx	r3
 800b74e:	462e      	mov	r6, r5
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	f012 0210 	ands.w	r2, r2, #16
 800b756:	d001      	beq.n	800b75c <_scanf_float+0x370>
 800b758:	2000      	movs	r0, #0
 800b75a:	e68b      	b.n	800b474 <_scanf_float+0x88>
 800b75c:	7032      	strb	r2, [r6, #0]
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b768:	d11c      	bne.n	800b7a4 <_scanf_float+0x3b8>
 800b76a:	9b02      	ldr	r3, [sp, #8]
 800b76c:	454b      	cmp	r3, r9
 800b76e:	eba3 0209 	sub.w	r2, r3, r9
 800b772:	d123      	bne.n	800b7bc <_scanf_float+0x3d0>
 800b774:	9901      	ldr	r1, [sp, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	4640      	mov	r0, r8
 800b77a:	f002 fc6d 	bl	800e058 <_strtod_r>
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	6821      	ldr	r1, [r4, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f011 0f02 	tst.w	r1, #2
 800b788:	ec57 6b10 	vmov	r6, r7, d0
 800b78c:	f103 0204 	add.w	r2, r3, #4
 800b790:	d01f      	beq.n	800b7d2 <_scanf_float+0x3e6>
 800b792:	9903      	ldr	r1, [sp, #12]
 800b794:	600a      	str	r2, [r1, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	e9c3 6700 	strd	r6, r7, [r3]
 800b79c:	68e3      	ldr	r3, [r4, #12]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	60e3      	str	r3, [r4, #12]
 800b7a2:	e7d9      	b.n	800b758 <_scanf_float+0x36c>
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0e4      	beq.n	800b774 <_scanf_float+0x388>
 800b7aa:	9905      	ldr	r1, [sp, #20]
 800b7ac:	230a      	movs	r3, #10
 800b7ae:	3101      	adds	r1, #1
 800b7b0:	4640      	mov	r0, r8
 800b7b2:	f002 fcd1 	bl	800e158 <_strtol_r>
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	9e05      	ldr	r6, [sp, #20]
 800b7ba:	1ac2      	subs	r2, r0, r3
 800b7bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b7c0:	429e      	cmp	r6, r3
 800b7c2:	bf28      	it	cs
 800b7c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b7c8:	4910      	ldr	r1, [pc, #64]	@ (800b80c <_scanf_float+0x420>)
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f000 f8e4 	bl	800b998 <siprintf>
 800b7d0:	e7d0      	b.n	800b774 <_scanf_float+0x388>
 800b7d2:	f011 0f04 	tst.w	r1, #4
 800b7d6:	9903      	ldr	r1, [sp, #12]
 800b7d8:	600a      	str	r2, [r1, #0]
 800b7da:	d1dc      	bne.n	800b796 <_scanf_float+0x3aa>
 800b7dc:	681d      	ldr	r5, [r3, #0]
 800b7de:	4632      	mov	r2, r6
 800b7e0:	463b      	mov	r3, r7
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f5 f9d1 	bl	8000b8c <__aeabi_dcmpun>
 800b7ea:	b128      	cbz	r0, 800b7f8 <_scanf_float+0x40c>
 800b7ec:	4808      	ldr	r0, [pc, #32]	@ (800b810 <_scanf_float+0x424>)
 800b7ee:	f000 fa2d 	bl	800bc4c <nanf>
 800b7f2:	ed85 0a00 	vstr	s0, [r5]
 800b7f6:	e7d1      	b.n	800b79c <_scanf_float+0x3b0>
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	f7f5 fa24 	bl	8000c48 <__aeabi_d2f>
 800b800:	6028      	str	r0, [r5, #0]
 800b802:	e7cb      	b.n	800b79c <_scanf_float+0x3b0>
 800b804:	f04f 0900 	mov.w	r9, #0
 800b808:	e629      	b.n	800b45e <_scanf_float+0x72>
 800b80a:	bf00      	nop
 800b80c:	0800f634 	.word	0x0800f634
 800b810:	0800f9cd 	.word	0x0800f9cd

0800b814 <std>:
 800b814:	2300      	movs	r3, #0
 800b816:	b510      	push	{r4, lr}
 800b818:	4604      	mov	r4, r0
 800b81a:	e9c0 3300 	strd	r3, r3, [r0]
 800b81e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b822:	6083      	str	r3, [r0, #8]
 800b824:	8181      	strh	r1, [r0, #12]
 800b826:	6643      	str	r3, [r0, #100]	@ 0x64
 800b828:	81c2      	strh	r2, [r0, #14]
 800b82a:	6183      	str	r3, [r0, #24]
 800b82c:	4619      	mov	r1, r3
 800b82e:	2208      	movs	r2, #8
 800b830:	305c      	adds	r0, #92	@ 0x5c
 800b832:	f000 f914 	bl	800ba5e <memset>
 800b836:	4b0d      	ldr	r3, [pc, #52]	@ (800b86c <std+0x58>)
 800b838:	6263      	str	r3, [r4, #36]	@ 0x24
 800b83a:	4b0d      	ldr	r3, [pc, #52]	@ (800b870 <std+0x5c>)
 800b83c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b83e:	4b0d      	ldr	r3, [pc, #52]	@ (800b874 <std+0x60>)
 800b840:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b842:	4b0d      	ldr	r3, [pc, #52]	@ (800b878 <std+0x64>)
 800b844:	6323      	str	r3, [r4, #48]	@ 0x30
 800b846:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <std+0x68>)
 800b848:	6224      	str	r4, [r4, #32]
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d006      	beq.n	800b85c <std+0x48>
 800b84e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b852:	4294      	cmp	r4, r2
 800b854:	d002      	beq.n	800b85c <std+0x48>
 800b856:	33d0      	adds	r3, #208	@ 0xd0
 800b858:	429c      	cmp	r4, r3
 800b85a:	d105      	bne.n	800b868 <std+0x54>
 800b85c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b864:	f000 b9e0 	b.w	800bc28 <__retarget_lock_init_recursive>
 800b868:	bd10      	pop	{r4, pc}
 800b86a:	bf00      	nop
 800b86c:	0800b9d9 	.word	0x0800b9d9
 800b870:	0800b9fb 	.word	0x0800b9fb
 800b874:	0800ba33 	.word	0x0800ba33
 800b878:	0800ba57 	.word	0x0800ba57
 800b87c:	20005e98 	.word	0x20005e98

0800b880 <stdio_exit_handler>:
 800b880:	4a02      	ldr	r2, [pc, #8]	@ (800b88c <stdio_exit_handler+0xc>)
 800b882:	4903      	ldr	r1, [pc, #12]	@ (800b890 <stdio_exit_handler+0x10>)
 800b884:	4803      	ldr	r0, [pc, #12]	@ (800b894 <stdio_exit_handler+0x14>)
 800b886:	f000 b869 	b.w	800b95c <_fwalk_sglue>
 800b88a:	bf00      	nop
 800b88c:	20000170 	.word	0x20000170
 800b890:	0800e515 	.word	0x0800e515
 800b894:	20000180 	.word	0x20000180

0800b898 <cleanup_stdio>:
 800b898:	6841      	ldr	r1, [r0, #4]
 800b89a:	4b0c      	ldr	r3, [pc, #48]	@ (800b8cc <cleanup_stdio+0x34>)
 800b89c:	4299      	cmp	r1, r3
 800b89e:	b510      	push	{r4, lr}
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	d001      	beq.n	800b8a8 <cleanup_stdio+0x10>
 800b8a4:	f002 fe36 	bl	800e514 <_fflush_r>
 800b8a8:	68a1      	ldr	r1, [r4, #8]
 800b8aa:	4b09      	ldr	r3, [pc, #36]	@ (800b8d0 <cleanup_stdio+0x38>)
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	d002      	beq.n	800b8b6 <cleanup_stdio+0x1e>
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f002 fe2f 	bl	800e514 <_fflush_r>
 800b8b6:	68e1      	ldr	r1, [r4, #12]
 800b8b8:	4b06      	ldr	r3, [pc, #24]	@ (800b8d4 <cleanup_stdio+0x3c>)
 800b8ba:	4299      	cmp	r1, r3
 800b8bc:	d004      	beq.n	800b8c8 <cleanup_stdio+0x30>
 800b8be:	4620      	mov	r0, r4
 800b8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c4:	f002 be26 	b.w	800e514 <_fflush_r>
 800b8c8:	bd10      	pop	{r4, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20005e98 	.word	0x20005e98
 800b8d0:	20005f00 	.word	0x20005f00
 800b8d4:	20005f68 	.word	0x20005f68

0800b8d8 <global_stdio_init.part.0>:
 800b8d8:	b510      	push	{r4, lr}
 800b8da:	4b0b      	ldr	r3, [pc, #44]	@ (800b908 <global_stdio_init.part.0+0x30>)
 800b8dc:	4c0b      	ldr	r4, [pc, #44]	@ (800b90c <global_stdio_init.part.0+0x34>)
 800b8de:	4a0c      	ldr	r2, [pc, #48]	@ (800b910 <global_stdio_init.part.0+0x38>)
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2104      	movs	r1, #4
 800b8e8:	f7ff ff94 	bl	800b814 <std>
 800b8ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	2109      	movs	r1, #9
 800b8f4:	f7ff ff8e 	bl	800b814 <std>
 800b8f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b8fc:	2202      	movs	r2, #2
 800b8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b902:	2112      	movs	r1, #18
 800b904:	f7ff bf86 	b.w	800b814 <std>
 800b908:	20005fd0 	.word	0x20005fd0
 800b90c:	20005e98 	.word	0x20005e98
 800b910:	0800b881 	.word	0x0800b881

0800b914 <__sfp_lock_acquire>:
 800b914:	4801      	ldr	r0, [pc, #4]	@ (800b91c <__sfp_lock_acquire+0x8>)
 800b916:	f000 b988 	b.w	800bc2a <__retarget_lock_acquire_recursive>
 800b91a:	bf00      	nop
 800b91c:	20005fd9 	.word	0x20005fd9

0800b920 <__sfp_lock_release>:
 800b920:	4801      	ldr	r0, [pc, #4]	@ (800b928 <__sfp_lock_release+0x8>)
 800b922:	f000 b983 	b.w	800bc2c <__retarget_lock_release_recursive>
 800b926:	bf00      	nop
 800b928:	20005fd9 	.word	0x20005fd9

0800b92c <__sinit>:
 800b92c:	b510      	push	{r4, lr}
 800b92e:	4604      	mov	r4, r0
 800b930:	f7ff fff0 	bl	800b914 <__sfp_lock_acquire>
 800b934:	6a23      	ldr	r3, [r4, #32]
 800b936:	b11b      	cbz	r3, 800b940 <__sinit+0x14>
 800b938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b93c:	f7ff bff0 	b.w	800b920 <__sfp_lock_release>
 800b940:	4b04      	ldr	r3, [pc, #16]	@ (800b954 <__sinit+0x28>)
 800b942:	6223      	str	r3, [r4, #32]
 800b944:	4b04      	ldr	r3, [pc, #16]	@ (800b958 <__sinit+0x2c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1f5      	bne.n	800b938 <__sinit+0xc>
 800b94c:	f7ff ffc4 	bl	800b8d8 <global_stdio_init.part.0>
 800b950:	e7f2      	b.n	800b938 <__sinit+0xc>
 800b952:	bf00      	nop
 800b954:	0800b899 	.word	0x0800b899
 800b958:	20005fd0 	.word	0x20005fd0

0800b95c <_fwalk_sglue>:
 800b95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b960:	4607      	mov	r7, r0
 800b962:	4688      	mov	r8, r1
 800b964:	4614      	mov	r4, r2
 800b966:	2600      	movs	r6, #0
 800b968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b96c:	f1b9 0901 	subs.w	r9, r9, #1
 800b970:	d505      	bpl.n	800b97e <_fwalk_sglue+0x22>
 800b972:	6824      	ldr	r4, [r4, #0]
 800b974:	2c00      	cmp	r4, #0
 800b976:	d1f7      	bne.n	800b968 <_fwalk_sglue+0xc>
 800b978:	4630      	mov	r0, r6
 800b97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d907      	bls.n	800b994 <_fwalk_sglue+0x38>
 800b984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b988:	3301      	adds	r3, #1
 800b98a:	d003      	beq.n	800b994 <_fwalk_sglue+0x38>
 800b98c:	4629      	mov	r1, r5
 800b98e:	4638      	mov	r0, r7
 800b990:	47c0      	blx	r8
 800b992:	4306      	orrs	r6, r0
 800b994:	3568      	adds	r5, #104	@ 0x68
 800b996:	e7e9      	b.n	800b96c <_fwalk_sglue+0x10>

0800b998 <siprintf>:
 800b998:	b40e      	push	{r1, r2, r3}
 800b99a:	b500      	push	{lr}
 800b99c:	b09c      	sub	sp, #112	@ 0x70
 800b99e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b9a0:	9002      	str	r0, [sp, #8]
 800b9a2:	9006      	str	r0, [sp, #24]
 800b9a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9a8:	4809      	ldr	r0, [pc, #36]	@ (800b9d0 <siprintf+0x38>)
 800b9aa:	9107      	str	r1, [sp, #28]
 800b9ac:	9104      	str	r1, [sp, #16]
 800b9ae:	4909      	ldr	r1, [pc, #36]	@ (800b9d4 <siprintf+0x3c>)
 800b9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b4:	9105      	str	r1, [sp, #20]
 800b9b6:	6800      	ldr	r0, [r0, #0]
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	a902      	add	r1, sp, #8
 800b9bc:	f002 fc2a 	bl	800e214 <_svfiprintf_r>
 800b9c0:	9b02      	ldr	r3, [sp, #8]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	b01c      	add	sp, #112	@ 0x70
 800b9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9cc:	b003      	add	sp, #12
 800b9ce:	4770      	bx	lr
 800b9d0:	2000017c 	.word	0x2000017c
 800b9d4:	ffff0208 	.word	0xffff0208

0800b9d8 <__sread>:
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	460c      	mov	r4, r1
 800b9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e0:	f000 f8d4 	bl	800bb8c <_read_r>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	bfab      	itete	ge
 800b9e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b9ec:	181b      	addge	r3, r3, r0
 800b9ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9f2:	bfac      	ite	ge
 800b9f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9f6:	81a3      	strhlt	r3, [r4, #12]
 800b9f8:	bd10      	pop	{r4, pc}

0800b9fa <__swrite>:
 800b9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9fe:	461f      	mov	r7, r3
 800ba00:	898b      	ldrh	r3, [r1, #12]
 800ba02:	05db      	lsls	r3, r3, #23
 800ba04:	4605      	mov	r5, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	4616      	mov	r6, r2
 800ba0a:	d505      	bpl.n	800ba18 <__swrite+0x1e>
 800ba0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba10:	2302      	movs	r3, #2
 800ba12:	2200      	movs	r2, #0
 800ba14:	f000 f8a8 	bl	800bb68 <_lseek_r>
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba22:	81a3      	strh	r3, [r4, #12]
 800ba24:	4632      	mov	r2, r6
 800ba26:	463b      	mov	r3, r7
 800ba28:	4628      	mov	r0, r5
 800ba2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2e:	f000 b8bf 	b.w	800bbb0 <_write_r>

0800ba32 <__sseek>:
 800ba32:	b510      	push	{r4, lr}
 800ba34:	460c      	mov	r4, r1
 800ba36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3a:	f000 f895 	bl	800bb68 <_lseek_r>
 800ba3e:	1c43      	adds	r3, r0, #1
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	bf15      	itete	ne
 800ba44:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba4e:	81a3      	strheq	r3, [r4, #12]
 800ba50:	bf18      	it	ne
 800ba52:	81a3      	strhne	r3, [r4, #12]
 800ba54:	bd10      	pop	{r4, pc}

0800ba56 <__sclose>:
 800ba56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5a:	f000 b81f 	b.w	800ba9c <_close_r>

0800ba5e <memset>:
 800ba5e:	4402      	add	r2, r0
 800ba60:	4603      	mov	r3, r0
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d100      	bne.n	800ba68 <memset+0xa>
 800ba66:	4770      	bx	lr
 800ba68:	f803 1b01 	strb.w	r1, [r3], #1
 800ba6c:	e7f9      	b.n	800ba62 <memset+0x4>
	...

0800ba70 <strupr>:
 800ba70:	b510      	push	{r4, lr}
 800ba72:	4c07      	ldr	r4, [pc, #28]	@ (800ba90 <strupr+0x20>)
 800ba74:	1e42      	subs	r2, r0, #1
 800ba76:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ba7a:	b903      	cbnz	r3, 800ba7e <strupr+0xe>
 800ba7c:	bd10      	pop	{r4, pc}
 800ba7e:	5ce1      	ldrb	r1, [r4, r3]
 800ba80:	f001 0103 	and.w	r1, r1, #3
 800ba84:	2902      	cmp	r1, #2
 800ba86:	bf08      	it	eq
 800ba88:	3b20      	subeq	r3, #32
 800ba8a:	7013      	strb	r3, [r2, #0]
 800ba8c:	e7f3      	b.n	800ba76 <strupr+0x6>
 800ba8e:	bf00      	nop
 800ba90:	0800f879 	.word	0x0800f879

0800ba94 <_localeconv_r>:
 800ba94:	4800      	ldr	r0, [pc, #0]	@ (800ba98 <_localeconv_r+0x4>)
 800ba96:	4770      	bx	lr
 800ba98:	200002bc 	.word	0x200002bc

0800ba9c <_close_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d06      	ldr	r5, [pc, #24]	@ (800bab8 <_close_r+0x1c>)
 800baa0:	2300      	movs	r3, #0
 800baa2:	4604      	mov	r4, r0
 800baa4:	4608      	mov	r0, r1
 800baa6:	602b      	str	r3, [r5, #0]
 800baa8:	f7f7 fc16 	bl	80032d8 <_close>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d102      	bne.n	800bab6 <_close_r+0x1a>
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	b103      	cbz	r3, 800bab6 <_close_r+0x1a>
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	20005fd4 	.word	0x20005fd4

0800babc <_reclaim_reent>:
 800babc:	4b29      	ldr	r3, [pc, #164]	@ (800bb64 <_reclaim_reent+0xa8>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4283      	cmp	r3, r0
 800bac2:	b570      	push	{r4, r5, r6, lr}
 800bac4:	4604      	mov	r4, r0
 800bac6:	d04b      	beq.n	800bb60 <_reclaim_reent+0xa4>
 800bac8:	69c3      	ldr	r3, [r0, #28]
 800baca:	b1ab      	cbz	r3, 800baf8 <_reclaim_reent+0x3c>
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	b16b      	cbz	r3, 800baec <_reclaim_reent+0x30>
 800bad0:	2500      	movs	r5, #0
 800bad2:	69e3      	ldr	r3, [r4, #28]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	5959      	ldr	r1, [r3, r5]
 800bad8:	2900      	cmp	r1, #0
 800bada:	d13b      	bne.n	800bb54 <_reclaim_reent+0x98>
 800badc:	3504      	adds	r5, #4
 800bade:	2d80      	cmp	r5, #128	@ 0x80
 800bae0:	d1f7      	bne.n	800bad2 <_reclaim_reent+0x16>
 800bae2:	69e3      	ldr	r3, [r4, #28]
 800bae4:	4620      	mov	r0, r4
 800bae6:	68d9      	ldr	r1, [r3, #12]
 800bae8:	f000 ff02 	bl	800c8f0 <_free_r>
 800baec:	69e3      	ldr	r3, [r4, #28]
 800baee:	6819      	ldr	r1, [r3, #0]
 800baf0:	b111      	cbz	r1, 800baf8 <_reclaim_reent+0x3c>
 800baf2:	4620      	mov	r0, r4
 800baf4:	f000 fefc 	bl	800c8f0 <_free_r>
 800baf8:	6961      	ldr	r1, [r4, #20]
 800bafa:	b111      	cbz	r1, 800bb02 <_reclaim_reent+0x46>
 800bafc:	4620      	mov	r0, r4
 800bafe:	f000 fef7 	bl	800c8f0 <_free_r>
 800bb02:	69e1      	ldr	r1, [r4, #28]
 800bb04:	b111      	cbz	r1, 800bb0c <_reclaim_reent+0x50>
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 fef2 	bl	800c8f0 <_free_r>
 800bb0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bb0e:	b111      	cbz	r1, 800bb16 <_reclaim_reent+0x5a>
 800bb10:	4620      	mov	r0, r4
 800bb12:	f000 feed 	bl	800c8f0 <_free_r>
 800bb16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb18:	b111      	cbz	r1, 800bb20 <_reclaim_reent+0x64>
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fee8 	bl	800c8f0 <_free_r>
 800bb20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bb22:	b111      	cbz	r1, 800bb2a <_reclaim_reent+0x6e>
 800bb24:	4620      	mov	r0, r4
 800bb26:	f000 fee3 	bl	800c8f0 <_free_r>
 800bb2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bb2c:	b111      	cbz	r1, 800bb34 <_reclaim_reent+0x78>
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 fede 	bl	800c8f0 <_free_r>
 800bb34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bb36:	b111      	cbz	r1, 800bb3e <_reclaim_reent+0x82>
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fed9 	bl	800c8f0 <_free_r>
 800bb3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bb40:	b111      	cbz	r1, 800bb48 <_reclaim_reent+0x8c>
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 fed4 	bl	800c8f0 <_free_r>
 800bb48:	6a23      	ldr	r3, [r4, #32]
 800bb4a:	b14b      	cbz	r3, 800bb60 <_reclaim_reent+0xa4>
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb52:	4718      	bx	r3
 800bb54:	680e      	ldr	r6, [r1, #0]
 800bb56:	4620      	mov	r0, r4
 800bb58:	f000 feca 	bl	800c8f0 <_free_r>
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	e7bb      	b.n	800bad8 <_reclaim_reent+0x1c>
 800bb60:	bd70      	pop	{r4, r5, r6, pc}
 800bb62:	bf00      	nop
 800bb64:	2000017c 	.word	0x2000017c

0800bb68 <_lseek_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d07      	ldr	r5, [pc, #28]	@ (800bb88 <_lseek_r+0x20>)
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	4608      	mov	r0, r1
 800bb70:	4611      	mov	r1, r2
 800bb72:	2200      	movs	r2, #0
 800bb74:	602a      	str	r2, [r5, #0]
 800bb76:	461a      	mov	r2, r3
 800bb78:	f7f7 fbd5 	bl	8003326 <_lseek>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d102      	bne.n	800bb86 <_lseek_r+0x1e>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	b103      	cbz	r3, 800bb86 <_lseek_r+0x1e>
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	bd38      	pop	{r3, r4, r5, pc}
 800bb88:	20005fd4 	.word	0x20005fd4

0800bb8c <_read_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	@ (800bbac <_read_r+0x20>)
 800bb90:	4604      	mov	r4, r0
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	602a      	str	r2, [r5, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f7f7 fb63 	bl	8003266 <_read>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_read_r+0x1e>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_read_r+0x1e>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	20005fd4 	.word	0x20005fd4

0800bbb0 <_write_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d07      	ldr	r5, [pc, #28]	@ (800bbd0 <_write_r+0x20>)
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	4608      	mov	r0, r1
 800bbb8:	4611      	mov	r1, r2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f7f7 fb6e 	bl	80032a0 <_write>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_write_r+0x1e>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_write_r+0x1e>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20005fd4 	.word	0x20005fd4

0800bbd4 <__errno>:
 800bbd4:	4b01      	ldr	r3, [pc, #4]	@ (800bbdc <__errno+0x8>)
 800bbd6:	6818      	ldr	r0, [r3, #0]
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	2000017c 	.word	0x2000017c

0800bbe0 <__libc_init_array>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	4d0d      	ldr	r5, [pc, #52]	@ (800bc18 <__libc_init_array+0x38>)
 800bbe4:	4c0d      	ldr	r4, [pc, #52]	@ (800bc1c <__libc_init_array+0x3c>)
 800bbe6:	1b64      	subs	r4, r4, r5
 800bbe8:	10a4      	asrs	r4, r4, #2
 800bbea:	2600      	movs	r6, #0
 800bbec:	42a6      	cmp	r6, r4
 800bbee:	d109      	bne.n	800bc04 <__libc_init_array+0x24>
 800bbf0:	4d0b      	ldr	r5, [pc, #44]	@ (800bc20 <__libc_init_array+0x40>)
 800bbf2:	4c0c      	ldr	r4, [pc, #48]	@ (800bc24 <__libc_init_array+0x44>)
 800bbf4:	f003 fb72 	bl	800f2dc <_init>
 800bbf8:	1b64      	subs	r4, r4, r5
 800bbfa:	10a4      	asrs	r4, r4, #2
 800bbfc:	2600      	movs	r6, #0
 800bbfe:	42a6      	cmp	r6, r4
 800bc00:	d105      	bne.n	800bc0e <__libc_init_array+0x2e>
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc08:	4798      	blx	r3
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	e7ee      	b.n	800bbec <__libc_init_array+0xc>
 800bc0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc12:	4798      	blx	r3
 800bc14:	3601      	adds	r6, #1
 800bc16:	e7f2      	b.n	800bbfe <__libc_init_array+0x1e>
 800bc18:	0800fa38 	.word	0x0800fa38
 800bc1c:	0800fa38 	.word	0x0800fa38
 800bc20:	0800fa38 	.word	0x0800fa38
 800bc24:	0800fa3c 	.word	0x0800fa3c

0800bc28 <__retarget_lock_init_recursive>:
 800bc28:	4770      	bx	lr

0800bc2a <__retarget_lock_acquire_recursive>:
 800bc2a:	4770      	bx	lr

0800bc2c <__retarget_lock_release_recursive>:
 800bc2c:	4770      	bx	lr

0800bc2e <memcpy>:
 800bc2e:	440a      	add	r2, r1
 800bc30:	4291      	cmp	r1, r2
 800bc32:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc36:	d100      	bne.n	800bc3a <memcpy+0xc>
 800bc38:	4770      	bx	lr
 800bc3a:	b510      	push	{r4, lr}
 800bc3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc44:	4291      	cmp	r1, r2
 800bc46:	d1f9      	bne.n	800bc3c <memcpy+0xe>
 800bc48:	bd10      	pop	{r4, pc}
	...

0800bc4c <nanf>:
 800bc4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc54 <nanf+0x8>
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	7fc00000 	.word	0x7fc00000

0800bc58 <quorem>:
 800bc58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	6903      	ldr	r3, [r0, #16]
 800bc5e:	690c      	ldr	r4, [r1, #16]
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	4607      	mov	r7, r0
 800bc64:	db7e      	blt.n	800bd64 <quorem+0x10c>
 800bc66:	3c01      	subs	r4, #1
 800bc68:	f101 0814 	add.w	r8, r1, #20
 800bc6c:	00a3      	lsls	r3, r4, #2
 800bc6e:	f100 0514 	add.w	r5, r0, #20
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc82:	3301      	adds	r3, #1
 800bc84:	429a      	cmp	r2, r3
 800bc86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc8a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc8e:	d32e      	bcc.n	800bcee <quorem+0x96>
 800bc90:	f04f 0a00 	mov.w	sl, #0
 800bc94:	46c4      	mov	ip, r8
 800bc96:	46ae      	mov	lr, r5
 800bc98:	46d3      	mov	fp, sl
 800bc9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc9e:	b298      	uxth	r0, r3
 800bca0:	fb06 a000 	mla	r0, r6, r0, sl
 800bca4:	0c02      	lsrs	r2, r0, #16
 800bca6:	0c1b      	lsrs	r3, r3, #16
 800bca8:	fb06 2303 	mla	r3, r6, r3, r2
 800bcac:	f8de 2000 	ldr.w	r2, [lr]
 800bcb0:	b280      	uxth	r0, r0
 800bcb2:	b292      	uxth	r2, r2
 800bcb4:	1a12      	subs	r2, r2, r0
 800bcb6:	445a      	add	r2, fp
 800bcb8:	f8de 0000 	ldr.w	r0, [lr]
 800bcbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bcc6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bcca:	b292      	uxth	r2, r2
 800bccc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bcd0:	45e1      	cmp	r9, ip
 800bcd2:	f84e 2b04 	str.w	r2, [lr], #4
 800bcd6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bcda:	d2de      	bcs.n	800bc9a <quorem+0x42>
 800bcdc:	9b00      	ldr	r3, [sp, #0]
 800bcde:	58eb      	ldr	r3, [r5, r3]
 800bce0:	b92b      	cbnz	r3, 800bcee <quorem+0x96>
 800bce2:	9b01      	ldr	r3, [sp, #4]
 800bce4:	3b04      	subs	r3, #4
 800bce6:	429d      	cmp	r5, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	d32f      	bcc.n	800bd4c <quorem+0xf4>
 800bcec:	613c      	str	r4, [r7, #16]
 800bcee:	4638      	mov	r0, r7
 800bcf0:	f001 f9c2 	bl	800d078 <__mcmp>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	db25      	blt.n	800bd44 <quorem+0xec>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd00:	f8d1 c000 	ldr.w	ip, [r1]
 800bd04:	fa1f fe82 	uxth.w	lr, r2
 800bd08:	fa1f f38c 	uxth.w	r3, ip
 800bd0c:	eba3 030e 	sub.w	r3, r3, lr
 800bd10:	4403      	add	r3, r0
 800bd12:	0c12      	lsrs	r2, r2, #16
 800bd14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd22:	45c1      	cmp	r9, r8
 800bd24:	f841 3b04 	str.w	r3, [r1], #4
 800bd28:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd2c:	d2e6      	bcs.n	800bcfc <quorem+0xa4>
 800bd2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd36:	b922      	cbnz	r2, 800bd42 <quorem+0xea>
 800bd38:	3b04      	subs	r3, #4
 800bd3a:	429d      	cmp	r5, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	d30b      	bcc.n	800bd58 <quorem+0x100>
 800bd40:	613c      	str	r4, [r7, #16]
 800bd42:	3601      	adds	r6, #1
 800bd44:	4630      	mov	r0, r6
 800bd46:	b003      	add	sp, #12
 800bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4c:	6812      	ldr	r2, [r2, #0]
 800bd4e:	3b04      	subs	r3, #4
 800bd50:	2a00      	cmp	r2, #0
 800bd52:	d1cb      	bne.n	800bcec <quorem+0x94>
 800bd54:	3c01      	subs	r4, #1
 800bd56:	e7c6      	b.n	800bce6 <quorem+0x8e>
 800bd58:	6812      	ldr	r2, [r2, #0]
 800bd5a:	3b04      	subs	r3, #4
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	d1ef      	bne.n	800bd40 <quorem+0xe8>
 800bd60:	3c01      	subs	r4, #1
 800bd62:	e7ea      	b.n	800bd3a <quorem+0xe2>
 800bd64:	2000      	movs	r0, #0
 800bd66:	e7ee      	b.n	800bd46 <quorem+0xee>

0800bd68 <_dtoa_r>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	69c7      	ldr	r7, [r0, #28]
 800bd6e:	b099      	sub	sp, #100	@ 0x64
 800bd70:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd74:	ec55 4b10 	vmov	r4, r5, d0
 800bd78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bd7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd7c:	4683      	mov	fp, r0
 800bd7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd82:	b97f      	cbnz	r7, 800bda4 <_dtoa_r+0x3c>
 800bd84:	2010      	movs	r0, #16
 800bd86:	f000 fdfd 	bl	800c984 <malloc>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd90:	b920      	cbnz	r0, 800bd9c <_dtoa_r+0x34>
 800bd92:	4ba7      	ldr	r3, [pc, #668]	@ (800c030 <_dtoa_r+0x2c8>)
 800bd94:	21ef      	movs	r1, #239	@ 0xef
 800bd96:	48a7      	ldr	r0, [pc, #668]	@ (800c034 <_dtoa_r+0x2cc>)
 800bd98:	f002 fc2a 	bl	800e5f0 <__assert_func>
 800bd9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bda0:	6007      	str	r7, [r0, #0]
 800bda2:	60c7      	str	r7, [r0, #12]
 800bda4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bda8:	6819      	ldr	r1, [r3, #0]
 800bdaa:	b159      	cbz	r1, 800bdc4 <_dtoa_r+0x5c>
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	604a      	str	r2, [r1, #4]
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	4093      	lsls	r3, r2
 800bdb4:	608b      	str	r3, [r1, #8]
 800bdb6:	4658      	mov	r0, fp
 800bdb8:	f000 feda 	bl	800cb70 <_Bfree>
 800bdbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	1e2b      	subs	r3, r5, #0
 800bdc6:	bfb9      	ittee	lt
 800bdc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bdcc:	9303      	strlt	r3, [sp, #12]
 800bdce:	2300      	movge	r3, #0
 800bdd0:	6033      	strge	r3, [r6, #0]
 800bdd2:	9f03      	ldr	r7, [sp, #12]
 800bdd4:	4b98      	ldr	r3, [pc, #608]	@ (800c038 <_dtoa_r+0x2d0>)
 800bdd6:	bfbc      	itt	lt
 800bdd8:	2201      	movlt	r2, #1
 800bdda:	6032      	strlt	r2, [r6, #0]
 800bddc:	43bb      	bics	r3, r7
 800bdde:	d112      	bne.n	800be06 <_dtoa_r+0x9e>
 800bde0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bde2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdec:	4323      	orrs	r3, r4
 800bdee:	f000 854d 	beq.w	800c88c <_dtoa_r+0xb24>
 800bdf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c04c <_dtoa_r+0x2e4>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 854f 	beq.w	800c89c <_dtoa_r+0xb34>
 800bdfe:	f10a 0303 	add.w	r3, sl, #3
 800be02:	f000 bd49 	b.w	800c898 <_dtoa_r+0xb30>
 800be06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be0a:	2200      	movs	r2, #0
 800be0c:	ec51 0b17 	vmov	r0, r1, d7
 800be10:	2300      	movs	r3, #0
 800be12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800be16:	f7f4 fe87 	bl	8000b28 <__aeabi_dcmpeq>
 800be1a:	4680      	mov	r8, r0
 800be1c:	b158      	cbz	r0, 800be36 <_dtoa_r+0xce>
 800be1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be20:	2301      	movs	r3, #1
 800be22:	6013      	str	r3, [r2, #0]
 800be24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be26:	b113      	cbz	r3, 800be2e <_dtoa_r+0xc6>
 800be28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800be2a:	4b84      	ldr	r3, [pc, #528]	@ (800c03c <_dtoa_r+0x2d4>)
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c050 <_dtoa_r+0x2e8>
 800be32:	f000 bd33 	b.w	800c89c <_dtoa_r+0xb34>
 800be36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be3a:	aa16      	add	r2, sp, #88	@ 0x58
 800be3c:	a917      	add	r1, sp, #92	@ 0x5c
 800be3e:	4658      	mov	r0, fp
 800be40:	f001 fa3a 	bl	800d2b8 <__d2b>
 800be44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800be48:	4681      	mov	r9, r0
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	d077      	beq.n	800bf3e <_dtoa_r+0x1d6>
 800be4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800be54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be68:	4619      	mov	r1, r3
 800be6a:	2200      	movs	r2, #0
 800be6c:	4b74      	ldr	r3, [pc, #464]	@ (800c040 <_dtoa_r+0x2d8>)
 800be6e:	f7f4 fa3b 	bl	80002e8 <__aeabi_dsub>
 800be72:	a369      	add	r3, pc, #420	@ (adr r3, 800c018 <_dtoa_r+0x2b0>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fbee 	bl	8000658 <__aeabi_dmul>
 800be7c:	a368      	add	r3, pc, #416	@ (adr r3, 800c020 <_dtoa_r+0x2b8>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 fa33 	bl	80002ec <__adddf3>
 800be86:	4604      	mov	r4, r0
 800be88:	4630      	mov	r0, r6
 800be8a:	460d      	mov	r5, r1
 800be8c:	f7f4 fb7a 	bl	8000584 <__aeabi_i2d>
 800be90:	a365      	add	r3, pc, #404	@ (adr r3, 800c028 <_dtoa_r+0x2c0>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f7f4 fbdf 	bl	8000658 <__aeabi_dmul>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4620      	mov	r0, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7f4 fa23 	bl	80002ec <__adddf3>
 800bea6:	4604      	mov	r4, r0
 800bea8:	460d      	mov	r5, r1
 800beaa:	f7f4 fe85 	bl	8000bb8 <__aeabi_d2iz>
 800beae:	2200      	movs	r2, #0
 800beb0:	4607      	mov	r7, r0
 800beb2:	2300      	movs	r3, #0
 800beb4:	4620      	mov	r0, r4
 800beb6:	4629      	mov	r1, r5
 800beb8:	f7f4 fe40 	bl	8000b3c <__aeabi_dcmplt>
 800bebc:	b140      	cbz	r0, 800bed0 <_dtoa_r+0x168>
 800bebe:	4638      	mov	r0, r7
 800bec0:	f7f4 fb60 	bl	8000584 <__aeabi_i2d>
 800bec4:	4622      	mov	r2, r4
 800bec6:	462b      	mov	r3, r5
 800bec8:	f7f4 fe2e 	bl	8000b28 <__aeabi_dcmpeq>
 800becc:	b900      	cbnz	r0, 800bed0 <_dtoa_r+0x168>
 800bece:	3f01      	subs	r7, #1
 800bed0:	2f16      	cmp	r7, #22
 800bed2:	d851      	bhi.n	800bf78 <_dtoa_r+0x210>
 800bed4:	4b5b      	ldr	r3, [pc, #364]	@ (800c044 <_dtoa_r+0x2dc>)
 800bed6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bee2:	f7f4 fe2b 	bl	8000b3c <__aeabi_dcmplt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d048      	beq.n	800bf7c <_dtoa_r+0x214>
 800beea:	3f01      	subs	r7, #1
 800beec:	2300      	movs	r3, #0
 800beee:	9312      	str	r3, [sp, #72]	@ 0x48
 800bef0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bef2:	1b9b      	subs	r3, r3, r6
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	bf44      	itt	mi
 800bef8:	f1c3 0801 	rsbmi	r8, r3, #1
 800befc:	2300      	movmi	r3, #0
 800befe:	9208      	str	r2, [sp, #32]
 800bf00:	bf54      	ite	pl
 800bf02:	f04f 0800 	movpl.w	r8, #0
 800bf06:	9308      	strmi	r3, [sp, #32]
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	db39      	blt.n	800bf80 <_dtoa_r+0x218>
 800bf0c:	9b08      	ldr	r3, [sp, #32]
 800bf0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bf10:	443b      	add	r3, r7
 800bf12:	9308      	str	r3, [sp, #32]
 800bf14:	2300      	movs	r3, #0
 800bf16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf1a:	2b09      	cmp	r3, #9
 800bf1c:	d864      	bhi.n	800bfe8 <_dtoa_r+0x280>
 800bf1e:	2b05      	cmp	r3, #5
 800bf20:	bfc4      	itt	gt
 800bf22:	3b04      	subgt	r3, #4
 800bf24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bf26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf28:	f1a3 0302 	sub.w	r3, r3, #2
 800bf2c:	bfcc      	ite	gt
 800bf2e:	2400      	movgt	r4, #0
 800bf30:	2401      	movle	r4, #1
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d863      	bhi.n	800bffe <_dtoa_r+0x296>
 800bf36:	e8df f003 	tbb	[pc, r3]
 800bf3a:	372a      	.short	0x372a
 800bf3c:	5535      	.short	0x5535
 800bf3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bf42:	441e      	add	r6, r3
 800bf44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bf48:	2b20      	cmp	r3, #32
 800bf4a:	bfc1      	itttt	gt
 800bf4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf50:	409f      	lslgt	r7, r3
 800bf52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf5a:	bfd6      	itet	le
 800bf5c:	f1c3 0320 	rsble	r3, r3, #32
 800bf60:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf64:	fa04 f003 	lslle.w	r0, r4, r3
 800bf68:	f7f4 fafc 	bl	8000564 <__aeabi_ui2d>
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf72:	3e01      	subs	r6, #1
 800bf74:	9214      	str	r2, [sp, #80]	@ 0x50
 800bf76:	e777      	b.n	800be68 <_dtoa_r+0x100>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e7b8      	b.n	800beee <_dtoa_r+0x186>
 800bf7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bf7e:	e7b7      	b.n	800bef0 <_dtoa_r+0x188>
 800bf80:	427b      	negs	r3, r7
 800bf82:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf84:	2300      	movs	r3, #0
 800bf86:	eba8 0807 	sub.w	r8, r8, r7
 800bf8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf8c:	e7c4      	b.n	800bf18 <_dtoa_r+0x1b0>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dc35      	bgt.n	800c004 <_dtoa_r+0x29c>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	9307      	str	r3, [sp, #28]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfa2:	e00b      	b.n	800bfbc <_dtoa_r+0x254>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e7f3      	b.n	800bf90 <_dtoa_r+0x228>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfae:	18fb      	adds	r3, r7, r3
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	9307      	str	r3, [sp, #28]
 800bfb8:	bfb8      	it	lt
 800bfba:	2301      	movlt	r3, #1
 800bfbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	2204      	movs	r2, #4
 800bfc4:	f102 0514 	add.w	r5, r2, #20
 800bfc8:	429d      	cmp	r5, r3
 800bfca:	d91f      	bls.n	800c00c <_dtoa_r+0x2a4>
 800bfcc:	6041      	str	r1, [r0, #4]
 800bfce:	4658      	mov	r0, fp
 800bfd0:	f000 fd8e 	bl	800caf0 <_Balloc>
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d13c      	bne.n	800c054 <_dtoa_r+0x2ec>
 800bfda:	4b1b      	ldr	r3, [pc, #108]	@ (800c048 <_dtoa_r+0x2e0>)
 800bfdc:	4602      	mov	r2, r0
 800bfde:	f240 11af 	movw	r1, #431	@ 0x1af
 800bfe2:	e6d8      	b.n	800bd96 <_dtoa_r+0x2e>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e7e0      	b.n	800bfaa <_dtoa_r+0x242>
 800bfe8:	2401      	movs	r4, #1
 800bfea:	2300      	movs	r3, #0
 800bfec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bff0:	f04f 33ff 	mov.w	r3, #4294967295
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	9307      	str	r3, [sp, #28]
 800bff8:	2200      	movs	r2, #0
 800bffa:	2312      	movs	r3, #18
 800bffc:	e7d0      	b.n	800bfa0 <_dtoa_r+0x238>
 800bffe:	2301      	movs	r3, #1
 800c000:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c002:	e7f5      	b.n	800bff0 <_dtoa_r+0x288>
 800c004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	9307      	str	r3, [sp, #28]
 800c00a:	e7d7      	b.n	800bfbc <_dtoa_r+0x254>
 800c00c:	3101      	adds	r1, #1
 800c00e:	0052      	lsls	r2, r2, #1
 800c010:	e7d8      	b.n	800bfc4 <_dtoa_r+0x25c>
 800c012:	bf00      	nop
 800c014:	f3af 8000 	nop.w
 800c018:	636f4361 	.word	0x636f4361
 800c01c:	3fd287a7 	.word	0x3fd287a7
 800c020:	8b60c8b3 	.word	0x8b60c8b3
 800c024:	3fc68a28 	.word	0x3fc68a28
 800c028:	509f79fb 	.word	0x509f79fb
 800c02c:	3fd34413 	.word	0x3fd34413
 800c030:	0800f646 	.word	0x0800f646
 800c034:	0800f65d 	.word	0x0800f65d
 800c038:	7ff00000 	.word	0x7ff00000
 800c03c:	0800f611 	.word	0x0800f611
 800c040:	3ff80000 	.word	0x3ff80000
 800c044:	0800f758 	.word	0x0800f758
 800c048:	0800f6b5 	.word	0x0800f6b5
 800c04c:	0800f642 	.word	0x0800f642
 800c050:	0800f610 	.word	0x0800f610
 800c054:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c058:	6018      	str	r0, [r3, #0]
 800c05a:	9b07      	ldr	r3, [sp, #28]
 800c05c:	2b0e      	cmp	r3, #14
 800c05e:	f200 80a4 	bhi.w	800c1aa <_dtoa_r+0x442>
 800c062:	2c00      	cmp	r4, #0
 800c064:	f000 80a1 	beq.w	800c1aa <_dtoa_r+0x442>
 800c068:	2f00      	cmp	r7, #0
 800c06a:	dd33      	ble.n	800c0d4 <_dtoa_r+0x36c>
 800c06c:	4bad      	ldr	r3, [pc, #692]	@ (800c324 <_dtoa_r+0x5bc>)
 800c06e:	f007 020f 	and.w	r2, r7, #15
 800c072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c076:	ed93 7b00 	vldr	d7, [r3]
 800c07a:	05f8      	lsls	r0, r7, #23
 800c07c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c080:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c084:	d516      	bpl.n	800c0b4 <_dtoa_r+0x34c>
 800c086:	4ba8      	ldr	r3, [pc, #672]	@ (800c328 <_dtoa_r+0x5c0>)
 800c088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c08c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c090:	f7f4 fc0c 	bl	80008ac <__aeabi_ddiv>
 800c094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c098:	f004 040f 	and.w	r4, r4, #15
 800c09c:	2603      	movs	r6, #3
 800c09e:	4da2      	ldr	r5, [pc, #648]	@ (800c328 <_dtoa_r+0x5c0>)
 800c0a0:	b954      	cbnz	r4, 800c0b8 <_dtoa_r+0x350>
 800c0a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0aa:	f7f4 fbff 	bl	80008ac <__aeabi_ddiv>
 800c0ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b2:	e028      	b.n	800c106 <_dtoa_r+0x39e>
 800c0b4:	2602      	movs	r6, #2
 800c0b6:	e7f2      	b.n	800c09e <_dtoa_r+0x336>
 800c0b8:	07e1      	lsls	r1, r4, #31
 800c0ba:	d508      	bpl.n	800c0ce <_dtoa_r+0x366>
 800c0bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0c4:	f7f4 fac8 	bl	8000658 <__aeabi_dmul>
 800c0c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0cc:	3601      	adds	r6, #1
 800c0ce:	1064      	asrs	r4, r4, #1
 800c0d0:	3508      	adds	r5, #8
 800c0d2:	e7e5      	b.n	800c0a0 <_dtoa_r+0x338>
 800c0d4:	f000 80d2 	beq.w	800c27c <_dtoa_r+0x514>
 800c0d8:	427c      	negs	r4, r7
 800c0da:	4b92      	ldr	r3, [pc, #584]	@ (800c324 <_dtoa_r+0x5bc>)
 800c0dc:	4d92      	ldr	r5, [pc, #584]	@ (800c328 <_dtoa_r+0x5c0>)
 800c0de:	f004 020f 	and.w	r2, r4, #15
 800c0e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0ee:	f7f4 fab3 	bl	8000658 <__aeabi_dmul>
 800c0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f6:	1124      	asrs	r4, r4, #4
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	2602      	movs	r6, #2
 800c0fc:	2c00      	cmp	r4, #0
 800c0fe:	f040 80b2 	bne.w	800c266 <_dtoa_r+0x4fe>
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1d3      	bne.n	800c0ae <_dtoa_r+0x346>
 800c106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c108:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 80b7 	beq.w	800c280 <_dtoa_r+0x518>
 800c112:	4b86      	ldr	r3, [pc, #536]	@ (800c32c <_dtoa_r+0x5c4>)
 800c114:	2200      	movs	r2, #0
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	f7f4 fd0f 	bl	8000b3c <__aeabi_dcmplt>
 800c11e:	2800      	cmp	r0, #0
 800c120:	f000 80ae 	beq.w	800c280 <_dtoa_r+0x518>
 800c124:	9b07      	ldr	r3, [sp, #28]
 800c126:	2b00      	cmp	r3, #0
 800c128:	f000 80aa 	beq.w	800c280 <_dtoa_r+0x518>
 800c12c:	9b00      	ldr	r3, [sp, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	dd37      	ble.n	800c1a2 <_dtoa_r+0x43a>
 800c132:	1e7b      	subs	r3, r7, #1
 800c134:	9304      	str	r3, [sp, #16]
 800c136:	4620      	mov	r0, r4
 800c138:	4b7d      	ldr	r3, [pc, #500]	@ (800c330 <_dtoa_r+0x5c8>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	4629      	mov	r1, r5
 800c13e:	f7f4 fa8b 	bl	8000658 <__aeabi_dmul>
 800c142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c146:	9c00      	ldr	r4, [sp, #0]
 800c148:	3601      	adds	r6, #1
 800c14a:	4630      	mov	r0, r6
 800c14c:	f7f4 fa1a 	bl	8000584 <__aeabi_i2d>
 800c150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c154:	f7f4 fa80 	bl	8000658 <__aeabi_dmul>
 800c158:	4b76      	ldr	r3, [pc, #472]	@ (800c334 <_dtoa_r+0x5cc>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	f7f4 f8c6 	bl	80002ec <__adddf3>
 800c160:	4605      	mov	r5, r0
 800c162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c166:	2c00      	cmp	r4, #0
 800c168:	f040 808d 	bne.w	800c286 <_dtoa_r+0x51e>
 800c16c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c170:	4b71      	ldr	r3, [pc, #452]	@ (800c338 <_dtoa_r+0x5d0>)
 800c172:	2200      	movs	r2, #0
 800c174:	f7f4 f8b8 	bl	80002e8 <__aeabi_dsub>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c180:	462a      	mov	r2, r5
 800c182:	4633      	mov	r3, r6
 800c184:	f7f4 fcf8 	bl	8000b78 <__aeabi_dcmpgt>
 800c188:	2800      	cmp	r0, #0
 800c18a:	f040 828b 	bne.w	800c6a4 <_dtoa_r+0x93c>
 800c18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c192:	462a      	mov	r2, r5
 800c194:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c198:	f7f4 fcd0 	bl	8000b3c <__aeabi_dcmplt>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f040 8128 	bne.w	800c3f2 <_dtoa_r+0x68a>
 800c1a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c1a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c1aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f2c0 815a 	blt.w	800c466 <_dtoa_r+0x6fe>
 800c1b2:	2f0e      	cmp	r7, #14
 800c1b4:	f300 8157 	bgt.w	800c466 <_dtoa_r+0x6fe>
 800c1b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c324 <_dtoa_r+0x5bc>)
 800c1ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1be:	ed93 7b00 	vldr	d7, [r3]
 800c1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	ed8d 7b00 	vstr	d7, [sp]
 800c1ca:	da03      	bge.n	800c1d4 <_dtoa_r+0x46c>
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f340 8101 	ble.w	800c3d6 <_dtoa_r+0x66e>
 800c1d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c1d8:	4656      	mov	r6, sl
 800c1da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7f4 fb63 	bl	80008ac <__aeabi_ddiv>
 800c1e6:	f7f4 fce7 	bl	8000bb8 <__aeabi_d2iz>
 800c1ea:	4680      	mov	r8, r0
 800c1ec:	f7f4 f9ca 	bl	8000584 <__aeabi_i2d>
 800c1f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1f4:	f7f4 fa30 	bl	8000658 <__aeabi_dmul>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c204:	f7f4 f870 	bl	80002e8 <__aeabi_dsub>
 800c208:	f806 4b01 	strb.w	r4, [r6], #1
 800c20c:	9d07      	ldr	r5, [sp, #28]
 800c20e:	eba6 040a 	sub.w	r4, r6, sl
 800c212:	42a5      	cmp	r5, r4
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	f040 8117 	bne.w	800c44a <_dtoa_r+0x6e2>
 800c21c:	f7f4 f866 	bl	80002ec <__adddf3>
 800c220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c224:	4604      	mov	r4, r0
 800c226:	460d      	mov	r5, r1
 800c228:	f7f4 fca6 	bl	8000b78 <__aeabi_dcmpgt>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f040 80f9 	bne.w	800c424 <_dtoa_r+0x6bc>
 800c232:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c236:	4620      	mov	r0, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f7f4 fc75 	bl	8000b28 <__aeabi_dcmpeq>
 800c23e:	b118      	cbz	r0, 800c248 <_dtoa_r+0x4e0>
 800c240:	f018 0f01 	tst.w	r8, #1
 800c244:	f040 80ee 	bne.w	800c424 <_dtoa_r+0x6bc>
 800c248:	4649      	mov	r1, r9
 800c24a:	4658      	mov	r0, fp
 800c24c:	f000 fc90 	bl	800cb70 <_Bfree>
 800c250:	2300      	movs	r3, #0
 800c252:	7033      	strb	r3, [r6, #0]
 800c254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c256:	3701      	adds	r7, #1
 800c258:	601f      	str	r7, [r3, #0]
 800c25a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 831d 	beq.w	800c89c <_dtoa_r+0xb34>
 800c262:	601e      	str	r6, [r3, #0]
 800c264:	e31a      	b.n	800c89c <_dtoa_r+0xb34>
 800c266:	07e2      	lsls	r2, r4, #31
 800c268:	d505      	bpl.n	800c276 <_dtoa_r+0x50e>
 800c26a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c26e:	f7f4 f9f3 	bl	8000658 <__aeabi_dmul>
 800c272:	3601      	adds	r6, #1
 800c274:	2301      	movs	r3, #1
 800c276:	1064      	asrs	r4, r4, #1
 800c278:	3508      	adds	r5, #8
 800c27a:	e73f      	b.n	800c0fc <_dtoa_r+0x394>
 800c27c:	2602      	movs	r6, #2
 800c27e:	e742      	b.n	800c106 <_dtoa_r+0x39e>
 800c280:	9c07      	ldr	r4, [sp, #28]
 800c282:	9704      	str	r7, [sp, #16]
 800c284:	e761      	b.n	800c14a <_dtoa_r+0x3e2>
 800c286:	4b27      	ldr	r3, [pc, #156]	@ (800c324 <_dtoa_r+0x5bc>)
 800c288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c28a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c28e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c292:	4454      	add	r4, sl
 800c294:	2900      	cmp	r1, #0
 800c296:	d053      	beq.n	800c340 <_dtoa_r+0x5d8>
 800c298:	4928      	ldr	r1, [pc, #160]	@ (800c33c <_dtoa_r+0x5d4>)
 800c29a:	2000      	movs	r0, #0
 800c29c:	f7f4 fb06 	bl	80008ac <__aeabi_ddiv>
 800c2a0:	4633      	mov	r3, r6
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	f7f4 f820 	bl	80002e8 <__aeabi_dsub>
 800c2a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2ac:	4656      	mov	r6, sl
 800c2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2b2:	f7f4 fc81 	bl	8000bb8 <__aeabi_d2iz>
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	f7f4 f964 	bl	8000584 <__aeabi_i2d>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2c4:	f7f4 f810 	bl	80002e8 <__aeabi_dsub>
 800c2c8:	3530      	adds	r5, #48	@ 0x30
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2d2:	f806 5b01 	strb.w	r5, [r6], #1
 800c2d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2da:	f7f4 fc2f 	bl	8000b3c <__aeabi_dcmplt>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d171      	bne.n	800c3c6 <_dtoa_r+0x65e>
 800c2e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e6:	4911      	ldr	r1, [pc, #68]	@ (800c32c <_dtoa_r+0x5c4>)
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	f7f3 fffd 	bl	80002e8 <__aeabi_dsub>
 800c2ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2f2:	f7f4 fc23 	bl	8000b3c <__aeabi_dcmplt>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	f040 8095 	bne.w	800c426 <_dtoa_r+0x6be>
 800c2fc:	42a6      	cmp	r6, r4
 800c2fe:	f43f af50 	beq.w	800c1a2 <_dtoa_r+0x43a>
 800c302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c306:	4b0a      	ldr	r3, [pc, #40]	@ (800c330 <_dtoa_r+0x5c8>)
 800c308:	2200      	movs	r2, #0
 800c30a:	f7f4 f9a5 	bl	8000658 <__aeabi_dmul>
 800c30e:	4b08      	ldr	r3, [pc, #32]	@ (800c330 <_dtoa_r+0x5c8>)
 800c310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c314:	2200      	movs	r2, #0
 800c316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c31a:	f7f4 f99d 	bl	8000658 <__aeabi_dmul>
 800c31e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c322:	e7c4      	b.n	800c2ae <_dtoa_r+0x546>
 800c324:	0800f758 	.word	0x0800f758
 800c328:	0800f730 	.word	0x0800f730
 800c32c:	3ff00000 	.word	0x3ff00000
 800c330:	40240000 	.word	0x40240000
 800c334:	401c0000 	.word	0x401c0000
 800c338:	40140000 	.word	0x40140000
 800c33c:	3fe00000 	.word	0x3fe00000
 800c340:	4631      	mov	r1, r6
 800c342:	4628      	mov	r0, r5
 800c344:	f7f4 f988 	bl	8000658 <__aeabi_dmul>
 800c348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c34c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c34e:	4656      	mov	r6, sl
 800c350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c354:	f7f4 fc30 	bl	8000bb8 <__aeabi_d2iz>
 800c358:	4605      	mov	r5, r0
 800c35a:	f7f4 f913 	bl	8000584 <__aeabi_i2d>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c366:	f7f3 ffbf 	bl	80002e8 <__aeabi_dsub>
 800c36a:	3530      	adds	r5, #48	@ 0x30
 800c36c:	f806 5b01 	strb.w	r5, [r6], #1
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	42a6      	cmp	r6, r4
 800c376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c37a:	f04f 0200 	mov.w	r2, #0
 800c37e:	d124      	bne.n	800c3ca <_dtoa_r+0x662>
 800c380:	4bac      	ldr	r3, [pc, #688]	@ (800c634 <_dtoa_r+0x8cc>)
 800c382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c386:	f7f3 ffb1 	bl	80002ec <__adddf3>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c392:	f7f4 fbf1 	bl	8000b78 <__aeabi_dcmpgt>
 800c396:	2800      	cmp	r0, #0
 800c398:	d145      	bne.n	800c426 <_dtoa_r+0x6be>
 800c39a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c39e:	49a5      	ldr	r1, [pc, #660]	@ (800c634 <_dtoa_r+0x8cc>)
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f7f3 ffa1 	bl	80002e8 <__aeabi_dsub>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ae:	f7f4 fbc5 	bl	8000b3c <__aeabi_dcmplt>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	f43f aef5 	beq.w	800c1a2 <_dtoa_r+0x43a>
 800c3b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c3ba:	1e73      	subs	r3, r6, #1
 800c3bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c3be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3c2:	2b30      	cmp	r3, #48	@ 0x30
 800c3c4:	d0f8      	beq.n	800c3b8 <_dtoa_r+0x650>
 800c3c6:	9f04      	ldr	r7, [sp, #16]
 800c3c8:	e73e      	b.n	800c248 <_dtoa_r+0x4e0>
 800c3ca:	4b9b      	ldr	r3, [pc, #620]	@ (800c638 <_dtoa_r+0x8d0>)
 800c3cc:	f7f4 f944 	bl	8000658 <__aeabi_dmul>
 800c3d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d4:	e7bc      	b.n	800c350 <_dtoa_r+0x5e8>
 800c3d6:	d10c      	bne.n	800c3f2 <_dtoa_r+0x68a>
 800c3d8:	4b98      	ldr	r3, [pc, #608]	@ (800c63c <_dtoa_r+0x8d4>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3e0:	f7f4 f93a 	bl	8000658 <__aeabi_dmul>
 800c3e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3e8:	f7f4 fbbc 	bl	8000b64 <__aeabi_dcmpge>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f000 8157 	beq.w	800c6a0 <_dtoa_r+0x938>
 800c3f2:	2400      	movs	r4, #0
 800c3f4:	4625      	mov	r5, r4
 800c3f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3f8:	43db      	mvns	r3, r3
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	4656      	mov	r6, sl
 800c3fe:	2700      	movs	r7, #0
 800c400:	4621      	mov	r1, r4
 800c402:	4658      	mov	r0, fp
 800c404:	f000 fbb4 	bl	800cb70 <_Bfree>
 800c408:	2d00      	cmp	r5, #0
 800c40a:	d0dc      	beq.n	800c3c6 <_dtoa_r+0x65e>
 800c40c:	b12f      	cbz	r7, 800c41a <_dtoa_r+0x6b2>
 800c40e:	42af      	cmp	r7, r5
 800c410:	d003      	beq.n	800c41a <_dtoa_r+0x6b2>
 800c412:	4639      	mov	r1, r7
 800c414:	4658      	mov	r0, fp
 800c416:	f000 fbab 	bl	800cb70 <_Bfree>
 800c41a:	4629      	mov	r1, r5
 800c41c:	4658      	mov	r0, fp
 800c41e:	f000 fba7 	bl	800cb70 <_Bfree>
 800c422:	e7d0      	b.n	800c3c6 <_dtoa_r+0x65e>
 800c424:	9704      	str	r7, [sp, #16]
 800c426:	4633      	mov	r3, r6
 800c428:	461e      	mov	r6, r3
 800c42a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c42e:	2a39      	cmp	r2, #57	@ 0x39
 800c430:	d107      	bne.n	800c442 <_dtoa_r+0x6da>
 800c432:	459a      	cmp	sl, r3
 800c434:	d1f8      	bne.n	800c428 <_dtoa_r+0x6c0>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	3201      	adds	r2, #1
 800c43a:	9204      	str	r2, [sp, #16]
 800c43c:	2230      	movs	r2, #48	@ 0x30
 800c43e:	f88a 2000 	strb.w	r2, [sl]
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	3201      	adds	r2, #1
 800c446:	701a      	strb	r2, [r3, #0]
 800c448:	e7bd      	b.n	800c3c6 <_dtoa_r+0x65e>
 800c44a:	4b7b      	ldr	r3, [pc, #492]	@ (800c638 <_dtoa_r+0x8d0>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	f7f4 f903 	bl	8000658 <__aeabi_dmul>
 800c452:	2200      	movs	r2, #0
 800c454:	2300      	movs	r3, #0
 800c456:	4604      	mov	r4, r0
 800c458:	460d      	mov	r5, r1
 800c45a:	f7f4 fb65 	bl	8000b28 <__aeabi_dcmpeq>
 800c45e:	2800      	cmp	r0, #0
 800c460:	f43f aebb 	beq.w	800c1da <_dtoa_r+0x472>
 800c464:	e6f0      	b.n	800c248 <_dtoa_r+0x4e0>
 800c466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c468:	2a00      	cmp	r2, #0
 800c46a:	f000 80db 	beq.w	800c624 <_dtoa_r+0x8bc>
 800c46e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c470:	2a01      	cmp	r2, #1
 800c472:	f300 80bf 	bgt.w	800c5f4 <_dtoa_r+0x88c>
 800c476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c478:	2a00      	cmp	r2, #0
 800c47a:	f000 80b7 	beq.w	800c5ec <_dtoa_r+0x884>
 800c47e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c482:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c484:	4646      	mov	r6, r8
 800c486:	9a08      	ldr	r2, [sp, #32]
 800c488:	2101      	movs	r1, #1
 800c48a:	441a      	add	r2, r3
 800c48c:	4658      	mov	r0, fp
 800c48e:	4498      	add	r8, r3
 800c490:	9208      	str	r2, [sp, #32]
 800c492:	f000 fc6b 	bl	800cd6c <__i2b>
 800c496:	4605      	mov	r5, r0
 800c498:	b15e      	cbz	r6, 800c4b2 <_dtoa_r+0x74a>
 800c49a:	9b08      	ldr	r3, [sp, #32]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	dd08      	ble.n	800c4b2 <_dtoa_r+0x74a>
 800c4a0:	42b3      	cmp	r3, r6
 800c4a2:	9a08      	ldr	r2, [sp, #32]
 800c4a4:	bfa8      	it	ge
 800c4a6:	4633      	movge	r3, r6
 800c4a8:	eba8 0803 	sub.w	r8, r8, r3
 800c4ac:	1af6      	subs	r6, r6, r3
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	9308      	str	r3, [sp, #32]
 800c4b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4b4:	b1f3      	cbz	r3, 800c4f4 <_dtoa_r+0x78c>
 800c4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 80b7 	beq.w	800c62c <_dtoa_r+0x8c4>
 800c4be:	b18c      	cbz	r4, 800c4e4 <_dtoa_r+0x77c>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	4658      	mov	r0, fp
 800c4c6:	f000 fd11 	bl	800ceec <__pow5mult>
 800c4ca:	464a      	mov	r2, r9
 800c4cc:	4601      	mov	r1, r0
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	4658      	mov	r0, fp
 800c4d2:	f000 fc61 	bl	800cd98 <__multiply>
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	9004      	str	r0, [sp, #16]
 800c4da:	4658      	mov	r0, fp
 800c4dc:	f000 fb48 	bl	800cb70 <_Bfree>
 800c4e0:	9b04      	ldr	r3, [sp, #16]
 800c4e2:	4699      	mov	r9, r3
 800c4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4e6:	1b1a      	subs	r2, r3, r4
 800c4e8:	d004      	beq.n	800c4f4 <_dtoa_r+0x78c>
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	4658      	mov	r0, fp
 800c4ee:	f000 fcfd 	bl	800ceec <__pow5mult>
 800c4f2:	4681      	mov	r9, r0
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	4658      	mov	r0, fp
 800c4f8:	f000 fc38 	bl	800cd6c <__i2b>
 800c4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4fe:	4604      	mov	r4, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 81cf 	beq.w	800c8a4 <_dtoa_r+0xb3c>
 800c506:	461a      	mov	r2, r3
 800c508:	4601      	mov	r1, r0
 800c50a:	4658      	mov	r0, fp
 800c50c:	f000 fcee 	bl	800ceec <__pow5mult>
 800c510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c512:	2b01      	cmp	r3, #1
 800c514:	4604      	mov	r4, r0
 800c516:	f300 8095 	bgt.w	800c644 <_dtoa_r+0x8dc>
 800c51a:	9b02      	ldr	r3, [sp, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f040 8087 	bne.w	800c630 <_dtoa_r+0x8c8>
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f040 8089 	bne.w	800c640 <_dtoa_r+0x8d8>
 800c52e:	9b03      	ldr	r3, [sp, #12]
 800c530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c534:	0d1b      	lsrs	r3, r3, #20
 800c536:	051b      	lsls	r3, r3, #20
 800c538:	b12b      	cbz	r3, 800c546 <_dtoa_r+0x7de>
 800c53a:	9b08      	ldr	r3, [sp, #32]
 800c53c:	3301      	adds	r3, #1
 800c53e:	9308      	str	r3, [sp, #32]
 800c540:	f108 0801 	add.w	r8, r8, #1
 800c544:	2301      	movs	r3, #1
 800c546:	930a      	str	r3, [sp, #40]	@ 0x28
 800c548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 81b0 	beq.w	800c8b0 <_dtoa_r+0xb48>
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c556:	6918      	ldr	r0, [r3, #16]
 800c558:	f000 fbbc 	bl	800ccd4 <__hi0bits>
 800c55c:	f1c0 0020 	rsb	r0, r0, #32
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	4418      	add	r0, r3
 800c564:	f010 001f 	ands.w	r0, r0, #31
 800c568:	d077      	beq.n	800c65a <_dtoa_r+0x8f2>
 800c56a:	f1c0 0320 	rsb	r3, r0, #32
 800c56e:	2b04      	cmp	r3, #4
 800c570:	dd6b      	ble.n	800c64a <_dtoa_r+0x8e2>
 800c572:	9b08      	ldr	r3, [sp, #32]
 800c574:	f1c0 001c 	rsb	r0, r0, #28
 800c578:	4403      	add	r3, r0
 800c57a:	4480      	add	r8, r0
 800c57c:	4406      	add	r6, r0
 800c57e:	9308      	str	r3, [sp, #32]
 800c580:	f1b8 0f00 	cmp.w	r8, #0
 800c584:	dd05      	ble.n	800c592 <_dtoa_r+0x82a>
 800c586:	4649      	mov	r1, r9
 800c588:	4642      	mov	r2, r8
 800c58a:	4658      	mov	r0, fp
 800c58c:	f000 fd08 	bl	800cfa0 <__lshift>
 800c590:	4681      	mov	r9, r0
 800c592:	9b08      	ldr	r3, [sp, #32]
 800c594:	2b00      	cmp	r3, #0
 800c596:	dd05      	ble.n	800c5a4 <_dtoa_r+0x83c>
 800c598:	4621      	mov	r1, r4
 800c59a:	461a      	mov	r2, r3
 800c59c:	4658      	mov	r0, fp
 800c59e:	f000 fcff 	bl	800cfa0 <__lshift>
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d059      	beq.n	800c65e <_dtoa_r+0x8f6>
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4648      	mov	r0, r9
 800c5ae:	f000 fd63 	bl	800d078 <__mcmp>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	da53      	bge.n	800c65e <_dtoa_r+0x8f6>
 800c5b6:	1e7b      	subs	r3, r7, #1
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	2300      	movs	r3, #0
 800c5be:	220a      	movs	r2, #10
 800c5c0:	4658      	mov	r0, fp
 800c5c2:	f000 faf7 	bl	800cbb4 <__multadd>
 800c5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5c8:	4681      	mov	r9, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 8172 	beq.w	800c8b4 <_dtoa_r+0xb4c>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	220a      	movs	r2, #10
 800c5d6:	4658      	mov	r0, fp
 800c5d8:	f000 faec 	bl	800cbb4 <__multadd>
 800c5dc:	9b00      	ldr	r3, [sp, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	dc67      	bgt.n	800c6b4 <_dtoa_r+0x94c>
 800c5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	dc41      	bgt.n	800c66e <_dtoa_r+0x906>
 800c5ea:	e063      	b.n	800c6b4 <_dtoa_r+0x94c>
 800c5ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c5ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c5f2:	e746      	b.n	800c482 <_dtoa_r+0x71a>
 800c5f4:	9b07      	ldr	r3, [sp, #28]
 800c5f6:	1e5c      	subs	r4, r3, #1
 800c5f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5fa:	42a3      	cmp	r3, r4
 800c5fc:	bfbf      	itttt	lt
 800c5fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c600:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c602:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c604:	1ae3      	sublt	r3, r4, r3
 800c606:	bfb4      	ite	lt
 800c608:	18d2      	addlt	r2, r2, r3
 800c60a:	1b1c      	subge	r4, r3, r4
 800c60c:	9b07      	ldr	r3, [sp, #28]
 800c60e:	bfbc      	itt	lt
 800c610:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c612:	2400      	movlt	r4, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	bfb5      	itete	lt
 800c618:	eba8 0603 	sublt.w	r6, r8, r3
 800c61c:	9b07      	ldrge	r3, [sp, #28]
 800c61e:	2300      	movlt	r3, #0
 800c620:	4646      	movge	r6, r8
 800c622:	e730      	b.n	800c486 <_dtoa_r+0x71e>
 800c624:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c626:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c628:	4646      	mov	r6, r8
 800c62a:	e735      	b.n	800c498 <_dtoa_r+0x730>
 800c62c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c62e:	e75c      	b.n	800c4ea <_dtoa_r+0x782>
 800c630:	2300      	movs	r3, #0
 800c632:	e788      	b.n	800c546 <_dtoa_r+0x7de>
 800c634:	3fe00000 	.word	0x3fe00000
 800c638:	40240000 	.word	0x40240000
 800c63c:	40140000 	.word	0x40140000
 800c640:	9b02      	ldr	r3, [sp, #8]
 800c642:	e780      	b.n	800c546 <_dtoa_r+0x7de>
 800c644:	2300      	movs	r3, #0
 800c646:	930a      	str	r3, [sp, #40]	@ 0x28
 800c648:	e782      	b.n	800c550 <_dtoa_r+0x7e8>
 800c64a:	d099      	beq.n	800c580 <_dtoa_r+0x818>
 800c64c:	9a08      	ldr	r2, [sp, #32]
 800c64e:	331c      	adds	r3, #28
 800c650:	441a      	add	r2, r3
 800c652:	4498      	add	r8, r3
 800c654:	441e      	add	r6, r3
 800c656:	9208      	str	r2, [sp, #32]
 800c658:	e792      	b.n	800c580 <_dtoa_r+0x818>
 800c65a:	4603      	mov	r3, r0
 800c65c:	e7f6      	b.n	800c64c <_dtoa_r+0x8e4>
 800c65e:	9b07      	ldr	r3, [sp, #28]
 800c660:	9704      	str	r7, [sp, #16]
 800c662:	2b00      	cmp	r3, #0
 800c664:	dc20      	bgt.n	800c6a8 <_dtoa_r+0x940>
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	dd1e      	ble.n	800c6ac <_dtoa_r+0x944>
 800c66e:	9b00      	ldr	r3, [sp, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	f47f aec0 	bne.w	800c3f6 <_dtoa_r+0x68e>
 800c676:	4621      	mov	r1, r4
 800c678:	2205      	movs	r2, #5
 800c67a:	4658      	mov	r0, fp
 800c67c:	f000 fa9a 	bl	800cbb4 <__multadd>
 800c680:	4601      	mov	r1, r0
 800c682:	4604      	mov	r4, r0
 800c684:	4648      	mov	r0, r9
 800c686:	f000 fcf7 	bl	800d078 <__mcmp>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	f77f aeb3 	ble.w	800c3f6 <_dtoa_r+0x68e>
 800c690:	4656      	mov	r6, sl
 800c692:	2331      	movs	r3, #49	@ 0x31
 800c694:	f806 3b01 	strb.w	r3, [r6], #1
 800c698:	9b04      	ldr	r3, [sp, #16]
 800c69a:	3301      	adds	r3, #1
 800c69c:	9304      	str	r3, [sp, #16]
 800c69e:	e6ae      	b.n	800c3fe <_dtoa_r+0x696>
 800c6a0:	9c07      	ldr	r4, [sp, #28]
 800c6a2:	9704      	str	r7, [sp, #16]
 800c6a4:	4625      	mov	r5, r4
 800c6a6:	e7f3      	b.n	800c690 <_dtoa_r+0x928>
 800c6a8:	9b07      	ldr	r3, [sp, #28]
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 8104 	beq.w	800c8bc <_dtoa_r+0xb54>
 800c6b4:	2e00      	cmp	r6, #0
 800c6b6:	dd05      	ble.n	800c6c4 <_dtoa_r+0x95c>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4632      	mov	r2, r6
 800c6bc:	4658      	mov	r0, fp
 800c6be:	f000 fc6f 	bl	800cfa0 <__lshift>
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d05a      	beq.n	800c780 <_dtoa_r+0xa18>
 800c6ca:	6869      	ldr	r1, [r5, #4]
 800c6cc:	4658      	mov	r0, fp
 800c6ce:	f000 fa0f 	bl	800caf0 <_Balloc>
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	b928      	cbnz	r0, 800c6e2 <_dtoa_r+0x97a>
 800c6d6:	4b84      	ldr	r3, [pc, #528]	@ (800c8e8 <_dtoa_r+0xb80>)
 800c6d8:	4602      	mov	r2, r0
 800c6da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c6de:	f7ff bb5a 	b.w	800bd96 <_dtoa_r+0x2e>
 800c6e2:	692a      	ldr	r2, [r5, #16]
 800c6e4:	3202      	adds	r2, #2
 800c6e6:	0092      	lsls	r2, r2, #2
 800c6e8:	f105 010c 	add.w	r1, r5, #12
 800c6ec:	300c      	adds	r0, #12
 800c6ee:	f7ff fa9e 	bl	800bc2e <memcpy>
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	4658      	mov	r0, fp
 800c6f8:	f000 fc52 	bl	800cfa0 <__lshift>
 800c6fc:	f10a 0301 	add.w	r3, sl, #1
 800c700:	9307      	str	r3, [sp, #28]
 800c702:	9b00      	ldr	r3, [sp, #0]
 800c704:	4453      	add	r3, sl
 800c706:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c708:	9b02      	ldr	r3, [sp, #8]
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	462f      	mov	r7, r5
 800c710:	930a      	str	r3, [sp, #40]	@ 0x28
 800c712:	4605      	mov	r5, r0
 800c714:	9b07      	ldr	r3, [sp, #28]
 800c716:	4621      	mov	r1, r4
 800c718:	3b01      	subs	r3, #1
 800c71a:	4648      	mov	r0, r9
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	f7ff fa9b 	bl	800bc58 <quorem>
 800c722:	4639      	mov	r1, r7
 800c724:	9002      	str	r0, [sp, #8]
 800c726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c72a:	4648      	mov	r0, r9
 800c72c:	f000 fca4 	bl	800d078 <__mcmp>
 800c730:	462a      	mov	r2, r5
 800c732:	9008      	str	r0, [sp, #32]
 800c734:	4621      	mov	r1, r4
 800c736:	4658      	mov	r0, fp
 800c738:	f000 fcba 	bl	800d0b0 <__mdiff>
 800c73c:	68c2      	ldr	r2, [r0, #12]
 800c73e:	4606      	mov	r6, r0
 800c740:	bb02      	cbnz	r2, 800c784 <_dtoa_r+0xa1c>
 800c742:	4601      	mov	r1, r0
 800c744:	4648      	mov	r0, r9
 800c746:	f000 fc97 	bl	800d078 <__mcmp>
 800c74a:	4602      	mov	r2, r0
 800c74c:	4631      	mov	r1, r6
 800c74e:	4658      	mov	r0, fp
 800c750:	920e      	str	r2, [sp, #56]	@ 0x38
 800c752:	f000 fa0d 	bl	800cb70 <_Bfree>
 800c756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c758:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c75a:	9e07      	ldr	r6, [sp, #28]
 800c75c:	ea43 0102 	orr.w	r1, r3, r2
 800c760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c762:	4319      	orrs	r1, r3
 800c764:	d110      	bne.n	800c788 <_dtoa_r+0xa20>
 800c766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c76a:	d029      	beq.n	800c7c0 <_dtoa_r+0xa58>
 800c76c:	9b08      	ldr	r3, [sp, #32]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	dd02      	ble.n	800c778 <_dtoa_r+0xa10>
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c778:	9b00      	ldr	r3, [sp, #0]
 800c77a:	f883 8000 	strb.w	r8, [r3]
 800c77e:	e63f      	b.n	800c400 <_dtoa_r+0x698>
 800c780:	4628      	mov	r0, r5
 800c782:	e7bb      	b.n	800c6fc <_dtoa_r+0x994>
 800c784:	2201      	movs	r2, #1
 800c786:	e7e1      	b.n	800c74c <_dtoa_r+0x9e4>
 800c788:	9b08      	ldr	r3, [sp, #32]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	db04      	blt.n	800c798 <_dtoa_r+0xa30>
 800c78e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c790:	430b      	orrs	r3, r1
 800c792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c794:	430b      	orrs	r3, r1
 800c796:	d120      	bne.n	800c7da <_dtoa_r+0xa72>
 800c798:	2a00      	cmp	r2, #0
 800c79a:	dded      	ble.n	800c778 <_dtoa_r+0xa10>
 800c79c:	4649      	mov	r1, r9
 800c79e:	2201      	movs	r2, #1
 800c7a0:	4658      	mov	r0, fp
 800c7a2:	f000 fbfd 	bl	800cfa0 <__lshift>
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	4681      	mov	r9, r0
 800c7aa:	f000 fc65 	bl	800d078 <__mcmp>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	dc03      	bgt.n	800c7ba <_dtoa_r+0xa52>
 800c7b2:	d1e1      	bne.n	800c778 <_dtoa_r+0xa10>
 800c7b4:	f018 0f01 	tst.w	r8, #1
 800c7b8:	d0de      	beq.n	800c778 <_dtoa_r+0xa10>
 800c7ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7be:	d1d8      	bne.n	800c772 <_dtoa_r+0xa0a>
 800c7c0:	9a00      	ldr	r2, [sp, #0]
 800c7c2:	2339      	movs	r3, #57	@ 0x39
 800c7c4:	7013      	strb	r3, [r2, #0]
 800c7c6:	4633      	mov	r3, r6
 800c7c8:	461e      	mov	r6, r3
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c7d0:	2a39      	cmp	r2, #57	@ 0x39
 800c7d2:	d052      	beq.n	800c87a <_dtoa_r+0xb12>
 800c7d4:	3201      	adds	r2, #1
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	e612      	b.n	800c400 <_dtoa_r+0x698>
 800c7da:	2a00      	cmp	r2, #0
 800c7dc:	dd07      	ble.n	800c7ee <_dtoa_r+0xa86>
 800c7de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7e2:	d0ed      	beq.n	800c7c0 <_dtoa_r+0xa58>
 800c7e4:	9a00      	ldr	r2, [sp, #0]
 800c7e6:	f108 0301 	add.w	r3, r8, #1
 800c7ea:	7013      	strb	r3, [r2, #0]
 800c7ec:	e608      	b.n	800c400 <_dtoa_r+0x698>
 800c7ee:	9b07      	ldr	r3, [sp, #28]
 800c7f0:	9a07      	ldr	r2, [sp, #28]
 800c7f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d028      	beq.n	800c84e <_dtoa_r+0xae6>
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	2300      	movs	r3, #0
 800c800:	220a      	movs	r2, #10
 800c802:	4658      	mov	r0, fp
 800c804:	f000 f9d6 	bl	800cbb4 <__multadd>
 800c808:	42af      	cmp	r7, r5
 800c80a:	4681      	mov	r9, r0
 800c80c:	f04f 0300 	mov.w	r3, #0
 800c810:	f04f 020a 	mov.w	r2, #10
 800c814:	4639      	mov	r1, r7
 800c816:	4658      	mov	r0, fp
 800c818:	d107      	bne.n	800c82a <_dtoa_r+0xac2>
 800c81a:	f000 f9cb 	bl	800cbb4 <__multadd>
 800c81e:	4607      	mov	r7, r0
 800c820:	4605      	mov	r5, r0
 800c822:	9b07      	ldr	r3, [sp, #28]
 800c824:	3301      	adds	r3, #1
 800c826:	9307      	str	r3, [sp, #28]
 800c828:	e774      	b.n	800c714 <_dtoa_r+0x9ac>
 800c82a:	f000 f9c3 	bl	800cbb4 <__multadd>
 800c82e:	4629      	mov	r1, r5
 800c830:	4607      	mov	r7, r0
 800c832:	2300      	movs	r3, #0
 800c834:	220a      	movs	r2, #10
 800c836:	4658      	mov	r0, fp
 800c838:	f000 f9bc 	bl	800cbb4 <__multadd>
 800c83c:	4605      	mov	r5, r0
 800c83e:	e7f0      	b.n	800c822 <_dtoa_r+0xaba>
 800c840:	9b00      	ldr	r3, [sp, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfcc      	ite	gt
 800c846:	461e      	movgt	r6, r3
 800c848:	2601      	movle	r6, #1
 800c84a:	4456      	add	r6, sl
 800c84c:	2700      	movs	r7, #0
 800c84e:	4649      	mov	r1, r9
 800c850:	2201      	movs	r2, #1
 800c852:	4658      	mov	r0, fp
 800c854:	f000 fba4 	bl	800cfa0 <__lshift>
 800c858:	4621      	mov	r1, r4
 800c85a:	4681      	mov	r9, r0
 800c85c:	f000 fc0c 	bl	800d078 <__mcmp>
 800c860:	2800      	cmp	r0, #0
 800c862:	dcb0      	bgt.n	800c7c6 <_dtoa_r+0xa5e>
 800c864:	d102      	bne.n	800c86c <_dtoa_r+0xb04>
 800c866:	f018 0f01 	tst.w	r8, #1
 800c86a:	d1ac      	bne.n	800c7c6 <_dtoa_r+0xa5e>
 800c86c:	4633      	mov	r3, r6
 800c86e:	461e      	mov	r6, r3
 800c870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c874:	2a30      	cmp	r2, #48	@ 0x30
 800c876:	d0fa      	beq.n	800c86e <_dtoa_r+0xb06>
 800c878:	e5c2      	b.n	800c400 <_dtoa_r+0x698>
 800c87a:	459a      	cmp	sl, r3
 800c87c:	d1a4      	bne.n	800c7c8 <_dtoa_r+0xa60>
 800c87e:	9b04      	ldr	r3, [sp, #16]
 800c880:	3301      	adds	r3, #1
 800c882:	9304      	str	r3, [sp, #16]
 800c884:	2331      	movs	r3, #49	@ 0x31
 800c886:	f88a 3000 	strb.w	r3, [sl]
 800c88a:	e5b9      	b.n	800c400 <_dtoa_r+0x698>
 800c88c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c88e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c8ec <_dtoa_r+0xb84>
 800c892:	b11b      	cbz	r3, 800c89c <_dtoa_r+0xb34>
 800c894:	f10a 0308 	add.w	r3, sl, #8
 800c898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	4650      	mov	r0, sl
 800c89e:	b019      	add	sp, #100	@ 0x64
 800c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	f77f ae37 	ble.w	800c51a <_dtoa_r+0x7b2>
 800c8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8b0:	2001      	movs	r0, #1
 800c8b2:	e655      	b.n	800c560 <_dtoa_r+0x7f8>
 800c8b4:	9b00      	ldr	r3, [sp, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f77f aed6 	ble.w	800c668 <_dtoa_r+0x900>
 800c8bc:	4656      	mov	r6, sl
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4648      	mov	r0, r9
 800c8c2:	f7ff f9c9 	bl	800bc58 <quorem>
 800c8c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c8ca:	f806 8b01 	strb.w	r8, [r6], #1
 800c8ce:	9b00      	ldr	r3, [sp, #0]
 800c8d0:	eba6 020a 	sub.w	r2, r6, sl
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	ddb3      	ble.n	800c840 <_dtoa_r+0xad8>
 800c8d8:	4649      	mov	r1, r9
 800c8da:	2300      	movs	r3, #0
 800c8dc:	220a      	movs	r2, #10
 800c8de:	4658      	mov	r0, fp
 800c8e0:	f000 f968 	bl	800cbb4 <__multadd>
 800c8e4:	4681      	mov	r9, r0
 800c8e6:	e7ea      	b.n	800c8be <_dtoa_r+0xb56>
 800c8e8:	0800f6b5 	.word	0x0800f6b5
 800c8ec:	0800f639 	.word	0x0800f639

0800c8f0 <_free_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	2900      	cmp	r1, #0
 800c8f6:	d041      	beq.n	800c97c <_free_r+0x8c>
 800c8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8fc:	1f0c      	subs	r4, r1, #4
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	bfb8      	it	lt
 800c902:	18e4      	addlt	r4, r4, r3
 800c904:	f000 f8e8 	bl	800cad8 <__malloc_lock>
 800c908:	4a1d      	ldr	r2, [pc, #116]	@ (800c980 <_free_r+0x90>)
 800c90a:	6813      	ldr	r3, [r2, #0]
 800c90c:	b933      	cbnz	r3, 800c91c <_free_r+0x2c>
 800c90e:	6063      	str	r3, [r4, #4]
 800c910:	6014      	str	r4, [r2, #0]
 800c912:	4628      	mov	r0, r5
 800c914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c918:	f000 b8e4 	b.w	800cae4 <__malloc_unlock>
 800c91c:	42a3      	cmp	r3, r4
 800c91e:	d908      	bls.n	800c932 <_free_r+0x42>
 800c920:	6820      	ldr	r0, [r4, #0]
 800c922:	1821      	adds	r1, r4, r0
 800c924:	428b      	cmp	r3, r1
 800c926:	bf01      	itttt	eq
 800c928:	6819      	ldreq	r1, [r3, #0]
 800c92a:	685b      	ldreq	r3, [r3, #4]
 800c92c:	1809      	addeq	r1, r1, r0
 800c92e:	6021      	streq	r1, [r4, #0]
 800c930:	e7ed      	b.n	800c90e <_free_r+0x1e>
 800c932:	461a      	mov	r2, r3
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	b10b      	cbz	r3, 800c93c <_free_r+0x4c>
 800c938:	42a3      	cmp	r3, r4
 800c93a:	d9fa      	bls.n	800c932 <_free_r+0x42>
 800c93c:	6811      	ldr	r1, [r2, #0]
 800c93e:	1850      	adds	r0, r2, r1
 800c940:	42a0      	cmp	r0, r4
 800c942:	d10b      	bne.n	800c95c <_free_r+0x6c>
 800c944:	6820      	ldr	r0, [r4, #0]
 800c946:	4401      	add	r1, r0
 800c948:	1850      	adds	r0, r2, r1
 800c94a:	4283      	cmp	r3, r0
 800c94c:	6011      	str	r1, [r2, #0]
 800c94e:	d1e0      	bne.n	800c912 <_free_r+0x22>
 800c950:	6818      	ldr	r0, [r3, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	6053      	str	r3, [r2, #4]
 800c956:	4408      	add	r0, r1
 800c958:	6010      	str	r0, [r2, #0]
 800c95a:	e7da      	b.n	800c912 <_free_r+0x22>
 800c95c:	d902      	bls.n	800c964 <_free_r+0x74>
 800c95e:	230c      	movs	r3, #12
 800c960:	602b      	str	r3, [r5, #0]
 800c962:	e7d6      	b.n	800c912 <_free_r+0x22>
 800c964:	6820      	ldr	r0, [r4, #0]
 800c966:	1821      	adds	r1, r4, r0
 800c968:	428b      	cmp	r3, r1
 800c96a:	bf04      	itt	eq
 800c96c:	6819      	ldreq	r1, [r3, #0]
 800c96e:	685b      	ldreq	r3, [r3, #4]
 800c970:	6063      	str	r3, [r4, #4]
 800c972:	bf04      	itt	eq
 800c974:	1809      	addeq	r1, r1, r0
 800c976:	6021      	streq	r1, [r4, #0]
 800c978:	6054      	str	r4, [r2, #4]
 800c97a:	e7ca      	b.n	800c912 <_free_r+0x22>
 800c97c:	bd38      	pop	{r3, r4, r5, pc}
 800c97e:	bf00      	nop
 800c980:	20005fe0 	.word	0x20005fe0

0800c984 <malloc>:
 800c984:	4b02      	ldr	r3, [pc, #8]	@ (800c990 <malloc+0xc>)
 800c986:	4601      	mov	r1, r0
 800c988:	6818      	ldr	r0, [r3, #0]
 800c98a:	f000 b825 	b.w	800c9d8 <_malloc_r>
 800c98e:	bf00      	nop
 800c990:	2000017c 	.word	0x2000017c

0800c994 <sbrk_aligned>:
 800c994:	b570      	push	{r4, r5, r6, lr}
 800c996:	4e0f      	ldr	r6, [pc, #60]	@ (800c9d4 <sbrk_aligned+0x40>)
 800c998:	460c      	mov	r4, r1
 800c99a:	6831      	ldr	r1, [r6, #0]
 800c99c:	4605      	mov	r5, r0
 800c99e:	b911      	cbnz	r1, 800c9a6 <sbrk_aligned+0x12>
 800c9a0:	f001 fe0c 	bl	800e5bc <_sbrk_r>
 800c9a4:	6030      	str	r0, [r6, #0]
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f001 fe07 	bl	800e5bc <_sbrk_r>
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	d103      	bne.n	800c9ba <sbrk_aligned+0x26>
 800c9b2:	f04f 34ff 	mov.w	r4, #4294967295
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ba:	1cc4      	adds	r4, r0, #3
 800c9bc:	f024 0403 	bic.w	r4, r4, #3
 800c9c0:	42a0      	cmp	r0, r4
 800c9c2:	d0f8      	beq.n	800c9b6 <sbrk_aligned+0x22>
 800c9c4:	1a21      	subs	r1, r4, r0
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f001 fdf8 	bl	800e5bc <_sbrk_r>
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	d1f2      	bne.n	800c9b6 <sbrk_aligned+0x22>
 800c9d0:	e7ef      	b.n	800c9b2 <sbrk_aligned+0x1e>
 800c9d2:	bf00      	nop
 800c9d4:	20005fdc 	.word	0x20005fdc

0800c9d8 <_malloc_r>:
 800c9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9dc:	1ccd      	adds	r5, r1, #3
 800c9de:	f025 0503 	bic.w	r5, r5, #3
 800c9e2:	3508      	adds	r5, #8
 800c9e4:	2d0c      	cmp	r5, #12
 800c9e6:	bf38      	it	cc
 800c9e8:	250c      	movcc	r5, #12
 800c9ea:	2d00      	cmp	r5, #0
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	db01      	blt.n	800c9f4 <_malloc_r+0x1c>
 800c9f0:	42a9      	cmp	r1, r5
 800c9f2:	d904      	bls.n	800c9fe <_malloc_r+0x26>
 800c9f4:	230c      	movs	r3, #12
 800c9f6:	6033      	str	r3, [r6, #0]
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cad4 <_malloc_r+0xfc>
 800ca02:	f000 f869 	bl	800cad8 <__malloc_lock>
 800ca06:	f8d8 3000 	ldr.w	r3, [r8]
 800ca0a:	461c      	mov	r4, r3
 800ca0c:	bb44      	cbnz	r4, 800ca60 <_malloc_r+0x88>
 800ca0e:	4629      	mov	r1, r5
 800ca10:	4630      	mov	r0, r6
 800ca12:	f7ff ffbf 	bl	800c994 <sbrk_aligned>
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	4604      	mov	r4, r0
 800ca1a:	d158      	bne.n	800cace <_malloc_r+0xf6>
 800ca1c:	f8d8 4000 	ldr.w	r4, [r8]
 800ca20:	4627      	mov	r7, r4
 800ca22:	2f00      	cmp	r7, #0
 800ca24:	d143      	bne.n	800caae <_malloc_r+0xd6>
 800ca26:	2c00      	cmp	r4, #0
 800ca28:	d04b      	beq.n	800cac2 <_malloc_r+0xea>
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	4630      	mov	r0, r6
 800ca30:	eb04 0903 	add.w	r9, r4, r3
 800ca34:	f001 fdc2 	bl	800e5bc <_sbrk_r>
 800ca38:	4581      	cmp	r9, r0
 800ca3a:	d142      	bne.n	800cac2 <_malloc_r+0xea>
 800ca3c:	6821      	ldr	r1, [r4, #0]
 800ca3e:	1a6d      	subs	r5, r5, r1
 800ca40:	4629      	mov	r1, r5
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7ff ffa6 	bl	800c994 <sbrk_aligned>
 800ca48:	3001      	adds	r0, #1
 800ca4a:	d03a      	beq.n	800cac2 <_malloc_r+0xea>
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	442b      	add	r3, r5
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	f8d8 3000 	ldr.w	r3, [r8]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	bb62      	cbnz	r2, 800cab4 <_malloc_r+0xdc>
 800ca5a:	f8c8 7000 	str.w	r7, [r8]
 800ca5e:	e00f      	b.n	800ca80 <_malloc_r+0xa8>
 800ca60:	6822      	ldr	r2, [r4, #0]
 800ca62:	1b52      	subs	r2, r2, r5
 800ca64:	d420      	bmi.n	800caa8 <_malloc_r+0xd0>
 800ca66:	2a0b      	cmp	r2, #11
 800ca68:	d917      	bls.n	800ca9a <_malloc_r+0xc2>
 800ca6a:	1961      	adds	r1, r4, r5
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	6025      	str	r5, [r4, #0]
 800ca70:	bf18      	it	ne
 800ca72:	6059      	strne	r1, [r3, #4]
 800ca74:	6863      	ldr	r3, [r4, #4]
 800ca76:	bf08      	it	eq
 800ca78:	f8c8 1000 	streq.w	r1, [r8]
 800ca7c:	5162      	str	r2, [r4, r5]
 800ca7e:	604b      	str	r3, [r1, #4]
 800ca80:	4630      	mov	r0, r6
 800ca82:	f000 f82f 	bl	800cae4 <__malloc_unlock>
 800ca86:	f104 000b 	add.w	r0, r4, #11
 800ca8a:	1d23      	adds	r3, r4, #4
 800ca8c:	f020 0007 	bic.w	r0, r0, #7
 800ca90:	1ac2      	subs	r2, r0, r3
 800ca92:	bf1c      	itt	ne
 800ca94:	1a1b      	subne	r3, r3, r0
 800ca96:	50a3      	strne	r3, [r4, r2]
 800ca98:	e7af      	b.n	800c9fa <_malloc_r+0x22>
 800ca9a:	6862      	ldr	r2, [r4, #4]
 800ca9c:	42a3      	cmp	r3, r4
 800ca9e:	bf0c      	ite	eq
 800caa0:	f8c8 2000 	streq.w	r2, [r8]
 800caa4:	605a      	strne	r2, [r3, #4]
 800caa6:	e7eb      	b.n	800ca80 <_malloc_r+0xa8>
 800caa8:	4623      	mov	r3, r4
 800caaa:	6864      	ldr	r4, [r4, #4]
 800caac:	e7ae      	b.n	800ca0c <_malloc_r+0x34>
 800caae:	463c      	mov	r4, r7
 800cab0:	687f      	ldr	r7, [r7, #4]
 800cab2:	e7b6      	b.n	800ca22 <_malloc_r+0x4a>
 800cab4:	461a      	mov	r2, r3
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	42a3      	cmp	r3, r4
 800caba:	d1fb      	bne.n	800cab4 <_malloc_r+0xdc>
 800cabc:	2300      	movs	r3, #0
 800cabe:	6053      	str	r3, [r2, #4]
 800cac0:	e7de      	b.n	800ca80 <_malloc_r+0xa8>
 800cac2:	230c      	movs	r3, #12
 800cac4:	6033      	str	r3, [r6, #0]
 800cac6:	4630      	mov	r0, r6
 800cac8:	f000 f80c 	bl	800cae4 <__malloc_unlock>
 800cacc:	e794      	b.n	800c9f8 <_malloc_r+0x20>
 800cace:	6005      	str	r5, [r0, #0]
 800cad0:	e7d6      	b.n	800ca80 <_malloc_r+0xa8>
 800cad2:	bf00      	nop
 800cad4:	20005fe0 	.word	0x20005fe0

0800cad8 <__malloc_lock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	@ (800cae0 <__malloc_lock+0x8>)
 800cada:	f7ff b8a6 	b.w	800bc2a <__retarget_lock_acquire_recursive>
 800cade:	bf00      	nop
 800cae0:	20005fd8 	.word	0x20005fd8

0800cae4 <__malloc_unlock>:
 800cae4:	4801      	ldr	r0, [pc, #4]	@ (800caec <__malloc_unlock+0x8>)
 800cae6:	f7ff b8a1 	b.w	800bc2c <__retarget_lock_release_recursive>
 800caea:	bf00      	nop
 800caec:	20005fd8 	.word	0x20005fd8

0800caf0 <_Balloc>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	69c6      	ldr	r6, [r0, #28]
 800caf4:	4604      	mov	r4, r0
 800caf6:	460d      	mov	r5, r1
 800caf8:	b976      	cbnz	r6, 800cb18 <_Balloc+0x28>
 800cafa:	2010      	movs	r0, #16
 800cafc:	f7ff ff42 	bl	800c984 <malloc>
 800cb00:	4602      	mov	r2, r0
 800cb02:	61e0      	str	r0, [r4, #28]
 800cb04:	b920      	cbnz	r0, 800cb10 <_Balloc+0x20>
 800cb06:	4b18      	ldr	r3, [pc, #96]	@ (800cb68 <_Balloc+0x78>)
 800cb08:	4818      	ldr	r0, [pc, #96]	@ (800cb6c <_Balloc+0x7c>)
 800cb0a:	216b      	movs	r1, #107	@ 0x6b
 800cb0c:	f001 fd70 	bl	800e5f0 <__assert_func>
 800cb10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb14:	6006      	str	r6, [r0, #0]
 800cb16:	60c6      	str	r6, [r0, #12]
 800cb18:	69e6      	ldr	r6, [r4, #28]
 800cb1a:	68f3      	ldr	r3, [r6, #12]
 800cb1c:	b183      	cbz	r3, 800cb40 <_Balloc+0x50>
 800cb1e:	69e3      	ldr	r3, [r4, #28]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb26:	b9b8      	cbnz	r0, 800cb58 <_Balloc+0x68>
 800cb28:	2101      	movs	r1, #1
 800cb2a:	fa01 f605 	lsl.w	r6, r1, r5
 800cb2e:	1d72      	adds	r2, r6, #5
 800cb30:	0092      	lsls	r2, r2, #2
 800cb32:	4620      	mov	r0, r4
 800cb34:	f001 fd7a 	bl	800e62c <_calloc_r>
 800cb38:	b160      	cbz	r0, 800cb54 <_Balloc+0x64>
 800cb3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb3e:	e00e      	b.n	800cb5e <_Balloc+0x6e>
 800cb40:	2221      	movs	r2, #33	@ 0x21
 800cb42:	2104      	movs	r1, #4
 800cb44:	4620      	mov	r0, r4
 800cb46:	f001 fd71 	bl	800e62c <_calloc_r>
 800cb4a:	69e3      	ldr	r3, [r4, #28]
 800cb4c:	60f0      	str	r0, [r6, #12]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1e4      	bne.n	800cb1e <_Balloc+0x2e>
 800cb54:	2000      	movs	r0, #0
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	6802      	ldr	r2, [r0, #0]
 800cb5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb64:	e7f7      	b.n	800cb56 <_Balloc+0x66>
 800cb66:	bf00      	nop
 800cb68:	0800f646 	.word	0x0800f646
 800cb6c:	0800f6c6 	.word	0x0800f6c6

0800cb70 <_Bfree>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	69c6      	ldr	r6, [r0, #28]
 800cb74:	4605      	mov	r5, r0
 800cb76:	460c      	mov	r4, r1
 800cb78:	b976      	cbnz	r6, 800cb98 <_Bfree+0x28>
 800cb7a:	2010      	movs	r0, #16
 800cb7c:	f7ff ff02 	bl	800c984 <malloc>
 800cb80:	4602      	mov	r2, r0
 800cb82:	61e8      	str	r0, [r5, #28]
 800cb84:	b920      	cbnz	r0, 800cb90 <_Bfree+0x20>
 800cb86:	4b09      	ldr	r3, [pc, #36]	@ (800cbac <_Bfree+0x3c>)
 800cb88:	4809      	ldr	r0, [pc, #36]	@ (800cbb0 <_Bfree+0x40>)
 800cb8a:	218f      	movs	r1, #143	@ 0x8f
 800cb8c:	f001 fd30 	bl	800e5f0 <__assert_func>
 800cb90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb94:	6006      	str	r6, [r0, #0]
 800cb96:	60c6      	str	r6, [r0, #12]
 800cb98:	b13c      	cbz	r4, 800cbaa <_Bfree+0x3a>
 800cb9a:	69eb      	ldr	r3, [r5, #28]
 800cb9c:	6862      	ldr	r2, [r4, #4]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cba4:	6021      	str	r1, [r4, #0]
 800cba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbaa:	bd70      	pop	{r4, r5, r6, pc}
 800cbac:	0800f646 	.word	0x0800f646
 800cbb0:	0800f6c6 	.word	0x0800f6c6

0800cbb4 <__multadd>:
 800cbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb8:	690d      	ldr	r5, [r1, #16]
 800cbba:	4607      	mov	r7, r0
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	461e      	mov	r6, r3
 800cbc0:	f101 0c14 	add.w	ip, r1, #20
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	f8dc 3000 	ldr.w	r3, [ip]
 800cbca:	b299      	uxth	r1, r3
 800cbcc:	fb02 6101 	mla	r1, r2, r1, r6
 800cbd0:	0c1e      	lsrs	r6, r3, #16
 800cbd2:	0c0b      	lsrs	r3, r1, #16
 800cbd4:	fb02 3306 	mla	r3, r2, r6, r3
 800cbd8:	b289      	uxth	r1, r1
 800cbda:	3001      	adds	r0, #1
 800cbdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbe0:	4285      	cmp	r5, r0
 800cbe2:	f84c 1b04 	str.w	r1, [ip], #4
 800cbe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbea:	dcec      	bgt.n	800cbc6 <__multadd+0x12>
 800cbec:	b30e      	cbz	r6, 800cc32 <__multadd+0x7e>
 800cbee:	68a3      	ldr	r3, [r4, #8]
 800cbf0:	42ab      	cmp	r3, r5
 800cbf2:	dc19      	bgt.n	800cc28 <__multadd+0x74>
 800cbf4:	6861      	ldr	r1, [r4, #4]
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	3101      	adds	r1, #1
 800cbfa:	f7ff ff79 	bl	800caf0 <_Balloc>
 800cbfe:	4680      	mov	r8, r0
 800cc00:	b928      	cbnz	r0, 800cc0e <__multadd+0x5a>
 800cc02:	4602      	mov	r2, r0
 800cc04:	4b0c      	ldr	r3, [pc, #48]	@ (800cc38 <__multadd+0x84>)
 800cc06:	480d      	ldr	r0, [pc, #52]	@ (800cc3c <__multadd+0x88>)
 800cc08:	21ba      	movs	r1, #186	@ 0xba
 800cc0a:	f001 fcf1 	bl	800e5f0 <__assert_func>
 800cc0e:	6922      	ldr	r2, [r4, #16]
 800cc10:	3202      	adds	r2, #2
 800cc12:	f104 010c 	add.w	r1, r4, #12
 800cc16:	0092      	lsls	r2, r2, #2
 800cc18:	300c      	adds	r0, #12
 800cc1a:	f7ff f808 	bl	800bc2e <memcpy>
 800cc1e:	4621      	mov	r1, r4
 800cc20:	4638      	mov	r0, r7
 800cc22:	f7ff ffa5 	bl	800cb70 <_Bfree>
 800cc26:	4644      	mov	r4, r8
 800cc28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc2c:	3501      	adds	r5, #1
 800cc2e:	615e      	str	r6, [r3, #20]
 800cc30:	6125      	str	r5, [r4, #16]
 800cc32:	4620      	mov	r0, r4
 800cc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc38:	0800f6b5 	.word	0x0800f6b5
 800cc3c:	0800f6c6 	.word	0x0800f6c6

0800cc40 <__s2b>:
 800cc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc44:	460c      	mov	r4, r1
 800cc46:	4615      	mov	r5, r2
 800cc48:	461f      	mov	r7, r3
 800cc4a:	2209      	movs	r2, #9
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	4606      	mov	r6, r0
 800cc50:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc54:	2100      	movs	r1, #0
 800cc56:	2201      	movs	r2, #1
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	db09      	blt.n	800cc70 <__s2b+0x30>
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7ff ff47 	bl	800caf0 <_Balloc>
 800cc62:	b940      	cbnz	r0, 800cc76 <__s2b+0x36>
 800cc64:	4602      	mov	r2, r0
 800cc66:	4b19      	ldr	r3, [pc, #100]	@ (800cccc <__s2b+0x8c>)
 800cc68:	4819      	ldr	r0, [pc, #100]	@ (800ccd0 <__s2b+0x90>)
 800cc6a:	21d3      	movs	r1, #211	@ 0xd3
 800cc6c:	f001 fcc0 	bl	800e5f0 <__assert_func>
 800cc70:	0052      	lsls	r2, r2, #1
 800cc72:	3101      	adds	r1, #1
 800cc74:	e7f0      	b.n	800cc58 <__s2b+0x18>
 800cc76:	9b08      	ldr	r3, [sp, #32]
 800cc78:	6143      	str	r3, [r0, #20]
 800cc7a:	2d09      	cmp	r5, #9
 800cc7c:	f04f 0301 	mov.w	r3, #1
 800cc80:	6103      	str	r3, [r0, #16]
 800cc82:	dd16      	ble.n	800ccb2 <__s2b+0x72>
 800cc84:	f104 0909 	add.w	r9, r4, #9
 800cc88:	46c8      	mov	r8, r9
 800cc8a:	442c      	add	r4, r5
 800cc8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc90:	4601      	mov	r1, r0
 800cc92:	3b30      	subs	r3, #48	@ 0x30
 800cc94:	220a      	movs	r2, #10
 800cc96:	4630      	mov	r0, r6
 800cc98:	f7ff ff8c 	bl	800cbb4 <__multadd>
 800cc9c:	45a0      	cmp	r8, r4
 800cc9e:	d1f5      	bne.n	800cc8c <__s2b+0x4c>
 800cca0:	f1a5 0408 	sub.w	r4, r5, #8
 800cca4:	444c      	add	r4, r9
 800cca6:	1b2d      	subs	r5, r5, r4
 800cca8:	1963      	adds	r3, r4, r5
 800ccaa:	42bb      	cmp	r3, r7
 800ccac:	db04      	blt.n	800ccb8 <__s2b+0x78>
 800ccae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb2:	340a      	adds	r4, #10
 800ccb4:	2509      	movs	r5, #9
 800ccb6:	e7f6      	b.n	800cca6 <__s2b+0x66>
 800ccb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	3b30      	subs	r3, #48	@ 0x30
 800ccc0:	220a      	movs	r2, #10
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7ff ff76 	bl	800cbb4 <__multadd>
 800ccc8:	e7ee      	b.n	800cca8 <__s2b+0x68>
 800ccca:	bf00      	nop
 800cccc:	0800f6b5 	.word	0x0800f6b5
 800ccd0:	0800f6c6 	.word	0x0800f6c6

0800ccd4 <__hi0bits>:
 800ccd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccd8:	4603      	mov	r3, r0
 800ccda:	bf36      	itet	cc
 800ccdc:	0403      	lslcc	r3, r0, #16
 800ccde:	2000      	movcs	r0, #0
 800cce0:	2010      	movcc	r0, #16
 800cce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cce6:	bf3c      	itt	cc
 800cce8:	021b      	lslcc	r3, r3, #8
 800ccea:	3008      	addcc	r0, #8
 800ccec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccf0:	bf3c      	itt	cc
 800ccf2:	011b      	lslcc	r3, r3, #4
 800ccf4:	3004      	addcc	r0, #4
 800ccf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccfa:	bf3c      	itt	cc
 800ccfc:	009b      	lslcc	r3, r3, #2
 800ccfe:	3002      	addcc	r0, #2
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	db05      	blt.n	800cd10 <__hi0bits+0x3c>
 800cd04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd08:	f100 0001 	add.w	r0, r0, #1
 800cd0c:	bf08      	it	eq
 800cd0e:	2020      	moveq	r0, #32
 800cd10:	4770      	bx	lr

0800cd12 <__lo0bits>:
 800cd12:	6803      	ldr	r3, [r0, #0]
 800cd14:	4602      	mov	r2, r0
 800cd16:	f013 0007 	ands.w	r0, r3, #7
 800cd1a:	d00b      	beq.n	800cd34 <__lo0bits+0x22>
 800cd1c:	07d9      	lsls	r1, r3, #31
 800cd1e:	d421      	bmi.n	800cd64 <__lo0bits+0x52>
 800cd20:	0798      	lsls	r0, r3, #30
 800cd22:	bf49      	itett	mi
 800cd24:	085b      	lsrmi	r3, r3, #1
 800cd26:	089b      	lsrpl	r3, r3, #2
 800cd28:	2001      	movmi	r0, #1
 800cd2a:	6013      	strmi	r3, [r2, #0]
 800cd2c:	bf5c      	itt	pl
 800cd2e:	6013      	strpl	r3, [r2, #0]
 800cd30:	2002      	movpl	r0, #2
 800cd32:	4770      	bx	lr
 800cd34:	b299      	uxth	r1, r3
 800cd36:	b909      	cbnz	r1, 800cd3c <__lo0bits+0x2a>
 800cd38:	0c1b      	lsrs	r3, r3, #16
 800cd3a:	2010      	movs	r0, #16
 800cd3c:	b2d9      	uxtb	r1, r3
 800cd3e:	b909      	cbnz	r1, 800cd44 <__lo0bits+0x32>
 800cd40:	3008      	adds	r0, #8
 800cd42:	0a1b      	lsrs	r3, r3, #8
 800cd44:	0719      	lsls	r1, r3, #28
 800cd46:	bf04      	itt	eq
 800cd48:	091b      	lsreq	r3, r3, #4
 800cd4a:	3004      	addeq	r0, #4
 800cd4c:	0799      	lsls	r1, r3, #30
 800cd4e:	bf04      	itt	eq
 800cd50:	089b      	lsreq	r3, r3, #2
 800cd52:	3002      	addeq	r0, #2
 800cd54:	07d9      	lsls	r1, r3, #31
 800cd56:	d403      	bmi.n	800cd60 <__lo0bits+0x4e>
 800cd58:	085b      	lsrs	r3, r3, #1
 800cd5a:	f100 0001 	add.w	r0, r0, #1
 800cd5e:	d003      	beq.n	800cd68 <__lo0bits+0x56>
 800cd60:	6013      	str	r3, [r2, #0]
 800cd62:	4770      	bx	lr
 800cd64:	2000      	movs	r0, #0
 800cd66:	4770      	bx	lr
 800cd68:	2020      	movs	r0, #32
 800cd6a:	4770      	bx	lr

0800cd6c <__i2b>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	460c      	mov	r4, r1
 800cd70:	2101      	movs	r1, #1
 800cd72:	f7ff febd 	bl	800caf0 <_Balloc>
 800cd76:	4602      	mov	r2, r0
 800cd78:	b928      	cbnz	r0, 800cd86 <__i2b+0x1a>
 800cd7a:	4b05      	ldr	r3, [pc, #20]	@ (800cd90 <__i2b+0x24>)
 800cd7c:	4805      	ldr	r0, [pc, #20]	@ (800cd94 <__i2b+0x28>)
 800cd7e:	f240 1145 	movw	r1, #325	@ 0x145
 800cd82:	f001 fc35 	bl	800e5f0 <__assert_func>
 800cd86:	2301      	movs	r3, #1
 800cd88:	6144      	str	r4, [r0, #20]
 800cd8a:	6103      	str	r3, [r0, #16]
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	bf00      	nop
 800cd90:	0800f6b5 	.word	0x0800f6b5
 800cd94:	0800f6c6 	.word	0x0800f6c6

0800cd98 <__multiply>:
 800cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	690a      	ldr	r2, [r1, #16]
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	bfa8      	it	ge
 800cda6:	4623      	movge	r3, r4
 800cda8:	460f      	mov	r7, r1
 800cdaa:	bfa4      	itt	ge
 800cdac:	460c      	movge	r4, r1
 800cdae:	461f      	movge	r7, r3
 800cdb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cdb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cdb8:	68a3      	ldr	r3, [r4, #8]
 800cdba:	6861      	ldr	r1, [r4, #4]
 800cdbc:	eb0a 0609 	add.w	r6, sl, r9
 800cdc0:	42b3      	cmp	r3, r6
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	bfb8      	it	lt
 800cdc6:	3101      	addlt	r1, #1
 800cdc8:	f7ff fe92 	bl	800caf0 <_Balloc>
 800cdcc:	b930      	cbnz	r0, 800cddc <__multiply+0x44>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	4b44      	ldr	r3, [pc, #272]	@ (800cee4 <__multiply+0x14c>)
 800cdd2:	4845      	ldr	r0, [pc, #276]	@ (800cee8 <__multiply+0x150>)
 800cdd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdd8:	f001 fc0a 	bl	800e5f0 <__assert_func>
 800cddc:	f100 0514 	add.w	r5, r0, #20
 800cde0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cde4:	462b      	mov	r3, r5
 800cde6:	2200      	movs	r2, #0
 800cde8:	4543      	cmp	r3, r8
 800cdea:	d321      	bcc.n	800ce30 <__multiply+0x98>
 800cdec:	f107 0114 	add.w	r1, r7, #20
 800cdf0:	f104 0214 	add.w	r2, r4, #20
 800cdf4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdf8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdfc:	9302      	str	r3, [sp, #8]
 800cdfe:	1b13      	subs	r3, r2, r4
 800ce00:	3b15      	subs	r3, #21
 800ce02:	f023 0303 	bic.w	r3, r3, #3
 800ce06:	3304      	adds	r3, #4
 800ce08:	f104 0715 	add.w	r7, r4, #21
 800ce0c:	42ba      	cmp	r2, r7
 800ce0e:	bf38      	it	cc
 800ce10:	2304      	movcc	r3, #4
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	9b02      	ldr	r3, [sp, #8]
 800ce16:	9103      	str	r1, [sp, #12]
 800ce18:	428b      	cmp	r3, r1
 800ce1a:	d80c      	bhi.n	800ce36 <__multiply+0x9e>
 800ce1c:	2e00      	cmp	r6, #0
 800ce1e:	dd03      	ble.n	800ce28 <__multiply+0x90>
 800ce20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d05b      	beq.n	800cee0 <__multiply+0x148>
 800ce28:	6106      	str	r6, [r0, #16]
 800ce2a:	b005      	add	sp, #20
 800ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce30:	f843 2b04 	str.w	r2, [r3], #4
 800ce34:	e7d8      	b.n	800cde8 <__multiply+0x50>
 800ce36:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce3a:	f1ba 0f00 	cmp.w	sl, #0
 800ce3e:	d024      	beq.n	800ce8a <__multiply+0xf2>
 800ce40:	f104 0e14 	add.w	lr, r4, #20
 800ce44:	46a9      	mov	r9, r5
 800ce46:	f04f 0c00 	mov.w	ip, #0
 800ce4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce4e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce52:	fa1f fb87 	uxth.w	fp, r7
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce60:	f8d9 7000 	ldr.w	r7, [r9]
 800ce64:	4463      	add	r3, ip
 800ce66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce6a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce78:	4572      	cmp	r2, lr
 800ce7a:	f849 3b04 	str.w	r3, [r9], #4
 800ce7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce82:	d8e2      	bhi.n	800ce4a <__multiply+0xb2>
 800ce84:	9b01      	ldr	r3, [sp, #4]
 800ce86:	f845 c003 	str.w	ip, [r5, r3]
 800ce8a:	9b03      	ldr	r3, [sp, #12]
 800ce8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce90:	3104      	adds	r1, #4
 800ce92:	f1b9 0f00 	cmp.w	r9, #0
 800ce96:	d021      	beq.n	800cedc <__multiply+0x144>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	f104 0c14 	add.w	ip, r4, #20
 800ce9e:	46ae      	mov	lr, r5
 800cea0:	f04f 0a00 	mov.w	sl, #0
 800cea4:	f8bc b000 	ldrh.w	fp, [ip]
 800cea8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ceac:	fb09 770b 	mla	r7, r9, fp, r7
 800ceb0:	4457      	add	r7, sl
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ceb8:	f84e 3b04 	str.w	r3, [lr], #4
 800cebc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cec4:	f8be 3000 	ldrh.w	r3, [lr]
 800cec8:	fb09 330a 	mla	r3, r9, sl, r3
 800cecc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ced0:	4562      	cmp	r2, ip
 800ced2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ced6:	d8e5      	bhi.n	800cea4 <__multiply+0x10c>
 800ced8:	9f01      	ldr	r7, [sp, #4]
 800ceda:	51eb      	str	r3, [r5, r7]
 800cedc:	3504      	adds	r5, #4
 800cede:	e799      	b.n	800ce14 <__multiply+0x7c>
 800cee0:	3e01      	subs	r6, #1
 800cee2:	e79b      	b.n	800ce1c <__multiply+0x84>
 800cee4:	0800f6b5 	.word	0x0800f6b5
 800cee8:	0800f6c6 	.word	0x0800f6c6

0800ceec <__pow5mult>:
 800ceec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef0:	4615      	mov	r5, r2
 800cef2:	f012 0203 	ands.w	r2, r2, #3
 800cef6:	4607      	mov	r7, r0
 800cef8:	460e      	mov	r6, r1
 800cefa:	d007      	beq.n	800cf0c <__pow5mult+0x20>
 800cefc:	4c25      	ldr	r4, [pc, #148]	@ (800cf94 <__pow5mult+0xa8>)
 800cefe:	3a01      	subs	r2, #1
 800cf00:	2300      	movs	r3, #0
 800cf02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf06:	f7ff fe55 	bl	800cbb4 <__multadd>
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	10ad      	asrs	r5, r5, #2
 800cf0e:	d03d      	beq.n	800cf8c <__pow5mult+0xa0>
 800cf10:	69fc      	ldr	r4, [r7, #28]
 800cf12:	b97c      	cbnz	r4, 800cf34 <__pow5mult+0x48>
 800cf14:	2010      	movs	r0, #16
 800cf16:	f7ff fd35 	bl	800c984 <malloc>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	61f8      	str	r0, [r7, #28]
 800cf1e:	b928      	cbnz	r0, 800cf2c <__pow5mult+0x40>
 800cf20:	4b1d      	ldr	r3, [pc, #116]	@ (800cf98 <__pow5mult+0xac>)
 800cf22:	481e      	ldr	r0, [pc, #120]	@ (800cf9c <__pow5mult+0xb0>)
 800cf24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf28:	f001 fb62 	bl	800e5f0 <__assert_func>
 800cf2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf30:	6004      	str	r4, [r0, #0]
 800cf32:	60c4      	str	r4, [r0, #12]
 800cf34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf3c:	b94c      	cbnz	r4, 800cf52 <__pow5mult+0x66>
 800cf3e:	f240 2171 	movw	r1, #625	@ 0x271
 800cf42:	4638      	mov	r0, r7
 800cf44:	f7ff ff12 	bl	800cd6c <__i2b>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf4e:	4604      	mov	r4, r0
 800cf50:	6003      	str	r3, [r0, #0]
 800cf52:	f04f 0900 	mov.w	r9, #0
 800cf56:	07eb      	lsls	r3, r5, #31
 800cf58:	d50a      	bpl.n	800cf70 <__pow5mult+0x84>
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	4638      	mov	r0, r7
 800cf60:	f7ff ff1a 	bl	800cd98 <__multiply>
 800cf64:	4631      	mov	r1, r6
 800cf66:	4680      	mov	r8, r0
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f7ff fe01 	bl	800cb70 <_Bfree>
 800cf6e:	4646      	mov	r6, r8
 800cf70:	106d      	asrs	r5, r5, #1
 800cf72:	d00b      	beq.n	800cf8c <__pow5mult+0xa0>
 800cf74:	6820      	ldr	r0, [r4, #0]
 800cf76:	b938      	cbnz	r0, 800cf88 <__pow5mult+0x9c>
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f7ff ff0b 	bl	800cd98 <__multiply>
 800cf82:	6020      	str	r0, [r4, #0]
 800cf84:	f8c0 9000 	str.w	r9, [r0]
 800cf88:	4604      	mov	r4, r0
 800cf8a:	e7e4      	b.n	800cf56 <__pow5mult+0x6a>
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf92:	bf00      	nop
 800cf94:	0800f720 	.word	0x0800f720
 800cf98:	0800f646 	.word	0x0800f646
 800cf9c:	0800f6c6 	.word	0x0800f6c6

0800cfa0 <__lshift>:
 800cfa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa4:	460c      	mov	r4, r1
 800cfa6:	6849      	ldr	r1, [r1, #4]
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfae:	68a3      	ldr	r3, [r4, #8]
 800cfb0:	4607      	mov	r7, r0
 800cfb2:	4691      	mov	r9, r2
 800cfb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfb8:	f108 0601 	add.w	r6, r8, #1
 800cfbc:	42b3      	cmp	r3, r6
 800cfbe:	db0b      	blt.n	800cfd8 <__lshift+0x38>
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff fd95 	bl	800caf0 <_Balloc>
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	b948      	cbnz	r0, 800cfde <__lshift+0x3e>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	4b28      	ldr	r3, [pc, #160]	@ (800d070 <__lshift+0xd0>)
 800cfce:	4829      	ldr	r0, [pc, #164]	@ (800d074 <__lshift+0xd4>)
 800cfd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfd4:	f001 fb0c 	bl	800e5f0 <__assert_func>
 800cfd8:	3101      	adds	r1, #1
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	e7ee      	b.n	800cfbc <__lshift+0x1c>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f100 0114 	add.w	r1, r0, #20
 800cfe4:	f100 0210 	add.w	r2, r0, #16
 800cfe8:	4618      	mov	r0, r3
 800cfea:	4553      	cmp	r3, sl
 800cfec:	db33      	blt.n	800d056 <__lshift+0xb6>
 800cfee:	6920      	ldr	r0, [r4, #16]
 800cff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cff4:	f104 0314 	add.w	r3, r4, #20
 800cff8:	f019 091f 	ands.w	r9, r9, #31
 800cffc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d000:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d004:	d02b      	beq.n	800d05e <__lshift+0xbe>
 800d006:	f1c9 0e20 	rsb	lr, r9, #32
 800d00a:	468a      	mov	sl, r1
 800d00c:	2200      	movs	r2, #0
 800d00e:	6818      	ldr	r0, [r3, #0]
 800d010:	fa00 f009 	lsl.w	r0, r0, r9
 800d014:	4310      	orrs	r0, r2
 800d016:	f84a 0b04 	str.w	r0, [sl], #4
 800d01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01e:	459c      	cmp	ip, r3
 800d020:	fa22 f20e 	lsr.w	r2, r2, lr
 800d024:	d8f3      	bhi.n	800d00e <__lshift+0x6e>
 800d026:	ebac 0304 	sub.w	r3, ip, r4
 800d02a:	3b15      	subs	r3, #21
 800d02c:	f023 0303 	bic.w	r3, r3, #3
 800d030:	3304      	adds	r3, #4
 800d032:	f104 0015 	add.w	r0, r4, #21
 800d036:	4584      	cmp	ip, r0
 800d038:	bf38      	it	cc
 800d03a:	2304      	movcc	r3, #4
 800d03c:	50ca      	str	r2, [r1, r3]
 800d03e:	b10a      	cbz	r2, 800d044 <__lshift+0xa4>
 800d040:	f108 0602 	add.w	r6, r8, #2
 800d044:	3e01      	subs	r6, #1
 800d046:	4638      	mov	r0, r7
 800d048:	612e      	str	r6, [r5, #16]
 800d04a:	4621      	mov	r1, r4
 800d04c:	f7ff fd90 	bl	800cb70 <_Bfree>
 800d050:	4628      	mov	r0, r5
 800d052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d056:	f842 0f04 	str.w	r0, [r2, #4]!
 800d05a:	3301      	adds	r3, #1
 800d05c:	e7c5      	b.n	800cfea <__lshift+0x4a>
 800d05e:	3904      	subs	r1, #4
 800d060:	f853 2b04 	ldr.w	r2, [r3], #4
 800d064:	f841 2f04 	str.w	r2, [r1, #4]!
 800d068:	459c      	cmp	ip, r3
 800d06a:	d8f9      	bhi.n	800d060 <__lshift+0xc0>
 800d06c:	e7ea      	b.n	800d044 <__lshift+0xa4>
 800d06e:	bf00      	nop
 800d070:	0800f6b5 	.word	0x0800f6b5
 800d074:	0800f6c6 	.word	0x0800f6c6

0800d078 <__mcmp>:
 800d078:	690a      	ldr	r2, [r1, #16]
 800d07a:	4603      	mov	r3, r0
 800d07c:	6900      	ldr	r0, [r0, #16]
 800d07e:	1a80      	subs	r0, r0, r2
 800d080:	b530      	push	{r4, r5, lr}
 800d082:	d10e      	bne.n	800d0a2 <__mcmp+0x2a>
 800d084:	3314      	adds	r3, #20
 800d086:	3114      	adds	r1, #20
 800d088:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d08c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d090:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d094:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d098:	4295      	cmp	r5, r2
 800d09a:	d003      	beq.n	800d0a4 <__mcmp+0x2c>
 800d09c:	d205      	bcs.n	800d0aa <__mcmp+0x32>
 800d09e:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a2:	bd30      	pop	{r4, r5, pc}
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	d3f3      	bcc.n	800d090 <__mcmp+0x18>
 800d0a8:	e7fb      	b.n	800d0a2 <__mcmp+0x2a>
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	e7f9      	b.n	800d0a2 <__mcmp+0x2a>
	...

0800d0b0 <__mdiff>:
 800d0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	4689      	mov	r9, r1
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	4648      	mov	r0, r9
 800d0bc:	4614      	mov	r4, r2
 800d0be:	f7ff ffdb 	bl	800d078 <__mcmp>
 800d0c2:	1e05      	subs	r5, r0, #0
 800d0c4:	d112      	bne.n	800d0ec <__mdiff+0x3c>
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f7ff fd11 	bl	800caf0 <_Balloc>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	b928      	cbnz	r0, 800d0de <__mdiff+0x2e>
 800d0d2:	4b3f      	ldr	r3, [pc, #252]	@ (800d1d0 <__mdiff+0x120>)
 800d0d4:	f240 2137 	movw	r1, #567	@ 0x237
 800d0d8:	483e      	ldr	r0, [pc, #248]	@ (800d1d4 <__mdiff+0x124>)
 800d0da:	f001 fa89 	bl	800e5f0 <__assert_func>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	b003      	add	sp, #12
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	bfbc      	itt	lt
 800d0ee:	464b      	movlt	r3, r9
 800d0f0:	46a1      	movlt	r9, r4
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0f8:	bfba      	itte	lt
 800d0fa:	461c      	movlt	r4, r3
 800d0fc:	2501      	movlt	r5, #1
 800d0fe:	2500      	movge	r5, #0
 800d100:	f7ff fcf6 	bl	800caf0 <_Balloc>
 800d104:	4602      	mov	r2, r0
 800d106:	b918      	cbnz	r0, 800d110 <__mdiff+0x60>
 800d108:	4b31      	ldr	r3, [pc, #196]	@ (800d1d0 <__mdiff+0x120>)
 800d10a:	f240 2145 	movw	r1, #581	@ 0x245
 800d10e:	e7e3      	b.n	800d0d8 <__mdiff+0x28>
 800d110:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d114:	6926      	ldr	r6, [r4, #16]
 800d116:	60c5      	str	r5, [r0, #12]
 800d118:	f109 0310 	add.w	r3, r9, #16
 800d11c:	f109 0514 	add.w	r5, r9, #20
 800d120:	f104 0e14 	add.w	lr, r4, #20
 800d124:	f100 0b14 	add.w	fp, r0, #20
 800d128:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d12c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d130:	9301      	str	r3, [sp, #4]
 800d132:	46d9      	mov	r9, fp
 800d134:	f04f 0c00 	mov.w	ip, #0
 800d138:	9b01      	ldr	r3, [sp, #4]
 800d13a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d13e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	fa1f f38a 	uxth.w	r3, sl
 800d148:	4619      	mov	r1, r3
 800d14a:	b283      	uxth	r3, r0
 800d14c:	1acb      	subs	r3, r1, r3
 800d14e:	0c00      	lsrs	r0, r0, #16
 800d150:	4463      	add	r3, ip
 800d152:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d156:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d160:	4576      	cmp	r6, lr
 800d162:	f849 3b04 	str.w	r3, [r9], #4
 800d166:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d16a:	d8e5      	bhi.n	800d138 <__mdiff+0x88>
 800d16c:	1b33      	subs	r3, r6, r4
 800d16e:	3b15      	subs	r3, #21
 800d170:	f023 0303 	bic.w	r3, r3, #3
 800d174:	3415      	adds	r4, #21
 800d176:	3304      	adds	r3, #4
 800d178:	42a6      	cmp	r6, r4
 800d17a:	bf38      	it	cc
 800d17c:	2304      	movcc	r3, #4
 800d17e:	441d      	add	r5, r3
 800d180:	445b      	add	r3, fp
 800d182:	461e      	mov	r6, r3
 800d184:	462c      	mov	r4, r5
 800d186:	4544      	cmp	r4, r8
 800d188:	d30e      	bcc.n	800d1a8 <__mdiff+0xf8>
 800d18a:	f108 0103 	add.w	r1, r8, #3
 800d18e:	1b49      	subs	r1, r1, r5
 800d190:	f021 0103 	bic.w	r1, r1, #3
 800d194:	3d03      	subs	r5, #3
 800d196:	45a8      	cmp	r8, r5
 800d198:	bf38      	it	cc
 800d19a:	2100      	movcc	r1, #0
 800d19c:	440b      	add	r3, r1
 800d19e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1a2:	b191      	cbz	r1, 800d1ca <__mdiff+0x11a>
 800d1a4:	6117      	str	r7, [r2, #16]
 800d1a6:	e79d      	b.n	800d0e4 <__mdiff+0x34>
 800d1a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1ac:	46e6      	mov	lr, ip
 800d1ae:	0c08      	lsrs	r0, r1, #16
 800d1b0:	fa1c fc81 	uxtah	ip, ip, r1
 800d1b4:	4471      	add	r1, lr
 800d1b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1ba:	b289      	uxth	r1, r1
 800d1bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1c0:	f846 1b04 	str.w	r1, [r6], #4
 800d1c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1c8:	e7dd      	b.n	800d186 <__mdiff+0xd6>
 800d1ca:	3f01      	subs	r7, #1
 800d1cc:	e7e7      	b.n	800d19e <__mdiff+0xee>
 800d1ce:	bf00      	nop
 800d1d0:	0800f6b5 	.word	0x0800f6b5
 800d1d4:	0800f6c6 	.word	0x0800f6c6

0800d1d8 <__ulp>:
 800d1d8:	b082      	sub	sp, #8
 800d1da:	ed8d 0b00 	vstr	d0, [sp]
 800d1de:	9a01      	ldr	r2, [sp, #4]
 800d1e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d220 <__ulp+0x48>)
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dc08      	bgt.n	800d1fe <__ulp+0x26>
 800d1ec:	425b      	negs	r3, r3
 800d1ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d1f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1f6:	da04      	bge.n	800d202 <__ulp+0x2a>
 800d1f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1fc:	4113      	asrs	r3, r2
 800d1fe:	2200      	movs	r2, #0
 800d200:	e008      	b.n	800d214 <__ulp+0x3c>
 800d202:	f1a2 0314 	sub.w	r3, r2, #20
 800d206:	2b1e      	cmp	r3, #30
 800d208:	bfda      	itte	le
 800d20a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d20e:	40da      	lsrle	r2, r3
 800d210:	2201      	movgt	r2, #1
 800d212:	2300      	movs	r3, #0
 800d214:	4619      	mov	r1, r3
 800d216:	4610      	mov	r0, r2
 800d218:	ec41 0b10 	vmov	d0, r0, r1
 800d21c:	b002      	add	sp, #8
 800d21e:	4770      	bx	lr
 800d220:	7ff00000 	.word	0x7ff00000

0800d224 <__b2d>:
 800d224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d228:	6906      	ldr	r6, [r0, #16]
 800d22a:	f100 0814 	add.w	r8, r0, #20
 800d22e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d232:	1f37      	subs	r7, r6, #4
 800d234:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d238:	4610      	mov	r0, r2
 800d23a:	f7ff fd4b 	bl	800ccd4 <__hi0bits>
 800d23e:	f1c0 0320 	rsb	r3, r0, #32
 800d242:	280a      	cmp	r0, #10
 800d244:	600b      	str	r3, [r1, #0]
 800d246:	491b      	ldr	r1, [pc, #108]	@ (800d2b4 <__b2d+0x90>)
 800d248:	dc15      	bgt.n	800d276 <__b2d+0x52>
 800d24a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d24e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d252:	45b8      	cmp	r8, r7
 800d254:	ea43 0501 	orr.w	r5, r3, r1
 800d258:	bf34      	ite	cc
 800d25a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d25e:	2300      	movcs	r3, #0
 800d260:	3015      	adds	r0, #21
 800d262:	fa02 f000 	lsl.w	r0, r2, r0
 800d266:	fa23 f30c 	lsr.w	r3, r3, ip
 800d26a:	4303      	orrs	r3, r0
 800d26c:	461c      	mov	r4, r3
 800d26e:	ec45 4b10 	vmov	d0, r4, r5
 800d272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d276:	45b8      	cmp	r8, r7
 800d278:	bf3a      	itte	cc
 800d27a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d27e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d282:	2300      	movcs	r3, #0
 800d284:	380b      	subs	r0, #11
 800d286:	d012      	beq.n	800d2ae <__b2d+0x8a>
 800d288:	f1c0 0120 	rsb	r1, r0, #32
 800d28c:	fa23 f401 	lsr.w	r4, r3, r1
 800d290:	4082      	lsls	r2, r0
 800d292:	4322      	orrs	r2, r4
 800d294:	4547      	cmp	r7, r8
 800d296:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d29a:	bf8c      	ite	hi
 800d29c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d2a0:	2200      	movls	r2, #0
 800d2a2:	4083      	lsls	r3, r0
 800d2a4:	40ca      	lsrs	r2, r1
 800d2a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	e7de      	b.n	800d26c <__b2d+0x48>
 800d2ae:	ea42 0501 	orr.w	r5, r2, r1
 800d2b2:	e7db      	b.n	800d26c <__b2d+0x48>
 800d2b4:	3ff00000 	.word	0x3ff00000

0800d2b8 <__d2b>:
 800d2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2bc:	460f      	mov	r7, r1
 800d2be:	2101      	movs	r1, #1
 800d2c0:	ec59 8b10 	vmov	r8, r9, d0
 800d2c4:	4616      	mov	r6, r2
 800d2c6:	f7ff fc13 	bl	800caf0 <_Balloc>
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	b930      	cbnz	r0, 800d2dc <__d2b+0x24>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	4b23      	ldr	r3, [pc, #140]	@ (800d360 <__d2b+0xa8>)
 800d2d2:	4824      	ldr	r0, [pc, #144]	@ (800d364 <__d2b+0xac>)
 800d2d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2d8:	f001 f98a 	bl	800e5f0 <__assert_func>
 800d2dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2e4:	b10d      	cbz	r5, 800d2ea <__d2b+0x32>
 800d2e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	f1b8 0300 	subs.w	r3, r8, #0
 800d2f0:	d023      	beq.n	800d33a <__d2b+0x82>
 800d2f2:	4668      	mov	r0, sp
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	f7ff fd0c 	bl	800cd12 <__lo0bits>
 800d2fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2fe:	b1d0      	cbz	r0, 800d336 <__d2b+0x7e>
 800d300:	f1c0 0320 	rsb	r3, r0, #32
 800d304:	fa02 f303 	lsl.w	r3, r2, r3
 800d308:	430b      	orrs	r3, r1
 800d30a:	40c2      	lsrs	r2, r0
 800d30c:	6163      	str	r3, [r4, #20]
 800d30e:	9201      	str	r2, [sp, #4]
 800d310:	9b01      	ldr	r3, [sp, #4]
 800d312:	61a3      	str	r3, [r4, #24]
 800d314:	2b00      	cmp	r3, #0
 800d316:	bf0c      	ite	eq
 800d318:	2201      	moveq	r2, #1
 800d31a:	2202      	movne	r2, #2
 800d31c:	6122      	str	r2, [r4, #16]
 800d31e:	b1a5      	cbz	r5, 800d34a <__d2b+0x92>
 800d320:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d324:	4405      	add	r5, r0
 800d326:	603d      	str	r5, [r7, #0]
 800d328:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d32c:	6030      	str	r0, [r6, #0]
 800d32e:	4620      	mov	r0, r4
 800d330:	b003      	add	sp, #12
 800d332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d336:	6161      	str	r1, [r4, #20]
 800d338:	e7ea      	b.n	800d310 <__d2b+0x58>
 800d33a:	a801      	add	r0, sp, #4
 800d33c:	f7ff fce9 	bl	800cd12 <__lo0bits>
 800d340:	9b01      	ldr	r3, [sp, #4]
 800d342:	6163      	str	r3, [r4, #20]
 800d344:	3020      	adds	r0, #32
 800d346:	2201      	movs	r2, #1
 800d348:	e7e8      	b.n	800d31c <__d2b+0x64>
 800d34a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d34e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d352:	6038      	str	r0, [r7, #0]
 800d354:	6918      	ldr	r0, [r3, #16]
 800d356:	f7ff fcbd 	bl	800ccd4 <__hi0bits>
 800d35a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d35e:	e7e5      	b.n	800d32c <__d2b+0x74>
 800d360:	0800f6b5 	.word	0x0800f6b5
 800d364:	0800f6c6 	.word	0x0800f6c6

0800d368 <__ratio>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	b085      	sub	sp, #20
 800d36e:	e9cd 1000 	strd	r1, r0, [sp]
 800d372:	a902      	add	r1, sp, #8
 800d374:	f7ff ff56 	bl	800d224 <__b2d>
 800d378:	9800      	ldr	r0, [sp, #0]
 800d37a:	a903      	add	r1, sp, #12
 800d37c:	ec55 4b10 	vmov	r4, r5, d0
 800d380:	f7ff ff50 	bl	800d224 <__b2d>
 800d384:	9b01      	ldr	r3, [sp, #4]
 800d386:	6919      	ldr	r1, [r3, #16]
 800d388:	9b00      	ldr	r3, [sp, #0]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	1ac9      	subs	r1, r1, r3
 800d38e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d392:	1a9b      	subs	r3, r3, r2
 800d394:	ec5b ab10 	vmov	sl, fp, d0
 800d398:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	bfce      	itee	gt
 800d3a0:	462a      	movgt	r2, r5
 800d3a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3a6:	465a      	movle	r2, fp
 800d3a8:	462f      	mov	r7, r5
 800d3aa:	46d9      	mov	r9, fp
 800d3ac:	bfcc      	ite	gt
 800d3ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d3b6:	464b      	mov	r3, r9
 800d3b8:	4652      	mov	r2, sl
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	4639      	mov	r1, r7
 800d3be:	f7f3 fa75 	bl	80008ac <__aeabi_ddiv>
 800d3c2:	ec41 0b10 	vmov	d0, r0, r1
 800d3c6:	b005      	add	sp, #20
 800d3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3cc <__copybits>:
 800d3cc:	3901      	subs	r1, #1
 800d3ce:	b570      	push	{r4, r5, r6, lr}
 800d3d0:	1149      	asrs	r1, r1, #5
 800d3d2:	6914      	ldr	r4, [r2, #16]
 800d3d4:	3101      	adds	r1, #1
 800d3d6:	f102 0314 	add.w	r3, r2, #20
 800d3da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3e2:	1f05      	subs	r5, r0, #4
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	d30c      	bcc.n	800d402 <__copybits+0x36>
 800d3e8:	1aa3      	subs	r3, r4, r2
 800d3ea:	3b11      	subs	r3, #17
 800d3ec:	f023 0303 	bic.w	r3, r3, #3
 800d3f0:	3211      	adds	r2, #17
 800d3f2:	42a2      	cmp	r2, r4
 800d3f4:	bf88      	it	hi
 800d3f6:	2300      	movhi	r3, #0
 800d3f8:	4418      	add	r0, r3
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4288      	cmp	r0, r1
 800d3fe:	d305      	bcc.n	800d40c <__copybits+0x40>
 800d400:	bd70      	pop	{r4, r5, r6, pc}
 800d402:	f853 6b04 	ldr.w	r6, [r3], #4
 800d406:	f845 6f04 	str.w	r6, [r5, #4]!
 800d40a:	e7eb      	b.n	800d3e4 <__copybits+0x18>
 800d40c:	f840 3b04 	str.w	r3, [r0], #4
 800d410:	e7f4      	b.n	800d3fc <__copybits+0x30>

0800d412 <__any_on>:
 800d412:	f100 0214 	add.w	r2, r0, #20
 800d416:	6900      	ldr	r0, [r0, #16]
 800d418:	114b      	asrs	r3, r1, #5
 800d41a:	4298      	cmp	r0, r3
 800d41c:	b510      	push	{r4, lr}
 800d41e:	db11      	blt.n	800d444 <__any_on+0x32>
 800d420:	dd0a      	ble.n	800d438 <__any_on+0x26>
 800d422:	f011 011f 	ands.w	r1, r1, #31
 800d426:	d007      	beq.n	800d438 <__any_on+0x26>
 800d428:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d42c:	fa24 f001 	lsr.w	r0, r4, r1
 800d430:	fa00 f101 	lsl.w	r1, r0, r1
 800d434:	428c      	cmp	r4, r1
 800d436:	d10b      	bne.n	800d450 <__any_on+0x3e>
 800d438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d803      	bhi.n	800d448 <__any_on+0x36>
 800d440:	2000      	movs	r0, #0
 800d442:	bd10      	pop	{r4, pc}
 800d444:	4603      	mov	r3, r0
 800d446:	e7f7      	b.n	800d438 <__any_on+0x26>
 800d448:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d44c:	2900      	cmp	r1, #0
 800d44e:	d0f5      	beq.n	800d43c <__any_on+0x2a>
 800d450:	2001      	movs	r0, #1
 800d452:	e7f6      	b.n	800d442 <__any_on+0x30>

0800d454 <sulp>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	4604      	mov	r4, r0
 800d458:	460d      	mov	r5, r1
 800d45a:	ec45 4b10 	vmov	d0, r4, r5
 800d45e:	4616      	mov	r6, r2
 800d460:	f7ff feba 	bl	800d1d8 <__ulp>
 800d464:	ec51 0b10 	vmov	r0, r1, d0
 800d468:	b17e      	cbz	r6, 800d48a <sulp+0x36>
 800d46a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d46e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d472:	2b00      	cmp	r3, #0
 800d474:	dd09      	ble.n	800d48a <sulp+0x36>
 800d476:	051b      	lsls	r3, r3, #20
 800d478:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d47c:	2400      	movs	r4, #0
 800d47e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d482:	4622      	mov	r2, r4
 800d484:	462b      	mov	r3, r5
 800d486:	f7f3 f8e7 	bl	8000658 <__aeabi_dmul>
 800d48a:	ec41 0b10 	vmov	d0, r0, r1
 800d48e:	bd70      	pop	{r4, r5, r6, pc}

0800d490 <_strtod_l>:
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	b09f      	sub	sp, #124	@ 0x7c
 800d496:	460c      	mov	r4, r1
 800d498:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d49a:	2200      	movs	r2, #0
 800d49c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d49e:	9005      	str	r0, [sp, #20]
 800d4a0:	f04f 0a00 	mov.w	sl, #0
 800d4a4:	f04f 0b00 	mov.w	fp, #0
 800d4a8:	460a      	mov	r2, r1
 800d4aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4ac:	7811      	ldrb	r1, [r2, #0]
 800d4ae:	292b      	cmp	r1, #43	@ 0x2b
 800d4b0:	d04a      	beq.n	800d548 <_strtod_l+0xb8>
 800d4b2:	d838      	bhi.n	800d526 <_strtod_l+0x96>
 800d4b4:	290d      	cmp	r1, #13
 800d4b6:	d832      	bhi.n	800d51e <_strtod_l+0x8e>
 800d4b8:	2908      	cmp	r1, #8
 800d4ba:	d832      	bhi.n	800d522 <_strtod_l+0x92>
 800d4bc:	2900      	cmp	r1, #0
 800d4be:	d03b      	beq.n	800d538 <_strtod_l+0xa8>
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d4c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d4c6:	782a      	ldrb	r2, [r5, #0]
 800d4c8:	2a30      	cmp	r2, #48	@ 0x30
 800d4ca:	f040 80b3 	bne.w	800d634 <_strtod_l+0x1a4>
 800d4ce:	786a      	ldrb	r2, [r5, #1]
 800d4d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4d4:	2a58      	cmp	r2, #88	@ 0x58
 800d4d6:	d16e      	bne.n	800d5b6 <_strtod_l+0x126>
 800d4d8:	9302      	str	r3, [sp, #8]
 800d4da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	ab1a      	add	r3, sp, #104	@ 0x68
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	4a8e      	ldr	r2, [pc, #568]	@ (800d71c <_strtod_l+0x28c>)
 800d4e4:	9805      	ldr	r0, [sp, #20]
 800d4e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d4e8:	a919      	add	r1, sp, #100	@ 0x64
 800d4ea:	f001 f91b 	bl	800e724 <__gethex>
 800d4ee:	f010 060f 	ands.w	r6, r0, #15
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	d005      	beq.n	800d502 <_strtod_l+0x72>
 800d4f6:	2e06      	cmp	r6, #6
 800d4f8:	d128      	bne.n	800d54c <_strtod_l+0xbc>
 800d4fa:	3501      	adds	r5, #1
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800d500:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d502:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d504:	2b00      	cmp	r3, #0
 800d506:	f040 858e 	bne.w	800e026 <_strtod_l+0xb96>
 800d50a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d50c:	b1cb      	cbz	r3, 800d542 <_strtod_l+0xb2>
 800d50e:	4652      	mov	r2, sl
 800d510:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d514:	ec43 2b10 	vmov	d0, r2, r3
 800d518:	b01f      	add	sp, #124	@ 0x7c
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	2920      	cmp	r1, #32
 800d520:	d1ce      	bne.n	800d4c0 <_strtod_l+0x30>
 800d522:	3201      	adds	r2, #1
 800d524:	e7c1      	b.n	800d4aa <_strtod_l+0x1a>
 800d526:	292d      	cmp	r1, #45	@ 0x2d
 800d528:	d1ca      	bne.n	800d4c0 <_strtod_l+0x30>
 800d52a:	2101      	movs	r1, #1
 800d52c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d52e:	1c51      	adds	r1, r2, #1
 800d530:	9119      	str	r1, [sp, #100]	@ 0x64
 800d532:	7852      	ldrb	r2, [r2, #1]
 800d534:	2a00      	cmp	r2, #0
 800d536:	d1c5      	bne.n	800d4c4 <_strtod_l+0x34>
 800d538:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d53a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f040 8570 	bne.w	800e022 <_strtod_l+0xb92>
 800d542:	4652      	mov	r2, sl
 800d544:	465b      	mov	r3, fp
 800d546:	e7e5      	b.n	800d514 <_strtod_l+0x84>
 800d548:	2100      	movs	r1, #0
 800d54a:	e7ef      	b.n	800d52c <_strtod_l+0x9c>
 800d54c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d54e:	b13a      	cbz	r2, 800d560 <_strtod_l+0xd0>
 800d550:	2135      	movs	r1, #53	@ 0x35
 800d552:	a81c      	add	r0, sp, #112	@ 0x70
 800d554:	f7ff ff3a 	bl	800d3cc <__copybits>
 800d558:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d55a:	9805      	ldr	r0, [sp, #20]
 800d55c:	f7ff fb08 	bl	800cb70 <_Bfree>
 800d560:	3e01      	subs	r6, #1
 800d562:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d564:	2e04      	cmp	r6, #4
 800d566:	d806      	bhi.n	800d576 <_strtod_l+0xe6>
 800d568:	e8df f006 	tbb	[pc, r6]
 800d56c:	201d0314 	.word	0x201d0314
 800d570:	14          	.byte	0x14
 800d571:	00          	.byte	0x00
 800d572:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d576:	05e1      	lsls	r1, r4, #23
 800d578:	bf48      	it	mi
 800d57a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d57e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d582:	0d1b      	lsrs	r3, r3, #20
 800d584:	051b      	lsls	r3, r3, #20
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1bb      	bne.n	800d502 <_strtod_l+0x72>
 800d58a:	f7fe fb23 	bl	800bbd4 <__errno>
 800d58e:	2322      	movs	r3, #34	@ 0x22
 800d590:	6003      	str	r3, [r0, #0]
 800d592:	e7b6      	b.n	800d502 <_strtod_l+0x72>
 800d594:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d598:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d59c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d5a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d5a4:	e7e7      	b.n	800d576 <_strtod_l+0xe6>
 800d5a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d724 <_strtod_l+0x294>
 800d5aa:	e7e4      	b.n	800d576 <_strtod_l+0xe6>
 800d5ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5b0:	f04f 3aff 	mov.w	sl, #4294967295
 800d5b4:	e7df      	b.n	800d576 <_strtod_l+0xe6>
 800d5b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5bc:	785b      	ldrb	r3, [r3, #1]
 800d5be:	2b30      	cmp	r3, #48	@ 0x30
 800d5c0:	d0f9      	beq.n	800d5b6 <_strtod_l+0x126>
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d09d      	beq.n	800d502 <_strtod_l+0x72>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	9308      	str	r3, [sp, #32]
 800d5d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5d4:	461f      	mov	r7, r3
 800d5d6:	220a      	movs	r2, #10
 800d5d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d5da:	7805      	ldrb	r5, [r0, #0]
 800d5dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d5e0:	b2d9      	uxtb	r1, r3
 800d5e2:	2909      	cmp	r1, #9
 800d5e4:	d928      	bls.n	800d638 <_strtod_l+0x1a8>
 800d5e6:	494e      	ldr	r1, [pc, #312]	@ (800d720 <_strtod_l+0x290>)
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f000 ffd5 	bl	800e598 <strncmp>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d032      	beq.n	800d658 <_strtod_l+0x1c8>
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	462a      	mov	r2, r5
 800d5f6:	4681      	mov	r9, r0
 800d5f8:	463d      	mov	r5, r7
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2a65      	cmp	r2, #101	@ 0x65
 800d5fe:	d001      	beq.n	800d604 <_strtod_l+0x174>
 800d600:	2a45      	cmp	r2, #69	@ 0x45
 800d602:	d114      	bne.n	800d62e <_strtod_l+0x19e>
 800d604:	b91d      	cbnz	r5, 800d60e <_strtod_l+0x17e>
 800d606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d608:	4302      	orrs	r2, r0
 800d60a:	d095      	beq.n	800d538 <_strtod_l+0xa8>
 800d60c:	2500      	movs	r5, #0
 800d60e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d610:	1c62      	adds	r2, r4, #1
 800d612:	9219      	str	r2, [sp, #100]	@ 0x64
 800d614:	7862      	ldrb	r2, [r4, #1]
 800d616:	2a2b      	cmp	r2, #43	@ 0x2b
 800d618:	d077      	beq.n	800d70a <_strtod_l+0x27a>
 800d61a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d61c:	d07b      	beq.n	800d716 <_strtod_l+0x286>
 800d61e:	f04f 0c00 	mov.w	ip, #0
 800d622:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d626:	2909      	cmp	r1, #9
 800d628:	f240 8082 	bls.w	800d730 <_strtod_l+0x2a0>
 800d62c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d62e:	f04f 0800 	mov.w	r8, #0
 800d632:	e0a2      	b.n	800d77a <_strtod_l+0x2ea>
 800d634:	2300      	movs	r3, #0
 800d636:	e7c7      	b.n	800d5c8 <_strtod_l+0x138>
 800d638:	2f08      	cmp	r7, #8
 800d63a:	bfd5      	itete	le
 800d63c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d63e:	9908      	ldrgt	r1, [sp, #32]
 800d640:	fb02 3301 	mlale	r3, r2, r1, r3
 800d644:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d648:	f100 0001 	add.w	r0, r0, #1
 800d64c:	bfd4      	ite	le
 800d64e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d650:	9308      	strgt	r3, [sp, #32]
 800d652:	3701      	adds	r7, #1
 800d654:	9019      	str	r0, [sp, #100]	@ 0x64
 800d656:	e7bf      	b.n	800d5d8 <_strtod_l+0x148>
 800d658:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d65e:	785a      	ldrb	r2, [r3, #1]
 800d660:	b37f      	cbz	r7, 800d6c2 <_strtod_l+0x232>
 800d662:	4681      	mov	r9, r0
 800d664:	463d      	mov	r5, r7
 800d666:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d66a:	2b09      	cmp	r3, #9
 800d66c:	d912      	bls.n	800d694 <_strtod_l+0x204>
 800d66e:	2301      	movs	r3, #1
 800d670:	e7c4      	b.n	800d5fc <_strtod_l+0x16c>
 800d672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	9219      	str	r2, [sp, #100]	@ 0x64
 800d678:	785a      	ldrb	r2, [r3, #1]
 800d67a:	3001      	adds	r0, #1
 800d67c:	2a30      	cmp	r2, #48	@ 0x30
 800d67e:	d0f8      	beq.n	800d672 <_strtod_l+0x1e2>
 800d680:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d684:	2b08      	cmp	r3, #8
 800d686:	f200 84d3 	bhi.w	800e030 <_strtod_l+0xba0>
 800d68a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d68c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d68e:	4681      	mov	r9, r0
 800d690:	2000      	movs	r0, #0
 800d692:	4605      	mov	r5, r0
 800d694:	3a30      	subs	r2, #48	@ 0x30
 800d696:	f100 0301 	add.w	r3, r0, #1
 800d69a:	d02a      	beq.n	800d6f2 <_strtod_l+0x262>
 800d69c:	4499      	add	r9, r3
 800d69e:	eb00 0c05 	add.w	ip, r0, r5
 800d6a2:	462b      	mov	r3, r5
 800d6a4:	210a      	movs	r1, #10
 800d6a6:	4563      	cmp	r3, ip
 800d6a8:	d10d      	bne.n	800d6c6 <_strtod_l+0x236>
 800d6aa:	1c69      	adds	r1, r5, #1
 800d6ac:	4401      	add	r1, r0
 800d6ae:	4428      	add	r0, r5
 800d6b0:	2808      	cmp	r0, #8
 800d6b2:	dc16      	bgt.n	800d6e2 <_strtod_l+0x252>
 800d6b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d6b6:	230a      	movs	r3, #10
 800d6b8:	fb03 2300 	mla	r3, r3, r0, r2
 800d6bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6be:	2300      	movs	r3, #0
 800d6c0:	e018      	b.n	800d6f4 <_strtod_l+0x264>
 800d6c2:	4638      	mov	r0, r7
 800d6c4:	e7da      	b.n	800d67c <_strtod_l+0x1ec>
 800d6c6:	2b08      	cmp	r3, #8
 800d6c8:	f103 0301 	add.w	r3, r3, #1
 800d6cc:	dc03      	bgt.n	800d6d6 <_strtod_l+0x246>
 800d6ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d6d0:	434e      	muls	r6, r1
 800d6d2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d6d4:	e7e7      	b.n	800d6a6 <_strtod_l+0x216>
 800d6d6:	2b10      	cmp	r3, #16
 800d6d8:	bfde      	ittt	le
 800d6da:	9e08      	ldrle	r6, [sp, #32]
 800d6dc:	434e      	mulle	r6, r1
 800d6de:	9608      	strle	r6, [sp, #32]
 800d6e0:	e7e1      	b.n	800d6a6 <_strtod_l+0x216>
 800d6e2:	280f      	cmp	r0, #15
 800d6e4:	dceb      	bgt.n	800d6be <_strtod_l+0x22e>
 800d6e6:	9808      	ldr	r0, [sp, #32]
 800d6e8:	230a      	movs	r3, #10
 800d6ea:	fb03 2300 	mla	r3, r3, r0, r2
 800d6ee:	9308      	str	r3, [sp, #32]
 800d6f0:	e7e5      	b.n	800d6be <_strtod_l+0x22e>
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6f6:	1c50      	adds	r0, r2, #1
 800d6f8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d6fa:	7852      	ldrb	r2, [r2, #1]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	460d      	mov	r5, r1
 800d700:	e7b1      	b.n	800d666 <_strtod_l+0x1d6>
 800d702:	f04f 0900 	mov.w	r9, #0
 800d706:	2301      	movs	r3, #1
 800d708:	e77d      	b.n	800d606 <_strtod_l+0x176>
 800d70a:	f04f 0c00 	mov.w	ip, #0
 800d70e:	1ca2      	adds	r2, r4, #2
 800d710:	9219      	str	r2, [sp, #100]	@ 0x64
 800d712:	78a2      	ldrb	r2, [r4, #2]
 800d714:	e785      	b.n	800d622 <_strtod_l+0x192>
 800d716:	f04f 0c01 	mov.w	ip, #1
 800d71a:	e7f8      	b.n	800d70e <_strtod_l+0x27e>
 800d71c:	0800f838 	.word	0x0800f838
 800d720:	0800f820 	.word	0x0800f820
 800d724:	7ff00000 	.word	0x7ff00000
 800d728:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d72a:	1c51      	adds	r1, r2, #1
 800d72c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d72e:	7852      	ldrb	r2, [r2, #1]
 800d730:	2a30      	cmp	r2, #48	@ 0x30
 800d732:	d0f9      	beq.n	800d728 <_strtod_l+0x298>
 800d734:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d738:	2908      	cmp	r1, #8
 800d73a:	f63f af78 	bhi.w	800d62e <_strtod_l+0x19e>
 800d73e:	3a30      	subs	r2, #48	@ 0x30
 800d740:	920e      	str	r2, [sp, #56]	@ 0x38
 800d742:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d744:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d746:	f04f 080a 	mov.w	r8, #10
 800d74a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d74c:	1c56      	adds	r6, r2, #1
 800d74e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d750:	7852      	ldrb	r2, [r2, #1]
 800d752:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d756:	f1be 0f09 	cmp.w	lr, #9
 800d75a:	d939      	bls.n	800d7d0 <_strtod_l+0x340>
 800d75c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d75e:	1a76      	subs	r6, r6, r1
 800d760:	2e08      	cmp	r6, #8
 800d762:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d766:	dc03      	bgt.n	800d770 <_strtod_l+0x2e0>
 800d768:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d76a:	4588      	cmp	r8, r1
 800d76c:	bfa8      	it	ge
 800d76e:	4688      	movge	r8, r1
 800d770:	f1bc 0f00 	cmp.w	ip, #0
 800d774:	d001      	beq.n	800d77a <_strtod_l+0x2ea>
 800d776:	f1c8 0800 	rsb	r8, r8, #0
 800d77a:	2d00      	cmp	r5, #0
 800d77c:	d14e      	bne.n	800d81c <_strtod_l+0x38c>
 800d77e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d780:	4308      	orrs	r0, r1
 800d782:	f47f aebe 	bne.w	800d502 <_strtod_l+0x72>
 800d786:	2b00      	cmp	r3, #0
 800d788:	f47f aed6 	bne.w	800d538 <_strtod_l+0xa8>
 800d78c:	2a69      	cmp	r2, #105	@ 0x69
 800d78e:	d028      	beq.n	800d7e2 <_strtod_l+0x352>
 800d790:	dc25      	bgt.n	800d7de <_strtod_l+0x34e>
 800d792:	2a49      	cmp	r2, #73	@ 0x49
 800d794:	d025      	beq.n	800d7e2 <_strtod_l+0x352>
 800d796:	2a4e      	cmp	r2, #78	@ 0x4e
 800d798:	f47f aece 	bne.w	800d538 <_strtod_l+0xa8>
 800d79c:	499b      	ldr	r1, [pc, #620]	@ (800da0c <_strtod_l+0x57c>)
 800d79e:	a819      	add	r0, sp, #100	@ 0x64
 800d7a0:	f001 f9e2 	bl	800eb68 <__match>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	f43f aec7 	beq.w	800d538 <_strtod_l+0xa8>
 800d7aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b28      	cmp	r3, #40	@ 0x28
 800d7b0:	d12e      	bne.n	800d810 <_strtod_l+0x380>
 800d7b2:	4997      	ldr	r1, [pc, #604]	@ (800da10 <_strtod_l+0x580>)
 800d7b4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d7b6:	a819      	add	r0, sp, #100	@ 0x64
 800d7b8:	f001 f9ea 	bl	800eb90 <__hexnan>
 800d7bc:	2805      	cmp	r0, #5
 800d7be:	d127      	bne.n	800d810 <_strtod_l+0x380>
 800d7c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d7c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d7ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d7ce:	e698      	b.n	800d502 <_strtod_l+0x72>
 800d7d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d7d2:	fb08 2101 	mla	r1, r8, r1, r2
 800d7d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d7da:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7dc:	e7b5      	b.n	800d74a <_strtod_l+0x2ba>
 800d7de:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7e0:	e7da      	b.n	800d798 <_strtod_l+0x308>
 800d7e2:	498c      	ldr	r1, [pc, #560]	@ (800da14 <_strtod_l+0x584>)
 800d7e4:	a819      	add	r0, sp, #100	@ 0x64
 800d7e6:	f001 f9bf 	bl	800eb68 <__match>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	f43f aea4 	beq.w	800d538 <_strtod_l+0xa8>
 800d7f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7f2:	4989      	ldr	r1, [pc, #548]	@ (800da18 <_strtod_l+0x588>)
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	a819      	add	r0, sp, #100	@ 0x64
 800d7f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d7fa:	f001 f9b5 	bl	800eb68 <__match>
 800d7fe:	b910      	cbnz	r0, 800d806 <_strtod_l+0x376>
 800d800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d802:	3301      	adds	r3, #1
 800d804:	9319      	str	r3, [sp, #100]	@ 0x64
 800d806:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800da28 <_strtod_l+0x598>
 800d80a:	f04f 0a00 	mov.w	sl, #0
 800d80e:	e678      	b.n	800d502 <_strtod_l+0x72>
 800d810:	4882      	ldr	r0, [pc, #520]	@ (800da1c <_strtod_l+0x58c>)
 800d812:	f000 fee5 	bl	800e5e0 <nan>
 800d816:	ec5b ab10 	vmov	sl, fp, d0
 800d81a:	e672      	b.n	800d502 <_strtod_l+0x72>
 800d81c:	eba8 0309 	sub.w	r3, r8, r9
 800d820:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d822:	9309      	str	r3, [sp, #36]	@ 0x24
 800d824:	2f00      	cmp	r7, #0
 800d826:	bf08      	it	eq
 800d828:	462f      	moveq	r7, r5
 800d82a:	2d10      	cmp	r5, #16
 800d82c:	462c      	mov	r4, r5
 800d82e:	bfa8      	it	ge
 800d830:	2410      	movge	r4, #16
 800d832:	f7f2 fe97 	bl	8000564 <__aeabi_ui2d>
 800d836:	2d09      	cmp	r5, #9
 800d838:	4682      	mov	sl, r0
 800d83a:	468b      	mov	fp, r1
 800d83c:	dc13      	bgt.n	800d866 <_strtod_l+0x3d6>
 800d83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d840:	2b00      	cmp	r3, #0
 800d842:	f43f ae5e 	beq.w	800d502 <_strtod_l+0x72>
 800d846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d848:	dd78      	ble.n	800d93c <_strtod_l+0x4ac>
 800d84a:	2b16      	cmp	r3, #22
 800d84c:	dc5f      	bgt.n	800d90e <_strtod_l+0x47e>
 800d84e:	4974      	ldr	r1, [pc, #464]	@ (800da20 <_strtod_l+0x590>)
 800d850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d858:	4652      	mov	r2, sl
 800d85a:	465b      	mov	r3, fp
 800d85c:	f7f2 fefc 	bl	8000658 <__aeabi_dmul>
 800d860:	4682      	mov	sl, r0
 800d862:	468b      	mov	fp, r1
 800d864:	e64d      	b.n	800d502 <_strtod_l+0x72>
 800d866:	4b6e      	ldr	r3, [pc, #440]	@ (800da20 <_strtod_l+0x590>)
 800d868:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d86c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d870:	f7f2 fef2 	bl	8000658 <__aeabi_dmul>
 800d874:	4682      	mov	sl, r0
 800d876:	9808      	ldr	r0, [sp, #32]
 800d878:	468b      	mov	fp, r1
 800d87a:	f7f2 fe73 	bl	8000564 <__aeabi_ui2d>
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	4650      	mov	r0, sl
 800d884:	4659      	mov	r1, fp
 800d886:	f7f2 fd31 	bl	80002ec <__adddf3>
 800d88a:	2d0f      	cmp	r5, #15
 800d88c:	4682      	mov	sl, r0
 800d88e:	468b      	mov	fp, r1
 800d890:	ddd5      	ble.n	800d83e <_strtod_l+0x3ae>
 800d892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d894:	1b2c      	subs	r4, r5, r4
 800d896:	441c      	add	r4, r3
 800d898:	2c00      	cmp	r4, #0
 800d89a:	f340 8096 	ble.w	800d9ca <_strtod_l+0x53a>
 800d89e:	f014 030f 	ands.w	r3, r4, #15
 800d8a2:	d00a      	beq.n	800d8ba <_strtod_l+0x42a>
 800d8a4:	495e      	ldr	r1, [pc, #376]	@ (800da20 <_strtod_l+0x590>)
 800d8a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8aa:	4652      	mov	r2, sl
 800d8ac:	465b      	mov	r3, fp
 800d8ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8b2:	f7f2 fed1 	bl	8000658 <__aeabi_dmul>
 800d8b6:	4682      	mov	sl, r0
 800d8b8:	468b      	mov	fp, r1
 800d8ba:	f034 040f 	bics.w	r4, r4, #15
 800d8be:	d073      	beq.n	800d9a8 <_strtod_l+0x518>
 800d8c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d8c4:	dd48      	ble.n	800d958 <_strtod_l+0x4c8>
 800d8c6:	2400      	movs	r4, #0
 800d8c8:	46a0      	mov	r8, r4
 800d8ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800d8cc:	46a1      	mov	r9, r4
 800d8ce:	9a05      	ldr	r2, [sp, #20]
 800d8d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800da28 <_strtod_l+0x598>
 800d8d4:	2322      	movs	r3, #34	@ 0x22
 800d8d6:	6013      	str	r3, [r2, #0]
 800d8d8:	f04f 0a00 	mov.w	sl, #0
 800d8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f43f ae0f 	beq.w	800d502 <_strtod_l+0x72>
 800d8e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8e6:	9805      	ldr	r0, [sp, #20]
 800d8e8:	f7ff f942 	bl	800cb70 <_Bfree>
 800d8ec:	9805      	ldr	r0, [sp, #20]
 800d8ee:	4649      	mov	r1, r9
 800d8f0:	f7ff f93e 	bl	800cb70 <_Bfree>
 800d8f4:	9805      	ldr	r0, [sp, #20]
 800d8f6:	4641      	mov	r1, r8
 800d8f8:	f7ff f93a 	bl	800cb70 <_Bfree>
 800d8fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8fe:	9805      	ldr	r0, [sp, #20]
 800d900:	f7ff f936 	bl	800cb70 <_Bfree>
 800d904:	9805      	ldr	r0, [sp, #20]
 800d906:	4621      	mov	r1, r4
 800d908:	f7ff f932 	bl	800cb70 <_Bfree>
 800d90c:	e5f9      	b.n	800d502 <_strtod_l+0x72>
 800d90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d910:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d914:	4293      	cmp	r3, r2
 800d916:	dbbc      	blt.n	800d892 <_strtod_l+0x402>
 800d918:	4c41      	ldr	r4, [pc, #260]	@ (800da20 <_strtod_l+0x590>)
 800d91a:	f1c5 050f 	rsb	r5, r5, #15
 800d91e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d922:	4652      	mov	r2, sl
 800d924:	465b      	mov	r3, fp
 800d926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d92a:	f7f2 fe95 	bl	8000658 <__aeabi_dmul>
 800d92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d930:	1b5d      	subs	r5, r3, r5
 800d932:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d936:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d93a:	e78f      	b.n	800d85c <_strtod_l+0x3cc>
 800d93c:	3316      	adds	r3, #22
 800d93e:	dba8      	blt.n	800d892 <_strtod_l+0x402>
 800d940:	4b37      	ldr	r3, [pc, #220]	@ (800da20 <_strtod_l+0x590>)
 800d942:	eba9 0808 	sub.w	r8, r9, r8
 800d946:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d94a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d94e:	4650      	mov	r0, sl
 800d950:	4659      	mov	r1, fp
 800d952:	f7f2 ffab 	bl	80008ac <__aeabi_ddiv>
 800d956:	e783      	b.n	800d860 <_strtod_l+0x3d0>
 800d958:	4b32      	ldr	r3, [pc, #200]	@ (800da24 <_strtod_l+0x594>)
 800d95a:	9308      	str	r3, [sp, #32]
 800d95c:	2300      	movs	r3, #0
 800d95e:	1124      	asrs	r4, r4, #4
 800d960:	4650      	mov	r0, sl
 800d962:	4659      	mov	r1, fp
 800d964:	461e      	mov	r6, r3
 800d966:	2c01      	cmp	r4, #1
 800d968:	dc21      	bgt.n	800d9ae <_strtod_l+0x51e>
 800d96a:	b10b      	cbz	r3, 800d970 <_strtod_l+0x4e0>
 800d96c:	4682      	mov	sl, r0
 800d96e:	468b      	mov	fp, r1
 800d970:	492c      	ldr	r1, [pc, #176]	@ (800da24 <_strtod_l+0x594>)
 800d972:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d976:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d97a:	4652      	mov	r2, sl
 800d97c:	465b      	mov	r3, fp
 800d97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d982:	f7f2 fe69 	bl	8000658 <__aeabi_dmul>
 800d986:	4b28      	ldr	r3, [pc, #160]	@ (800da28 <_strtod_l+0x598>)
 800d988:	460a      	mov	r2, r1
 800d98a:	400b      	ands	r3, r1
 800d98c:	4927      	ldr	r1, [pc, #156]	@ (800da2c <_strtod_l+0x59c>)
 800d98e:	428b      	cmp	r3, r1
 800d990:	4682      	mov	sl, r0
 800d992:	d898      	bhi.n	800d8c6 <_strtod_l+0x436>
 800d994:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d998:	428b      	cmp	r3, r1
 800d99a:	bf86      	itte	hi
 800d99c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800da30 <_strtod_l+0x5a0>
 800d9a0:	f04f 3aff 	movhi.w	sl, #4294967295
 800d9a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	9308      	str	r3, [sp, #32]
 800d9ac:	e07a      	b.n	800daa4 <_strtod_l+0x614>
 800d9ae:	07e2      	lsls	r2, r4, #31
 800d9b0:	d505      	bpl.n	800d9be <_strtod_l+0x52e>
 800d9b2:	9b08      	ldr	r3, [sp, #32]
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fe4e 	bl	8000658 <__aeabi_dmul>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	9a08      	ldr	r2, [sp, #32]
 800d9c0:	3208      	adds	r2, #8
 800d9c2:	3601      	adds	r6, #1
 800d9c4:	1064      	asrs	r4, r4, #1
 800d9c6:	9208      	str	r2, [sp, #32]
 800d9c8:	e7cd      	b.n	800d966 <_strtod_l+0x4d6>
 800d9ca:	d0ed      	beq.n	800d9a8 <_strtod_l+0x518>
 800d9cc:	4264      	negs	r4, r4
 800d9ce:	f014 020f 	ands.w	r2, r4, #15
 800d9d2:	d00a      	beq.n	800d9ea <_strtod_l+0x55a>
 800d9d4:	4b12      	ldr	r3, [pc, #72]	@ (800da20 <_strtod_l+0x590>)
 800d9d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9da:	4650      	mov	r0, sl
 800d9dc:	4659      	mov	r1, fp
 800d9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e2:	f7f2 ff63 	bl	80008ac <__aeabi_ddiv>
 800d9e6:	4682      	mov	sl, r0
 800d9e8:	468b      	mov	fp, r1
 800d9ea:	1124      	asrs	r4, r4, #4
 800d9ec:	d0dc      	beq.n	800d9a8 <_strtod_l+0x518>
 800d9ee:	2c1f      	cmp	r4, #31
 800d9f0:	dd20      	ble.n	800da34 <_strtod_l+0x5a4>
 800d9f2:	2400      	movs	r4, #0
 800d9f4:	46a0      	mov	r8, r4
 800d9f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d9f8:	46a1      	mov	r9, r4
 800d9fa:	9a05      	ldr	r2, [sp, #20]
 800d9fc:	2322      	movs	r3, #34	@ 0x22
 800d9fe:	f04f 0a00 	mov.w	sl, #0
 800da02:	f04f 0b00 	mov.w	fp, #0
 800da06:	6013      	str	r3, [r2, #0]
 800da08:	e768      	b.n	800d8dc <_strtod_l+0x44c>
 800da0a:	bf00      	nop
 800da0c:	0800f60d 	.word	0x0800f60d
 800da10:	0800f824 	.word	0x0800f824
 800da14:	0800f605 	.word	0x0800f605
 800da18:	0800f63c 	.word	0x0800f63c
 800da1c:	0800f9cd 	.word	0x0800f9cd
 800da20:	0800f758 	.word	0x0800f758
 800da24:	0800f730 	.word	0x0800f730
 800da28:	7ff00000 	.word	0x7ff00000
 800da2c:	7ca00000 	.word	0x7ca00000
 800da30:	7fefffff 	.word	0x7fefffff
 800da34:	f014 0310 	ands.w	r3, r4, #16
 800da38:	bf18      	it	ne
 800da3a:	236a      	movne	r3, #106	@ 0x6a
 800da3c:	4ea9      	ldr	r6, [pc, #676]	@ (800dce4 <_strtod_l+0x854>)
 800da3e:	9308      	str	r3, [sp, #32]
 800da40:	4650      	mov	r0, sl
 800da42:	4659      	mov	r1, fp
 800da44:	2300      	movs	r3, #0
 800da46:	07e2      	lsls	r2, r4, #31
 800da48:	d504      	bpl.n	800da54 <_strtod_l+0x5c4>
 800da4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da4e:	f7f2 fe03 	bl	8000658 <__aeabi_dmul>
 800da52:	2301      	movs	r3, #1
 800da54:	1064      	asrs	r4, r4, #1
 800da56:	f106 0608 	add.w	r6, r6, #8
 800da5a:	d1f4      	bne.n	800da46 <_strtod_l+0x5b6>
 800da5c:	b10b      	cbz	r3, 800da62 <_strtod_l+0x5d2>
 800da5e:	4682      	mov	sl, r0
 800da60:	468b      	mov	fp, r1
 800da62:	9b08      	ldr	r3, [sp, #32]
 800da64:	b1b3      	cbz	r3, 800da94 <_strtod_l+0x604>
 800da66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800da6e:	2b00      	cmp	r3, #0
 800da70:	4659      	mov	r1, fp
 800da72:	dd0f      	ble.n	800da94 <_strtod_l+0x604>
 800da74:	2b1f      	cmp	r3, #31
 800da76:	dd55      	ble.n	800db24 <_strtod_l+0x694>
 800da78:	2b34      	cmp	r3, #52	@ 0x34
 800da7a:	bfde      	ittt	le
 800da7c:	f04f 33ff 	movle.w	r3, #4294967295
 800da80:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800da84:	4093      	lslle	r3, r2
 800da86:	f04f 0a00 	mov.w	sl, #0
 800da8a:	bfcc      	ite	gt
 800da8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da90:	ea03 0b01 	andle.w	fp, r3, r1
 800da94:	2200      	movs	r2, #0
 800da96:	2300      	movs	r3, #0
 800da98:	4650      	mov	r0, sl
 800da9a:	4659      	mov	r1, fp
 800da9c:	f7f3 f844 	bl	8000b28 <__aeabi_dcmpeq>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d1a6      	bne.n	800d9f2 <_strtod_l+0x562>
 800daa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800daaa:	9805      	ldr	r0, [sp, #20]
 800daac:	462b      	mov	r3, r5
 800daae:	463a      	mov	r2, r7
 800dab0:	f7ff f8c6 	bl	800cc40 <__s2b>
 800dab4:	900a      	str	r0, [sp, #40]	@ 0x28
 800dab6:	2800      	cmp	r0, #0
 800dab8:	f43f af05 	beq.w	800d8c6 <_strtod_l+0x436>
 800dabc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dabe:	2a00      	cmp	r2, #0
 800dac0:	eba9 0308 	sub.w	r3, r9, r8
 800dac4:	bfa8      	it	ge
 800dac6:	2300      	movge	r3, #0
 800dac8:	9312      	str	r3, [sp, #72]	@ 0x48
 800daca:	2400      	movs	r4, #0
 800dacc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dad0:	9316      	str	r3, [sp, #88]	@ 0x58
 800dad2:	46a0      	mov	r8, r4
 800dad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dad6:	9805      	ldr	r0, [sp, #20]
 800dad8:	6859      	ldr	r1, [r3, #4]
 800dada:	f7ff f809 	bl	800caf0 <_Balloc>
 800dade:	4681      	mov	r9, r0
 800dae0:	2800      	cmp	r0, #0
 800dae2:	f43f aef4 	beq.w	800d8ce <_strtod_l+0x43e>
 800dae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dae8:	691a      	ldr	r2, [r3, #16]
 800daea:	3202      	adds	r2, #2
 800daec:	f103 010c 	add.w	r1, r3, #12
 800daf0:	0092      	lsls	r2, r2, #2
 800daf2:	300c      	adds	r0, #12
 800daf4:	f7fe f89b 	bl	800bc2e <memcpy>
 800daf8:	ec4b ab10 	vmov	d0, sl, fp
 800dafc:	9805      	ldr	r0, [sp, #20]
 800dafe:	aa1c      	add	r2, sp, #112	@ 0x70
 800db00:	a91b      	add	r1, sp, #108	@ 0x6c
 800db02:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800db06:	f7ff fbd7 	bl	800d2b8 <__d2b>
 800db0a:	901a      	str	r0, [sp, #104]	@ 0x68
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f43f aede 	beq.w	800d8ce <_strtod_l+0x43e>
 800db12:	9805      	ldr	r0, [sp, #20]
 800db14:	2101      	movs	r1, #1
 800db16:	f7ff f929 	bl	800cd6c <__i2b>
 800db1a:	4680      	mov	r8, r0
 800db1c:	b948      	cbnz	r0, 800db32 <_strtod_l+0x6a2>
 800db1e:	f04f 0800 	mov.w	r8, #0
 800db22:	e6d4      	b.n	800d8ce <_strtod_l+0x43e>
 800db24:	f04f 32ff 	mov.w	r2, #4294967295
 800db28:	fa02 f303 	lsl.w	r3, r2, r3
 800db2c:	ea03 0a0a 	and.w	sl, r3, sl
 800db30:	e7b0      	b.n	800da94 <_strtod_l+0x604>
 800db32:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800db34:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800db36:	2d00      	cmp	r5, #0
 800db38:	bfab      	itete	ge
 800db3a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800db3c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800db3e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800db40:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800db42:	bfac      	ite	ge
 800db44:	18ef      	addge	r7, r5, r3
 800db46:	1b5e      	sublt	r6, r3, r5
 800db48:	9b08      	ldr	r3, [sp, #32]
 800db4a:	1aed      	subs	r5, r5, r3
 800db4c:	4415      	add	r5, r2
 800db4e:	4b66      	ldr	r3, [pc, #408]	@ (800dce8 <_strtod_l+0x858>)
 800db50:	3d01      	subs	r5, #1
 800db52:	429d      	cmp	r5, r3
 800db54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800db58:	da50      	bge.n	800dbfc <_strtod_l+0x76c>
 800db5a:	1b5b      	subs	r3, r3, r5
 800db5c:	2b1f      	cmp	r3, #31
 800db5e:	eba2 0203 	sub.w	r2, r2, r3
 800db62:	f04f 0101 	mov.w	r1, #1
 800db66:	dc3d      	bgt.n	800dbe4 <_strtod_l+0x754>
 800db68:	fa01 f303 	lsl.w	r3, r1, r3
 800db6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db6e:	2300      	movs	r3, #0
 800db70:	9310      	str	r3, [sp, #64]	@ 0x40
 800db72:	18bd      	adds	r5, r7, r2
 800db74:	9b08      	ldr	r3, [sp, #32]
 800db76:	42af      	cmp	r7, r5
 800db78:	4416      	add	r6, r2
 800db7a:	441e      	add	r6, r3
 800db7c:	463b      	mov	r3, r7
 800db7e:	bfa8      	it	ge
 800db80:	462b      	movge	r3, r5
 800db82:	42b3      	cmp	r3, r6
 800db84:	bfa8      	it	ge
 800db86:	4633      	movge	r3, r6
 800db88:	2b00      	cmp	r3, #0
 800db8a:	bfc2      	ittt	gt
 800db8c:	1aed      	subgt	r5, r5, r3
 800db8e:	1af6      	subgt	r6, r6, r3
 800db90:	1aff      	subgt	r7, r7, r3
 800db92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db94:	2b00      	cmp	r3, #0
 800db96:	dd16      	ble.n	800dbc6 <_strtod_l+0x736>
 800db98:	4641      	mov	r1, r8
 800db9a:	9805      	ldr	r0, [sp, #20]
 800db9c:	461a      	mov	r2, r3
 800db9e:	f7ff f9a5 	bl	800ceec <__pow5mult>
 800dba2:	4680      	mov	r8, r0
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d0ba      	beq.n	800db1e <_strtod_l+0x68e>
 800dba8:	4601      	mov	r1, r0
 800dbaa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dbac:	9805      	ldr	r0, [sp, #20]
 800dbae:	f7ff f8f3 	bl	800cd98 <__multiply>
 800dbb2:	900e      	str	r0, [sp, #56]	@ 0x38
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	f43f ae8a 	beq.w	800d8ce <_strtod_l+0x43e>
 800dbba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbbc:	9805      	ldr	r0, [sp, #20]
 800dbbe:	f7fe ffd7 	bl	800cb70 <_Bfree>
 800dbc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbc6:	2d00      	cmp	r5, #0
 800dbc8:	dc1d      	bgt.n	800dc06 <_strtod_l+0x776>
 800dbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	dd23      	ble.n	800dc18 <_strtod_l+0x788>
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dbd4:	9805      	ldr	r0, [sp, #20]
 800dbd6:	f7ff f989 	bl	800ceec <__pow5mult>
 800dbda:	4681      	mov	r9, r0
 800dbdc:	b9e0      	cbnz	r0, 800dc18 <_strtod_l+0x788>
 800dbde:	f04f 0900 	mov.w	r9, #0
 800dbe2:	e674      	b.n	800d8ce <_strtod_l+0x43e>
 800dbe4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dbe8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dbec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dbf0:	35e2      	adds	r5, #226	@ 0xe2
 800dbf2:	fa01 f305 	lsl.w	r3, r1, r5
 800dbf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbf8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dbfa:	e7ba      	b.n	800db72 <_strtod_l+0x6e2>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc00:	2301      	movs	r3, #1
 800dc02:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc04:	e7b5      	b.n	800db72 <_strtod_l+0x6e2>
 800dc06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc08:	9805      	ldr	r0, [sp, #20]
 800dc0a:	462a      	mov	r2, r5
 800dc0c:	f7ff f9c8 	bl	800cfa0 <__lshift>
 800dc10:	901a      	str	r0, [sp, #104]	@ 0x68
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d1d9      	bne.n	800dbca <_strtod_l+0x73a>
 800dc16:	e65a      	b.n	800d8ce <_strtod_l+0x43e>
 800dc18:	2e00      	cmp	r6, #0
 800dc1a:	dd07      	ble.n	800dc2c <_strtod_l+0x79c>
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	9805      	ldr	r0, [sp, #20]
 800dc20:	4632      	mov	r2, r6
 800dc22:	f7ff f9bd 	bl	800cfa0 <__lshift>
 800dc26:	4681      	mov	r9, r0
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d0d8      	beq.n	800dbde <_strtod_l+0x74e>
 800dc2c:	2f00      	cmp	r7, #0
 800dc2e:	dd08      	ble.n	800dc42 <_strtod_l+0x7b2>
 800dc30:	4641      	mov	r1, r8
 800dc32:	9805      	ldr	r0, [sp, #20]
 800dc34:	463a      	mov	r2, r7
 800dc36:	f7ff f9b3 	bl	800cfa0 <__lshift>
 800dc3a:	4680      	mov	r8, r0
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	f43f ae46 	beq.w	800d8ce <_strtod_l+0x43e>
 800dc42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc44:	9805      	ldr	r0, [sp, #20]
 800dc46:	464a      	mov	r2, r9
 800dc48:	f7ff fa32 	bl	800d0b0 <__mdiff>
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f43f ae3d 	beq.w	800d8ce <_strtod_l+0x43e>
 800dc54:	68c3      	ldr	r3, [r0, #12]
 800dc56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc58:	2300      	movs	r3, #0
 800dc5a:	60c3      	str	r3, [r0, #12]
 800dc5c:	4641      	mov	r1, r8
 800dc5e:	f7ff fa0b 	bl	800d078 <__mcmp>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	da46      	bge.n	800dcf4 <_strtod_l+0x864>
 800dc66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc68:	ea53 030a 	orrs.w	r3, r3, sl
 800dc6c:	d16c      	bne.n	800dd48 <_strtod_l+0x8b8>
 800dc6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d168      	bne.n	800dd48 <_strtod_l+0x8b8>
 800dc76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc7a:	0d1b      	lsrs	r3, r3, #20
 800dc7c:	051b      	lsls	r3, r3, #20
 800dc7e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc82:	d961      	bls.n	800dd48 <_strtod_l+0x8b8>
 800dc84:	6963      	ldr	r3, [r4, #20]
 800dc86:	b913      	cbnz	r3, 800dc8e <_strtod_l+0x7fe>
 800dc88:	6923      	ldr	r3, [r4, #16]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	dd5c      	ble.n	800dd48 <_strtod_l+0x8b8>
 800dc8e:	4621      	mov	r1, r4
 800dc90:	2201      	movs	r2, #1
 800dc92:	9805      	ldr	r0, [sp, #20]
 800dc94:	f7ff f984 	bl	800cfa0 <__lshift>
 800dc98:	4641      	mov	r1, r8
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	f7ff f9ec 	bl	800d078 <__mcmp>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	dd51      	ble.n	800dd48 <_strtod_l+0x8b8>
 800dca4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dca8:	9a08      	ldr	r2, [sp, #32]
 800dcaa:	0d1b      	lsrs	r3, r3, #20
 800dcac:	051b      	lsls	r3, r3, #20
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	d06b      	beq.n	800dd8a <_strtod_l+0x8fa>
 800dcb2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcb6:	d868      	bhi.n	800dd8a <_strtod_l+0x8fa>
 800dcb8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dcbc:	f67f ae9d 	bls.w	800d9fa <_strtod_l+0x56a>
 800dcc0:	4b0a      	ldr	r3, [pc, #40]	@ (800dcec <_strtod_l+0x85c>)
 800dcc2:	4650      	mov	r0, sl
 800dcc4:	4659      	mov	r1, fp
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f7f2 fcc6 	bl	8000658 <__aeabi_dmul>
 800dccc:	4b08      	ldr	r3, [pc, #32]	@ (800dcf0 <_strtod_l+0x860>)
 800dcce:	400b      	ands	r3, r1
 800dcd0:	4682      	mov	sl, r0
 800dcd2:	468b      	mov	fp, r1
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f47f ae05 	bne.w	800d8e4 <_strtod_l+0x454>
 800dcda:	9a05      	ldr	r2, [sp, #20]
 800dcdc:	2322      	movs	r3, #34	@ 0x22
 800dcde:	6013      	str	r3, [r2, #0]
 800dce0:	e600      	b.n	800d8e4 <_strtod_l+0x454>
 800dce2:	bf00      	nop
 800dce4:	0800f850 	.word	0x0800f850
 800dce8:	fffffc02 	.word	0xfffffc02
 800dcec:	39500000 	.word	0x39500000
 800dcf0:	7ff00000 	.word	0x7ff00000
 800dcf4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dcf8:	d165      	bne.n	800ddc6 <_strtod_l+0x936>
 800dcfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dcfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd00:	b35a      	cbz	r2, 800dd5a <_strtod_l+0x8ca>
 800dd02:	4a9f      	ldr	r2, [pc, #636]	@ (800df80 <_strtod_l+0xaf0>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d12b      	bne.n	800dd60 <_strtod_l+0x8d0>
 800dd08:	9b08      	ldr	r3, [sp, #32]
 800dd0a:	4651      	mov	r1, sl
 800dd0c:	b303      	cbz	r3, 800dd50 <_strtod_l+0x8c0>
 800dd0e:	4b9d      	ldr	r3, [pc, #628]	@ (800df84 <_strtod_l+0xaf4>)
 800dd10:	465a      	mov	r2, fp
 800dd12:	4013      	ands	r3, r2
 800dd14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd18:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1c:	d81b      	bhi.n	800dd56 <_strtod_l+0x8c6>
 800dd1e:	0d1b      	lsrs	r3, r3, #20
 800dd20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd24:	fa02 f303 	lsl.w	r3, r2, r3
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	d119      	bne.n	800dd60 <_strtod_l+0x8d0>
 800dd2c:	4b96      	ldr	r3, [pc, #600]	@ (800df88 <_strtod_l+0xaf8>)
 800dd2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d102      	bne.n	800dd3a <_strtod_l+0x8aa>
 800dd34:	3101      	adds	r1, #1
 800dd36:	f43f adca 	beq.w	800d8ce <_strtod_l+0x43e>
 800dd3a:	4b92      	ldr	r3, [pc, #584]	@ (800df84 <_strtod_l+0xaf4>)
 800dd3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd3e:	401a      	ands	r2, r3
 800dd40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dd44:	f04f 0a00 	mov.w	sl, #0
 800dd48:	9b08      	ldr	r3, [sp, #32]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1b8      	bne.n	800dcc0 <_strtod_l+0x830>
 800dd4e:	e5c9      	b.n	800d8e4 <_strtod_l+0x454>
 800dd50:	f04f 33ff 	mov.w	r3, #4294967295
 800dd54:	e7e8      	b.n	800dd28 <_strtod_l+0x898>
 800dd56:	4613      	mov	r3, r2
 800dd58:	e7e6      	b.n	800dd28 <_strtod_l+0x898>
 800dd5a:	ea53 030a 	orrs.w	r3, r3, sl
 800dd5e:	d0a1      	beq.n	800dca4 <_strtod_l+0x814>
 800dd60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd62:	b1db      	cbz	r3, 800dd9c <_strtod_l+0x90c>
 800dd64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd66:	4213      	tst	r3, r2
 800dd68:	d0ee      	beq.n	800dd48 <_strtod_l+0x8b8>
 800dd6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd6c:	9a08      	ldr	r2, [sp, #32]
 800dd6e:	4650      	mov	r0, sl
 800dd70:	4659      	mov	r1, fp
 800dd72:	b1bb      	cbz	r3, 800dda4 <_strtod_l+0x914>
 800dd74:	f7ff fb6e 	bl	800d454 <sulp>
 800dd78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd7c:	ec53 2b10 	vmov	r2, r3, d0
 800dd80:	f7f2 fab4 	bl	80002ec <__adddf3>
 800dd84:	4682      	mov	sl, r0
 800dd86:	468b      	mov	fp, r1
 800dd88:	e7de      	b.n	800dd48 <_strtod_l+0x8b8>
 800dd8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd96:	f04f 3aff 	mov.w	sl, #4294967295
 800dd9a:	e7d5      	b.n	800dd48 <_strtod_l+0x8b8>
 800dd9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd9e:	ea13 0f0a 	tst.w	r3, sl
 800dda2:	e7e1      	b.n	800dd68 <_strtod_l+0x8d8>
 800dda4:	f7ff fb56 	bl	800d454 <sulp>
 800dda8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddac:	ec53 2b10 	vmov	r2, r3, d0
 800ddb0:	f7f2 fa9a 	bl	80002e8 <__aeabi_dsub>
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	4682      	mov	sl, r0
 800ddba:	468b      	mov	fp, r1
 800ddbc:	f7f2 feb4 	bl	8000b28 <__aeabi_dcmpeq>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	d0c1      	beq.n	800dd48 <_strtod_l+0x8b8>
 800ddc4:	e619      	b.n	800d9fa <_strtod_l+0x56a>
 800ddc6:	4641      	mov	r1, r8
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f7ff facd 	bl	800d368 <__ratio>
 800ddce:	ec57 6b10 	vmov	r6, r7, d0
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ddd8:	4630      	mov	r0, r6
 800ddda:	4639      	mov	r1, r7
 800dddc:	f7f2 feb8 	bl	8000b50 <__aeabi_dcmple>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d06f      	beq.n	800dec4 <_strtod_l+0xa34>
 800dde4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d17a      	bne.n	800dee0 <_strtod_l+0xa50>
 800ddea:	f1ba 0f00 	cmp.w	sl, #0
 800ddee:	d158      	bne.n	800dea2 <_strtod_l+0xa12>
 800ddf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d15a      	bne.n	800deb0 <_strtod_l+0xa20>
 800ddfa:	4b64      	ldr	r3, [pc, #400]	@ (800df8c <_strtod_l+0xafc>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	4630      	mov	r0, r6
 800de00:	4639      	mov	r1, r7
 800de02:	f7f2 fe9b 	bl	8000b3c <__aeabi_dcmplt>
 800de06:	2800      	cmp	r0, #0
 800de08:	d159      	bne.n	800debe <_strtod_l+0xa2e>
 800de0a:	4630      	mov	r0, r6
 800de0c:	4639      	mov	r1, r7
 800de0e:	4b60      	ldr	r3, [pc, #384]	@ (800df90 <_strtod_l+0xb00>)
 800de10:	2200      	movs	r2, #0
 800de12:	f7f2 fc21 	bl	8000658 <__aeabi_dmul>
 800de16:	4606      	mov	r6, r0
 800de18:	460f      	mov	r7, r1
 800de1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800de1e:	9606      	str	r6, [sp, #24]
 800de20:	9307      	str	r3, [sp, #28]
 800de22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de26:	4d57      	ldr	r5, [pc, #348]	@ (800df84 <_strtod_l+0xaf4>)
 800de28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800de2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de2e:	401d      	ands	r5, r3
 800de30:	4b58      	ldr	r3, [pc, #352]	@ (800df94 <_strtod_l+0xb04>)
 800de32:	429d      	cmp	r5, r3
 800de34:	f040 80b2 	bne.w	800df9c <_strtod_l+0xb0c>
 800de38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800de3e:	ec4b ab10 	vmov	d0, sl, fp
 800de42:	f7ff f9c9 	bl	800d1d8 <__ulp>
 800de46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de4a:	ec51 0b10 	vmov	r0, r1, d0
 800de4e:	f7f2 fc03 	bl	8000658 <__aeabi_dmul>
 800de52:	4652      	mov	r2, sl
 800de54:	465b      	mov	r3, fp
 800de56:	f7f2 fa49 	bl	80002ec <__adddf3>
 800de5a:	460b      	mov	r3, r1
 800de5c:	4949      	ldr	r1, [pc, #292]	@ (800df84 <_strtod_l+0xaf4>)
 800de5e:	4a4e      	ldr	r2, [pc, #312]	@ (800df98 <_strtod_l+0xb08>)
 800de60:	4019      	ands	r1, r3
 800de62:	4291      	cmp	r1, r2
 800de64:	4682      	mov	sl, r0
 800de66:	d942      	bls.n	800deee <_strtod_l+0xa5e>
 800de68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de6a:	4b47      	ldr	r3, [pc, #284]	@ (800df88 <_strtod_l+0xaf8>)
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d103      	bne.n	800de78 <_strtod_l+0x9e8>
 800de70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de72:	3301      	adds	r3, #1
 800de74:	f43f ad2b 	beq.w	800d8ce <_strtod_l+0x43e>
 800de78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800df88 <_strtod_l+0xaf8>
 800de7c:	f04f 3aff 	mov.w	sl, #4294967295
 800de80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de82:	9805      	ldr	r0, [sp, #20]
 800de84:	f7fe fe74 	bl	800cb70 <_Bfree>
 800de88:	9805      	ldr	r0, [sp, #20]
 800de8a:	4649      	mov	r1, r9
 800de8c:	f7fe fe70 	bl	800cb70 <_Bfree>
 800de90:	9805      	ldr	r0, [sp, #20]
 800de92:	4641      	mov	r1, r8
 800de94:	f7fe fe6c 	bl	800cb70 <_Bfree>
 800de98:	9805      	ldr	r0, [sp, #20]
 800de9a:	4621      	mov	r1, r4
 800de9c:	f7fe fe68 	bl	800cb70 <_Bfree>
 800dea0:	e618      	b.n	800dad4 <_strtod_l+0x644>
 800dea2:	f1ba 0f01 	cmp.w	sl, #1
 800dea6:	d103      	bne.n	800deb0 <_strtod_l+0xa20>
 800dea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f43f ada5 	beq.w	800d9fa <_strtod_l+0x56a>
 800deb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800df60 <_strtod_l+0xad0>
 800deb4:	4f35      	ldr	r7, [pc, #212]	@ (800df8c <_strtod_l+0xafc>)
 800deb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800deba:	2600      	movs	r6, #0
 800debc:	e7b1      	b.n	800de22 <_strtod_l+0x992>
 800debe:	4f34      	ldr	r7, [pc, #208]	@ (800df90 <_strtod_l+0xb00>)
 800dec0:	2600      	movs	r6, #0
 800dec2:	e7aa      	b.n	800de1a <_strtod_l+0x98a>
 800dec4:	4b32      	ldr	r3, [pc, #200]	@ (800df90 <_strtod_l+0xb00>)
 800dec6:	4630      	mov	r0, r6
 800dec8:	4639      	mov	r1, r7
 800deca:	2200      	movs	r2, #0
 800decc:	f7f2 fbc4 	bl	8000658 <__aeabi_dmul>
 800ded0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ded2:	4606      	mov	r6, r0
 800ded4:	460f      	mov	r7, r1
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d09f      	beq.n	800de1a <_strtod_l+0x98a>
 800deda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dede:	e7a0      	b.n	800de22 <_strtod_l+0x992>
 800dee0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800df68 <_strtod_l+0xad8>
 800dee4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dee8:	ec57 6b17 	vmov	r6, r7, d7
 800deec:	e799      	b.n	800de22 <_strtod_l+0x992>
 800deee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800def2:	9b08      	ldr	r3, [sp, #32]
 800def4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1c1      	bne.n	800de80 <_strtod_l+0x9f0>
 800defc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df00:	0d1b      	lsrs	r3, r3, #20
 800df02:	051b      	lsls	r3, r3, #20
 800df04:	429d      	cmp	r5, r3
 800df06:	d1bb      	bne.n	800de80 <_strtod_l+0x9f0>
 800df08:	4630      	mov	r0, r6
 800df0a:	4639      	mov	r1, r7
 800df0c:	f7f2 ff04 	bl	8000d18 <__aeabi_d2lz>
 800df10:	f7f2 fb74 	bl	80005fc <__aeabi_l2d>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4630      	mov	r0, r6
 800df1a:	4639      	mov	r1, r7
 800df1c:	f7f2 f9e4 	bl	80002e8 <__aeabi_dsub>
 800df20:	460b      	mov	r3, r1
 800df22:	4602      	mov	r2, r0
 800df24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800df28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800df2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df2e:	ea46 060a 	orr.w	r6, r6, sl
 800df32:	431e      	orrs	r6, r3
 800df34:	d06f      	beq.n	800e016 <_strtod_l+0xb86>
 800df36:	a30e      	add	r3, pc, #56	@ (adr r3, 800df70 <_strtod_l+0xae0>)
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	f7f2 fdfe 	bl	8000b3c <__aeabi_dcmplt>
 800df40:	2800      	cmp	r0, #0
 800df42:	f47f accf 	bne.w	800d8e4 <_strtod_l+0x454>
 800df46:	a30c      	add	r3, pc, #48	@ (adr r3, 800df78 <_strtod_l+0xae8>)
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df50:	f7f2 fe12 	bl	8000b78 <__aeabi_dcmpgt>
 800df54:	2800      	cmp	r0, #0
 800df56:	d093      	beq.n	800de80 <_strtod_l+0x9f0>
 800df58:	e4c4      	b.n	800d8e4 <_strtod_l+0x454>
 800df5a:	bf00      	nop
 800df5c:	f3af 8000 	nop.w
 800df60:	00000000 	.word	0x00000000
 800df64:	bff00000 	.word	0xbff00000
 800df68:	00000000 	.word	0x00000000
 800df6c:	3ff00000 	.word	0x3ff00000
 800df70:	94a03595 	.word	0x94a03595
 800df74:	3fdfffff 	.word	0x3fdfffff
 800df78:	35afe535 	.word	0x35afe535
 800df7c:	3fe00000 	.word	0x3fe00000
 800df80:	000fffff 	.word	0x000fffff
 800df84:	7ff00000 	.word	0x7ff00000
 800df88:	7fefffff 	.word	0x7fefffff
 800df8c:	3ff00000 	.word	0x3ff00000
 800df90:	3fe00000 	.word	0x3fe00000
 800df94:	7fe00000 	.word	0x7fe00000
 800df98:	7c9fffff 	.word	0x7c9fffff
 800df9c:	9b08      	ldr	r3, [sp, #32]
 800df9e:	b323      	cbz	r3, 800dfea <_strtod_l+0xb5a>
 800dfa0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dfa4:	d821      	bhi.n	800dfea <_strtod_l+0xb5a>
 800dfa6:	a328      	add	r3, pc, #160	@ (adr r3, 800e048 <_strtod_l+0xbb8>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	4630      	mov	r0, r6
 800dfae:	4639      	mov	r1, r7
 800dfb0:	f7f2 fdce 	bl	8000b50 <__aeabi_dcmple>
 800dfb4:	b1a0      	cbz	r0, 800dfe0 <_strtod_l+0xb50>
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f7f2 fe25 	bl	8000c08 <__aeabi_d2uiz>
 800dfbe:	2801      	cmp	r0, #1
 800dfc0:	bf38      	it	cc
 800dfc2:	2001      	movcc	r0, #1
 800dfc4:	f7f2 face 	bl	8000564 <__aeabi_ui2d>
 800dfc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460f      	mov	r7, r1
 800dfce:	b9fb      	cbnz	r3, 800e010 <_strtod_l+0xb80>
 800dfd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfd4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dfd6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dfd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dfdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dfe0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfe2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dfe6:	1b5b      	subs	r3, r3, r5
 800dfe8:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dfee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dff2:	f7ff f8f1 	bl	800d1d8 <__ulp>
 800dff6:	4650      	mov	r0, sl
 800dff8:	ec53 2b10 	vmov	r2, r3, d0
 800dffc:	4659      	mov	r1, fp
 800dffe:	f7f2 fb2b 	bl	8000658 <__aeabi_dmul>
 800e002:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e006:	f7f2 f971 	bl	80002ec <__adddf3>
 800e00a:	4682      	mov	sl, r0
 800e00c:	468b      	mov	fp, r1
 800e00e:	e770      	b.n	800def2 <_strtod_l+0xa62>
 800e010:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e014:	e7e0      	b.n	800dfd8 <_strtod_l+0xb48>
 800e016:	a30e      	add	r3, pc, #56	@ (adr r3, 800e050 <_strtod_l+0xbc0>)
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	f7f2 fd8e 	bl	8000b3c <__aeabi_dcmplt>
 800e020:	e798      	b.n	800df54 <_strtod_l+0xac4>
 800e022:	2300      	movs	r3, #0
 800e024:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e026:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e02a:	6013      	str	r3, [r2, #0]
 800e02c:	f7ff ba6d 	b.w	800d50a <_strtod_l+0x7a>
 800e030:	2a65      	cmp	r2, #101	@ 0x65
 800e032:	f43f ab66 	beq.w	800d702 <_strtod_l+0x272>
 800e036:	2a45      	cmp	r2, #69	@ 0x45
 800e038:	f43f ab63 	beq.w	800d702 <_strtod_l+0x272>
 800e03c:	2301      	movs	r3, #1
 800e03e:	f7ff bb9e 	b.w	800d77e <_strtod_l+0x2ee>
 800e042:	bf00      	nop
 800e044:	f3af 8000 	nop.w
 800e048:	ffc00000 	.word	0xffc00000
 800e04c:	41dfffff 	.word	0x41dfffff
 800e050:	94a03595 	.word	0x94a03595
 800e054:	3fcfffff 	.word	0x3fcfffff

0800e058 <_strtod_r>:
 800e058:	4b01      	ldr	r3, [pc, #4]	@ (800e060 <_strtod_r+0x8>)
 800e05a:	f7ff ba19 	b.w	800d490 <_strtod_l>
 800e05e:	bf00      	nop
 800e060:	200001cc 	.word	0x200001cc

0800e064 <_strtol_l.constprop.0>:
 800e064:	2b24      	cmp	r3, #36	@ 0x24
 800e066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e06a:	4686      	mov	lr, r0
 800e06c:	4690      	mov	r8, r2
 800e06e:	d801      	bhi.n	800e074 <_strtol_l.constprop.0+0x10>
 800e070:	2b01      	cmp	r3, #1
 800e072:	d106      	bne.n	800e082 <_strtol_l.constprop.0+0x1e>
 800e074:	f7fd fdae 	bl	800bbd4 <__errno>
 800e078:	2316      	movs	r3, #22
 800e07a:	6003      	str	r3, [r0, #0]
 800e07c:	2000      	movs	r0, #0
 800e07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e082:	4834      	ldr	r0, [pc, #208]	@ (800e154 <_strtol_l.constprop.0+0xf0>)
 800e084:	460d      	mov	r5, r1
 800e086:	462a      	mov	r2, r5
 800e088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e08c:	5d06      	ldrb	r6, [r0, r4]
 800e08e:	f016 0608 	ands.w	r6, r6, #8
 800e092:	d1f8      	bne.n	800e086 <_strtol_l.constprop.0+0x22>
 800e094:	2c2d      	cmp	r4, #45	@ 0x2d
 800e096:	d12d      	bne.n	800e0f4 <_strtol_l.constprop.0+0x90>
 800e098:	782c      	ldrb	r4, [r5, #0]
 800e09a:	2601      	movs	r6, #1
 800e09c:	1c95      	adds	r5, r2, #2
 800e09e:	f033 0210 	bics.w	r2, r3, #16
 800e0a2:	d109      	bne.n	800e0b8 <_strtol_l.constprop.0+0x54>
 800e0a4:	2c30      	cmp	r4, #48	@ 0x30
 800e0a6:	d12a      	bne.n	800e0fe <_strtol_l.constprop.0+0x9a>
 800e0a8:	782a      	ldrb	r2, [r5, #0]
 800e0aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e0ae:	2a58      	cmp	r2, #88	@ 0x58
 800e0b0:	d125      	bne.n	800e0fe <_strtol_l.constprop.0+0x9a>
 800e0b2:	786c      	ldrb	r4, [r5, #1]
 800e0b4:	2310      	movs	r3, #16
 800e0b6:	3502      	adds	r5, #2
 800e0b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e0bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	fbbc f9f3 	udiv	r9, ip, r3
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800e0cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e0d0:	2f09      	cmp	r7, #9
 800e0d2:	d81b      	bhi.n	800e10c <_strtol_l.constprop.0+0xa8>
 800e0d4:	463c      	mov	r4, r7
 800e0d6:	42a3      	cmp	r3, r4
 800e0d8:	dd27      	ble.n	800e12a <_strtol_l.constprop.0+0xc6>
 800e0da:	1c57      	adds	r7, r2, #1
 800e0dc:	d007      	beq.n	800e0ee <_strtol_l.constprop.0+0x8a>
 800e0de:	4581      	cmp	r9, r0
 800e0e0:	d320      	bcc.n	800e124 <_strtol_l.constprop.0+0xc0>
 800e0e2:	d101      	bne.n	800e0e8 <_strtol_l.constprop.0+0x84>
 800e0e4:	45a2      	cmp	sl, r4
 800e0e6:	db1d      	blt.n	800e124 <_strtol_l.constprop.0+0xc0>
 800e0e8:	fb00 4003 	mla	r0, r0, r3, r4
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0f2:	e7eb      	b.n	800e0cc <_strtol_l.constprop.0+0x68>
 800e0f4:	2c2b      	cmp	r4, #43	@ 0x2b
 800e0f6:	bf04      	itt	eq
 800e0f8:	782c      	ldrbeq	r4, [r5, #0]
 800e0fa:	1c95      	addeq	r5, r2, #2
 800e0fc:	e7cf      	b.n	800e09e <_strtol_l.constprop.0+0x3a>
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1da      	bne.n	800e0b8 <_strtol_l.constprop.0+0x54>
 800e102:	2c30      	cmp	r4, #48	@ 0x30
 800e104:	bf0c      	ite	eq
 800e106:	2308      	moveq	r3, #8
 800e108:	230a      	movne	r3, #10
 800e10a:	e7d5      	b.n	800e0b8 <_strtol_l.constprop.0+0x54>
 800e10c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e110:	2f19      	cmp	r7, #25
 800e112:	d801      	bhi.n	800e118 <_strtol_l.constprop.0+0xb4>
 800e114:	3c37      	subs	r4, #55	@ 0x37
 800e116:	e7de      	b.n	800e0d6 <_strtol_l.constprop.0+0x72>
 800e118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e11c:	2f19      	cmp	r7, #25
 800e11e:	d804      	bhi.n	800e12a <_strtol_l.constprop.0+0xc6>
 800e120:	3c57      	subs	r4, #87	@ 0x57
 800e122:	e7d8      	b.n	800e0d6 <_strtol_l.constprop.0+0x72>
 800e124:	f04f 32ff 	mov.w	r2, #4294967295
 800e128:	e7e1      	b.n	800e0ee <_strtol_l.constprop.0+0x8a>
 800e12a:	1c53      	adds	r3, r2, #1
 800e12c:	d108      	bne.n	800e140 <_strtol_l.constprop.0+0xdc>
 800e12e:	2322      	movs	r3, #34	@ 0x22
 800e130:	f8ce 3000 	str.w	r3, [lr]
 800e134:	4660      	mov	r0, ip
 800e136:	f1b8 0f00 	cmp.w	r8, #0
 800e13a:	d0a0      	beq.n	800e07e <_strtol_l.constprop.0+0x1a>
 800e13c:	1e69      	subs	r1, r5, #1
 800e13e:	e006      	b.n	800e14e <_strtol_l.constprop.0+0xea>
 800e140:	b106      	cbz	r6, 800e144 <_strtol_l.constprop.0+0xe0>
 800e142:	4240      	negs	r0, r0
 800e144:	f1b8 0f00 	cmp.w	r8, #0
 800e148:	d099      	beq.n	800e07e <_strtol_l.constprop.0+0x1a>
 800e14a:	2a00      	cmp	r2, #0
 800e14c:	d1f6      	bne.n	800e13c <_strtol_l.constprop.0+0xd8>
 800e14e:	f8c8 1000 	str.w	r1, [r8]
 800e152:	e794      	b.n	800e07e <_strtol_l.constprop.0+0x1a>
 800e154:	0800f879 	.word	0x0800f879

0800e158 <_strtol_r>:
 800e158:	f7ff bf84 	b.w	800e064 <_strtol_l.constprop.0>

0800e15c <__ssputs_r>:
 800e15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e160:	688e      	ldr	r6, [r1, #8]
 800e162:	461f      	mov	r7, r3
 800e164:	42be      	cmp	r6, r7
 800e166:	680b      	ldr	r3, [r1, #0]
 800e168:	4682      	mov	sl, r0
 800e16a:	460c      	mov	r4, r1
 800e16c:	4690      	mov	r8, r2
 800e16e:	d82d      	bhi.n	800e1cc <__ssputs_r+0x70>
 800e170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e178:	d026      	beq.n	800e1c8 <__ssputs_r+0x6c>
 800e17a:	6965      	ldr	r5, [r4, #20]
 800e17c:	6909      	ldr	r1, [r1, #16]
 800e17e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e182:	eba3 0901 	sub.w	r9, r3, r1
 800e186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e18a:	1c7b      	adds	r3, r7, #1
 800e18c:	444b      	add	r3, r9
 800e18e:	106d      	asrs	r5, r5, #1
 800e190:	429d      	cmp	r5, r3
 800e192:	bf38      	it	cc
 800e194:	461d      	movcc	r5, r3
 800e196:	0553      	lsls	r3, r2, #21
 800e198:	d527      	bpl.n	800e1ea <__ssputs_r+0x8e>
 800e19a:	4629      	mov	r1, r5
 800e19c:	f7fe fc1c 	bl	800c9d8 <_malloc_r>
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	b360      	cbz	r0, 800e1fe <__ssputs_r+0xa2>
 800e1a4:	6921      	ldr	r1, [r4, #16]
 800e1a6:	464a      	mov	r2, r9
 800e1a8:	f7fd fd41 	bl	800bc2e <memcpy>
 800e1ac:	89a3      	ldrh	r3, [r4, #12]
 800e1ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e1b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1b6:	81a3      	strh	r3, [r4, #12]
 800e1b8:	6126      	str	r6, [r4, #16]
 800e1ba:	6165      	str	r5, [r4, #20]
 800e1bc:	444e      	add	r6, r9
 800e1be:	eba5 0509 	sub.w	r5, r5, r9
 800e1c2:	6026      	str	r6, [r4, #0]
 800e1c4:	60a5      	str	r5, [r4, #8]
 800e1c6:	463e      	mov	r6, r7
 800e1c8:	42be      	cmp	r6, r7
 800e1ca:	d900      	bls.n	800e1ce <__ssputs_r+0x72>
 800e1cc:	463e      	mov	r6, r7
 800e1ce:	6820      	ldr	r0, [r4, #0]
 800e1d0:	4632      	mov	r2, r6
 800e1d2:	4641      	mov	r1, r8
 800e1d4:	f000 f9c6 	bl	800e564 <memmove>
 800e1d8:	68a3      	ldr	r3, [r4, #8]
 800e1da:	1b9b      	subs	r3, r3, r6
 800e1dc:	60a3      	str	r3, [r4, #8]
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	4433      	add	r3, r6
 800e1e2:	6023      	str	r3, [r4, #0]
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ea:	462a      	mov	r2, r5
 800e1ec:	f000 fd7d 	bl	800ecea <_realloc_r>
 800e1f0:	4606      	mov	r6, r0
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d1e0      	bne.n	800e1b8 <__ssputs_r+0x5c>
 800e1f6:	6921      	ldr	r1, [r4, #16]
 800e1f8:	4650      	mov	r0, sl
 800e1fa:	f7fe fb79 	bl	800c8f0 <_free_r>
 800e1fe:	230c      	movs	r3, #12
 800e200:	f8ca 3000 	str.w	r3, [sl]
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e20a:	81a3      	strh	r3, [r4, #12]
 800e20c:	f04f 30ff 	mov.w	r0, #4294967295
 800e210:	e7e9      	b.n	800e1e6 <__ssputs_r+0x8a>
	...

0800e214 <_svfiprintf_r>:
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	4698      	mov	r8, r3
 800e21a:	898b      	ldrh	r3, [r1, #12]
 800e21c:	061b      	lsls	r3, r3, #24
 800e21e:	b09d      	sub	sp, #116	@ 0x74
 800e220:	4607      	mov	r7, r0
 800e222:	460d      	mov	r5, r1
 800e224:	4614      	mov	r4, r2
 800e226:	d510      	bpl.n	800e24a <_svfiprintf_r+0x36>
 800e228:	690b      	ldr	r3, [r1, #16]
 800e22a:	b973      	cbnz	r3, 800e24a <_svfiprintf_r+0x36>
 800e22c:	2140      	movs	r1, #64	@ 0x40
 800e22e:	f7fe fbd3 	bl	800c9d8 <_malloc_r>
 800e232:	6028      	str	r0, [r5, #0]
 800e234:	6128      	str	r0, [r5, #16]
 800e236:	b930      	cbnz	r0, 800e246 <_svfiprintf_r+0x32>
 800e238:	230c      	movs	r3, #12
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	f04f 30ff 	mov.w	r0, #4294967295
 800e240:	b01d      	add	sp, #116	@ 0x74
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e246:	2340      	movs	r3, #64	@ 0x40
 800e248:	616b      	str	r3, [r5, #20]
 800e24a:	2300      	movs	r3, #0
 800e24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e24e:	2320      	movs	r3, #32
 800e250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e254:	f8cd 800c 	str.w	r8, [sp, #12]
 800e258:	2330      	movs	r3, #48	@ 0x30
 800e25a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3f8 <_svfiprintf_r+0x1e4>
 800e25e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e262:	f04f 0901 	mov.w	r9, #1
 800e266:	4623      	mov	r3, r4
 800e268:	469a      	mov	sl, r3
 800e26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e26e:	b10a      	cbz	r2, 800e274 <_svfiprintf_r+0x60>
 800e270:	2a25      	cmp	r2, #37	@ 0x25
 800e272:	d1f9      	bne.n	800e268 <_svfiprintf_r+0x54>
 800e274:	ebba 0b04 	subs.w	fp, sl, r4
 800e278:	d00b      	beq.n	800e292 <_svfiprintf_r+0x7e>
 800e27a:	465b      	mov	r3, fp
 800e27c:	4622      	mov	r2, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	4638      	mov	r0, r7
 800e282:	f7ff ff6b 	bl	800e15c <__ssputs_r>
 800e286:	3001      	adds	r0, #1
 800e288:	f000 80a7 	beq.w	800e3da <_svfiprintf_r+0x1c6>
 800e28c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e28e:	445a      	add	r2, fp
 800e290:	9209      	str	r2, [sp, #36]	@ 0x24
 800e292:	f89a 3000 	ldrb.w	r3, [sl]
 800e296:	2b00      	cmp	r3, #0
 800e298:	f000 809f 	beq.w	800e3da <_svfiprintf_r+0x1c6>
 800e29c:	2300      	movs	r3, #0
 800e29e:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2a6:	f10a 0a01 	add.w	sl, sl, #1
 800e2aa:	9304      	str	r3, [sp, #16]
 800e2ac:	9307      	str	r3, [sp, #28]
 800e2ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2b4:	4654      	mov	r4, sl
 800e2b6:	2205      	movs	r2, #5
 800e2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2bc:	484e      	ldr	r0, [pc, #312]	@ (800e3f8 <_svfiprintf_r+0x1e4>)
 800e2be:	f7f1 ffb7 	bl	8000230 <memchr>
 800e2c2:	9a04      	ldr	r2, [sp, #16]
 800e2c4:	b9d8      	cbnz	r0, 800e2fe <_svfiprintf_r+0xea>
 800e2c6:	06d0      	lsls	r0, r2, #27
 800e2c8:	bf44      	itt	mi
 800e2ca:	2320      	movmi	r3, #32
 800e2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2d0:	0711      	lsls	r1, r2, #28
 800e2d2:	bf44      	itt	mi
 800e2d4:	232b      	movmi	r3, #43	@ 0x2b
 800e2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2da:	f89a 3000 	ldrb.w	r3, [sl]
 800e2de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2e0:	d015      	beq.n	800e30e <_svfiprintf_r+0xfa>
 800e2e2:	9a07      	ldr	r2, [sp, #28]
 800e2e4:	4654      	mov	r4, sl
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	f04f 0c0a 	mov.w	ip, #10
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2f2:	3b30      	subs	r3, #48	@ 0x30
 800e2f4:	2b09      	cmp	r3, #9
 800e2f6:	d94b      	bls.n	800e390 <_svfiprintf_r+0x17c>
 800e2f8:	b1b0      	cbz	r0, 800e328 <_svfiprintf_r+0x114>
 800e2fa:	9207      	str	r2, [sp, #28]
 800e2fc:	e014      	b.n	800e328 <_svfiprintf_r+0x114>
 800e2fe:	eba0 0308 	sub.w	r3, r0, r8
 800e302:	fa09 f303 	lsl.w	r3, r9, r3
 800e306:	4313      	orrs	r3, r2
 800e308:	9304      	str	r3, [sp, #16]
 800e30a:	46a2      	mov	sl, r4
 800e30c:	e7d2      	b.n	800e2b4 <_svfiprintf_r+0xa0>
 800e30e:	9b03      	ldr	r3, [sp, #12]
 800e310:	1d19      	adds	r1, r3, #4
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	9103      	str	r1, [sp, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	bfbb      	ittet	lt
 800e31a:	425b      	neglt	r3, r3
 800e31c:	f042 0202 	orrlt.w	r2, r2, #2
 800e320:	9307      	strge	r3, [sp, #28]
 800e322:	9307      	strlt	r3, [sp, #28]
 800e324:	bfb8      	it	lt
 800e326:	9204      	strlt	r2, [sp, #16]
 800e328:	7823      	ldrb	r3, [r4, #0]
 800e32a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e32c:	d10a      	bne.n	800e344 <_svfiprintf_r+0x130>
 800e32e:	7863      	ldrb	r3, [r4, #1]
 800e330:	2b2a      	cmp	r3, #42	@ 0x2a
 800e332:	d132      	bne.n	800e39a <_svfiprintf_r+0x186>
 800e334:	9b03      	ldr	r3, [sp, #12]
 800e336:	1d1a      	adds	r2, r3, #4
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	9203      	str	r2, [sp, #12]
 800e33c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e340:	3402      	adds	r4, #2
 800e342:	9305      	str	r3, [sp, #20]
 800e344:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e408 <_svfiprintf_r+0x1f4>
 800e348:	7821      	ldrb	r1, [r4, #0]
 800e34a:	2203      	movs	r2, #3
 800e34c:	4650      	mov	r0, sl
 800e34e:	f7f1 ff6f 	bl	8000230 <memchr>
 800e352:	b138      	cbz	r0, 800e364 <_svfiprintf_r+0x150>
 800e354:	9b04      	ldr	r3, [sp, #16]
 800e356:	eba0 000a 	sub.w	r0, r0, sl
 800e35a:	2240      	movs	r2, #64	@ 0x40
 800e35c:	4082      	lsls	r2, r0
 800e35e:	4313      	orrs	r3, r2
 800e360:	3401      	adds	r4, #1
 800e362:	9304      	str	r3, [sp, #16]
 800e364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e368:	4824      	ldr	r0, [pc, #144]	@ (800e3fc <_svfiprintf_r+0x1e8>)
 800e36a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e36e:	2206      	movs	r2, #6
 800e370:	f7f1 ff5e 	bl	8000230 <memchr>
 800e374:	2800      	cmp	r0, #0
 800e376:	d036      	beq.n	800e3e6 <_svfiprintf_r+0x1d2>
 800e378:	4b21      	ldr	r3, [pc, #132]	@ (800e400 <_svfiprintf_r+0x1ec>)
 800e37a:	bb1b      	cbnz	r3, 800e3c4 <_svfiprintf_r+0x1b0>
 800e37c:	9b03      	ldr	r3, [sp, #12]
 800e37e:	3307      	adds	r3, #7
 800e380:	f023 0307 	bic.w	r3, r3, #7
 800e384:	3308      	adds	r3, #8
 800e386:	9303      	str	r3, [sp, #12]
 800e388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38a:	4433      	add	r3, r6
 800e38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e38e:	e76a      	b.n	800e266 <_svfiprintf_r+0x52>
 800e390:	fb0c 3202 	mla	r2, ip, r2, r3
 800e394:	460c      	mov	r4, r1
 800e396:	2001      	movs	r0, #1
 800e398:	e7a8      	b.n	800e2ec <_svfiprintf_r+0xd8>
 800e39a:	2300      	movs	r3, #0
 800e39c:	3401      	adds	r4, #1
 800e39e:	9305      	str	r3, [sp, #20]
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	f04f 0c0a 	mov.w	ip, #10
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3ac:	3a30      	subs	r2, #48	@ 0x30
 800e3ae:	2a09      	cmp	r2, #9
 800e3b0:	d903      	bls.n	800e3ba <_svfiprintf_r+0x1a6>
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d0c6      	beq.n	800e344 <_svfiprintf_r+0x130>
 800e3b6:	9105      	str	r1, [sp, #20]
 800e3b8:	e7c4      	b.n	800e344 <_svfiprintf_r+0x130>
 800e3ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3be:	4604      	mov	r4, r0
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e7f0      	b.n	800e3a6 <_svfiprintf_r+0x192>
 800e3c4:	ab03      	add	r3, sp, #12
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	462a      	mov	r2, r5
 800e3ca:	4b0e      	ldr	r3, [pc, #56]	@ (800e404 <_svfiprintf_r+0x1f0>)
 800e3cc:	a904      	add	r1, sp, #16
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	f7fc fc54 	bl	800ac7c <_printf_float>
 800e3d4:	1c42      	adds	r2, r0, #1
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	d1d6      	bne.n	800e388 <_svfiprintf_r+0x174>
 800e3da:	89ab      	ldrh	r3, [r5, #12]
 800e3dc:	065b      	lsls	r3, r3, #25
 800e3de:	f53f af2d 	bmi.w	800e23c <_svfiprintf_r+0x28>
 800e3e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3e4:	e72c      	b.n	800e240 <_svfiprintf_r+0x2c>
 800e3e6:	ab03      	add	r3, sp, #12
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	462a      	mov	r2, r5
 800e3ec:	4b05      	ldr	r3, [pc, #20]	@ (800e404 <_svfiprintf_r+0x1f0>)
 800e3ee:	a904      	add	r1, sp, #16
 800e3f0:	4638      	mov	r0, r7
 800e3f2:	f7fc fedb 	bl	800b1ac <_printf_i>
 800e3f6:	e7ed      	b.n	800e3d4 <_svfiprintf_r+0x1c0>
 800e3f8:	0800f979 	.word	0x0800f979
 800e3fc:	0800f983 	.word	0x0800f983
 800e400:	0800ac7d 	.word	0x0800ac7d
 800e404:	0800e15d 	.word	0x0800e15d
 800e408:	0800f97f 	.word	0x0800f97f

0800e40c <__sflush_r>:
 800e40c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e414:	0716      	lsls	r6, r2, #28
 800e416:	4605      	mov	r5, r0
 800e418:	460c      	mov	r4, r1
 800e41a:	d454      	bmi.n	800e4c6 <__sflush_r+0xba>
 800e41c:	684b      	ldr	r3, [r1, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dc02      	bgt.n	800e428 <__sflush_r+0x1c>
 800e422:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e424:	2b00      	cmp	r3, #0
 800e426:	dd48      	ble.n	800e4ba <__sflush_r+0xae>
 800e428:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e42a:	2e00      	cmp	r6, #0
 800e42c:	d045      	beq.n	800e4ba <__sflush_r+0xae>
 800e42e:	2300      	movs	r3, #0
 800e430:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e434:	682f      	ldr	r7, [r5, #0]
 800e436:	6a21      	ldr	r1, [r4, #32]
 800e438:	602b      	str	r3, [r5, #0]
 800e43a:	d030      	beq.n	800e49e <__sflush_r+0x92>
 800e43c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e43e:	89a3      	ldrh	r3, [r4, #12]
 800e440:	0759      	lsls	r1, r3, #29
 800e442:	d505      	bpl.n	800e450 <__sflush_r+0x44>
 800e444:	6863      	ldr	r3, [r4, #4]
 800e446:	1ad2      	subs	r2, r2, r3
 800e448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e44a:	b10b      	cbz	r3, 800e450 <__sflush_r+0x44>
 800e44c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e44e:	1ad2      	subs	r2, r2, r3
 800e450:	2300      	movs	r3, #0
 800e452:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e454:	6a21      	ldr	r1, [r4, #32]
 800e456:	4628      	mov	r0, r5
 800e458:	47b0      	blx	r6
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	d106      	bne.n	800e46e <__sflush_r+0x62>
 800e460:	6829      	ldr	r1, [r5, #0]
 800e462:	291d      	cmp	r1, #29
 800e464:	d82b      	bhi.n	800e4be <__sflush_r+0xb2>
 800e466:	4a2a      	ldr	r2, [pc, #168]	@ (800e510 <__sflush_r+0x104>)
 800e468:	410a      	asrs	r2, r1
 800e46a:	07d6      	lsls	r6, r2, #31
 800e46c:	d427      	bmi.n	800e4be <__sflush_r+0xb2>
 800e46e:	2200      	movs	r2, #0
 800e470:	6062      	str	r2, [r4, #4]
 800e472:	04d9      	lsls	r1, r3, #19
 800e474:	6922      	ldr	r2, [r4, #16]
 800e476:	6022      	str	r2, [r4, #0]
 800e478:	d504      	bpl.n	800e484 <__sflush_r+0x78>
 800e47a:	1c42      	adds	r2, r0, #1
 800e47c:	d101      	bne.n	800e482 <__sflush_r+0x76>
 800e47e:	682b      	ldr	r3, [r5, #0]
 800e480:	b903      	cbnz	r3, 800e484 <__sflush_r+0x78>
 800e482:	6560      	str	r0, [r4, #84]	@ 0x54
 800e484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e486:	602f      	str	r7, [r5, #0]
 800e488:	b1b9      	cbz	r1, 800e4ba <__sflush_r+0xae>
 800e48a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e48e:	4299      	cmp	r1, r3
 800e490:	d002      	beq.n	800e498 <__sflush_r+0x8c>
 800e492:	4628      	mov	r0, r5
 800e494:	f7fe fa2c 	bl	800c8f0 <_free_r>
 800e498:	2300      	movs	r3, #0
 800e49a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e49c:	e00d      	b.n	800e4ba <__sflush_r+0xae>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	47b0      	blx	r6
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	1c50      	adds	r0, r2, #1
 800e4a8:	d1c9      	bne.n	800e43e <__sflush_r+0x32>
 800e4aa:	682b      	ldr	r3, [r5, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d0c6      	beq.n	800e43e <__sflush_r+0x32>
 800e4b0:	2b1d      	cmp	r3, #29
 800e4b2:	d001      	beq.n	800e4b8 <__sflush_r+0xac>
 800e4b4:	2b16      	cmp	r3, #22
 800e4b6:	d11e      	bne.n	800e4f6 <__sflush_r+0xea>
 800e4b8:	602f      	str	r7, [r5, #0]
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	e022      	b.n	800e504 <__sflush_r+0xf8>
 800e4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4c2:	b21b      	sxth	r3, r3
 800e4c4:	e01b      	b.n	800e4fe <__sflush_r+0xf2>
 800e4c6:	690f      	ldr	r7, [r1, #16]
 800e4c8:	2f00      	cmp	r7, #0
 800e4ca:	d0f6      	beq.n	800e4ba <__sflush_r+0xae>
 800e4cc:	0793      	lsls	r3, r2, #30
 800e4ce:	680e      	ldr	r6, [r1, #0]
 800e4d0:	bf08      	it	eq
 800e4d2:	694b      	ldreq	r3, [r1, #20]
 800e4d4:	600f      	str	r7, [r1, #0]
 800e4d6:	bf18      	it	ne
 800e4d8:	2300      	movne	r3, #0
 800e4da:	eba6 0807 	sub.w	r8, r6, r7
 800e4de:	608b      	str	r3, [r1, #8]
 800e4e0:	f1b8 0f00 	cmp.w	r8, #0
 800e4e4:	dde9      	ble.n	800e4ba <__sflush_r+0xae>
 800e4e6:	6a21      	ldr	r1, [r4, #32]
 800e4e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e4ea:	4643      	mov	r3, r8
 800e4ec:	463a      	mov	r2, r7
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	47b0      	blx	r6
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	dc08      	bgt.n	800e508 <__sflush_r+0xfc>
 800e4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4fe:	81a3      	strh	r3, [r4, #12]
 800e500:	f04f 30ff 	mov.w	r0, #4294967295
 800e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e508:	4407      	add	r7, r0
 800e50a:	eba8 0800 	sub.w	r8, r8, r0
 800e50e:	e7e7      	b.n	800e4e0 <__sflush_r+0xd4>
 800e510:	dfbffffe 	.word	0xdfbffffe

0800e514 <_fflush_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	690b      	ldr	r3, [r1, #16]
 800e518:	4605      	mov	r5, r0
 800e51a:	460c      	mov	r4, r1
 800e51c:	b913      	cbnz	r3, 800e524 <_fflush_r+0x10>
 800e51e:	2500      	movs	r5, #0
 800e520:	4628      	mov	r0, r5
 800e522:	bd38      	pop	{r3, r4, r5, pc}
 800e524:	b118      	cbz	r0, 800e52e <_fflush_r+0x1a>
 800e526:	6a03      	ldr	r3, [r0, #32]
 800e528:	b90b      	cbnz	r3, 800e52e <_fflush_r+0x1a>
 800e52a:	f7fd f9ff 	bl	800b92c <__sinit>
 800e52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d0f3      	beq.n	800e51e <_fflush_r+0xa>
 800e536:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e538:	07d0      	lsls	r0, r2, #31
 800e53a:	d404      	bmi.n	800e546 <_fflush_r+0x32>
 800e53c:	0599      	lsls	r1, r3, #22
 800e53e:	d402      	bmi.n	800e546 <_fflush_r+0x32>
 800e540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e542:	f7fd fb72 	bl	800bc2a <__retarget_lock_acquire_recursive>
 800e546:	4628      	mov	r0, r5
 800e548:	4621      	mov	r1, r4
 800e54a:	f7ff ff5f 	bl	800e40c <__sflush_r>
 800e54e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e550:	07da      	lsls	r2, r3, #31
 800e552:	4605      	mov	r5, r0
 800e554:	d4e4      	bmi.n	800e520 <_fflush_r+0xc>
 800e556:	89a3      	ldrh	r3, [r4, #12]
 800e558:	059b      	lsls	r3, r3, #22
 800e55a:	d4e1      	bmi.n	800e520 <_fflush_r+0xc>
 800e55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e55e:	f7fd fb65 	bl	800bc2c <__retarget_lock_release_recursive>
 800e562:	e7dd      	b.n	800e520 <_fflush_r+0xc>

0800e564 <memmove>:
 800e564:	4288      	cmp	r0, r1
 800e566:	b510      	push	{r4, lr}
 800e568:	eb01 0402 	add.w	r4, r1, r2
 800e56c:	d902      	bls.n	800e574 <memmove+0x10>
 800e56e:	4284      	cmp	r4, r0
 800e570:	4623      	mov	r3, r4
 800e572:	d807      	bhi.n	800e584 <memmove+0x20>
 800e574:	1e43      	subs	r3, r0, #1
 800e576:	42a1      	cmp	r1, r4
 800e578:	d008      	beq.n	800e58c <memmove+0x28>
 800e57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e582:	e7f8      	b.n	800e576 <memmove+0x12>
 800e584:	4402      	add	r2, r0
 800e586:	4601      	mov	r1, r0
 800e588:	428a      	cmp	r2, r1
 800e58a:	d100      	bne.n	800e58e <memmove+0x2a>
 800e58c:	bd10      	pop	{r4, pc}
 800e58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e596:	e7f7      	b.n	800e588 <memmove+0x24>

0800e598 <strncmp>:
 800e598:	b510      	push	{r4, lr}
 800e59a:	b16a      	cbz	r2, 800e5b8 <strncmp+0x20>
 800e59c:	3901      	subs	r1, #1
 800e59e:	1884      	adds	r4, r0, r2
 800e5a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d103      	bne.n	800e5b4 <strncmp+0x1c>
 800e5ac:	42a0      	cmp	r0, r4
 800e5ae:	d001      	beq.n	800e5b4 <strncmp+0x1c>
 800e5b0:	2a00      	cmp	r2, #0
 800e5b2:	d1f5      	bne.n	800e5a0 <strncmp+0x8>
 800e5b4:	1ad0      	subs	r0, r2, r3
 800e5b6:	bd10      	pop	{r4, pc}
 800e5b8:	4610      	mov	r0, r2
 800e5ba:	e7fc      	b.n	800e5b6 <strncmp+0x1e>

0800e5bc <_sbrk_r>:
 800e5bc:	b538      	push	{r3, r4, r5, lr}
 800e5be:	4d06      	ldr	r5, [pc, #24]	@ (800e5d8 <_sbrk_r+0x1c>)
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	4608      	mov	r0, r1
 800e5c6:	602b      	str	r3, [r5, #0]
 800e5c8:	f7f4 feba 	bl	8003340 <_sbrk>
 800e5cc:	1c43      	adds	r3, r0, #1
 800e5ce:	d102      	bne.n	800e5d6 <_sbrk_r+0x1a>
 800e5d0:	682b      	ldr	r3, [r5, #0]
 800e5d2:	b103      	cbz	r3, 800e5d6 <_sbrk_r+0x1a>
 800e5d4:	6023      	str	r3, [r4, #0]
 800e5d6:	bd38      	pop	{r3, r4, r5, pc}
 800e5d8:	20005fd4 	.word	0x20005fd4
 800e5dc:	00000000 	.word	0x00000000

0800e5e0 <nan>:
 800e5e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e5e8 <nan+0x8>
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	00000000 	.word	0x00000000
 800e5ec:	7ff80000 	.word	0x7ff80000

0800e5f0 <__assert_func>:
 800e5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5f2:	4614      	mov	r4, r2
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	4b09      	ldr	r3, [pc, #36]	@ (800e61c <__assert_func+0x2c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	68d8      	ldr	r0, [r3, #12]
 800e5fe:	b954      	cbnz	r4, 800e616 <__assert_func+0x26>
 800e600:	4b07      	ldr	r3, [pc, #28]	@ (800e620 <__assert_func+0x30>)
 800e602:	461c      	mov	r4, r3
 800e604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e608:	9100      	str	r1, [sp, #0]
 800e60a:	462b      	mov	r3, r5
 800e60c:	4905      	ldr	r1, [pc, #20]	@ (800e624 <__assert_func+0x34>)
 800e60e:	f000 fba7 	bl	800ed60 <fiprintf>
 800e612:	f000 fbb7 	bl	800ed84 <abort>
 800e616:	4b04      	ldr	r3, [pc, #16]	@ (800e628 <__assert_func+0x38>)
 800e618:	e7f4      	b.n	800e604 <__assert_func+0x14>
 800e61a:	bf00      	nop
 800e61c:	2000017c 	.word	0x2000017c
 800e620:	0800f9cd 	.word	0x0800f9cd
 800e624:	0800f99f 	.word	0x0800f99f
 800e628:	0800f992 	.word	0x0800f992

0800e62c <_calloc_r>:
 800e62c:	b570      	push	{r4, r5, r6, lr}
 800e62e:	fba1 5402 	umull	r5, r4, r1, r2
 800e632:	b93c      	cbnz	r4, 800e644 <_calloc_r+0x18>
 800e634:	4629      	mov	r1, r5
 800e636:	f7fe f9cf 	bl	800c9d8 <_malloc_r>
 800e63a:	4606      	mov	r6, r0
 800e63c:	b928      	cbnz	r0, 800e64a <_calloc_r+0x1e>
 800e63e:	2600      	movs	r6, #0
 800e640:	4630      	mov	r0, r6
 800e642:	bd70      	pop	{r4, r5, r6, pc}
 800e644:	220c      	movs	r2, #12
 800e646:	6002      	str	r2, [r0, #0]
 800e648:	e7f9      	b.n	800e63e <_calloc_r+0x12>
 800e64a:	462a      	mov	r2, r5
 800e64c:	4621      	mov	r1, r4
 800e64e:	f7fd fa06 	bl	800ba5e <memset>
 800e652:	e7f5      	b.n	800e640 <_calloc_r+0x14>

0800e654 <rshift>:
 800e654:	6903      	ldr	r3, [r0, #16]
 800e656:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e65a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e65e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e662:	f100 0414 	add.w	r4, r0, #20
 800e666:	dd45      	ble.n	800e6f4 <rshift+0xa0>
 800e668:	f011 011f 	ands.w	r1, r1, #31
 800e66c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e670:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e674:	d10c      	bne.n	800e690 <rshift+0x3c>
 800e676:	f100 0710 	add.w	r7, r0, #16
 800e67a:	4629      	mov	r1, r5
 800e67c:	42b1      	cmp	r1, r6
 800e67e:	d334      	bcc.n	800e6ea <rshift+0x96>
 800e680:	1a9b      	subs	r3, r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	1eea      	subs	r2, r5, #3
 800e686:	4296      	cmp	r6, r2
 800e688:	bf38      	it	cc
 800e68a:	2300      	movcc	r3, #0
 800e68c:	4423      	add	r3, r4
 800e68e:	e015      	b.n	800e6bc <rshift+0x68>
 800e690:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e694:	f1c1 0820 	rsb	r8, r1, #32
 800e698:	40cf      	lsrs	r7, r1
 800e69a:	f105 0e04 	add.w	lr, r5, #4
 800e69e:	46a1      	mov	r9, r4
 800e6a0:	4576      	cmp	r6, lr
 800e6a2:	46f4      	mov	ip, lr
 800e6a4:	d815      	bhi.n	800e6d2 <rshift+0x7e>
 800e6a6:	1a9a      	subs	r2, r3, r2
 800e6a8:	0092      	lsls	r2, r2, #2
 800e6aa:	3a04      	subs	r2, #4
 800e6ac:	3501      	adds	r5, #1
 800e6ae:	42ae      	cmp	r6, r5
 800e6b0:	bf38      	it	cc
 800e6b2:	2200      	movcc	r2, #0
 800e6b4:	18a3      	adds	r3, r4, r2
 800e6b6:	50a7      	str	r7, [r4, r2]
 800e6b8:	b107      	cbz	r7, 800e6bc <rshift+0x68>
 800e6ba:	3304      	adds	r3, #4
 800e6bc:	1b1a      	subs	r2, r3, r4
 800e6be:	42a3      	cmp	r3, r4
 800e6c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6c4:	bf08      	it	eq
 800e6c6:	2300      	moveq	r3, #0
 800e6c8:	6102      	str	r2, [r0, #16]
 800e6ca:	bf08      	it	eq
 800e6cc:	6143      	streq	r3, [r0, #20]
 800e6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d2:	f8dc c000 	ldr.w	ip, [ip]
 800e6d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6da:	ea4c 0707 	orr.w	r7, ip, r7
 800e6de:	f849 7b04 	str.w	r7, [r9], #4
 800e6e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6e6:	40cf      	lsrs	r7, r1
 800e6e8:	e7da      	b.n	800e6a0 <rshift+0x4c>
 800e6ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6f2:	e7c3      	b.n	800e67c <rshift+0x28>
 800e6f4:	4623      	mov	r3, r4
 800e6f6:	e7e1      	b.n	800e6bc <rshift+0x68>

0800e6f8 <__hexdig_fun>:
 800e6f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e6fc:	2b09      	cmp	r3, #9
 800e6fe:	d802      	bhi.n	800e706 <__hexdig_fun+0xe>
 800e700:	3820      	subs	r0, #32
 800e702:	b2c0      	uxtb	r0, r0
 800e704:	4770      	bx	lr
 800e706:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e70a:	2b05      	cmp	r3, #5
 800e70c:	d801      	bhi.n	800e712 <__hexdig_fun+0x1a>
 800e70e:	3847      	subs	r0, #71	@ 0x47
 800e710:	e7f7      	b.n	800e702 <__hexdig_fun+0xa>
 800e712:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e716:	2b05      	cmp	r3, #5
 800e718:	d801      	bhi.n	800e71e <__hexdig_fun+0x26>
 800e71a:	3827      	subs	r0, #39	@ 0x27
 800e71c:	e7f1      	b.n	800e702 <__hexdig_fun+0xa>
 800e71e:	2000      	movs	r0, #0
 800e720:	4770      	bx	lr
	...

0800e724 <__gethex>:
 800e724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e728:	b085      	sub	sp, #20
 800e72a:	468a      	mov	sl, r1
 800e72c:	9302      	str	r3, [sp, #8]
 800e72e:	680b      	ldr	r3, [r1, #0]
 800e730:	9001      	str	r0, [sp, #4]
 800e732:	4690      	mov	r8, r2
 800e734:	1c9c      	adds	r4, r3, #2
 800e736:	46a1      	mov	r9, r4
 800e738:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e73c:	2830      	cmp	r0, #48	@ 0x30
 800e73e:	d0fa      	beq.n	800e736 <__gethex+0x12>
 800e740:	eba9 0303 	sub.w	r3, r9, r3
 800e744:	f1a3 0b02 	sub.w	fp, r3, #2
 800e748:	f7ff ffd6 	bl	800e6f8 <__hexdig_fun>
 800e74c:	4605      	mov	r5, r0
 800e74e:	2800      	cmp	r0, #0
 800e750:	d168      	bne.n	800e824 <__gethex+0x100>
 800e752:	49a0      	ldr	r1, [pc, #640]	@ (800e9d4 <__gethex+0x2b0>)
 800e754:	2201      	movs	r2, #1
 800e756:	4648      	mov	r0, r9
 800e758:	f7ff ff1e 	bl	800e598 <strncmp>
 800e75c:	4607      	mov	r7, r0
 800e75e:	2800      	cmp	r0, #0
 800e760:	d167      	bne.n	800e832 <__gethex+0x10e>
 800e762:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e766:	4626      	mov	r6, r4
 800e768:	f7ff ffc6 	bl	800e6f8 <__hexdig_fun>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d062      	beq.n	800e836 <__gethex+0x112>
 800e770:	4623      	mov	r3, r4
 800e772:	7818      	ldrb	r0, [r3, #0]
 800e774:	2830      	cmp	r0, #48	@ 0x30
 800e776:	4699      	mov	r9, r3
 800e778:	f103 0301 	add.w	r3, r3, #1
 800e77c:	d0f9      	beq.n	800e772 <__gethex+0x4e>
 800e77e:	f7ff ffbb 	bl	800e6f8 <__hexdig_fun>
 800e782:	fab0 f580 	clz	r5, r0
 800e786:	096d      	lsrs	r5, r5, #5
 800e788:	f04f 0b01 	mov.w	fp, #1
 800e78c:	464a      	mov	r2, r9
 800e78e:	4616      	mov	r6, r2
 800e790:	3201      	adds	r2, #1
 800e792:	7830      	ldrb	r0, [r6, #0]
 800e794:	f7ff ffb0 	bl	800e6f8 <__hexdig_fun>
 800e798:	2800      	cmp	r0, #0
 800e79a:	d1f8      	bne.n	800e78e <__gethex+0x6a>
 800e79c:	498d      	ldr	r1, [pc, #564]	@ (800e9d4 <__gethex+0x2b0>)
 800e79e:	2201      	movs	r2, #1
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	f7ff fef9 	bl	800e598 <strncmp>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	d13f      	bne.n	800e82a <__gethex+0x106>
 800e7aa:	b944      	cbnz	r4, 800e7be <__gethex+0x9a>
 800e7ac:	1c74      	adds	r4, r6, #1
 800e7ae:	4622      	mov	r2, r4
 800e7b0:	4616      	mov	r6, r2
 800e7b2:	3201      	adds	r2, #1
 800e7b4:	7830      	ldrb	r0, [r6, #0]
 800e7b6:	f7ff ff9f 	bl	800e6f8 <__hexdig_fun>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	d1f8      	bne.n	800e7b0 <__gethex+0x8c>
 800e7be:	1ba4      	subs	r4, r4, r6
 800e7c0:	00a7      	lsls	r7, r4, #2
 800e7c2:	7833      	ldrb	r3, [r6, #0]
 800e7c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e7c8:	2b50      	cmp	r3, #80	@ 0x50
 800e7ca:	d13e      	bne.n	800e84a <__gethex+0x126>
 800e7cc:	7873      	ldrb	r3, [r6, #1]
 800e7ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800e7d0:	d033      	beq.n	800e83a <__gethex+0x116>
 800e7d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800e7d4:	d034      	beq.n	800e840 <__gethex+0x11c>
 800e7d6:	1c71      	adds	r1, r6, #1
 800e7d8:	2400      	movs	r4, #0
 800e7da:	7808      	ldrb	r0, [r1, #0]
 800e7dc:	f7ff ff8c 	bl	800e6f8 <__hexdig_fun>
 800e7e0:	1e43      	subs	r3, r0, #1
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	2b18      	cmp	r3, #24
 800e7e6:	d830      	bhi.n	800e84a <__gethex+0x126>
 800e7e8:	f1a0 0210 	sub.w	r2, r0, #16
 800e7ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7f0:	f7ff ff82 	bl	800e6f8 <__hexdig_fun>
 800e7f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7f8:	fa5f fc8c 	uxtb.w	ip, ip
 800e7fc:	f1bc 0f18 	cmp.w	ip, #24
 800e800:	f04f 030a 	mov.w	r3, #10
 800e804:	d91e      	bls.n	800e844 <__gethex+0x120>
 800e806:	b104      	cbz	r4, 800e80a <__gethex+0xe6>
 800e808:	4252      	negs	r2, r2
 800e80a:	4417      	add	r7, r2
 800e80c:	f8ca 1000 	str.w	r1, [sl]
 800e810:	b1ed      	cbz	r5, 800e84e <__gethex+0x12a>
 800e812:	f1bb 0f00 	cmp.w	fp, #0
 800e816:	bf0c      	ite	eq
 800e818:	2506      	moveq	r5, #6
 800e81a:	2500      	movne	r5, #0
 800e81c:	4628      	mov	r0, r5
 800e81e:	b005      	add	sp, #20
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e824:	2500      	movs	r5, #0
 800e826:	462c      	mov	r4, r5
 800e828:	e7b0      	b.n	800e78c <__gethex+0x68>
 800e82a:	2c00      	cmp	r4, #0
 800e82c:	d1c7      	bne.n	800e7be <__gethex+0x9a>
 800e82e:	4627      	mov	r7, r4
 800e830:	e7c7      	b.n	800e7c2 <__gethex+0x9e>
 800e832:	464e      	mov	r6, r9
 800e834:	462f      	mov	r7, r5
 800e836:	2501      	movs	r5, #1
 800e838:	e7c3      	b.n	800e7c2 <__gethex+0x9e>
 800e83a:	2400      	movs	r4, #0
 800e83c:	1cb1      	adds	r1, r6, #2
 800e83e:	e7cc      	b.n	800e7da <__gethex+0xb6>
 800e840:	2401      	movs	r4, #1
 800e842:	e7fb      	b.n	800e83c <__gethex+0x118>
 800e844:	fb03 0002 	mla	r0, r3, r2, r0
 800e848:	e7ce      	b.n	800e7e8 <__gethex+0xc4>
 800e84a:	4631      	mov	r1, r6
 800e84c:	e7de      	b.n	800e80c <__gethex+0xe8>
 800e84e:	eba6 0309 	sub.w	r3, r6, r9
 800e852:	3b01      	subs	r3, #1
 800e854:	4629      	mov	r1, r5
 800e856:	2b07      	cmp	r3, #7
 800e858:	dc0a      	bgt.n	800e870 <__gethex+0x14c>
 800e85a:	9801      	ldr	r0, [sp, #4]
 800e85c:	f7fe f948 	bl	800caf0 <_Balloc>
 800e860:	4604      	mov	r4, r0
 800e862:	b940      	cbnz	r0, 800e876 <__gethex+0x152>
 800e864:	4b5c      	ldr	r3, [pc, #368]	@ (800e9d8 <__gethex+0x2b4>)
 800e866:	4602      	mov	r2, r0
 800e868:	21e4      	movs	r1, #228	@ 0xe4
 800e86a:	485c      	ldr	r0, [pc, #368]	@ (800e9dc <__gethex+0x2b8>)
 800e86c:	f7ff fec0 	bl	800e5f0 <__assert_func>
 800e870:	3101      	adds	r1, #1
 800e872:	105b      	asrs	r3, r3, #1
 800e874:	e7ef      	b.n	800e856 <__gethex+0x132>
 800e876:	f100 0a14 	add.w	sl, r0, #20
 800e87a:	2300      	movs	r3, #0
 800e87c:	4655      	mov	r5, sl
 800e87e:	469b      	mov	fp, r3
 800e880:	45b1      	cmp	r9, r6
 800e882:	d337      	bcc.n	800e8f4 <__gethex+0x1d0>
 800e884:	f845 bb04 	str.w	fp, [r5], #4
 800e888:	eba5 050a 	sub.w	r5, r5, sl
 800e88c:	10ad      	asrs	r5, r5, #2
 800e88e:	6125      	str	r5, [r4, #16]
 800e890:	4658      	mov	r0, fp
 800e892:	f7fe fa1f 	bl	800ccd4 <__hi0bits>
 800e896:	016d      	lsls	r5, r5, #5
 800e898:	f8d8 6000 	ldr.w	r6, [r8]
 800e89c:	1a2d      	subs	r5, r5, r0
 800e89e:	42b5      	cmp	r5, r6
 800e8a0:	dd54      	ble.n	800e94c <__gethex+0x228>
 800e8a2:	1bad      	subs	r5, r5, r6
 800e8a4:	4629      	mov	r1, r5
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f7fe fdb3 	bl	800d412 <__any_on>
 800e8ac:	4681      	mov	r9, r0
 800e8ae:	b178      	cbz	r0, 800e8d0 <__gethex+0x1ac>
 800e8b0:	1e6b      	subs	r3, r5, #1
 800e8b2:	1159      	asrs	r1, r3, #5
 800e8b4:	f003 021f 	and.w	r2, r3, #31
 800e8b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e8bc:	f04f 0901 	mov.w	r9, #1
 800e8c0:	fa09 f202 	lsl.w	r2, r9, r2
 800e8c4:	420a      	tst	r2, r1
 800e8c6:	d003      	beq.n	800e8d0 <__gethex+0x1ac>
 800e8c8:	454b      	cmp	r3, r9
 800e8ca:	dc36      	bgt.n	800e93a <__gethex+0x216>
 800e8cc:	f04f 0902 	mov.w	r9, #2
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f7ff febe 	bl	800e654 <rshift>
 800e8d8:	442f      	add	r7, r5
 800e8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8de:	42bb      	cmp	r3, r7
 800e8e0:	da42      	bge.n	800e968 <__gethex+0x244>
 800e8e2:	9801      	ldr	r0, [sp, #4]
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	f7fe f943 	bl	800cb70 <_Bfree>
 800e8ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	25a3      	movs	r5, #163	@ 0xa3
 800e8f2:	e793      	b.n	800e81c <__gethex+0xf8>
 800e8f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e8f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e8fa:	d012      	beq.n	800e922 <__gethex+0x1fe>
 800e8fc:	2b20      	cmp	r3, #32
 800e8fe:	d104      	bne.n	800e90a <__gethex+0x1e6>
 800e900:	f845 bb04 	str.w	fp, [r5], #4
 800e904:	f04f 0b00 	mov.w	fp, #0
 800e908:	465b      	mov	r3, fp
 800e90a:	7830      	ldrb	r0, [r6, #0]
 800e90c:	9303      	str	r3, [sp, #12]
 800e90e:	f7ff fef3 	bl	800e6f8 <__hexdig_fun>
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	f000 000f 	and.w	r0, r0, #15
 800e918:	4098      	lsls	r0, r3
 800e91a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e91e:	3304      	adds	r3, #4
 800e920:	e7ae      	b.n	800e880 <__gethex+0x15c>
 800e922:	45b1      	cmp	r9, r6
 800e924:	d8ea      	bhi.n	800e8fc <__gethex+0x1d8>
 800e926:	492b      	ldr	r1, [pc, #172]	@ (800e9d4 <__gethex+0x2b0>)
 800e928:	9303      	str	r3, [sp, #12]
 800e92a:	2201      	movs	r2, #1
 800e92c:	4630      	mov	r0, r6
 800e92e:	f7ff fe33 	bl	800e598 <strncmp>
 800e932:	9b03      	ldr	r3, [sp, #12]
 800e934:	2800      	cmp	r0, #0
 800e936:	d1e1      	bne.n	800e8fc <__gethex+0x1d8>
 800e938:	e7a2      	b.n	800e880 <__gethex+0x15c>
 800e93a:	1ea9      	subs	r1, r5, #2
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7fe fd68 	bl	800d412 <__any_on>
 800e942:	2800      	cmp	r0, #0
 800e944:	d0c2      	beq.n	800e8cc <__gethex+0x1a8>
 800e946:	f04f 0903 	mov.w	r9, #3
 800e94a:	e7c1      	b.n	800e8d0 <__gethex+0x1ac>
 800e94c:	da09      	bge.n	800e962 <__gethex+0x23e>
 800e94e:	1b75      	subs	r5, r6, r5
 800e950:	4621      	mov	r1, r4
 800e952:	9801      	ldr	r0, [sp, #4]
 800e954:	462a      	mov	r2, r5
 800e956:	f7fe fb23 	bl	800cfa0 <__lshift>
 800e95a:	1b7f      	subs	r7, r7, r5
 800e95c:	4604      	mov	r4, r0
 800e95e:	f100 0a14 	add.w	sl, r0, #20
 800e962:	f04f 0900 	mov.w	r9, #0
 800e966:	e7b8      	b.n	800e8da <__gethex+0x1b6>
 800e968:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e96c:	42bd      	cmp	r5, r7
 800e96e:	dd6f      	ble.n	800ea50 <__gethex+0x32c>
 800e970:	1bed      	subs	r5, r5, r7
 800e972:	42ae      	cmp	r6, r5
 800e974:	dc34      	bgt.n	800e9e0 <__gethex+0x2bc>
 800e976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d022      	beq.n	800e9c4 <__gethex+0x2a0>
 800e97e:	2b03      	cmp	r3, #3
 800e980:	d024      	beq.n	800e9cc <__gethex+0x2a8>
 800e982:	2b01      	cmp	r3, #1
 800e984:	d115      	bne.n	800e9b2 <__gethex+0x28e>
 800e986:	42ae      	cmp	r6, r5
 800e988:	d113      	bne.n	800e9b2 <__gethex+0x28e>
 800e98a:	2e01      	cmp	r6, #1
 800e98c:	d10b      	bne.n	800e9a6 <__gethex+0x282>
 800e98e:	9a02      	ldr	r2, [sp, #8]
 800e990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e994:	6013      	str	r3, [r2, #0]
 800e996:	2301      	movs	r3, #1
 800e998:	6123      	str	r3, [r4, #16]
 800e99a:	f8ca 3000 	str.w	r3, [sl]
 800e99e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9a0:	2562      	movs	r5, #98	@ 0x62
 800e9a2:	601c      	str	r4, [r3, #0]
 800e9a4:	e73a      	b.n	800e81c <__gethex+0xf8>
 800e9a6:	1e71      	subs	r1, r6, #1
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f7fe fd32 	bl	800d412 <__any_on>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d1ed      	bne.n	800e98e <__gethex+0x26a>
 800e9b2:	9801      	ldr	r0, [sp, #4]
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	f7fe f8db 	bl	800cb70 <_Bfree>
 800e9ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9bc:	2300      	movs	r3, #0
 800e9be:	6013      	str	r3, [r2, #0]
 800e9c0:	2550      	movs	r5, #80	@ 0x50
 800e9c2:	e72b      	b.n	800e81c <__gethex+0xf8>
 800e9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1f3      	bne.n	800e9b2 <__gethex+0x28e>
 800e9ca:	e7e0      	b.n	800e98e <__gethex+0x26a>
 800e9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1dd      	bne.n	800e98e <__gethex+0x26a>
 800e9d2:	e7ee      	b.n	800e9b2 <__gethex+0x28e>
 800e9d4:	0800f820 	.word	0x0800f820
 800e9d8:	0800f6b5 	.word	0x0800f6b5
 800e9dc:	0800f9ce 	.word	0x0800f9ce
 800e9e0:	1e6f      	subs	r7, r5, #1
 800e9e2:	f1b9 0f00 	cmp.w	r9, #0
 800e9e6:	d130      	bne.n	800ea4a <__gethex+0x326>
 800e9e8:	b127      	cbz	r7, 800e9f4 <__gethex+0x2d0>
 800e9ea:	4639      	mov	r1, r7
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f7fe fd10 	bl	800d412 <__any_on>
 800e9f2:	4681      	mov	r9, r0
 800e9f4:	117a      	asrs	r2, r7, #5
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9fc:	f007 071f 	and.w	r7, r7, #31
 800ea00:	40bb      	lsls	r3, r7
 800ea02:	4213      	tst	r3, r2
 800ea04:	4629      	mov	r1, r5
 800ea06:	4620      	mov	r0, r4
 800ea08:	bf18      	it	ne
 800ea0a:	f049 0902 	orrne.w	r9, r9, #2
 800ea0e:	f7ff fe21 	bl	800e654 <rshift>
 800ea12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ea16:	1b76      	subs	r6, r6, r5
 800ea18:	2502      	movs	r5, #2
 800ea1a:	f1b9 0f00 	cmp.w	r9, #0
 800ea1e:	d047      	beq.n	800eab0 <__gethex+0x38c>
 800ea20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d015      	beq.n	800ea54 <__gethex+0x330>
 800ea28:	2b03      	cmp	r3, #3
 800ea2a:	d017      	beq.n	800ea5c <__gethex+0x338>
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d109      	bne.n	800ea44 <__gethex+0x320>
 800ea30:	f019 0f02 	tst.w	r9, #2
 800ea34:	d006      	beq.n	800ea44 <__gethex+0x320>
 800ea36:	f8da 3000 	ldr.w	r3, [sl]
 800ea3a:	ea49 0903 	orr.w	r9, r9, r3
 800ea3e:	f019 0f01 	tst.w	r9, #1
 800ea42:	d10e      	bne.n	800ea62 <__gethex+0x33e>
 800ea44:	f045 0510 	orr.w	r5, r5, #16
 800ea48:	e032      	b.n	800eab0 <__gethex+0x38c>
 800ea4a:	f04f 0901 	mov.w	r9, #1
 800ea4e:	e7d1      	b.n	800e9f4 <__gethex+0x2d0>
 800ea50:	2501      	movs	r5, #1
 800ea52:	e7e2      	b.n	800ea1a <__gethex+0x2f6>
 800ea54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea56:	f1c3 0301 	rsb	r3, r3, #1
 800ea5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d0f0      	beq.n	800ea44 <__gethex+0x320>
 800ea62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea66:	f104 0314 	add.w	r3, r4, #20
 800ea6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea72:	f04f 0c00 	mov.w	ip, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ea80:	d01b      	beq.n	800eaba <__gethex+0x396>
 800ea82:	3201      	adds	r2, #1
 800ea84:	6002      	str	r2, [r0, #0]
 800ea86:	2d02      	cmp	r5, #2
 800ea88:	f104 0314 	add.w	r3, r4, #20
 800ea8c:	d13c      	bne.n	800eb08 <__gethex+0x3e4>
 800ea8e:	f8d8 2000 	ldr.w	r2, [r8]
 800ea92:	3a01      	subs	r2, #1
 800ea94:	42b2      	cmp	r2, r6
 800ea96:	d109      	bne.n	800eaac <__gethex+0x388>
 800ea98:	1171      	asrs	r1, r6, #5
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eaa0:	f006 061f 	and.w	r6, r6, #31
 800eaa4:	fa02 f606 	lsl.w	r6, r2, r6
 800eaa8:	421e      	tst	r6, r3
 800eaaa:	d13a      	bne.n	800eb22 <__gethex+0x3fe>
 800eaac:	f045 0520 	orr.w	r5, r5, #32
 800eab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eab2:	601c      	str	r4, [r3, #0]
 800eab4:	9b02      	ldr	r3, [sp, #8]
 800eab6:	601f      	str	r7, [r3, #0]
 800eab8:	e6b0      	b.n	800e81c <__gethex+0xf8>
 800eaba:	4299      	cmp	r1, r3
 800eabc:	f843 cc04 	str.w	ip, [r3, #-4]
 800eac0:	d8d9      	bhi.n	800ea76 <__gethex+0x352>
 800eac2:	68a3      	ldr	r3, [r4, #8]
 800eac4:	459b      	cmp	fp, r3
 800eac6:	db17      	blt.n	800eaf8 <__gethex+0x3d4>
 800eac8:	6861      	ldr	r1, [r4, #4]
 800eaca:	9801      	ldr	r0, [sp, #4]
 800eacc:	3101      	adds	r1, #1
 800eace:	f7fe f80f 	bl	800caf0 <_Balloc>
 800ead2:	4681      	mov	r9, r0
 800ead4:	b918      	cbnz	r0, 800eade <__gethex+0x3ba>
 800ead6:	4b1a      	ldr	r3, [pc, #104]	@ (800eb40 <__gethex+0x41c>)
 800ead8:	4602      	mov	r2, r0
 800eada:	2184      	movs	r1, #132	@ 0x84
 800eadc:	e6c5      	b.n	800e86a <__gethex+0x146>
 800eade:	6922      	ldr	r2, [r4, #16]
 800eae0:	3202      	adds	r2, #2
 800eae2:	f104 010c 	add.w	r1, r4, #12
 800eae6:	0092      	lsls	r2, r2, #2
 800eae8:	300c      	adds	r0, #12
 800eaea:	f7fd f8a0 	bl	800bc2e <memcpy>
 800eaee:	4621      	mov	r1, r4
 800eaf0:	9801      	ldr	r0, [sp, #4]
 800eaf2:	f7fe f83d 	bl	800cb70 <_Bfree>
 800eaf6:	464c      	mov	r4, r9
 800eaf8:	6923      	ldr	r3, [r4, #16]
 800eafa:	1c5a      	adds	r2, r3, #1
 800eafc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb00:	6122      	str	r2, [r4, #16]
 800eb02:	2201      	movs	r2, #1
 800eb04:	615a      	str	r2, [r3, #20]
 800eb06:	e7be      	b.n	800ea86 <__gethex+0x362>
 800eb08:	6922      	ldr	r2, [r4, #16]
 800eb0a:	455a      	cmp	r2, fp
 800eb0c:	dd0b      	ble.n	800eb26 <__gethex+0x402>
 800eb0e:	2101      	movs	r1, #1
 800eb10:	4620      	mov	r0, r4
 800eb12:	f7ff fd9f 	bl	800e654 <rshift>
 800eb16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb1a:	3701      	adds	r7, #1
 800eb1c:	42bb      	cmp	r3, r7
 800eb1e:	f6ff aee0 	blt.w	800e8e2 <__gethex+0x1be>
 800eb22:	2501      	movs	r5, #1
 800eb24:	e7c2      	b.n	800eaac <__gethex+0x388>
 800eb26:	f016 061f 	ands.w	r6, r6, #31
 800eb2a:	d0fa      	beq.n	800eb22 <__gethex+0x3fe>
 800eb2c:	4453      	add	r3, sl
 800eb2e:	f1c6 0620 	rsb	r6, r6, #32
 800eb32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb36:	f7fe f8cd 	bl	800ccd4 <__hi0bits>
 800eb3a:	42b0      	cmp	r0, r6
 800eb3c:	dbe7      	blt.n	800eb0e <__gethex+0x3ea>
 800eb3e:	e7f0      	b.n	800eb22 <__gethex+0x3fe>
 800eb40:	0800f6b5 	.word	0x0800f6b5

0800eb44 <L_shift>:
 800eb44:	f1c2 0208 	rsb	r2, r2, #8
 800eb48:	0092      	lsls	r2, r2, #2
 800eb4a:	b570      	push	{r4, r5, r6, lr}
 800eb4c:	f1c2 0620 	rsb	r6, r2, #32
 800eb50:	6843      	ldr	r3, [r0, #4]
 800eb52:	6804      	ldr	r4, [r0, #0]
 800eb54:	fa03 f506 	lsl.w	r5, r3, r6
 800eb58:	432c      	orrs	r4, r5
 800eb5a:	40d3      	lsrs	r3, r2
 800eb5c:	6004      	str	r4, [r0, #0]
 800eb5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb62:	4288      	cmp	r0, r1
 800eb64:	d3f4      	bcc.n	800eb50 <L_shift+0xc>
 800eb66:	bd70      	pop	{r4, r5, r6, pc}

0800eb68 <__match>:
 800eb68:	b530      	push	{r4, r5, lr}
 800eb6a:	6803      	ldr	r3, [r0, #0]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb72:	b914      	cbnz	r4, 800eb7a <__match+0x12>
 800eb74:	6003      	str	r3, [r0, #0]
 800eb76:	2001      	movs	r0, #1
 800eb78:	bd30      	pop	{r4, r5, pc}
 800eb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eb82:	2d19      	cmp	r5, #25
 800eb84:	bf98      	it	ls
 800eb86:	3220      	addls	r2, #32
 800eb88:	42a2      	cmp	r2, r4
 800eb8a:	d0f0      	beq.n	800eb6e <__match+0x6>
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	e7f3      	b.n	800eb78 <__match+0x10>

0800eb90 <__hexnan>:
 800eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb94:	680b      	ldr	r3, [r1, #0]
 800eb96:	6801      	ldr	r1, [r0, #0]
 800eb98:	115e      	asrs	r6, r3, #5
 800eb9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb9e:	f013 031f 	ands.w	r3, r3, #31
 800eba2:	b087      	sub	sp, #28
 800eba4:	bf18      	it	ne
 800eba6:	3604      	addne	r6, #4
 800eba8:	2500      	movs	r5, #0
 800ebaa:	1f37      	subs	r7, r6, #4
 800ebac:	4682      	mov	sl, r0
 800ebae:	4690      	mov	r8, r2
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ebb6:	46b9      	mov	r9, r7
 800ebb8:	463c      	mov	r4, r7
 800ebba:	9502      	str	r5, [sp, #8]
 800ebbc:	46ab      	mov	fp, r5
 800ebbe:	784a      	ldrb	r2, [r1, #1]
 800ebc0:	1c4b      	adds	r3, r1, #1
 800ebc2:	9303      	str	r3, [sp, #12]
 800ebc4:	b342      	cbz	r2, 800ec18 <__hexnan+0x88>
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	9105      	str	r1, [sp, #20]
 800ebca:	9204      	str	r2, [sp, #16]
 800ebcc:	f7ff fd94 	bl	800e6f8 <__hexdig_fun>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d151      	bne.n	800ec78 <__hexnan+0xe8>
 800ebd4:	9a04      	ldr	r2, [sp, #16]
 800ebd6:	9905      	ldr	r1, [sp, #20]
 800ebd8:	2a20      	cmp	r2, #32
 800ebda:	d818      	bhi.n	800ec0e <__hexnan+0x7e>
 800ebdc:	9b02      	ldr	r3, [sp, #8]
 800ebde:	459b      	cmp	fp, r3
 800ebe0:	dd13      	ble.n	800ec0a <__hexnan+0x7a>
 800ebe2:	454c      	cmp	r4, r9
 800ebe4:	d206      	bcs.n	800ebf4 <__hexnan+0x64>
 800ebe6:	2d07      	cmp	r5, #7
 800ebe8:	dc04      	bgt.n	800ebf4 <__hexnan+0x64>
 800ebea:	462a      	mov	r2, r5
 800ebec:	4649      	mov	r1, r9
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7ff ffa8 	bl	800eb44 <L_shift>
 800ebf4:	4544      	cmp	r4, r8
 800ebf6:	d952      	bls.n	800ec9e <__hexnan+0x10e>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f1a4 0904 	sub.w	r9, r4, #4
 800ebfe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec02:	f8cd b008 	str.w	fp, [sp, #8]
 800ec06:	464c      	mov	r4, r9
 800ec08:	461d      	mov	r5, r3
 800ec0a:	9903      	ldr	r1, [sp, #12]
 800ec0c:	e7d7      	b.n	800ebbe <__hexnan+0x2e>
 800ec0e:	2a29      	cmp	r2, #41	@ 0x29
 800ec10:	d157      	bne.n	800ecc2 <__hexnan+0x132>
 800ec12:	3102      	adds	r1, #2
 800ec14:	f8ca 1000 	str.w	r1, [sl]
 800ec18:	f1bb 0f00 	cmp.w	fp, #0
 800ec1c:	d051      	beq.n	800ecc2 <__hexnan+0x132>
 800ec1e:	454c      	cmp	r4, r9
 800ec20:	d206      	bcs.n	800ec30 <__hexnan+0xa0>
 800ec22:	2d07      	cmp	r5, #7
 800ec24:	dc04      	bgt.n	800ec30 <__hexnan+0xa0>
 800ec26:	462a      	mov	r2, r5
 800ec28:	4649      	mov	r1, r9
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f7ff ff8a 	bl	800eb44 <L_shift>
 800ec30:	4544      	cmp	r4, r8
 800ec32:	d936      	bls.n	800eca2 <__hexnan+0x112>
 800ec34:	f1a8 0204 	sub.w	r2, r8, #4
 800ec38:	4623      	mov	r3, r4
 800ec3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec42:	429f      	cmp	r7, r3
 800ec44:	d2f9      	bcs.n	800ec3a <__hexnan+0xaa>
 800ec46:	1b3b      	subs	r3, r7, r4
 800ec48:	f023 0303 	bic.w	r3, r3, #3
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	3401      	adds	r4, #1
 800ec50:	3e03      	subs	r6, #3
 800ec52:	42b4      	cmp	r4, r6
 800ec54:	bf88      	it	hi
 800ec56:	2304      	movhi	r3, #4
 800ec58:	4443      	add	r3, r8
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f843 2b04 	str.w	r2, [r3], #4
 800ec60:	429f      	cmp	r7, r3
 800ec62:	d2fb      	bcs.n	800ec5c <__hexnan+0xcc>
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	b91b      	cbnz	r3, 800ec70 <__hexnan+0xe0>
 800ec68:	4547      	cmp	r7, r8
 800ec6a:	d128      	bne.n	800ecbe <__hexnan+0x12e>
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	603b      	str	r3, [r7, #0]
 800ec70:	2005      	movs	r0, #5
 800ec72:	b007      	add	sp, #28
 800ec74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec78:	3501      	adds	r5, #1
 800ec7a:	2d08      	cmp	r5, #8
 800ec7c:	f10b 0b01 	add.w	fp, fp, #1
 800ec80:	dd06      	ble.n	800ec90 <__hexnan+0x100>
 800ec82:	4544      	cmp	r4, r8
 800ec84:	d9c1      	bls.n	800ec0a <__hexnan+0x7a>
 800ec86:	2300      	movs	r3, #0
 800ec88:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec8c:	2501      	movs	r5, #1
 800ec8e:	3c04      	subs	r4, #4
 800ec90:	6822      	ldr	r2, [r4, #0]
 800ec92:	f000 000f 	and.w	r0, r0, #15
 800ec96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec9a:	6020      	str	r0, [r4, #0]
 800ec9c:	e7b5      	b.n	800ec0a <__hexnan+0x7a>
 800ec9e:	2508      	movs	r5, #8
 800eca0:	e7b3      	b.n	800ec0a <__hexnan+0x7a>
 800eca2:	9b01      	ldr	r3, [sp, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d0dd      	beq.n	800ec64 <__hexnan+0xd4>
 800eca8:	f1c3 0320 	rsb	r3, r3, #32
 800ecac:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb0:	40da      	lsrs	r2, r3
 800ecb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ecb6:	4013      	ands	r3, r2
 800ecb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800ecbc:	e7d2      	b.n	800ec64 <__hexnan+0xd4>
 800ecbe:	3f04      	subs	r7, #4
 800ecc0:	e7d0      	b.n	800ec64 <__hexnan+0xd4>
 800ecc2:	2004      	movs	r0, #4
 800ecc4:	e7d5      	b.n	800ec72 <__hexnan+0xe2>

0800ecc6 <__ascii_mbtowc>:
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	b901      	cbnz	r1, 800eccc <__ascii_mbtowc+0x6>
 800ecca:	a901      	add	r1, sp, #4
 800eccc:	b142      	cbz	r2, 800ece0 <__ascii_mbtowc+0x1a>
 800ecce:	b14b      	cbz	r3, 800ece4 <__ascii_mbtowc+0x1e>
 800ecd0:	7813      	ldrb	r3, [r2, #0]
 800ecd2:	600b      	str	r3, [r1, #0]
 800ecd4:	7812      	ldrb	r2, [r2, #0]
 800ecd6:	1e10      	subs	r0, r2, #0
 800ecd8:	bf18      	it	ne
 800ecda:	2001      	movne	r0, #1
 800ecdc:	b002      	add	sp, #8
 800ecde:	4770      	bx	lr
 800ece0:	4610      	mov	r0, r2
 800ece2:	e7fb      	b.n	800ecdc <__ascii_mbtowc+0x16>
 800ece4:	f06f 0001 	mvn.w	r0, #1
 800ece8:	e7f8      	b.n	800ecdc <__ascii_mbtowc+0x16>

0800ecea <_realloc_r>:
 800ecea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecee:	4680      	mov	r8, r0
 800ecf0:	4615      	mov	r5, r2
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	b921      	cbnz	r1, 800ed00 <_realloc_r+0x16>
 800ecf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfa:	4611      	mov	r1, r2
 800ecfc:	f7fd be6c 	b.w	800c9d8 <_malloc_r>
 800ed00:	b92a      	cbnz	r2, 800ed0e <_realloc_r+0x24>
 800ed02:	f7fd fdf5 	bl	800c8f0 <_free_r>
 800ed06:	2400      	movs	r4, #0
 800ed08:	4620      	mov	r0, r4
 800ed0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0e:	f000 f840 	bl	800ed92 <_malloc_usable_size_r>
 800ed12:	4285      	cmp	r5, r0
 800ed14:	4606      	mov	r6, r0
 800ed16:	d802      	bhi.n	800ed1e <_realloc_r+0x34>
 800ed18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed1c:	d8f4      	bhi.n	800ed08 <_realloc_r+0x1e>
 800ed1e:	4629      	mov	r1, r5
 800ed20:	4640      	mov	r0, r8
 800ed22:	f7fd fe59 	bl	800c9d8 <_malloc_r>
 800ed26:	4607      	mov	r7, r0
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d0ec      	beq.n	800ed06 <_realloc_r+0x1c>
 800ed2c:	42b5      	cmp	r5, r6
 800ed2e:	462a      	mov	r2, r5
 800ed30:	4621      	mov	r1, r4
 800ed32:	bf28      	it	cs
 800ed34:	4632      	movcs	r2, r6
 800ed36:	f7fc ff7a 	bl	800bc2e <memcpy>
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	f7fd fdd7 	bl	800c8f0 <_free_r>
 800ed42:	463c      	mov	r4, r7
 800ed44:	e7e0      	b.n	800ed08 <_realloc_r+0x1e>

0800ed46 <__ascii_wctomb>:
 800ed46:	4603      	mov	r3, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	b141      	cbz	r1, 800ed5e <__ascii_wctomb+0x18>
 800ed4c:	2aff      	cmp	r2, #255	@ 0xff
 800ed4e:	d904      	bls.n	800ed5a <__ascii_wctomb+0x14>
 800ed50:	228a      	movs	r2, #138	@ 0x8a
 800ed52:	601a      	str	r2, [r3, #0]
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295
 800ed58:	4770      	bx	lr
 800ed5a:	700a      	strb	r2, [r1, #0]
 800ed5c:	2001      	movs	r0, #1
 800ed5e:	4770      	bx	lr

0800ed60 <fiprintf>:
 800ed60:	b40e      	push	{r1, r2, r3}
 800ed62:	b503      	push	{r0, r1, lr}
 800ed64:	4601      	mov	r1, r0
 800ed66:	ab03      	add	r3, sp, #12
 800ed68:	4805      	ldr	r0, [pc, #20]	@ (800ed80 <fiprintf+0x20>)
 800ed6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed6e:	6800      	ldr	r0, [r0, #0]
 800ed70:	9301      	str	r3, [sp, #4]
 800ed72:	f000 f83f 	bl	800edf4 <_vfiprintf_r>
 800ed76:	b002      	add	sp, #8
 800ed78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed7c:	b003      	add	sp, #12
 800ed7e:	4770      	bx	lr
 800ed80:	2000017c 	.word	0x2000017c

0800ed84 <abort>:
 800ed84:	b508      	push	{r3, lr}
 800ed86:	2006      	movs	r0, #6
 800ed88:	f000 fa08 	bl	800f19c <raise>
 800ed8c:	2001      	movs	r0, #1
 800ed8e:	f7f4 fa5f 	bl	8003250 <_exit>

0800ed92 <_malloc_usable_size_r>:
 800ed92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed96:	1f18      	subs	r0, r3, #4
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	bfbc      	itt	lt
 800ed9c:	580b      	ldrlt	r3, [r1, r0]
 800ed9e:	18c0      	addlt	r0, r0, r3
 800eda0:	4770      	bx	lr

0800eda2 <__sfputc_r>:
 800eda2:	6893      	ldr	r3, [r2, #8]
 800eda4:	3b01      	subs	r3, #1
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	b410      	push	{r4}
 800edaa:	6093      	str	r3, [r2, #8]
 800edac:	da08      	bge.n	800edc0 <__sfputc_r+0x1e>
 800edae:	6994      	ldr	r4, [r2, #24]
 800edb0:	42a3      	cmp	r3, r4
 800edb2:	db01      	blt.n	800edb8 <__sfputc_r+0x16>
 800edb4:	290a      	cmp	r1, #10
 800edb6:	d103      	bne.n	800edc0 <__sfputc_r+0x1e>
 800edb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edbc:	f000 b932 	b.w	800f024 <__swbuf_r>
 800edc0:	6813      	ldr	r3, [r2, #0]
 800edc2:	1c58      	adds	r0, r3, #1
 800edc4:	6010      	str	r0, [r2, #0]
 800edc6:	7019      	strb	r1, [r3, #0]
 800edc8:	4608      	mov	r0, r1
 800edca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <__sfputs_r>:
 800edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd2:	4606      	mov	r6, r0
 800edd4:	460f      	mov	r7, r1
 800edd6:	4614      	mov	r4, r2
 800edd8:	18d5      	adds	r5, r2, r3
 800edda:	42ac      	cmp	r4, r5
 800eddc:	d101      	bne.n	800ede2 <__sfputs_r+0x12>
 800edde:	2000      	movs	r0, #0
 800ede0:	e007      	b.n	800edf2 <__sfputs_r+0x22>
 800ede2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ede6:	463a      	mov	r2, r7
 800ede8:	4630      	mov	r0, r6
 800edea:	f7ff ffda 	bl	800eda2 <__sfputc_r>
 800edee:	1c43      	adds	r3, r0, #1
 800edf0:	d1f3      	bne.n	800edda <__sfputs_r+0xa>
 800edf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edf4 <_vfiprintf_r>:
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	460d      	mov	r5, r1
 800edfa:	b09d      	sub	sp, #116	@ 0x74
 800edfc:	4614      	mov	r4, r2
 800edfe:	4698      	mov	r8, r3
 800ee00:	4606      	mov	r6, r0
 800ee02:	b118      	cbz	r0, 800ee0c <_vfiprintf_r+0x18>
 800ee04:	6a03      	ldr	r3, [r0, #32]
 800ee06:	b90b      	cbnz	r3, 800ee0c <_vfiprintf_r+0x18>
 800ee08:	f7fc fd90 	bl	800b92c <__sinit>
 800ee0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee0e:	07d9      	lsls	r1, r3, #31
 800ee10:	d405      	bmi.n	800ee1e <_vfiprintf_r+0x2a>
 800ee12:	89ab      	ldrh	r3, [r5, #12]
 800ee14:	059a      	lsls	r2, r3, #22
 800ee16:	d402      	bmi.n	800ee1e <_vfiprintf_r+0x2a>
 800ee18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee1a:	f7fc ff06 	bl	800bc2a <__retarget_lock_acquire_recursive>
 800ee1e:	89ab      	ldrh	r3, [r5, #12]
 800ee20:	071b      	lsls	r3, r3, #28
 800ee22:	d501      	bpl.n	800ee28 <_vfiprintf_r+0x34>
 800ee24:	692b      	ldr	r3, [r5, #16]
 800ee26:	b99b      	cbnz	r3, 800ee50 <_vfiprintf_r+0x5c>
 800ee28:	4629      	mov	r1, r5
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	f000 f938 	bl	800f0a0 <__swsetup_r>
 800ee30:	b170      	cbz	r0, 800ee50 <_vfiprintf_r+0x5c>
 800ee32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee34:	07dc      	lsls	r4, r3, #31
 800ee36:	d504      	bpl.n	800ee42 <_vfiprintf_r+0x4e>
 800ee38:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3c:	b01d      	add	sp, #116	@ 0x74
 800ee3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee42:	89ab      	ldrh	r3, [r5, #12]
 800ee44:	0598      	lsls	r0, r3, #22
 800ee46:	d4f7      	bmi.n	800ee38 <_vfiprintf_r+0x44>
 800ee48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee4a:	f7fc feef 	bl	800bc2c <__retarget_lock_release_recursive>
 800ee4e:	e7f3      	b.n	800ee38 <_vfiprintf_r+0x44>
 800ee50:	2300      	movs	r3, #0
 800ee52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee54:	2320      	movs	r3, #32
 800ee56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee5e:	2330      	movs	r3, #48	@ 0x30
 800ee60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f010 <_vfiprintf_r+0x21c>
 800ee64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee68:	f04f 0901 	mov.w	r9, #1
 800ee6c:	4623      	mov	r3, r4
 800ee6e:	469a      	mov	sl, r3
 800ee70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee74:	b10a      	cbz	r2, 800ee7a <_vfiprintf_r+0x86>
 800ee76:	2a25      	cmp	r2, #37	@ 0x25
 800ee78:	d1f9      	bne.n	800ee6e <_vfiprintf_r+0x7a>
 800ee7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee7e:	d00b      	beq.n	800ee98 <_vfiprintf_r+0xa4>
 800ee80:	465b      	mov	r3, fp
 800ee82:	4622      	mov	r2, r4
 800ee84:	4629      	mov	r1, r5
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7ff ffa2 	bl	800edd0 <__sfputs_r>
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	f000 80a7 	beq.w	800efe0 <_vfiprintf_r+0x1ec>
 800ee92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee94:	445a      	add	r2, fp
 800ee96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee98:	f89a 3000 	ldrb.w	r3, [sl]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 809f 	beq.w	800efe0 <_vfiprintf_r+0x1ec>
 800eea2:	2300      	movs	r3, #0
 800eea4:	f04f 32ff 	mov.w	r2, #4294967295
 800eea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeac:	f10a 0a01 	add.w	sl, sl, #1
 800eeb0:	9304      	str	r3, [sp, #16]
 800eeb2:	9307      	str	r3, [sp, #28]
 800eeb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeba:	4654      	mov	r4, sl
 800eebc:	2205      	movs	r2, #5
 800eebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec2:	4853      	ldr	r0, [pc, #332]	@ (800f010 <_vfiprintf_r+0x21c>)
 800eec4:	f7f1 f9b4 	bl	8000230 <memchr>
 800eec8:	9a04      	ldr	r2, [sp, #16]
 800eeca:	b9d8      	cbnz	r0, 800ef04 <_vfiprintf_r+0x110>
 800eecc:	06d1      	lsls	r1, r2, #27
 800eece:	bf44      	itt	mi
 800eed0:	2320      	movmi	r3, #32
 800eed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed6:	0713      	lsls	r3, r2, #28
 800eed8:	bf44      	itt	mi
 800eeda:	232b      	movmi	r3, #43	@ 0x2b
 800eedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eee0:	f89a 3000 	ldrb.w	r3, [sl]
 800eee4:	2b2a      	cmp	r3, #42	@ 0x2a
 800eee6:	d015      	beq.n	800ef14 <_vfiprintf_r+0x120>
 800eee8:	9a07      	ldr	r2, [sp, #28]
 800eeea:	4654      	mov	r4, sl
 800eeec:	2000      	movs	r0, #0
 800eeee:	f04f 0c0a 	mov.w	ip, #10
 800eef2:	4621      	mov	r1, r4
 800eef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eef8:	3b30      	subs	r3, #48	@ 0x30
 800eefa:	2b09      	cmp	r3, #9
 800eefc:	d94b      	bls.n	800ef96 <_vfiprintf_r+0x1a2>
 800eefe:	b1b0      	cbz	r0, 800ef2e <_vfiprintf_r+0x13a>
 800ef00:	9207      	str	r2, [sp, #28]
 800ef02:	e014      	b.n	800ef2e <_vfiprintf_r+0x13a>
 800ef04:	eba0 0308 	sub.w	r3, r0, r8
 800ef08:	fa09 f303 	lsl.w	r3, r9, r3
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	9304      	str	r3, [sp, #16]
 800ef10:	46a2      	mov	sl, r4
 800ef12:	e7d2      	b.n	800eeba <_vfiprintf_r+0xc6>
 800ef14:	9b03      	ldr	r3, [sp, #12]
 800ef16:	1d19      	adds	r1, r3, #4
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	9103      	str	r1, [sp, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	bfbb      	ittet	lt
 800ef20:	425b      	neglt	r3, r3
 800ef22:	f042 0202 	orrlt.w	r2, r2, #2
 800ef26:	9307      	strge	r3, [sp, #28]
 800ef28:	9307      	strlt	r3, [sp, #28]
 800ef2a:	bfb8      	it	lt
 800ef2c:	9204      	strlt	r2, [sp, #16]
 800ef2e:	7823      	ldrb	r3, [r4, #0]
 800ef30:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef32:	d10a      	bne.n	800ef4a <_vfiprintf_r+0x156>
 800ef34:	7863      	ldrb	r3, [r4, #1]
 800ef36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef38:	d132      	bne.n	800efa0 <_vfiprintf_r+0x1ac>
 800ef3a:	9b03      	ldr	r3, [sp, #12]
 800ef3c:	1d1a      	adds	r2, r3, #4
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	9203      	str	r2, [sp, #12]
 800ef42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef46:	3402      	adds	r4, #2
 800ef48:	9305      	str	r3, [sp, #20]
 800ef4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f020 <_vfiprintf_r+0x22c>
 800ef4e:	7821      	ldrb	r1, [r4, #0]
 800ef50:	2203      	movs	r2, #3
 800ef52:	4650      	mov	r0, sl
 800ef54:	f7f1 f96c 	bl	8000230 <memchr>
 800ef58:	b138      	cbz	r0, 800ef6a <_vfiprintf_r+0x176>
 800ef5a:	9b04      	ldr	r3, [sp, #16]
 800ef5c:	eba0 000a 	sub.w	r0, r0, sl
 800ef60:	2240      	movs	r2, #64	@ 0x40
 800ef62:	4082      	lsls	r2, r0
 800ef64:	4313      	orrs	r3, r2
 800ef66:	3401      	adds	r4, #1
 800ef68:	9304      	str	r3, [sp, #16]
 800ef6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef6e:	4829      	ldr	r0, [pc, #164]	@ (800f014 <_vfiprintf_r+0x220>)
 800ef70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef74:	2206      	movs	r2, #6
 800ef76:	f7f1 f95b 	bl	8000230 <memchr>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d03f      	beq.n	800effe <_vfiprintf_r+0x20a>
 800ef7e:	4b26      	ldr	r3, [pc, #152]	@ (800f018 <_vfiprintf_r+0x224>)
 800ef80:	bb1b      	cbnz	r3, 800efca <_vfiprintf_r+0x1d6>
 800ef82:	9b03      	ldr	r3, [sp, #12]
 800ef84:	3307      	adds	r3, #7
 800ef86:	f023 0307 	bic.w	r3, r3, #7
 800ef8a:	3308      	adds	r3, #8
 800ef8c:	9303      	str	r3, [sp, #12]
 800ef8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef90:	443b      	add	r3, r7
 800ef92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef94:	e76a      	b.n	800ee6c <_vfiprintf_r+0x78>
 800ef96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	2001      	movs	r0, #1
 800ef9e:	e7a8      	b.n	800eef2 <_vfiprintf_r+0xfe>
 800efa0:	2300      	movs	r3, #0
 800efa2:	3401      	adds	r4, #1
 800efa4:	9305      	str	r3, [sp, #20]
 800efa6:	4619      	mov	r1, r3
 800efa8:	f04f 0c0a 	mov.w	ip, #10
 800efac:	4620      	mov	r0, r4
 800efae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efb2:	3a30      	subs	r2, #48	@ 0x30
 800efb4:	2a09      	cmp	r2, #9
 800efb6:	d903      	bls.n	800efc0 <_vfiprintf_r+0x1cc>
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d0c6      	beq.n	800ef4a <_vfiprintf_r+0x156>
 800efbc:	9105      	str	r1, [sp, #20]
 800efbe:	e7c4      	b.n	800ef4a <_vfiprintf_r+0x156>
 800efc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800efc4:	4604      	mov	r4, r0
 800efc6:	2301      	movs	r3, #1
 800efc8:	e7f0      	b.n	800efac <_vfiprintf_r+0x1b8>
 800efca:	ab03      	add	r3, sp, #12
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	462a      	mov	r2, r5
 800efd0:	4b12      	ldr	r3, [pc, #72]	@ (800f01c <_vfiprintf_r+0x228>)
 800efd2:	a904      	add	r1, sp, #16
 800efd4:	4630      	mov	r0, r6
 800efd6:	f7fb fe51 	bl	800ac7c <_printf_float>
 800efda:	4607      	mov	r7, r0
 800efdc:	1c78      	adds	r0, r7, #1
 800efde:	d1d6      	bne.n	800ef8e <_vfiprintf_r+0x19a>
 800efe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efe2:	07d9      	lsls	r1, r3, #31
 800efe4:	d405      	bmi.n	800eff2 <_vfiprintf_r+0x1fe>
 800efe6:	89ab      	ldrh	r3, [r5, #12]
 800efe8:	059a      	lsls	r2, r3, #22
 800efea:	d402      	bmi.n	800eff2 <_vfiprintf_r+0x1fe>
 800efec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efee:	f7fc fe1d 	bl	800bc2c <__retarget_lock_release_recursive>
 800eff2:	89ab      	ldrh	r3, [r5, #12]
 800eff4:	065b      	lsls	r3, r3, #25
 800eff6:	f53f af1f 	bmi.w	800ee38 <_vfiprintf_r+0x44>
 800effa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800effc:	e71e      	b.n	800ee3c <_vfiprintf_r+0x48>
 800effe:	ab03      	add	r3, sp, #12
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	462a      	mov	r2, r5
 800f004:	4b05      	ldr	r3, [pc, #20]	@ (800f01c <_vfiprintf_r+0x228>)
 800f006:	a904      	add	r1, sp, #16
 800f008:	4630      	mov	r0, r6
 800f00a:	f7fc f8cf 	bl	800b1ac <_printf_i>
 800f00e:	e7e4      	b.n	800efda <_vfiprintf_r+0x1e6>
 800f010:	0800f979 	.word	0x0800f979
 800f014:	0800f983 	.word	0x0800f983
 800f018:	0800ac7d 	.word	0x0800ac7d
 800f01c:	0800edd1 	.word	0x0800edd1
 800f020:	0800f97f 	.word	0x0800f97f

0800f024 <__swbuf_r>:
 800f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f026:	460e      	mov	r6, r1
 800f028:	4614      	mov	r4, r2
 800f02a:	4605      	mov	r5, r0
 800f02c:	b118      	cbz	r0, 800f036 <__swbuf_r+0x12>
 800f02e:	6a03      	ldr	r3, [r0, #32]
 800f030:	b90b      	cbnz	r3, 800f036 <__swbuf_r+0x12>
 800f032:	f7fc fc7b 	bl	800b92c <__sinit>
 800f036:	69a3      	ldr	r3, [r4, #24]
 800f038:	60a3      	str	r3, [r4, #8]
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	071a      	lsls	r2, r3, #28
 800f03e:	d501      	bpl.n	800f044 <__swbuf_r+0x20>
 800f040:	6923      	ldr	r3, [r4, #16]
 800f042:	b943      	cbnz	r3, 800f056 <__swbuf_r+0x32>
 800f044:	4621      	mov	r1, r4
 800f046:	4628      	mov	r0, r5
 800f048:	f000 f82a 	bl	800f0a0 <__swsetup_r>
 800f04c:	b118      	cbz	r0, 800f056 <__swbuf_r+0x32>
 800f04e:	f04f 37ff 	mov.w	r7, #4294967295
 800f052:	4638      	mov	r0, r7
 800f054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	6922      	ldr	r2, [r4, #16]
 800f05a:	1a98      	subs	r0, r3, r2
 800f05c:	6963      	ldr	r3, [r4, #20]
 800f05e:	b2f6      	uxtb	r6, r6
 800f060:	4283      	cmp	r3, r0
 800f062:	4637      	mov	r7, r6
 800f064:	dc05      	bgt.n	800f072 <__swbuf_r+0x4e>
 800f066:	4621      	mov	r1, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	f7ff fa53 	bl	800e514 <_fflush_r>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d1ed      	bne.n	800f04e <__swbuf_r+0x2a>
 800f072:	68a3      	ldr	r3, [r4, #8]
 800f074:	3b01      	subs	r3, #1
 800f076:	60a3      	str	r3, [r4, #8]
 800f078:	6823      	ldr	r3, [r4, #0]
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	6022      	str	r2, [r4, #0]
 800f07e:	701e      	strb	r6, [r3, #0]
 800f080:	6962      	ldr	r2, [r4, #20]
 800f082:	1c43      	adds	r3, r0, #1
 800f084:	429a      	cmp	r2, r3
 800f086:	d004      	beq.n	800f092 <__swbuf_r+0x6e>
 800f088:	89a3      	ldrh	r3, [r4, #12]
 800f08a:	07db      	lsls	r3, r3, #31
 800f08c:	d5e1      	bpl.n	800f052 <__swbuf_r+0x2e>
 800f08e:	2e0a      	cmp	r6, #10
 800f090:	d1df      	bne.n	800f052 <__swbuf_r+0x2e>
 800f092:	4621      	mov	r1, r4
 800f094:	4628      	mov	r0, r5
 800f096:	f7ff fa3d 	bl	800e514 <_fflush_r>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d0d9      	beq.n	800f052 <__swbuf_r+0x2e>
 800f09e:	e7d6      	b.n	800f04e <__swbuf_r+0x2a>

0800f0a0 <__swsetup_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4b29      	ldr	r3, [pc, #164]	@ (800f148 <__swsetup_r+0xa8>)
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	6818      	ldr	r0, [r3, #0]
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	b118      	cbz	r0, 800f0b4 <__swsetup_r+0x14>
 800f0ac:	6a03      	ldr	r3, [r0, #32]
 800f0ae:	b90b      	cbnz	r3, 800f0b4 <__swsetup_r+0x14>
 800f0b0:	f7fc fc3c 	bl	800b92c <__sinit>
 800f0b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b8:	0719      	lsls	r1, r3, #28
 800f0ba:	d422      	bmi.n	800f102 <__swsetup_r+0x62>
 800f0bc:	06da      	lsls	r2, r3, #27
 800f0be:	d407      	bmi.n	800f0d0 <__swsetup_r+0x30>
 800f0c0:	2209      	movs	r2, #9
 800f0c2:	602a      	str	r2, [r5, #0]
 800f0c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0c8:	81a3      	strh	r3, [r4, #12]
 800f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ce:	e033      	b.n	800f138 <__swsetup_r+0x98>
 800f0d0:	0758      	lsls	r0, r3, #29
 800f0d2:	d512      	bpl.n	800f0fa <__swsetup_r+0x5a>
 800f0d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0d6:	b141      	cbz	r1, 800f0ea <__swsetup_r+0x4a>
 800f0d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0dc:	4299      	cmp	r1, r3
 800f0de:	d002      	beq.n	800f0e6 <__swsetup_r+0x46>
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	f7fd fc05 	bl	800c8f0 <_free_r>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0f0:	81a3      	strh	r3, [r4, #12]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	6063      	str	r3, [r4, #4]
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	6023      	str	r3, [r4, #0]
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	f043 0308 	orr.w	r3, r3, #8
 800f100:	81a3      	strh	r3, [r4, #12]
 800f102:	6923      	ldr	r3, [r4, #16]
 800f104:	b94b      	cbnz	r3, 800f11a <__swsetup_r+0x7a>
 800f106:	89a3      	ldrh	r3, [r4, #12]
 800f108:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f10c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f110:	d003      	beq.n	800f11a <__swsetup_r+0x7a>
 800f112:	4621      	mov	r1, r4
 800f114:	4628      	mov	r0, r5
 800f116:	f000 f883 	bl	800f220 <__smakebuf_r>
 800f11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f11e:	f013 0201 	ands.w	r2, r3, #1
 800f122:	d00a      	beq.n	800f13a <__swsetup_r+0x9a>
 800f124:	2200      	movs	r2, #0
 800f126:	60a2      	str	r2, [r4, #8]
 800f128:	6962      	ldr	r2, [r4, #20]
 800f12a:	4252      	negs	r2, r2
 800f12c:	61a2      	str	r2, [r4, #24]
 800f12e:	6922      	ldr	r2, [r4, #16]
 800f130:	b942      	cbnz	r2, 800f144 <__swsetup_r+0xa4>
 800f132:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f136:	d1c5      	bne.n	800f0c4 <__swsetup_r+0x24>
 800f138:	bd38      	pop	{r3, r4, r5, pc}
 800f13a:	0799      	lsls	r1, r3, #30
 800f13c:	bf58      	it	pl
 800f13e:	6962      	ldrpl	r2, [r4, #20]
 800f140:	60a2      	str	r2, [r4, #8]
 800f142:	e7f4      	b.n	800f12e <__swsetup_r+0x8e>
 800f144:	2000      	movs	r0, #0
 800f146:	e7f7      	b.n	800f138 <__swsetup_r+0x98>
 800f148:	2000017c 	.word	0x2000017c

0800f14c <_raise_r>:
 800f14c:	291f      	cmp	r1, #31
 800f14e:	b538      	push	{r3, r4, r5, lr}
 800f150:	4605      	mov	r5, r0
 800f152:	460c      	mov	r4, r1
 800f154:	d904      	bls.n	800f160 <_raise_r+0x14>
 800f156:	2316      	movs	r3, #22
 800f158:	6003      	str	r3, [r0, #0]
 800f15a:	f04f 30ff 	mov.w	r0, #4294967295
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f162:	b112      	cbz	r2, 800f16a <_raise_r+0x1e>
 800f164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f168:	b94b      	cbnz	r3, 800f17e <_raise_r+0x32>
 800f16a:	4628      	mov	r0, r5
 800f16c:	f000 f830 	bl	800f1d0 <_getpid_r>
 800f170:	4622      	mov	r2, r4
 800f172:	4601      	mov	r1, r0
 800f174:	4628      	mov	r0, r5
 800f176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f17a:	f000 b817 	b.w	800f1ac <_kill_r>
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d00a      	beq.n	800f198 <_raise_r+0x4c>
 800f182:	1c59      	adds	r1, r3, #1
 800f184:	d103      	bne.n	800f18e <_raise_r+0x42>
 800f186:	2316      	movs	r3, #22
 800f188:	6003      	str	r3, [r0, #0]
 800f18a:	2001      	movs	r0, #1
 800f18c:	e7e7      	b.n	800f15e <_raise_r+0x12>
 800f18e:	2100      	movs	r1, #0
 800f190:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f194:	4620      	mov	r0, r4
 800f196:	4798      	blx	r3
 800f198:	2000      	movs	r0, #0
 800f19a:	e7e0      	b.n	800f15e <_raise_r+0x12>

0800f19c <raise>:
 800f19c:	4b02      	ldr	r3, [pc, #8]	@ (800f1a8 <raise+0xc>)
 800f19e:	4601      	mov	r1, r0
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	f7ff bfd3 	b.w	800f14c <_raise_r>
 800f1a6:	bf00      	nop
 800f1a8:	2000017c 	.word	0x2000017c

0800f1ac <_kill_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4d07      	ldr	r5, [pc, #28]	@ (800f1cc <_kill_r+0x20>)
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	4608      	mov	r0, r1
 800f1b6:	4611      	mov	r1, r2
 800f1b8:	602b      	str	r3, [r5, #0]
 800f1ba:	f7f4 f839 	bl	8003230 <_kill>
 800f1be:	1c43      	adds	r3, r0, #1
 800f1c0:	d102      	bne.n	800f1c8 <_kill_r+0x1c>
 800f1c2:	682b      	ldr	r3, [r5, #0]
 800f1c4:	b103      	cbz	r3, 800f1c8 <_kill_r+0x1c>
 800f1c6:	6023      	str	r3, [r4, #0]
 800f1c8:	bd38      	pop	{r3, r4, r5, pc}
 800f1ca:	bf00      	nop
 800f1cc:	20005fd4 	.word	0x20005fd4

0800f1d0 <_getpid_r>:
 800f1d0:	f7f4 b826 	b.w	8003220 <_getpid>

0800f1d4 <__swhatbuf_r>:
 800f1d4:	b570      	push	{r4, r5, r6, lr}
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1dc:	2900      	cmp	r1, #0
 800f1de:	b096      	sub	sp, #88	@ 0x58
 800f1e0:	4615      	mov	r5, r2
 800f1e2:	461e      	mov	r6, r3
 800f1e4:	da0d      	bge.n	800f202 <__swhatbuf_r+0x2e>
 800f1e6:	89a3      	ldrh	r3, [r4, #12]
 800f1e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1ec:	f04f 0100 	mov.w	r1, #0
 800f1f0:	bf14      	ite	ne
 800f1f2:	2340      	movne	r3, #64	@ 0x40
 800f1f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	6031      	str	r1, [r6, #0]
 800f1fc:	602b      	str	r3, [r5, #0]
 800f1fe:	b016      	add	sp, #88	@ 0x58
 800f200:	bd70      	pop	{r4, r5, r6, pc}
 800f202:	466a      	mov	r2, sp
 800f204:	f000 f848 	bl	800f298 <_fstat_r>
 800f208:	2800      	cmp	r0, #0
 800f20a:	dbec      	blt.n	800f1e6 <__swhatbuf_r+0x12>
 800f20c:	9901      	ldr	r1, [sp, #4]
 800f20e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f216:	4259      	negs	r1, r3
 800f218:	4159      	adcs	r1, r3
 800f21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f21e:	e7eb      	b.n	800f1f8 <__swhatbuf_r+0x24>

0800f220 <__smakebuf_r>:
 800f220:	898b      	ldrh	r3, [r1, #12]
 800f222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f224:	079d      	lsls	r5, r3, #30
 800f226:	4606      	mov	r6, r0
 800f228:	460c      	mov	r4, r1
 800f22a:	d507      	bpl.n	800f23c <__smakebuf_r+0x1c>
 800f22c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f230:	6023      	str	r3, [r4, #0]
 800f232:	6123      	str	r3, [r4, #16]
 800f234:	2301      	movs	r3, #1
 800f236:	6163      	str	r3, [r4, #20]
 800f238:	b003      	add	sp, #12
 800f23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f23c:	ab01      	add	r3, sp, #4
 800f23e:	466a      	mov	r2, sp
 800f240:	f7ff ffc8 	bl	800f1d4 <__swhatbuf_r>
 800f244:	9f00      	ldr	r7, [sp, #0]
 800f246:	4605      	mov	r5, r0
 800f248:	4639      	mov	r1, r7
 800f24a:	4630      	mov	r0, r6
 800f24c:	f7fd fbc4 	bl	800c9d8 <_malloc_r>
 800f250:	b948      	cbnz	r0, 800f266 <__smakebuf_r+0x46>
 800f252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f256:	059a      	lsls	r2, r3, #22
 800f258:	d4ee      	bmi.n	800f238 <__smakebuf_r+0x18>
 800f25a:	f023 0303 	bic.w	r3, r3, #3
 800f25e:	f043 0302 	orr.w	r3, r3, #2
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	e7e2      	b.n	800f22c <__smakebuf_r+0xc>
 800f266:	89a3      	ldrh	r3, [r4, #12]
 800f268:	6020      	str	r0, [r4, #0]
 800f26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f26e:	81a3      	strh	r3, [r4, #12]
 800f270:	9b01      	ldr	r3, [sp, #4]
 800f272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f276:	b15b      	cbz	r3, 800f290 <__smakebuf_r+0x70>
 800f278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f27c:	4630      	mov	r0, r6
 800f27e:	f000 f81d 	bl	800f2bc <_isatty_r>
 800f282:	b128      	cbz	r0, 800f290 <__smakebuf_r+0x70>
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f023 0303 	bic.w	r3, r3, #3
 800f28a:	f043 0301 	orr.w	r3, r3, #1
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	89a3      	ldrh	r3, [r4, #12]
 800f292:	431d      	orrs	r5, r3
 800f294:	81a5      	strh	r5, [r4, #12]
 800f296:	e7cf      	b.n	800f238 <__smakebuf_r+0x18>

0800f298 <_fstat_r>:
 800f298:	b538      	push	{r3, r4, r5, lr}
 800f29a:	4d07      	ldr	r5, [pc, #28]	@ (800f2b8 <_fstat_r+0x20>)
 800f29c:	2300      	movs	r3, #0
 800f29e:	4604      	mov	r4, r0
 800f2a0:	4608      	mov	r0, r1
 800f2a2:	4611      	mov	r1, r2
 800f2a4:	602b      	str	r3, [r5, #0]
 800f2a6:	f7f4 f823 	bl	80032f0 <_fstat>
 800f2aa:	1c43      	adds	r3, r0, #1
 800f2ac:	d102      	bne.n	800f2b4 <_fstat_r+0x1c>
 800f2ae:	682b      	ldr	r3, [r5, #0]
 800f2b0:	b103      	cbz	r3, 800f2b4 <_fstat_r+0x1c>
 800f2b2:	6023      	str	r3, [r4, #0]
 800f2b4:	bd38      	pop	{r3, r4, r5, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20005fd4 	.word	0x20005fd4

0800f2bc <_isatty_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4d06      	ldr	r5, [pc, #24]	@ (800f2d8 <_isatty_r+0x1c>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	602b      	str	r3, [r5, #0]
 800f2c8:	f7f4 f822 	bl	8003310 <_isatty>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d102      	bne.n	800f2d6 <_isatty_r+0x1a>
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	b103      	cbz	r3, 800f2d6 <_isatty_r+0x1a>
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	20005fd4 	.word	0x20005fd4

0800f2dc <_init>:
 800f2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2de:	bf00      	nop
 800f2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2e2:	bc08      	pop	{r3}
 800f2e4:	469e      	mov	lr, r3
 800f2e6:	4770      	bx	lr

0800f2e8 <_fini>:
 800f2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ea:	bf00      	nop
 800f2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ee:	bc08      	pop	{r3}
 800f2f0:	469e      	mov	lr, r3
 800f2f2:	4770      	bx	lr
