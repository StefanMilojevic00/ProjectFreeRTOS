
AirQualityDetectorRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebc4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800ed98  0800ed98  0000fd98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f468  0800f468  00011338  2**0
                  CONTENTS
  4 .ARM          00000008  0800f468  0800f468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f470  0800f470  00011338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f470  0800f470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f474  0800f474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  0800f478  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d40  20000338  0800f7b0  00011338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005078  0800f7b0  00012078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011338  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021596  00000000  00000000  00011368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000527b  00000000  00000000  000328fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001406  00000000  00000000  000395b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cde5  00000000  00000000  0003a9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000257a8  00000000  00000000  0006779b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106f28  00000000  00000000  0008cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00193e6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e60  00000000  00000000  00193eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0019bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ed7c 	.word	0x0800ed7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	0800ed7c 	.word	0x0800ed7c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f8ff 	bl	8001278 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000354 	.word	0x20000354

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f918 	bl	80012dc <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000354 	.word	0x20000354

080010b8 <SetIndicatorLEDsNum>:

void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 f9ba 	bl	8001440 <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000354 	.word	0x20000354

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f840 	bl	8001166 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	20000384 	.word	0x20000384

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f846 	bl	800118c <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000384 	.word	0x20000384

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f83c 	bl	800118c <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000384 	.word	0x20000384

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001166:	b480      	push	{r7}
 8001168:	b085      	sub	sp, #20
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	4613      	mov	r3, r2
 8001172:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	88fa      	ldrh	r2, [r7, #6]
 800117e:	809a      	strh	r2, [r3, #4]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	78fa      	ldrb	r2, [r7, #3]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f002 ff12 	bl	8003fcc <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 80011b6:	f000 f9c9 	bl	800154c <MQ9_GetRawValue>
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f9db 	bl	800157c <MQ9_ConverRaw2Real>
 80011c6:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	ee07 3a90 	vmov	s15, r3
}
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	4613      	mov	r3, r2
 80011e6:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	809a      	strh	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	4619      	mov	r1, r3
 800121e:	f002 fed5 	bl	8003fcc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8001222:	e007      	b.n	8001234 <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	889b      	ldrh	r3, [r3, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	f002 fecc 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <LED_init>:


static SingleLed new_led;

void LED_init()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 8001240:	2208      	movs	r2, #8
 8001242:	4903      	ldr	r1, [pc, #12]	@ (8001250 <LED_init+0x14>)
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <LED_init+0x18>)
 8001246:	f7ff ffc8 	bl	80011da <CreateNewSingleLED>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40022000 	.word	0x40022000
 8001254:	2000038c 	.word	0x2000038c

08001258 <LED_Drive>:

void LED_Drive(bool state)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4619      	mov	r1, r3
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <LED_Drive+0x1c>)
 8001268:	f7ff ffca 	bl	8001200 <UpdateSingleLED>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000038c 	.word	0x2000038c

08001278 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8b3a      	ldrh	r2, [r7, #24]
 800129e:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8c3a      	ldrh	r2, [r7, #32]
 80012aa:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b0:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80012b6:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012bc:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80012c2:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80012ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80012e8:	edd7 7a00 	vldr	s15, [r7]
 80012ec:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001428 <LedRowWrite+0x14c>
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dd08      	ble.n	800130c <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	889b      	ldrh	r3, [r3, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	f002 fe61 	bl	8003fcc <HAL_GPIO_WritePin>
 800130a:	e007      	b.n	800131c <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	889b      	ldrh	r3, [r3, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	f002 fe58 	bl	8003fcc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 800131c:	edd7 7a00 	vldr	s15, [r7]
 8001320:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800142c <LedRowWrite+0x150>
 8001324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	dd08      	ble.n	8001340 <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6898      	ldr	r0, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	899b      	ldrh	r3, [r3, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	f002 fe47 	bl	8003fcc <HAL_GPIO_WritePin>
 800133e:	e007      	b.n	8001350 <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6898      	ldr	r0, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	899b      	ldrh	r3, [r3, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	f002 fe3e 	bl	8003fcc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 8001350:	edd7 7a00 	vldr	s15, [r7]
 8001354:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001430 <LedRowWrite+0x154>
 8001358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	dd08      	ble.n	8001374 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6918      	ldr	r0, [r3, #16]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	8a9b      	ldrh	r3, [r3, #20]
 800136a:	2201      	movs	r2, #1
 800136c:	4619      	mov	r1, r3
 800136e:	f002 fe2d 	bl	8003fcc <HAL_GPIO_WritePin>
 8001372:	e007      	b.n	8001384 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6918      	ldr	r0, [r3, #16]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	8a9b      	ldrh	r3, [r3, #20]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f002 fe24 	bl	8003fcc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001384:	edd7 7a00 	vldr	s15, [r7]
 8001388:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001434 <LedRowWrite+0x158>
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	dd08      	ble.n	80013a8 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6998      	ldr	r0, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	8b9b      	ldrh	r3, [r3, #28]
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	f002 fe13 	bl	8003fcc <HAL_GPIO_WritePin>
 80013a6:	e007      	b.n	80013b8 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6998      	ldr	r0, [r3, #24]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8b9b      	ldrh	r3, [r3, #28]
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	f002 fe0a 	bl	8003fcc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 80013b8:	edd7 7a00 	vldr	s15, [r7]
 80013bc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001438 <LedRowWrite+0x15c>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd08      	ble.n	80013dc <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a18      	ldr	r0, [r3, #32]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	f002 fdf9 	bl	8003fcc <HAL_GPIO_WritePin>
 80013da:	e007      	b.n	80013ec <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a18      	ldr	r0, [r3, #32]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	f002 fdf0 	bl	8003fcc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 80013ec:	edd7 7a00 	vldr	s15, [r7]
 80013f0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800143c <LedRowWrite+0x160>
 80013f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	dd08      	ble.n	8001410 <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001406:	2201      	movs	r2, #1
 8001408:	4619      	mov	r1, r3
 800140a:	f002 fddf 	bl	8003fcc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 800140e:	e007      	b.n	8001420 <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	f002 fdd6 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	43c80000 	.word	0x43c80000
 800142c:	44160000 	.word	0x44160000
 8001430:	44960000 	.word	0x44960000
 8001434:	44e10000 	.word	0x44e10000
 8001438:	45160000 	.word	0x45160000
 800143c:	453b8000 	.word	0x453b8000

08001440 <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b06      	cmp	r3, #6
 8001450:	d877      	bhi.n	8001542 <LedRowWriteNum+0x102>
	{
		if(num > 0)
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	889b      	ldrh	r3, [r3, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	4619      	mov	r1, r3
 8001464:	f002 fdb2 	bl	8003fcc <HAL_GPIO_WritePin>
 8001468:	e007      	b.n	800147a <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	4619      	mov	r1, r3
 8001476:	f002 fda9 	bl	8003fcc <HAL_GPIO_WritePin>
		}

		if(num > 1)
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d908      	bls.n	8001492 <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	899b      	ldrh	r3, [r3, #12]
 8001488:	2201      	movs	r2, #1
 800148a:	4619      	mov	r1, r3
 800148c:	f002 fd9e 	bl	8003fcc <HAL_GPIO_WritePin>
 8001490:	e007      	b.n	80014a2 <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6898      	ldr	r0, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	899b      	ldrh	r3, [r3, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	f002 fd95 	bl	8003fcc <HAL_GPIO_WritePin>
		}

		if(num > 2)
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d908      	bls.n	80014ba <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6918      	ldr	r0, [r3, #16]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8a9b      	ldrh	r3, [r3, #20]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 fd8a 	bl	8003fcc <HAL_GPIO_WritePin>
 80014b8:	e007      	b.n	80014ca <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6918      	ldr	r0, [r3, #16]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	8a9b      	ldrh	r3, [r3, #20]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	f002 fd81 	bl	8003fcc <HAL_GPIO_WritePin>
		}

		if(num > 3)
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d908      	bls.n	80014e2 <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6998      	ldr	r0, [r3, #24]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	8b9b      	ldrh	r3, [r3, #28]
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	f002 fd76 	bl	8003fcc <HAL_GPIO_WritePin>
 80014e0:	e007      	b.n	80014f2 <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6998      	ldr	r0, [r3, #24]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	8b9b      	ldrh	r3, [r3, #28]
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	f002 fd6d 	bl	8003fcc <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d908      	bls.n	800150a <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a18      	ldr	r0, [r3, #32]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001500:	2201      	movs	r2, #1
 8001502:	4619      	mov	r1, r3
 8001504:	f002 fd62 	bl	8003fcc <HAL_GPIO_WritePin>
 8001508:	e007      	b.n	800151a <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a18      	ldr	r0, [r3, #32]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	f002 fd59 	bl	8003fcc <HAL_GPIO_WritePin>
		}

		if(num > 5)
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d908      	bls.n	8001532 <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001528:	2201      	movs	r2, #1
 800152a:	4619      	mov	r1, r3
 800152c:	f002 fd4e 	bl	8003fcc <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 8001530:	e007      	b.n	8001542 <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	f002 fd45 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 8001552:	4809      	ldr	r0, [pc, #36]	@ (8001578 <MQ9_GetRawValue+0x2c>)
 8001554:	f001 fd7a 	bl	800304c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	4806      	ldr	r0, [pc, #24]	@ (8001578 <MQ9_GetRawValue+0x2c>)
 800155e:	f001 fe43 	bl	80031e8 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 8001562:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MQ9_GetRawValue+0x2c>)
 8001564:	f001 fecb 	bl	80032fe <HAL_ADC_GetValue>
 8001568:	4603      	mov	r3, r0
 800156a:	80fb      	strh	r3, [r7, #6]
	return raw;
 800156c:	88fb      	ldrh	r3, [r7, #6]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200003e0 	.word	0x200003e0

0800157c <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MQ9_ConverRaw2Real+0x48>)
 8001588:	edd3 6a00 	vldr	s13, [r3]
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MQ9_ConverRaw2Real+0x4c>)
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001596:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	ee07 3a90 	vmov	s15, r3
}
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000004 	.word	0x20000004
 80015c8:	20000000 	.word	0x20000000

080015cc <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 80015d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015d4:	4902      	ldr	r1, [pc, #8]	@ (80015e0 <SignalSystemInit+0x14>)
 80015d6:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <SignalSystemInit+0x18>)
 80015d8:	f7ff fda0 	bl	800111c <CreateNewButton>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40022000 	.word	0x40022000
 80015e4:	20000394 	.word	0x20000394

080015e8 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7fe fe6d 	bl	80002d0 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	480e      	ldr	r0, [pc, #56]	@ (800163c <UART_TransmitString+0x54>)
 8001602:	f004 f937 	bl	8005874 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 8001606:	4a0e      	ldr	r2, [pc, #56]	@ (8001640 <UART_TransmitString+0x58>)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4611      	mov	r1, r2
 8001610:	8019      	strh	r1, [r3, #0]
 8001612:	3302      	adds	r3, #2
 8001614:	0c12      	lsrs	r2, r2, #16
 8001616:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fe57 	bl	80002d0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	b29a      	uxth	r2, r3
 8001626:	f107 010c 	add.w	r1, r7, #12
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	4803      	ldr	r0, [pc, #12]	@ (800163c <UART_TransmitString+0x54>)
 8001630:	f004 f920 	bl	8005874 <HAL_UART_Transmit>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000044c 	.word	0x2000044c
 8001640:	0800ed98 	.word	0x0800ed98

08001644 <UART_TransmitStringWithoutNewLine>:

void UART_TransmitStringWithoutNewLine(char* str)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7fe fe3f 	bl	80002d0 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <UART_TransmitStringWithoutNewLine+0x28>)
 800165e:	f004 f909 	bl	8005874 <HAL_UART_Transmit>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000044c 	.word	0x2000044c

08001670 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b090      	sub	sp, #64	@ 0x40
 8001674:	af00      	add	r7, sp, #0
 8001676:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe ff94 	bl	80005a8 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	f107 000c 	add.w	r0, r7, #12
 8001688:	490a      	ldr	r1, [pc, #40]	@ (80016b4 <UART_TransmitFloat+0x44>)
 800168a:	f009 fed5 	bl	800b438 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe1c 	bl	80002d0 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	f107 010c 	add.w	r1, r7, #12
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <UART_TransmitFloat+0x48>)
 80016a6:	f004 f8e5 	bl	8005874 <HAL_UART_Transmit>
}
 80016aa:	bf00      	nop
 80016ac:	3740      	adds	r7, #64	@ 0x40
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	0800ed9c 	.word	0x0800ed9c
 80016b8:	2000044c 	.word	0x2000044c

080016bc <HelpSendUART>:

void HelpSendUART(uint16_t NumOfElements, char** CommandMatrix)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	80fb      	strh	r3, [r7, #6]
	uint16_t iterator = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	81fb      	strh	r3, [r7, #14]
	UART_TransmitString("\n===  UART Commands ===\n");
 80016cc:	480e      	ldr	r0, [pc, #56]	@ (8001708 <HelpSendUART+0x4c>)
 80016ce:	f7ff ff8b 	bl	80015e8 <UART_TransmitString>
	while(iterator < NumOfElements)
 80016d2:	e00d      	b.n	80016f0 <HelpSendUART+0x34>
	{
		UART_TransmitStringWithoutNewLine("\t");
 80016d4:	480d      	ldr	r0, [pc, #52]	@ (800170c <HelpSendUART+0x50>)
 80016d6:	f7ff ffb5 	bl	8001644 <UART_TransmitStringWithoutNewLine>
		UART_TransmitString(CommandMatrix[iterator]);
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff7f 	bl	80015e8 <UART_TransmitString>

		iterator++;
 80016ea:	89fb      	ldrh	r3, [r7, #14]
 80016ec:	3301      	adds	r3, #1
 80016ee:	81fb      	strh	r3, [r7, #14]
	while(iterator < NumOfElements)
 80016f0:	89fa      	ldrh	r2, [r7, #14]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3ed      	bcc.n	80016d4 <HelpSendUART+0x18>
	}
	UART_TransmitString("\n==========\n");
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <HelpSendUART+0x54>)
 80016fa:	f7ff ff75 	bl	80015e8 <UART_TransmitString>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	0800eda4 	.word	0x0800eda4
 800170c:	0800edc0 	.word	0x0800edc0
 8001710:	0800edc4 	.word	0x0800edc4

08001714 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 800171c:	4a36      	ldr	r2, [pc, #216]	@ (80017f8 <TerminalHandler+0xe4>)
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4611      	mov	r1, r2
 8001726:	8019      	strh	r1, [r3, #0]
 8001728:	3302      	adds	r3, #2
 800172a:	0c12      	lsrs	r2, r2, #16
 800172c:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 800172e:	4a33      	ldr	r2, [pc, #204]	@ (80017fc <TerminalHandler+0xe8>)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001738:	6018      	str	r0, [r3, #0]
 800173a:	3304      	adds	r3, #4
 800173c:	7019      	strb	r1, [r3, #0]
	//HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));

	if(huart->Instance == USART1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2f      	ldr	r2, [pc, #188]	@ (8001800 <TerminalHandler+0xec>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d14d      	bne.n	80017e4 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8001748:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <TerminalHandler+0xf0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8001750:	f000 f872 	bl	8001838 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8001754:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <TerminalHandler+0xf4>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b0d      	cmp	r3, #13
 800175a:	d02f      	beq.n	80017bc <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <TerminalHandler+0xf4>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d117      	bne.n	8001794 <TerminalHandler+0x80>
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <TerminalHandler+0xf0>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 800176c:	4b25      	ldr	r3, [pc, #148]	@ (8001804 <TerminalHandler+0xf0>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b26      	ldr	r3, [pc, #152]	@ (800180c <TerminalHandler+0xf8>)
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <TerminalHandler+0xf0>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <TerminalHandler+0xf0>)
 8001782:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8001784:	f107 010c 	add.w	r1, r7, #12
 8001788:	230a      	movs	r3, #10
 800178a:	2205      	movs	r2, #5
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f004 f871 	bl	8005874 <HAL_UART_Transmit>
 8001792:	e00c      	b.n	80017ae <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <TerminalHandler+0xf0>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <TerminalHandler+0xf4>)
 800179c:	7819      	ldrb	r1, [r3, #0]
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <TerminalHandler+0xf8>)
 80017a0:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <TerminalHandler+0xf0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <TerminalHandler+0xf0>)
 80017ac:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 80017ae:	230a      	movs	r3, #10
 80017b0:	2201      	movs	r2, #1
 80017b2:	4915      	ldr	r1, [pc, #84]	@ (8001808 <TerminalHandler+0xf4>)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f004 f85d 	bl	8005874 <HAL_UART_Transmit>
 80017ba:	e013      	b.n	80017e4 <TerminalHandler+0xd0>
			//RxData[0] = '\0'; //added while debbuging
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <TerminalHandler+0xf0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <TerminalHandler+0xf4>)
 80017c4:	7819      	ldrb	r1, [r3, #0]
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <TerminalHandler+0xf8>)
 80017c8:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <TerminalHandler+0xf0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <TerminalHandler+0xfc>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 80017d6:	f107 0114 	add.w	r1, r7, #20
 80017da:	230a      	movs	r3, #10
 80017dc:	2203      	movs	r2, #3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f004 f848 	bl	8005874 <HAL_UART_Transmit>
			//RxData[0] = '\0'; //added while debbuging
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 80017e4:	2201      	movs	r2, #1
 80017e6:	4908      	ldr	r1, [pc, #32]	@ (8001808 <TerminalHandler+0xf4>)
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f004 f8c6 	bl	800597a <HAL_UART_Receive_IT>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800edd4 	.word	0x0800edd4
 80017fc:	0800edd8 	.word	0x0800edd8
 8001800:	40011000 	.word	0x40011000
 8001804:	200003a4 	.word	0x200003a4
 8001808:	200003a8 	.word	0x200003a8
 800180c:	200003ac 	.word	0x200003ac
 8001810:	200003de 	.word	0x200003de

08001814 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 800181c:	2201      	movs	r2, #1
 800181e:	4905      	ldr	r1, [pc, #20]	@ (8001834 <TerminalInit+0x20>)
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f004 f8aa 	bl	800597a <HAL_UART_Receive_IT>
	ClearRxBuffer();
 8001826:	f000 f807 	bl	8001838 <ClearRxBuffer>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200003a8 	.word	0x200003a8

08001838 <ClearRxBuffer>:

void ClearRxBuffer()
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 50; counter++)
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	e007      	b.n	8001854 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8001844:	4a09      	ldr	r2, [pc, #36]	@ (800186c <ClearRxBuffer+0x34>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 50; counter++)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b31      	cmp	r3, #49	@ 0x31
 8001858:	ddf4      	ble.n	8001844 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <ClearRxBuffer+0x38>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	200003ac 	.word	0x200003ac
 8001870:	200003de 	.word	0x200003de

08001874 <IsTransferComplete>:

bool IsTransferComplete()
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	return transferCompleteFlag;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <IsTransferComplete+0x14>)
 800187a:	781b      	ldrb	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200003de 	.word	0x200003de

0800188c <GetRxBuffer>:

char* GetRxBuffer()
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return (char*)RxBuffer;
 8001890:	4b02      	ldr	r3, [pc, #8]	@ (800189c <GetRxBuffer+0x10>)
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	200003ac 	.word	0x200003ac

080018a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff33 	bl	8001714 <TerminalHandler>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <StringCompareFromUART>:


bool StringCompareFromUART(char* cmd_string, char** matrix,  uint16_t numOfStrings, uint16_t* index)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	4613      	mov	r3, r2
 80018c4:	80fb      	strh	r3, [r7, #6]

	    uint16_t count = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	82fb      	strh	r3, [r7, #22]
	    bool foundIt = false;
 80018ca:	2300      	movs	r3, #0
 80018cc:	757b      	strb	r3, [r7, #21]
	    bool retval;
	    cmd_string = strupr(cmd_string);
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f009 fe1e 	bl	800b510 <strupr>
 80018d4:	60f8      	str	r0, [r7, #12]
	    while((count < numOfStrings) && (foundIt == false))
 80018d6:	e013      	b.n	8001900 <StringCompareFromUART+0x4a>
	    {

	        if(strcmp(cmd_string, matrix[count]) == 0)
 80018d8:	8afb      	ldrh	r3, [r7, #22]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7fe fc93 	bl	8000210 <strcmp>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <StringCompareFromUART+0x44>
	        {
	            *index = count;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	8afa      	ldrh	r2, [r7, #22]
 80018f4:	801a      	strh	r2, [r3, #0]
	            foundIt = true;
 80018f6:	2301      	movs	r3, #1
 80018f8:	757b      	strb	r3, [r7, #21]

	        }
	        count++;
 80018fa:	8afb      	ldrh	r3, [r7, #22]
 80018fc:	3301      	adds	r3, #1
 80018fe:	82fb      	strh	r3, [r7, #22]
	    while((count < numOfStrings) && (foundIt == false))
 8001900:	8afa      	ldrh	r2, [r7, #22]
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	429a      	cmp	r2, r3
 8001906:	d205      	bcs.n	8001914 <StringCompareFromUART+0x5e>
 8001908:	7d7b      	ldrb	r3, [r7, #21]
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e1      	bne.n	80018d8 <StringCompareFromUART+0x22>
	    }

	    if(foundIt)
 8001914:	7d7b      	ldrb	r3, [r7, #21]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <StringCompareFromUART+0x6a>
	    {
	        retval = true;
 800191a:	2301      	movs	r3, #1
 800191c:	753b      	strb	r3, [r7, #20]
 800191e:	e001      	b.n	8001924 <StringCompareFromUART+0x6e>
	    }
	    else
	    {
	        retval = false;
 8001920:	2300      	movs	r3, #0
 8001922:	753b      	strb	r3, [r7, #20]
	    }

	    return retval;
 8001924:	7d3b      	ldrb	r3, [r7, #20]

}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <DevicesInit>:
#include "Variables.h"

extern UART_HandleTypeDef huart1;

void DevicesInit()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	AlarmInit();
 8001934:	f7ff fbd0 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 8001938:	f7ff fe48 	bl	80015cc <SignalSystemInit>
	AirQualityIncicatorInit();
 800193c:	f7ff fb82 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 8001940:	f7ff fc7c 	bl	800123c <LED_init>
	TerminalInit(&huart1);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <DevicesInit+0x20>)
 8001946:	f7ff ff65 	bl	8001814 <TerminalInit>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000044c 	.word	0x2000044c

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001958:	f001 fb07 	bl	8002f6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195c:	f000 f886 	bl	8001a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001960:	f000 f998 	bl	8001c94 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001964:	f000 f8f2 	bl	8001b4c <MX_ADC3_Init>
  MX_CRC_Init();
 8001968:	f000 f942 	bl	8001bf0 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800196c:	f000 f962 	bl	8001c34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DevicesInit(); // This Method initialize whole app system
 8001970:	f7ff ffde 	bl	8001930 <DevicesInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001974:	f005 fa14 	bl	8006da0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RegimeMutex */
  RegimeMutexHandle = osMutexNew(&RegimeMutex_attributes);
 8001978:	4824      	ldr	r0, [pc, #144]	@ (8001a0c <main+0xb8>)
 800197a:	f005 fbe9 	bl	8007150 <osMutexNew>
 800197e:	4603      	mov	r3, r0
 8001980:	4a23      	ldr	r2, [pc, #140]	@ (8001a10 <main+0xbc>)
 8001982:	6013      	str	r3, [r2, #0]

  /* creation of RefRateMutex */
  RefRateMutexHandle = osMutexNew(&RefRateMutex_attributes);
 8001984:	4823      	ldr	r0, [pc, #140]	@ (8001a14 <main+0xc0>)
 8001986:	f005 fbe3 	bl	8007150 <osMutexNew>
 800198a:	4603      	mov	r3, r0
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <main+0xc4>)
 800198e:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8001990:	4822      	ldr	r0, [pc, #136]	@ (8001a1c <main+0xc8>)
 8001992:	f005 fbdd 	bl	8007150 <osMutexNew>
 8001996:	4603      	mov	r3, r0
 8001998:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <main+0xcc>)
 800199a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of LEDTimer */
  LEDTimerHandle = osTimerNew(LEDTimerCallback, osTimerPeriodic, NULL, &LEDTimer_attributes);
 800199c:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <main+0xd0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	2101      	movs	r1, #1
 80019a2:	4821      	ldr	r0, [pc, #132]	@ (8001a28 <main+0xd4>)
 80019a4:	f005 fb50 	bl	8007048 <osTimerNew>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <main+0xd8>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTimer */
  TransmitTimerHandle = osTimerNew(TransmitTimerCallback, osTimerPeriodic, NULL, &TransmitTimer_attributes);
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <main+0xdc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	2101      	movs	r1, #1
 80019b4:	481f      	ldr	r0, [pc, #124]	@ (8001a34 <main+0xe0>)
 80019b6:	f005 fb47 	bl	8007048 <osTimerNew>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <main+0xe4>)
 80019be:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(ButtonTimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <main+0xe8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	481e      	ldr	r0, [pc, #120]	@ (8001a40 <main+0xec>)
 80019c8:	f005 fb3e 	bl	8007048 <osTimerNew>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001a44 <main+0xf0>)
 80019d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 80019d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <main+0xf4>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	481d      	ldr	r0, [pc, #116]	@ (8001a4c <main+0xf8>)
 80019d8:	f005 fa4c 	bl	8006e74 <osThreadNew>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <main+0xfc>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* creation of TerminalTask */
  TerminalTaskHandle = osThreadNew(StartTerminalTask, NULL, &TerminalTask_attributes);
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <main+0x100>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	481c      	ldr	r0, [pc, #112]	@ (8001a58 <main+0x104>)
 80019e8:	f005 fa44 	bl	8006e74 <osThreadNew>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <main+0x108>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 80019f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a60 <main+0x10c>)
 80019f4:	2100      	movs	r1, #0
 80019f6:	481b      	ldr	r0, [pc, #108]	@ (8001a64 <main+0x110>)
 80019f8:	f005 fa3c 	bl	8006e74 <osThreadNew>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <main+0x114>)
 8001a00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a02:	f005 fa01 	bl	8006e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a06:	bf00      	nop
 8001a08:	e7fd      	b.n	8001a06 <main+0xb2>
 8001a0a:	bf00      	nop
 8001a0c:	0800eff4 	.word	0x0800eff4
 8001a10:	200004ec 	.word	0x200004ec
 8001a14:	0800f004 	.word	0x0800f004
 8001a18:	200004f0 	.word	0x200004f0
 8001a1c:	0800f014 	.word	0x0800f014
 8001a20:	200004f4 	.word	0x200004f4
 8001a24:	0800efc4 	.word	0x0800efc4
 8001a28:	08002951 	.word	0x08002951
 8001a2c:	200004e0 	.word	0x200004e0
 8001a30:	0800efd4 	.word	0x0800efd4
 8001a34:	08002965 	.word	0x08002965
 8001a38:	200004e4 	.word	0x200004e4
 8001a3c:	0800efe4 	.word	0x0800efe4
 8001a40:	08002979 	.word	0x08002979
 8001a44:	200004e8 	.word	0x200004e8
 8001a48:	0800ef58 	.word	0x0800ef58
 8001a4c:	0800254d 	.word	0x0800254d
 8001a50:	200004d4 	.word	0x200004d4
 8001a54:	0800ef7c 	.word	0x0800ef7c
 8001a58:	08002731 	.word	0x08002731
 8001a5c:	200004d8 	.word	0x200004d8
 8001a60:	0800efa0 	.word	0x0800efa0
 8001a64:	08002941 	.word	0x08002941
 8001a68:	200004dc 	.word	0x200004dc

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	@ 0x50
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2230      	movs	r2, #48	@ 0x30
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f009 fd3f 	bl	800b4fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a90:	f002 fab6 	bl	8004000 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <SystemClock_Config+0xd8>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a2a      	ldr	r2, [pc, #168]	@ (8001b44 <SystemClock_Config+0xd8>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa0:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <SystemClock_Config+0xd8>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aac:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <SystemClock_Config+0xdc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a25      	ldr	r2, [pc, #148]	@ (8001b48 <SystemClock_Config+0xdc>)
 8001ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <SystemClock_Config+0xdc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ad8:	2319      	movs	r3, #25
 8001ada:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001adc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fae6 	bl	80040c0 <HAL_RCC_OscConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001afa:	f000 ff59 	bl	80029b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001afe:	f002 fa8f 	bl	8004020 <HAL_PWREx_EnableOverDrive>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001b08:	f000 ff52 	bl	80029b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2106      	movs	r1, #6
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fd6c 	bl	8004608 <HAL_RCC_ClockConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b36:	f000 ff3b 	bl	80029b0 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3750      	adds	r7, #80	@ 0x50
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000

08001b4c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b60:	4a21      	ldr	r2, [pc, #132]	@ (8001be8 <MX_ADC3_Init+0x9c>)
 8001b62:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b6a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b8e:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <MX_ADC3_Init+0xa0>)
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001bac:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001bae:	f001 fa09 	bl	8002fc4 <HAL_ADC_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001bb8:	f000 fefa 	bl	80029b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_ADC3_Init+0x98>)
 8001bce:	f001 fba3 	bl	8003318 <HAL_ADC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001bd8:	f000 feea 	bl	80029b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200003e0 	.word	0x200003e0
 8001be8:	40012200 	.word	0x40012200
 8001bec:	0f000001 	.word	0x0f000001

08001bf0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <MX_CRC_Init+0x3c>)
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <MX_CRC_Init+0x40>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_CRC_Init+0x3c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <MX_CRC_Init+0x3c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_CRC_Init+0x3c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <MX_CRC_Init+0x3c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <MX_CRC_Init+0x3c>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <MX_CRC_Init+0x3c>)
 8001c1a:	f001 feaf 	bl	800397c <HAL_CRC_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001c24:	f000 fec4 	bl	80029b0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000428 	.word	0x20000428
 8001c30:	40023000 	.word	0x40023000

08001c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c3a:	4a15      	ldr	r2, [pc, #84]	@ (8001c90 <MX_USART1_UART_Init+0x5c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c78:	f003 fdae 	bl	80057d8 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c82:	f000 fe95 	bl	80029b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000044c 	.word	0x2000044c
 8001c90:	40011000 	.word	0x40011000

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	@ 0x40
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	4baf      	ldr	r3, [pc, #700]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4aae      	ldr	r2, [pc, #696]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4bac      	ldr	r3, [pc, #688]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cc2:	4ba9      	ldr	r3, [pc, #676]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4aa8      	ldr	r2, [pc, #672]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4ba6      	ldr	r3, [pc, #664]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	4ba3      	ldr	r3, [pc, #652]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4aa2      	ldr	r2, [pc, #648]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4ba0      	ldr	r3, [pc, #640]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf2:	4b9d      	ldr	r3, [pc, #628]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a9c      	ldr	r2, [pc, #624]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b9a      	ldr	r3, [pc, #616]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	4b97      	ldr	r3, [pc, #604]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a96      	ldr	r2, [pc, #600]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b94      	ldr	r3, [pc, #592]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b91      	ldr	r3, [pc, #580]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a90      	ldr	r2, [pc, #576]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b8e      	ldr	r3, [pc, #568]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a8a      	ldr	r2, [pc, #552]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b88      	ldr	r3, [pc, #544]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d52:	4b85      	ldr	r3, [pc, #532]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a84      	ldr	r2, [pc, #528]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b82      	ldr	r3, [pc, #520]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b7c      	ldr	r3, [pc, #496]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d82:	4b79      	ldr	r3, [pc, #484]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a78      	ldr	r2, [pc, #480]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b76      	ldr	r3, [pc, #472]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9a:	4b73      	ldr	r3, [pc, #460]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a72      	ldr	r2, [pc, #456]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b70      	ldr	r3, [pc, #448]	@ (8001f68 <MX_GPIO_Init+0x2d4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2110      	movs	r1, #16
 8001db6:	486d      	ldr	r0, [pc, #436]	@ (8001f6c <MX_GPIO_Init+0x2d8>)
 8001db8:	f002 f908 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	486b      	ldr	r0, [pc, #428]	@ (8001f70 <MX_GPIO_Init+0x2dc>)
 8001dc2:	f002 f903 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	210d      	movs	r1, #13
 8001dca:	486a      	ldr	r0, [pc, #424]	@ (8001f74 <MX_GPIO_Init+0x2e0>)
 8001dcc:	f002 f8fe 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2108      	movs	r1, #8
 8001dd4:	4868      	ldr	r0, [pc, #416]	@ (8001f78 <MX_GPIO_Init+0x2e4>)
 8001dd6:	f002 f8f9 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001de0:	4864      	ldr	r0, [pc, #400]	@ (8001f74 <MX_GPIO_Init+0x2e0>)
 8001de2:	f002 f8f3 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001dec:	4863      	ldr	r0, [pc, #396]	@ (8001f7c <MX_GPIO_Init+0x2e8>)
 8001dee:	f002 f8ed 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2140      	movs	r1, #64	@ 0x40
 8001df6:	4862      	ldr	r0, [pc, #392]	@ (8001f80 <MX_GPIO_Init+0x2ec>)
 8001df8:	f002 f8e8 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	21c8      	movs	r1, #200	@ 0xc8
 8001e00:	4860      	ldr	r0, [pc, #384]	@ (8001f84 <MX_GPIO_Init+0x2f0>)
 8001e02:	f002 f8e3 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001e06:	2310      	movs	r3, #16
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e16:	230e      	movs	r3, #14
 8001e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4859      	ldr	r0, [pc, #356]	@ (8001f88 <MX_GPIO_Init+0x2f4>)
 8001e22:	f001 ff27 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001e26:	2308      	movs	r3, #8
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4853      	ldr	r0, [pc, #332]	@ (8001f88 <MX_GPIO_Init+0x2f4>)
 8001e3a:	f001 ff1b 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e4e:	2309      	movs	r3, #9
 8001e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e56:	4619      	mov	r1, r3
 8001e58:	484b      	ldr	r0, [pc, #300]	@ (8001f88 <MX_GPIO_Init+0x2f4>)
 8001e5a:	f001 ff0b 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e5e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e70:	230b      	movs	r3, #11
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4842      	ldr	r0, [pc, #264]	@ (8001f84 <MX_GPIO_Init+0x2f0>)
 8001e7c:	f001 fefa 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001e80:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e92:	230c      	movs	r3, #12
 8001e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	483a      	ldr	r0, [pc, #232]	@ (8001f88 <MX_GPIO_Init+0x2f4>)
 8001e9e:	f001 fee9 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	482b      	ldr	r0, [pc, #172]	@ (8001f6c <MX_GPIO_Init+0x2d8>)
 8001ec0:	f001 fed8 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4824      	ldr	r0, [pc, #144]	@ (8001f6c <MX_GPIO_Init+0x2d8>)
 8001edc:	f001 feca 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481d      	ldr	r0, [pc, #116]	@ (8001f70 <MX_GPIO_Init+0x2dc>)
 8001efc:	f001 feba 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001f00:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f12:	230c      	movs	r3, #12
 8001f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4818      	ldr	r0, [pc, #96]	@ (8001f80 <MX_GPIO_Init+0x2ec>)
 8001f1e:	f001 fea9 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f34:	2301      	movs	r3, #1
 8001f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4813      	ldr	r0, [pc, #76]	@ (8001f8c <MX_GPIO_Init+0x2f8>)
 8001f40:	f001 fe98 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001f44:	2360      	movs	r3, #96	@ 0x60
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f54:	230d      	movs	r3, #13
 8001f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480a      	ldr	r0, [pc, #40]	@ (8001f88 <MX_GPIO_Init+0x2f4>)
 8001f60:	f001 fe88 	bl	8003c74 <HAL_GPIO_Init>
 8001f64:	e014      	b.n	8001f90 <MX_GPIO_Init+0x2fc>
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40022800 	.word	0x40022800
 8001f7c:	40021c00 	.word	0x40021c00
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40021800 	.word	0x40021800
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001f90:	2340      	movs	r3, #64	@ 0x40
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fa0:	230a      	movs	r3, #10
 8001fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	48bc      	ldr	r0, [pc, #752]	@ (800229c <MX_GPIO_Init+0x608>)
 8001fac:	f001 fe62 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001fb0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fca:	4619      	mov	r1, r3
 8001fcc:	48b4      	ldr	r0, [pc, #720]	@ (80022a0 <MX_GPIO_Init+0x60c>)
 8001fce:	f001 fe51 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fd2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fe4:	230e      	movs	r3, #14
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fec:	4619      	mov	r1, r3
 8001fee:	48ad      	ldr	r0, [pc, #692]	@ (80022a4 <MX_GPIO_Init+0x610>)
 8001ff0:	f001 fe40 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002006:	4619      	mov	r1, r3
 8002008:	48a6      	ldr	r0, [pc, #664]	@ (80022a4 <MX_GPIO_Init+0x610>)
 800200a:	f001 fe33 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800200e:	2340      	movs	r3, #64	@ 0x40
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002012:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002020:	4619      	mov	r1, r3
 8002022:	48a1      	ldr	r0, [pc, #644]	@ (80022a8 <MX_GPIO_Init+0x614>)
 8002024:	f001 fe26 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002028:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800203a:	230c      	movs	r3, #12
 800203c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002042:	4619      	mov	r1, r3
 8002044:	4898      	ldr	r0, [pc, #608]	@ (80022a8 <MX_GPIO_Init+0x614>)
 8002046:	f001 fe15 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800204a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800205c:	230a      	movs	r3, #10
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002064:	4619      	mov	r1, r3
 8002066:	4891      	ldr	r0, [pc, #580]	@ (80022ac <MX_GPIO_Init+0x618>)
 8002068:	f001 fe04 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800206c:	23f0      	movs	r3, #240	@ 0xf0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800207c:	230a      	movs	r3, #10
 800207e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002084:	4619      	mov	r1, r3
 8002086:	488a      	ldr	r0, [pc, #552]	@ (80022b0 <MX_GPIO_Init+0x61c>)
 8002088:	f001 fdf4 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800208c:	23f7      	movs	r3, #247	@ 0xf7
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800209c:	230e      	movs	r3, #14
 800209e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a4:	4619      	mov	r1, r3
 80020a6:	4883      	ldr	r0, [pc, #524]	@ (80022b4 <MX_GPIO_Init+0x620>)
 80020a8:	f001 fde4 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020be:	2309      	movs	r3, #9
 80020c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c6:	4619      	mov	r1, r3
 80020c8:	4875      	ldr	r0, [pc, #468]	@ (80022a0 <MX_GPIO_Init+0x60c>)
 80020ca:	f001 fdd3 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80020ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020e0:	230a      	movs	r3, #10
 80020e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e8:	4619      	mov	r1, r3
 80020ea:	486d      	ldr	r0, [pc, #436]	@ (80022a0 <MX_GPIO_Init+0x60c>)
 80020ec:	f001 fdc2 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80020f0:	2320      	movs	r3, #32
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002104:	4619      	mov	r1, r3
 8002106:	4868      	ldr	r0, [pc, #416]	@ (80022a8 <MX_GPIO_Init+0x614>)
 8002108:	f001 fdb4 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800210c:	2308      	movs	r3, #8
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800211c:	230d      	movs	r3, #13
 800211e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002124:	4619      	mov	r1, r3
 8002126:	4860      	ldr	r0, [pc, #384]	@ (80022a8 <MX_GPIO_Init+0x614>)
 8002128:	f001 fda4 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 800212c:	230d      	movs	r3, #13
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002134:	2302      	movs	r3, #2
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800213c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002140:	4619      	mov	r1, r3
 8002142:	485b      	ldr	r0, [pc, #364]	@ (80022b0 <MX_GPIO_Init+0x61c>)
 8002144:	f001 fd96 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800215a:	4619      	mov	r1, r3
 800215c:	4856      	ldr	r0, [pc, #344]	@ (80022b8 <MX_GPIO_Init+0x624>)
 800215e:	f001 fd89 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002162:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002166:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002174:	230c      	movs	r3, #12
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002178:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800217c:	4619      	mov	r1, r3
 800217e:	484f      	ldr	r0, [pc, #316]	@ (80022bc <MX_GPIO_Init+0x628>)
 8002180:	f001 fd78 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002184:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002196:	230e      	movs	r3, #14
 8002198:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800219a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219e:	4619      	mov	r1, r3
 80021a0:	4843      	ldr	r0, [pc, #268]	@ (80022b0 <MX_GPIO_Init+0x61c>)
 80021a2:	f001 fd67 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80021a6:	2308      	movs	r3, #8
 80021a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ba:	4619      	mov	r1, r3
 80021bc:	483d      	ldr	r0, [pc, #244]	@ (80022b4 <MX_GPIO_Init+0x620>)
 80021be:	f001 fd59 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80021c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021d4:	230d      	movs	r3, #13
 80021d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021dc:	4619      	mov	r1, r3
 80021de:	4830      	ldr	r0, [pc, #192]	@ (80022a0 <MX_GPIO_Init+0x60c>)
 80021e0:	f001 fd48 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80021e4:	2310      	movs	r3, #16
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	482c      	ldr	r0, [pc, #176]	@ (80022a8 <MX_GPIO_Init+0x614>)
 80021f8:	f001 fd3c 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80021fc:	2304      	movs	r3, #4
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800220c:	230c      	movs	r3, #12
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002214:	4619      	mov	r1, r3
 8002216:	4824      	ldr	r0, [pc, #144]	@ (80022a8 <MX_GPIO_Init+0x614>)
 8002218:	f001 fd2c 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800221c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002222:	2300      	movs	r3, #0
 8002224:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800222a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800222e:	4619      	mov	r1, r3
 8002230:	4823      	ldr	r0, [pc, #140]	@ (80022c0 <MX_GPIO_Init+0x62c>)
 8002232:	f001 fd1f 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002236:	2302      	movs	r3, #2
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002246:	2305      	movs	r3, #5
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800224e:	4619      	mov	r1, r3
 8002250:	4817      	ldr	r0, [pc, #92]	@ (80022b0 <MX_GPIO_Init+0x61c>)
 8002252:	f001 fd0f 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800226c:	4619      	mov	r1, r3
 800226e:	4810      	ldr	r0, [pc, #64]	@ (80022b0 <MX_GPIO_Init+0x61c>)
 8002270:	f001 fd00 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227a:	2301      	movs	r3, #1
 800227c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <MX_GPIO_Init+0x62c>)
 800228e:	f001 fcf1 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002292:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8002296:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	e013      	b.n	80022c4 <MX_GPIO_Init+0x630>
 800229c:	40020400 	.word	0x40020400
 80022a0:	40021800 	.word	0x40021800
 80022a4:	40022400 	.word	0x40022400
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40022000 	.word	0x40022000
 80022b4:	40022800 	.word	0x40022800
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40021400 	.word	0x40021400
 80022c0:	40021c00 	.word	0x40021c00
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022ce:	230d      	movs	r3, #13
 80022d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d6:	4619      	mov	r1, r3
 80022d8:	4895      	ldr	r0, [pc, #596]	@ (8002530 <MX_GPIO_Init+0x89c>)
 80022da:	f001 fccb 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80022de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e4:	2300      	movs	r3, #0
 80022e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022e8:	2302      	movs	r3, #2
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4890      	ldr	r0, [pc, #576]	@ (8002534 <MX_GPIO_Init+0x8a0>)
 80022f4:	f001 fcbe 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80022f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800230a:	2301      	movs	r3, #1
 800230c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002312:	4619      	mov	r1, r3
 8002314:	4888      	ldr	r0, [pc, #544]	@ (8002538 <MX_GPIO_Init+0x8a4>)
 8002316:	f001 fcad 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800231a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002320:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002324:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	4880      	ldr	r0, [pc, #512]	@ (8002534 <MX_GPIO_Init+0x8a0>)
 8002332:	f001 fc9f 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002346:	2308      	movs	r3, #8
 8002348:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234e:	4619      	mov	r1, r3
 8002350:	487a      	ldr	r0, [pc, #488]	@ (800253c <MX_GPIO_Init+0x8a8>)
 8002352:	f001 fc8f 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8002356:	2340      	movs	r3, #64	@ 0x40
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800235e:	2302      	movs	r3, #2
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800236a:	4619      	mov	r1, r3
 800236c:	4873      	ldr	r0, [pc, #460]	@ (800253c <MX_GPIO_Init+0x8a8>)
 800236e:	f001 fc81 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002372:	2328      	movs	r3, #40	@ 0x28
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002382:	230c      	movs	r3, #12
 8002384:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002386:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800238a:	4619      	mov	r1, r3
 800238c:	4868      	ldr	r0, [pc, #416]	@ (8002530 <MX_GPIO_Init+0x89c>)
 800238e:	f001 fc71 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 8002392:	23c0      	movs	r3, #192	@ 0xc0
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800239a:	2302      	movs	r3, #2
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a6:	4619      	mov	r1, r3
 80023a8:	4865      	ldr	r0, [pc, #404]	@ (8002540 <MX_GPIO_Init+0x8ac>)
 80023aa:	f001 fc63 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80023ae:	2308      	movs	r3, #8
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023be:	230c      	movs	r3, #12
 80023c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80023c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c6:	4619      	mov	r1, r3
 80023c8:	485c      	ldr	r0, [pc, #368]	@ (800253c <MX_GPIO_Init+0x8a8>)
 80023ca:	f001 fc53 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023ce:	2332      	movs	r3, #50	@ 0x32
 80023d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023de:	230b      	movs	r3, #11
 80023e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	4854      	ldr	r0, [pc, #336]	@ (800253c <MX_GPIO_Init+0x8a8>)
 80023ea:	f001 fc43 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ee:	2304      	movs	r3, #4
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023fe:	2309      	movs	r3, #9
 8002400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002406:	4619      	mov	r1, r3
 8002408:	484e      	ldr	r0, [pc, #312]	@ (8002544 <MX_GPIO_Init+0x8b0>)
 800240a:	f001 fc33 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800240e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002420:	2309      	movs	r3, #9
 8002422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	4847      	ldr	r0, [pc, #284]	@ (8002548 <MX_GPIO_Init+0x8b4>)
 800242c:	f001 fc22 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002430:	2308      	movs	r3, #8
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002434:	2301      	movs	r3, #1
 8002436:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002444:	4619      	mov	r1, r3
 8002446:	483e      	ldr	r0, [pc, #248]	@ (8002540 <MX_GPIO_Init+0x8ac>)
 8002448:	f001 fc14 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800244c:	2304      	movs	r3, #4
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800245c:	4619      	mov	r1, r3
 800245e:	4838      	ldr	r0, [pc, #224]	@ (8002540 <MX_GPIO_Init+0x8ac>)
 8002460:	f001 fc08 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002464:	2386      	movs	r3, #134	@ 0x86
 8002466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002474:	230b      	movs	r3, #11
 8002476:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800247c:	4619      	mov	r1, r3
 800247e:	482e      	ldr	r0, [pc, #184]	@ (8002538 <MX_GPIO_Init+0x8a4>)
 8002480:	f001 fbf8 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002484:	2350      	movs	r3, #80	@ 0x50
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002494:	230d      	movs	r3, #13
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800249c:	4619      	mov	r1, r3
 800249e:	4826      	ldr	r0, [pc, #152]	@ (8002538 <MX_GPIO_Init+0x8a4>)
 80024a0:	f001 fbe8 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80024a4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024aa:	2312      	movs	r3, #18
 80024ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024b6:	2304      	movs	r3, #4
 80024b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	481b      	ldr	r0, [pc, #108]	@ (8002530 <MX_GPIO_Init+0x89c>)
 80024c2:	f001 fbd7 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80024c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024d8:	230a      	movs	r3, #10
 80024da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e0:	4619      	mov	r1, r3
 80024e2:	4818      	ldr	r0, [pc, #96]	@ (8002544 <MX_GPIO_Init+0x8b0>)
 80024e4:	f001 fbc6 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 80024e8:	2340      	movs	r3, #64	@ 0x40
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024f0:	2302      	movs	r3, #2
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fc:	4619      	mov	r1, r3
 80024fe:	480c      	ldr	r0, [pc, #48]	@ (8002530 <MX_GPIO_Init+0x89c>)
 8002500:	f001 fbb8 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002504:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002516:	2305      	movs	r3, #5
 8002518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800251e:	4619      	mov	r1, r3
 8002520:	4808      	ldr	r0, [pc, #32]	@ (8002544 <MX_GPIO_Init+0x8b0>)
 8002522:	f001 fba7 	bl	8003c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002526:	bf00      	nop
 8002528:	3740      	adds	r7, #64	@ 0x40
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021c00 	.word	0x40021c00
 8002534:	40022000 	.word	0x40022000
 8002538:	40020000 	.word	0x40020000
 800253c:	40020800 	.word	0x40020800
 8002540:	40021800 	.word	0x40021800
 8002544:	40020400 	.word	0x40020400
 8002548:	40020c00 	.word	0x40020c00

0800254c <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Setup code
	ProgramStateFSM progStateLocal;
	float PPMValue;
	bool sentAlarmMSG = false; // flag to transmit alarm msg only once
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
	bool meassuring = false;
 8002558:	2300      	movs	r3, #0
 800255a:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 800255c:	4b6b      	ldr	r3, [pc, #428]	@ (800270c <StartMainTask+0x1c0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fe8d 	bl	8007284 <osMutexAcquire>
	  progStateLocal = progState;
 800256a:	4b69      	ldr	r3, [pc, #420]	@ (8002710 <StartMainTask+0x1c4>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	737b      	strb	r3, [r7, #13]
	  osMutexRelease(RegimeMutexHandle);
 8002570:	4b66      	ldr	r3, [pc, #408]	@ (800270c <StartMainTask+0x1c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f004 fee3 	bl	8007340 <osMutexRelease>

	  PPMValue = ReadGasSensor();
 800257a:	f7fe fe19 	bl	80011b0 <ReadGasSensor>
 800257e:	ed87 0a02 	vstr	s0, [r7, #8]

	  switch(progStateLocal)
 8002582:	7b7b      	ldrb	r3, [r7, #13]
 8002584:	2b04      	cmp	r3, #4
 8002586:	f200 8084 	bhi.w	8002692 <StartMainTask+0x146>
 800258a:	a201      	add	r2, pc, #4	@ (adr r2, 8002590 <StartMainTask+0x44>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025f1 	.word	0x080025f1
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025f7 	.word	0x080025f7
 800259c:	0800262b 	.word	0x0800262b
 80025a0:	0800265f 	.word	0x0800265f
	  {
	  	  case P_IDLE_START:
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80025a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <StartMainTask+0x1c8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f004 fe69 	bl	8007284 <osMutexAcquire>
	  		  HelpSendUART(len_of_array, cmdStrings);
 80025b2:	2314      	movs	r3, #20
 80025b4:	4958      	ldr	r1, [pc, #352]	@ (8002718 <StartMainTask+0x1cc>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff f880 	bl	80016bc <HelpSendUART>
	  		  UART_TransmitString(IdleMSG);
 80025bc:	4857      	ldr	r0, [pc, #348]	@ (800271c <StartMainTask+0x1d0>)
 80025be:	f7ff f813 	bl	80015e8 <UART_TransmitString>
	  		  osMutexRelease(UARTMutexHandle);
 80025c2:	4b54      	ldr	r3, [pc, #336]	@ (8002714 <StartMainTask+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 feba 	bl	8007340 <osMutexRelease>

	  		  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 80025cc:	4b4f      	ldr	r3, [pc, #316]	@ (800270c <StartMainTask+0x1c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 fe55 	bl	8007284 <osMutexAcquire>
	  		  progState = P_IDLE;
 80025da:	4b4d      	ldr	r3, [pc, #308]	@ (8002710 <StartMainTask+0x1c4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	  		  osMutexRelease(RegimeMutexHandle);
 80025e0:	4b4a      	ldr	r3, [pc, #296]	@ (800270c <StartMainTask+0x1c0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 feab 	bl	8007340 <osMutexRelease>

	  		  meassuring = false;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73bb      	strb	r3, [r7, #14]
		  break;
 80025ee:	e050      	b.n	8002692 <StartMainTask+0x146>

	  	  case P_IDLE:
	  		  //System waits for configuration
	  		  meassuring = false;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73bb      	strb	r3, [r7, #14]
		  break;
 80025f4:	e04d      	b.n	8002692 <StartMainTask+0x146>

	  	  case P_WORK_S1:
	  		  meassuring = true;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80025fa:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <StartMainTask+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fe3e 	bl	8007284 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 8002608:	4845      	ldr	r0, [pc, #276]	@ (8002720 <StartMainTask+0x1d4>)
 800260a:	f7fe ffed 	bl	80015e8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 800260e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002612:	f7ff f82d 	bl	8001670 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 8002616:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <StartMainTask+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f004 fe90 	bl	8007340 <osMutexRelease>
	  		  osDelay(1000);
 8002620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002624:	f004 fccc 	bl	8006fc0 <osDelay>
		  break;
 8002628:	e033      	b.n	8002692 <StartMainTask+0x146>

	  	  case P_WORK_S3:
	  		  meassuring = true;
 800262a:	2301      	movs	r3, #1
 800262c:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 800262e:	4b39      	ldr	r3, [pc, #228]	@ (8002714 <StartMainTask+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f04f 31ff 	mov.w	r1, #4294967295
 8002636:	4618      	mov	r0, r3
 8002638:	f004 fe24 	bl	8007284 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 800263c:	4838      	ldr	r0, [pc, #224]	@ (8002720 <StartMainTask+0x1d4>)
 800263e:	f7fe ffd3 	bl	80015e8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002642:	ed97 0a02 	vldr	s0, [r7, #8]
 8002646:	f7ff f813 	bl	8001670 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 800264a:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <StartMainTask+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fe76 	bl	8007340 <osMutexRelease>
	  		  osDelay(3000);
 8002654:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002658:	f004 fcb2 	bl	8006fc0 <osDelay>
		  break;
 800265c:	e019      	b.n	8002692 <StartMainTask+0x146>

	  	  case P_WORK_S5:
	  		  meassuring = true;
 800265e:	2301      	movs	r3, #1
 8002660:	73bb      	strb	r3, [r7, #14]
	  		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002662:	4b2c      	ldr	r3, [pc, #176]	@ (8002714 <StartMainTask+0x1c8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f04f 31ff 	mov.w	r1, #4294967295
 800266a:	4618      	mov	r0, r3
 800266c:	f004 fe0a 	bl	8007284 <osMutexAcquire>
	  		  UART_TransmitString(PPM_MSG);
 8002670:	482b      	ldr	r0, [pc, #172]	@ (8002720 <StartMainTask+0x1d4>)
 8002672:	f7fe ffb9 	bl	80015e8 <UART_TransmitString>
	  		  UART_TransmitFloat(PPMValue);
 8002676:	ed97 0a02 	vldr	s0, [r7, #8]
 800267a:	f7fe fff9 	bl	8001670 <UART_TransmitFloat>
	  		  osMutexRelease(UARTMutexHandle);
 800267e:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <StartMainTask+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f004 fe5c 	bl	8007340 <osMutexRelease>
	  		  osDelay(5000);
 8002688:	f241 3088 	movw	r0, #5000	@ 0x1388
 800268c:	f004 fc98 	bl	8006fc0 <osDelay>
		  break;
 8002690:	bf00      	nop
	  }

	  //Take action
	  //Setting the indicator system
	  if(meassuring == true)
 8002692:	7bbb      	ldrb	r3, [r7, #14]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <StartMainTask+0x154>
	  {
		  SetIndicatorLEDs(PPMValue);
 8002698:	ed97 0a02 	vldr	s0, [r7, #8]
 800269c:	f7fe fcfc 	bl	8001098 <SetIndicatorLEDs>
	  }

	  //Check for contamination
	  if(PPMValue > DangerousPPM)
 80026a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002724 <StartMainTask+0x1d8>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	dd13      	ble.n	80026da <StartMainTask+0x18e>
	  {
		  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <StartMainTask+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fde2 	bl	8007284 <osMutexAcquire>
		  UART_TransmitString(AlertMSG);
 80026c0:	4819      	ldr	r0, [pc, #100]	@ (8002728 <StartMainTask+0x1dc>)
 80026c2:	f7fe ff91 	bl	80015e8 <UART_TransmitString>
		  osMutexRelease(UARTMutexHandle);
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <StartMainTask+0x1c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 fe38 	bl	8007340 <osMutexRelease>
		  sentAlarmMSG = true;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
		  AlarmON();
 80026d4:	f7fe fd0e 	bl	80010f4 <AlarmON>
 80026d8:	e740      	b.n	800255c <StartMainTask+0x10>
	  }
	  else
	  {
		  AlarmOFF();
 80026da:	f7fe fd15 	bl	8001108 <AlarmOFF>
		  if(sentAlarmMSG == true)
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f43f af3b 	beq.w	800255c <StartMainTask+0x10>
		  {
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <StartMainTask+0x1c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f04f 31ff 	mov.w	r1, #4294967295
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 fdc8 	bl	8007284 <osMutexAcquire>
			  UART_TransmitString(RoomClearedMSG);
 80026f4:	480d      	ldr	r0, [pc, #52]	@ (800272c <StartMainTask+0x1e0>)
 80026f6:	f7fe ff77 	bl	80015e8 <UART_TransmitString>
			  osMutexRelease(UARTMutexHandle);
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <StartMainTask+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 fe1e 	bl	8007340 <osMutexRelease>
			  sentAlarmMSG = false; // to be avaliable for next time danger happens
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
	  osMutexAcquire(RegimeMutexHandle, osWaitForever);
 8002708:	e728      	b.n	800255c <StartMainTask+0x10>
 800270a:	bf00      	nop
 800270c:	200004ec 	.word	0x200004ec
 8002710:	2000015c 	.word	0x2000015c
 8002714:	200004f4 	.word	0x200004f4
 8002718:	2000010c 	.word	0x2000010c
 800271c:	20000008 	.word	0x20000008
 8002720:	20000028 	.word	0x20000028
 8002724:	45098000 	.word	0x45098000
 8002728:	20000030 	.word	0x20000030
 800272c:	20000054 	.word	0x20000054

08002730 <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void *argument)  // FSM za komande sa terminala
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	bool CommandStatus;
	float LocalPPM;
  /* Infinite loop */
  for(;;)
  {
	  if(IsTransferComplete() == true)
 8002738:	f7ff f89c 	bl	8001874 <IsTransferComplete>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80e3 	beq.w	800290a <StartTerminalTask+0x1da>
	  {
		  CommandStatus = StringCompareFromUART(GetRxBuffer(), cmdStrings, len_of_array, &CommandIndex);
 8002744:	f7ff f8a2 	bl	800188c <GetRxBuffer>
 8002748:	2214      	movs	r2, #20
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	4971      	ldr	r1, [pc, #452]	@ (8002914 <StartTerminalTask+0x1e4>)
 8002750:	f7ff f8b1 	bl	80018b6 <StringCompareFromUART>
 8002754:	4603      	mov	r3, r0
 8002756:	73fb      	strb	r3, [r7, #15]
		  if(CommandStatus == false)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <StartTerminalTask+0x66>
		  {
			  UART_TransmitString(ErrorMSG);
 8002764:	486c      	ldr	r0, [pc, #432]	@ (8002918 <StartTerminalTask+0x1e8>)
 8002766:	f7fe ff3f 	bl	80015e8 <UART_TransmitString>
			  ClearRxBuffer();
 800276a:	f7ff f865 	bl	8001838 <ClearRxBuffer>
			  osMutexAcquire(UARTMutexHandle, osWaitForever);
 800276e:	4b6b      	ldr	r3, [pc, #428]	@ (800291c <StartTerminalTask+0x1ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f04f 31ff 	mov.w	r1, #4294967295
 8002776:	4618      	mov	r0, r3
 8002778:	f004 fd84 	bl	8007284 <osMutexAcquire>
			  HelpSendUART(len_of_array, cmdStrings);
 800277c:	2314      	movs	r3, #20
 800277e:	4965      	ldr	r1, [pc, #404]	@ (8002914 <StartTerminalTask+0x1e4>)
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe ff9b 	bl	80016bc <HelpSendUART>
			  osMutexRelease(UARTMutexHandle);
 8002786:	4b65      	ldr	r3, [pc, #404]	@ (800291c <StartTerminalTask+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f004 fdd8 	bl	8007340 <osMutexRelease>
			  progStateLocal = P_IDLE;
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]
 8002794:	e0b9      	b.n	800290a <StartTerminalTask+0x1da>
		  }
		  else
		  {
			  ClearRxBuffer();
 8002796:	f7ff f84f 	bl	8001838 <ClearRxBuffer>
				uartCmdState = CommandIndex;
 800279a:	89bb      	ldrh	r3, [r7, #12]
 800279c:	73bb      	strb	r3, [r7, #14]

				switch(uartCmdState)
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	2b14      	cmp	r3, #20
 80027a2:	f200 80a3 	bhi.w	80028ec <StartTerminalTask+0x1bc>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <StartTerminalTask+0x7c>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	08002801 	.word	0x08002801
 80027b0:	08002807 	.word	0x08002807
 80027b4:	08002813 	.word	0x08002813
 80027b8:	0800281f 	.word	0x0800281f
 80027bc:	0800282b 	.word	0x0800282b
 80027c0:	08002835 	.word	0x08002835
 80027c4:	08002845 	.word	0x08002845
 80027c8:	08002851 	.word	0x08002851
 80027cc:	0800285d 	.word	0x0800285d
 80027d0:	08002867 	.word	0x08002867
 80027d4:	08002871 	.word	0x08002871
 80027d8:	0800287d 	.word	0x0800287d
 80027dc:	08002889 	.word	0x08002889
 80027e0:	08002895 	.word	0x08002895
 80027e4:	080028a1 	.word	0x080028a1
 80027e8:	080028ad 	.word	0x080028ad
 80027ec:	080028b9 	.word	0x080028b9
 80027f0:	080028c5 	.word	0x080028c5
 80027f4:	080028d1 	.word	0x080028d1
 80027f8:	080028dd 	.word	0x080028dd
 80027fc:	080028ed 	.word	0x080028ed
				{
					case cmd_0:

						progStateLocal = P_IDLE_START;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]

						break;
 8002804:	e072      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_1:

						progStateLocal = P_WORK_S1;
 8002806:	2302      	movs	r3, #2
 8002808:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S1WorkStateMSG);
 800280a:	4845      	ldr	r0, [pc, #276]	@ (8002920 <StartTerminalTask+0x1f0>)
 800280c:	f7fe feec 	bl	80015e8 <UART_TransmitString>

						break;
 8002810:	e06c      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_2:

						progStateLocal = P_WORK_S3;
 8002812:	2303      	movs	r3, #3
 8002814:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S3WorkStateMSG);
 8002816:	4843      	ldr	r0, [pc, #268]	@ (8002924 <StartTerminalTask+0x1f4>)
 8002818:	f7fe fee6 	bl	80015e8 <UART_TransmitString>

						break;
 800281c:	e066      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_3:

						progStateLocal = P_WORK_S5;
 800281e:	2304      	movs	r3, #4
 8002820:	75fb      	strb	r3, [r7, #23]
						UART_TransmitString(S5WorkStateMSG);
 8002822:	4841      	ldr	r0, [pc, #260]	@ (8002928 <StartTerminalTask+0x1f8>)
 8002824:	f7fe fee0 	bl	80015e8 <UART_TransmitString>

						break;
 8002828:	e060      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_4:

						LocalPPM = ReadGasSensor();
 800282a:	f7fe fcc1 	bl	80011b0 <ReadGasSensor>
 800282e:	ed87 0a04 	vstr	s0, [r7, #16]

						break;
 8002832:	e05b      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_5:

						UART_TransmitString(PPM_MSG);
 8002834:	483d      	ldr	r0, [pc, #244]	@ (800292c <StartTerminalTask+0x1fc>)
 8002836:	f7fe fed7 	bl	80015e8 <UART_TransmitString>
						UART_TransmitFloat(LocalPPM);
 800283a:	ed97 0a04 	vldr	s0, [r7, #16]
 800283e:	f7fe ff17 	bl	8001670 <UART_TransmitFloat>

						break;
 8002842:	e053      	b.n	80028ec <StartTerminalTask+0x1bc>


					case cmd_6:

						UART_TransmitString(FAN_ON);
 8002844:	483a      	ldr	r0, [pc, #232]	@ (8002930 <StartTerminalTask+0x200>)
 8002846:	f7fe fecf 	bl	80015e8 <UART_TransmitString>


						progStateLocal = P_IDLE;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]

						break;
 800284e:	e04d      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_7:

						UART_TransmitString(FAN_OFF);
 8002850:	4838      	ldr	r0, [pc, #224]	@ (8002934 <StartTerminalTask+0x204>)
 8002852:	f7fe fec9 	bl	80015e8 <UART_TransmitString>
						progStateLocal = P_IDLE;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

						break;
 800285a:	e047      	b.n	80028ec <StartTerminalTask+0x1bc>


					case cmd_8:

						AlarmON();
 800285c:	f7fe fc4a 	bl	80010f4 <AlarmON>
						progStateLocal = P_IDLE;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]

						break;
 8002864:	e042      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_9:

						AlarmOFF();
 8002866:	f7fe fc4f 	bl	8001108 <AlarmOFF>
						progStateLocal = P_IDLE;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

						break;
 800286e:	e03d      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_10:

						LED_Drive(true);
 8002870:	2001      	movs	r0, #1
 8002872:	f7fe fcf1 	bl	8001258 <LED_Drive>
						progStateLocal = P_IDLE;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]

						break;
 800287a:	e037      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_11:

						LED_Drive(false);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe fceb 	bl	8001258 <LED_Drive>
						progStateLocal = P_IDLE;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]

						break;
 8002886:	e031      	b.n	80028ec <StartTerminalTask+0x1bc>


					case cmd_12:

						SetIndicatorLEDsNum(0);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe fc15 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]

						break;
 8002892:	e02b      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_13:

						SetIndicatorLEDsNum(1);
 8002894:	2001      	movs	r0, #1
 8002896:	f7fe fc0f 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]

						break;
 800289e:	e025      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_14:

						SetIndicatorLEDsNum(2);
 80028a0:	2002      	movs	r0, #2
 80028a2:	f7fe fc09 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]

						break;
 80028aa:	e01f      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_15:

						SetIndicatorLEDsNum(3);
 80028ac:	2003      	movs	r0, #3
 80028ae:	f7fe fc03 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

						break;
 80028b6:	e019      	b.n	80028ec <StartTerminalTask+0x1bc>


					case cmd_16:

						SetIndicatorLEDsNum(4);
 80028b8:	2004      	movs	r0, #4
 80028ba:	f7fe fbfd 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]

						break;
 80028c2:	e013      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_17:

						SetIndicatorLEDsNum(5);
 80028c4:	2005      	movs	r0, #5
 80028c6:	f7fe fbf7 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

						break;
 80028ce:	e00d      	b.n	80028ec <StartTerminalTask+0x1bc>


					case cmd_18:

						SetIndicatorLEDsNum(6);
 80028d0:	2006      	movs	r0, #6
 80028d2:	f7fe fbf1 	bl	80010b8 <SetIndicatorLEDsNum>
						progStateLocal = P_IDLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]

						break;
 80028da:	e007      	b.n	80028ec <StartTerminalTask+0x1bc>

					case cmd_19:

						HelpSendUART(len_of_array, cmdStrings);
 80028dc:	2314      	movs	r3, #20
 80028de:	490d      	ldr	r1, [pc, #52]	@ (8002914 <StartTerminalTask+0x1e4>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe feeb 	bl	80016bc <HelpSendUART>
						progStateLocal = P_IDLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

						break;
 80028ea:	bf00      	nop
						break;
				}

				//ClearRxBuffer();

				osMutexAcquire(RegimeMutexHandle, osWaitForever);
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <StartTerminalTask+0x208>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fcc5 	bl	8007284 <osMutexAcquire>
				progState = progStateLocal;
 80028fa:	4a10      	ldr	r2, [pc, #64]	@ (800293c <StartTerminalTask+0x20c>)
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	7013      	strb	r3, [r2, #0]
				osMutexRelease(RegimeMutexHandle);
 8002900:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <StartTerminalTask+0x208>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fd1b 	bl	8007340 <osMutexRelease>
		  }
	  }

    osDelay(100);
 800290a:	2064      	movs	r0, #100	@ 0x64
 800290c:	f004 fb58 	bl	8006fc0 <osDelay>
	  if(IsTransferComplete() == true)
 8002910:	e712      	b.n	8002738 <StartTerminalTask+0x8>
 8002912:	bf00      	nop
 8002914:	2000010c 	.word	0x2000010c
 8002918:	200000dc 	.word	0x200000dc
 800291c:	200004f4 	.word	0x200004f4
 8002920:	2000007c 	.word	0x2000007c
 8002924:	20000094 	.word	0x20000094
 8002928:	200000ac 	.word	0x200000ac
 800292c:	20000028 	.word	0x20000028
 8002930:	200000c4 	.word	0x200000c4
 8002934:	200000d0 	.word	0x200000d0
 8002938:	200004ec 	.word	0x200004ec
 800293c:	2000015c 	.word	0x2000015c

08002940 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument) // Biranje moda
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002948:	2001      	movs	r0, #1
 800294a:	f004 fb39 	bl	8006fc0 <osDelay>
 800294e:	e7fb      	b.n	8002948 <StartButtonTask+0x8>

08002950 <LEDTimerCallback>:
  /* USER CODE END StartButtonTask */
}

/* LEDTimerCallback function */
void LEDTimerCallback(void *argument) // Led Driver
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDTimerCallback */

  /* USER CODE END LEDTimerCallback */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <TransmitTimerCallback>:

/* TransmitTimerCallback function */
void TransmitTimerCallback(void *argument) // RefRate
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTimerCallback */

  /* USER CODE END TransmitTimerCallback */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <ButtonTimerCallback>:

/* ButtonTimerCallback function */
void ButtonTimerCallback(void *argument) // 3 sec
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTimerCallback */

  /* USER CODE END ButtonTimerCallback */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800299e:	f000 faf1 	bl	8002f84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40002000 	.word	0x40002000

080029b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b4:	b672      	cpsid	i
}
 80029b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <Error_Handler+0x8>

080029bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_MspInit+0x4c>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_MspInit+0x4c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <HAL_MspInit+0x4c>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_MspInit+0x4c>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	210f      	movs	r1, #15
 80029f6:	f06f 0001 	mvn.w	r0, #1
 80029fa:	f000 ff95 	bl	8003928 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	@ 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a21      	ldr	r2, [pc, #132]	@ (8002ab0 <HAL_ADC_MspInit+0xa4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d13c      	bne.n	8002aa8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a2e:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	4a20      	ldr	r2, [pc, #128]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a46:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a4c:	f043 0320 	orr.w	r3, r3, #32
 8002a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	4a14      	ldr	r2, [pc, #80]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_ADC_MspInit+0xa8>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002a76:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002a7a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	480b      	ldr	r0, [pc, #44]	@ (8002ab8 <HAL_ADC_MspInit+0xac>)
 8002a8c:	f001 f8f2 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002a90:	2301      	movs	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a94:	2303      	movs	r3, #3
 8002a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4806      	ldr	r0, [pc, #24]	@ (8002abc <HAL_ADC_MspInit+0xb0>)
 8002aa4:	f001 f8e6 	bl	8003c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002aa8:	bf00      	nop
 8002aaa:	3728      	adds	r7, #40	@ 0x28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40012200 	.word	0x40012200
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40020000 	.word	0x40020000

08002ac0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <HAL_CRC_MspInit+0x38>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10b      	bne.n	8002aea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_CRC_MspInit+0x3c>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_CRC_MspInit+0x3c>)
 8002ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_CRC_MspInit+0x3c>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023000 	.word	0x40023000
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0ac      	sub	sp, #176	@ 0xb0
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b18:	f107 0318 	add.w	r3, r7, #24
 8002b1c:	2284      	movs	r2, #132	@ 0x84
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f008 fcec 	bl	800b4fe <memset>
  if(huart->Instance==USART1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a36      	ldr	r2, [pc, #216]	@ (8002c04 <HAL_UART_MspInit+0x104>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d164      	bne.n	8002bfa <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b30:	2340      	movs	r3, #64	@ 0x40
 8002b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b34:	2300      	movs	r3, #0
 8002b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b38:	f107 0318 	add.w	r3, r7, #24
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 ff7b 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b48:	f7ff ff32 	bl	80029b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b50:	4a2d      	ldr	r2, [pc, #180]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b52:	f043 0310 	orr.w	r3, r3, #16
 8002b56:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b58:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	4a27      	ldr	r2, [pc, #156]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b70:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	4b22      	ldr	r3, [pc, #136]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b88:	4b1f      	ldr	r3, [pc, #124]	@ (8002c08 <HAL_UART_MspInit+0x108>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bac:	2307      	movs	r3, #7
 8002bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4814      	ldr	r0, [pc, #80]	@ (8002c0c <HAL_UART_MspInit+0x10c>)
 8002bba:	f001 f85b 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002bbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd8:	2307      	movs	r3, #7
 8002bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002be2:	4619      	mov	r1, r3
 8002be4:	480a      	ldr	r0, [pc, #40]	@ (8002c10 <HAL_UART_MspInit+0x110>)
 8002be6:	f001 f845 	bl	8003c74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2105      	movs	r1, #5
 8002bee:	2025      	movs	r0, #37	@ 0x25
 8002bf0:	f000 fe9a 	bl	8003928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bf4:	2025      	movs	r0, #37	@ 0x25
 8002bf6:	f000 feb3 	bl	8003960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bfa:	bf00      	nop
 8002bfc:	37b0      	adds	r7, #176	@ 0xb0
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020000 	.word	0x40020000

08002c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	@ 0x38
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002c24:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_InitTick+0xe0>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	4a32      	ldr	r2, [pc, #200]	@ (8002cf4 <HAL_InitTick+0xe0>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c30:	4b30      	ldr	r3, [pc, #192]	@ (8002cf4 <HAL_InitTick+0xe0>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c3c:	f107 0210 	add.w	r2, r7, #16
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 fec4 	bl	80049d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c56:	f001 fe95 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8002c5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002c5c:	e004      	b.n	8002c68 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c5e:	f001 fe91 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8002c62:	4603      	mov	r3, r0
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6a:	4a23      	ldr	r2, [pc, #140]	@ (8002cf8 <HAL_InitTick+0xe4>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	0c9b      	lsrs	r3, r3, #18
 8002c72:	3b01      	subs	r3, #1
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002c76:	4b21      	ldr	r3, [pc, #132]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002c78:	4a21      	ldr	r2, [pc, #132]	@ (8002d00 <HAL_InitTick+0xec>)
 8002c7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002c7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c82:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002c84:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c90:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002c9c:	4817      	ldr	r0, [pc, #92]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002c9e:	f002 fabb 	bl	8005218 <HAL_TIM_Base_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11b      	bne.n	8002ce8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002cb0:	4812      	ldr	r0, [pc, #72]	@ (8002cfc <HAL_InitTick+0xe8>)
 8002cb2:	f002 fb13 	bl	80052dc <HAL_TIM_Base_Start_IT>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002cc4:	202d      	movs	r0, #45	@ 0x2d
 8002cc6:	f000 fe4b 	bl	8003960 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d808      	bhi.n	8002ce2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	202d      	movs	r0, #45	@ 0x2d
 8002cd6:	f000 fe27 	bl	8003928 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cda:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <HAL_InitTick+0xf0>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e002      	b.n	8002ce8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3738      	adds	r7, #56	@ 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	431bde83 	.word	0x431bde83
 8002cfc:	200004f8 	.word	0x200004f8
 8002d00:	40002000 	.word	0x40002000
 8002d04:	20000164 	.word	0x20000164

08002d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <NMI_Handler+0x4>

08002d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <HardFault_Handler+0x4>

08002d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <MemManage_Handler+0x4>

08002d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <BusFault_Handler+0x4>

08002d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <UsageFault_Handler+0x4>

08002d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d44:	4802      	ldr	r0, [pc, #8]	@ (8002d50 <USART1_IRQHandler+0x10>)
 8002d46:	f002 fe5d 	bl	8005a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2000044c 	.word	0x2000044c

08002d54 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002d58:	4802      	ldr	r0, [pc, #8]	@ (8002d64 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002d5a:	f002 fb37 	bl	80053cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200004f8 	.word	0x200004f8

08002d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return 1;
 8002d6c:	2301      	movs	r3, #1
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_kill>:

int _kill(int pid, int sig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d82:	f008 fc77 	bl	800b674 <__errno>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2216      	movs	r2, #22
 8002d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_exit>:

void _exit (int status)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffe7 	bl	8002d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <_exit+0x12>

08002dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e00a      	b.n	8002dd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dc0:	f3af 8000 	nop.w
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	60ba      	str	r2, [r7, #8]
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dbf0      	blt.n	8002dc0 <_read+0x12>
  }

  return len;
 8002dde:	687b      	ldr	r3, [r7, #4]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e009      	b.n	8002e0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dbf1      	blt.n	8002dfa <_write+0x12>
  }
  return len;
 8002e16:	687b      	ldr	r3, [r7, #4]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_close>:

int _close(int file)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e48:	605a      	str	r2, [r3, #4]
  return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_isatty>:

int _isatty(int file)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e90:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <_sbrk+0x5c>)
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <_sbrk+0x60>)
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <_sbrk+0x64>)
 8002ea6:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <_sbrk+0x68>)
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d207      	bcs.n	8002ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb8:	f008 fbdc 	bl	800b674 <__errno>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e009      	b.n	8002edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <_sbrk+0x64>)
 8002ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20050000 	.word	0x20050000
 8002ee8:	00000400 	.word	0x00000400
 8002eec:	20000544 	.word	0x20000544
 8002ef0:	20005078 	.word	0x20005078

08002ef4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <SystemInit+0x20>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <SystemInit+0x20>)
 8002f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f1c:	480d      	ldr	r0, [pc, #52]	@ (8002f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f1e:	490e      	ldr	r1, [pc, #56]	@ (8002f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f20:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f24:	e002      	b.n	8002f2c <LoopCopyDataInit>

08002f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2a:	3304      	adds	r3, #4

08002f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f30:	d3f9      	bcc.n	8002f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f32:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f34:	4c0b      	ldr	r4, [pc, #44]	@ (8002f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f38:	e001      	b.n	8002f3e <LoopFillZerobss>

08002f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f3c:	3204      	adds	r2, #4

08002f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f40:	d3fb      	bcc.n	8002f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f42:	f7ff ffd7 	bl	8002ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f46:	f008 fb9b 	bl	800b680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f4a:	f7fe fd03 	bl	8001954 <main>
  bx  lr    
 8002f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8002f5c:	0800f478 	.word	0x0800f478
  ldr r2, =_sbss
 8002f60:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8002f64:	20005078 	.word	0x20005078

08002f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC_IRQHandler>

08002f6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6e:	2003      	movs	r0, #3
 8002f70:	f000 fccf 	bl	8003912 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f74:	200f      	movs	r0, #15
 8002f76:	f7ff fe4d 	bl	8002c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7a:	f7ff fd1f 	bl	80029bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000168 	.word	0x20000168
 8002fa8:	20000548 	.word	0x20000548

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000548 	.word	0x20000548

08002fc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e031      	b.n	800303e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fd12 	bl	8002a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_ADC_Init+0x84>)
 8003008:	4013      	ands	r3, r2
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fad6 	bl	80035c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
 800302e:	e001      	b.n	8003034 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	ffffeefd 	.word	0xffffeefd

0800304c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_ADC_Start+0x1a>
 8003062:	2302      	movs	r3, #2
 8003064:	e0ad      	b.n	80031c2 <HAL_ADC_Start+0x176>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d018      	beq.n	80030ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800308c:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <HAL_ADC_Start+0x184>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a50      	ldr	r2, [pc, #320]	@ (80031d4 <HAL_ADC_Start+0x188>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0c9a      	lsrs	r2, r3, #18
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80030a0:	e002      	b.n	80030a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f9      	bne.n	80030a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d175      	bne.n	80031a8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030c0:	4b45      	ldr	r3, [pc, #276]	@ (80031d8 <HAL_ADC_Start+0x18c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f6:	d106      	bne.n	8003106 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	f023 0206 	bic.w	r2, r3, #6
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	645a      	str	r2, [r3, #68]	@ 0x44
 8003104:	e002      	b.n	800310c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800311c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800311e:	4b2f      	ldr	r3, [pc, #188]	@ (80031dc <HAL_ADC_Start+0x190>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d143      	bne.n	80031c0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e03a      	b.n	80031c0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a24      	ldr	r2, [pc, #144]	@ (80031e0 <HAL_ADC_Start+0x194>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10e      	bne.n	8003172 <HAL_ADC_Start+0x126>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003170:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003172:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <HAL_ADC_Start+0x190>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d120      	bne.n	80031c0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <HAL_ADC_Start+0x198>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d11b      	bne.n	80031c0 <HAL_ADC_Start+0x174>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d114      	bne.n	80031c0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	e00b      	b.n	80031c0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000160 	.word	0x20000160
 80031d4:	431bde83 	.word	0x431bde83
 80031d8:	fffff8fe 	.word	0xfffff8fe
 80031dc:	40012300 	.word	0x40012300
 80031e0:	40012000 	.word	0x40012000
 80031e4:	40012200 	.word	0x40012200

080031e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003204:	d113      	bne.n	800322e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003214:	d10b      	bne.n	800322e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e063      	b.n	80032f6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800322e:	f7ff febd 	bl	8002fac <HAL_GetTick>
 8003232:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003234:	e021      	b.n	800327a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d01d      	beq.n	800327a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_ADC_PollForConversion+0x6c>
 8003244:	f7ff feb2 	bl	8002fac <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d212      	bcs.n	800327a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d00b      	beq.n	800327a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f043 0204 	orr.w	r2, r3, #4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e03d      	b.n	80032f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d1d6      	bne.n	8003236 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0212 	mvn.w	r2, #18
 8003290:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d123      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11f      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e136      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x28a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b09      	cmp	r3, #9
 8003342:	d93a      	bls.n	80033ba <HAL_ADC_ConfigChannel+0xa2>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800334c:	d035      	beq.n	80033ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68d9      	ldr	r1, [r3, #12]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	3b1e      	subs	r3, #30
 8003364:	2207      	movs	r2, #7
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	400a      	ands	r2, r1
 8003372:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a8d      	ldr	r2, [pc, #564]	@ (80035b0 <HAL_ADC_ConfigChannel+0x298>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10a      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68d9      	ldr	r1, [r3, #12]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	061a      	lsls	r2, r3, #24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003392:	e035      	b.n	8003400 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4618      	mov	r0, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4403      	add	r3, r0
 80033ac:	3b1e      	subs	r3, #30
 80033ae:	409a      	lsls	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033b8:	e022      	b.n	8003400 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6919      	ldr	r1, [r3, #16]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	2207      	movs	r2, #7
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43da      	mvns	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	400a      	ands	r2, r1
 80033dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6919      	ldr	r1, [r3, #16]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4403      	add	r3, r0
 80033f6:	409a      	lsls	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d824      	bhi.n	8003452 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	3b05      	subs	r3, #5
 800341a:	221f      	movs	r2, #31
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	400a      	ands	r2, r1
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	4618      	mov	r0, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	3b05      	subs	r3, #5
 8003444:	fa00 f203 	lsl.w	r2, r0, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003450:	e04c      	b.n	80034ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d824      	bhi.n	80034a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	3b23      	subs	r3, #35	@ 0x23
 800346c:	221f      	movs	r2, #31
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	400a      	ands	r2, r1
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	4618      	mov	r0, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3b23      	subs	r3, #35	@ 0x23
 8003496:	fa00 f203 	lsl.w	r2, r0, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80034a2:	e023      	b.n	80034ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b41      	subs	r3, #65	@ 0x41
 80034b6:	221f      	movs	r2, #31
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43da      	mvns	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	400a      	ands	r2, r1
 80034c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b41      	subs	r3, #65	@ 0x41
 80034e0:	fa00 f203 	lsl.w	r2, r0, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	@ (80035b4 <HAL_ADC_ConfigChannel+0x29c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10a      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1f4>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034fe:	d105      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a2c      	ldr	r2, [pc, #176]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003506:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800350a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a28      	ldr	r2, [pc, #160]	@ (80035b4 <HAL_ADC_ConfigChannel+0x29c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10f      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x21e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b12      	cmp	r3, #18
 800351c:	d10b      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800351e:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a25      	ldr	r2, [pc, #148]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003524:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003528:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800352a:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a22      	ldr	r2, [pc, #136]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003530:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003534:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	@ (80035b4 <HAL_ADC_ConfigChannel+0x29c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d12b      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x280>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1a      	ldr	r2, [pc, #104]	@ (80035b0 <HAL_ADC_ConfigChannel+0x298>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x23a>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b11      	cmp	r3, #17
 8003550:	d122      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003552:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003558:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800355c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800355e:	4b16      	ldr	r3, [pc, #88]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003564:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003568:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <HAL_ADC_ConfigChannel+0x298>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d111      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_ADC_ConfigChannel+0x2a4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0c9a      	lsrs	r2, r3, #18
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800358a:	e002      	b.n	8003592 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	10000012 	.word	0x10000012
 80035b4:	40012000 	.word	0x40012000
 80035b8:	40012300 	.word	0x40012300
 80035bc:	20000160 	.word	0x20000160
 80035c0:	431bde83 	.word	0x431bde83

080035c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035cc:	4b78      	ldr	r3, [pc, #480]	@ (80037b0 <ADC_Init+0x1ec>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a77      	ldr	r2, [pc, #476]	@ (80037b0 <ADC_Init+0x1ec>)
 80035d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80035d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80035d8:	4b75      	ldr	r3, [pc, #468]	@ (80037b0 <ADC_Init+0x1ec>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4973      	ldr	r1, [pc, #460]	@ (80037b0 <ADC_Init+0x1ec>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	021a      	lsls	r2, r3, #8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800363a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	4a58      	ldr	r2, [pc, #352]	@ (80037b4 <ADC_Init+0x1f0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003666:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	e00f      	b.n	80036be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0202 	bic.w	r2, r2, #2
 80036cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	005a      	lsls	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800370a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	3b01      	subs	r3, #1
 8003718:	035a      	lsls	r2, r3, #13
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	e007      	b.n	8003734 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003732:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	3b01      	subs	r3, #1
 8003750:	051a      	lsls	r2, r3, #20
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003776:	025a      	lsls	r2, r3, #9
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800378e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	029a      	lsls	r2, r3, #10
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40012300 	.word	0x40012300
 80037b4:	0f000001 	.word	0x0f000001

080037b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <__NVIC_SetPriorityGrouping+0x40>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e6:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <__NVIC_SetPriorityGrouping+0x40>)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	60d3      	str	r3, [r2, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00
 80037fc:	05fa0000 	.word	0x05fa0000

08003800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	@ (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	@ (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	@ (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	@ 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	@ 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff4c 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800393a:	f7ff ff61 	bl	8003800 <__NVIC_GetPriorityGrouping>
 800393e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6978      	ldr	r0, [r7, #20]
 8003946:	f7ff ffb1 	bl	80038ac <NVIC_EncodePriority>
 800394a:	4602      	mov	r2, r0
 800394c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff80 	bl	8003858 <__NVIC_SetPriority>
}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff54 	bl	800381c <__NVIC_EnableIRQ>
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e054      	b.n	8003a38 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7f5b      	ldrb	r3, [r3, #29]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff f88e 	bl	8002ac0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	791b      	ldrb	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10c      	bne.n	80039cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a22      	ldr	r2, [pc, #136]	@ (8003a40 <HAL_CRC_Init+0xc4>)
 80039b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0218 	bic.w	r2, r2, #24
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	e00c      	b.n	80039e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6899      	ldr	r1, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	461a      	mov	r2, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f834 	bl	8003a44 <HAL_CRCEx_Polynomial_Set>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e028      	b.n	8003a38 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	795b      	ldrb	r3, [r3, #5]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f04f 32ff 	mov.w	r2, #4294967295
 80039f6:	611a      	str	r2, [r3, #16]
 80039f8:	e004      	b.n	8003a04 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6912      	ldr	r2, [r2, #16]
 8003a02:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	04c11db7 	.word	0x04c11db7

08003a44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a54:	231f      	movs	r3, #31
 8003a56:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a58:	bf00      	nop
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1e5a      	subs	r2, r3, #1
 8003a5e:	613a      	str	r2, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b18      	cmp	r3, #24
 8003a7c:	d846      	bhi.n	8003b0c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003b13 	.word	0x08003b13
 8003a88:	08003b0d 	.word	0x08003b0d
 8003a8c:	08003b0d 	.word	0x08003b0d
 8003a90:	08003b0d 	.word	0x08003b0d
 8003a94:	08003b0d 	.word	0x08003b0d
 8003a98:	08003b0d 	.word	0x08003b0d
 8003a9c:	08003b0d 	.word	0x08003b0d
 8003aa0:	08003b0d 	.word	0x08003b0d
 8003aa4:	08003b01 	.word	0x08003b01
 8003aa8:	08003b0d 	.word	0x08003b0d
 8003aac:	08003b0d 	.word	0x08003b0d
 8003ab0:	08003b0d 	.word	0x08003b0d
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003b0d 	.word	0x08003b0d
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003af5 	.word	0x08003af5
 8003ac8:	08003b0d 	.word	0x08003b0d
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b0d 	.word	0x08003b0d
 8003ad4:	08003b0d 	.word	0x08003b0d
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003b0d 	.word	0x08003b0d
 8003ae0:	08003b0d 	.word	0x08003b0d
 8003ae4:	08003ae9 	.word	0x08003ae9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d913      	bls.n	8003b16 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003af2:	e010      	b.n	8003b16 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b07      	cmp	r3, #7
 8003af8:	d90f      	bls.n	8003b1a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003afe:	e00c      	b.n	8003b1a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	d90b      	bls.n	8003b1e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b0a:	e008      	b.n	8003b1e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b10:	e006      	b.n	8003b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b12:	bf00      	nop
 8003b14:	e004      	b.n	8003b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b1e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f023 0118 	bic.w	r1, r3, #24
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b5e:	f7ff fa25 	bl	8002fac <HAL_GetTick>
 8003b62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d008      	beq.n	8003b82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2280      	movs	r2, #128	@ 0x80
 8003b74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e052      	b.n	8003c28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0216 	bic.w	r2, r2, #22
 8003b90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ba0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_DMA_Abort+0x62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0208 	bic.w	r2, r2, #8
 8003bc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd2:	e013      	b.n	8003bfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd4:	f7ff f9ea 	bl	8002fac <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d90c      	bls.n	8003bfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2203      	movs	r2, #3
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e015      	b.n	8003c28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e4      	bne.n	8003bd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0e:	223f      	movs	r2, #63	@ 0x3f
 8003c10:	409a      	lsls	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d004      	beq.n	8003c4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2280      	movs	r2, #128	@ 0x80
 8003c48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00c      	b.n	8003c68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2205      	movs	r2, #5
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	@ 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e175      	b.n	8003f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f040 8164 	bne.w	8003f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d005      	beq.n	8003cca <HAL_GPIO_Init+0x56>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d130      	bne.n	8003d2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d017      	beq.n	8003d68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d123      	bne.n	8003dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	08da      	lsrs	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3208      	adds	r2, #8
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0203 	and.w	r2, r3, #3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80be 	beq.w	8003f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfe:	4b66      	ldr	r3, [pc, #408]	@ (8003f98 <HAL_GPIO_Init+0x324>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	4a65      	ldr	r2, [pc, #404]	@ (8003f98 <HAL_GPIO_Init+0x324>)
 8003e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0a:	4b63      	ldr	r3, [pc, #396]	@ (8003f98 <HAL_GPIO_Init+0x324>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e16:	4a61      	ldr	r2, [pc, #388]	@ (8003f9c <HAL_GPIO_Init+0x328>)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	@ (8003fa0 <HAL_GPIO_Init+0x32c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d037      	beq.n	8003eb2 <HAL_GPIO_Init+0x23e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a57      	ldr	r2, [pc, #348]	@ (8003fa4 <HAL_GPIO_Init+0x330>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d031      	beq.n	8003eae <HAL_GPIO_Init+0x23a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a56      	ldr	r2, [pc, #344]	@ (8003fa8 <HAL_GPIO_Init+0x334>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d02b      	beq.n	8003eaa <HAL_GPIO_Init+0x236>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a55      	ldr	r2, [pc, #340]	@ (8003fac <HAL_GPIO_Init+0x338>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d025      	beq.n	8003ea6 <HAL_GPIO_Init+0x232>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a54      	ldr	r2, [pc, #336]	@ (8003fb0 <HAL_GPIO_Init+0x33c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01f      	beq.n	8003ea2 <HAL_GPIO_Init+0x22e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a53      	ldr	r2, [pc, #332]	@ (8003fb4 <HAL_GPIO_Init+0x340>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d019      	beq.n	8003e9e <HAL_GPIO_Init+0x22a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	@ (8003fb8 <HAL_GPIO_Init+0x344>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_Init+0x226>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a51      	ldr	r2, [pc, #324]	@ (8003fbc <HAL_GPIO_Init+0x348>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_Init+0x222>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a50      	ldr	r2, [pc, #320]	@ (8003fc0 <HAL_GPIO_Init+0x34c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_Init+0x21e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4f      	ldr	r2, [pc, #316]	@ (8003fc4 <HAL_GPIO_Init+0x350>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_Init+0x21a>
 8003e8a:	2309      	movs	r3, #9
 8003e8c:	e012      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e8e:	230a      	movs	r3, #10
 8003e90:	e010      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e92:	2308      	movs	r3, #8
 8003e94:	e00e      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e96:	2307      	movs	r3, #7
 8003e98:	e00c      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e9a:	2306      	movs	r3, #6
 8003e9c:	e00a      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e9e:	2305      	movs	r3, #5
 8003ea0:	e008      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e004      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e002      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f002 0203 	and.w	r2, r2, #3
 8003eba:	0092      	lsls	r2, r2, #2
 8003ebc:	4093      	lsls	r3, r2
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ec4:	4935      	ldr	r1, [pc, #212]	@ (8003f9c <HAL_GPIO_Init+0x328>)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ef6:	4a34      	ldr	r2, [pc, #208]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003efc:	4b32      	ldr	r3, [pc, #200]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f20:	4a29      	ldr	r2, [pc, #164]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f26:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f50:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f74:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	f67f ae86 	bls.w	8003c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3724      	adds	r7, #36	@ 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40013800 	.word	0x40013800
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40020400 	.word	0x40020400
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	40020c00 	.word	0x40020c00
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40021400 	.word	0x40021400
 8003fb8:	40021800 	.word	0x40021800
 8003fbc:	40021c00 	.word	0x40021c00
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	40022400 	.word	0x40022400
 8003fc8:	40013c00 	.word	0x40013c00

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fe8:	e003      	b.n	8003ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	041a      	lsls	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a04      	ldr	r2, [pc, #16]	@ (800401c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400e:	6013      	str	r3, [r2, #0]
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40007000 	.word	0x40007000

08004020 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b23      	ldr	r3, [pc, #140]	@ (80040b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	4a22      	ldr	r2, [pc, #136]	@ (80040b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	@ 0x40
 8004036:	4b20      	ldr	r3, [pc, #128]	@ (80040b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004042:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1d      	ldr	r2, [pc, #116]	@ (80040bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800404e:	f7fe ffad 	bl	8002fac <HAL_GetTick>
 8004052:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004054:	e009      	b.n	800406a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004056:	f7fe ffa9 	bl	8002fac <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004064:	d901      	bls.n	800406a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e022      	b.n	80040b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800406a:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004076:	d1ee      	bne.n	8004056 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004078:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0f      	ldr	r2, [pc, #60]	@ (80040bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800407e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004082:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004084:	f7fe ff92 	bl	8002fac <HAL_GetTick>
 8004088:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800408a:	e009      	b.n	80040a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800408c:	f7fe ff8e 	bl	8002fac <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800409a:	d901      	bls.n	80040a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e007      	b.n	80040b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040a0:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040ac:	d1ee      	bne.n	800408c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40007000 	.word	0x40007000

080040c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040c8:	2300      	movs	r3, #0
 80040ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e291      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8087 	beq.w	80041f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040e4:	4b96      	ldr	r3, [pc, #600]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d00c      	beq.n	800410a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f0:	4b93      	ldr	r3, [pc, #588]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d112      	bne.n	8004122 <HAL_RCC_OscConfig+0x62>
 80040fc:	4b90      	ldr	r3, [pc, #576]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004108:	d10b      	bne.n	8004122 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410a:	4b8d      	ldr	r3, [pc, #564]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d06c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x130>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d168      	bne.n	80041f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e26b      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x7a>
 800412c:	4b84      	ldr	r3, [pc, #528]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a83      	ldr	r2, [pc, #524]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e02e      	b.n	8004198 <HAL_RCC_OscConfig+0xd8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x9c>
 8004142:	4b7f      	ldr	r3, [pc, #508]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b7c      	ldr	r3, [pc, #496]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a7b      	ldr	r2, [pc, #492]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e01d      	b.n	8004198 <HAL_RCC_OscConfig+0xd8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0xc0>
 8004166:	4b76      	ldr	r3, [pc, #472]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a75      	ldr	r2, [pc, #468]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800416c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b73      	ldr	r3, [pc, #460]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a72      	ldr	r2, [pc, #456]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0xd8>
 8004180:	4b6f      	ldr	r3, [pc, #444]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a6e      	ldr	r2, [pc, #440]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b6c      	ldr	r3, [pc, #432]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a6b      	ldr	r2, [pc, #428]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d013      	beq.n	80041c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fe ff04 	bl	8002fac <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a8:	f7fe ff00 	bl	8002fac <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	@ 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e21f      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	4b61      	ldr	r3, [pc, #388]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0xe8>
 80041c6:	e014      	b.n	80041f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe fef0 	bl	8002fac <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d0:	f7fe feec 	bl	8002fac <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	@ 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e20b      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e2:	4b57      	ldr	r3, [pc, #348]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x110>
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d069      	beq.n	80042d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041fe:	4b50      	ldr	r3, [pc, #320]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b4d      	ldr	r3, [pc, #308]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b08      	cmp	r3, #8
 8004214:	d11c      	bne.n	8004250 <HAL_RCC_OscConfig+0x190>
 8004216:	4b4a      	ldr	r3, [pc, #296]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004222:	4b47      	ldr	r3, [pc, #284]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_RCC_OscConfig+0x17a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e1df      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	493d      	ldr	r1, [pc, #244]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	e040      	b.n	80042d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d023      	beq.n	80042a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004258:	4b39      	ldr	r3, [pc, #228]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a38      	ldr	r2, [pc, #224]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe fea2 	bl	8002fac <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426c:	f7fe fe9e 	bl	8002fac <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1bd      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427e:	4b30      	ldr	r3, [pc, #192]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428a:	4b2d      	ldr	r3, [pc, #180]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4929      	ldr	r1, [pc, #164]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
 800429e:	e018      	b.n	80042d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a0:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a26      	ldr	r2, [pc, #152]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe fe7e 	bl	8002fac <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fe fe7a 	bl	8002fac <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e199      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d038      	beq.n	8004350 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d019      	beq.n	800431a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4b16      	ldr	r3, [pc, #88]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80042e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ea:	4a15      	ldr	r2, [pc, #84]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fe fe5b 	bl	8002fac <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fe fe57 	bl	8002fac <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e176      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430c:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x23a>
 8004318:	e01a      	b.n	8004350 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431a:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431e:	4a08      	ldr	r2, [pc, #32]	@ (8004340 <HAL_RCC_OscConfig+0x280>)
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7fe fe41 	bl	8002fac <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432e:	f7fe fe3d 	bl	8002fac <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d903      	bls.n	8004344 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e15c      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
 8004340:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	4b91      	ldr	r3, [pc, #580]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ee      	bne.n	800432e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a4 	beq.w	80044a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435e:	4b8b      	ldr	r3, [pc, #556]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10d      	bne.n	8004386 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	4b88      	ldr	r3, [pc, #544]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	4a87      	ldr	r2, [pc, #540]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004374:	6413      	str	r3, [r2, #64]	@ 0x40
 8004376:	4b85      	ldr	r3, [pc, #532]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004386:	4b82      	ldr	r3, [pc, #520]	@ (8004590 <HAL_RCC_OscConfig+0x4d0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d118      	bne.n	80043c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004392:	4b7f      	ldr	r3, [pc, #508]	@ (8004590 <HAL_RCC_OscConfig+0x4d0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a7e      	ldr	r2, [pc, #504]	@ (8004590 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800439c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439e:	f7fe fe05 	bl	8002fac <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a6:	f7fe fe01 	bl	8002fac <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b64      	cmp	r3, #100	@ 0x64
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e120      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b8:	4b75      	ldr	r3, [pc, #468]	@ (8004590 <HAL_RCC_OscConfig+0x4d0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d106      	bne.n	80043da <HAL_RCC_OscConfig+0x31a>
 80043cc:	4b6f      	ldr	r3, [pc, #444]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d0:	4a6e      	ldr	r2, [pc, #440]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d8:	e02d      	b.n	8004436 <HAL_RCC_OscConfig+0x376>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0x33c>
 80043e2:	4b6a      	ldr	r3, [pc, #424]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	4a69      	ldr	r2, [pc, #420]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ee:	4b67      	ldr	r3, [pc, #412]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	4a66      	ldr	r2, [pc, #408]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fa:	e01c      	b.n	8004436 <HAL_RCC_OscConfig+0x376>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b05      	cmp	r3, #5
 8004402:	d10c      	bne.n	800441e <HAL_RCC_OscConfig+0x35e>
 8004404:	4b61      	ldr	r3, [pc, #388]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004408:	4a60      	ldr	r2, [pc, #384]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800440a:	f043 0304 	orr.w	r3, r3, #4
 800440e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004410:	4b5e      	ldr	r3, [pc, #376]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	4a5d      	ldr	r2, [pc, #372]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	6713      	str	r3, [r2, #112]	@ 0x70
 800441c:	e00b      	b.n	8004436 <HAL_RCC_OscConfig+0x376>
 800441e:	4b5b      	ldr	r3, [pc, #364]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	4a5a      	ldr	r2, [pc, #360]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	@ 0x70
 800442a:	4b58      	ldr	r3, [pc, #352]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	4a57      	ldr	r2, [pc, #348]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d015      	beq.n	800446a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443e:	f7fe fdb5 	bl	8002fac <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004444:	e00a      	b.n	800445c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fe fdb1 	bl	8002fac <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e0ce      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	4b4b      	ldr	r3, [pc, #300]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ee      	beq.n	8004446 <HAL_RCC_OscConfig+0x386>
 8004468:	e014      	b.n	8004494 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fe fd9f 	bl	8002fac <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fe fd9b 	bl	8002fac <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0b8      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004488:	4b40      	ldr	r3, [pc, #256]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ee      	bne.n	8004472 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d105      	bne.n	80044a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449a:	4b3c      	ldr	r3, [pc, #240]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	4a3b      	ldr	r2, [pc, #236]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a4 	beq.w	80045f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b0:	4b36      	ldr	r3, [pc, #216]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d06b      	beq.n	8004594 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d149      	bne.n	8004558 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c4:	4b31      	ldr	r3, [pc, #196]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a30      	ldr	r2, [pc, #192]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80044ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe fd6c 	bl	8002fac <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe fd68 	bl	8002fac <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e087      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b28      	ldr	r3, [pc, #160]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	4313      	orrs	r3, r2
 800451c:	4a1b      	ldr	r2, [pc, #108]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800451e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004522:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800452a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe fd3c 	bl	8002fac <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004538:	f7fe fd38 	bl	8002fac <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e057      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454a:	4b10      	ldr	r3, [pc, #64]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x478>
 8004556:	e04f      	b.n	80045f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0b      	ldr	r2, [pc, #44]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 800455e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fe fd22 	bl	8002fac <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456c:	f7fe fd1e 	bl	8002fac <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e03d      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	4b03      	ldr	r3, [pc, #12]	@ (800458c <HAL_RCC_OscConfig+0x4cc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x4ac>
 800458a:	e035      	b.n	80045f8 <HAL_RCC_OscConfig+0x538>
 800458c:	40023800 	.word	0x40023800
 8004590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004594:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x544>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d028      	beq.n	80045f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d121      	bne.n	80045f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d11a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	3b01      	subs	r3, #1
 80045de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0d0      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b6a      	ldr	r3, [pc, #424]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d910      	bls.n	8004650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b67      	ldr	r3, [pc, #412]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 020f 	bic.w	r2, r3, #15
 8004636:	4965      	ldr	r1, [pc, #404]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b63      	ldr	r3, [pc, #396]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0b8      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d020      	beq.n	800469e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004668:	4b59      	ldr	r3, [pc, #356]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4a58      	ldr	r2, [pc, #352]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 800466e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004680:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a52      	ldr	r2, [pc, #328]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800468a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800468c:	4b50      	ldr	r3, [pc, #320]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	494d      	ldr	r1, [pc, #308]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d040      	beq.n	800472c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4b47      	ldr	r3, [pc, #284]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d115      	bne.n	80046ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07f      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	4b41      	ldr	r3, [pc, #260]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e073      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	4b3d      	ldr	r3, [pc, #244]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e06b      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ea:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4936      	ldr	r1, [pc, #216]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fe fc56 	bl	8002fac <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fe fc52 	bl	8002fac <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e053      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	4b2d      	ldr	r3, [pc, #180]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 020c 	and.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	429a      	cmp	r2, r3
 800472a:	d1eb      	bne.n	8004704 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800472c:	4b27      	ldr	r3, [pc, #156]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d210      	bcs.n	800475c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b24      	ldr	r3, [pc, #144]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 020f 	bic.w	r2, r3, #15
 8004742:	4922      	ldr	r1, [pc, #136]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b20      	ldr	r3, [pc, #128]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e032      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004768:	4b19      	ldr	r3, [pc, #100]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4916      	ldr	r1, [pc, #88]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	490e      	ldr	r1, [pc, #56]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800479a:	f000 f821 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 800479e:	4602      	mov	r2, r0
 80047a0:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	490a      	ldr	r1, [pc, #40]	@ (80047d4 <HAL_RCC_ClockConfig+0x1cc>)
 80047ac:	5ccb      	ldrb	r3, [r1, r3]
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <HAL_RCC_ClockConfig+0x1d0>)
 80047b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047b6:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <HAL_RCC_ClockConfig+0x1d4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fa2a 	bl	8002c14 <HAL_InitTick>

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023c00 	.word	0x40023c00
 80047d0:	40023800 	.word	0x40023800
 80047d4:	0800f024 	.word	0x0800f024
 80047d8:	20000160 	.word	0x20000160
 80047dc:	20000164 	.word	0x20000164

080047e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e4:	b090      	sub	sp, #64	@ 0x40
 80047e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ec:	2300      	movs	r3, #0
 80047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047f0:	2300      	movs	r3, #0
 80047f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f8:	4b59      	ldr	r3, [pc, #356]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x180>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d00d      	beq.n	8004820 <HAL_RCC_GetSysClockFreq+0x40>
 8004804:	2b08      	cmp	r3, #8
 8004806:	f200 80a1 	bhi.w	800494c <HAL_RCC_GetSysClockFreq+0x16c>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x34>
 800480e:	2b04      	cmp	r3, #4
 8004810:	d003      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0x3a>
 8004812:	e09b      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b53      	ldr	r3, [pc, #332]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x184>)
 8004816:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004818:	e09b      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800481a:	4b53      	ldr	r3, [pc, #332]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x188>)
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800481e:	e098      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004820:	4b4f      	ldr	r3, [pc, #316]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x180>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800482a:	4b4d      	ldr	r3, [pc, #308]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x180>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d028      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004836:	4b4a      	ldr	r3, [pc, #296]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x180>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	099b      	lsrs	r3, r3, #6
 800483c:	2200      	movs	r2, #0
 800483e:	623b      	str	r3, [r7, #32]
 8004840:	627a      	str	r2, [r7, #36]	@ 0x24
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004848:	2100      	movs	r1, #0
 800484a:	4b47      	ldr	r3, [pc, #284]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x188>)
 800484c:	fb03 f201 	mul.w	r2, r3, r1
 8004850:	2300      	movs	r3, #0
 8004852:	fb00 f303 	mul.w	r3, r0, r3
 8004856:	4413      	add	r3, r2
 8004858:	4a43      	ldr	r2, [pc, #268]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x188>)
 800485a:	fba0 1202 	umull	r1, r2, r0, r2
 800485e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004860:	460a      	mov	r2, r1
 8004862:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004866:	4413      	add	r3, r2
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800486a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486c:	2200      	movs	r2, #0
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	61fa      	str	r2, [r7, #28]
 8004872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800487a:	f7fc fa35 	bl	8000ce8 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4613      	mov	r3, r2
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004886:	e053      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004888:	4b35      	ldr	r3, [pc, #212]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x180>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	2200      	movs	r2, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	617a      	str	r2, [r7, #20]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800489a:	f04f 0b00 	mov.w	fp, #0
 800489e:	4652      	mov	r2, sl
 80048a0:	465b      	mov	r3, fp
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f04f 0100 	mov.w	r1, #0
 80048aa:	0159      	lsls	r1, r3, #5
 80048ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b0:	0150      	lsls	r0, r2, #5
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	ebb2 080a 	subs.w	r8, r2, sl
 80048ba:	eb63 090b 	sbc.w	r9, r3, fp
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048d2:	ebb2 0408 	subs.w	r4, r2, r8
 80048d6:	eb63 0509 	sbc.w	r5, r3, r9
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	00eb      	lsls	r3, r5, #3
 80048e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048e8:	00e2      	lsls	r2, r4, #3
 80048ea:	4614      	mov	r4, r2
 80048ec:	461d      	mov	r5, r3
 80048ee:	eb14 030a 	adds.w	r3, r4, sl
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	eb45 030b 	adc.w	r3, r5, fp
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004906:	4629      	mov	r1, r5
 8004908:	028b      	lsls	r3, r1, #10
 800490a:	4621      	mov	r1, r4
 800490c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004910:	4621      	mov	r1, r4
 8004912:	028a      	lsls	r2, r1, #10
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491a:	2200      	movs	r2, #0
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	60fa      	str	r2, [r7, #12]
 8004920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004924:	f7fc f9e0 	bl	8000ce8 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x180>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004940:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800494c:	4b05      	ldr	r3, [pc, #20]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x184>)
 800494e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004954:	4618      	mov	r0, r3
 8004956:	3740      	adds	r7, #64	@ 0x40
 8004958:	46bd      	mov	sp, r7
 800495a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	017d7840 	.word	0x017d7840

0800496c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000160 	.word	0x20000160

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	@ (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	0800f034 	.word	0x0800f034

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	@ (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800f034 	.word	0x0800f034

080049d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	220f      	movs	r2, #15
 80049e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a08:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a16:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <HAL_RCC_GetClockConfig+0x60>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40023c00 	.word	0x40023c00

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a60:	4b69      	ldr	r3, [pc, #420]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a68      	ldr	r2, [pc, #416]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a66:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a6a:	6093      	str	r3, [r2, #8]
 8004a6c:	4b66      	ldr	r3, [pc, #408]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a74:	4964      	ldr	r1, [pc, #400]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d017      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a92:	4b5d      	ldr	r3, [pc, #372]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	4959      	ldr	r1, [pc, #356]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d017      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ace:	4b4e      	ldr	r3, [pc, #312]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	494a      	ldr	r1, [pc, #296]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 808b 	beq.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	4a39      	ldr	r2, [pc, #228]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b28:	4b37      	ldr	r3, [pc, #220]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b34:	4b35      	ldr	r3, [pc, #212]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a34      	ldr	r2, [pc, #208]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b40:	f7fe fa34 	bl	8002fac <HAL_GetTick>
 8004b44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b48:	f7fe fa30 	bl	8002fac <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e357      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b66:	4b28      	ldr	r3, [pc, #160]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d035      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d02e      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b84:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a1d      	ldr	r2, [pc, #116]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ba6:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bac:	4b16      	ldr	r3, [pc, #88]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d114      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fe f9f8 	bl	8002fac <HAL_GetTick>
 8004bbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fe f9f4 	bl	8002fac <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e319      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ee      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bee:	d111      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bfe:	400b      	ands	r3, r1
 8004c00:	4901      	ldr	r1, [pc, #4]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40007000 	.word	0x40007000
 8004c10:	0ffffcff 	.word	0x0ffffcff
 8004c14:	4baa      	ldr	r3, [pc, #680]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4aa9      	ldr	r2, [pc, #676]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c1e:	6093      	str	r3, [r2, #8]
 8004c20:	4ba7      	ldr	r3, [pc, #668]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2c:	49a4      	ldr	r1, [pc, #656]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c44:	4a9e      	ldr	r2, [pc, #632]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c50:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c58:	4999      	ldr	r1, [pc, #612]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c6c:	4b94      	ldr	r3, [pc, #592]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c7a:	4991      	ldr	r1, [pc, #580]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c8e:	4b8c      	ldr	r3, [pc, #560]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c9c:	4988      	ldr	r1, [pc, #544]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cb0:	4b83      	ldr	r3, [pc, #524]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cbe:	4980      	ldr	r1, [pc, #512]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce0:	4977      	ldr	r1, [pc, #476]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cf4:	4b72      	ldr	r3, [pc, #456]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	496f      	ldr	r1, [pc, #444]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d16:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1c:	f023 020c 	bic.w	r2, r3, #12
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d24:	4966      	ldr	r1, [pc, #408]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d38:	4b61      	ldr	r3, [pc, #388]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	495e      	ldr	r1, [pc, #376]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d5a:	4b59      	ldr	r3, [pc, #356]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d60:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d68:	4955      	ldr	r1, [pc, #340]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d7c:	4b50      	ldr	r3, [pc, #320]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8a:	494d      	ldr	r1, [pc, #308]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d9e:	4b48      	ldr	r3, [pc, #288]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dac:	4944      	ldr	r1, [pc, #272]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	493c      	ldr	r1, [pc, #240]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004de2:	4b37      	ldr	r3, [pc, #220]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df0:	4933      	ldr	r1, [pc, #204]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e04:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e12:	492b      	ldr	r1, [pc, #172]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d011      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e26:	4b26      	ldr	r3, [pc, #152]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e34:	4922      	ldr	r1, [pc, #136]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e44:	d101      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e66:	4b16      	ldr	r3, [pc, #88]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e74:	4912      	ldr	r1, [pc, #72]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e88:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e98:	4909      	ldr	r1, [pc, #36]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d006      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80d9 	beq.w	8005066 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eb4:	4b02      	ldr	r3, [pc, #8]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a01      	ldr	r2, [pc, #4]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ebe:	e001      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec6:	f7fe f871 	bl	8002fac <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ece:	f7fe f86d 	bl	8002fac <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b64      	cmp	r3, #100	@ 0x64
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e194      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d021      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11d      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f00:	4b64      	ldr	r3, [pc, #400]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f0e:	4b61      	ldr	r3, [pc, #388]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	019a      	lsls	r2, r3, #6
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	431a      	orrs	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	071b      	lsls	r3, r3, #28
 8004f34:	4957      	ldr	r1, [pc, #348]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d02e      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f66:	d129      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f68:	4b4a      	ldr	r3, [pc, #296]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6e:	0c1b      	lsrs	r3, r3, #16
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f76:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f7c:	0f1b      	lsrs	r3, r3, #28
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	019a      	lsls	r2, r3, #6
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	041b      	lsls	r3, r3, #16
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	431a      	orrs	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	071b      	lsls	r3, r3, #28
 8004f9c:	493d      	ldr	r1, [pc, #244]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004faa:	f023 021f 	bic.w	r2, r3, #31
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	4937      	ldr	r1, [pc, #220]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01d      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fc8:	4b32      	ldr	r3, [pc, #200]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fce:	0e1b      	lsrs	r3, r3, #24
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fdc:	0f1b      	lsrs	r3, r3, #28
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	019a      	lsls	r2, r3, #6
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	071b      	lsls	r3, r3, #28
 8004ffc:	4925      	ldr	r1, [pc, #148]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	019a      	lsls	r2, r3, #6
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	061b      	lsls	r3, r3, #24
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	071b      	lsls	r3, r3, #28
 800502c:	4919      	ldr	r1, [pc, #100]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005034:	4b17      	ldr	r3, [pc, #92]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800503e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fd ffb4 	bl	8002fac <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005048:	f7fd ffb0 	bl	8002fac <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0d7      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800505a:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b01      	cmp	r3, #1
 800506a:	f040 80cd 	bne.w	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800506e:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a08      	ldr	r2, [pc, #32]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507a:	f7fd ff97 	bl	8002fac <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005080:	e00a      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005082:	f7fd ff93 	bl	8002fac <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b64      	cmp	r3, #100	@ 0x64
 800508e:	d903      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0ba      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005094:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005098:	4b5e      	ldr	r3, [pc, #376]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a4:	d0ed      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d02e      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d12a      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050ce:	4b51      	ldr	r3, [pc, #324]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	0f1b      	lsrs	r3, r3, #28
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	071b      	lsls	r3, r3, #28
 8005102:	4944      	ldr	r1, [pc, #272]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800510a:	4b42      	ldr	r3, [pc, #264]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005110:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	493d      	ldr	r1, [pc, #244]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005138:	d11d      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800513a:	4b36      	ldr	r3, [pc, #216]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005140:	0e1b      	lsrs	r3, r3, #24
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005148:	4b32      	ldr	r3, [pc, #200]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514e:	0f1b      	lsrs	r3, r3, #28
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	019a      	lsls	r2, r3, #6
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	431a      	orrs	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	071b      	lsls	r3, r3, #28
 800516e:	4929      	ldr	r1, [pc, #164]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d028      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005182:	4b24      	ldr	r3, [pc, #144]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	0e1b      	lsrs	r3, r3, #24
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005190:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	019a      	lsls	r2, r3, #6
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	431a      	orrs	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	071b      	lsls	r3, r3, #28
 80051b6:	4917      	ldr	r1, [pc, #92]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051cc:	4911      	ldr	r1, [pc, #68]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e0:	f7fd fee4 	bl	8002fac <HAL_GetTick>
 80051e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051e8:	f7fd fee0 	bl	8002fac <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e007      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005206:	d1ef      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800

08005218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e049      	b.n	80052be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f841 	bl	80052c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f000 fa00 	bl	800565c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e054      	b.n	800539e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a26      	ldr	r2, [pc, #152]	@ (80053ac <HAL_TIM_Base_Start_IT+0xd0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	d01d      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a22      	ldr	r2, [pc, #136]	@ (80053b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a21      	ldr	r2, [pc, #132]	@ (80053b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1f      	ldr	r2, [pc, #124]	@ (80053b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1e      	ldr	r2, [pc, #120]	@ (80053bc <HAL_TIM_Base_Start_IT+0xe0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1c      	ldr	r2, [pc, #112]	@ (80053c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1b      	ldr	r2, [pc, #108]	@ (80053c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d115      	bne.n	8005388 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <HAL_TIM_Base_Start_IT+0xec>)
 8005364:	4013      	ands	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d015      	beq.n	800539a <HAL_TIM_Base_Start_IT+0xbe>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005374:	d011      	beq.n	800539a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005386:	e008      	b.n	800539a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e000      	b.n	800539c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40000800 	.word	0x40000800
 80053b8:	40000c00 	.word	0x40000c00
 80053bc:	40010400 	.word	0x40010400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40001800 	.word	0x40001800
 80053c8:	00010007 	.word	0x00010007

080053cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0202 	mvn.w	r2, #2
 80053f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f905 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8f7 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f908 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b04      	cmp	r3, #4
 8005434:	d122      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d11b      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0204 	mvn.w	r2, #4
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8db 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8cd 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8de 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b08      	cmp	r3, #8
 8005488:	d122      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d11b      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0208 	mvn.w	r2, #8
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f8b1 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8a3 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8b4 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d122      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d11b      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0210 	mvn.w	r2, #16
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2208      	movs	r2, #8
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f887 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f879 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f88a 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b01      	cmp	r3, #1
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0201 	mvn.w	r2, #1
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fd fa1e 	bl	800298c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d10e      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d107      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f91a 	bl	80057b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800558a:	d10e      	bne.n	80055aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	2b80      	cmp	r3, #128	@ 0x80
 8005598:	d107      	bne.n	80055aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f90d 	bl	80057c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b4:	2b40      	cmp	r3, #64	@ 0x40
 80055b6:	d10e      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f838 	bl	8005646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d10e      	bne.n	8005602 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d107      	bne.n	8005602 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0220 	mvn.w	r2, #32
 80055fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8cd 	bl	800579c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a40      	ldr	r2, [pc, #256]	@ (8005770 <TIM_Base_SetConfig+0x114>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3d      	ldr	r2, [pc, #244]	@ (8005774 <TIM_Base_SetConfig+0x118>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3c      	ldr	r2, [pc, #240]	@ (8005778 <TIM_Base_SetConfig+0x11c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3b      	ldr	r2, [pc, #236]	@ (800577c <TIM_Base_SetConfig+0x120>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3a      	ldr	r2, [pc, #232]	@ (8005780 <TIM_Base_SetConfig+0x124>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005770 <TIM_Base_SetConfig+0x114>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056bc:	d027      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005774 <TIM_Base_SetConfig+0x118>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d023      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005778 <TIM_Base_SetConfig+0x11c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01f      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2a      	ldr	r2, [pc, #168]	@ (800577c <TIM_Base_SetConfig+0x120>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a29      	ldr	r2, [pc, #164]	@ (8005780 <TIM_Base_SetConfig+0x124>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d017      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a28      	ldr	r2, [pc, #160]	@ (8005784 <TIM_Base_SetConfig+0x128>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a26      	ldr	r2, [pc, #152]	@ (800578c <TIM_Base_SetConfig+0x130>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a25      	ldr	r2, [pc, #148]	@ (8005790 <TIM_Base_SetConfig+0x134>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a24      	ldr	r2, [pc, #144]	@ (8005794 <TIM_Base_SetConfig+0x138>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a23      	ldr	r2, [pc, #140]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0a      	ldr	r2, [pc, #40]	@ (8005770 <TIM_Base_SetConfig+0x114>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0xf8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0c      	ldr	r2, [pc, #48]	@ (8005780 <TIM_Base_SetConfig+0x124>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d103      	bne.n	800575c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	615a      	str	r2, [r3, #20]
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40010400 	.word	0x40010400
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800
 8005790:	40001800 	.word	0x40001800
 8005794:	40001c00 	.word	0x40001c00
 8005798:	40002000 	.word	0x40002000

0800579c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e040      	b.n	800586c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fd f980 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	@ 0x24
 8005804:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fbe6 	bl	8005fe8 <UART_SetConfig>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e022      	b.n	800586c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fe3e 	bl	80064b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fec5 	bl	80065f4 <UART_CheckIdleState>
 800586a:	4603      	mov	r3, r0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	@ 0x28
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005888:	2b20      	cmp	r3, #32
 800588a:	d171      	bne.n	8005970 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_UART_Transmit+0x24>
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e06a      	b.n	8005972 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2221      	movs	r2, #33	@ 0x21
 80058a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058aa:	f7fd fb7f 	bl	8002fac <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c8:	d108      	bne.n	80058dc <HAL_UART_Transmit+0x68>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	e003      	b.n	80058e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058e4:	e02c      	b.n	8005940 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2180      	movs	r1, #128	@ 0x80
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 feb6 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e038      	b.n	8005972 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005914:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3302      	adds	r3, #2
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	e007      	b.n	800592e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	3301      	adds	r3, #1
 800592c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1cc      	bne.n	80058e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2200      	movs	r2, #0
 8005954:	2140      	movs	r1, #64	@ 0x40
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fe83 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e005      	b.n	8005972 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2220      	movs	r2, #32
 800596a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b08a      	sub	sp, #40	@ 0x28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598e:	2b20      	cmp	r3, #32
 8005990:	d132      	bne.n	80059f8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_UART_Receive_IT+0x24>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e02b      	b.n	80059fa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d018      	beq.n	80059e8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	613b      	str	r3, [r7, #16]
   return(result);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	6a3a      	ldr	r2, [r7, #32]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	461a      	mov	r2, r3
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fefe 	bl	80067f0 <UART_Start_Receive_IT>
 80059f4:	4603      	mov	r3, r0
 80059f6:	e000      	b.n	80059fa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3728      	adds	r7, #40	@ 0x28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b0ba      	sub	sp, #232	@ 0xe8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a32:	4013      	ands	r3, r2
 8005a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d115      	bne.n	8005a6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00f      	beq.n	8005a6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8297 	beq.w	8005f90 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
      }
      return;
 8005a6a:	e291      	b.n	8005f90 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8117 	beq.w	8005ca4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a86:	4b85      	ldr	r3, [pc, #532]	@ (8005c9c <HAL_UART_IRQHandler+0x298>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 810a 	beq.w	8005ca4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d011      	beq.n	8005ac0 <HAL_UART_IRQHandler+0xbc>
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2201      	movs	r2, #1
 8005aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d011      	beq.n	8005af0 <HAL_UART_IRQHandler+0xec>
 8005acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2202      	movs	r2, #2
 8005ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d011      	beq.n	8005b20 <HAL_UART_IRQHandler+0x11c>
 8005afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b16:	f043 0202 	orr.w	r2, r3, #2
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d017      	beq.n	8005b5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b52:	f043 0208 	orr.w	r2, r3, #8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d012      	beq.n	8005b8e <HAL_UART_IRQHandler+0x18a>
 8005b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b84:	f043 0220 	orr.w	r2, r3, #32
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 81fd 	beq.w	8005f94 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd6:	2b40      	cmp	r3, #64	@ 0x40
 8005bd8:	d005      	beq.n	8005be6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d04f      	beq.n	8005c86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fec8 	bl	800697c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b40      	cmp	r3, #64	@ 0x40
 8005bf8:	d141      	bne.n	8005c7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1d9      	bne.n	8005bfa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d013      	beq.n	8005c76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c52:	4a13      	ldr	r2, [pc, #76]	@ (8005ca0 <HAL_UART_IRQHandler+0x29c>)
 8005c54:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fd ffe8 	bl	8003c30 <HAL_DMA_Abort_IT>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d017      	beq.n	8005c96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c70:	4610      	mov	r0, r2
 8005c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	e00f      	b.n	8005c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9a0 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	e00b      	b.n	8005c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f99c 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c84:	e007      	b.n	8005c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f998 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c94:	e17e      	b.n	8005f94 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c96:	bf00      	nop
    return;
 8005c98:	e17c      	b.n	8005f94 <HAL_UART_IRQHandler+0x590>
 8005c9a:	bf00      	nop
 8005c9c:	04000120 	.word	0x04000120
 8005ca0:	08006a45 	.word	0x08006a45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	f040 814c 	bne.w	8005f46 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8145 	beq.w	8005f46 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 813e 	beq.w	8005f46 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2210      	movs	r2, #16
 8005cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cdc:	2b40      	cmp	r3, #64	@ 0x40
 8005cde:	f040 80b6 	bne.w	8005e4e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8150 	beq.w	8005f98 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d02:	429a      	cmp	r2, r3
 8005d04:	f080 8148 	bcs.w	8005f98 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1c:	f000 8086 	beq.w	8005e2c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1da      	bne.n	8005d20 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e1      	bne.n	8005d6a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e3      	bne.n	8005da6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dfc:	f023 0310 	bic.w	r3, r3, #16
 8005e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e4      	bne.n	8005dec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fd fe92 	bl	8003b50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8c2 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e4c:	e0a4      	b.n	8005f98 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8096 	beq.w	8005f9c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8091 	beq.w	8005f9c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e4      	bne.n	8005e7a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ed4:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e3      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	69b9      	ldr	r1, [r7, #24]
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e4      	bne.n	8005efc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f846 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f44:	e02a      	b.n	8005f9c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00e      	beq.n	8005f70 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01c      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
    }
    return;
 8005f6e:	e017      	b.n	8005fa0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d012      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x59e>
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00c      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fd71 	bl	8006a70 <UART_EndTransmit_IT>
    return;
 8005f8e:	e008      	b.n	8005fa2 <HAL_UART_IRQHandler+0x59e>
      return;
 8005f90:	bf00      	nop
 8005f92:	e006      	b.n	8005fa2 <HAL_UART_IRQHandler+0x59e>
    return;
 8005f94:	bf00      	nop
 8005f96:	e004      	b.n	8005fa2 <HAL_UART_IRQHandler+0x59e>
      return;
 8005f98:	bf00      	nop
 8005f9a:	e002      	b.n	8005fa2 <HAL_UART_IRQHandler+0x59e>
      return;
 8005f9c:	bf00      	nop
 8005f9e:	e000      	b.n	8005fa2 <HAL_UART_IRQHandler+0x59e>
    return;
 8005fa0:	bf00      	nop
  }

}
 8005fa2:	37e8      	adds	r7, #232	@ 0xe8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4ba6      	ldr	r3, [pc, #664]	@ (80062ac <UART_SetConfig+0x2c4>)
 8006014:	4013      	ands	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	6979      	ldr	r1, [r7, #20]
 800601c:	430b      	orrs	r3, r1
 800601e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a94      	ldr	r2, [pc, #592]	@ (80062b0 <UART_SetConfig+0x2c8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d120      	bne.n	80060a6 <UART_SetConfig+0xbe>
 8006064:	4b93      	ldr	r3, [pc, #588]	@ (80062b4 <UART_SetConfig+0x2cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b03      	cmp	r3, #3
 8006070:	d816      	bhi.n	80060a0 <UART_SetConfig+0xb8>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <UART_SetConfig+0x90>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006089 	.word	0x08006089
 800607c:	08006095 	.word	0x08006095
 8006080:	0800608f 	.word	0x0800608f
 8006084:	0800609b 	.word	0x0800609b
 8006088:	2301      	movs	r3, #1
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e150      	b.n	8006330 <UART_SetConfig+0x348>
 800608e:	2302      	movs	r3, #2
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e14d      	b.n	8006330 <UART_SetConfig+0x348>
 8006094:	2304      	movs	r3, #4
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e14a      	b.n	8006330 <UART_SetConfig+0x348>
 800609a:	2308      	movs	r3, #8
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e147      	b.n	8006330 <UART_SetConfig+0x348>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e144      	b.n	8006330 <UART_SetConfig+0x348>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a83      	ldr	r2, [pc, #524]	@ (80062b8 <UART_SetConfig+0x2d0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d132      	bne.n	8006116 <UART_SetConfig+0x12e>
 80060b0:	4b80      	ldr	r3, [pc, #512]	@ (80062b4 <UART_SetConfig+0x2cc>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d828      	bhi.n	8006110 <UART_SetConfig+0x128>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <UART_SetConfig+0xdc>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060f9 	.word	0x080060f9
 80060c8:	08006111 	.word	0x08006111
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006105 	.word	0x08006105
 80060d8:	08006111 	.word	0x08006111
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006111 	.word	0x08006111
 80060e4:	080060ff 	.word	0x080060ff
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006111 	.word	0x08006111
 80060f4:	0800610b 	.word	0x0800610b
 80060f8:	2300      	movs	r3, #0
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e118      	b.n	8006330 <UART_SetConfig+0x348>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e115      	b.n	8006330 <UART_SetConfig+0x348>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e112      	b.n	8006330 <UART_SetConfig+0x348>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e10f      	b.n	8006330 <UART_SetConfig+0x348>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e10c      	b.n	8006330 <UART_SetConfig+0x348>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a68      	ldr	r2, [pc, #416]	@ (80062bc <UART_SetConfig+0x2d4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d120      	bne.n	8006162 <UART_SetConfig+0x17a>
 8006120:	4b64      	ldr	r3, [pc, #400]	@ (80062b4 <UART_SetConfig+0x2cc>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006126:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800612a:	2b30      	cmp	r3, #48	@ 0x30
 800612c:	d013      	beq.n	8006156 <UART_SetConfig+0x16e>
 800612e:	2b30      	cmp	r3, #48	@ 0x30
 8006130:	d814      	bhi.n	800615c <UART_SetConfig+0x174>
 8006132:	2b20      	cmp	r3, #32
 8006134:	d009      	beq.n	800614a <UART_SetConfig+0x162>
 8006136:	2b20      	cmp	r3, #32
 8006138:	d810      	bhi.n	800615c <UART_SetConfig+0x174>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <UART_SetConfig+0x15c>
 800613e:	2b10      	cmp	r3, #16
 8006140:	d006      	beq.n	8006150 <UART_SetConfig+0x168>
 8006142:	e00b      	b.n	800615c <UART_SetConfig+0x174>
 8006144:	2300      	movs	r3, #0
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e0f2      	b.n	8006330 <UART_SetConfig+0x348>
 800614a:	2302      	movs	r3, #2
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e0ef      	b.n	8006330 <UART_SetConfig+0x348>
 8006150:	2304      	movs	r3, #4
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e0ec      	b.n	8006330 <UART_SetConfig+0x348>
 8006156:	2308      	movs	r3, #8
 8006158:	77fb      	strb	r3, [r7, #31]
 800615a:	e0e9      	b.n	8006330 <UART_SetConfig+0x348>
 800615c:	2310      	movs	r3, #16
 800615e:	77fb      	strb	r3, [r7, #31]
 8006160:	e0e6      	b.n	8006330 <UART_SetConfig+0x348>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a56      	ldr	r2, [pc, #344]	@ (80062c0 <UART_SetConfig+0x2d8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d120      	bne.n	80061ae <UART_SetConfig+0x1c6>
 800616c:	4b51      	ldr	r3, [pc, #324]	@ (80062b4 <UART_SetConfig+0x2cc>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006172:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006176:	2bc0      	cmp	r3, #192	@ 0xc0
 8006178:	d013      	beq.n	80061a2 <UART_SetConfig+0x1ba>
 800617a:	2bc0      	cmp	r3, #192	@ 0xc0
 800617c:	d814      	bhi.n	80061a8 <UART_SetConfig+0x1c0>
 800617e:	2b80      	cmp	r3, #128	@ 0x80
 8006180:	d009      	beq.n	8006196 <UART_SetConfig+0x1ae>
 8006182:	2b80      	cmp	r3, #128	@ 0x80
 8006184:	d810      	bhi.n	80061a8 <UART_SetConfig+0x1c0>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <UART_SetConfig+0x1a8>
 800618a:	2b40      	cmp	r3, #64	@ 0x40
 800618c:	d006      	beq.n	800619c <UART_SetConfig+0x1b4>
 800618e:	e00b      	b.n	80061a8 <UART_SetConfig+0x1c0>
 8006190:	2300      	movs	r3, #0
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e0cc      	b.n	8006330 <UART_SetConfig+0x348>
 8006196:	2302      	movs	r3, #2
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e0c9      	b.n	8006330 <UART_SetConfig+0x348>
 800619c:	2304      	movs	r3, #4
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e0c6      	b.n	8006330 <UART_SetConfig+0x348>
 80061a2:	2308      	movs	r3, #8
 80061a4:	77fb      	strb	r3, [r7, #31]
 80061a6:	e0c3      	b.n	8006330 <UART_SetConfig+0x348>
 80061a8:	2310      	movs	r3, #16
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e0c0      	b.n	8006330 <UART_SetConfig+0x348>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a44      	ldr	r2, [pc, #272]	@ (80062c4 <UART_SetConfig+0x2dc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d125      	bne.n	8006204 <UART_SetConfig+0x21c>
 80061b8:	4b3e      	ldr	r3, [pc, #248]	@ (80062b4 <UART_SetConfig+0x2cc>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061c6:	d017      	beq.n	80061f8 <UART_SetConfig+0x210>
 80061c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061cc:	d817      	bhi.n	80061fe <UART_SetConfig+0x216>
 80061ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061d2:	d00b      	beq.n	80061ec <UART_SetConfig+0x204>
 80061d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061d8:	d811      	bhi.n	80061fe <UART_SetConfig+0x216>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <UART_SetConfig+0x1fe>
 80061de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e2:	d006      	beq.n	80061f2 <UART_SetConfig+0x20a>
 80061e4:	e00b      	b.n	80061fe <UART_SetConfig+0x216>
 80061e6:	2300      	movs	r3, #0
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e0a1      	b.n	8006330 <UART_SetConfig+0x348>
 80061ec:	2302      	movs	r3, #2
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e09e      	b.n	8006330 <UART_SetConfig+0x348>
 80061f2:	2304      	movs	r3, #4
 80061f4:	77fb      	strb	r3, [r7, #31]
 80061f6:	e09b      	b.n	8006330 <UART_SetConfig+0x348>
 80061f8:	2308      	movs	r3, #8
 80061fa:	77fb      	strb	r3, [r7, #31]
 80061fc:	e098      	b.n	8006330 <UART_SetConfig+0x348>
 80061fe:	2310      	movs	r3, #16
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e095      	b.n	8006330 <UART_SetConfig+0x348>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2f      	ldr	r2, [pc, #188]	@ (80062c8 <UART_SetConfig+0x2e0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d125      	bne.n	800625a <UART_SetConfig+0x272>
 800620e:	4b29      	ldr	r3, [pc, #164]	@ (80062b4 <UART_SetConfig+0x2cc>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800621c:	d017      	beq.n	800624e <UART_SetConfig+0x266>
 800621e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006222:	d817      	bhi.n	8006254 <UART_SetConfig+0x26c>
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006228:	d00b      	beq.n	8006242 <UART_SetConfig+0x25a>
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800622e:	d811      	bhi.n	8006254 <UART_SetConfig+0x26c>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <UART_SetConfig+0x254>
 8006234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006238:	d006      	beq.n	8006248 <UART_SetConfig+0x260>
 800623a:	e00b      	b.n	8006254 <UART_SetConfig+0x26c>
 800623c:	2301      	movs	r3, #1
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e076      	b.n	8006330 <UART_SetConfig+0x348>
 8006242:	2302      	movs	r3, #2
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e073      	b.n	8006330 <UART_SetConfig+0x348>
 8006248:	2304      	movs	r3, #4
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e070      	b.n	8006330 <UART_SetConfig+0x348>
 800624e:	2308      	movs	r3, #8
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e06d      	b.n	8006330 <UART_SetConfig+0x348>
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e06a      	b.n	8006330 <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1b      	ldr	r2, [pc, #108]	@ (80062cc <UART_SetConfig+0x2e4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d138      	bne.n	80062d6 <UART_SetConfig+0x2ee>
 8006264:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800626e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006272:	d017      	beq.n	80062a4 <UART_SetConfig+0x2bc>
 8006274:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006278:	d82a      	bhi.n	80062d0 <UART_SetConfig+0x2e8>
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627e:	d00b      	beq.n	8006298 <UART_SetConfig+0x2b0>
 8006280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006284:	d824      	bhi.n	80062d0 <UART_SetConfig+0x2e8>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <UART_SetConfig+0x2aa>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628e:	d006      	beq.n	800629e <UART_SetConfig+0x2b6>
 8006290:	e01e      	b.n	80062d0 <UART_SetConfig+0x2e8>
 8006292:	2300      	movs	r3, #0
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e04b      	b.n	8006330 <UART_SetConfig+0x348>
 8006298:	2302      	movs	r3, #2
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e048      	b.n	8006330 <UART_SetConfig+0x348>
 800629e:	2304      	movs	r3, #4
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e045      	b.n	8006330 <UART_SetConfig+0x348>
 80062a4:	2308      	movs	r3, #8
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e042      	b.n	8006330 <UART_SetConfig+0x348>
 80062aa:	bf00      	nop
 80062ac:	efff69f3 	.word	0xefff69f3
 80062b0:	40011000 	.word	0x40011000
 80062b4:	40023800 	.word	0x40023800
 80062b8:	40004400 	.word	0x40004400
 80062bc:	40004800 	.word	0x40004800
 80062c0:	40004c00 	.word	0x40004c00
 80062c4:	40005000 	.word	0x40005000
 80062c8:	40011400 	.word	0x40011400
 80062cc:	40007800 	.word	0x40007800
 80062d0:	2310      	movs	r3, #16
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e02c      	b.n	8006330 <UART_SetConfig+0x348>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a72      	ldr	r2, [pc, #456]	@ (80064a4 <UART_SetConfig+0x4bc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d125      	bne.n	800632c <UART_SetConfig+0x344>
 80062e0:	4b71      	ldr	r3, [pc, #452]	@ (80064a8 <UART_SetConfig+0x4c0>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80062ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062ee:	d017      	beq.n	8006320 <UART_SetConfig+0x338>
 80062f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062f4:	d817      	bhi.n	8006326 <UART_SetConfig+0x33e>
 80062f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fa:	d00b      	beq.n	8006314 <UART_SetConfig+0x32c>
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006300:	d811      	bhi.n	8006326 <UART_SetConfig+0x33e>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <UART_SetConfig+0x326>
 8006306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800630a:	d006      	beq.n	800631a <UART_SetConfig+0x332>
 800630c:	e00b      	b.n	8006326 <UART_SetConfig+0x33e>
 800630e:	2300      	movs	r3, #0
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e00d      	b.n	8006330 <UART_SetConfig+0x348>
 8006314:	2302      	movs	r3, #2
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e00a      	b.n	8006330 <UART_SetConfig+0x348>
 800631a:	2304      	movs	r3, #4
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e007      	b.n	8006330 <UART_SetConfig+0x348>
 8006320:	2308      	movs	r3, #8
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e004      	b.n	8006330 <UART_SetConfig+0x348>
 8006326:	2310      	movs	r3, #16
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e001      	b.n	8006330 <UART_SetConfig+0x348>
 800632c:	2310      	movs	r3, #16
 800632e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006338:	d15b      	bne.n	80063f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800633a:	7ffb      	ldrb	r3, [r7, #31]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d828      	bhi.n	8006392 <UART_SetConfig+0x3aa>
 8006340:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <UART_SetConfig+0x360>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800636d 	.word	0x0800636d
 800634c:	08006375 	.word	0x08006375
 8006350:	0800637d 	.word	0x0800637d
 8006354:	08006393 	.word	0x08006393
 8006358:	08006383 	.word	0x08006383
 800635c:	08006393 	.word	0x08006393
 8006360:	08006393 	.word	0x08006393
 8006364:	08006393 	.word	0x08006393
 8006368:	0800638b 	.word	0x0800638b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fe fb0a 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006370:	61b8      	str	r0, [r7, #24]
        break;
 8006372:	e013      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006374:	f7fe fb1a 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8006378:	61b8      	str	r0, [r7, #24]
        break;
 800637a:	e00f      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800637c:	4b4b      	ldr	r3, [pc, #300]	@ (80064ac <UART_SetConfig+0x4c4>)
 800637e:	61bb      	str	r3, [r7, #24]
        break;
 8006380:	e00c      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006382:	f7fe fa2d 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 8006386:	61b8      	str	r0, [r7, #24]
        break;
 8006388:	e008      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638e:	61bb      	str	r3, [r7, #24]
        break;
 8006390:	e004      	b.n	800639c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	77bb      	strb	r3, [r7, #30]
        break;
 800639a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d074      	beq.n	800648c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	005a      	lsls	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	441a      	add	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d916      	bls.n	80063ec <UART_SetConfig+0x404>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c4:	d212      	bcs.n	80063ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f023 030f 	bic.w	r3, r3, #15
 80063ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	b29a      	uxth	r2, r3
 80063dc:	89fb      	ldrh	r3, [r7, #14]
 80063de:	4313      	orrs	r3, r2
 80063e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	89fa      	ldrh	r2, [r7, #14]
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	e04f      	b.n	800648c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	77bb      	strb	r3, [r7, #30]
 80063f0:	e04c      	b.n	800648c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063f2:	7ffb      	ldrb	r3, [r7, #31]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d828      	bhi.n	800644a <UART_SetConfig+0x462>
 80063f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <UART_SetConfig+0x418>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006425 	.word	0x08006425
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006435 	.word	0x08006435
 800640c:	0800644b 	.word	0x0800644b
 8006410:	0800643b 	.word	0x0800643b
 8006414:	0800644b 	.word	0x0800644b
 8006418:	0800644b 	.word	0x0800644b
 800641c:	0800644b 	.word	0x0800644b
 8006420:	08006443 	.word	0x08006443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006424:	f7fe faae 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006428:	61b8      	str	r0, [r7, #24]
        break;
 800642a:	e013      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642c:	f7fe fabe 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8006430:	61b8      	str	r0, [r7, #24]
        break;
 8006432:	e00f      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006434:	4b1d      	ldr	r3, [pc, #116]	@ (80064ac <UART_SetConfig+0x4c4>)
 8006436:	61bb      	str	r3, [r7, #24]
        break;
 8006438:	e00c      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643a:	f7fe f9d1 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 800643e:	61b8      	str	r0, [r7, #24]
        break;
 8006440:	e008      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006446:	61bb      	str	r3, [r7, #24]
        break;
 8006448:	e004      	b.n	8006454 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	77bb      	strb	r3, [r7, #30]
        break;
 8006452:	bf00      	nop
    }

    if (pclk != 0U)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d018      	beq.n	800648c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	085a      	lsrs	r2, r3, #1
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	441a      	add	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b0f      	cmp	r3, #15
 8006472:	d909      	bls.n	8006488 <UART_SetConfig+0x4a0>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647a:	d205      	bcs.n	8006488 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60da      	str	r2, [r3, #12]
 8006486:	e001      	b.n	800648c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006498:	7fbb      	ldrb	r3, [r7, #30]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40007c00 	.word	0x40007c00
 80064a8:	40023800 	.word	0x40023800
 80064ac:	00f42400 	.word	0x00f42400

080064b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ae:	d10a      	bne.n	80065c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006604:	f7fc fcd2 	bl	8002fac <HAL_GetTick>
 8006608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d10e      	bne.n	8006636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f81b 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e011      	b.n	800665a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b09c      	sub	sp, #112	@ 0x70
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	e0a7      	b.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	f000 80a3 	beq.w	80067c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fc fc95 	bl	8002fac <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <UART_WaitOnFlagUntilTimeout+0x32>
 800668e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006690:	2b00      	cmp	r3, #0
 8006692:	d13f      	bne.n	8006714 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80066a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066b4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80066b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80066c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066e6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80066e8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80066f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e5      	bne.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e068      	b.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	2b00      	cmp	r3, #0
 8006720:	d050      	beq.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800672c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006730:	d148      	bne.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800673a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006750:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800675a:	637b      	str	r3, [r7, #52]	@ 0x34
 800675c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e6      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	613b      	str	r3, [r7, #16]
   return(result);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800678e:	623a      	str	r2, [r7, #32]
 8006790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	69f9      	ldr	r1, [r7, #28]
 8006794:	6a3a      	ldr	r2, [r7, #32]
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	61bb      	str	r3, [r7, #24]
   return(result);
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e5      	bne.n	800676e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2220      	movs	r2, #32
 80067a6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e010      	b.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69da      	ldr	r2, [r3, #28]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	4013      	ands	r3, r2
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	bf0c      	ite	eq
 80067d4:	2301      	moveq	r3, #1
 80067d6:	2300      	movne	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	429a      	cmp	r2, r3
 80067e0:	f43f af48 	beq.w	8006674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3770      	adds	r7, #112	@ 0x70
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b097      	sub	sp, #92	@ 0x5c
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	88fa      	ldrh	r2, [r7, #6]
 8006808:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006822:	d10e      	bne.n	8006842 <UART_Start_Receive_IT+0x52>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <UART_Start_Receive_IT+0x48>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006832:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006836:	e02d      	b.n	8006894 <UART_Start_Receive_IT+0xa4>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	22ff      	movs	r2, #255	@ 0xff
 800683c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006840:	e028      	b.n	8006894 <UART_Start_Receive_IT+0xa4>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <UART_Start_Receive_IT+0x76>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <UART_Start_Receive_IT+0x6c>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22ff      	movs	r2, #255	@ 0xff
 8006856:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800685a:	e01b      	b.n	8006894 <UART_Start_Receive_IT+0xa4>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	227f      	movs	r2, #127	@ 0x7f
 8006860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006864:	e016      	b.n	8006894 <UART_Start_Receive_IT+0xa4>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800686e:	d10d      	bne.n	800688c <UART_Start_Receive_IT+0x9c>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <UART_Start_Receive_IT+0x92>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	227f      	movs	r2, #127	@ 0x7f
 800687c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006880:	e008      	b.n	8006894 <UART_Start_Receive_IT+0xa4>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	223f      	movs	r2, #63	@ 0x3f
 8006886:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800688a:	e003      	b.n	8006894 <UART_Start_Receive_IT+0xa4>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2222      	movs	r2, #34	@ 0x22
 80068a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3308      	adds	r3, #8
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	f043 0301 	orr.w	r3, r3, #1
 80068ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80068c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80068d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e0:	d107      	bne.n	80068f2 <UART_Start_Receive_IT+0x102>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a21      	ldr	r2, [pc, #132]	@ (8006974 <UART_Start_Receive_IT+0x184>)
 80068ee:	669a      	str	r2, [r3, #104]	@ 0x68
 80068f0:	e002      	b.n	80068f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a20      	ldr	r2, [pc, #128]	@ (8006978 <UART_Start_Receive_IT+0x188>)
 80068f6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d019      	beq.n	8006934 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006920:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800692c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e6      	bne.n	8006900 <UART_Start_Receive_IT+0x110>
 8006932:	e018      	b.n	8006966 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f043 0320 	orr.w	r3, r3, #32
 8006948:	653b      	str	r3, [r7, #80]	@ 0x50
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	69f9      	ldr	r1, [r7, #28]
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e6      	bne.n	8006934 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	375c      	adds	r7, #92	@ 0x5c
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	08006c2b 	.word	0x08006c2b
 8006978:	08006ac5 	.word	0x08006ac5

0800697c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b095      	sub	sp, #84	@ 0x54
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80069a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e6      	bne.n	8006984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3308      	adds	r3, #8
 80069bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e5      	bne.n	80069b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d118      	bne.n	8006a24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f023 0310 	bic.w	r3, r3, #16
 8006a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6979      	ldr	r1, [r7, #20]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e6      	bne.n	80069f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a38:	bf00      	nop
 8006a3a:	3754      	adds	r7, #84	@ 0x54
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff faaa 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6979      	ldr	r1, [r7, #20]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e6      	bne.n	8006a78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fa76 	bl	8005fa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006abc:	bf00      	nop
 8006abe:	3720      	adds	r7, #32
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b096      	sub	sp, #88	@ 0x58
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ad2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006adc:	2b22      	cmp	r3, #34	@ 0x22
 8006ade:	f040 8098 	bne.w	8006c12 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006aec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006af0:	b2d9      	uxtb	r1, r3
 8006af2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afc:	400a      	ands	r2, r1
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d17b      	bne.n	8006c22 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e6      	bne.n	8006b2a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e5      	bne.n	8006b5c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d12e      	bne.n	8006c0a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0310 	bic.w	r3, r3, #16
 8006bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e6      	bne.n	8006bb2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d103      	bne.n	8006bfa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f9e4 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c08:	e00b      	b.n	8006c22 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fa fe48 	bl	80018a0 <HAL_UART_RxCpltCallback>
}
 8006c10:	e007      	b.n	8006c22 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0208 	orr.w	r2, r2, #8
 8006c20:	619a      	str	r2, [r3, #24]
}
 8006c22:	bf00      	nop
 8006c24:	3758      	adds	r7, #88	@ 0x58
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b096      	sub	sp, #88	@ 0x58
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c42:	2b22      	cmp	r3, #34	@ 0x22
 8006c44:	f040 8098 	bne.w	8006d78 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c56:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c58:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006c5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006c60:	4013      	ands	r3, r2
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c66:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6c:	1c9a      	adds	r2, r3, #2
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d17b      	bne.n	8006d88 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e6      	bne.n	8006c90 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ce2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e5      	bne.n	8006cc2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d12e      	bne.n	8006d70 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f023 0310 	bic.w	r3, r3, #16
 8006d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6979      	ldr	r1, [r7, #20]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	613b      	str	r3, [r7, #16]
   return(result);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e6      	bne.n	8006d18 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f003 0310 	and.w	r3, r3, #16
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d103      	bne.n	8006d60 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff f931 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d6e:	e00b      	b.n	8006d88 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7fa fd95 	bl	80018a0 <HAL_UART_RxCpltCallback>
}
 8006d76:	e007      	b.n	8006d88 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0208 	orr.w	r2, r2, #8
 8006d86:	619a      	str	r2, [r3, #24]
}
 8006d88:	bf00      	nop
 8006d8a:	3758      	adds	r7, #88	@ 0x58
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006d94:	bf00      	nop
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da6:	f3ef 8305 	mrs	r3, IPSR
 8006daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10f      	bne.n	8006dd2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db2:	f3ef 8310 	mrs	r3, PRIMASK
 8006db6:	607b      	str	r3, [r7, #4]
  return(result);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d007      	beq.n	8006dda <osKernelInitialize+0x3a>
 8006dca:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <osKernelInitialize+0x64>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d103      	bne.n	8006dda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006dd2:	f06f 0305 	mvn.w	r3, #5
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	e00c      	b.n	8006df4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dda:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <osKernelInitialize+0x64>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006de2:	4b08      	ldr	r3, [pc, #32]	@ (8006e04 <osKernelInitialize+0x64>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e002      	b.n	8006df4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006dee:	f04f 33ff 	mov.w	r3, #4294967295
 8006df2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006df4:	68fb      	ldr	r3, [r7, #12]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000054c 	.word	0x2000054c

08006e08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e0e:	f3ef 8305 	mrs	r3, IPSR
 8006e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10f      	bne.n	8006e3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1e:	607b      	str	r3, [r7, #4]
  return(result);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e26:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <osKernelStart+0x3a>
 8006e32:	4b0f      	ldr	r3, [pc, #60]	@ (8006e70 <osKernelStart+0x68>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d103      	bne.n	8006e42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006e3a:	f06f 0305 	mvn.w	r3, #5
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	e010      	b.n	8006e64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e42:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <osKernelStart+0x68>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d109      	bne.n	8006e5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e4a:	f7ff ffa1 	bl	8006d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <osKernelStart+0x68>)
 8006e50:	2202      	movs	r2, #2
 8006e52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e54:	f001 fcf4 	bl	8008840 <vTaskStartScheduler>
      stat = osOK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e002      	b.n	8006e64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e64:	68fb      	ldr	r3, [r7, #12]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	2000054c 	.word	0x2000054c

08006e74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b090      	sub	sp, #64	@ 0x40
 8006e78:	af04      	add	r7, sp, #16
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e84:	f3ef 8305 	mrs	r3, IPSR
 8006e88:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f040 808f 	bne.w	8006fb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e92:	f3ef 8310 	mrs	r3, PRIMASK
 8006e96:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <osThreadNew+0x3e>
 8006eaa:	4b44      	ldr	r3, [pc, #272]	@ (8006fbc <osThreadNew+0x148>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d07e      	beq.n	8006fb0 <osThreadNew+0x13c>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d07b      	beq.n	8006fb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006eb8:	2380      	movs	r3, #128	@ 0x80
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006ebc:	2318      	movs	r3, #24
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d045      	beq.n	8006f5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <osThreadNew+0x6a>
        name = attr->name;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <osThreadNew+0x90>
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	2b38      	cmp	r3, #56	@ 0x38
 8006ef6:	d805      	bhi.n	8006f04 <osThreadNew+0x90>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <osThreadNew+0x94>
        return (NULL);
 8006f04:	2300      	movs	r3, #0
 8006f06:	e054      	b.n	8006fb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	089b      	lsrs	r3, r3, #2
 8006f16:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00e      	beq.n	8006f3e <osThreadNew+0xca>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2ba7      	cmp	r3, #167	@ 0xa7
 8006f26:	d90a      	bls.n	8006f3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <osThreadNew+0xca>
        mem = 1;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	e010      	b.n	8006f60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10c      	bne.n	8006f60 <osThreadNew+0xec>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d108      	bne.n	8006f60 <osThreadNew+0xec>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <osThreadNew+0xec>
          mem = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	623b      	str	r3, [r7, #32]
 8006f5a:	e001      	b.n	8006f60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d110      	bne.n	8006f88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f6e:	9202      	str	r2, [sp, #8]
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f001 fa61 	bl	8008444 <xTaskCreateStatic>
 8006f82:	4603      	mov	r3, r0
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	e013      	b.n	8006fb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d110      	bne.n	8006fb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	f107 0310 	add.w	r3, r7, #16
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 fab5 	bl	8008510 <xTaskCreate>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d001      	beq.n	8006fb0 <osThreadNew+0x13c>
          hTask = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fb0:	693b      	ldr	r3, [r7, #16]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3730      	adds	r7, #48	@ 0x30
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	2000054c 	.word	0x2000054c

08006fc0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fc8:	f3ef 8305 	mrs	r3, IPSR
 8006fcc:	613b      	str	r3, [r7, #16]
  return(result);
 8006fce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10f      	bne.n	8006ff4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <osDelay+0x3c>
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <osDelay+0x58>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d103      	bne.n	8006ffc <osDelay+0x3c>
    stat = osErrorISR;
 8006ff4:	f06f 0305 	mvn.w	r3, #5
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e007      	b.n	800700c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fbe2 	bl	80087d0 <vTaskDelay>
    }
  }

  return (stat);
 800700c:	697b      	ldr	r3, [r7, #20]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	2000054c 	.word	0x2000054c

0800701c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f002 fe8b 	bl	8009d40 <pvTimerGetTimerID>
 800702a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <TimerCallback+0x22>
    callb->func (callb->arg);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	6852      	ldr	r2, [r2, #4]
 800703a:	4610      	mov	r0, r2
 800703c:	4798      	blx	r3
  }
}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	@ 0x38
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	460b      	mov	r3, r1
 8007056:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007058:	2300      	movs	r3, #0
 800705a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800705c:	f3ef 8305 	mrs	r3, IPSR
 8007060:	61bb      	str	r3, [r7, #24]
  return(result);
 8007062:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007064:	2b00      	cmp	r3, #0
 8007066:	d16a      	bne.n	800713e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007068:	f3ef 8310 	mrs	r3, PRIMASK
 800706c:	617b      	str	r3, [r7, #20]
  return(result);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d105      	bne.n	8007080 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007074:	f3ef 8311 	mrs	r3, BASEPRI
 8007078:	613b      	str	r3, [r7, #16]
  return(result);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <osTimerNew+0x40>
 8007080:	4b31      	ldr	r3, [pc, #196]	@ (8007148 <osTimerNew+0x100>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d05a      	beq.n	800713e <osTimerNew+0xf6>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d057      	beq.n	800713e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800708e:	2008      	movs	r0, #8
 8007090:	f003 f8ba 	bl	800a208 <pvPortMalloc>
 8007094:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d050      	beq.n	800713e <osTimerNew+0xf6>
      callb->func = func;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <osTimerNew+0x6c>
        reload = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b2:	e001      	b.n	80070b8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 80070b8:	f04f 33ff 	mov.w	r3, #4294967295
 80070bc:	623b      	str	r3, [r7, #32]
      name = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01c      	beq.n	8007102 <osTimerNew+0xba>
        if (attr->name != NULL) {
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <osTimerNew+0x8e>
          name = attr->name;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d006      	beq.n	80070ec <osTimerNew+0xa4>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80070e4:	d902      	bls.n	80070ec <osTimerNew+0xa4>
          mem = 1;
 80070e6:	2301      	movs	r3, #1
 80070e8:	623b      	str	r3, [r7, #32]
 80070ea:	e00c      	b.n	8007106 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d108      	bne.n	8007106 <osTimerNew+0xbe>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <osTimerNew+0xbe>
            mem = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	623b      	str	r3, [r7, #32]
 8007100:	e001      	b.n	8007106 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d10c      	bne.n	8007126 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <osTimerNew+0x104>)
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711a:	2101      	movs	r1, #1
 800711c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800711e:	f002 fa70 	bl	8009602 <xTimerCreateStatic>
 8007122:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007124:	e00b      	b.n	800713e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d108      	bne.n	800713e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800712c:	4b07      	ldr	r3, [pc, #28]	@ (800714c <osTimerNew+0x104>)
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007134:	2101      	movs	r1, #1
 8007136:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007138:	f002 fa42 	bl	80095c0 <xTimerCreate>
 800713c:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8007140:	4618      	mov	r0, r3
 8007142:	3730      	adds	r7, #48	@ 0x30
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	2000054c 	.word	0x2000054c
 800714c:	0800701d 	.word	0x0800701d

08007150 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	@ 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715c:	f3ef 8305 	mrs	r3, IPSR
 8007160:	613b      	str	r3, [r7, #16]
  return(result);
 8007162:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 8085 	bne.w	8007274 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716a:	f3ef 8310 	mrs	r3, PRIMASK
 800716e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007176:	f3ef 8311 	mrs	r3, BASEPRI
 800717a:	60bb      	str	r3, [r7, #8]
  return(result);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <osMutexNew+0x3a>
 8007182:	4b3f      	ldr	r3, [pc, #252]	@ (8007280 <osMutexNew+0x130>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d074      	beq.n	8007274 <osMutexNew+0x124>
    if (attr != NULL) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	623b      	str	r3, [r7, #32]
 8007196:	e001      	b.n	800719c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <osMutexNew+0x5c>
      rmtx = 1U;
 80071a6:	2301      	movs	r3, #1
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	e001      	b.n	80071b0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d15c      	bne.n	8007274 <osMutexNew+0x124>
      mem = -1;
 80071ba:	f04f 33ff 	mov.w	r3, #4294967295
 80071be:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d015      	beq.n	80071f2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <osMutexNew+0x8c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b4f      	cmp	r3, #79	@ 0x4f
 80071d4:	d902      	bls.n	80071dc <osMutexNew+0x8c>
          mem = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	e00c      	b.n	80071f6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <osMutexNew+0xa6>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <osMutexNew+0xa6>
            mem = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	e001      	b.n	80071f6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d112      	bne.n	8007222 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	4619      	mov	r1, r3
 8007208:	2004      	movs	r0, #4
 800720a:	f000 fb5c 	bl	80078c6 <xQueueCreateMutexStatic>
 800720e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007210:	e016      	b.n	8007240 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	4619      	mov	r1, r3
 8007218:	2001      	movs	r0, #1
 800721a:	f000 fb54 	bl	80078c6 <xQueueCreateMutexStatic>
 800721e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007220:	e00e      	b.n	8007240 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10b      	bne.n	8007240 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800722e:	2004      	movs	r0, #4
 8007230:	f000 fb31 	bl	8007896 <xQueueCreateMutex>
 8007234:	6278      	str	r0, [r7, #36]	@ 0x24
 8007236:	e003      	b.n	8007240 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007238:	2001      	movs	r0, #1
 800723a:	f000 fb2c 	bl	8007896 <xQueueCreateMutex>
 800723e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <osMutexNew+0x110>
        if (attr != NULL) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <osMutexNew+0x104>
          name = attr->name;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e001      	b.n	8007258 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007258:	6979      	ldr	r1, [r7, #20]
 800725a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800725c:	f001 f894 	bl	8008388 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d006      	beq.n	8007274 <osMutexNew+0x124>
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007276:	4618      	mov	r0, r3
 8007278:	3728      	adds	r7, #40	@ 0x28
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000054c 	.word	0x2000054c

08007284 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a2:	f3ef 8305 	mrs	r3, IPSR
 80072a6:	613b      	str	r3, [r7, #16]
  return(result);
 80072a8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10f      	bne.n	80072ce <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ae:	f3ef 8310 	mrs	r3, PRIMASK
 80072b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072ba:	f3ef 8311 	mrs	r3, BASEPRI
 80072be:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <osMutexAcquire+0x52>
 80072c6:	4b1d      	ldr	r3, [pc, #116]	@ (800733c <osMutexAcquire+0xb8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d103      	bne.n	80072d6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80072ce:	f06f 0305 	mvn.w	r3, #5
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e02c      	b.n	8007330 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80072dc:	f06f 0303 	mvn.w	r3, #3
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	e025      	b.n	8007330 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d011      	beq.n	800730e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	69b8      	ldr	r0, [r7, #24]
 80072ee:	f000 fb3c 	bl	800796a <xQueueTakeMutexRecursive>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d01b      	beq.n	8007330 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80072fe:	f06f 0301 	mvn.w	r3, #1
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	e014      	b.n	8007330 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007306:	f06f 0302 	mvn.w	r3, #2
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	e010      	b.n	8007330 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	69b8      	ldr	r0, [r7, #24]
 8007312:	f000 fdf9 	bl	8007f08 <xQueueSemaphoreTake>
 8007316:	4603      	mov	r3, r0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d009      	beq.n	8007330 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007322:	f06f 0301 	mvn.w	r3, #1
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e002      	b.n	8007330 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800732a:	f06f 0302 	mvn.w	r3, #2
 800732e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007330:	69fb      	ldr	r3, [r7, #28]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	2000054c 	.word	0x2000054c

08007340 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007358:	2300      	movs	r3, #0
 800735a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800735c:	f3ef 8305 	mrs	r3, IPSR
 8007360:	613b      	str	r3, [r7, #16]
  return(result);
 8007362:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10f      	bne.n	8007388 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007368:	f3ef 8310 	mrs	r3, PRIMASK
 800736c:	60fb      	str	r3, [r7, #12]
  return(result);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d105      	bne.n	8007380 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007374:	f3ef 8311 	mrs	r3, BASEPRI
 8007378:	60bb      	str	r3, [r7, #8]
  return(result);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <osMutexRelease+0x50>
 8007380:	4b16      	ldr	r3, [pc, #88]	@ (80073dc <osMutexRelease+0x9c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d103      	bne.n	8007390 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007388:	f06f 0305 	mvn.w	r3, #5
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	e01f      	b.n	80073d0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007396:	f06f 0303 	mvn.w	r3, #3
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	e018      	b.n	80073d0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80073a4:	69b8      	ldr	r0, [r7, #24]
 80073a6:	f000 faa9 	bl	80078fc <xQueueGiveMutexRecursive>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d00f      	beq.n	80073d0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80073b0:	f06f 0302 	mvn.w	r3, #2
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	e00b      	b.n	80073d0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	69b8      	ldr	r0, [r7, #24]
 80073c0:	f000 fb0c 	bl	80079dc <xQueueGenericSend>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d002      	beq.n	80073d0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80073ca:	f06f 0302 	mvn.w	r3, #2
 80073ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80073d0:	69fb      	ldr	r3, [r7, #28]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	2000054c 	.word	0x2000054c

080073e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a07      	ldr	r2, [pc, #28]	@ (800740c <vApplicationGetIdleTaskMemory+0x2c>)
 80073f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4a06      	ldr	r2, [pc, #24]	@ (8007410 <vApplicationGetIdleTaskMemory+0x30>)
 80073f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2280      	movs	r2, #128	@ 0x80
 80073fc:	601a      	str	r2, [r3, #0]
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000550 	.word	0x20000550
 8007410:	200005f8 	.word	0x200005f8

08007414 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4a07      	ldr	r2, [pc, #28]	@ (8007440 <vApplicationGetTimerTaskMemory+0x2c>)
 8007424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4a06      	ldr	r2, [pc, #24]	@ (8007444 <vApplicationGetTimerTaskMemory+0x30>)
 800742a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007432:	601a      	str	r2, [r3, #0]
}
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	200007f8 	.word	0x200007f8
 8007444:	200008a0 	.word	0x200008a0

08007448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f103 0208 	add.w	r2, r3, #8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f04f 32ff 	mov.w	r2, #4294967295
 8007460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f103 0208 	add.w	r2, r3, #8
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f103 0208 	add.w	r2, r3, #8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	601a      	str	r2, [r3, #0]
}
 80074de:	bf00      	nop
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	d103      	bne.n	800750a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e00c      	b.n	8007524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3308      	adds	r3, #8
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e002      	b.n	8007518 <vListInsert+0x2e>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d2f6      	bcs.n	8007512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	601a      	str	r2, [r3, #0]
}
 8007550:	bf00      	nop
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6892      	ldr	r2, [r2, #8]
 8007572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6852      	ldr	r2, [r2, #4]
 800757c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	429a      	cmp	r2, r3
 8007586:	d103      	bne.n	8007590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	1e5a      	subs	r2, r3, #1
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80075e0:	f002 fce4 	bl	8009fac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ec:	68f9      	ldr	r1, [r7, #12]
 80075ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007610:	3b01      	subs	r3, #1
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	441a      	add	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	22ff      	movs	r2, #255	@ 0xff
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	22ff      	movs	r2, #255	@ 0xff
 800762c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d114      	bne.n	8007660 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01a      	beq.n	8007674 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3310      	adds	r3, #16
 8007642:	4618      	mov	r0, r3
 8007644:	f001 fba8 	bl	8008d98 <xTaskRemoveFromEventList>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d012      	beq.n	8007674 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <xQueueGenericReset+0xd4>)
 8007650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	e009      	b.n	8007674 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3310      	adds	r3, #16
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff feef 	bl	8007448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3324      	adds	r3, #36	@ 0x24
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff feea 	bl	8007448 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007674:	f002 fcd0 	bl	800a018 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007678:	2301      	movs	r3, #1
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08e      	sub	sp, #56	@ 0x38
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10d      	bne.n	80076b8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	b672      	cpsid	i
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	b662      	cpsie	i
 80076b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10d      	bne.n	80076da <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	b672      	cpsid	i
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	b662      	cpsie	i
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <xQueueGenericCreateStatic+0x5e>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <xQueueGenericCreateStatic+0x62>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <xQueueGenericCreateStatic+0x64>
 80076ea:	2300      	movs	r3, #0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10d      	bne.n	800770c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	b672      	cpsid	i
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	b662      	cpsie	i
 8007704:	623b      	str	r3, [r7, #32]
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	e7fd      	b.n	8007708 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <xQueueGenericCreateStatic+0x90>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <xQueueGenericCreateStatic+0x94>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <xQueueGenericCreateStatic+0x96>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10d      	bne.n	800773e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	b672      	cpsid	i
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	b662      	cpsie	i
 8007736:	61fb      	str	r3, [r7, #28]
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	e7fd      	b.n	800773a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800773e:	2350      	movs	r3, #80	@ 0x50
 8007740:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b50      	cmp	r3, #80	@ 0x50
 8007746:	d00d      	beq.n	8007764 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	b672      	cpsid	i
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	b662      	cpsie	i
 800775c:	61bb      	str	r3, [r7, #24]
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	e7fd      	b.n	8007760 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007764:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800776a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00d      	beq.n	800778c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007778:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f848 	bl	800781c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800778c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800778e:	4618      	mov	r0, r3
 8007790:	3730      	adds	r7, #48	@ 0x30
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007796:	b580      	push	{r7, lr}
 8007798:	b08a      	sub	sp, #40	@ 0x28
 800779a:	af02      	add	r7, sp, #8
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	4613      	mov	r3, r2
 80077a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10d      	bne.n	80077c6 <xQueueGenericCreate+0x30>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	b672      	cpsid	i
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	b662      	cpsie	i
 80077be:	613b      	str	r3, [r7, #16]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61fb      	str	r3, [r7, #28]
 80077d0:	e004      	b.n	80077dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	3350      	adds	r3, #80	@ 0x50
 80077e0:	4618      	mov	r0, r3
 80077e2:	f002 fd11 	bl	800a208 <pvPortMalloc>
 80077e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d011      	beq.n	8007812 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	3350      	adds	r3, #80	@ 0x50
 80077f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007800:	79fa      	ldrb	r2, [r7, #7]
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	4613      	mov	r3, r2
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f805 	bl	800781c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007812:	69bb      	ldr	r3, [r7, #24]
	}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e002      	b.n	800783e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800784a:	2101      	movs	r1, #1
 800784c:	69b8      	ldr	r0, [r7, #24]
 800784e:	f7ff feaf 	bl	80075b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00e      	beq.n	800788e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007882:	2300      	movs	r3, #0
 8007884:	2200      	movs	r2, #0
 8007886:	2100      	movs	r1, #0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8a7 	bl	80079dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	4603      	mov	r3, r0
 800789e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078a0:	2301      	movs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	2300      	movs	r3, #0
 80078a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6939      	ldr	r1, [r7, #16]
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7ff ff71 	bl	8007796 <xQueueGenericCreate>
 80078b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff ffd3 	bl	8007862 <prvInitialiseMutex>

		return xNewQueue;
 80078bc:	68fb      	ldr	r3, [r7, #12]
	}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b088      	sub	sp, #32
 80078ca:	af02      	add	r7, sp, #8
 80078cc:	4603      	mov	r3, r0
 80078ce:	6039      	str	r1, [r7, #0]
 80078d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078d2:	2301      	movs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2200      	movs	r2, #0
 80078e2:	6939      	ldr	r1, [r7, #16]
 80078e4:	6978      	ldr	r0, [r7, #20]
 80078e6:	f7ff fecf 	bl	8007688 <xQueueGenericCreateStatic>
 80078ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff ffb8 	bl	8007862 <prvInitialiseMutex>

		return xNewQueue;
 80078f2:	68fb      	ldr	r3, [r7, #12]
	}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80078fc:	b590      	push	{r4, r7, lr}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10d      	bne.n	800792a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	b672      	cpsid	i
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	b662      	cpsie	i
 8007922:	60fb      	str	r3, [r7, #12]
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	689c      	ldr	r4, [r3, #8]
 800792e:	f001 fc01 	bl	8009134 <xTaskGetCurrentTaskHandle>
 8007932:	4603      	mov	r3, r0
 8007934:	429c      	cmp	r4, r3
 8007936:	d111      	bne.n	800795c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800794a:	2300      	movs	r3, #0
 800794c:	2200      	movs	r2, #0
 800794e:	2100      	movs	r1, #0
 8007950:	6938      	ldr	r0, [r7, #16]
 8007952:	f000 f843 	bl	80079dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007956:	2301      	movs	r3, #1
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	e001      	b.n	8007960 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007960:	697b      	ldr	r3, [r7, #20]
	}
 8007962:	4618      	mov	r0, r3
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	bd90      	pop	{r4, r7, pc}

0800796a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800796a:	b590      	push	{r4, r7, lr}
 800796c:	b087      	sub	sp, #28
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10d      	bne.n	800799a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	b672      	cpsid	i
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	b662      	cpsie	i
 8007992:	60fb      	str	r3, [r7, #12]
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	e7fd      	b.n	8007996 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	689c      	ldr	r4, [r3, #8]
 800799e:	f001 fbc9 	bl	8009134 <xTaskGetCurrentTaskHandle>
 80079a2:	4603      	mov	r3, r0
 80079a4:	429c      	cmp	r4, r3
 80079a6:	d107      	bne.n	80079b8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80079b2:	2301      	movs	r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	e00c      	b.n	80079d2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f000 faa4 	bl	8007f08 <xQueueSemaphoreTake>
 80079c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80079d2:	697b      	ldr	r3, [r7, #20]
	}
 80079d4:	4618      	mov	r0, r3
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd90      	pop	{r4, r7, pc}

080079dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08e      	sub	sp, #56	@ 0x38
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10d      	bne.n	8007a14 <xQueueGenericSend+0x38>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	b672      	cpsid	i
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	b662      	cpsie	i
 8007a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d103      	bne.n	8007a22 <xQueueGenericSend+0x46>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <xQueueGenericSend+0x4a>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <xQueueGenericSend+0x4c>
 8007a26:	2300      	movs	r3, #0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10d      	bne.n	8007a48 <xQueueGenericSend+0x6c>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a30:	b672      	cpsid	i
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	b662      	cpsie	i
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d103      	bne.n	8007a56 <xQueueGenericSend+0x7a>
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <xQueueGenericSend+0x7e>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueGenericSend+0x80>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10d      	bne.n	8007a7c <xQueueGenericSend+0xa0>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	b672      	cpsid	i
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	b662      	cpsie	i
 8007a74:	623b      	str	r3, [r7, #32]
}
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	e7fd      	b.n	8007a78 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a7c:	f001 fb6a 	bl	8009154 <xTaskGetSchedulerState>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d102      	bne.n	8007a8c <xQueueGenericSend+0xb0>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <xQueueGenericSend+0xb4>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e000      	b.n	8007a92 <xQueueGenericSend+0xb6>
 8007a90:	2300      	movs	r3, #0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10d      	bne.n	8007ab2 <xQueueGenericSend+0xd6>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	b672      	cpsid	i
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	b662      	cpsie	i
 8007aaa:	61fb      	str	r3, [r7, #28]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ab2:	f002 fa7b 	bl	8009fac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d302      	bcc.n	8007ac8 <xQueueGenericSend+0xec>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d129      	bne.n	8007b1c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ace:	f000 fb4b 	bl	8008168 <prvCopyDataToQueue>
 8007ad2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d010      	beq.n	8007afe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ade:	3324      	adds	r3, #36	@ 0x24
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f959 	bl	8008d98 <xTaskRemoveFromEventList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d013      	beq.n	8007b14 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007aec:	4b3f      	ldr	r3, [pc, #252]	@ (8007bec <xQueueGenericSend+0x210>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	e00a      	b.n	8007b14 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d007      	beq.n	8007b14 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b04:	4b39      	ldr	r3, [pc, #228]	@ (8007bec <xQueueGenericSend+0x210>)
 8007b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b14:	f002 fa80 	bl	800a018 <vPortExitCritical>
				return pdPASS;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e063      	b.n	8007be4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d103      	bne.n	8007b2a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b22:	f002 fa79 	bl	800a018 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e05c      	b.n	8007be4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 f995 	bl	8008e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b3e:	f002 fa6b 	bl	800a018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b42:	f000 fef1 	bl	8008928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b46:	f002 fa31 	bl	8009fac <vPortEnterCritical>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b56:	d103      	bne.n	8007b60 <xQueueGenericSend+0x184>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b66:	b25b      	sxtb	r3, r3
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d103      	bne.n	8007b76 <xQueueGenericSend+0x19a>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b76:	f002 fa4f 	bl	800a018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b7a:	1d3a      	adds	r2, r7, #4
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 f984 	bl	8008e90 <xTaskCheckForTimeOut>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d124      	bne.n	8007bd8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b90:	f000 fbe2 	bl	8008358 <prvIsQueueFull>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d018      	beq.n	8007bcc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	3310      	adds	r3, #16
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 f8a2 	bl	8008cec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007baa:	f000 fb6d 	bl	8008288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bae:	f000 fec9 	bl	8008944 <xTaskResumeAll>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f af7c 	bne.w	8007ab2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007bba:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <xQueueGenericSend+0x210>)
 8007bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	e772      	b.n	8007ab2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bce:	f000 fb5b 	bl	8008288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bd2:	f000 feb7 	bl	8008944 <xTaskResumeAll>
 8007bd6:	e76c      	b.n	8007ab2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bda:	f000 fb55 	bl	8008288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bde:	f000 feb1 	bl	8008944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007be2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3738      	adds	r7, #56	@ 0x38
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	@ 0x38
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10d      	bne.n	8007c24 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0c:	b672      	cpsid	i
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	b662      	cpsie	i
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	e7fd      	b.n	8007c20 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <xQueueGenericSendFromISR+0x42>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <xQueueGenericSendFromISR+0x46>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <xQueueGenericSendFromISR+0x48>
 8007c36:	2300      	movs	r3, #0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10d      	bne.n	8007c58 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c40:	b672      	cpsid	i
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	b662      	cpsie	i
 8007c50:	623b      	str	r3, [r7, #32]
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	e7fd      	b.n	8007c54 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d103      	bne.n	8007c66 <xQueueGenericSendFromISR+0x76>
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <xQueueGenericSendFromISR+0x7a>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <xQueueGenericSendFromISR+0x7c>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10d      	bne.n	8007c8c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	b672      	cpsid	i
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	b662      	cpsie	i
 8007c84:	61fb      	str	r3, [r7, #28]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c8c:	f002 fa76 	bl	800a17c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c90:	f3ef 8211 	mrs	r2, BASEPRI
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	b672      	cpsid	i
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	b662      	cpsie	i
 8007ca8:	61ba      	str	r2, [r7, #24]
 8007caa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d302      	bcc.n	8007cc2 <xQueueGenericSendFromISR+0xd2>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d12c      	bne.n	8007d1c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cd2:	f000 fa49 	bl	8008168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d112      	bne.n	8007d06 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d016      	beq.n	8007d16 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	3324      	adds	r3, #36	@ 0x24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 f853 	bl	8008d98 <xTaskRemoveFromEventList>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00e      	beq.n	8007d16 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	e007      	b.n	8007d16 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	b25a      	sxtb	r2, r3
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d16:	2301      	movs	r3, #1
 8007d18:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007d1a:	e001      	b.n	8007d20 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3738      	adds	r7, #56	@ 0x38
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08c      	sub	sp, #48	@ 0x30
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10d      	bne.n	8007d6e <xQueueReceive+0x36>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	b672      	cpsid	i
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	b662      	cpsie	i
 8007d66:	623b      	str	r3, [r7, #32]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d103      	bne.n	8007d7c <xQueueReceive+0x44>
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <xQueueReceive+0x48>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <xQueueReceive+0x4a>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <xQueueReceive+0x6a>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	61fb      	str	r3, [r7, #28]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007da2:	f001 f9d7 	bl	8009154 <xTaskGetSchedulerState>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <xQueueReceive+0x7a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <xQueueReceive+0x7e>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <xQueueReceive+0x80>
 8007db6:	2300      	movs	r3, #0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10d      	bne.n	8007dd8 <xQueueReceive+0xa0>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	b672      	cpsid	i
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	b662      	cpsie	i
 8007dd0:	61bb      	str	r3, [r7, #24]
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dd8:	f002 f8e8 	bl	8009fac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01f      	beq.n	8007e28 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dec:	f000 fa26 	bl	800823c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00f      	beq.n	8007e20 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e02:	3310      	adds	r3, #16
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 ffc7 	bl	8008d98 <xTaskRemoveFromEventList>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d007      	beq.n	8007e20 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e10:	4b3c      	ldr	r3, [pc, #240]	@ (8007f04 <xQueueReceive+0x1cc>)
 8007e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e20:	f002 f8fa 	bl	800a018 <vPortExitCritical>
				return pdPASS;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e069      	b.n	8007efc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e2e:	f002 f8f3 	bl	800a018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e062      	b.n	8007efc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 f80f 	bl	8008e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e46:	2301      	movs	r3, #1
 8007e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e4a:	f002 f8e5 	bl	800a018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e4e:	f000 fd6b 	bl	8008928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e52:	f002 f8ab 	bl	8009fac <vPortEnterCritical>
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e5c:	b25b      	sxtb	r3, r3
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d103      	bne.n	8007e6c <xQueueReceive+0x134>
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e72:	b25b      	sxtb	r3, r3
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e78:	d103      	bne.n	8007e82 <xQueueReceive+0x14a>
 8007e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e82:	f002 f8c9 	bl	800a018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e86:	1d3a      	adds	r2, r7, #4
 8007e88:	f107 0310 	add.w	r3, r7, #16
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fffe 	bl	8008e90 <xTaskCheckForTimeOut>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d123      	bne.n	8007ee2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e9c:	f000 fa46 	bl	800832c <prvIsQueueEmpty>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d017      	beq.n	8007ed6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	3324      	adds	r3, #36	@ 0x24
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 ff1c 	bl	8008cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007eb6:	f000 f9e7 	bl	8008288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007eba:	f000 fd43 	bl	8008944 <xTaskResumeAll>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d189      	bne.n	8007dd8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f04 <xQueueReceive+0x1cc>)
 8007ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	e780      	b.n	8007dd8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ed8:	f000 f9d6 	bl	8008288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007edc:	f000 fd32 	bl	8008944 <xTaskResumeAll>
 8007ee0:	e77a      	b.n	8007dd8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ee4:	f000 f9d0 	bl	8008288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ee8:	f000 fd2c 	bl	8008944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007eee:	f000 fa1d 	bl	800832c <prvIsQueueEmpty>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f43f af6f 	beq.w	8007dd8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007efa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3730      	adds	r7, #48	@ 0x30
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08e      	sub	sp, #56	@ 0x38
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	623b      	str	r3, [r7, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00d      	beq.n	8007f64 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4c:	b672      	cpsid	i
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	b662      	cpsie	i
 8007f5c:	61fb      	str	r3, [r7, #28]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f64:	f001 f8f6 	bl	8009154 <xTaskGetSchedulerState>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <xQueueSemaphoreTake+0x6c>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <xQueueSemaphoreTake+0x70>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <xQueueSemaphoreTake+0x72>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	b672      	cpsid	i
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	b662      	cpsie	i
 8007f92:	61bb      	str	r3, [r7, #24]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f9a:	f002 f807 	bl	8009fac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d024      	beq.n	8007ff4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	1e5a      	subs	r2, r3, #1
 8007fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007fba:	f001 fa4d 	bl	8009458 <pvTaskIncrementMutexHeldCount>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00f      	beq.n	8007fec <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fce:	3310      	adds	r3, #16
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fee1 	bl	8008d98 <xTaskRemoveFromEventList>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fdc:	4b55      	ldr	r3, [pc, #340]	@ (8008134 <xQueueSemaphoreTake+0x22c>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fec:	f002 f814 	bl	800a018 <vPortExitCritical>
				return pdPASS;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e09a      	b.n	800812a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d114      	bne.n	8008024 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00d      	beq.n	800801c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	b672      	cpsid	i
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	b662      	cpsie	i
 8008014:	617b      	str	r3, [r7, #20]
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	e7fd      	b.n	8008018 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800801c:	f001 fffc 	bl	800a018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008020:	2300      	movs	r3, #0
 8008022:	e082      	b.n	800812a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	4618      	mov	r0, r3
 8008030:	f000 ff18 	bl	8008e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008034:	2301      	movs	r3, #1
 8008036:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008038:	f001 ffee 	bl	800a018 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800803c:	f000 fc74 	bl	8008928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008040:	f001 ffb4 	bl	8009fac <vPortEnterCritical>
 8008044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008046:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800804a:	b25b      	sxtb	r3, r3
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d103      	bne.n	800805a <xQueueSemaphoreTake+0x152>
 8008052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800805a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008060:	b25b      	sxtb	r3, r3
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d103      	bne.n	8008070 <xQueueSemaphoreTake+0x168>
 8008068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008070:	f001 ffd2 	bl	800a018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008074:	463a      	mov	r2, r7
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f000 ff07 	bl	8008e90 <xTaskCheckForTimeOut>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d132      	bne.n	80080ee <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008088:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800808a:	f000 f94f 	bl	800832c <prvIsQueueEmpty>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d026      	beq.n	80080e2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800809c:	f001 ff86 	bl	8009fac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 f873 	bl	8009190 <xTaskPriorityInherit>
 80080aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80080ac:	f001 ffb4 	bl	800a018 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	3324      	adds	r3, #36	@ 0x24
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fe17 	bl	8008cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080c0:	f000 f8e2 	bl	8008288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080c4:	f000 fc3e 	bl	8008944 <xTaskResumeAll>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f47f af65 	bne.w	8007f9a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80080d0:	4b18      	ldr	r3, [pc, #96]	@ (8008134 <xQueueSemaphoreTake+0x22c>)
 80080d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	e75b      	b.n	8007f9a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80080e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080e4:	f000 f8d0 	bl	8008288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080e8:	f000 fc2c 	bl	8008944 <xTaskResumeAll>
 80080ec:	e755      	b.n	8007f9a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80080ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080f0:	f000 f8ca 	bl	8008288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080f4:	f000 fc26 	bl	8008944 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080fa:	f000 f917 	bl	800832c <prvIsQueueEmpty>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	f43f af4a 	beq.w	8007f9a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00d      	beq.n	8008128 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800810c:	f001 ff4e 	bl	8009fac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008112:	f000 f811 	bl	8008138 <prvGetDisinheritPriorityAfterTimeout>
 8008116:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800811e:	4618      	mov	r0, r3
 8008120:	f001 f912 	bl	8009348 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008124:	f001 ff78 	bl	800a018 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008128:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800812a:	4618      	mov	r0, r3
 800812c:	3738      	adds	r7, #56	@ 0x38
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	d006      	beq.n	8008156 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e001      	b.n	800815a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800815a:	68fb      	ldr	r3, [r7, #12]
	}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10d      	bne.n	80081a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d14d      	bne.n	800822a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f001 f864 	bl	8009260 <xTaskPriorityDisinherit>
 8008198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	609a      	str	r2, [r3, #8]
 80081a0:	e043      	b.n	800822a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d119      	bne.n	80081dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6858      	ldr	r0, [r3, #4]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b0:	461a      	mov	r2, r3
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	f003 fa8b 	bl	800b6ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d32b      	bcc.n	800822a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	e026      	b.n	800822a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	68d8      	ldr	r0, [r3, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	461a      	mov	r2, r3
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	f003 fa71 	bl	800b6ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f4:	425b      	negs	r3, r3
 80081f6:	441a      	add	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d207      	bcs.n	8008218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008210:	425b      	negs	r3, r3
 8008212:	441a      	add	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d105      	bne.n	800822a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3b01      	subs	r3, #1
 8008228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008232:	697b      	ldr	r3, [r7, #20]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d018      	beq.n	8008280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008256:	441a      	add	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	429a      	cmp	r2, r3
 8008266:	d303      	bcc.n	8008270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68d9      	ldr	r1, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008278:	461a      	mov	r2, r3
 800827a:	6838      	ldr	r0, [r7, #0]
 800827c:	f003 fa27 	bl	800b6ce <memcpy>
	}
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008290:	f001 fe8c 	bl	8009fac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800829a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800829c:	e011      	b.n	80082c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d012      	beq.n	80082cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3324      	adds	r3, #36	@ 0x24
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fd74 	bl	8008d98 <xTaskRemoveFromEventList>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082b6:	f000 fe53 	bl	8008f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	3b01      	subs	r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dce9      	bgt.n	800829e <prvUnlockQueue+0x16>
 80082ca:	e000      	b.n	80082ce <prvUnlockQueue+0x46>
					break;
 80082cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	22ff      	movs	r2, #255	@ 0xff
 80082d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082d6:	f001 fe9f 	bl	800a018 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082da:	f001 fe67 	bl	8009fac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e6:	e011      	b.n	800830c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d012      	beq.n	8008316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3310      	adds	r3, #16
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fd4f 	bl	8008d98 <xTaskRemoveFromEventList>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008300:	f000 fe2e 	bl	8008f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	3b01      	subs	r3, #1
 8008308:	b2db      	uxtb	r3, r3
 800830a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800830c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008310:	2b00      	cmp	r3, #0
 8008312:	dce9      	bgt.n	80082e8 <prvUnlockQueue+0x60>
 8008314:	e000      	b.n	8008318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	22ff      	movs	r2, #255	@ 0xff
 800831c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008320:	f001 fe7a 	bl	800a018 <vPortExitCritical>
}
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008334:	f001 fe3a 	bl	8009fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e001      	b.n	800834a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800834a:	f001 fe65 	bl	800a018 <vPortExitCritical>

	return xReturn;
 800834e:	68fb      	ldr	r3, [r7, #12]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008360:	f001 fe24 	bl	8009fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836c:	429a      	cmp	r2, r3
 800836e:	d102      	bne.n	8008376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e001      	b.n	800837a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800837a:	f001 fe4d 	bl	800a018 <vPortExitCritical>

	return xReturn;
 800837e:	68fb      	ldr	r3, [r7, #12]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e014      	b.n	80083c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008398:	4a0f      	ldr	r2, [pc, #60]	@ (80083d8 <vQueueAddToRegistry+0x50>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083a4:	490c      	ldr	r1, [pc, #48]	@ (80083d8 <vQueueAddToRegistry+0x50>)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ae:	4a0a      	ldr	r2, [pc, #40]	@ (80083d8 <vQueueAddToRegistry+0x50>)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ba:	e006      	b.n	80083ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b07      	cmp	r3, #7
 80083c6:	d9e7      	bls.n	8008398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000ca0 	.word	0x20000ca0

080083dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083ec:	f001 fdde 	bl	8009fac <vPortEnterCritical>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d103      	bne.n	8008406 <vQueueWaitForMessageRestricted+0x2a>
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800840c:	b25b      	sxtb	r3, r3
 800840e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008412:	d103      	bne.n	800841c <vQueueWaitForMessageRestricted+0x40>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800841c:	f001 fdfc 	bl	800a018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	3324      	adds	r3, #36	@ 0x24
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fc83 	bl	8008d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	f7ff ff26 	bl	8008288 <prvUnlockQueue>
	}
 800843c:	bf00      	nop
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	@ 0x38
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10d      	bne.n	8008474 <xTaskCreateStatic+0x30>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	623b      	str	r3, [r7, #32]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10d      	bne.n	8008496 <xTaskCreateStatic+0x52>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	b672      	cpsid	i
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	b662      	cpsie	i
 800848e:	61fb      	str	r3, [r7, #28]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008496:	23a8      	movs	r3, #168	@ 0xa8
 8008498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2ba8      	cmp	r3, #168	@ 0xa8
 800849e:	d00d      	beq.n	80084bc <xTaskCreateStatic+0x78>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	b672      	cpsid	i
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	b662      	cpsie	i
 80084b4:	61bb      	str	r3, [r7, #24]
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01e      	beq.n	8008502 <xTaskCreateStatic+0xbe>
 80084c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01b      	beq.n	8008502 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084dc:	2300      	movs	r3, #0
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	9302      	str	r3, [sp, #8]
 80084e4:	f107 0314 	add.w	r3, r7, #20
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f851 	bl	800859c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084fc:	f000 f8f8 	bl	80086f0 <prvAddNewTaskToReadyList>
 8008500:	e001      	b.n	8008506 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008506:	697b      	ldr	r3, [r7, #20]
	}
 8008508:	4618      	mov	r0, r3
 800850a:	3728      	adds	r7, #40	@ 0x28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08c      	sub	sp, #48	@ 0x30
 8008514:	af04      	add	r7, sp, #16
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fe6f 	bl	800a208 <pvPortMalloc>
 800852a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00e      	beq.n	8008550 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008532:	20a8      	movs	r0, #168	@ 0xa8
 8008534:	f001 fe68 	bl	800a208 <pvPortMalloc>
 8008538:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	631a      	str	r2, [r3, #48]	@ 0x30
 8008546:	e005      	b.n	8008554 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008548:	6978      	ldr	r0, [r7, #20]
 800854a:	f001 ff2b 	bl	800a3a4 <vPortFree>
 800854e:	e001      	b.n	8008554 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d017      	beq.n	800858a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008562:	88fa      	ldrh	r2, [r7, #6]
 8008564:	2300      	movs	r3, #0
 8008566:	9303      	str	r3, [sp, #12]
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	9302      	str	r3, [sp, #8]
 800856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f80f 	bl	800859c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800857e:	69f8      	ldr	r0, [r7, #28]
 8008580:	f000 f8b6 	bl	80086f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008584:	2301      	movs	r3, #1
 8008586:	61bb      	str	r3, [r7, #24]
 8008588:	e002      	b.n	8008590 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800858a:	f04f 33ff 	mov.w	r3, #4294967295
 800858e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008590:	69bb      	ldr	r3, [r7, #24]
	}
 8008592:	4618      	mov	r0, r3
 8008594:	3720      	adds	r7, #32
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	461a      	mov	r2, r3
 80085b4:	21a5      	movs	r1, #165	@ 0xa5
 80085b6:	f002 ffa2 	bl	800b4fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80085c4:	440b      	add	r3, r1
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f023 0307 	bic.w	r3, r3, #7
 80085d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00d      	beq.n	80085fa <prvInitialiseNewTask+0x5e>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	b672      	cpsid	i
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	b662      	cpsie	i
 80085f2:	617b      	str	r3, [r7, #20]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01f      	beq.n	8008640 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008600:	2300      	movs	r3, #0
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	e012      	b.n	800862c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	4413      	add	r3, r2
 800860c:	7819      	ldrb	r1, [r3, #0]
 800860e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	3334      	adds	r3, #52	@ 0x34
 8008616:	460a      	mov	r2, r1
 8008618:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d006      	beq.n	8008634 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	3301      	adds	r3, #1
 800862a:	61fb      	str	r3, [r7, #28]
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b0f      	cmp	r3, #15
 8008630:	d9e9      	bls.n	8008606 <prvInitialiseNewTask+0x6a>
 8008632:	e000      	b.n	8008636 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008634:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800863e:	e003      	b.n	8008648 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	2b37      	cmp	r3, #55	@ 0x37
 800864c:	d901      	bls.n	8008652 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800864e:	2337      	movs	r3, #55	@ 0x37
 8008650:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008656:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800865c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	2200      	movs	r2, #0
 8008662:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	3304      	adds	r3, #4
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe ff0d 	bl	8007488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	3318      	adds	r3, #24
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe ff08 	bl	8007488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800867c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008680:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	2200      	movs	r2, #0
 8008692:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	2200      	movs	r2, #0
 800869a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	3354      	adds	r3, #84	@ 0x54
 80086a2:	224c      	movs	r2, #76	@ 0x4c
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 ff29 	bl	800b4fe <memset>
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	4a0d      	ldr	r2, [pc, #52]	@ (80086e4 <prvInitialiseNewTask+0x148>)
 80086b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	4a0c      	ldr	r2, [pc, #48]	@ (80086e8 <prvInitialiseNewTask+0x14c>)
 80086b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	4a0c      	ldr	r2, [pc, #48]	@ (80086ec <prvInitialiseNewTask+0x150>)
 80086bc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	68f9      	ldr	r1, [r7, #12]
 80086c2:	69b8      	ldr	r0, [r7, #24]
 80086c4:	f001 fb60 	bl	8009d88 <pxPortInitialiseStack>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086da:	bf00      	nop
 80086dc:	3720      	adds	r7, #32
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20004f2c 	.word	0x20004f2c
 80086e8:	20004f94 	.word	0x20004f94
 80086ec:	20004ffc 	.word	0x20004ffc

080086f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086f8:	f001 fc58 	bl	8009fac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086fc:	4b2d      	ldr	r3, [pc, #180]	@ (80087b4 <prvAddNewTaskToReadyList+0xc4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3301      	adds	r3, #1
 8008702:	4a2c      	ldr	r2, [pc, #176]	@ (80087b4 <prvAddNewTaskToReadyList+0xc4>)
 8008704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008706:	4b2c      	ldr	r3, [pc, #176]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800870e:	4a2a      	ldr	r2, [pc, #168]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008714:	4b27      	ldr	r3, [pc, #156]	@ (80087b4 <prvAddNewTaskToReadyList+0xc4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d110      	bne.n	800873e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800871c:	f000 fc44 	bl	8008fa8 <prvInitialiseTaskLists>
 8008720:	e00d      	b.n	800873e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008722:	4b26      	ldr	r3, [pc, #152]	@ (80087bc <prvAddNewTaskToReadyList+0xcc>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800872a:	4b23      	ldr	r3, [pc, #140]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008734:	429a      	cmp	r2, r3
 8008736:	d802      	bhi.n	800873e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008738:	4a1f      	ldr	r2, [pc, #124]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800873e:	4b20      	ldr	r3, [pc, #128]	@ (80087c0 <prvAddNewTaskToReadyList+0xd0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3301      	adds	r3, #1
 8008744:	4a1e      	ldr	r2, [pc, #120]	@ (80087c0 <prvAddNewTaskToReadyList+0xd0>)
 8008746:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008748:	4b1d      	ldr	r3, [pc, #116]	@ (80087c0 <prvAddNewTaskToReadyList+0xd0>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008754:	4b1b      	ldr	r3, [pc, #108]	@ (80087c4 <prvAddNewTaskToReadyList+0xd4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d903      	bls.n	8008764 <prvAddNewTaskToReadyList+0x74>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008760:	4a18      	ldr	r2, [pc, #96]	@ (80087c4 <prvAddNewTaskToReadyList+0xd4>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a15      	ldr	r2, [pc, #84]	@ (80087c8 <prvAddNewTaskToReadyList+0xd8>)
 8008772:	441a      	add	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe fe91 	bl	80074a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008780:	f001 fc4a 	bl	800a018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008784:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <prvAddNewTaskToReadyList+0xcc>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00e      	beq.n	80087aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008796:	429a      	cmp	r2, r3
 8008798:	d207      	bcs.n	80087aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800879a:	4b0c      	ldr	r3, [pc, #48]	@ (80087cc <prvAddNewTaskToReadyList+0xdc>)
 800879c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200011b4 	.word	0x200011b4
 80087b8:	20000ce0 	.word	0x20000ce0
 80087bc:	200011c0 	.word	0x200011c0
 80087c0:	200011d0 	.word	0x200011d0
 80087c4:	200011bc 	.word	0x200011bc
 80087c8:	20000ce4 	.word	0x20000ce4
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01a      	beq.n	8008818 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087e2:	4b15      	ldr	r3, [pc, #84]	@ (8008838 <vTaskDelay+0x68>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00d      	beq.n	8008806 <vTaskDelay+0x36>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	b672      	cpsid	i
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	b662      	cpsie	i
 80087fe:	60bb      	str	r3, [r7, #8]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008806:	f000 f88f 	bl	8008928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800880a:	2100      	movs	r1, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fe37 	bl	8009480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008812:	f000 f897 	bl	8008944 <xTaskResumeAll>
 8008816:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d107      	bne.n	800882e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <vTaskDelay+0x6c>)
 8008820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200011dc 	.word	0x200011dc
 800883c:	e000ed04 	.word	0xe000ed04

08008840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	@ 0x28
 8008844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800884e:	463a      	mov	r2, r7
 8008850:	1d39      	adds	r1, r7, #4
 8008852:	f107 0308 	add.w	r3, r7, #8
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fdc2 	bl	80073e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	9202      	str	r2, [sp, #8]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	2300      	movs	r3, #0
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	460a      	mov	r2, r1
 800886e:	4926      	ldr	r1, [pc, #152]	@ (8008908 <vTaskStartScheduler+0xc8>)
 8008870:	4826      	ldr	r0, [pc, #152]	@ (800890c <vTaskStartScheduler+0xcc>)
 8008872:	f7ff fde7 	bl	8008444 <xTaskCreateStatic>
 8008876:	4603      	mov	r3, r0
 8008878:	4a25      	ldr	r2, [pc, #148]	@ (8008910 <vTaskStartScheduler+0xd0>)
 800887a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800887c:	4b24      	ldr	r3, [pc, #144]	@ (8008910 <vTaskStartScheduler+0xd0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e001      	b.n	800888e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d102      	bne.n	800889a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008894:	f000 fe48 	bl	8009528 <xTimerCreateTimerTask>
 8008898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d11d      	bne.n	80088dc <vTaskStartScheduler+0x9c>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	b672      	cpsid	i
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	b662      	cpsie	i
 80088b4:	613b      	str	r3, [r7, #16]
}
 80088b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088b8:	4b16      	ldr	r3, [pc, #88]	@ (8008914 <vTaskStartScheduler+0xd4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3354      	adds	r3, #84	@ 0x54
 80088be:	4a16      	ldr	r2, [pc, #88]	@ (8008918 <vTaskStartScheduler+0xd8>)
 80088c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088c2:	4b16      	ldr	r3, [pc, #88]	@ (800891c <vTaskStartScheduler+0xdc>)
 80088c4:	f04f 32ff 	mov.w	r2, #4294967295
 80088c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ca:	4b15      	ldr	r3, [pc, #84]	@ (8008920 <vTaskStartScheduler+0xe0>)
 80088cc:	2201      	movs	r2, #1
 80088ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088d0:	4b14      	ldr	r3, [pc, #80]	@ (8008924 <vTaskStartScheduler+0xe4>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088d6:	f001 faeb 	bl	8009eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088da:	e011      	b.n	8008900 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d10d      	bne.n	8008900 <vTaskStartScheduler+0xc0>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	b672      	cpsid	i
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	b662      	cpsie	i
 80088f8:	60fb      	str	r3, [r7, #12]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <vTaskStartScheduler+0xbc>
}
 8008900:	bf00      	nop
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	0800ef40 	.word	0x0800ef40
 800890c:	08008f79 	.word	0x08008f79
 8008910:	200011d8 	.word	0x200011d8
 8008914:	20000ce0 	.word	0x20000ce0
 8008918:	2000017c 	.word	0x2000017c
 800891c:	200011d4 	.word	0x200011d4
 8008920:	200011c0 	.word	0x200011c0
 8008924:	200011b8 	.word	0x200011b8

08008928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008928:	b480      	push	{r7}
 800892a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800892c:	4b04      	ldr	r3, [pc, #16]	@ (8008940 <vTaskSuspendAll+0x18>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a03      	ldr	r2, [pc, #12]	@ (8008940 <vTaskSuspendAll+0x18>)
 8008934:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008936:	bf00      	nop
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	200011dc 	.word	0x200011dc

08008944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800894e:	2300      	movs	r3, #0
 8008950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008952:	4b43      	ldr	r3, [pc, #268]	@ (8008a60 <xTaskResumeAll+0x11c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10d      	bne.n	8008976 <xTaskResumeAll+0x32>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	b672      	cpsid	i
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	b662      	cpsie	i
 800896e:	603b      	str	r3, [r7, #0]
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008976:	f001 fb19 	bl	8009fac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800897a:	4b39      	ldr	r3, [pc, #228]	@ (8008a60 <xTaskResumeAll+0x11c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3b01      	subs	r3, #1
 8008980:	4a37      	ldr	r2, [pc, #220]	@ (8008a60 <xTaskResumeAll+0x11c>)
 8008982:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008984:	4b36      	ldr	r3, [pc, #216]	@ (8008a60 <xTaskResumeAll+0x11c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d162      	bne.n	8008a52 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800898c:	4b35      	ldr	r3, [pc, #212]	@ (8008a64 <xTaskResumeAll+0x120>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d05e      	beq.n	8008a52 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008994:	e02f      	b.n	80089f6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008996:	4b34      	ldr	r3, [pc, #208]	@ (8008a68 <xTaskResumeAll+0x124>)
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3318      	adds	r3, #24
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fdda 	bl	800755c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fdd5 	bl	800755c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b6:	4b2d      	ldr	r3, [pc, #180]	@ (8008a6c <xTaskResumeAll+0x128>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d903      	bls.n	80089c6 <xTaskResumeAll+0x82>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a6c <xTaskResumeAll+0x128>)
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4a27      	ldr	r2, [pc, #156]	@ (8008a70 <xTaskResumeAll+0x12c>)
 80089d4:	441a      	add	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7fe fd60 	bl	80074a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e6:	4b23      	ldr	r3, [pc, #140]	@ (8008a74 <xTaskResumeAll+0x130>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d302      	bcc.n	80089f6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80089f0:	4b21      	ldr	r3, [pc, #132]	@ (8008a78 <xTaskResumeAll+0x134>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a68 <xTaskResumeAll+0x124>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1cb      	bne.n	8008996 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a04:	f000 fb76 	bl	80090f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a08:	4b1c      	ldr	r3, [pc, #112]	@ (8008a7c <xTaskResumeAll+0x138>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d010      	beq.n	8008a36 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a14:	f000 f846 	bl	8008aa4 <xTaskIncrementTick>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008a1e:	4b16      	ldr	r3, [pc, #88]	@ (8008a78 <xTaskResumeAll+0x134>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1f1      	bne.n	8008a14 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008a30:	4b12      	ldr	r3, [pc, #72]	@ (8008a7c <xTaskResumeAll+0x138>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a36:	4b10      	ldr	r3, [pc, #64]	@ (8008a78 <xTaskResumeAll+0x134>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a42:	4b0f      	ldr	r3, [pc, #60]	@ (8008a80 <xTaskResumeAll+0x13c>)
 8008a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a52:	f001 fae1 	bl	800a018 <vPortExitCritical>

	return xAlreadyYielded;
 8008a56:	68bb      	ldr	r3, [r7, #8]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	200011dc 	.word	0x200011dc
 8008a64:	200011b4 	.word	0x200011b4
 8008a68:	20001174 	.word	0x20001174
 8008a6c:	200011bc 	.word	0x200011bc
 8008a70:	20000ce4 	.word	0x20000ce4
 8008a74:	20000ce0 	.word	0x20000ce0
 8008a78:	200011c8 	.word	0x200011c8
 8008a7c:	200011c4 	.word	0x200011c4
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a8a:	4b05      	ldr	r3, [pc, #20]	@ (8008aa0 <xTaskGetTickCount+0x1c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a90:	687b      	ldr	r3, [r7, #4]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	200011b8 	.word	0x200011b8

08008aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aae:	4b50      	ldr	r3, [pc, #320]	@ (8008bf0 <xTaskIncrementTick+0x14c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 808c 	bne.w	8008bd0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8008bf4 <xTaskIncrementTick+0x150>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8008bf4 <xTaskIncrementTick+0x150>)
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d123      	bne.n	8008b14 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008acc:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf8 <xTaskIncrementTick+0x154>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00d      	beq.n	8008af2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ada:	b672      	cpsid	i
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	b662      	cpsie	i
 8008aea:	603b      	str	r3, [r7, #0]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <xTaskIncrementTick+0x4a>
 8008af2:	4b41      	ldr	r3, [pc, #260]	@ (8008bf8 <xTaskIncrementTick+0x154>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	4b40      	ldr	r3, [pc, #256]	@ (8008bfc <xTaskIncrementTick+0x158>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a3e      	ldr	r2, [pc, #248]	@ (8008bf8 <xTaskIncrementTick+0x154>)
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	4a3e      	ldr	r2, [pc, #248]	@ (8008bfc <xTaskIncrementTick+0x158>)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	4b3e      	ldr	r3, [pc, #248]	@ (8008c00 <xTaskIncrementTick+0x15c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8008c00 <xTaskIncrementTick+0x15c>)
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	f000 faf0 	bl	80090f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b14:	4b3b      	ldr	r3, [pc, #236]	@ (8008c04 <xTaskIncrementTick+0x160>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d349      	bcc.n	8008bb2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b1e:	4b36      	ldr	r3, [pc, #216]	@ (8008bf8 <xTaskIncrementTick+0x154>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b28:	4b36      	ldr	r3, [pc, #216]	@ (8008c04 <xTaskIncrementTick+0x160>)
 8008b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2e:	601a      	str	r2, [r3, #0]
					break;
 8008b30:	e03f      	b.n	8008bb2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b32:	4b31      	ldr	r3, [pc, #196]	@ (8008bf8 <xTaskIncrementTick+0x154>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d203      	bcs.n	8008b52 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b4a:	4a2e      	ldr	r2, [pc, #184]	@ (8008c04 <xTaskIncrementTick+0x160>)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b50:	e02f      	b.n	8008bb2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fd00 	bl	800755c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d004      	beq.n	8008b6e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	3318      	adds	r3, #24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe fcf7 	bl	800755c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b72:	4b25      	ldr	r3, [pc, #148]	@ (8008c08 <xTaskIncrementTick+0x164>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d903      	bls.n	8008b82 <xTaskIncrementTick+0xde>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7e:	4a22      	ldr	r2, [pc, #136]	@ (8008c08 <xTaskIncrementTick+0x164>)
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b86:	4613      	mov	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008c0c <xTaskIncrementTick+0x168>)
 8008b90:	441a      	add	r2, r3
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	3304      	adds	r3, #4
 8008b96:	4619      	mov	r1, r3
 8008b98:	4610      	mov	r0, r2
 8008b9a:	f7fe fc82 	bl	80074a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c10 <xTaskIncrementTick+0x16c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d3b8      	bcc.n	8008b1e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008bac:	2301      	movs	r3, #1
 8008bae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bb0:	e7b5      	b.n	8008b1e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bb2:	4b17      	ldr	r3, [pc, #92]	@ (8008c10 <xTaskIncrementTick+0x16c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb8:	4914      	ldr	r1, [pc, #80]	@ (8008c0c <xTaskIncrementTick+0x168>)
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	440b      	add	r3, r1
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d907      	bls.n	8008bda <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	e004      	b.n	8008bda <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bd0:	4b10      	ldr	r3, [pc, #64]	@ (8008c14 <xTaskIncrementTick+0x170>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008c14 <xTaskIncrementTick+0x170>)
 8008bd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bda:	4b0f      	ldr	r3, [pc, #60]	@ (8008c18 <xTaskIncrementTick+0x174>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008be6:	697b      	ldr	r3, [r7, #20]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	200011dc 	.word	0x200011dc
 8008bf4:	200011b8 	.word	0x200011b8
 8008bf8:	2000116c 	.word	0x2000116c
 8008bfc:	20001170 	.word	0x20001170
 8008c00:	200011cc 	.word	0x200011cc
 8008c04:	200011d4 	.word	0x200011d4
 8008c08:	200011bc 	.word	0x200011bc
 8008c0c:	20000ce4 	.word	0x20000ce4
 8008c10:	20000ce0 	.word	0x20000ce0
 8008c14:	200011c4 	.word	0x200011c4
 8008c18:	200011c8 	.word	0x200011c8

08008c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c22:	4b2c      	ldr	r3, [pc, #176]	@ (8008cd4 <vTaskSwitchContext+0xb8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8008cd8 <vTaskSwitchContext+0xbc>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c30:	e049      	b.n	8008cc6 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8008c32:	4b29      	ldr	r3, [pc, #164]	@ (8008cd8 <vTaskSwitchContext+0xbc>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c38:	4b28      	ldr	r3, [pc, #160]	@ (8008cdc <vTaskSwitchContext+0xc0>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e013      	b.n	8008c68 <vTaskSwitchContext+0x4c>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10d      	bne.n	8008c62 <vTaskSwitchContext+0x46>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4a:	b672      	cpsid	i
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	b662      	cpsie	i
 8008c5a:	607b      	str	r3, [r7, #4]
}
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	e7fd      	b.n	8008c5e <vTaskSwitchContext+0x42>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	491d      	ldr	r1, [pc, #116]	@ (8008ce0 <vTaskSwitchContext+0xc4>)
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0e1      	beq.n	8008c40 <vTaskSwitchContext+0x24>
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4a16      	ldr	r2, [pc, #88]	@ (8008ce0 <vTaskSwitchContext+0xc4>)
 8008c88:	4413      	add	r3, r2
 8008c8a:	60bb      	str	r3, [r7, #8]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d104      	bne.n	8008cac <vTaskSwitchContext+0x90>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce4 <vTaskSwitchContext+0xc8>)
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	4a09      	ldr	r2, [pc, #36]	@ (8008cdc <vTaskSwitchContext+0xc0>)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cbc:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <vTaskSwitchContext+0xc8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3354      	adds	r3, #84	@ 0x54
 8008cc2:	4a09      	ldr	r2, [pc, #36]	@ (8008ce8 <vTaskSwitchContext+0xcc>)
 8008cc4:	6013      	str	r3, [r2, #0]
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	200011dc 	.word	0x200011dc
 8008cd8:	200011c8 	.word	0x200011c8
 8008cdc:	200011bc 	.word	0x200011bc
 8008ce0:	20000ce4 	.word	0x20000ce4
 8008ce4:	20000ce0 	.word	0x20000ce0
 8008ce8:	2000017c 	.word	0x2000017c

08008cec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10d      	bne.n	8008d18 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	b672      	cpsid	i
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	b662      	cpsie	i
 8008d10:	60fb      	str	r3, [r7, #12]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d18:	4b07      	ldr	r3, [pc, #28]	@ (8008d38 <vTaskPlaceOnEventList+0x4c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3318      	adds	r3, #24
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fe fbe2 	bl	80074ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d26:	2101      	movs	r1, #1
 8008d28:	6838      	ldr	r0, [r7, #0]
 8008d2a:	f000 fba9 	bl	8009480 <prvAddCurrentTaskToDelayedList>
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20000ce0 	.word	0x20000ce0

08008d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10d      	bne.n	8008d6a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	b672      	cpsid	i
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	b662      	cpsie	i
 8008d62:	617b      	str	r3, [r7, #20]
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	e7fd      	b.n	8008d66 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d94 <vTaskPlaceOnEventListRestricted+0x58>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4619      	mov	r1, r3
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7fe fb95 	bl	80074a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	68b8      	ldr	r0, [r7, #8]
 8008d88:	f000 fb7a 	bl	8009480 <prvAddCurrentTaskToDelayedList>
	}
 8008d8c:	bf00      	nop
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20000ce0 	.word	0x20000ce0

08008d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10d      	bne.n	8008dca <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	b672      	cpsid	i
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	b662      	cpsie	i
 8008dc2:	60fb      	str	r3, [r7, #12]
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	e7fd      	b.n	8008dc6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	3318      	adds	r3, #24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fbc4 	bl	800755c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8008e4c <xTaskRemoveFromEventList+0xb4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d11d      	bne.n	8008e18 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fbbb 	bl	800755c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dea:	4b19      	ldr	r3, [pc, #100]	@ (8008e50 <xTaskRemoveFromEventList+0xb8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d903      	bls.n	8008dfa <xTaskRemoveFromEventList+0x62>
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	4a16      	ldr	r2, [pc, #88]	@ (8008e50 <xTaskRemoveFromEventList+0xb8>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a13      	ldr	r2, [pc, #76]	@ (8008e54 <xTaskRemoveFromEventList+0xbc>)
 8008e08:	441a      	add	r2, r3
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fe fb46 	bl	80074a2 <vListInsertEnd>
 8008e16:	e005      	b.n	8008e24 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3318      	adds	r3, #24
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	480e      	ldr	r0, [pc, #56]	@ (8008e58 <xTaskRemoveFromEventList+0xc0>)
 8008e20:	f7fe fb3f 	bl	80074a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e28:	4b0c      	ldr	r3, [pc, #48]	@ (8008e5c <xTaskRemoveFromEventList+0xc4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d905      	bls.n	8008e3e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e32:	2301      	movs	r3, #1
 8008e34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e36:	4b0a      	ldr	r3, [pc, #40]	@ (8008e60 <xTaskRemoveFromEventList+0xc8>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e001      	b.n	8008e42 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e42:	697b      	ldr	r3, [r7, #20]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200011dc 	.word	0x200011dc
 8008e50:	200011bc 	.word	0x200011bc
 8008e54:	20000ce4 	.word	0x20000ce4
 8008e58:	20001174 	.word	0x20001174
 8008e5c:	20000ce0 	.word	0x20000ce0
 8008e60:	200011c8 	.word	0x200011c8

08008e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e6c:	4b06      	ldr	r3, [pc, #24]	@ (8008e88 <vTaskInternalSetTimeOutState+0x24>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e74:	4b05      	ldr	r3, [pc, #20]	@ (8008e8c <vTaskInternalSetTimeOutState+0x28>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	605a      	str	r2, [r3, #4]
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	200011cc 	.word	0x200011cc
 8008e8c:	200011b8 	.word	0x200011b8

08008e90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10d      	bne.n	8008ebc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea4:	b672      	cpsid	i
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	b662      	cpsie	i
 8008eb4:	613b      	str	r3, [r7, #16]
}
 8008eb6:	bf00      	nop
 8008eb8:	bf00      	nop
 8008eba:	e7fd      	b.n	8008eb8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10d      	bne.n	8008ede <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec6:	b672      	cpsid	i
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	b662      	cpsie	i
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008ede:	f001 f865 	bl	8009fac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f58 <xTaskCheckForTimeOut+0xc8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d102      	bne.n	8008f02 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e023      	b.n	8008f4a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	4b15      	ldr	r3, [pc, #84]	@ (8008f5c <xTaskCheckForTimeOut+0xcc>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d007      	beq.n	8008f1e <xTaskCheckForTimeOut+0x8e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d302      	bcc.n	8008f1e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	e015      	b.n	8008f4a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d20b      	bcs.n	8008f40 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	1ad2      	subs	r2, r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff ff95 	bl	8008e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61fb      	str	r3, [r7, #28]
 8008f3e:	e004      	b.n	8008f4a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f46:	2301      	movs	r3, #1
 8008f48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f4a:	f001 f865 	bl	800a018 <vPortExitCritical>

	return xReturn;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3720      	adds	r7, #32
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	200011b8 	.word	0x200011b8
 8008f5c:	200011cc 	.word	0x200011cc

08008f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f64:	4b03      	ldr	r3, [pc, #12]	@ (8008f74 <vTaskMissedYield+0x14>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	200011c8 	.word	0x200011c8

08008f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f80:	f000 f852 	bl	8009028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f84:	4b06      	ldr	r3, [pc, #24]	@ (8008fa0 <prvIdleTask+0x28>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d9f9      	bls.n	8008f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f8c:	4b05      	ldr	r3, [pc, #20]	@ (8008fa4 <prvIdleTask+0x2c>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f9c:	e7f0      	b.n	8008f80 <prvIdleTask+0x8>
 8008f9e:	bf00      	nop
 8008fa0:	20000ce4 	.word	0x20000ce4
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fae:	2300      	movs	r3, #0
 8008fb0:	607b      	str	r3, [r7, #4]
 8008fb2:	e00c      	b.n	8008fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4a12      	ldr	r2, [pc, #72]	@ (8009008 <prvInitialiseTaskLists+0x60>)
 8008fc0:	4413      	add	r3, r2
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe fa40 	bl	8007448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	607b      	str	r3, [r7, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b37      	cmp	r3, #55	@ 0x37
 8008fd2:	d9ef      	bls.n	8008fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fd4:	480d      	ldr	r0, [pc, #52]	@ (800900c <prvInitialiseTaskLists+0x64>)
 8008fd6:	f7fe fa37 	bl	8007448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fda:	480d      	ldr	r0, [pc, #52]	@ (8009010 <prvInitialiseTaskLists+0x68>)
 8008fdc:	f7fe fa34 	bl	8007448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fe0:	480c      	ldr	r0, [pc, #48]	@ (8009014 <prvInitialiseTaskLists+0x6c>)
 8008fe2:	f7fe fa31 	bl	8007448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fe6:	480c      	ldr	r0, [pc, #48]	@ (8009018 <prvInitialiseTaskLists+0x70>)
 8008fe8:	f7fe fa2e 	bl	8007448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fec:	480b      	ldr	r0, [pc, #44]	@ (800901c <prvInitialiseTaskLists+0x74>)
 8008fee:	f7fe fa2b 	bl	8007448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8009020 <prvInitialiseTaskLists+0x78>)
 8008ff4:	4a05      	ldr	r2, [pc, #20]	@ (800900c <prvInitialiseTaskLists+0x64>)
 8008ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <prvInitialiseTaskLists+0x7c>)
 8008ffa:	4a05      	ldr	r2, [pc, #20]	@ (8009010 <prvInitialiseTaskLists+0x68>)
 8008ffc:	601a      	str	r2, [r3, #0]
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20000ce4 	.word	0x20000ce4
 800900c:	20001144 	.word	0x20001144
 8009010:	20001158 	.word	0x20001158
 8009014:	20001174 	.word	0x20001174
 8009018:	20001188 	.word	0x20001188
 800901c:	200011a0 	.word	0x200011a0
 8009020:	2000116c 	.word	0x2000116c
 8009024:	20001170 	.word	0x20001170

08009028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800902e:	e019      	b.n	8009064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009030:	f000 ffbc 	bl	8009fac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009034:	4b10      	ldr	r3, [pc, #64]	@ (8009078 <prvCheckTasksWaitingTermination+0x50>)
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3304      	adds	r3, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe fa8b 	bl	800755c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009046:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <prvCheckTasksWaitingTermination+0x54>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3b01      	subs	r3, #1
 800904c:	4a0b      	ldr	r2, [pc, #44]	@ (800907c <prvCheckTasksWaitingTermination+0x54>)
 800904e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009050:	4b0b      	ldr	r3, [pc, #44]	@ (8009080 <prvCheckTasksWaitingTermination+0x58>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3b01      	subs	r3, #1
 8009056:	4a0a      	ldr	r2, [pc, #40]	@ (8009080 <prvCheckTasksWaitingTermination+0x58>)
 8009058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800905a:	f000 ffdd 	bl	800a018 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f810 	bl	8009084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009064:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <prvCheckTasksWaitingTermination+0x58>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e1      	bne.n	8009030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20001188 	.word	0x20001188
 800907c:	200011b4 	.word	0x200011b4
 8009080:	2000119c 	.word	0x2000119c

08009084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3354      	adds	r3, #84	@ 0x54
 8009090:	4618      	mov	r0, r3
 8009092:	f002 fa63 	bl	800b55c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800909c:	2b00      	cmp	r3, #0
 800909e:	d108      	bne.n	80090b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 f97d 	bl	800a3a4 <vPortFree>
				vPortFree( pxTCB );
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 f97a 	bl	800a3a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090b0:	e01b      	b.n	80090ea <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d103      	bne.n	80090c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 f971 	bl	800a3a4 <vPortFree>
	}
 80090c2:	e012      	b.n	80090ea <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d00d      	beq.n	80090ea <prvDeleteTCB+0x66>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	b672      	cpsid	i
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	b662      	cpsie	i
 80090e2:	60fb      	str	r3, [r7, #12]
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	e7fd      	b.n	80090e6 <prvDeleteTCB+0x62>
	}
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fa:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <prvResetNextTaskUnblockTime+0x38>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009104:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <prvResetNextTaskUnblockTime+0x3c>)
 8009106:	f04f 32ff 	mov.w	r2, #4294967295
 800910a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800910c:	e008      	b.n	8009120 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800910e:	4b07      	ldr	r3, [pc, #28]	@ (800912c <prvResetNextTaskUnblockTime+0x38>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	4a04      	ldr	r2, [pc, #16]	@ (8009130 <prvResetNextTaskUnblockTime+0x3c>)
 800911e:	6013      	str	r3, [r2, #0]
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	2000116c 	.word	0x2000116c
 8009130:	200011d4 	.word	0x200011d4

08009134 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800913a:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <xTaskGetCurrentTaskHandle+0x1c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009140:	687b      	ldr	r3, [r7, #4]
	}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	20000ce0 	.word	0x20000ce0

08009154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800915a:	4b0b      	ldr	r3, [pc, #44]	@ (8009188 <xTaskGetSchedulerState+0x34>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009162:	2301      	movs	r3, #1
 8009164:	607b      	str	r3, [r7, #4]
 8009166:	e008      	b.n	800917a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009168:	4b08      	ldr	r3, [pc, #32]	@ (800918c <xTaskGetSchedulerState+0x38>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009170:	2302      	movs	r3, #2
 8009172:	607b      	str	r3, [r7, #4]
 8009174:	e001      	b.n	800917a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009176:	2300      	movs	r3, #0
 8009178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800917a:	687b      	ldr	r3, [r7, #4]
	}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	200011c0 	.word	0x200011c0
 800918c:	200011dc 	.word	0x200011dc

08009190 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800919c:	2300      	movs	r3, #0
 800919e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d051      	beq.n	800924a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009254 <xTaskPriorityInherit+0xc4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d241      	bcs.n	8009238 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	db06      	blt.n	80091ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091bc:	4b25      	ldr	r3, [pc, #148]	@ (8009254 <xTaskPriorityInherit+0xc4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6959      	ldr	r1, [r3, #20]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4a1f      	ldr	r2, [pc, #124]	@ (8009258 <xTaskPriorityInherit+0xc8>)
 80091dc:	4413      	add	r3, r2
 80091de:	4299      	cmp	r1, r3
 80091e0:	d122      	bne.n	8009228 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe f9b8 	bl	800755c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091ec:	4b19      	ldr	r3, [pc, #100]	@ (8009254 <xTaskPriorityInherit+0xc4>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fa:	4b18      	ldr	r3, [pc, #96]	@ (800925c <xTaskPriorityInherit+0xcc>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d903      	bls.n	800920a <xTaskPriorityInherit+0x7a>
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	4a15      	ldr	r2, [pc, #84]	@ (800925c <xTaskPriorityInherit+0xcc>)
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4a10      	ldr	r2, [pc, #64]	@ (8009258 <xTaskPriorityInherit+0xc8>)
 8009218:	441a      	add	r2, r3
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	3304      	adds	r3, #4
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f7fe f93e 	bl	80074a2 <vListInsertEnd>
 8009226:	e004      	b.n	8009232 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009228:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <xTaskPriorityInherit+0xc4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009232:	2301      	movs	r3, #1
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	e008      	b.n	800924a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800923c:	4b05      	ldr	r3, [pc, #20]	@ (8009254 <xTaskPriorityInherit+0xc4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009242:	429a      	cmp	r2, r3
 8009244:	d201      	bcs.n	800924a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009246:	2301      	movs	r3, #1
 8009248:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800924a:	68fb      	ldr	r3, [r7, #12]
	}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000ce0 	.word	0x20000ce0
 8009258:	20000ce4 	.word	0x20000ce4
 800925c:	200011bc 	.word	0x200011bc

08009260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d05c      	beq.n	8009330 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009276:	4b31      	ldr	r3, [pc, #196]	@ (800933c <xTaskPriorityDisinherit+0xdc>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	429a      	cmp	r2, r3
 800927e:	d00d      	beq.n	800929c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009284:	b672      	cpsid	i
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	b662      	cpsie	i
 8009294:	60fb      	str	r3, [r7, #12]
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	e7fd      	b.n	8009298 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10d      	bne.n	80092c0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	b672      	cpsid	i
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	b662      	cpsie	i
 80092b8:	60bb      	str	r3, [r7, #8]
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	e7fd      	b.n	80092bc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c4:	1e5a      	subs	r2, r3, #1
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d02c      	beq.n	8009330 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d128      	bne.n	8009330 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe f93a 	bl	800755c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009300:	4b0f      	ldr	r3, [pc, #60]	@ (8009340 <xTaskPriorityDisinherit+0xe0>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	d903      	bls.n	8009310 <xTaskPriorityDisinherit+0xb0>
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930c:	4a0c      	ldr	r2, [pc, #48]	@ (8009340 <xTaskPriorityDisinherit+0xe0>)
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4a09      	ldr	r2, [pc, #36]	@ (8009344 <xTaskPriorityDisinherit+0xe4>)
 800931e:	441a      	add	r2, r3
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	3304      	adds	r3, #4
 8009324:	4619      	mov	r1, r3
 8009326:	4610      	mov	r0, r2
 8009328:	f7fe f8bb 	bl	80074a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800932c:	2301      	movs	r3, #1
 800932e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009330:	697b      	ldr	r3, [r7, #20]
	}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000ce0 	.word	0x20000ce0
 8009340:	200011bc 	.word	0x200011bc
 8009344:	20000ce4 	.word	0x20000ce4

08009348 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009356:	2301      	movs	r3, #1
 8009358:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d070      	beq.n	8009442 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936c:	b672      	cpsid	i
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	b662      	cpsie	i
 800937c:	60fb      	str	r3, [r7, #12]
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d902      	bls.n	8009394 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	e002      	b.n	800939a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009398:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d04e      	beq.n	8009442 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d149      	bne.n	8009442 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093ae:	4b27      	ldr	r3, [pc, #156]	@ (800944c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d10d      	bne.n	80093d4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	b672      	cpsid	i
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	b662      	cpsie	i
 80093cc:	60bb      	str	r3, [r7, #8]
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	db04      	blt.n	80093f2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	6959      	ldr	r1, [r3, #20]
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4a13      	ldr	r2, [pc, #76]	@ (8009450 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009402:	4413      	add	r3, r2
 8009404:	4299      	cmp	r1, r3
 8009406:	d11c      	bne.n	8009442 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	3304      	adds	r3, #4
 800940c:	4618      	mov	r0, r3
 800940e:	f7fe f8a5 	bl	800755c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009416:	4b0f      	ldr	r3, [pc, #60]	@ (8009454 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d903      	bls.n	8009426 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009422:	4a0c      	ldr	r2, [pc, #48]	@ (8009454 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4a07      	ldr	r2, [pc, #28]	@ (8009450 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009434:	441a      	add	r2, r3
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	3304      	adds	r3, #4
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f7fe f830 	bl	80074a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009442:	bf00      	nop
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000ce0 	.word	0x20000ce0
 8009450:	20000ce4 	.word	0x20000ce4
 8009454:	200011bc 	.word	0x200011bc

08009458 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800945c:	4b07      	ldr	r3, [pc, #28]	@ (800947c <pvTaskIncrementMutexHeldCount+0x24>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d004      	beq.n	800946e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009464:	4b05      	ldr	r3, [pc, #20]	@ (800947c <pvTaskIncrementMutexHeldCount+0x24>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800946a:	3201      	adds	r2, #1
 800946c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800946e:	4b03      	ldr	r3, [pc, #12]	@ (800947c <pvTaskIncrementMutexHeldCount+0x24>)
 8009470:	681b      	ldr	r3, [r3, #0]
	}
 8009472:	4618      	mov	r0, r3
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	20000ce0 	.word	0x20000ce0

08009480 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800948a:	4b21      	ldr	r3, [pc, #132]	@ (8009510 <prvAddCurrentTaskToDelayedList+0x90>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009490:	4b20      	ldr	r3, [pc, #128]	@ (8009514 <prvAddCurrentTaskToDelayedList+0x94>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3304      	adds	r3, #4
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe f860 	bl	800755c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a2:	d10a      	bne.n	80094ba <prvAddCurrentTaskToDelayedList+0x3a>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009514 <prvAddCurrentTaskToDelayedList+0x94>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4819      	ldr	r0, [pc, #100]	@ (8009518 <prvAddCurrentTaskToDelayedList+0x98>)
 80094b4:	f7fd fff5 	bl	80074a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094b8:	e026      	b.n	8009508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4413      	add	r3, r2
 80094c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094c2:	4b14      	ldr	r3, [pc, #80]	@ (8009514 <prvAddCurrentTaskToDelayedList+0x94>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d209      	bcs.n	80094e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094d2:	4b12      	ldr	r3, [pc, #72]	@ (800951c <prvAddCurrentTaskToDelayedList+0x9c>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009514 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3304      	adds	r3, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f7fe f803 	bl	80074ea <vListInsert>
}
 80094e4:	e010      	b.n	8009508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009514 <prvAddCurrentTaskToDelayedList+0x94>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fd fff9 	bl	80074ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d202      	bcs.n	8009508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009502:	4a08      	ldr	r2, [pc, #32]	@ (8009524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6013      	str	r3, [r2, #0]
}
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200011b8 	.word	0x200011b8
 8009514:	20000ce0 	.word	0x20000ce0
 8009518:	200011a0 	.word	0x200011a0
 800951c:	20001170 	.word	0x20001170
 8009520:	2000116c 	.word	0x2000116c
 8009524:	200011d4 	.word	0x200011d4

08009528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08a      	sub	sp, #40	@ 0x28
 800952c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009532:	f000 fbc5 	bl	8009cc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009536:	4b1e      	ldr	r3, [pc, #120]	@ (80095b0 <xTimerCreateTimerTask+0x88>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d021      	beq.n	8009582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009546:	1d3a      	adds	r2, r7, #4
 8009548:	f107 0108 	add.w	r1, r7, #8
 800954c:	f107 030c 	add.w	r3, r7, #12
 8009550:	4618      	mov	r0, r3
 8009552:	f7fd ff5f 	bl	8007414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	9202      	str	r2, [sp, #8]
 800955e:	9301      	str	r3, [sp, #4]
 8009560:	2306      	movs	r3, #6
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	2300      	movs	r3, #0
 8009566:	460a      	mov	r2, r1
 8009568:	4912      	ldr	r1, [pc, #72]	@ (80095b4 <xTimerCreateTimerTask+0x8c>)
 800956a:	4813      	ldr	r0, [pc, #76]	@ (80095b8 <xTimerCreateTimerTask+0x90>)
 800956c:	f7fe ff6a 	bl	8008444 <xTaskCreateStatic>
 8009570:	4603      	mov	r3, r0
 8009572:	4a12      	ldr	r2, [pc, #72]	@ (80095bc <xTimerCreateTimerTask+0x94>)
 8009574:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009576:	4b11      	ldr	r3, [pc, #68]	@ (80095bc <xTimerCreateTimerTask+0x94>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800957e:	2301      	movs	r3, #1
 8009580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10d      	bne.n	80095a4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958c:	b672      	cpsid	i
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	b662      	cpsie	i
 800959c:	613b      	str	r3, [r7, #16]
}
 800959e:	bf00      	nop
 80095a0:	bf00      	nop
 80095a2:	e7fd      	b.n	80095a0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80095a4:	697b      	ldr	r3, [r7, #20]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20001210 	.word	0x20001210
 80095b4:	0800ef48 	.word	0x0800ef48
 80095b8:	08009849 	.word	0x08009849
 80095bc:	20001214 	.word	0x20001214

080095c0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af02      	add	r7, sp, #8
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80095ce:	202c      	movs	r0, #44	@ 0x2c
 80095d0:	f000 fe1a 	bl	800a208 <pvPortMalloc>
 80095d4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00d      	beq.n	80095f8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 f849 	bl	800968a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80095f8:	697b      	ldr	r3, [r7, #20]
	}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009602:	b580      	push	{r7, lr}
 8009604:	b08a      	sub	sp, #40	@ 0x28
 8009606:	af02      	add	r7, sp, #8
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009610:	232c      	movs	r3, #44	@ 0x2c
 8009612:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2b2c      	cmp	r3, #44	@ 0x2c
 8009618:	d00d      	beq.n	8009636 <xTimerCreateStatic+0x34>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961e:	b672      	cpsid	i
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	b662      	cpsie	i
 800962e:	61bb      	str	r3, [r7, #24]
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	e7fd      	b.n	8009632 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009636:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10d      	bne.n	800965a <xTimerCreateStatic+0x58>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009642:	b672      	cpsid	i
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	b662      	cpsie	i
 8009652:	617b      	str	r3, [r7, #20]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800965a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00d      	beq.n	8009680 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 f805 	bl	800968a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009680:	69fb      	ldr	r3, [r7, #28]
	}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b086      	sub	sp, #24
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10d      	bne.n	80096ba <prvInitialiseNewTimer+0x30>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	b672      	cpsid	i
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	b662      	cpsie	i
 80096b2:	617b      	str	r3, [r7, #20]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 80096ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01e      	beq.n	80096fe <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80096c0:	f000 fafe 	bl	8009cc0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	6a3a      	ldr	r2, [r7, #32]
 80096da:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	3304      	adds	r3, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fed1 	bl	8007488 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d008      	beq.n	80096fe <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80096ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096f2:	f043 0304 	orr.w	r3, r3, #4
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80096fe:	bf00      	nop
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08a      	sub	sp, #40	@ 0x28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009716:	2300      	movs	r3, #0
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10d      	bne.n	800973c <xTimerGenericCommand+0x34>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	b672      	cpsid	i
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	b662      	cpsie	i
 8009734:	623b      	str	r3, [r7, #32]
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	e7fd      	b.n	8009738 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800973c:	4b19      	ldr	r3, [pc, #100]	@ (80097a4 <xTimerGenericCommand+0x9c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d02a      	beq.n	800979a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b05      	cmp	r3, #5
 8009754:	dc18      	bgt.n	8009788 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009756:	f7ff fcfd 	bl	8009154 <xTaskGetSchedulerState>
 800975a:	4603      	mov	r3, r0
 800975c:	2b02      	cmp	r3, #2
 800975e:	d109      	bne.n	8009774 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009760:	4b10      	ldr	r3, [pc, #64]	@ (80097a4 <xTimerGenericCommand+0x9c>)
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	f107 0110 	add.w	r1, r7, #16
 8009768:	2300      	movs	r3, #0
 800976a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800976c:	f7fe f936 	bl	80079dc <xQueueGenericSend>
 8009770:	6278      	str	r0, [r7, #36]	@ 0x24
 8009772:	e012      	b.n	800979a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009774:	4b0b      	ldr	r3, [pc, #44]	@ (80097a4 <xTimerGenericCommand+0x9c>)
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	f107 0110 	add.w	r1, r7, #16
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	f7fe f92c 	bl	80079dc <xQueueGenericSend>
 8009784:	6278      	str	r0, [r7, #36]	@ 0x24
 8009786:	e008      	b.n	800979a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009788:	4b06      	ldr	r3, [pc, #24]	@ (80097a4 <xTimerGenericCommand+0x9c>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	f107 0110 	add.w	r1, r7, #16
 8009790:	2300      	movs	r3, #0
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	f7fe fa2c 	bl	8007bf0 <xQueueGenericSendFromISR>
 8009798:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800979c:	4618      	mov	r0, r3
 800979e:	3728      	adds	r7, #40	@ 0x28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20001210 	.word	0x20001210

080097a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b2:	4b24      	ldr	r3, [pc, #144]	@ (8009844 <prvProcessExpiredTimer+0x9c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	3304      	adds	r3, #4
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd fecb 	bl	800755c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d025      	beq.n	8009820 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	18d1      	adds	r1, r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	6978      	ldr	r0, [r7, #20]
 80097e2:	f000 f8d7 	bl	8009994 <prvInsertTimerInActiveList>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d022      	beq.n	8009832 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097ec:	2300      	movs	r3, #0
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	2300      	movs	r3, #0
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	2100      	movs	r1, #0
 80097f6:	6978      	ldr	r0, [r7, #20]
 80097f8:	f7ff ff86 	bl	8009708 <xTimerGenericCommand>
 80097fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d116      	bne.n	8009832 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009808:	b672      	cpsid	i
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	b662      	cpsie	i
 8009818:	60fb      	str	r3, [r7, #12]
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009826:	f023 0301 	bic.w	r3, r3, #1
 800982a:	b2da      	uxtb	r2, r3
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	6978      	ldr	r0, [r7, #20]
 8009838:	4798      	blx	r3
}
 800983a:	bf00      	nop
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20001208 	.word	0x20001208

08009848 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009850:	f107 0308 	add.w	r3, r7, #8
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f859 	bl	800990c <prvGetNextExpireTime>
 800985a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4619      	mov	r1, r3
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f805 	bl	8009870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009866:	f000 f8d7 	bl	8009a18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800986a:	bf00      	nop
 800986c:	e7f0      	b.n	8009850 <prvTimerTask+0x8>
	...

08009870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800987a:	f7ff f855 	bl	8008928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800987e:	f107 0308 	add.w	r3, r7, #8
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f866 	bl	8009954 <prvSampleTimeNow>
 8009888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d130      	bne.n	80098f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <prvProcessTimerOrBlockTask+0x3c>
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	429a      	cmp	r2, r3
 800989c:	d806      	bhi.n	80098ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800989e:	f7ff f851 	bl	8008944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ff7f 	bl	80097a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098aa:	e024      	b.n	80098f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098b2:	4b13      	ldr	r3, [pc, #76]	@ (8009900 <prvProcessTimerOrBlockTask+0x90>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <prvProcessTimerOrBlockTask+0x50>
 80098bc:	2301      	movs	r3, #1
 80098be:	e000      	b.n	80098c2 <prvProcessTimerOrBlockTask+0x52>
 80098c0:	2300      	movs	r3, #0
 80098c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009904 <prvProcessTimerOrBlockTask+0x94>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4619      	mov	r1, r3
 80098d2:	f7fe fd83 	bl	80083dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098d6:	f7ff f835 	bl	8008944 <xTaskResumeAll>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098e0:	4b09      	ldr	r3, [pc, #36]	@ (8009908 <prvProcessTimerOrBlockTask+0x98>)
 80098e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
}
 80098f0:	e001      	b.n	80098f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098f2:	f7ff f827 	bl	8008944 <xTaskResumeAll>
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	2000120c 	.word	0x2000120c
 8009904:	20001210 	.word	0x20001210
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009914:	4b0e      	ldr	r3, [pc, #56]	@ (8009950 <prvGetNextExpireTime+0x44>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <prvGetNextExpireTime+0x16>
 800991e:	2201      	movs	r2, #1
 8009920:	e000      	b.n	8009924 <prvGetNextExpireTime+0x18>
 8009922:	2200      	movs	r2, #0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <prvGetNextExpireTime+0x44>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e001      	b.n	8009940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009940:	68fb      	ldr	r3, [r7, #12]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	20001208 	.word	0x20001208

08009954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800995c:	f7ff f892 	bl	8008a84 <xTaskGetTickCount>
 8009960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009962:	4b0b      	ldr	r3, [pc, #44]	@ (8009990 <prvSampleTimeNow+0x3c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	429a      	cmp	r2, r3
 800996a:	d205      	bcs.n	8009978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800996c:	f000 f940 	bl	8009bf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e002      	b.n	800997e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800997e:	4a04      	ldr	r2, [pc, #16]	@ (8009990 <prvSampleTimeNow+0x3c>)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009984:	68fb      	ldr	r3, [r7, #12]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20001218 	.word	0x20001218

08009994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d812      	bhi.n	80099e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d302      	bcc.n	80099ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e01b      	b.n	8009a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099ce:	4b10      	ldr	r3, [pc, #64]	@ (8009a10 <prvInsertTimerInActiveList+0x7c>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3304      	adds	r3, #4
 80099d6:	4619      	mov	r1, r3
 80099d8:	4610      	mov	r0, r2
 80099da:	f7fd fd86 	bl	80074ea <vListInsert>
 80099de:	e012      	b.n	8009a06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d206      	bcs.n	80099f6 <prvInsertTimerInActiveList+0x62>
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099f0:	2301      	movs	r3, #1
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	e007      	b.n	8009a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099f6:	4b07      	ldr	r3, [pc, #28]	@ (8009a14 <prvInsertTimerInActiveList+0x80>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3304      	adds	r3, #4
 80099fe:	4619      	mov	r1, r3
 8009a00:	4610      	mov	r0, r2
 8009a02:	f7fd fd72 	bl	80074ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a06:	697b      	ldr	r3, [r7, #20]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	2000120c 	.word	0x2000120c
 8009a14:	20001208 	.word	0x20001208

08009a18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08e      	sub	sp, #56	@ 0x38
 8009a1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a1e:	e0d4      	b.n	8009bca <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da1b      	bge.n	8009a5e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a26:	1d3b      	adds	r3, r7, #4
 8009a28:	3304      	adds	r3, #4
 8009a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10d      	bne.n	8009a4e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	b672      	cpsid	i
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	b662      	cpsie	i
 8009a46:	61fb      	str	r3, [r7, #28]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a54:	6850      	ldr	r0, [r2, #4]
 8009a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a58:	6892      	ldr	r2, [r2, #8]
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f2c0 80b2 	blt.w	8009bca <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a74:	3304      	adds	r3, #4
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd fd70 	bl	800755c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff ff68 	bl	8009954 <prvSampleTimeNow>
 8009a84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b09      	cmp	r3, #9
 8009a8a:	f200 809b 	bhi.w	8009bc4 <prvProcessReceivedCommands+0x1ac>
 8009a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a94 <prvProcessReceivedCommands+0x7c>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009abd 	.word	0x08009abd
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009abd 	.word	0x08009abd
 8009aa0:	08009b37 	.word	0x08009b37
 8009aa4:	08009b4b 	.word	0x08009b4b
 8009aa8:	08009b9b 	.word	0x08009b9b
 8009aac:	08009abd 	.word	0x08009abd
 8009ab0:	08009abd 	.word	0x08009abd
 8009ab4:	08009b37 	.word	0x08009b37
 8009ab8:	08009b4b 	.word	0x08009b4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	18d1      	adds	r1, r2, r3
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009adc:	f7ff ff5a 	bl	8009994 <prvInsertTimerInActiveList>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d070      	beq.n	8009bc8 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d065      	beq.n	8009bc8 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	441a      	add	r2, r3
 8009b04:	2300      	movs	r3, #0
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b0e:	f7ff fdfb 	bl	8009708 <xTimerGenericCommand>
 8009b12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d156      	bne.n	8009bc8 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	b672      	cpsid	i
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	b662      	cpsie	i
 8009b2e:	61bb      	str	r3, [r7, #24]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b3c:	f023 0301 	bic.w	r3, r3, #1
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b48:	e03f      	b.n	8009bca <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10d      	bne.n	8009b86 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6e:	b672      	cpsid	i
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	b662      	cpsie	i
 8009b7e:	617b      	str	r3, [r7, #20]
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	e7fd      	b.n	8009b82 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	18d1      	adds	r1, r2, r3
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b94:	f7ff fefe 	bl	8009994 <prvInsertTimerInActiveList>
					break;
 8009b98:	e017      	b.n	8009bca <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d103      	bne.n	8009bb0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009ba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009baa:	f000 fbfb 	bl	800a3a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009bae:	e00c      	b.n	8009bca <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bb6:	f023 0301 	bic.w	r3, r3, #1
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bc2:	e002      	b.n	8009bca <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <prvProcessReceivedCommands+0x1b2>
					break;
 8009bc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bca:	4b08      	ldr	r3, [pc, #32]	@ (8009bec <prvProcessReceivedCommands+0x1d4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	1d39      	adds	r1, r7, #4
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe f8b0 	bl	8007d38 <xQueueReceive>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f47f af20 	bne.w	8009a20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	3730      	adds	r7, #48	@ 0x30
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20001210 	.word	0x20001210

08009bf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bf6:	e04b      	b.n	8009c90 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8009cb8 <prvSwitchTimerLists+0xc8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c02:	4b2d      	ldr	r3, [pc, #180]	@ (8009cb8 <prvSwitchTimerLists+0xc8>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fd fca3 	bl	800755c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d031      	beq.n	8009c90 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	4413      	add	r3, r2
 8009c34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d90e      	bls.n	8009c5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb8 <prvSwitchTimerLists+0xc8>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4619      	mov	r1, r3
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7fd fc48 	bl	80074ea <vListInsert>
 8009c5a:	e019      	b.n	8009c90 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	2100      	movs	r1, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff fd4e 	bl	8009708 <xTimerGenericCommand>
 8009c6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10d      	bne.n	8009c90 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c78:	b672      	cpsid	i
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	b662      	cpsie	i
 8009c88:	603b      	str	r3, [r7, #0]
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	e7fd      	b.n	8009c8c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c90:	4b09      	ldr	r3, [pc, #36]	@ (8009cb8 <prvSwitchTimerLists+0xc8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1ae      	bne.n	8009bf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c9a:	4b07      	ldr	r3, [pc, #28]	@ (8009cb8 <prvSwitchTimerLists+0xc8>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ca0:	4b06      	ldr	r3, [pc, #24]	@ (8009cbc <prvSwitchTimerLists+0xcc>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a04      	ldr	r2, [pc, #16]	@ (8009cb8 <prvSwitchTimerLists+0xc8>)
 8009ca6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ca8:	4a04      	ldr	r2, [pc, #16]	@ (8009cbc <prvSwitchTimerLists+0xcc>)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	6013      	str	r3, [r2, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20001208 	.word	0x20001208
 8009cbc:	2000120c 	.word	0x2000120c

08009cc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cc6:	f000 f971 	bl	8009fac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cca:	4b15      	ldr	r3, [pc, #84]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d120      	bne.n	8009d14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cd2:	4814      	ldr	r0, [pc, #80]	@ (8009d24 <prvCheckForValidListAndQueue+0x64>)
 8009cd4:	f7fd fbb8 	bl	8007448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cd8:	4813      	ldr	r0, [pc, #76]	@ (8009d28 <prvCheckForValidListAndQueue+0x68>)
 8009cda:	f7fd fbb5 	bl	8007448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cde:	4b13      	ldr	r3, [pc, #76]	@ (8009d2c <prvCheckForValidListAndQueue+0x6c>)
 8009ce0:	4a10      	ldr	r2, [pc, #64]	@ (8009d24 <prvCheckForValidListAndQueue+0x64>)
 8009ce2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ce4:	4b12      	ldr	r3, [pc, #72]	@ (8009d30 <prvCheckForValidListAndQueue+0x70>)
 8009ce6:	4a10      	ldr	r2, [pc, #64]	@ (8009d28 <prvCheckForValidListAndQueue+0x68>)
 8009ce8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cea:	2300      	movs	r3, #0
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	4b11      	ldr	r3, [pc, #68]	@ (8009d34 <prvCheckForValidListAndQueue+0x74>)
 8009cf0:	4a11      	ldr	r2, [pc, #68]	@ (8009d38 <prvCheckForValidListAndQueue+0x78>)
 8009cf2:	2110      	movs	r1, #16
 8009cf4:	200a      	movs	r0, #10
 8009cf6:	f7fd fcc7 	bl	8007688 <xQueueGenericCreateStatic>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4a08      	ldr	r2, [pc, #32]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009cfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d00:	4b07      	ldr	r3, [pc, #28]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d08:	4b05      	ldr	r3, [pc, #20]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	490b      	ldr	r1, [pc, #44]	@ (8009d3c <prvCheckForValidListAndQueue+0x7c>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fb3a 	bl	8008388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d14:	f000 f980 	bl	800a018 <vPortExitCritical>
}
 8009d18:	bf00      	nop
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20001210 	.word	0x20001210
 8009d24:	200011e0 	.word	0x200011e0
 8009d28:	200011f4 	.word	0x200011f4
 8009d2c:	20001208 	.word	0x20001208
 8009d30:	2000120c 	.word	0x2000120c
 8009d34:	200012bc 	.word	0x200012bc
 8009d38:	2000121c 	.word	0x2000121c
 8009d3c:	0800ef50 	.word	0x0800ef50

08009d40 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10d      	bne.n	8009d6e <pvTimerGetTimerID+0x2e>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d56:	b672      	cpsid	i
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	b662      	cpsie	i
 8009d66:	60fb      	str	r3, [r7, #12]
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	e7fd      	b.n	8009d6a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8009d6e:	f000 f91d 	bl	8009fac <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009d78:	f000 f94e 	bl	800a018 <vPortExitCritical>

	return pvReturn;
 8009d7c:	693b      	ldr	r3, [r7, #16]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3b04      	subs	r3, #4
 8009d98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3b04      	subs	r3, #4
 8009da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f023 0201 	bic.w	r2, r3, #1
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3b04      	subs	r3, #4
 8009db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009db8:	4a0c      	ldr	r2, [pc, #48]	@ (8009dec <pxPortInitialiseStack+0x64>)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3b14      	subs	r3, #20
 8009dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3b04      	subs	r3, #4
 8009dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f06f 0202 	mvn.w	r2, #2
 8009dd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3b20      	subs	r3, #32
 8009ddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dde:	68fb      	ldr	r3, [r7, #12]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	08009df1 	.word	0x08009df1

08009df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dfa:	4b15      	ldr	r3, [pc, #84]	@ (8009e50 <prvTaskExitError+0x60>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e02:	d00d      	beq.n	8009e20 <prvTaskExitError+0x30>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e08:	b672      	cpsid	i
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	b662      	cpsie	i
 8009e18:	60fb      	str	r3, [r7, #12]
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <prvTaskExitError+0x2c>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e24:	b672      	cpsid	i
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	b662      	cpsie	i
 8009e34:	60bb      	str	r3, [r7, #8]
}
 8009e36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e38:	bf00      	nop
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0fc      	beq.n	8009e3a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	2000016c 	.word	0x2000016c
	...

08009e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e60:	4b07      	ldr	r3, [pc, #28]	@ (8009e80 <pxCurrentTCBConst2>)
 8009e62:	6819      	ldr	r1, [r3, #0]
 8009e64:	6808      	ldr	r0, [r1, #0]
 8009e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6a:	f380 8809 	msr	PSP, r0
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f04f 0000 	mov.w	r0, #0
 8009e76:	f380 8811 	msr	BASEPRI, r0
 8009e7a:	4770      	bx	lr
 8009e7c:	f3af 8000 	nop.w

08009e80 <pxCurrentTCBConst2>:
 8009e80:	20000ce0 	.word	0x20000ce0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop

08009e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e88:	4808      	ldr	r0, [pc, #32]	@ (8009eac <prvPortStartFirstTask+0x24>)
 8009e8a:	6800      	ldr	r0, [r0, #0]
 8009e8c:	6800      	ldr	r0, [r0, #0]
 8009e8e:	f380 8808 	msr	MSP, r0
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f380 8814 	msr	CONTROL, r0
 8009e9a:	b662      	cpsie	i
 8009e9c:	b661      	cpsie	f
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	df00      	svc	0
 8009ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eaa:	bf00      	nop
 8009eac:	e000ed08 	.word	0xe000ed08

08009eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eb6:	4b37      	ldr	r3, [pc, #220]	@ (8009f94 <xPortStartScheduler+0xe4>)
 8009eb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	22ff      	movs	r2, #255	@ 0xff
 8009ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	4b2f      	ldr	r3, [pc, #188]	@ (8009f98 <xPortStartScheduler+0xe8>)
 8009edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ede:	4b2f      	ldr	r3, [pc, #188]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009ee0:	2207      	movs	r2, #7
 8009ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ee4:	e009      	b.n	8009efa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	4a2b      	ldr	r2, [pc, #172]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f02:	2b80      	cmp	r3, #128	@ 0x80
 8009f04:	d0ef      	beq.n	8009ee6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f06:	4b25      	ldr	r3, [pc, #148]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1c3 0307 	rsb	r3, r3, #7
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d00d      	beq.n	8009f2e <xPortStartScheduler+0x7e>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f16:	b672      	cpsid	i
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	b662      	cpsie	i
 8009f26:	60bb      	str	r3, [r7, #8]
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	e7fd      	b.n	8009f2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	021b      	lsls	r3, r3, #8
 8009f34:	4a19      	ldr	r2, [pc, #100]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f38:	4b18      	ldr	r3, [pc, #96]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f40:	4a16      	ldr	r2, [pc, #88]	@ (8009f9c <xPortStartScheduler+0xec>)
 8009f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f4c:	4b14      	ldr	r3, [pc, #80]	@ (8009fa0 <xPortStartScheduler+0xf0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a13      	ldr	r2, [pc, #76]	@ (8009fa0 <xPortStartScheduler+0xf0>)
 8009f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f58:	4b11      	ldr	r3, [pc, #68]	@ (8009fa0 <xPortStartScheduler+0xf0>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a10      	ldr	r2, [pc, #64]	@ (8009fa0 <xPortStartScheduler+0xf0>)
 8009f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f64:	f000 f8dc 	bl	800a120 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f68:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa4 <xPortStartScheduler+0xf4>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f6e:	f000 f8fb 	bl	800a168 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f72:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <xPortStartScheduler+0xf8>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a0c      	ldr	r2, [pc, #48]	@ (8009fa8 <xPortStartScheduler+0xf8>)
 8009f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f7e:	f7ff ff83 	bl	8009e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f82:	f7fe fe4b 	bl	8008c1c <vTaskSwitchContext>
	prvTaskExitError();
 8009f86:	f7ff ff33 	bl	8009df0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	e000e400 	.word	0xe000e400
 8009f98:	2000130c 	.word	0x2000130c
 8009f9c:	20001310 	.word	0x20001310
 8009fa0:	e000ed20 	.word	0xe000ed20
 8009fa4:	2000016c 	.word	0x2000016c
 8009fa8:	e000ef34 	.word	0xe000ef34

08009fac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb6:	b672      	cpsid	i
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	b662      	cpsie	i
 8009fc6:	607b      	str	r3, [r7, #4]
}
 8009fc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fca:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <vPortEnterCritical+0x64>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	4a0f      	ldr	r2, [pc, #60]	@ (800a010 <vPortEnterCritical+0x64>)
 8009fd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fd4:	4b0e      	ldr	r3, [pc, #56]	@ (800a010 <vPortEnterCritical+0x64>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d112      	bne.n	800a002 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fdc:	4b0d      	ldr	r3, [pc, #52]	@ (800a014 <vPortEnterCritical+0x68>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00d      	beq.n	800a002 <vPortEnterCritical+0x56>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fea:	b672      	cpsid	i
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	b662      	cpsie	i
 8009ffa:	603b      	str	r3, [r7, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <vPortEnterCritical+0x52>
	}
}
 800a002:	bf00      	nop
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	2000016c 	.word	0x2000016c
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a01e:	4b13      	ldr	r3, [pc, #76]	@ (800a06c <vPortExitCritical+0x54>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10d      	bne.n	800a042 <vPortExitCritical+0x2a>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02a:	b672      	cpsid	i
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	b662      	cpsie	i
 800a03a:	607b      	str	r3, [r7, #4]
}
 800a03c:	bf00      	nop
 800a03e:	bf00      	nop
 800a040:	e7fd      	b.n	800a03e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a042:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <vPortExitCritical+0x54>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3b01      	subs	r3, #1
 800a048:	4a08      	ldr	r2, [pc, #32]	@ (800a06c <vPortExitCritical+0x54>)
 800a04a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a04c:	4b07      	ldr	r3, [pc, #28]	@ (800a06c <vPortExitCritical+0x54>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d105      	bne.n	800a060 <vPortExitCritical+0x48>
 800a054:	2300      	movs	r3, #0
 800a056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	f383 8811 	msr	BASEPRI, r3
}
 800a05e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	2000016c 	.word	0x2000016c

0800a070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a070:	f3ef 8009 	mrs	r0, PSP
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	4b15      	ldr	r3, [pc, #84]	@ (800a0d0 <pxCurrentTCBConst>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f01e 0f10 	tst.w	lr, #16
 800a080:	bf08      	it	eq
 800a082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	6010      	str	r0, [r2, #0]
 800a08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a094:	b672      	cpsid	i
 800a096:	f380 8811 	msr	BASEPRI, r0
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	b662      	cpsie	i
 800a0a4:	f7fe fdba 	bl	8008c1c <vTaskSwitchContext>
 800a0a8:	f04f 0000 	mov.w	r0, #0
 800a0ac:	f380 8811 	msr	BASEPRI, r0
 800a0b0:	bc09      	pop	{r0, r3}
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f01e 0f10 	tst.w	lr, #16
 800a0be:	bf08      	it	eq
 800a0c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0c4:	f380 8809 	msr	PSP, r0
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop

0800a0d0 <pxCurrentTCBConst>:
 800a0d0:	20000ce0 	.word	0x20000ce0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e2:	b672      	cpsid	i
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	b662      	cpsie	i
 800a0f2:	607b      	str	r3, [r7, #4]
}
 800a0f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0f6:	f7fe fcd5 	bl	8008aa4 <xTaskIncrementTick>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d003      	beq.n	800a108 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a100:	4b06      	ldr	r3, [pc, #24]	@ (800a11c <SysTick_Handler+0x44>)
 800a102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	2300      	movs	r3, #0
 800a10a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	f383 8811 	msr	BASEPRI, r3
}
 800a112:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	e000ed04 	.word	0xe000ed04

0800a120 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a124:	4b0b      	ldr	r3, [pc, #44]	@ (800a154 <vPortSetupTimerInterrupt+0x34>)
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a12a:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <vPortSetupTimerInterrupt+0x38>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a130:	4b0a      	ldr	r3, [pc, #40]	@ (800a15c <vPortSetupTimerInterrupt+0x3c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a0a      	ldr	r2, [pc, #40]	@ (800a160 <vPortSetupTimerInterrupt+0x40>)
 800a136:	fba2 2303 	umull	r2, r3, r2, r3
 800a13a:	099b      	lsrs	r3, r3, #6
 800a13c:	4a09      	ldr	r2, [pc, #36]	@ (800a164 <vPortSetupTimerInterrupt+0x44>)
 800a13e:	3b01      	subs	r3, #1
 800a140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a142:	4b04      	ldr	r3, [pc, #16]	@ (800a154 <vPortSetupTimerInterrupt+0x34>)
 800a144:	2207      	movs	r2, #7
 800a146:	601a      	str	r2, [r3, #0]
}
 800a148:	bf00      	nop
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	e000e010 	.word	0xe000e010
 800a158:	e000e018 	.word	0xe000e018
 800a15c:	20000160 	.word	0x20000160
 800a160:	10624dd3 	.word	0x10624dd3
 800a164:	e000e014 	.word	0xe000e014

0800a168 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a168:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a178 <vPortEnableVFP+0x10>
 800a16c:	6801      	ldr	r1, [r0, #0]
 800a16e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a172:	6001      	str	r1, [r0, #0]
 800a174:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a176:	bf00      	nop
 800a178:	e000ed88 	.word	0xe000ed88

0800a17c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a182:	f3ef 8305 	mrs	r3, IPSR
 800a186:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b0f      	cmp	r3, #15
 800a18c:	d917      	bls.n	800a1be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a18e:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f8 <vPortValidateInterruptPriority+0x7c>)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4413      	add	r3, r2
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a198:	4b18      	ldr	r3, [pc, #96]	@ (800a1fc <vPortValidateInterruptPriority+0x80>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	7afa      	ldrb	r2, [r7, #11]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d20d      	bcs.n	800a1be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a6:	b672      	cpsid	i
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	b662      	cpsie	i
 800a1b6:	607b      	str	r3, [r7, #4]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1be:	4b10      	ldr	r3, [pc, #64]	@ (800a200 <vPortValidateInterruptPriority+0x84>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a204 <vPortValidateInterruptPriority+0x88>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d90d      	bls.n	800a1ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	b672      	cpsid	i
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	b662      	cpsie	i
 800a1e2:	603b      	str	r3, [r7, #0]
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop
 800a1e8:	e7fd      	b.n	800a1e6 <vPortValidateInterruptPriority+0x6a>
	}
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	e000e3f0 	.word	0xe000e3f0
 800a1fc:	2000130c 	.word	0x2000130c
 800a200:	e000ed0c 	.word	0xe000ed0c
 800a204:	20001310 	.word	0x20001310

0800a208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08a      	sub	sp, #40	@ 0x28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a210:	2300      	movs	r3, #0
 800a212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a214:	f7fe fb88 	bl	8008928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a218:	4b5d      	ldr	r3, [pc, #372]	@ (800a390 <pvPortMalloc+0x188>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a220:	f000 f920 	bl	800a464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a224:	4b5b      	ldr	r3, [pc, #364]	@ (800a394 <pvPortMalloc+0x18c>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f040 8094 	bne.w	800a35a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d020      	beq.n	800a27a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a238:	2208      	movs	r2, #8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4413      	add	r3, r2
 800a23e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	2b00      	cmp	r3, #0
 800a248:	d017      	beq.n	800a27a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f023 0307 	bic.w	r3, r3, #7
 800a250:	3308      	adds	r3, #8
 800a252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f003 0307 	and.w	r3, r3, #7
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00d      	beq.n	800a27a <pvPortMalloc+0x72>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	b672      	cpsid	i
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	b662      	cpsie	i
 800a272:	617b      	str	r3, [r7, #20]
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop
 800a278:	e7fd      	b.n	800a276 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d06c      	beq.n	800a35a <pvPortMalloc+0x152>
 800a280:	4b45      	ldr	r3, [pc, #276]	@ (800a398 <pvPortMalloc+0x190>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	429a      	cmp	r2, r3
 800a288:	d867      	bhi.n	800a35a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a28a:	4b44      	ldr	r3, [pc, #272]	@ (800a39c <pvPortMalloc+0x194>)
 800a28c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a28e:	4b43      	ldr	r3, [pc, #268]	@ (800a39c <pvPortMalloc+0x194>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a294:	e004      	b.n	800a2a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d903      	bls.n	800a2b2 <pvPortMalloc+0xaa>
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f1      	bne.n	800a296 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2b2:	4b37      	ldr	r3, [pc, #220]	@ (800a390 <pvPortMalloc+0x188>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d04e      	beq.n	800a35a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	4413      	add	r3, r2
 800a2c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	1ad2      	subs	r2, r2, r3
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d922      	bls.n	800a324 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00d      	beq.n	800a30c <pvPortMalloc+0x104>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	b672      	cpsid	i
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	b662      	cpsie	i
 800a304:	613b      	str	r3, [r7, #16]
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	e7fd      	b.n	800a308 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	1ad2      	subs	r2, r2, r3
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a31e:	69b8      	ldr	r0, [r7, #24]
 800a320:	f000 f902 	bl	800a528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a324:	4b1c      	ldr	r3, [pc, #112]	@ (800a398 <pvPortMalloc+0x190>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	4a1a      	ldr	r2, [pc, #104]	@ (800a398 <pvPortMalloc+0x190>)
 800a330:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a332:	4b19      	ldr	r3, [pc, #100]	@ (800a398 <pvPortMalloc+0x190>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a0 <pvPortMalloc+0x198>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d203      	bcs.n	800a346 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a33e:	4b16      	ldr	r3, [pc, #88]	@ (800a398 <pvPortMalloc+0x190>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a17      	ldr	r2, [pc, #92]	@ (800a3a0 <pvPortMalloc+0x198>)
 800a344:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <pvPortMalloc+0x18c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	431a      	orrs	r2, r3
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a35a:	f7fe faf3 	bl	8008944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00d      	beq.n	800a384 <pvPortMalloc+0x17c>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	60fb      	str	r3, [r7, #12]
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	e7fd      	b.n	800a380 <pvPortMalloc+0x178>
	return pvReturn;
 800a384:	69fb      	ldr	r3, [r7, #28]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3728      	adds	r7, #40	@ 0x28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20004f1c 	.word	0x20004f1c
 800a394:	20004f28 	.word	0x20004f28
 800a398:	20004f20 	.word	0x20004f20
 800a39c:	20004f14 	.word	0x20004f14
 800a3a0:	20004f24 	.word	0x20004f24

0800a3a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d04e      	beq.n	800a454 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3b6:	2308      	movs	r3, #8
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	4413      	add	r3, r2
 800a3be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	4b24      	ldr	r3, [pc, #144]	@ (800a45c <vPortFree+0xb8>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10d      	bne.n	800a3ee <vPortFree+0x4a>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	b672      	cpsid	i
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	b662      	cpsie	i
 800a3e6:	60fb      	str	r3, [r7, #12]
}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	e7fd      	b.n	800a3ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00d      	beq.n	800a412 <vPortFree+0x6e>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	b672      	cpsid	i
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	b662      	cpsie	i
 800a40a:	60bb      	str	r3, [r7, #8]
}
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
 800a410:	e7fd      	b.n	800a40e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	4b11      	ldr	r3, [pc, #68]	@ (800a45c <vPortFree+0xb8>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4013      	ands	r3, r2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d019      	beq.n	800a454 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d115      	bne.n	800a454 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	4b0b      	ldr	r3, [pc, #44]	@ (800a45c <vPortFree+0xb8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	43db      	mvns	r3, r3
 800a432:	401a      	ands	r2, r3
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a438:	f7fe fa76 	bl	8008928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	4b07      	ldr	r3, [pc, #28]	@ (800a460 <vPortFree+0xbc>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4413      	add	r3, r2
 800a446:	4a06      	ldr	r2, [pc, #24]	@ (800a460 <vPortFree+0xbc>)
 800a448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a44a:	6938      	ldr	r0, [r7, #16]
 800a44c:	f000 f86c 	bl	800a528 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a450:	f7fe fa78 	bl	8008944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a454:	bf00      	nop
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20004f28 	.word	0x20004f28
 800a460:	20004f20 	.word	0x20004f20

0800a464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a46a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a46e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a470:	4b27      	ldr	r3, [pc, #156]	@ (800a510 <prvHeapInit+0xac>)
 800a472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00c      	beq.n	800a498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3307      	adds	r3, #7
 800a482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f023 0307 	bic.w	r3, r3, #7
 800a48a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	4a1f      	ldr	r2, [pc, #124]	@ (800a510 <prvHeapInit+0xac>)
 800a494:	4413      	add	r3, r2
 800a496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a49c:	4a1d      	ldr	r2, [pc, #116]	@ (800a514 <prvHeapInit+0xb0>)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4a2:	4b1c      	ldr	r3, [pc, #112]	@ (800a514 <prvHeapInit+0xb0>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f023 0307 	bic.w	r3, r3, #7
 800a4be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4a15      	ldr	r2, [pc, #84]	@ (800a518 <prvHeapInit+0xb4>)
 800a4c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4c6:	4b14      	ldr	r3, [pc, #80]	@ (800a518 <prvHeapInit+0xb4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4ce:	4b12      	ldr	r3, [pc, #72]	@ (800a518 <prvHeapInit+0xb4>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a518 <prvHeapInit+0xb4>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a51c <prvHeapInit+0xb8>)
 800a4f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4a09      	ldr	r2, [pc, #36]	@ (800a520 <prvHeapInit+0xbc>)
 800a4fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4fc:	4b09      	ldr	r3, [pc, #36]	@ (800a524 <prvHeapInit+0xc0>)
 800a4fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a502:	601a      	str	r2, [r3, #0]
}
 800a504:	bf00      	nop
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	20001314 	.word	0x20001314
 800a514:	20004f14 	.word	0x20004f14
 800a518:	20004f1c 	.word	0x20004f1c
 800a51c:	20004f24 	.word	0x20004f24
 800a520:	20004f20 	.word	0x20004f20
 800a524:	20004f28 	.word	0x20004f28

0800a528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a530:	4b28      	ldr	r3, [pc, #160]	@ (800a5d4 <prvInsertBlockIntoFreeList+0xac>)
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e002      	b.n	800a53c <prvInsertBlockIntoFreeList+0x14>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	429a      	cmp	r2, r3
 800a544:	d8f7      	bhi.n	800a536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	4413      	add	r3, r2
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	d108      	bne.n	800a56a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	441a      	add	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	441a      	add	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d118      	bne.n	800a5b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4b15      	ldr	r3, [pc, #84]	@ (800a5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d00d      	beq.n	800a5a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	441a      	add	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	e008      	b.n	800a5b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e003      	b.n	800a5b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d002      	beq.n	800a5c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20004f14 	.word	0x20004f14
 800a5d8:	20004f1c 	.word	0x20004f1c

0800a5dc <__cvt>:
 800a5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	ec57 6b10 	vmov	r6, r7, d0
 800a5e4:	2f00      	cmp	r7, #0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	bfbb      	ittet	lt
 800a5ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a5f2:	461f      	movlt	r7, r3
 800a5f4:	2300      	movge	r3, #0
 800a5f6:	232d      	movlt	r3, #45	@ 0x2d
 800a5f8:	700b      	strb	r3, [r1, #0]
 800a5fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a600:	4691      	mov	r9, r2
 800a602:	f023 0820 	bic.w	r8, r3, #32
 800a606:	bfbc      	itt	lt
 800a608:	4632      	movlt	r2, r6
 800a60a:	4616      	movlt	r6, r2
 800a60c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a610:	d005      	beq.n	800a61e <__cvt+0x42>
 800a612:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a616:	d100      	bne.n	800a61a <__cvt+0x3e>
 800a618:	3401      	adds	r4, #1
 800a61a:	2102      	movs	r1, #2
 800a61c:	e000      	b.n	800a620 <__cvt+0x44>
 800a61e:	2103      	movs	r1, #3
 800a620:	ab03      	add	r3, sp, #12
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	ab02      	add	r3, sp, #8
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	ec47 6b10 	vmov	d0, r6, r7
 800a62c:	4653      	mov	r3, sl
 800a62e:	4622      	mov	r2, r4
 800a630:	f001 f8ea 	bl	800b808 <_dtoa_r>
 800a634:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a638:	4605      	mov	r5, r0
 800a63a:	d119      	bne.n	800a670 <__cvt+0x94>
 800a63c:	f019 0f01 	tst.w	r9, #1
 800a640:	d00e      	beq.n	800a660 <__cvt+0x84>
 800a642:	eb00 0904 	add.w	r9, r0, r4
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	4630      	mov	r0, r6
 800a64c:	4639      	mov	r1, r7
 800a64e:	f7f6 fa6b 	bl	8000b28 <__aeabi_dcmpeq>
 800a652:	b108      	cbz	r0, 800a658 <__cvt+0x7c>
 800a654:	f8cd 900c 	str.w	r9, [sp, #12]
 800a658:	2230      	movs	r2, #48	@ 0x30
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	454b      	cmp	r3, r9
 800a65e:	d31e      	bcc.n	800a69e <__cvt+0xc2>
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a664:	1b5b      	subs	r3, r3, r5
 800a666:	4628      	mov	r0, r5
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	b004      	add	sp, #16
 800a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a670:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a674:	eb00 0904 	add.w	r9, r0, r4
 800a678:	d1e5      	bne.n	800a646 <__cvt+0x6a>
 800a67a:	7803      	ldrb	r3, [r0, #0]
 800a67c:	2b30      	cmp	r3, #48	@ 0x30
 800a67e:	d10a      	bne.n	800a696 <__cvt+0xba>
 800a680:	2200      	movs	r2, #0
 800a682:	2300      	movs	r3, #0
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f6 fa4e 	bl	8000b28 <__aeabi_dcmpeq>
 800a68c:	b918      	cbnz	r0, 800a696 <__cvt+0xba>
 800a68e:	f1c4 0401 	rsb	r4, r4, #1
 800a692:	f8ca 4000 	str.w	r4, [sl]
 800a696:	f8da 3000 	ldr.w	r3, [sl]
 800a69a:	4499      	add	r9, r3
 800a69c:	e7d3      	b.n	800a646 <__cvt+0x6a>
 800a69e:	1c59      	adds	r1, r3, #1
 800a6a0:	9103      	str	r1, [sp, #12]
 800a6a2:	701a      	strb	r2, [r3, #0]
 800a6a4:	e7d9      	b.n	800a65a <__cvt+0x7e>

0800a6a6 <__exponent>:
 800a6a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	bfba      	itte	lt
 800a6ac:	4249      	neglt	r1, r1
 800a6ae:	232d      	movlt	r3, #45	@ 0x2d
 800a6b0:	232b      	movge	r3, #43	@ 0x2b
 800a6b2:	2909      	cmp	r1, #9
 800a6b4:	7002      	strb	r2, [r0, #0]
 800a6b6:	7043      	strb	r3, [r0, #1]
 800a6b8:	dd29      	ble.n	800a70e <__exponent+0x68>
 800a6ba:	f10d 0307 	add.w	r3, sp, #7
 800a6be:	461d      	mov	r5, r3
 800a6c0:	270a      	movs	r7, #10
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6c8:	fb07 1416 	mls	r4, r7, r6, r1
 800a6cc:	3430      	adds	r4, #48	@ 0x30
 800a6ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	2c63      	cmp	r4, #99	@ 0x63
 800a6d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6da:	4631      	mov	r1, r6
 800a6dc:	dcf1      	bgt.n	800a6c2 <__exponent+0x1c>
 800a6de:	3130      	adds	r1, #48	@ 0x30
 800a6e0:	1e94      	subs	r4, r2, #2
 800a6e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a6e6:	1c41      	adds	r1, r0, #1
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	42ab      	cmp	r3, r5
 800a6ec:	d30a      	bcc.n	800a704 <__exponent+0x5e>
 800a6ee:	f10d 0309 	add.w	r3, sp, #9
 800a6f2:	1a9b      	subs	r3, r3, r2
 800a6f4:	42ac      	cmp	r4, r5
 800a6f6:	bf88      	it	hi
 800a6f8:	2300      	movhi	r3, #0
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	4403      	add	r3, r0
 800a6fe:	1a18      	subs	r0, r3, r0
 800a700:	b003      	add	sp, #12
 800a702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a704:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a708:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a70c:	e7ed      	b.n	800a6ea <__exponent+0x44>
 800a70e:	2330      	movs	r3, #48	@ 0x30
 800a710:	3130      	adds	r1, #48	@ 0x30
 800a712:	7083      	strb	r3, [r0, #2]
 800a714:	70c1      	strb	r1, [r0, #3]
 800a716:	1d03      	adds	r3, r0, #4
 800a718:	e7f1      	b.n	800a6fe <__exponent+0x58>
	...

0800a71c <_printf_float>:
 800a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	b08d      	sub	sp, #52	@ 0x34
 800a722:	460c      	mov	r4, r1
 800a724:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a728:	4616      	mov	r6, r2
 800a72a:	461f      	mov	r7, r3
 800a72c:	4605      	mov	r5, r0
 800a72e:	f000 ff01 	bl	800b534 <_localeconv_r>
 800a732:	6803      	ldr	r3, [r0, #0]
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	4618      	mov	r0, r3
 800a738:	f7f5 fdca 	bl	80002d0 <strlen>
 800a73c:	2300      	movs	r3, #0
 800a73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a740:	f8d8 3000 	ldr.w	r3, [r8]
 800a744:	9005      	str	r0, [sp, #20]
 800a746:	3307      	adds	r3, #7
 800a748:	f023 0307 	bic.w	r3, r3, #7
 800a74c:	f103 0208 	add.w	r2, r3, #8
 800a750:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a754:	f8d4 b000 	ldr.w	fp, [r4]
 800a758:	f8c8 2000 	str.w	r2, [r8]
 800a75c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a760:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	f8cd 8018 	str.w	r8, [sp, #24]
 800a76a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a76e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a772:	4b9c      	ldr	r3, [pc, #624]	@ (800a9e4 <_printf_float+0x2c8>)
 800a774:	f04f 32ff 	mov.w	r2, #4294967295
 800a778:	f7f6 fa08 	bl	8000b8c <__aeabi_dcmpun>
 800a77c:	bb70      	cbnz	r0, 800a7dc <_printf_float+0xc0>
 800a77e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a782:	4b98      	ldr	r3, [pc, #608]	@ (800a9e4 <_printf_float+0x2c8>)
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	f7f6 f9e2 	bl	8000b50 <__aeabi_dcmple>
 800a78c:	bb30      	cbnz	r0, 800a7dc <_printf_float+0xc0>
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f6 f9d1 	bl	8000b3c <__aeabi_dcmplt>
 800a79a:	b110      	cbz	r0, 800a7a2 <_printf_float+0x86>
 800a79c:	232d      	movs	r3, #45	@ 0x2d
 800a79e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7a2:	4a91      	ldr	r2, [pc, #580]	@ (800a9e8 <_printf_float+0x2cc>)
 800a7a4:	4b91      	ldr	r3, [pc, #580]	@ (800a9ec <_printf_float+0x2d0>)
 800a7a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7aa:	bf94      	ite	ls
 800a7ac:	4690      	movls	r8, r2
 800a7ae:	4698      	movhi	r8, r3
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	f02b 0304 	bic.w	r3, fp, #4
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	f04f 0900 	mov.w	r9, #0
 800a7be:	9700      	str	r7, [sp, #0]
 800a7c0:	4633      	mov	r3, r6
 800a7c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f9d2 	bl	800ab70 <_printf_common>
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	f040 808d 	bne.w	800a8ec <_printf_float+0x1d0>
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d6:	b00d      	add	sp, #52	@ 0x34
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	4642      	mov	r2, r8
 800a7de:	464b      	mov	r3, r9
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	f7f6 f9d2 	bl	8000b8c <__aeabi_dcmpun>
 800a7e8:	b140      	cbz	r0, 800a7fc <_printf_float+0xe0>
 800a7ea:	464b      	mov	r3, r9
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bfbc      	itt	lt
 800a7f0:	232d      	movlt	r3, #45	@ 0x2d
 800a7f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7f6:	4a7e      	ldr	r2, [pc, #504]	@ (800a9f0 <_printf_float+0x2d4>)
 800a7f8:	4b7e      	ldr	r3, [pc, #504]	@ (800a9f4 <_printf_float+0x2d8>)
 800a7fa:	e7d4      	b.n	800a7a6 <_printf_float+0x8a>
 800a7fc:	6863      	ldr	r3, [r4, #4]
 800a7fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a802:	9206      	str	r2, [sp, #24]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	d13b      	bne.n	800a880 <_printf_float+0x164>
 800a808:	2306      	movs	r3, #6
 800a80a:	6063      	str	r3, [r4, #4]
 800a80c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a810:	2300      	movs	r3, #0
 800a812:	6022      	str	r2, [r4, #0]
 800a814:	9303      	str	r3, [sp, #12]
 800a816:	ab0a      	add	r3, sp, #40	@ 0x28
 800a818:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a81c:	ab09      	add	r3, sp, #36	@ 0x24
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	ec49 8b10 	vmov	d0, r8, r9
 800a826:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a82a:	4628      	mov	r0, r5
 800a82c:	f7ff fed6 	bl	800a5dc <__cvt>
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a834:	2b47      	cmp	r3, #71	@ 0x47
 800a836:	4680      	mov	r8, r0
 800a838:	d129      	bne.n	800a88e <_printf_float+0x172>
 800a83a:	1cc8      	adds	r0, r1, #3
 800a83c:	db02      	blt.n	800a844 <_printf_float+0x128>
 800a83e:	6863      	ldr	r3, [r4, #4]
 800a840:	4299      	cmp	r1, r3
 800a842:	dd41      	ble.n	800a8c8 <_printf_float+0x1ac>
 800a844:	f1aa 0a02 	sub.w	sl, sl, #2
 800a848:	fa5f fa8a 	uxtb.w	sl, sl
 800a84c:	3901      	subs	r1, #1
 800a84e:	4652      	mov	r2, sl
 800a850:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a854:	9109      	str	r1, [sp, #36]	@ 0x24
 800a856:	f7ff ff26 	bl	800a6a6 <__exponent>
 800a85a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a85c:	1813      	adds	r3, r2, r0
 800a85e:	2a01      	cmp	r2, #1
 800a860:	4681      	mov	r9, r0
 800a862:	6123      	str	r3, [r4, #16]
 800a864:	dc02      	bgt.n	800a86c <_printf_float+0x150>
 800a866:	6822      	ldr	r2, [r4, #0]
 800a868:	07d2      	lsls	r2, r2, #31
 800a86a:	d501      	bpl.n	800a870 <_printf_float+0x154>
 800a86c:	3301      	adds	r3, #1
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0a2      	beq.n	800a7be <_printf_float+0xa2>
 800a878:	232d      	movs	r3, #45	@ 0x2d
 800a87a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a87e:	e79e      	b.n	800a7be <_printf_float+0xa2>
 800a880:	9a06      	ldr	r2, [sp, #24]
 800a882:	2a47      	cmp	r2, #71	@ 0x47
 800a884:	d1c2      	bne.n	800a80c <_printf_float+0xf0>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1c0      	bne.n	800a80c <_printf_float+0xf0>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e7bd      	b.n	800a80a <_printf_float+0xee>
 800a88e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a892:	d9db      	bls.n	800a84c <_printf_float+0x130>
 800a894:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a898:	d118      	bne.n	800a8cc <_printf_float+0x1b0>
 800a89a:	2900      	cmp	r1, #0
 800a89c:	6863      	ldr	r3, [r4, #4]
 800a89e:	dd0b      	ble.n	800a8b8 <_printf_float+0x19c>
 800a8a0:	6121      	str	r1, [r4, #16]
 800a8a2:	b913      	cbnz	r3, 800a8aa <_printf_float+0x18e>
 800a8a4:	6822      	ldr	r2, [r4, #0]
 800a8a6:	07d0      	lsls	r0, r2, #31
 800a8a8:	d502      	bpl.n	800a8b0 <_printf_float+0x194>
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	440b      	add	r3, r1
 800a8ae:	6123      	str	r3, [r4, #16]
 800a8b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8b2:	f04f 0900 	mov.w	r9, #0
 800a8b6:	e7db      	b.n	800a870 <_printf_float+0x154>
 800a8b8:	b913      	cbnz	r3, 800a8c0 <_printf_float+0x1a4>
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	07d2      	lsls	r2, r2, #31
 800a8be:	d501      	bpl.n	800a8c4 <_printf_float+0x1a8>
 800a8c0:	3302      	adds	r3, #2
 800a8c2:	e7f4      	b.n	800a8ae <_printf_float+0x192>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e7f2      	b.n	800a8ae <_printf_float+0x192>
 800a8c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ce:	4299      	cmp	r1, r3
 800a8d0:	db05      	blt.n	800a8de <_printf_float+0x1c2>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	6121      	str	r1, [r4, #16]
 800a8d6:	07d8      	lsls	r0, r3, #31
 800a8d8:	d5ea      	bpl.n	800a8b0 <_printf_float+0x194>
 800a8da:	1c4b      	adds	r3, r1, #1
 800a8dc:	e7e7      	b.n	800a8ae <_printf_float+0x192>
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	bfd4      	ite	le
 800a8e2:	f1c1 0202 	rsble	r2, r1, #2
 800a8e6:	2201      	movgt	r2, #1
 800a8e8:	4413      	add	r3, r2
 800a8ea:	e7e0      	b.n	800a8ae <_printf_float+0x192>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	055a      	lsls	r2, r3, #21
 800a8f0:	d407      	bmi.n	800a902 <_printf_float+0x1e6>
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	4642      	mov	r2, r8
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	47b8      	blx	r7
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d12b      	bne.n	800a958 <_printf_float+0x23c>
 800a900:	e767      	b.n	800a7d2 <_printf_float+0xb6>
 800a902:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a906:	f240 80dd 	bls.w	800aac4 <_printf_float+0x3a8>
 800a90a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	f7f6 f909 	bl	8000b28 <__aeabi_dcmpeq>
 800a916:	2800      	cmp	r0, #0
 800a918:	d033      	beq.n	800a982 <_printf_float+0x266>
 800a91a:	4a37      	ldr	r2, [pc, #220]	@ (800a9f8 <_printf_float+0x2dc>)
 800a91c:	2301      	movs	r3, #1
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	f43f af54 	beq.w	800a7d2 <_printf_float+0xb6>
 800a92a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a92e:	4543      	cmp	r3, r8
 800a930:	db02      	blt.n	800a938 <_printf_float+0x21c>
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	07d8      	lsls	r0, r3, #31
 800a936:	d50f      	bpl.n	800a958 <_printf_float+0x23c>
 800a938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f af45 	beq.w	800a7d2 <_printf_float+0xb6>
 800a948:	f04f 0900 	mov.w	r9, #0
 800a94c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a950:	f104 0a1a 	add.w	sl, r4, #26
 800a954:	45c8      	cmp	r8, r9
 800a956:	dc09      	bgt.n	800a96c <_printf_float+0x250>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	079b      	lsls	r3, r3, #30
 800a95c:	f100 8103 	bmi.w	800ab66 <_printf_float+0x44a>
 800a960:	68e0      	ldr	r0, [r4, #12]
 800a962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a964:	4298      	cmp	r0, r3
 800a966:	bfb8      	it	lt
 800a968:	4618      	movlt	r0, r3
 800a96a:	e734      	b.n	800a7d6 <_printf_float+0xba>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4652      	mov	r2, sl
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f af2b 	beq.w	800a7d2 <_printf_float+0xb6>
 800a97c:	f109 0901 	add.w	r9, r9, #1
 800a980:	e7e8      	b.n	800a954 <_printf_float+0x238>
 800a982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a984:	2b00      	cmp	r3, #0
 800a986:	dc39      	bgt.n	800a9fc <_printf_float+0x2e0>
 800a988:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f8 <_printf_float+0x2dc>)
 800a98a:	2301      	movs	r3, #1
 800a98c:	4631      	mov	r1, r6
 800a98e:	4628      	mov	r0, r5
 800a990:	47b8      	blx	r7
 800a992:	3001      	adds	r0, #1
 800a994:	f43f af1d 	beq.w	800a7d2 <_printf_float+0xb6>
 800a998:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a99c:	ea59 0303 	orrs.w	r3, r9, r3
 800a9a0:	d102      	bne.n	800a9a8 <_printf_float+0x28c>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	07d9      	lsls	r1, r3, #31
 800a9a6:	d5d7      	bpl.n	800a958 <_printf_float+0x23c>
 800a9a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	47b8      	blx	r7
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	f43f af0d 	beq.w	800a7d2 <_printf_float+0xb6>
 800a9b8:	f04f 0a00 	mov.w	sl, #0
 800a9bc:	f104 0b1a 	add.w	fp, r4, #26
 800a9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c2:	425b      	negs	r3, r3
 800a9c4:	4553      	cmp	r3, sl
 800a9c6:	dc01      	bgt.n	800a9cc <_printf_float+0x2b0>
 800a9c8:	464b      	mov	r3, r9
 800a9ca:	e793      	b.n	800a8f4 <_printf_float+0x1d8>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	465a      	mov	r2, fp
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	47b8      	blx	r7
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f43f aefb 	beq.w	800a7d2 <_printf_float+0xb6>
 800a9dc:	f10a 0a01 	add.w	sl, sl, #1
 800a9e0:	e7ee      	b.n	800a9c0 <_printf_float+0x2a4>
 800a9e2:	bf00      	nop
 800a9e4:	7fefffff 	.word	0x7fefffff
 800a9e8:	0800f03c 	.word	0x0800f03c
 800a9ec:	0800f040 	.word	0x0800f040
 800a9f0:	0800f044 	.word	0x0800f044
 800a9f4:	0800f048 	.word	0x0800f048
 800a9f8:	0800f04c 	.word	0x0800f04c
 800a9fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa02:	4553      	cmp	r3, sl
 800aa04:	bfa8      	it	ge
 800aa06:	4653      	movge	r3, sl
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	4699      	mov	r9, r3
 800aa0c:	dc36      	bgt.n	800aa7c <_printf_float+0x360>
 800aa0e:	f04f 0b00 	mov.w	fp, #0
 800aa12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa16:	f104 021a 	add.w	r2, r4, #26
 800aa1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa1c:	9306      	str	r3, [sp, #24]
 800aa1e:	eba3 0309 	sub.w	r3, r3, r9
 800aa22:	455b      	cmp	r3, fp
 800aa24:	dc31      	bgt.n	800aa8a <_printf_float+0x36e>
 800aa26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa28:	459a      	cmp	sl, r3
 800aa2a:	dc3a      	bgt.n	800aaa2 <_printf_float+0x386>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	07da      	lsls	r2, r3, #31
 800aa30:	d437      	bmi.n	800aaa2 <_printf_float+0x386>
 800aa32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa34:	ebaa 0903 	sub.w	r9, sl, r3
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	ebaa 0303 	sub.w	r3, sl, r3
 800aa3e:	4599      	cmp	r9, r3
 800aa40:	bfa8      	it	ge
 800aa42:	4699      	movge	r9, r3
 800aa44:	f1b9 0f00 	cmp.w	r9, #0
 800aa48:	dc33      	bgt.n	800aab2 <_printf_float+0x396>
 800aa4a:	f04f 0800 	mov.w	r8, #0
 800aa4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa52:	f104 0b1a 	add.w	fp, r4, #26
 800aa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa58:	ebaa 0303 	sub.w	r3, sl, r3
 800aa5c:	eba3 0309 	sub.w	r3, r3, r9
 800aa60:	4543      	cmp	r3, r8
 800aa62:	f77f af79 	ble.w	800a958 <_printf_float+0x23c>
 800aa66:	2301      	movs	r3, #1
 800aa68:	465a      	mov	r2, fp
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f aeae 	beq.w	800a7d2 <_printf_float+0xb6>
 800aa76:	f108 0801 	add.w	r8, r8, #1
 800aa7a:	e7ec      	b.n	800aa56 <_printf_float+0x33a>
 800aa7c:	4642      	mov	r2, r8
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	d1c2      	bne.n	800aa0e <_printf_float+0x2f2>
 800aa88:	e6a3      	b.n	800a7d2 <_printf_float+0xb6>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4628      	mov	r0, r5
 800aa90:	9206      	str	r2, [sp, #24]
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f ae9c 	beq.w	800a7d2 <_printf_float+0xb6>
 800aa9a:	9a06      	ldr	r2, [sp, #24]
 800aa9c:	f10b 0b01 	add.w	fp, fp, #1
 800aaa0:	e7bb      	b.n	800aa1a <_printf_float+0x2fe>
 800aaa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	47b8      	blx	r7
 800aaac:	3001      	adds	r0, #1
 800aaae:	d1c0      	bne.n	800aa32 <_printf_float+0x316>
 800aab0:	e68f      	b.n	800a7d2 <_printf_float+0xb6>
 800aab2:	9a06      	ldr	r2, [sp, #24]
 800aab4:	464b      	mov	r3, r9
 800aab6:	4442      	add	r2, r8
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b8      	blx	r7
 800aabe:	3001      	adds	r0, #1
 800aac0:	d1c3      	bne.n	800aa4a <_printf_float+0x32e>
 800aac2:	e686      	b.n	800a7d2 <_printf_float+0xb6>
 800aac4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aac8:	f1ba 0f01 	cmp.w	sl, #1
 800aacc:	dc01      	bgt.n	800aad2 <_printf_float+0x3b6>
 800aace:	07db      	lsls	r3, r3, #31
 800aad0:	d536      	bpl.n	800ab40 <_printf_float+0x424>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4642      	mov	r2, r8
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	f43f ae78 	beq.w	800a7d2 <_printf_float+0xb6>
 800aae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae6:	4631      	mov	r1, r6
 800aae8:	4628      	mov	r0, r5
 800aaea:	47b8      	blx	r7
 800aaec:	3001      	adds	r0, #1
 800aaee:	f43f ae70 	beq.w	800a7d2 <_printf_float+0xb6>
 800aaf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aafe:	f7f6 f813 	bl	8000b28 <__aeabi_dcmpeq>
 800ab02:	b9c0      	cbnz	r0, 800ab36 <_printf_float+0x41a>
 800ab04:	4653      	mov	r3, sl
 800ab06:	f108 0201 	add.w	r2, r8, #1
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	d10c      	bne.n	800ab2e <_printf_float+0x412>
 800ab14:	e65d      	b.n	800a7d2 <_printf_float+0xb6>
 800ab16:	2301      	movs	r3, #1
 800ab18:	465a      	mov	r2, fp
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	47b8      	blx	r7
 800ab20:	3001      	adds	r0, #1
 800ab22:	f43f ae56 	beq.w	800a7d2 <_printf_float+0xb6>
 800ab26:	f108 0801 	add.w	r8, r8, #1
 800ab2a:	45d0      	cmp	r8, sl
 800ab2c:	dbf3      	blt.n	800ab16 <_printf_float+0x3fa>
 800ab2e:	464b      	mov	r3, r9
 800ab30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab34:	e6df      	b.n	800a8f6 <_printf_float+0x1da>
 800ab36:	f04f 0800 	mov.w	r8, #0
 800ab3a:	f104 0b1a 	add.w	fp, r4, #26
 800ab3e:	e7f4      	b.n	800ab2a <_printf_float+0x40e>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4642      	mov	r2, r8
 800ab44:	e7e1      	b.n	800ab0a <_printf_float+0x3ee>
 800ab46:	2301      	movs	r3, #1
 800ab48:	464a      	mov	r2, r9
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	f43f ae3e 	beq.w	800a7d2 <_printf_float+0xb6>
 800ab56:	f108 0801 	add.w	r8, r8, #1
 800ab5a:	68e3      	ldr	r3, [r4, #12]
 800ab5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab5e:	1a5b      	subs	r3, r3, r1
 800ab60:	4543      	cmp	r3, r8
 800ab62:	dcf0      	bgt.n	800ab46 <_printf_float+0x42a>
 800ab64:	e6fc      	b.n	800a960 <_printf_float+0x244>
 800ab66:	f04f 0800 	mov.w	r8, #0
 800ab6a:	f104 0919 	add.w	r9, r4, #25
 800ab6e:	e7f4      	b.n	800ab5a <_printf_float+0x43e>

0800ab70 <_printf_common>:
 800ab70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab74:	4616      	mov	r6, r2
 800ab76:	4698      	mov	r8, r3
 800ab78:	688a      	ldr	r2, [r1, #8]
 800ab7a:	690b      	ldr	r3, [r1, #16]
 800ab7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab80:	4293      	cmp	r3, r2
 800ab82:	bfb8      	it	lt
 800ab84:	4613      	movlt	r3, r2
 800ab86:	6033      	str	r3, [r6, #0]
 800ab88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	b10a      	cbz	r2, 800ab96 <_printf_common+0x26>
 800ab92:	3301      	adds	r3, #1
 800ab94:	6033      	str	r3, [r6, #0]
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	0699      	lsls	r1, r3, #26
 800ab9a:	bf42      	ittt	mi
 800ab9c:	6833      	ldrmi	r3, [r6, #0]
 800ab9e:	3302      	addmi	r3, #2
 800aba0:	6033      	strmi	r3, [r6, #0]
 800aba2:	6825      	ldr	r5, [r4, #0]
 800aba4:	f015 0506 	ands.w	r5, r5, #6
 800aba8:	d106      	bne.n	800abb8 <_printf_common+0x48>
 800abaa:	f104 0a19 	add.w	sl, r4, #25
 800abae:	68e3      	ldr	r3, [r4, #12]
 800abb0:	6832      	ldr	r2, [r6, #0]
 800abb2:	1a9b      	subs	r3, r3, r2
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	dc26      	bgt.n	800ac06 <_printf_common+0x96>
 800abb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abbc:	6822      	ldr	r2, [r4, #0]
 800abbe:	3b00      	subs	r3, #0
 800abc0:	bf18      	it	ne
 800abc2:	2301      	movne	r3, #1
 800abc4:	0692      	lsls	r2, r2, #26
 800abc6:	d42b      	bmi.n	800ac20 <_printf_common+0xb0>
 800abc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abcc:	4641      	mov	r1, r8
 800abce:	4638      	mov	r0, r7
 800abd0:	47c8      	blx	r9
 800abd2:	3001      	adds	r0, #1
 800abd4:	d01e      	beq.n	800ac14 <_printf_common+0xa4>
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	6922      	ldr	r2, [r4, #16]
 800abda:	f003 0306 	and.w	r3, r3, #6
 800abde:	2b04      	cmp	r3, #4
 800abe0:	bf02      	ittt	eq
 800abe2:	68e5      	ldreq	r5, [r4, #12]
 800abe4:	6833      	ldreq	r3, [r6, #0]
 800abe6:	1aed      	subeq	r5, r5, r3
 800abe8:	68a3      	ldr	r3, [r4, #8]
 800abea:	bf0c      	ite	eq
 800abec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abf0:	2500      	movne	r5, #0
 800abf2:	4293      	cmp	r3, r2
 800abf4:	bfc4      	itt	gt
 800abf6:	1a9b      	subgt	r3, r3, r2
 800abf8:	18ed      	addgt	r5, r5, r3
 800abfa:	2600      	movs	r6, #0
 800abfc:	341a      	adds	r4, #26
 800abfe:	42b5      	cmp	r5, r6
 800ac00:	d11a      	bne.n	800ac38 <_printf_common+0xc8>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e008      	b.n	800ac18 <_printf_common+0xa8>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4652      	mov	r2, sl
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	47c8      	blx	r9
 800ac10:	3001      	adds	r0, #1
 800ac12:	d103      	bne.n	800ac1c <_printf_common+0xac>
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	e7c6      	b.n	800abae <_printf_common+0x3e>
 800ac20:	18e1      	adds	r1, r4, r3
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	2030      	movs	r0, #48	@ 0x30
 800ac26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac2a:	4422      	add	r2, r4
 800ac2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac34:	3302      	adds	r3, #2
 800ac36:	e7c7      	b.n	800abc8 <_printf_common+0x58>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4641      	mov	r1, r8
 800ac3e:	4638      	mov	r0, r7
 800ac40:	47c8      	blx	r9
 800ac42:	3001      	adds	r0, #1
 800ac44:	d0e6      	beq.n	800ac14 <_printf_common+0xa4>
 800ac46:	3601      	adds	r6, #1
 800ac48:	e7d9      	b.n	800abfe <_printf_common+0x8e>
	...

0800ac4c <_printf_i>:
 800ac4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	7e0f      	ldrb	r7, [r1, #24]
 800ac52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac54:	2f78      	cmp	r7, #120	@ 0x78
 800ac56:	4691      	mov	r9, r2
 800ac58:	4680      	mov	r8, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	469a      	mov	sl, r3
 800ac5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac62:	d807      	bhi.n	800ac74 <_printf_i+0x28>
 800ac64:	2f62      	cmp	r7, #98	@ 0x62
 800ac66:	d80a      	bhi.n	800ac7e <_printf_i+0x32>
 800ac68:	2f00      	cmp	r7, #0
 800ac6a:	f000 80d2 	beq.w	800ae12 <_printf_i+0x1c6>
 800ac6e:	2f58      	cmp	r7, #88	@ 0x58
 800ac70:	f000 80b9 	beq.w	800ade6 <_printf_i+0x19a>
 800ac74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac7c:	e03a      	b.n	800acf4 <_printf_i+0xa8>
 800ac7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac82:	2b15      	cmp	r3, #21
 800ac84:	d8f6      	bhi.n	800ac74 <_printf_i+0x28>
 800ac86:	a101      	add	r1, pc, #4	@ (adr r1, 800ac8c <_printf_i+0x40>)
 800ac88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac8c:	0800ace5 	.word	0x0800ace5
 800ac90:	0800acf9 	.word	0x0800acf9
 800ac94:	0800ac75 	.word	0x0800ac75
 800ac98:	0800ac75 	.word	0x0800ac75
 800ac9c:	0800ac75 	.word	0x0800ac75
 800aca0:	0800ac75 	.word	0x0800ac75
 800aca4:	0800acf9 	.word	0x0800acf9
 800aca8:	0800ac75 	.word	0x0800ac75
 800acac:	0800ac75 	.word	0x0800ac75
 800acb0:	0800ac75 	.word	0x0800ac75
 800acb4:	0800ac75 	.word	0x0800ac75
 800acb8:	0800adf9 	.word	0x0800adf9
 800acbc:	0800ad23 	.word	0x0800ad23
 800acc0:	0800adb3 	.word	0x0800adb3
 800acc4:	0800ac75 	.word	0x0800ac75
 800acc8:	0800ac75 	.word	0x0800ac75
 800accc:	0800ae1b 	.word	0x0800ae1b
 800acd0:	0800ac75 	.word	0x0800ac75
 800acd4:	0800ad23 	.word	0x0800ad23
 800acd8:	0800ac75 	.word	0x0800ac75
 800acdc:	0800ac75 	.word	0x0800ac75
 800ace0:	0800adbb 	.word	0x0800adbb
 800ace4:	6833      	ldr	r3, [r6, #0]
 800ace6:	1d1a      	adds	r2, r3, #4
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6032      	str	r2, [r6, #0]
 800acec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acf4:	2301      	movs	r3, #1
 800acf6:	e09d      	b.n	800ae34 <_printf_i+0x1e8>
 800acf8:	6833      	ldr	r3, [r6, #0]
 800acfa:	6820      	ldr	r0, [r4, #0]
 800acfc:	1d19      	adds	r1, r3, #4
 800acfe:	6031      	str	r1, [r6, #0]
 800ad00:	0606      	lsls	r6, r0, #24
 800ad02:	d501      	bpl.n	800ad08 <_printf_i+0xbc>
 800ad04:	681d      	ldr	r5, [r3, #0]
 800ad06:	e003      	b.n	800ad10 <_printf_i+0xc4>
 800ad08:	0645      	lsls	r5, r0, #25
 800ad0a:	d5fb      	bpl.n	800ad04 <_printf_i+0xb8>
 800ad0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	da03      	bge.n	800ad1c <_printf_i+0xd0>
 800ad14:	232d      	movs	r3, #45	@ 0x2d
 800ad16:	426d      	negs	r5, r5
 800ad18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad1c:	4859      	ldr	r0, [pc, #356]	@ (800ae84 <_printf_i+0x238>)
 800ad1e:	230a      	movs	r3, #10
 800ad20:	e011      	b.n	800ad46 <_printf_i+0xfa>
 800ad22:	6821      	ldr	r1, [r4, #0]
 800ad24:	6833      	ldr	r3, [r6, #0]
 800ad26:	0608      	lsls	r0, r1, #24
 800ad28:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad2c:	d402      	bmi.n	800ad34 <_printf_i+0xe8>
 800ad2e:	0649      	lsls	r1, r1, #25
 800ad30:	bf48      	it	mi
 800ad32:	b2ad      	uxthmi	r5, r5
 800ad34:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad36:	4853      	ldr	r0, [pc, #332]	@ (800ae84 <_printf_i+0x238>)
 800ad38:	6033      	str	r3, [r6, #0]
 800ad3a:	bf14      	ite	ne
 800ad3c:	230a      	movne	r3, #10
 800ad3e:	2308      	moveq	r3, #8
 800ad40:	2100      	movs	r1, #0
 800ad42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad46:	6866      	ldr	r6, [r4, #4]
 800ad48:	60a6      	str	r6, [r4, #8]
 800ad4a:	2e00      	cmp	r6, #0
 800ad4c:	bfa2      	ittt	ge
 800ad4e:	6821      	ldrge	r1, [r4, #0]
 800ad50:	f021 0104 	bicge.w	r1, r1, #4
 800ad54:	6021      	strge	r1, [r4, #0]
 800ad56:	b90d      	cbnz	r5, 800ad5c <_printf_i+0x110>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	d04b      	beq.n	800adf4 <_printf_i+0x1a8>
 800ad5c:	4616      	mov	r6, r2
 800ad5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad62:	fb03 5711 	mls	r7, r3, r1, r5
 800ad66:	5dc7      	ldrb	r7, [r0, r7]
 800ad68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad6c:	462f      	mov	r7, r5
 800ad6e:	42bb      	cmp	r3, r7
 800ad70:	460d      	mov	r5, r1
 800ad72:	d9f4      	bls.n	800ad5e <_printf_i+0x112>
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d10b      	bne.n	800ad90 <_printf_i+0x144>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	07df      	lsls	r7, r3, #31
 800ad7c:	d508      	bpl.n	800ad90 <_printf_i+0x144>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	6861      	ldr	r1, [r4, #4]
 800ad82:	4299      	cmp	r1, r3
 800ad84:	bfde      	ittt	le
 800ad86:	2330      	movle	r3, #48	@ 0x30
 800ad88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad90:	1b92      	subs	r2, r2, r6
 800ad92:	6122      	str	r2, [r4, #16]
 800ad94:	f8cd a000 	str.w	sl, [sp]
 800ad98:	464b      	mov	r3, r9
 800ad9a:	aa03      	add	r2, sp, #12
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4640      	mov	r0, r8
 800ada0:	f7ff fee6 	bl	800ab70 <_printf_common>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d14a      	bne.n	800ae3e <_printf_i+0x1f2>
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	b004      	add	sp, #16
 800adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	f043 0320 	orr.w	r3, r3, #32
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	4833      	ldr	r0, [pc, #204]	@ (800ae88 <_printf_i+0x23c>)
 800adbc:	2778      	movs	r7, #120	@ 0x78
 800adbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	6831      	ldr	r1, [r6, #0]
 800adc6:	061f      	lsls	r7, r3, #24
 800adc8:	f851 5b04 	ldr.w	r5, [r1], #4
 800adcc:	d402      	bmi.n	800add4 <_printf_i+0x188>
 800adce:	065f      	lsls	r7, r3, #25
 800add0:	bf48      	it	mi
 800add2:	b2ad      	uxthmi	r5, r5
 800add4:	6031      	str	r1, [r6, #0]
 800add6:	07d9      	lsls	r1, r3, #31
 800add8:	bf44      	itt	mi
 800adda:	f043 0320 	orrmi.w	r3, r3, #32
 800adde:	6023      	strmi	r3, [r4, #0]
 800ade0:	b11d      	cbz	r5, 800adea <_printf_i+0x19e>
 800ade2:	2310      	movs	r3, #16
 800ade4:	e7ac      	b.n	800ad40 <_printf_i+0xf4>
 800ade6:	4827      	ldr	r0, [pc, #156]	@ (800ae84 <_printf_i+0x238>)
 800ade8:	e7e9      	b.n	800adbe <_printf_i+0x172>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	f023 0320 	bic.w	r3, r3, #32
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	e7f6      	b.n	800ade2 <_printf_i+0x196>
 800adf4:	4616      	mov	r6, r2
 800adf6:	e7bd      	b.n	800ad74 <_printf_i+0x128>
 800adf8:	6833      	ldr	r3, [r6, #0]
 800adfa:	6825      	ldr	r5, [r4, #0]
 800adfc:	6961      	ldr	r1, [r4, #20]
 800adfe:	1d18      	adds	r0, r3, #4
 800ae00:	6030      	str	r0, [r6, #0]
 800ae02:	062e      	lsls	r6, r5, #24
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	d501      	bpl.n	800ae0c <_printf_i+0x1c0>
 800ae08:	6019      	str	r1, [r3, #0]
 800ae0a:	e002      	b.n	800ae12 <_printf_i+0x1c6>
 800ae0c:	0668      	lsls	r0, r5, #25
 800ae0e:	d5fb      	bpl.n	800ae08 <_printf_i+0x1bc>
 800ae10:	8019      	strh	r1, [r3, #0]
 800ae12:	2300      	movs	r3, #0
 800ae14:	6123      	str	r3, [r4, #16]
 800ae16:	4616      	mov	r6, r2
 800ae18:	e7bc      	b.n	800ad94 <_printf_i+0x148>
 800ae1a:	6833      	ldr	r3, [r6, #0]
 800ae1c:	1d1a      	adds	r2, r3, #4
 800ae1e:	6032      	str	r2, [r6, #0]
 800ae20:	681e      	ldr	r6, [r3, #0]
 800ae22:	6862      	ldr	r2, [r4, #4]
 800ae24:	2100      	movs	r1, #0
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7f5 fa02 	bl	8000230 <memchr>
 800ae2c:	b108      	cbz	r0, 800ae32 <_printf_i+0x1e6>
 800ae2e:	1b80      	subs	r0, r0, r6
 800ae30:	6060      	str	r0, [r4, #4]
 800ae32:	6863      	ldr	r3, [r4, #4]
 800ae34:	6123      	str	r3, [r4, #16]
 800ae36:	2300      	movs	r3, #0
 800ae38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae3c:	e7aa      	b.n	800ad94 <_printf_i+0x148>
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	4632      	mov	r2, r6
 800ae42:	4649      	mov	r1, r9
 800ae44:	4640      	mov	r0, r8
 800ae46:	47d0      	blx	sl
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d0ad      	beq.n	800ada8 <_printf_i+0x15c>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	079b      	lsls	r3, r3, #30
 800ae50:	d413      	bmi.n	800ae7a <_printf_i+0x22e>
 800ae52:	68e0      	ldr	r0, [r4, #12]
 800ae54:	9b03      	ldr	r3, [sp, #12]
 800ae56:	4298      	cmp	r0, r3
 800ae58:	bfb8      	it	lt
 800ae5a:	4618      	movlt	r0, r3
 800ae5c:	e7a6      	b.n	800adac <_printf_i+0x160>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	4632      	mov	r2, r6
 800ae62:	4649      	mov	r1, r9
 800ae64:	4640      	mov	r0, r8
 800ae66:	47d0      	blx	sl
 800ae68:	3001      	adds	r0, #1
 800ae6a:	d09d      	beq.n	800ada8 <_printf_i+0x15c>
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	68e3      	ldr	r3, [r4, #12]
 800ae70:	9903      	ldr	r1, [sp, #12]
 800ae72:	1a5b      	subs	r3, r3, r1
 800ae74:	42ab      	cmp	r3, r5
 800ae76:	dcf2      	bgt.n	800ae5e <_printf_i+0x212>
 800ae78:	e7eb      	b.n	800ae52 <_printf_i+0x206>
 800ae7a:	2500      	movs	r5, #0
 800ae7c:	f104 0619 	add.w	r6, r4, #25
 800ae80:	e7f5      	b.n	800ae6e <_printf_i+0x222>
 800ae82:	bf00      	nop
 800ae84:	0800f04e 	.word	0x0800f04e
 800ae88:	0800f05f 	.word	0x0800f05f

0800ae8c <_scanf_float>:
 800ae8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae90:	b087      	sub	sp, #28
 800ae92:	4617      	mov	r7, r2
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	688b      	ldr	r3, [r1, #8]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ae9e:	bf81      	itttt	hi
 800aea0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aea4:	eb03 0b05 	addhi.w	fp, r3, r5
 800aea8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aeac:	608b      	strhi	r3, [r1, #8]
 800aeae:	680b      	ldr	r3, [r1, #0]
 800aeb0:	460a      	mov	r2, r1
 800aeb2:	f04f 0500 	mov.w	r5, #0
 800aeb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aeba:	f842 3b1c 	str.w	r3, [r2], #28
 800aebe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aec2:	4680      	mov	r8, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	bf98      	it	ls
 800aec8:	f04f 0b00 	movls.w	fp, #0
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	4616      	mov	r6, r2
 800aed0:	46aa      	mov	sl, r5
 800aed2:	46a9      	mov	r9, r5
 800aed4:	9502      	str	r5, [sp, #8]
 800aed6:	68a2      	ldr	r2, [r4, #8]
 800aed8:	b152      	cbz	r2, 800aef0 <_scanf_float+0x64>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b4e      	cmp	r3, #78	@ 0x4e
 800aee0:	d864      	bhi.n	800afac <_scanf_float+0x120>
 800aee2:	2b40      	cmp	r3, #64	@ 0x40
 800aee4:	d83c      	bhi.n	800af60 <_scanf_float+0xd4>
 800aee6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aeea:	b2c8      	uxtb	r0, r1
 800aeec:	280e      	cmp	r0, #14
 800aeee:	d93a      	bls.n	800af66 <_scanf_float+0xda>
 800aef0:	f1b9 0f00 	cmp.w	r9, #0
 800aef4:	d003      	beq.n	800aefe <_scanf_float+0x72>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af02:	f1ba 0f01 	cmp.w	sl, #1
 800af06:	f200 8117 	bhi.w	800b138 <_scanf_float+0x2ac>
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	429e      	cmp	r6, r3
 800af0e:	f200 8108 	bhi.w	800b122 <_scanf_float+0x296>
 800af12:	2001      	movs	r0, #1
 800af14:	b007      	add	sp, #28
 800af16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800af1e:	2a0d      	cmp	r2, #13
 800af20:	d8e6      	bhi.n	800aef0 <_scanf_float+0x64>
 800af22:	a101      	add	r1, pc, #4	@ (adr r1, 800af28 <_scanf_float+0x9c>)
 800af24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af28:	0800b06f 	.word	0x0800b06f
 800af2c:	0800aef1 	.word	0x0800aef1
 800af30:	0800aef1 	.word	0x0800aef1
 800af34:	0800aef1 	.word	0x0800aef1
 800af38:	0800b0cf 	.word	0x0800b0cf
 800af3c:	0800b0a7 	.word	0x0800b0a7
 800af40:	0800aef1 	.word	0x0800aef1
 800af44:	0800aef1 	.word	0x0800aef1
 800af48:	0800b07d 	.word	0x0800b07d
 800af4c:	0800aef1 	.word	0x0800aef1
 800af50:	0800aef1 	.word	0x0800aef1
 800af54:	0800aef1 	.word	0x0800aef1
 800af58:	0800aef1 	.word	0x0800aef1
 800af5c:	0800b035 	.word	0x0800b035
 800af60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af64:	e7db      	b.n	800af1e <_scanf_float+0x92>
 800af66:	290e      	cmp	r1, #14
 800af68:	d8c2      	bhi.n	800aef0 <_scanf_float+0x64>
 800af6a:	a001      	add	r0, pc, #4	@ (adr r0, 800af70 <_scanf_float+0xe4>)
 800af6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800af70:	0800b025 	.word	0x0800b025
 800af74:	0800aef1 	.word	0x0800aef1
 800af78:	0800b025 	.word	0x0800b025
 800af7c:	0800b0bb 	.word	0x0800b0bb
 800af80:	0800aef1 	.word	0x0800aef1
 800af84:	0800afcd 	.word	0x0800afcd
 800af88:	0800b00b 	.word	0x0800b00b
 800af8c:	0800b00b 	.word	0x0800b00b
 800af90:	0800b00b 	.word	0x0800b00b
 800af94:	0800b00b 	.word	0x0800b00b
 800af98:	0800b00b 	.word	0x0800b00b
 800af9c:	0800b00b 	.word	0x0800b00b
 800afa0:	0800b00b 	.word	0x0800b00b
 800afa4:	0800b00b 	.word	0x0800b00b
 800afa8:	0800b00b 	.word	0x0800b00b
 800afac:	2b6e      	cmp	r3, #110	@ 0x6e
 800afae:	d809      	bhi.n	800afc4 <_scanf_float+0x138>
 800afb0:	2b60      	cmp	r3, #96	@ 0x60
 800afb2:	d8b2      	bhi.n	800af1a <_scanf_float+0x8e>
 800afb4:	2b54      	cmp	r3, #84	@ 0x54
 800afb6:	d07b      	beq.n	800b0b0 <_scanf_float+0x224>
 800afb8:	2b59      	cmp	r3, #89	@ 0x59
 800afba:	d199      	bne.n	800aef0 <_scanf_float+0x64>
 800afbc:	2d07      	cmp	r5, #7
 800afbe:	d197      	bne.n	800aef0 <_scanf_float+0x64>
 800afc0:	2508      	movs	r5, #8
 800afc2:	e02c      	b.n	800b01e <_scanf_float+0x192>
 800afc4:	2b74      	cmp	r3, #116	@ 0x74
 800afc6:	d073      	beq.n	800b0b0 <_scanf_float+0x224>
 800afc8:	2b79      	cmp	r3, #121	@ 0x79
 800afca:	e7f6      	b.n	800afba <_scanf_float+0x12e>
 800afcc:	6821      	ldr	r1, [r4, #0]
 800afce:	05c8      	lsls	r0, r1, #23
 800afd0:	d51b      	bpl.n	800b00a <_scanf_float+0x17e>
 800afd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800afd6:	6021      	str	r1, [r4, #0]
 800afd8:	f109 0901 	add.w	r9, r9, #1
 800afdc:	f1bb 0f00 	cmp.w	fp, #0
 800afe0:	d003      	beq.n	800afea <_scanf_float+0x15e>
 800afe2:	3201      	adds	r2, #1
 800afe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afe8:	60a2      	str	r2, [r4, #8]
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	3b01      	subs	r3, #1
 800afee:	60a3      	str	r3, [r4, #8]
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	3301      	adds	r3, #1
 800aff4:	6123      	str	r3, [r4, #16]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3b01      	subs	r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	607b      	str	r3, [r7, #4]
 800affe:	f340 8087 	ble.w	800b110 <_scanf_float+0x284>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	3301      	adds	r3, #1
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	e765      	b.n	800aed6 <_scanf_float+0x4a>
 800b00a:	eb1a 0105 	adds.w	r1, sl, r5
 800b00e:	f47f af6f 	bne.w	800aef0 <_scanf_float+0x64>
 800b012:	6822      	ldr	r2, [r4, #0]
 800b014:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	460d      	mov	r5, r1
 800b01c:	468a      	mov	sl, r1
 800b01e:	f806 3b01 	strb.w	r3, [r6], #1
 800b022:	e7e2      	b.n	800afea <_scanf_float+0x15e>
 800b024:	6822      	ldr	r2, [r4, #0]
 800b026:	0610      	lsls	r0, r2, #24
 800b028:	f57f af62 	bpl.w	800aef0 <_scanf_float+0x64>
 800b02c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b030:	6022      	str	r2, [r4, #0]
 800b032:	e7f4      	b.n	800b01e <_scanf_float+0x192>
 800b034:	f1ba 0f00 	cmp.w	sl, #0
 800b038:	d10e      	bne.n	800b058 <_scanf_float+0x1cc>
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d10e      	bne.n	800b05e <_scanf_float+0x1d2>
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b046:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b04a:	d108      	bne.n	800b05e <_scanf_float+0x1d2>
 800b04c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b050:	6022      	str	r2, [r4, #0]
 800b052:	f04f 0a01 	mov.w	sl, #1
 800b056:	e7e2      	b.n	800b01e <_scanf_float+0x192>
 800b058:	f1ba 0f02 	cmp.w	sl, #2
 800b05c:	d055      	beq.n	800b10a <_scanf_float+0x27e>
 800b05e:	2d01      	cmp	r5, #1
 800b060:	d002      	beq.n	800b068 <_scanf_float+0x1dc>
 800b062:	2d04      	cmp	r5, #4
 800b064:	f47f af44 	bne.w	800aef0 <_scanf_float+0x64>
 800b068:	3501      	adds	r5, #1
 800b06a:	b2ed      	uxtb	r5, r5
 800b06c:	e7d7      	b.n	800b01e <_scanf_float+0x192>
 800b06e:	f1ba 0f01 	cmp.w	sl, #1
 800b072:	f47f af3d 	bne.w	800aef0 <_scanf_float+0x64>
 800b076:	f04f 0a02 	mov.w	sl, #2
 800b07a:	e7d0      	b.n	800b01e <_scanf_float+0x192>
 800b07c:	b97d      	cbnz	r5, 800b09e <_scanf_float+0x212>
 800b07e:	f1b9 0f00 	cmp.w	r9, #0
 800b082:	f47f af38 	bne.w	800aef6 <_scanf_float+0x6a>
 800b086:	6822      	ldr	r2, [r4, #0]
 800b088:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b08c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b090:	f040 8108 	bne.w	800b2a4 <_scanf_float+0x418>
 800b094:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b098:	6022      	str	r2, [r4, #0]
 800b09a:	2501      	movs	r5, #1
 800b09c:	e7bf      	b.n	800b01e <_scanf_float+0x192>
 800b09e:	2d03      	cmp	r5, #3
 800b0a0:	d0e2      	beq.n	800b068 <_scanf_float+0x1dc>
 800b0a2:	2d05      	cmp	r5, #5
 800b0a4:	e7de      	b.n	800b064 <_scanf_float+0x1d8>
 800b0a6:	2d02      	cmp	r5, #2
 800b0a8:	f47f af22 	bne.w	800aef0 <_scanf_float+0x64>
 800b0ac:	2503      	movs	r5, #3
 800b0ae:	e7b6      	b.n	800b01e <_scanf_float+0x192>
 800b0b0:	2d06      	cmp	r5, #6
 800b0b2:	f47f af1d 	bne.w	800aef0 <_scanf_float+0x64>
 800b0b6:	2507      	movs	r5, #7
 800b0b8:	e7b1      	b.n	800b01e <_scanf_float+0x192>
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	0591      	lsls	r1, r2, #22
 800b0be:	f57f af17 	bpl.w	800aef0 <_scanf_float+0x64>
 800b0c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b0c6:	6022      	str	r2, [r4, #0]
 800b0c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0cc:	e7a7      	b.n	800b01e <_scanf_float+0x192>
 800b0ce:	6822      	ldr	r2, [r4, #0]
 800b0d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b0d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b0d8:	d006      	beq.n	800b0e8 <_scanf_float+0x25c>
 800b0da:	0550      	lsls	r0, r2, #21
 800b0dc:	f57f af08 	bpl.w	800aef0 <_scanf_float+0x64>
 800b0e0:	f1b9 0f00 	cmp.w	r9, #0
 800b0e4:	f000 80de 	beq.w	800b2a4 <_scanf_float+0x418>
 800b0e8:	0591      	lsls	r1, r2, #22
 800b0ea:	bf58      	it	pl
 800b0ec:	9902      	ldrpl	r1, [sp, #8]
 800b0ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0f2:	bf58      	it	pl
 800b0f4:	eba9 0101 	subpl.w	r1, r9, r1
 800b0f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b0fc:	bf58      	it	pl
 800b0fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b102:	6022      	str	r2, [r4, #0]
 800b104:	f04f 0900 	mov.w	r9, #0
 800b108:	e789      	b.n	800b01e <_scanf_float+0x192>
 800b10a:	f04f 0a03 	mov.w	sl, #3
 800b10e:	e786      	b.n	800b01e <_scanf_float+0x192>
 800b110:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b114:	4639      	mov	r1, r7
 800b116:	4640      	mov	r0, r8
 800b118:	4798      	blx	r3
 800b11a:	2800      	cmp	r0, #0
 800b11c:	f43f aedb 	beq.w	800aed6 <_scanf_float+0x4a>
 800b120:	e6e6      	b.n	800aef0 <_scanf_float+0x64>
 800b122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b12a:	463a      	mov	r2, r7
 800b12c:	4640      	mov	r0, r8
 800b12e:	4798      	blx	r3
 800b130:	6923      	ldr	r3, [r4, #16]
 800b132:	3b01      	subs	r3, #1
 800b134:	6123      	str	r3, [r4, #16]
 800b136:	e6e8      	b.n	800af0a <_scanf_float+0x7e>
 800b138:	1e6b      	subs	r3, r5, #1
 800b13a:	2b06      	cmp	r3, #6
 800b13c:	d824      	bhi.n	800b188 <_scanf_float+0x2fc>
 800b13e:	2d02      	cmp	r5, #2
 800b140:	d836      	bhi.n	800b1b0 <_scanf_float+0x324>
 800b142:	9b01      	ldr	r3, [sp, #4]
 800b144:	429e      	cmp	r6, r3
 800b146:	f67f aee4 	bls.w	800af12 <_scanf_float+0x86>
 800b14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b14e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b152:	463a      	mov	r2, r7
 800b154:	4640      	mov	r0, r8
 800b156:	4798      	blx	r3
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	6123      	str	r3, [r4, #16]
 800b15e:	e7f0      	b.n	800b142 <_scanf_float+0x2b6>
 800b160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b164:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b168:	463a      	mov	r2, r7
 800b16a:	4640      	mov	r0, r8
 800b16c:	4798      	blx	r3
 800b16e:	6923      	ldr	r3, [r4, #16]
 800b170:	3b01      	subs	r3, #1
 800b172:	6123      	str	r3, [r4, #16]
 800b174:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b178:	fa5f fa8a 	uxtb.w	sl, sl
 800b17c:	f1ba 0f02 	cmp.w	sl, #2
 800b180:	d1ee      	bne.n	800b160 <_scanf_float+0x2d4>
 800b182:	3d03      	subs	r5, #3
 800b184:	b2ed      	uxtb	r5, r5
 800b186:	1b76      	subs	r6, r6, r5
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	05da      	lsls	r2, r3, #23
 800b18c:	d530      	bpl.n	800b1f0 <_scanf_float+0x364>
 800b18e:	055b      	lsls	r3, r3, #21
 800b190:	d511      	bpl.n	800b1b6 <_scanf_float+0x32a>
 800b192:	9b01      	ldr	r3, [sp, #4]
 800b194:	429e      	cmp	r6, r3
 800b196:	f67f aebc 	bls.w	800af12 <_scanf_float+0x86>
 800b19a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b19e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1a2:	463a      	mov	r2, r7
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	4798      	blx	r3
 800b1a8:	6923      	ldr	r3, [r4, #16]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	6123      	str	r3, [r4, #16]
 800b1ae:	e7f0      	b.n	800b192 <_scanf_float+0x306>
 800b1b0:	46aa      	mov	sl, r5
 800b1b2:	46b3      	mov	fp, r6
 800b1b4:	e7de      	b.n	800b174 <_scanf_float+0x2e8>
 800b1b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	2965      	cmp	r1, #101	@ 0x65
 800b1be:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1c2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b1c6:	6123      	str	r3, [r4, #16]
 800b1c8:	d00c      	beq.n	800b1e4 <_scanf_float+0x358>
 800b1ca:	2945      	cmp	r1, #69	@ 0x45
 800b1cc:	d00a      	beq.n	800b1e4 <_scanf_float+0x358>
 800b1ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1d2:	463a      	mov	r2, r7
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4798      	blx	r3
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	1eb5      	subs	r5, r6, #2
 800b1e2:	6123      	str	r3, [r4, #16]
 800b1e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1e8:	463a      	mov	r2, r7
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4798      	blx	r3
 800b1ee:	462e      	mov	r6, r5
 800b1f0:	6822      	ldr	r2, [r4, #0]
 800b1f2:	f012 0210 	ands.w	r2, r2, #16
 800b1f6:	d001      	beq.n	800b1fc <_scanf_float+0x370>
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	e68b      	b.n	800af14 <_scanf_float+0x88>
 800b1fc:	7032      	strb	r2, [r6, #0]
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b208:	d11c      	bne.n	800b244 <_scanf_float+0x3b8>
 800b20a:	9b02      	ldr	r3, [sp, #8]
 800b20c:	454b      	cmp	r3, r9
 800b20e:	eba3 0209 	sub.w	r2, r3, r9
 800b212:	d123      	bne.n	800b25c <_scanf_float+0x3d0>
 800b214:	9901      	ldr	r1, [sp, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	4640      	mov	r0, r8
 800b21a:	f002 fc6d 	bl	800daf8 <_strtod_r>
 800b21e:	9b03      	ldr	r3, [sp, #12]
 800b220:	6821      	ldr	r1, [r4, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f011 0f02 	tst.w	r1, #2
 800b228:	ec57 6b10 	vmov	r6, r7, d0
 800b22c:	f103 0204 	add.w	r2, r3, #4
 800b230:	d01f      	beq.n	800b272 <_scanf_float+0x3e6>
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	600a      	str	r2, [r1, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	e9c3 6700 	strd	r6, r7, [r3]
 800b23c:	68e3      	ldr	r3, [r4, #12]
 800b23e:	3301      	adds	r3, #1
 800b240:	60e3      	str	r3, [r4, #12]
 800b242:	e7d9      	b.n	800b1f8 <_scanf_float+0x36c>
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0e4      	beq.n	800b214 <_scanf_float+0x388>
 800b24a:	9905      	ldr	r1, [sp, #20]
 800b24c:	230a      	movs	r3, #10
 800b24e:	3101      	adds	r1, #1
 800b250:	4640      	mov	r0, r8
 800b252:	f002 fcd1 	bl	800dbf8 <_strtol_r>
 800b256:	9b04      	ldr	r3, [sp, #16]
 800b258:	9e05      	ldr	r6, [sp, #20]
 800b25a:	1ac2      	subs	r2, r0, r3
 800b25c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b260:	429e      	cmp	r6, r3
 800b262:	bf28      	it	cs
 800b264:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b268:	4910      	ldr	r1, [pc, #64]	@ (800b2ac <_scanf_float+0x420>)
 800b26a:	4630      	mov	r0, r6
 800b26c:	f000 f8e4 	bl	800b438 <siprintf>
 800b270:	e7d0      	b.n	800b214 <_scanf_float+0x388>
 800b272:	f011 0f04 	tst.w	r1, #4
 800b276:	9903      	ldr	r1, [sp, #12]
 800b278:	600a      	str	r2, [r1, #0]
 800b27a:	d1dc      	bne.n	800b236 <_scanf_float+0x3aa>
 800b27c:	681d      	ldr	r5, [r3, #0]
 800b27e:	4632      	mov	r2, r6
 800b280:	463b      	mov	r3, r7
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	f7f5 fc81 	bl	8000b8c <__aeabi_dcmpun>
 800b28a:	b128      	cbz	r0, 800b298 <_scanf_float+0x40c>
 800b28c:	4808      	ldr	r0, [pc, #32]	@ (800b2b0 <_scanf_float+0x424>)
 800b28e:	f000 fa2d 	bl	800b6ec <nanf>
 800b292:	ed85 0a00 	vstr	s0, [r5]
 800b296:	e7d1      	b.n	800b23c <_scanf_float+0x3b0>
 800b298:	4630      	mov	r0, r6
 800b29a:	4639      	mov	r1, r7
 800b29c:	f7f5 fcd4 	bl	8000c48 <__aeabi_d2f>
 800b2a0:	6028      	str	r0, [r5, #0]
 800b2a2:	e7cb      	b.n	800b23c <_scanf_float+0x3b0>
 800b2a4:	f04f 0900 	mov.w	r9, #0
 800b2a8:	e629      	b.n	800aefe <_scanf_float+0x72>
 800b2aa:	bf00      	nop
 800b2ac:	0800f070 	.word	0x0800f070
 800b2b0:	0800f405 	.word	0x0800f405

0800b2b4 <std>:
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2c2:	6083      	str	r3, [r0, #8]
 800b2c4:	8181      	strh	r1, [r0, #12]
 800b2c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2c8:	81c2      	strh	r2, [r0, #14]
 800b2ca:	6183      	str	r3, [r0, #24]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	2208      	movs	r2, #8
 800b2d0:	305c      	adds	r0, #92	@ 0x5c
 800b2d2:	f000 f914 	bl	800b4fe <memset>
 800b2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b30c <std+0x58>)
 800b2d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2da:	4b0d      	ldr	r3, [pc, #52]	@ (800b310 <std+0x5c>)
 800b2dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2de:	4b0d      	ldr	r3, [pc, #52]	@ (800b314 <std+0x60>)
 800b2e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b318 <std+0x64>)
 800b2e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b31c <std+0x68>)
 800b2e8:	6224      	str	r4, [r4, #32]
 800b2ea:	429c      	cmp	r4, r3
 800b2ec:	d006      	beq.n	800b2fc <std+0x48>
 800b2ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2f2:	4294      	cmp	r4, r2
 800b2f4:	d002      	beq.n	800b2fc <std+0x48>
 800b2f6:	33d0      	adds	r3, #208	@ 0xd0
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	d105      	bne.n	800b308 <std+0x54>
 800b2fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b304:	f000 b9e0 	b.w	800b6c8 <__retarget_lock_init_recursive>
 800b308:	bd10      	pop	{r4, pc}
 800b30a:	bf00      	nop
 800b30c:	0800b479 	.word	0x0800b479
 800b310:	0800b49b 	.word	0x0800b49b
 800b314:	0800b4d3 	.word	0x0800b4d3
 800b318:	0800b4f7 	.word	0x0800b4f7
 800b31c:	20004f2c 	.word	0x20004f2c

0800b320 <stdio_exit_handler>:
 800b320:	4a02      	ldr	r2, [pc, #8]	@ (800b32c <stdio_exit_handler+0xc>)
 800b322:	4903      	ldr	r1, [pc, #12]	@ (800b330 <stdio_exit_handler+0x10>)
 800b324:	4803      	ldr	r0, [pc, #12]	@ (800b334 <stdio_exit_handler+0x14>)
 800b326:	f000 b869 	b.w	800b3fc <_fwalk_sglue>
 800b32a:	bf00      	nop
 800b32c:	20000170 	.word	0x20000170
 800b330:	0800dfb5 	.word	0x0800dfb5
 800b334:	20000180 	.word	0x20000180

0800b338 <cleanup_stdio>:
 800b338:	6841      	ldr	r1, [r0, #4]
 800b33a:	4b0c      	ldr	r3, [pc, #48]	@ (800b36c <cleanup_stdio+0x34>)
 800b33c:	4299      	cmp	r1, r3
 800b33e:	b510      	push	{r4, lr}
 800b340:	4604      	mov	r4, r0
 800b342:	d001      	beq.n	800b348 <cleanup_stdio+0x10>
 800b344:	f002 fe36 	bl	800dfb4 <_fflush_r>
 800b348:	68a1      	ldr	r1, [r4, #8]
 800b34a:	4b09      	ldr	r3, [pc, #36]	@ (800b370 <cleanup_stdio+0x38>)
 800b34c:	4299      	cmp	r1, r3
 800b34e:	d002      	beq.n	800b356 <cleanup_stdio+0x1e>
 800b350:	4620      	mov	r0, r4
 800b352:	f002 fe2f 	bl	800dfb4 <_fflush_r>
 800b356:	68e1      	ldr	r1, [r4, #12]
 800b358:	4b06      	ldr	r3, [pc, #24]	@ (800b374 <cleanup_stdio+0x3c>)
 800b35a:	4299      	cmp	r1, r3
 800b35c:	d004      	beq.n	800b368 <cleanup_stdio+0x30>
 800b35e:	4620      	mov	r0, r4
 800b360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b364:	f002 be26 	b.w	800dfb4 <_fflush_r>
 800b368:	bd10      	pop	{r4, pc}
 800b36a:	bf00      	nop
 800b36c:	20004f2c 	.word	0x20004f2c
 800b370:	20004f94 	.word	0x20004f94
 800b374:	20004ffc 	.word	0x20004ffc

0800b378 <global_stdio_init.part.0>:
 800b378:	b510      	push	{r4, lr}
 800b37a:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a8 <global_stdio_init.part.0+0x30>)
 800b37c:	4c0b      	ldr	r4, [pc, #44]	@ (800b3ac <global_stdio_init.part.0+0x34>)
 800b37e:	4a0c      	ldr	r2, [pc, #48]	@ (800b3b0 <global_stdio_init.part.0+0x38>)
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	4620      	mov	r0, r4
 800b384:	2200      	movs	r2, #0
 800b386:	2104      	movs	r1, #4
 800b388:	f7ff ff94 	bl	800b2b4 <std>
 800b38c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b390:	2201      	movs	r2, #1
 800b392:	2109      	movs	r1, #9
 800b394:	f7ff ff8e 	bl	800b2b4 <std>
 800b398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b39c:	2202      	movs	r2, #2
 800b39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a2:	2112      	movs	r1, #18
 800b3a4:	f7ff bf86 	b.w	800b2b4 <std>
 800b3a8:	20005064 	.word	0x20005064
 800b3ac:	20004f2c 	.word	0x20004f2c
 800b3b0:	0800b321 	.word	0x0800b321

0800b3b4 <__sfp_lock_acquire>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	@ (800b3bc <__sfp_lock_acquire+0x8>)
 800b3b6:	f000 b988 	b.w	800b6ca <__retarget_lock_acquire_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	2000506d 	.word	0x2000506d

0800b3c0 <__sfp_lock_release>:
 800b3c0:	4801      	ldr	r0, [pc, #4]	@ (800b3c8 <__sfp_lock_release+0x8>)
 800b3c2:	f000 b983 	b.w	800b6cc <__retarget_lock_release_recursive>
 800b3c6:	bf00      	nop
 800b3c8:	2000506d 	.word	0x2000506d

0800b3cc <__sinit>:
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	f7ff fff0 	bl	800b3b4 <__sfp_lock_acquire>
 800b3d4:	6a23      	ldr	r3, [r4, #32]
 800b3d6:	b11b      	cbz	r3, 800b3e0 <__sinit+0x14>
 800b3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3dc:	f7ff bff0 	b.w	800b3c0 <__sfp_lock_release>
 800b3e0:	4b04      	ldr	r3, [pc, #16]	@ (800b3f4 <__sinit+0x28>)
 800b3e2:	6223      	str	r3, [r4, #32]
 800b3e4:	4b04      	ldr	r3, [pc, #16]	@ (800b3f8 <__sinit+0x2c>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1f5      	bne.n	800b3d8 <__sinit+0xc>
 800b3ec:	f7ff ffc4 	bl	800b378 <global_stdio_init.part.0>
 800b3f0:	e7f2      	b.n	800b3d8 <__sinit+0xc>
 800b3f2:	bf00      	nop
 800b3f4:	0800b339 	.word	0x0800b339
 800b3f8:	20005064 	.word	0x20005064

0800b3fc <_fwalk_sglue>:
 800b3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b400:	4607      	mov	r7, r0
 800b402:	4688      	mov	r8, r1
 800b404:	4614      	mov	r4, r2
 800b406:	2600      	movs	r6, #0
 800b408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b40c:	f1b9 0901 	subs.w	r9, r9, #1
 800b410:	d505      	bpl.n	800b41e <_fwalk_sglue+0x22>
 800b412:	6824      	ldr	r4, [r4, #0]
 800b414:	2c00      	cmp	r4, #0
 800b416:	d1f7      	bne.n	800b408 <_fwalk_sglue+0xc>
 800b418:	4630      	mov	r0, r6
 800b41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d907      	bls.n	800b434 <_fwalk_sglue+0x38>
 800b424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b428:	3301      	adds	r3, #1
 800b42a:	d003      	beq.n	800b434 <_fwalk_sglue+0x38>
 800b42c:	4629      	mov	r1, r5
 800b42e:	4638      	mov	r0, r7
 800b430:	47c0      	blx	r8
 800b432:	4306      	orrs	r6, r0
 800b434:	3568      	adds	r5, #104	@ 0x68
 800b436:	e7e9      	b.n	800b40c <_fwalk_sglue+0x10>

0800b438 <siprintf>:
 800b438:	b40e      	push	{r1, r2, r3}
 800b43a:	b500      	push	{lr}
 800b43c:	b09c      	sub	sp, #112	@ 0x70
 800b43e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b440:	9002      	str	r0, [sp, #8]
 800b442:	9006      	str	r0, [sp, #24]
 800b444:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b448:	4809      	ldr	r0, [pc, #36]	@ (800b470 <siprintf+0x38>)
 800b44a:	9107      	str	r1, [sp, #28]
 800b44c:	9104      	str	r1, [sp, #16]
 800b44e:	4909      	ldr	r1, [pc, #36]	@ (800b474 <siprintf+0x3c>)
 800b450:	f853 2b04 	ldr.w	r2, [r3], #4
 800b454:	9105      	str	r1, [sp, #20]
 800b456:	6800      	ldr	r0, [r0, #0]
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	a902      	add	r1, sp, #8
 800b45c:	f002 fc2a 	bl	800dcb4 <_svfiprintf_r>
 800b460:	9b02      	ldr	r3, [sp, #8]
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	b01c      	add	sp, #112	@ 0x70
 800b468:	f85d eb04 	ldr.w	lr, [sp], #4
 800b46c:	b003      	add	sp, #12
 800b46e:	4770      	bx	lr
 800b470:	2000017c 	.word	0x2000017c
 800b474:	ffff0208 	.word	0xffff0208

0800b478 <__sread>:
 800b478:	b510      	push	{r4, lr}
 800b47a:	460c      	mov	r4, r1
 800b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b480:	f000 f8d4 	bl	800b62c <_read_r>
 800b484:	2800      	cmp	r0, #0
 800b486:	bfab      	itete	ge
 800b488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b48a:	89a3      	ldrhlt	r3, [r4, #12]
 800b48c:	181b      	addge	r3, r3, r0
 800b48e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b492:	bfac      	ite	ge
 800b494:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b496:	81a3      	strhlt	r3, [r4, #12]
 800b498:	bd10      	pop	{r4, pc}

0800b49a <__swrite>:
 800b49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	461f      	mov	r7, r3
 800b4a0:	898b      	ldrh	r3, [r1, #12]
 800b4a2:	05db      	lsls	r3, r3, #23
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	4616      	mov	r6, r2
 800b4aa:	d505      	bpl.n	800b4b8 <__swrite+0x1e>
 800b4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f000 f8a8 	bl	800b608 <_lseek_r>
 800b4b8:	89a3      	ldrh	r3, [r4, #12]
 800b4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4c2:	81a3      	strh	r3, [r4, #12]
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	463b      	mov	r3, r7
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ce:	f000 b8bf 	b.w	800b650 <_write_r>

0800b4d2 <__sseek>:
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4da:	f000 f895 	bl	800b608 <_lseek_r>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	bf15      	itete	ne
 800b4e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4ee:	81a3      	strheq	r3, [r4, #12]
 800b4f0:	bf18      	it	ne
 800b4f2:	81a3      	strhne	r3, [r4, #12]
 800b4f4:	bd10      	pop	{r4, pc}

0800b4f6 <__sclose>:
 800b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fa:	f000 b81f 	b.w	800b53c <_close_r>

0800b4fe <memset>:
 800b4fe:	4402      	add	r2, r0
 800b500:	4603      	mov	r3, r0
 800b502:	4293      	cmp	r3, r2
 800b504:	d100      	bne.n	800b508 <memset+0xa>
 800b506:	4770      	bx	lr
 800b508:	f803 1b01 	strb.w	r1, [r3], #1
 800b50c:	e7f9      	b.n	800b502 <memset+0x4>
	...

0800b510 <strupr>:
 800b510:	b510      	push	{r4, lr}
 800b512:	4c07      	ldr	r4, [pc, #28]	@ (800b530 <strupr+0x20>)
 800b514:	1e42      	subs	r2, r0, #1
 800b516:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b51a:	b903      	cbnz	r3, 800b51e <strupr+0xe>
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	5ce1      	ldrb	r1, [r4, r3]
 800b520:	f001 0103 	and.w	r1, r1, #3
 800b524:	2902      	cmp	r1, #2
 800b526:	bf08      	it	eq
 800b528:	3b20      	subeq	r3, #32
 800b52a:	7013      	strb	r3, [r2, #0]
 800b52c:	e7f3      	b.n	800b516 <strupr+0x6>
 800b52e:	bf00      	nop
 800b530:	0800f2b1 	.word	0x0800f2b1

0800b534 <_localeconv_r>:
 800b534:	4800      	ldr	r0, [pc, #0]	@ (800b538 <_localeconv_r+0x4>)
 800b536:	4770      	bx	lr
 800b538:	200002bc 	.word	0x200002bc

0800b53c <_close_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d06      	ldr	r5, [pc, #24]	@ (800b558 <_close_r+0x1c>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	602b      	str	r3, [r5, #0]
 800b548:	f7f7 fc6a 	bl	8002e20 <_close>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_close_r+0x1a>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_close_r+0x1a>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	20005068 	.word	0x20005068

0800b55c <_reclaim_reent>:
 800b55c:	4b29      	ldr	r3, [pc, #164]	@ (800b604 <_reclaim_reent+0xa8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4283      	cmp	r3, r0
 800b562:	b570      	push	{r4, r5, r6, lr}
 800b564:	4604      	mov	r4, r0
 800b566:	d04b      	beq.n	800b600 <_reclaim_reent+0xa4>
 800b568:	69c3      	ldr	r3, [r0, #28]
 800b56a:	b1ab      	cbz	r3, 800b598 <_reclaim_reent+0x3c>
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	b16b      	cbz	r3, 800b58c <_reclaim_reent+0x30>
 800b570:	2500      	movs	r5, #0
 800b572:	69e3      	ldr	r3, [r4, #28]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	5959      	ldr	r1, [r3, r5]
 800b578:	2900      	cmp	r1, #0
 800b57a:	d13b      	bne.n	800b5f4 <_reclaim_reent+0x98>
 800b57c:	3504      	adds	r5, #4
 800b57e:	2d80      	cmp	r5, #128	@ 0x80
 800b580:	d1f7      	bne.n	800b572 <_reclaim_reent+0x16>
 800b582:	69e3      	ldr	r3, [r4, #28]
 800b584:	4620      	mov	r0, r4
 800b586:	68d9      	ldr	r1, [r3, #12]
 800b588:	f000 ff02 	bl	800c390 <_free_r>
 800b58c:	69e3      	ldr	r3, [r4, #28]
 800b58e:	6819      	ldr	r1, [r3, #0]
 800b590:	b111      	cbz	r1, 800b598 <_reclaim_reent+0x3c>
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fefc 	bl	800c390 <_free_r>
 800b598:	6961      	ldr	r1, [r4, #20]
 800b59a:	b111      	cbz	r1, 800b5a2 <_reclaim_reent+0x46>
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 fef7 	bl	800c390 <_free_r>
 800b5a2:	69e1      	ldr	r1, [r4, #28]
 800b5a4:	b111      	cbz	r1, 800b5ac <_reclaim_reent+0x50>
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 fef2 	bl	800c390 <_free_r>
 800b5ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b5ae:	b111      	cbz	r1, 800b5b6 <_reclaim_reent+0x5a>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 feed 	bl	800c390 <_free_r>
 800b5b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5b8:	b111      	cbz	r1, 800b5c0 <_reclaim_reent+0x64>
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 fee8 	bl	800c390 <_free_r>
 800b5c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b5c2:	b111      	cbz	r1, 800b5ca <_reclaim_reent+0x6e>
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f000 fee3 	bl	800c390 <_free_r>
 800b5ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b5cc:	b111      	cbz	r1, 800b5d4 <_reclaim_reent+0x78>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 fede 	bl	800c390 <_free_r>
 800b5d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b5d6:	b111      	cbz	r1, 800b5de <_reclaim_reent+0x82>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 fed9 	bl	800c390 <_free_r>
 800b5de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b5e0:	b111      	cbz	r1, 800b5e8 <_reclaim_reent+0x8c>
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 fed4 	bl	800c390 <_free_r>
 800b5e8:	6a23      	ldr	r3, [r4, #32]
 800b5ea:	b14b      	cbz	r3, 800b600 <_reclaim_reent+0xa4>
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5f2:	4718      	bx	r3
 800b5f4:	680e      	ldr	r6, [r1, #0]
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 feca 	bl	800c390 <_free_r>
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	e7bb      	b.n	800b578 <_reclaim_reent+0x1c>
 800b600:	bd70      	pop	{r4, r5, r6, pc}
 800b602:	bf00      	nop
 800b604:	2000017c 	.word	0x2000017c

0800b608 <_lseek_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d07      	ldr	r5, [pc, #28]	@ (800b628 <_lseek_r+0x20>)
 800b60c:	4604      	mov	r4, r0
 800b60e:	4608      	mov	r0, r1
 800b610:	4611      	mov	r1, r2
 800b612:	2200      	movs	r2, #0
 800b614:	602a      	str	r2, [r5, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	f7f7 fc29 	bl	8002e6e <_lseek>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_lseek_r+0x1e>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_lseek_r+0x1e>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	20005068 	.word	0x20005068

0800b62c <_read_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d07      	ldr	r5, [pc, #28]	@ (800b64c <_read_r+0x20>)
 800b630:	4604      	mov	r4, r0
 800b632:	4608      	mov	r0, r1
 800b634:	4611      	mov	r1, r2
 800b636:	2200      	movs	r2, #0
 800b638:	602a      	str	r2, [r5, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f7f7 fbb7 	bl	8002dae <_read>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_read_r+0x1e>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_read_r+0x1e>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20005068 	.word	0x20005068

0800b650 <_write_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	@ (800b670 <_write_r+0x20>)
 800b654:	4604      	mov	r4, r0
 800b656:	4608      	mov	r0, r1
 800b658:	4611      	mov	r1, r2
 800b65a:	2200      	movs	r2, #0
 800b65c:	602a      	str	r2, [r5, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	f7f7 fbc2 	bl	8002de8 <_write>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_write_r+0x1e>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_write_r+0x1e>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	20005068 	.word	0x20005068

0800b674 <__errno>:
 800b674:	4b01      	ldr	r3, [pc, #4]	@ (800b67c <__errno+0x8>)
 800b676:	6818      	ldr	r0, [r3, #0]
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	2000017c 	.word	0x2000017c

0800b680 <__libc_init_array>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	4d0d      	ldr	r5, [pc, #52]	@ (800b6b8 <__libc_init_array+0x38>)
 800b684:	4c0d      	ldr	r4, [pc, #52]	@ (800b6bc <__libc_init_array+0x3c>)
 800b686:	1b64      	subs	r4, r4, r5
 800b688:	10a4      	asrs	r4, r4, #2
 800b68a:	2600      	movs	r6, #0
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	d109      	bne.n	800b6a4 <__libc_init_array+0x24>
 800b690:	4d0b      	ldr	r5, [pc, #44]	@ (800b6c0 <__libc_init_array+0x40>)
 800b692:	4c0c      	ldr	r4, [pc, #48]	@ (800b6c4 <__libc_init_array+0x44>)
 800b694:	f003 fb72 	bl	800ed7c <_init>
 800b698:	1b64      	subs	r4, r4, r5
 800b69a:	10a4      	asrs	r4, r4, #2
 800b69c:	2600      	movs	r6, #0
 800b69e:	42a6      	cmp	r6, r4
 800b6a0:	d105      	bne.n	800b6ae <__libc_init_array+0x2e>
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a8:	4798      	blx	r3
 800b6aa:	3601      	adds	r6, #1
 800b6ac:	e7ee      	b.n	800b68c <__libc_init_array+0xc>
 800b6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b2:	4798      	blx	r3
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	e7f2      	b.n	800b69e <__libc_init_array+0x1e>
 800b6b8:	0800f470 	.word	0x0800f470
 800b6bc:	0800f470 	.word	0x0800f470
 800b6c0:	0800f470 	.word	0x0800f470
 800b6c4:	0800f474 	.word	0x0800f474

0800b6c8 <__retarget_lock_init_recursive>:
 800b6c8:	4770      	bx	lr

0800b6ca <__retarget_lock_acquire_recursive>:
 800b6ca:	4770      	bx	lr

0800b6cc <__retarget_lock_release_recursive>:
 800b6cc:	4770      	bx	lr

0800b6ce <memcpy>:
 800b6ce:	440a      	add	r2, r1
 800b6d0:	4291      	cmp	r1, r2
 800b6d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6d6:	d100      	bne.n	800b6da <memcpy+0xc>
 800b6d8:	4770      	bx	lr
 800b6da:	b510      	push	{r4, lr}
 800b6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6e4:	4291      	cmp	r1, r2
 800b6e6:	d1f9      	bne.n	800b6dc <memcpy+0xe>
 800b6e8:	bd10      	pop	{r4, pc}
	...

0800b6ec <nanf>:
 800b6ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b6f4 <nanf+0x8>
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	7fc00000 	.word	0x7fc00000

0800b6f8 <quorem>:
 800b6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	6903      	ldr	r3, [r0, #16]
 800b6fe:	690c      	ldr	r4, [r1, #16]
 800b700:	42a3      	cmp	r3, r4
 800b702:	4607      	mov	r7, r0
 800b704:	db7e      	blt.n	800b804 <quorem+0x10c>
 800b706:	3c01      	subs	r4, #1
 800b708:	f101 0814 	add.w	r8, r1, #20
 800b70c:	00a3      	lsls	r3, r4, #2
 800b70e:	f100 0514 	add.w	r5, r0, #20
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b71e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b722:	3301      	adds	r3, #1
 800b724:	429a      	cmp	r2, r3
 800b726:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b72a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b72e:	d32e      	bcc.n	800b78e <quorem+0x96>
 800b730:	f04f 0a00 	mov.w	sl, #0
 800b734:	46c4      	mov	ip, r8
 800b736:	46ae      	mov	lr, r5
 800b738:	46d3      	mov	fp, sl
 800b73a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b73e:	b298      	uxth	r0, r3
 800b740:	fb06 a000 	mla	r0, r6, r0, sl
 800b744:	0c02      	lsrs	r2, r0, #16
 800b746:	0c1b      	lsrs	r3, r3, #16
 800b748:	fb06 2303 	mla	r3, r6, r3, r2
 800b74c:	f8de 2000 	ldr.w	r2, [lr]
 800b750:	b280      	uxth	r0, r0
 800b752:	b292      	uxth	r2, r2
 800b754:	1a12      	subs	r2, r2, r0
 800b756:	445a      	add	r2, fp
 800b758:	f8de 0000 	ldr.w	r0, [lr]
 800b75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b760:	b29b      	uxth	r3, r3
 800b762:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b766:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b76a:	b292      	uxth	r2, r2
 800b76c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b770:	45e1      	cmp	r9, ip
 800b772:	f84e 2b04 	str.w	r2, [lr], #4
 800b776:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b77a:	d2de      	bcs.n	800b73a <quorem+0x42>
 800b77c:	9b00      	ldr	r3, [sp, #0]
 800b77e:	58eb      	ldr	r3, [r5, r3]
 800b780:	b92b      	cbnz	r3, 800b78e <quorem+0x96>
 800b782:	9b01      	ldr	r3, [sp, #4]
 800b784:	3b04      	subs	r3, #4
 800b786:	429d      	cmp	r5, r3
 800b788:	461a      	mov	r2, r3
 800b78a:	d32f      	bcc.n	800b7ec <quorem+0xf4>
 800b78c:	613c      	str	r4, [r7, #16]
 800b78e:	4638      	mov	r0, r7
 800b790:	f001 f9c2 	bl	800cb18 <__mcmp>
 800b794:	2800      	cmp	r0, #0
 800b796:	db25      	blt.n	800b7e4 <quorem+0xec>
 800b798:	4629      	mov	r1, r5
 800b79a:	2000      	movs	r0, #0
 800b79c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7a0:	f8d1 c000 	ldr.w	ip, [r1]
 800b7a4:	fa1f fe82 	uxth.w	lr, r2
 800b7a8:	fa1f f38c 	uxth.w	r3, ip
 800b7ac:	eba3 030e 	sub.w	r3, r3, lr
 800b7b0:	4403      	add	r3, r0
 800b7b2:	0c12      	lsrs	r2, r2, #16
 800b7b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7c2:	45c1      	cmp	r9, r8
 800b7c4:	f841 3b04 	str.w	r3, [r1], #4
 800b7c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7cc:	d2e6      	bcs.n	800b79c <quorem+0xa4>
 800b7ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7d6:	b922      	cbnz	r2, 800b7e2 <quorem+0xea>
 800b7d8:	3b04      	subs	r3, #4
 800b7da:	429d      	cmp	r5, r3
 800b7dc:	461a      	mov	r2, r3
 800b7de:	d30b      	bcc.n	800b7f8 <quorem+0x100>
 800b7e0:	613c      	str	r4, [r7, #16]
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	b003      	add	sp, #12
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	6812      	ldr	r2, [r2, #0]
 800b7ee:	3b04      	subs	r3, #4
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	d1cb      	bne.n	800b78c <quorem+0x94>
 800b7f4:	3c01      	subs	r4, #1
 800b7f6:	e7c6      	b.n	800b786 <quorem+0x8e>
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	3b04      	subs	r3, #4
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	d1ef      	bne.n	800b7e0 <quorem+0xe8>
 800b800:	3c01      	subs	r4, #1
 800b802:	e7ea      	b.n	800b7da <quorem+0xe2>
 800b804:	2000      	movs	r0, #0
 800b806:	e7ee      	b.n	800b7e6 <quorem+0xee>

0800b808 <_dtoa_r>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	69c7      	ldr	r7, [r0, #28]
 800b80e:	b099      	sub	sp, #100	@ 0x64
 800b810:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b814:	ec55 4b10 	vmov	r4, r5, d0
 800b818:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b81a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b81c:	4683      	mov	fp, r0
 800b81e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b820:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b822:	b97f      	cbnz	r7, 800b844 <_dtoa_r+0x3c>
 800b824:	2010      	movs	r0, #16
 800b826:	f000 fdfd 	bl	800c424 <malloc>
 800b82a:	4602      	mov	r2, r0
 800b82c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b830:	b920      	cbnz	r0, 800b83c <_dtoa_r+0x34>
 800b832:	4ba7      	ldr	r3, [pc, #668]	@ (800bad0 <_dtoa_r+0x2c8>)
 800b834:	21ef      	movs	r1, #239	@ 0xef
 800b836:	48a7      	ldr	r0, [pc, #668]	@ (800bad4 <_dtoa_r+0x2cc>)
 800b838:	f002 fc2a 	bl	800e090 <__assert_func>
 800b83c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b840:	6007      	str	r7, [r0, #0]
 800b842:	60c7      	str	r7, [r0, #12]
 800b844:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	b159      	cbz	r1, 800b864 <_dtoa_r+0x5c>
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	604a      	str	r2, [r1, #4]
 800b850:	2301      	movs	r3, #1
 800b852:	4093      	lsls	r3, r2
 800b854:	608b      	str	r3, [r1, #8]
 800b856:	4658      	mov	r0, fp
 800b858:	f000 feda 	bl	800c610 <_Bfree>
 800b85c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	1e2b      	subs	r3, r5, #0
 800b866:	bfb9      	ittee	lt
 800b868:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b86c:	9303      	strlt	r3, [sp, #12]
 800b86e:	2300      	movge	r3, #0
 800b870:	6033      	strge	r3, [r6, #0]
 800b872:	9f03      	ldr	r7, [sp, #12]
 800b874:	4b98      	ldr	r3, [pc, #608]	@ (800bad8 <_dtoa_r+0x2d0>)
 800b876:	bfbc      	itt	lt
 800b878:	2201      	movlt	r2, #1
 800b87a:	6032      	strlt	r2, [r6, #0]
 800b87c:	43bb      	bics	r3, r7
 800b87e:	d112      	bne.n	800b8a6 <_dtoa_r+0x9e>
 800b880:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b882:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b88c:	4323      	orrs	r3, r4
 800b88e:	f000 854d 	beq.w	800c32c <_dtoa_r+0xb24>
 800b892:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b894:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800baec <_dtoa_r+0x2e4>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 854f 	beq.w	800c33c <_dtoa_r+0xb34>
 800b89e:	f10a 0303 	add.w	r3, sl, #3
 800b8a2:	f000 bd49 	b.w	800c338 <_dtoa_r+0xb30>
 800b8a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	ec51 0b17 	vmov	r0, r1, d7
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8b6:	f7f5 f937 	bl	8000b28 <__aeabi_dcmpeq>
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	b158      	cbz	r0, 800b8d6 <_dtoa_r+0xce>
 800b8be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8c6:	b113      	cbz	r3, 800b8ce <_dtoa_r+0xc6>
 800b8c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8ca:	4b84      	ldr	r3, [pc, #528]	@ (800badc <_dtoa_r+0x2d4>)
 800b8cc:	6013      	str	r3, [r2, #0]
 800b8ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800baf0 <_dtoa_r+0x2e8>
 800b8d2:	f000 bd33 	b.w	800c33c <_dtoa_r+0xb34>
 800b8d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8da:	aa16      	add	r2, sp, #88	@ 0x58
 800b8dc:	a917      	add	r1, sp, #92	@ 0x5c
 800b8de:	4658      	mov	r0, fp
 800b8e0:	f001 fa3a 	bl	800cd58 <__d2b>
 800b8e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b8e8:	4681      	mov	r9, r0
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d077      	beq.n	800b9de <_dtoa_r+0x1d6>
 800b8ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b900:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b904:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b908:	4619      	mov	r1, r3
 800b90a:	2200      	movs	r2, #0
 800b90c:	4b74      	ldr	r3, [pc, #464]	@ (800bae0 <_dtoa_r+0x2d8>)
 800b90e:	f7f4 fceb 	bl	80002e8 <__aeabi_dsub>
 800b912:	a369      	add	r3, pc, #420	@ (adr r3, 800bab8 <_dtoa_r+0x2b0>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f7f4 fe9e 	bl	8000658 <__aeabi_dmul>
 800b91c:	a368      	add	r3, pc, #416	@ (adr r3, 800bac0 <_dtoa_r+0x2b8>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f7f4 fce3 	bl	80002ec <__adddf3>
 800b926:	4604      	mov	r4, r0
 800b928:	4630      	mov	r0, r6
 800b92a:	460d      	mov	r5, r1
 800b92c:	f7f4 fe2a 	bl	8000584 <__aeabi_i2d>
 800b930:	a365      	add	r3, pc, #404	@ (adr r3, 800bac8 <_dtoa_r+0x2c0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fe8f 	bl	8000658 <__aeabi_dmul>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	4620      	mov	r0, r4
 800b940:	4629      	mov	r1, r5
 800b942:	f7f4 fcd3 	bl	80002ec <__adddf3>
 800b946:	4604      	mov	r4, r0
 800b948:	460d      	mov	r5, r1
 800b94a:	f7f5 f935 	bl	8000bb8 <__aeabi_d2iz>
 800b94e:	2200      	movs	r2, #0
 800b950:	4607      	mov	r7, r0
 800b952:	2300      	movs	r3, #0
 800b954:	4620      	mov	r0, r4
 800b956:	4629      	mov	r1, r5
 800b958:	f7f5 f8f0 	bl	8000b3c <__aeabi_dcmplt>
 800b95c:	b140      	cbz	r0, 800b970 <_dtoa_r+0x168>
 800b95e:	4638      	mov	r0, r7
 800b960:	f7f4 fe10 	bl	8000584 <__aeabi_i2d>
 800b964:	4622      	mov	r2, r4
 800b966:	462b      	mov	r3, r5
 800b968:	f7f5 f8de 	bl	8000b28 <__aeabi_dcmpeq>
 800b96c:	b900      	cbnz	r0, 800b970 <_dtoa_r+0x168>
 800b96e:	3f01      	subs	r7, #1
 800b970:	2f16      	cmp	r7, #22
 800b972:	d851      	bhi.n	800ba18 <_dtoa_r+0x210>
 800b974:	4b5b      	ldr	r3, [pc, #364]	@ (800bae4 <_dtoa_r+0x2dc>)
 800b976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b982:	f7f5 f8db 	bl	8000b3c <__aeabi_dcmplt>
 800b986:	2800      	cmp	r0, #0
 800b988:	d048      	beq.n	800ba1c <_dtoa_r+0x214>
 800b98a:	3f01      	subs	r7, #1
 800b98c:	2300      	movs	r3, #0
 800b98e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b990:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b992:	1b9b      	subs	r3, r3, r6
 800b994:	1e5a      	subs	r2, r3, #1
 800b996:	bf44      	itt	mi
 800b998:	f1c3 0801 	rsbmi	r8, r3, #1
 800b99c:	2300      	movmi	r3, #0
 800b99e:	9208      	str	r2, [sp, #32]
 800b9a0:	bf54      	ite	pl
 800b9a2:	f04f 0800 	movpl.w	r8, #0
 800b9a6:	9308      	strmi	r3, [sp, #32]
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	db39      	blt.n	800ba20 <_dtoa_r+0x218>
 800b9ac:	9b08      	ldr	r3, [sp, #32]
 800b9ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9b0:	443b      	add	r3, r7
 800b9b2:	9308      	str	r3, [sp, #32]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ba:	2b09      	cmp	r3, #9
 800b9bc:	d864      	bhi.n	800ba88 <_dtoa_r+0x280>
 800b9be:	2b05      	cmp	r3, #5
 800b9c0:	bfc4      	itt	gt
 800b9c2:	3b04      	subgt	r3, #4
 800b9c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c8:	f1a3 0302 	sub.w	r3, r3, #2
 800b9cc:	bfcc      	ite	gt
 800b9ce:	2400      	movgt	r4, #0
 800b9d0:	2401      	movle	r4, #1
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d863      	bhi.n	800ba9e <_dtoa_r+0x296>
 800b9d6:	e8df f003 	tbb	[pc, r3]
 800b9da:	372a      	.short	0x372a
 800b9dc:	5535      	.short	0x5535
 800b9de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b9e2:	441e      	add	r6, r3
 800b9e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b9e8:	2b20      	cmp	r3, #32
 800b9ea:	bfc1      	itttt	gt
 800b9ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b9f0:	409f      	lslgt	r7, r3
 800b9f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b9f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b9fa:	bfd6      	itet	le
 800b9fc:	f1c3 0320 	rsble	r3, r3, #32
 800ba00:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba04:	fa04 f003 	lslle.w	r0, r4, r3
 800ba08:	f7f4 fdac 	bl	8000564 <__aeabi_ui2d>
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba12:	3e01      	subs	r6, #1
 800ba14:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba16:	e777      	b.n	800b908 <_dtoa_r+0x100>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e7b8      	b.n	800b98e <_dtoa_r+0x186>
 800ba1c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba1e:	e7b7      	b.n	800b990 <_dtoa_r+0x188>
 800ba20:	427b      	negs	r3, r7
 800ba22:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba24:	2300      	movs	r3, #0
 800ba26:	eba8 0807 	sub.w	r8, r8, r7
 800ba2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba2c:	e7c4      	b.n	800b9b8 <_dtoa_r+0x1b0>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	dc35      	bgt.n	800baa4 <_dtoa_r+0x29c>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	9307      	str	r3, [sp, #28]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba42:	e00b      	b.n	800ba5c <_dtoa_r+0x254>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e7f3      	b.n	800ba30 <_dtoa_r+0x228>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba4e:	18fb      	adds	r3, r7, r3
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	3301      	adds	r3, #1
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	9307      	str	r3, [sp, #28]
 800ba58:	bfb8      	it	lt
 800ba5a:	2301      	movlt	r3, #1
 800ba5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba60:	2100      	movs	r1, #0
 800ba62:	2204      	movs	r2, #4
 800ba64:	f102 0514 	add.w	r5, r2, #20
 800ba68:	429d      	cmp	r5, r3
 800ba6a:	d91f      	bls.n	800baac <_dtoa_r+0x2a4>
 800ba6c:	6041      	str	r1, [r0, #4]
 800ba6e:	4658      	mov	r0, fp
 800ba70:	f000 fd8e 	bl	800c590 <_Balloc>
 800ba74:	4682      	mov	sl, r0
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d13c      	bne.n	800baf4 <_dtoa_r+0x2ec>
 800ba7a:	4b1b      	ldr	r3, [pc, #108]	@ (800bae8 <_dtoa_r+0x2e0>)
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba82:	e6d8      	b.n	800b836 <_dtoa_r+0x2e>
 800ba84:	2301      	movs	r3, #1
 800ba86:	e7e0      	b.n	800ba4a <_dtoa_r+0x242>
 800ba88:	2401      	movs	r4, #1
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba90:	f04f 33ff 	mov.w	r3, #4294967295
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	9307      	str	r3, [sp, #28]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	2312      	movs	r3, #18
 800ba9c:	e7d0      	b.n	800ba40 <_dtoa_r+0x238>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baa2:	e7f5      	b.n	800ba90 <_dtoa_r+0x288>
 800baa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	9307      	str	r3, [sp, #28]
 800baaa:	e7d7      	b.n	800ba5c <_dtoa_r+0x254>
 800baac:	3101      	adds	r1, #1
 800baae:	0052      	lsls	r2, r2, #1
 800bab0:	e7d8      	b.n	800ba64 <_dtoa_r+0x25c>
 800bab2:	bf00      	nop
 800bab4:	f3af 8000 	nop.w
 800bab8:	636f4361 	.word	0x636f4361
 800babc:	3fd287a7 	.word	0x3fd287a7
 800bac0:	8b60c8b3 	.word	0x8b60c8b3
 800bac4:	3fc68a28 	.word	0x3fc68a28
 800bac8:	509f79fb 	.word	0x509f79fb
 800bacc:	3fd34413 	.word	0x3fd34413
 800bad0:	0800f082 	.word	0x0800f082
 800bad4:	0800f099 	.word	0x0800f099
 800bad8:	7ff00000 	.word	0x7ff00000
 800badc:	0800f04d 	.word	0x0800f04d
 800bae0:	3ff80000 	.word	0x3ff80000
 800bae4:	0800f190 	.word	0x0800f190
 800bae8:	0800f0f1 	.word	0x0800f0f1
 800baec:	0800f07e 	.word	0x0800f07e
 800baf0:	0800f04c 	.word	0x0800f04c
 800baf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800baf8:	6018      	str	r0, [r3, #0]
 800bafa:	9b07      	ldr	r3, [sp, #28]
 800bafc:	2b0e      	cmp	r3, #14
 800bafe:	f200 80a4 	bhi.w	800bc4a <_dtoa_r+0x442>
 800bb02:	2c00      	cmp	r4, #0
 800bb04:	f000 80a1 	beq.w	800bc4a <_dtoa_r+0x442>
 800bb08:	2f00      	cmp	r7, #0
 800bb0a:	dd33      	ble.n	800bb74 <_dtoa_r+0x36c>
 800bb0c:	4bad      	ldr	r3, [pc, #692]	@ (800bdc4 <_dtoa_r+0x5bc>)
 800bb0e:	f007 020f 	and.w	r2, r7, #15
 800bb12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb16:	ed93 7b00 	vldr	d7, [r3]
 800bb1a:	05f8      	lsls	r0, r7, #23
 800bb1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb24:	d516      	bpl.n	800bb54 <_dtoa_r+0x34c>
 800bb26:	4ba8      	ldr	r3, [pc, #672]	@ (800bdc8 <_dtoa_r+0x5c0>)
 800bb28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb30:	f7f4 febc 	bl	80008ac <__aeabi_ddiv>
 800bb34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb38:	f004 040f 	and.w	r4, r4, #15
 800bb3c:	2603      	movs	r6, #3
 800bb3e:	4da2      	ldr	r5, [pc, #648]	@ (800bdc8 <_dtoa_r+0x5c0>)
 800bb40:	b954      	cbnz	r4, 800bb58 <_dtoa_r+0x350>
 800bb42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb4a:	f7f4 feaf 	bl	80008ac <__aeabi_ddiv>
 800bb4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb52:	e028      	b.n	800bba6 <_dtoa_r+0x39e>
 800bb54:	2602      	movs	r6, #2
 800bb56:	e7f2      	b.n	800bb3e <_dtoa_r+0x336>
 800bb58:	07e1      	lsls	r1, r4, #31
 800bb5a:	d508      	bpl.n	800bb6e <_dtoa_r+0x366>
 800bb5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb64:	f7f4 fd78 	bl	8000658 <__aeabi_dmul>
 800bb68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb6c:	3601      	adds	r6, #1
 800bb6e:	1064      	asrs	r4, r4, #1
 800bb70:	3508      	adds	r5, #8
 800bb72:	e7e5      	b.n	800bb40 <_dtoa_r+0x338>
 800bb74:	f000 80d2 	beq.w	800bd1c <_dtoa_r+0x514>
 800bb78:	427c      	negs	r4, r7
 800bb7a:	4b92      	ldr	r3, [pc, #584]	@ (800bdc4 <_dtoa_r+0x5bc>)
 800bb7c:	4d92      	ldr	r5, [pc, #584]	@ (800bdc8 <_dtoa_r+0x5c0>)
 800bb7e:	f004 020f 	and.w	r2, r4, #15
 800bb82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb8e:	f7f4 fd63 	bl	8000658 <__aeabi_dmul>
 800bb92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb96:	1124      	asrs	r4, r4, #4
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2602      	movs	r6, #2
 800bb9c:	2c00      	cmp	r4, #0
 800bb9e:	f040 80b2 	bne.w	800bd06 <_dtoa_r+0x4fe>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1d3      	bne.n	800bb4e <_dtoa_r+0x346>
 800bba6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bba8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 80b7 	beq.w	800bd20 <_dtoa_r+0x518>
 800bbb2:	4b86      	ldr	r3, [pc, #536]	@ (800bdcc <_dtoa_r+0x5c4>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 ffbf 	bl	8000b3c <__aeabi_dcmplt>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f000 80ae 	beq.w	800bd20 <_dtoa_r+0x518>
 800bbc4:	9b07      	ldr	r3, [sp, #28]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 80aa 	beq.w	800bd20 <_dtoa_r+0x518>
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	dd37      	ble.n	800bc42 <_dtoa_r+0x43a>
 800bbd2:	1e7b      	subs	r3, r7, #1
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4b7d      	ldr	r3, [pc, #500]	@ (800bdd0 <_dtoa_r+0x5c8>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	4629      	mov	r1, r5
 800bbde:	f7f4 fd3b 	bl	8000658 <__aeabi_dmul>
 800bbe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbe6:	9c00      	ldr	r4, [sp, #0]
 800bbe8:	3601      	adds	r6, #1
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7f4 fcca 	bl	8000584 <__aeabi_i2d>
 800bbf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbf4:	f7f4 fd30 	bl	8000658 <__aeabi_dmul>
 800bbf8:	4b76      	ldr	r3, [pc, #472]	@ (800bdd4 <_dtoa_r+0x5cc>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f7f4 fb76 	bl	80002ec <__adddf3>
 800bc00:	4605      	mov	r5, r0
 800bc02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc06:	2c00      	cmp	r4, #0
 800bc08:	f040 808d 	bne.w	800bd26 <_dtoa_r+0x51e>
 800bc0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc10:	4b71      	ldr	r3, [pc, #452]	@ (800bdd8 <_dtoa_r+0x5d0>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	f7f4 fb68 	bl	80002e8 <__aeabi_dsub>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc20:	462a      	mov	r2, r5
 800bc22:	4633      	mov	r3, r6
 800bc24:	f7f4 ffa8 	bl	8000b78 <__aeabi_dcmpgt>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f040 828b 	bne.w	800c144 <_dtoa_r+0x93c>
 800bc2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc32:	462a      	mov	r2, r5
 800bc34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc38:	f7f4 ff80 	bl	8000b3c <__aeabi_dcmplt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	f040 8128 	bne.w	800be92 <_dtoa_r+0x68a>
 800bc42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f2c0 815a 	blt.w	800bf06 <_dtoa_r+0x6fe>
 800bc52:	2f0e      	cmp	r7, #14
 800bc54:	f300 8157 	bgt.w	800bf06 <_dtoa_r+0x6fe>
 800bc58:	4b5a      	ldr	r3, [pc, #360]	@ (800bdc4 <_dtoa_r+0x5bc>)
 800bc5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc5e:	ed93 7b00 	vldr	d7, [r3]
 800bc62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	ed8d 7b00 	vstr	d7, [sp]
 800bc6a:	da03      	bge.n	800bc74 <_dtoa_r+0x46c>
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f340 8101 	ble.w	800be76 <_dtoa_r+0x66e>
 800bc74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc78:	4656      	mov	r6, sl
 800bc7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f4 fe13 	bl	80008ac <__aeabi_ddiv>
 800bc86:	f7f4 ff97 	bl	8000bb8 <__aeabi_d2iz>
 800bc8a:	4680      	mov	r8, r0
 800bc8c:	f7f4 fc7a 	bl	8000584 <__aeabi_i2d>
 800bc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc94:	f7f4 fce0 	bl	8000658 <__aeabi_dmul>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bca4:	f7f4 fb20 	bl	80002e8 <__aeabi_dsub>
 800bca8:	f806 4b01 	strb.w	r4, [r6], #1
 800bcac:	9d07      	ldr	r5, [sp, #28]
 800bcae:	eba6 040a 	sub.w	r4, r6, sl
 800bcb2:	42a5      	cmp	r5, r4
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	f040 8117 	bne.w	800beea <_dtoa_r+0x6e2>
 800bcbc:	f7f4 fb16 	bl	80002ec <__adddf3>
 800bcc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	f7f4 ff56 	bl	8000b78 <__aeabi_dcmpgt>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	f040 80f9 	bne.w	800bec4 <_dtoa_r+0x6bc>
 800bcd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7f4 ff25 	bl	8000b28 <__aeabi_dcmpeq>
 800bcde:	b118      	cbz	r0, 800bce8 <_dtoa_r+0x4e0>
 800bce0:	f018 0f01 	tst.w	r8, #1
 800bce4:	f040 80ee 	bne.w	800bec4 <_dtoa_r+0x6bc>
 800bce8:	4649      	mov	r1, r9
 800bcea:	4658      	mov	r0, fp
 800bcec:	f000 fc90 	bl	800c610 <_Bfree>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	7033      	strb	r3, [r6, #0]
 800bcf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcf6:	3701      	adds	r7, #1
 800bcf8:	601f      	str	r7, [r3, #0]
 800bcfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 831d 	beq.w	800c33c <_dtoa_r+0xb34>
 800bd02:	601e      	str	r6, [r3, #0]
 800bd04:	e31a      	b.n	800c33c <_dtoa_r+0xb34>
 800bd06:	07e2      	lsls	r2, r4, #31
 800bd08:	d505      	bpl.n	800bd16 <_dtoa_r+0x50e>
 800bd0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd0e:	f7f4 fca3 	bl	8000658 <__aeabi_dmul>
 800bd12:	3601      	adds	r6, #1
 800bd14:	2301      	movs	r3, #1
 800bd16:	1064      	asrs	r4, r4, #1
 800bd18:	3508      	adds	r5, #8
 800bd1a:	e73f      	b.n	800bb9c <_dtoa_r+0x394>
 800bd1c:	2602      	movs	r6, #2
 800bd1e:	e742      	b.n	800bba6 <_dtoa_r+0x39e>
 800bd20:	9c07      	ldr	r4, [sp, #28]
 800bd22:	9704      	str	r7, [sp, #16]
 800bd24:	e761      	b.n	800bbea <_dtoa_r+0x3e2>
 800bd26:	4b27      	ldr	r3, [pc, #156]	@ (800bdc4 <_dtoa_r+0x5bc>)
 800bd28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd32:	4454      	add	r4, sl
 800bd34:	2900      	cmp	r1, #0
 800bd36:	d053      	beq.n	800bde0 <_dtoa_r+0x5d8>
 800bd38:	4928      	ldr	r1, [pc, #160]	@ (800bddc <_dtoa_r+0x5d4>)
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	f7f4 fdb6 	bl	80008ac <__aeabi_ddiv>
 800bd40:	4633      	mov	r3, r6
 800bd42:	462a      	mov	r2, r5
 800bd44:	f7f4 fad0 	bl	80002e8 <__aeabi_dsub>
 800bd48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd4c:	4656      	mov	r6, sl
 800bd4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd52:	f7f4 ff31 	bl	8000bb8 <__aeabi_d2iz>
 800bd56:	4605      	mov	r5, r0
 800bd58:	f7f4 fc14 	bl	8000584 <__aeabi_i2d>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd64:	f7f4 fac0 	bl	80002e8 <__aeabi_dsub>
 800bd68:	3530      	adds	r5, #48	@ 0x30
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd72:	f806 5b01 	strb.w	r5, [r6], #1
 800bd76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd7a:	f7f4 fedf 	bl	8000b3c <__aeabi_dcmplt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d171      	bne.n	800be66 <_dtoa_r+0x65e>
 800bd82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd86:	4911      	ldr	r1, [pc, #68]	@ (800bdcc <_dtoa_r+0x5c4>)
 800bd88:	2000      	movs	r0, #0
 800bd8a:	f7f4 faad 	bl	80002e8 <__aeabi_dsub>
 800bd8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd92:	f7f4 fed3 	bl	8000b3c <__aeabi_dcmplt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	f040 8095 	bne.w	800bec6 <_dtoa_r+0x6be>
 800bd9c:	42a6      	cmp	r6, r4
 800bd9e:	f43f af50 	beq.w	800bc42 <_dtoa_r+0x43a>
 800bda2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bda6:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd0 <_dtoa_r+0x5c8>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f7f4 fc55 	bl	8000658 <__aeabi_dmul>
 800bdae:	4b08      	ldr	r3, [pc, #32]	@ (800bdd0 <_dtoa_r+0x5c8>)
 800bdb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdba:	f7f4 fc4d 	bl	8000658 <__aeabi_dmul>
 800bdbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdc2:	e7c4      	b.n	800bd4e <_dtoa_r+0x546>
 800bdc4:	0800f190 	.word	0x0800f190
 800bdc8:	0800f168 	.word	0x0800f168
 800bdcc:	3ff00000 	.word	0x3ff00000
 800bdd0:	40240000 	.word	0x40240000
 800bdd4:	401c0000 	.word	0x401c0000
 800bdd8:	40140000 	.word	0x40140000
 800bddc:	3fe00000 	.word	0x3fe00000
 800bde0:	4631      	mov	r1, r6
 800bde2:	4628      	mov	r0, r5
 800bde4:	f7f4 fc38 	bl	8000658 <__aeabi_dmul>
 800bde8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdec:	9415      	str	r4, [sp, #84]	@ 0x54
 800bdee:	4656      	mov	r6, sl
 800bdf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdf4:	f7f4 fee0 	bl	8000bb8 <__aeabi_d2iz>
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	f7f4 fbc3 	bl	8000584 <__aeabi_i2d>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be06:	f7f4 fa6f 	bl	80002e8 <__aeabi_dsub>
 800be0a:	3530      	adds	r5, #48	@ 0x30
 800be0c:	f806 5b01 	strb.w	r5, [r6], #1
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	42a6      	cmp	r6, r4
 800be16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be1a:	f04f 0200 	mov.w	r2, #0
 800be1e:	d124      	bne.n	800be6a <_dtoa_r+0x662>
 800be20:	4bac      	ldr	r3, [pc, #688]	@ (800c0d4 <_dtoa_r+0x8cc>)
 800be22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be26:	f7f4 fa61 	bl	80002ec <__adddf3>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be32:	f7f4 fea1 	bl	8000b78 <__aeabi_dcmpgt>
 800be36:	2800      	cmp	r0, #0
 800be38:	d145      	bne.n	800bec6 <_dtoa_r+0x6be>
 800be3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be3e:	49a5      	ldr	r1, [pc, #660]	@ (800c0d4 <_dtoa_r+0x8cc>)
 800be40:	2000      	movs	r0, #0
 800be42:	f7f4 fa51 	bl	80002e8 <__aeabi_dsub>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4e:	f7f4 fe75 	bl	8000b3c <__aeabi_dcmplt>
 800be52:	2800      	cmp	r0, #0
 800be54:	f43f aef5 	beq.w	800bc42 <_dtoa_r+0x43a>
 800be58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be5a:	1e73      	subs	r3, r6, #1
 800be5c:	9315      	str	r3, [sp, #84]	@ 0x54
 800be5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be62:	2b30      	cmp	r3, #48	@ 0x30
 800be64:	d0f8      	beq.n	800be58 <_dtoa_r+0x650>
 800be66:	9f04      	ldr	r7, [sp, #16]
 800be68:	e73e      	b.n	800bce8 <_dtoa_r+0x4e0>
 800be6a:	4b9b      	ldr	r3, [pc, #620]	@ (800c0d8 <_dtoa_r+0x8d0>)
 800be6c:	f7f4 fbf4 	bl	8000658 <__aeabi_dmul>
 800be70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be74:	e7bc      	b.n	800bdf0 <_dtoa_r+0x5e8>
 800be76:	d10c      	bne.n	800be92 <_dtoa_r+0x68a>
 800be78:	4b98      	ldr	r3, [pc, #608]	@ (800c0dc <_dtoa_r+0x8d4>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be80:	f7f4 fbea 	bl	8000658 <__aeabi_dmul>
 800be84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be88:	f7f4 fe6c 	bl	8000b64 <__aeabi_dcmpge>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	f000 8157 	beq.w	800c140 <_dtoa_r+0x938>
 800be92:	2400      	movs	r4, #0
 800be94:	4625      	mov	r5, r4
 800be96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be98:	43db      	mvns	r3, r3
 800be9a:	9304      	str	r3, [sp, #16]
 800be9c:	4656      	mov	r6, sl
 800be9e:	2700      	movs	r7, #0
 800bea0:	4621      	mov	r1, r4
 800bea2:	4658      	mov	r0, fp
 800bea4:	f000 fbb4 	bl	800c610 <_Bfree>
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	d0dc      	beq.n	800be66 <_dtoa_r+0x65e>
 800beac:	b12f      	cbz	r7, 800beba <_dtoa_r+0x6b2>
 800beae:	42af      	cmp	r7, r5
 800beb0:	d003      	beq.n	800beba <_dtoa_r+0x6b2>
 800beb2:	4639      	mov	r1, r7
 800beb4:	4658      	mov	r0, fp
 800beb6:	f000 fbab 	bl	800c610 <_Bfree>
 800beba:	4629      	mov	r1, r5
 800bebc:	4658      	mov	r0, fp
 800bebe:	f000 fba7 	bl	800c610 <_Bfree>
 800bec2:	e7d0      	b.n	800be66 <_dtoa_r+0x65e>
 800bec4:	9704      	str	r7, [sp, #16]
 800bec6:	4633      	mov	r3, r6
 800bec8:	461e      	mov	r6, r3
 800beca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bece:	2a39      	cmp	r2, #57	@ 0x39
 800bed0:	d107      	bne.n	800bee2 <_dtoa_r+0x6da>
 800bed2:	459a      	cmp	sl, r3
 800bed4:	d1f8      	bne.n	800bec8 <_dtoa_r+0x6c0>
 800bed6:	9a04      	ldr	r2, [sp, #16]
 800bed8:	3201      	adds	r2, #1
 800beda:	9204      	str	r2, [sp, #16]
 800bedc:	2230      	movs	r2, #48	@ 0x30
 800bede:	f88a 2000 	strb.w	r2, [sl]
 800bee2:	781a      	ldrb	r2, [r3, #0]
 800bee4:	3201      	adds	r2, #1
 800bee6:	701a      	strb	r2, [r3, #0]
 800bee8:	e7bd      	b.n	800be66 <_dtoa_r+0x65e>
 800beea:	4b7b      	ldr	r3, [pc, #492]	@ (800c0d8 <_dtoa_r+0x8d0>)
 800beec:	2200      	movs	r2, #0
 800beee:	f7f4 fbb3 	bl	8000658 <__aeabi_dmul>
 800bef2:	2200      	movs	r2, #0
 800bef4:	2300      	movs	r3, #0
 800bef6:	4604      	mov	r4, r0
 800bef8:	460d      	mov	r5, r1
 800befa:	f7f4 fe15 	bl	8000b28 <__aeabi_dcmpeq>
 800befe:	2800      	cmp	r0, #0
 800bf00:	f43f aebb 	beq.w	800bc7a <_dtoa_r+0x472>
 800bf04:	e6f0      	b.n	800bce8 <_dtoa_r+0x4e0>
 800bf06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf08:	2a00      	cmp	r2, #0
 800bf0a:	f000 80db 	beq.w	800c0c4 <_dtoa_r+0x8bc>
 800bf0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf10:	2a01      	cmp	r2, #1
 800bf12:	f300 80bf 	bgt.w	800c094 <_dtoa_r+0x88c>
 800bf16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	f000 80b7 	beq.w	800c08c <_dtoa_r+0x884>
 800bf1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf24:	4646      	mov	r6, r8
 800bf26:	9a08      	ldr	r2, [sp, #32]
 800bf28:	2101      	movs	r1, #1
 800bf2a:	441a      	add	r2, r3
 800bf2c:	4658      	mov	r0, fp
 800bf2e:	4498      	add	r8, r3
 800bf30:	9208      	str	r2, [sp, #32]
 800bf32:	f000 fc6b 	bl	800c80c <__i2b>
 800bf36:	4605      	mov	r5, r0
 800bf38:	b15e      	cbz	r6, 800bf52 <_dtoa_r+0x74a>
 800bf3a:	9b08      	ldr	r3, [sp, #32]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd08      	ble.n	800bf52 <_dtoa_r+0x74a>
 800bf40:	42b3      	cmp	r3, r6
 800bf42:	9a08      	ldr	r2, [sp, #32]
 800bf44:	bfa8      	it	ge
 800bf46:	4633      	movge	r3, r6
 800bf48:	eba8 0803 	sub.w	r8, r8, r3
 800bf4c:	1af6      	subs	r6, r6, r3
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	9308      	str	r3, [sp, #32]
 800bf52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf54:	b1f3      	cbz	r3, 800bf94 <_dtoa_r+0x78c>
 800bf56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 80b7 	beq.w	800c0cc <_dtoa_r+0x8c4>
 800bf5e:	b18c      	cbz	r4, 800bf84 <_dtoa_r+0x77c>
 800bf60:	4629      	mov	r1, r5
 800bf62:	4622      	mov	r2, r4
 800bf64:	4658      	mov	r0, fp
 800bf66:	f000 fd11 	bl	800c98c <__pow5mult>
 800bf6a:	464a      	mov	r2, r9
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	4605      	mov	r5, r0
 800bf70:	4658      	mov	r0, fp
 800bf72:	f000 fc61 	bl	800c838 <__multiply>
 800bf76:	4649      	mov	r1, r9
 800bf78:	9004      	str	r0, [sp, #16]
 800bf7a:	4658      	mov	r0, fp
 800bf7c:	f000 fb48 	bl	800c610 <_Bfree>
 800bf80:	9b04      	ldr	r3, [sp, #16]
 800bf82:	4699      	mov	r9, r3
 800bf84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf86:	1b1a      	subs	r2, r3, r4
 800bf88:	d004      	beq.n	800bf94 <_dtoa_r+0x78c>
 800bf8a:	4649      	mov	r1, r9
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	f000 fcfd 	bl	800c98c <__pow5mult>
 800bf92:	4681      	mov	r9, r0
 800bf94:	2101      	movs	r1, #1
 800bf96:	4658      	mov	r0, fp
 800bf98:	f000 fc38 	bl	800c80c <__i2b>
 800bf9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 81cf 	beq.w	800c344 <_dtoa_r+0xb3c>
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	4601      	mov	r1, r0
 800bfaa:	4658      	mov	r0, fp
 800bfac:	f000 fcee 	bl	800c98c <__pow5mult>
 800bfb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	f300 8095 	bgt.w	800c0e4 <_dtoa_r+0x8dc>
 800bfba:	9b02      	ldr	r3, [sp, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 8087 	bne.w	800c0d0 <_dtoa_r+0x8c8>
 800bfc2:	9b03      	ldr	r3, [sp, #12]
 800bfc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 8089 	bne.w	800c0e0 <_dtoa_r+0x8d8>
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfd4:	0d1b      	lsrs	r3, r3, #20
 800bfd6:	051b      	lsls	r3, r3, #20
 800bfd8:	b12b      	cbz	r3, 800bfe6 <_dtoa_r+0x7de>
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	9308      	str	r3, [sp, #32]
 800bfe0:	f108 0801 	add.w	r8, r8, #1
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 81b0 	beq.w	800c350 <_dtoa_r+0xb48>
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bff6:	6918      	ldr	r0, [r3, #16]
 800bff8:	f000 fbbc 	bl	800c774 <__hi0bits>
 800bffc:	f1c0 0020 	rsb	r0, r0, #32
 800c000:	9b08      	ldr	r3, [sp, #32]
 800c002:	4418      	add	r0, r3
 800c004:	f010 001f 	ands.w	r0, r0, #31
 800c008:	d077      	beq.n	800c0fa <_dtoa_r+0x8f2>
 800c00a:	f1c0 0320 	rsb	r3, r0, #32
 800c00e:	2b04      	cmp	r3, #4
 800c010:	dd6b      	ble.n	800c0ea <_dtoa_r+0x8e2>
 800c012:	9b08      	ldr	r3, [sp, #32]
 800c014:	f1c0 001c 	rsb	r0, r0, #28
 800c018:	4403      	add	r3, r0
 800c01a:	4480      	add	r8, r0
 800c01c:	4406      	add	r6, r0
 800c01e:	9308      	str	r3, [sp, #32]
 800c020:	f1b8 0f00 	cmp.w	r8, #0
 800c024:	dd05      	ble.n	800c032 <_dtoa_r+0x82a>
 800c026:	4649      	mov	r1, r9
 800c028:	4642      	mov	r2, r8
 800c02a:	4658      	mov	r0, fp
 800c02c:	f000 fd08 	bl	800ca40 <__lshift>
 800c030:	4681      	mov	r9, r0
 800c032:	9b08      	ldr	r3, [sp, #32]
 800c034:	2b00      	cmp	r3, #0
 800c036:	dd05      	ble.n	800c044 <_dtoa_r+0x83c>
 800c038:	4621      	mov	r1, r4
 800c03a:	461a      	mov	r2, r3
 800c03c:	4658      	mov	r0, fp
 800c03e:	f000 fcff 	bl	800ca40 <__lshift>
 800c042:	4604      	mov	r4, r0
 800c044:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c046:	2b00      	cmp	r3, #0
 800c048:	d059      	beq.n	800c0fe <_dtoa_r+0x8f6>
 800c04a:	4621      	mov	r1, r4
 800c04c:	4648      	mov	r0, r9
 800c04e:	f000 fd63 	bl	800cb18 <__mcmp>
 800c052:	2800      	cmp	r0, #0
 800c054:	da53      	bge.n	800c0fe <_dtoa_r+0x8f6>
 800c056:	1e7b      	subs	r3, r7, #1
 800c058:	9304      	str	r3, [sp, #16]
 800c05a:	4649      	mov	r1, r9
 800c05c:	2300      	movs	r3, #0
 800c05e:	220a      	movs	r2, #10
 800c060:	4658      	mov	r0, fp
 800c062:	f000 faf7 	bl	800c654 <__multadd>
 800c066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c068:	4681      	mov	r9, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 8172 	beq.w	800c354 <_dtoa_r+0xb4c>
 800c070:	2300      	movs	r3, #0
 800c072:	4629      	mov	r1, r5
 800c074:	220a      	movs	r2, #10
 800c076:	4658      	mov	r0, fp
 800c078:	f000 faec 	bl	800c654 <__multadd>
 800c07c:	9b00      	ldr	r3, [sp, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	4605      	mov	r5, r0
 800c082:	dc67      	bgt.n	800c154 <_dtoa_r+0x94c>
 800c084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c086:	2b02      	cmp	r3, #2
 800c088:	dc41      	bgt.n	800c10e <_dtoa_r+0x906>
 800c08a:	e063      	b.n	800c154 <_dtoa_r+0x94c>
 800c08c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c08e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c092:	e746      	b.n	800bf22 <_dtoa_r+0x71a>
 800c094:	9b07      	ldr	r3, [sp, #28]
 800c096:	1e5c      	subs	r4, r3, #1
 800c098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c09a:	42a3      	cmp	r3, r4
 800c09c:	bfbf      	itttt	lt
 800c09e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0a4:	1ae3      	sublt	r3, r4, r3
 800c0a6:	bfb4      	ite	lt
 800c0a8:	18d2      	addlt	r2, r2, r3
 800c0aa:	1b1c      	subge	r4, r3, r4
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	bfbc      	itt	lt
 800c0b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0b2:	2400      	movlt	r4, #0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	bfb5      	itete	lt
 800c0b8:	eba8 0603 	sublt.w	r6, r8, r3
 800c0bc:	9b07      	ldrge	r3, [sp, #28]
 800c0be:	2300      	movlt	r3, #0
 800c0c0:	4646      	movge	r6, r8
 800c0c2:	e730      	b.n	800bf26 <_dtoa_r+0x71e>
 800c0c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0c8:	4646      	mov	r6, r8
 800c0ca:	e735      	b.n	800bf38 <_dtoa_r+0x730>
 800c0cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0ce:	e75c      	b.n	800bf8a <_dtoa_r+0x782>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e788      	b.n	800bfe6 <_dtoa_r+0x7de>
 800c0d4:	3fe00000 	.word	0x3fe00000
 800c0d8:	40240000 	.word	0x40240000
 800c0dc:	40140000 	.word	0x40140000
 800c0e0:	9b02      	ldr	r3, [sp, #8]
 800c0e2:	e780      	b.n	800bfe6 <_dtoa_r+0x7de>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0e8:	e782      	b.n	800bff0 <_dtoa_r+0x7e8>
 800c0ea:	d099      	beq.n	800c020 <_dtoa_r+0x818>
 800c0ec:	9a08      	ldr	r2, [sp, #32]
 800c0ee:	331c      	adds	r3, #28
 800c0f0:	441a      	add	r2, r3
 800c0f2:	4498      	add	r8, r3
 800c0f4:	441e      	add	r6, r3
 800c0f6:	9208      	str	r2, [sp, #32]
 800c0f8:	e792      	b.n	800c020 <_dtoa_r+0x818>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	e7f6      	b.n	800c0ec <_dtoa_r+0x8e4>
 800c0fe:	9b07      	ldr	r3, [sp, #28]
 800c100:	9704      	str	r7, [sp, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dc20      	bgt.n	800c148 <_dtoa_r+0x940>
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	dd1e      	ble.n	800c14c <_dtoa_r+0x944>
 800c10e:	9b00      	ldr	r3, [sp, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	f47f aec0 	bne.w	800be96 <_dtoa_r+0x68e>
 800c116:	4621      	mov	r1, r4
 800c118:	2205      	movs	r2, #5
 800c11a:	4658      	mov	r0, fp
 800c11c:	f000 fa9a 	bl	800c654 <__multadd>
 800c120:	4601      	mov	r1, r0
 800c122:	4604      	mov	r4, r0
 800c124:	4648      	mov	r0, r9
 800c126:	f000 fcf7 	bl	800cb18 <__mcmp>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	f77f aeb3 	ble.w	800be96 <_dtoa_r+0x68e>
 800c130:	4656      	mov	r6, sl
 800c132:	2331      	movs	r3, #49	@ 0x31
 800c134:	f806 3b01 	strb.w	r3, [r6], #1
 800c138:	9b04      	ldr	r3, [sp, #16]
 800c13a:	3301      	adds	r3, #1
 800c13c:	9304      	str	r3, [sp, #16]
 800c13e:	e6ae      	b.n	800be9e <_dtoa_r+0x696>
 800c140:	9c07      	ldr	r4, [sp, #28]
 800c142:	9704      	str	r7, [sp, #16]
 800c144:	4625      	mov	r5, r4
 800c146:	e7f3      	b.n	800c130 <_dtoa_r+0x928>
 800c148:	9b07      	ldr	r3, [sp, #28]
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 8104 	beq.w	800c35c <_dtoa_r+0xb54>
 800c154:	2e00      	cmp	r6, #0
 800c156:	dd05      	ble.n	800c164 <_dtoa_r+0x95c>
 800c158:	4629      	mov	r1, r5
 800c15a:	4632      	mov	r2, r6
 800c15c:	4658      	mov	r0, fp
 800c15e:	f000 fc6f 	bl	800ca40 <__lshift>
 800c162:	4605      	mov	r5, r0
 800c164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c166:	2b00      	cmp	r3, #0
 800c168:	d05a      	beq.n	800c220 <_dtoa_r+0xa18>
 800c16a:	6869      	ldr	r1, [r5, #4]
 800c16c:	4658      	mov	r0, fp
 800c16e:	f000 fa0f 	bl	800c590 <_Balloc>
 800c172:	4606      	mov	r6, r0
 800c174:	b928      	cbnz	r0, 800c182 <_dtoa_r+0x97a>
 800c176:	4b84      	ldr	r3, [pc, #528]	@ (800c388 <_dtoa_r+0xb80>)
 800c178:	4602      	mov	r2, r0
 800c17a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c17e:	f7ff bb5a 	b.w	800b836 <_dtoa_r+0x2e>
 800c182:	692a      	ldr	r2, [r5, #16]
 800c184:	3202      	adds	r2, #2
 800c186:	0092      	lsls	r2, r2, #2
 800c188:	f105 010c 	add.w	r1, r5, #12
 800c18c:	300c      	adds	r0, #12
 800c18e:	f7ff fa9e 	bl	800b6ce <memcpy>
 800c192:	2201      	movs	r2, #1
 800c194:	4631      	mov	r1, r6
 800c196:	4658      	mov	r0, fp
 800c198:	f000 fc52 	bl	800ca40 <__lshift>
 800c19c:	f10a 0301 	add.w	r3, sl, #1
 800c1a0:	9307      	str	r3, [sp, #28]
 800c1a2:	9b00      	ldr	r3, [sp, #0]
 800c1a4:	4453      	add	r3, sl
 800c1a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1a8:	9b02      	ldr	r3, [sp, #8]
 800c1aa:	f003 0301 	and.w	r3, r3, #1
 800c1ae:	462f      	mov	r7, r5
 800c1b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	9b07      	ldr	r3, [sp, #28]
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	4648      	mov	r0, r9
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	f7ff fa9b 	bl	800b6f8 <quorem>
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	9002      	str	r0, [sp, #8]
 800c1c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1ca:	4648      	mov	r0, r9
 800c1cc:	f000 fca4 	bl	800cb18 <__mcmp>
 800c1d0:	462a      	mov	r2, r5
 800c1d2:	9008      	str	r0, [sp, #32]
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	4658      	mov	r0, fp
 800c1d8:	f000 fcba 	bl	800cb50 <__mdiff>
 800c1dc:	68c2      	ldr	r2, [r0, #12]
 800c1de:	4606      	mov	r6, r0
 800c1e0:	bb02      	cbnz	r2, 800c224 <_dtoa_r+0xa1c>
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	4648      	mov	r0, r9
 800c1e6:	f000 fc97 	bl	800cb18 <__mcmp>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	4658      	mov	r0, fp
 800c1f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1f2:	f000 fa0d 	bl	800c610 <_Bfree>
 800c1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1fa:	9e07      	ldr	r6, [sp, #28]
 800c1fc:	ea43 0102 	orr.w	r1, r3, r2
 800c200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c202:	4319      	orrs	r1, r3
 800c204:	d110      	bne.n	800c228 <_dtoa_r+0xa20>
 800c206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c20a:	d029      	beq.n	800c260 <_dtoa_r+0xa58>
 800c20c:	9b08      	ldr	r3, [sp, #32]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dd02      	ble.n	800c218 <_dtoa_r+0xa10>
 800c212:	9b02      	ldr	r3, [sp, #8]
 800c214:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c218:	9b00      	ldr	r3, [sp, #0]
 800c21a:	f883 8000 	strb.w	r8, [r3]
 800c21e:	e63f      	b.n	800bea0 <_dtoa_r+0x698>
 800c220:	4628      	mov	r0, r5
 800c222:	e7bb      	b.n	800c19c <_dtoa_r+0x994>
 800c224:	2201      	movs	r2, #1
 800c226:	e7e1      	b.n	800c1ec <_dtoa_r+0x9e4>
 800c228:	9b08      	ldr	r3, [sp, #32]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	db04      	blt.n	800c238 <_dtoa_r+0xa30>
 800c22e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c230:	430b      	orrs	r3, r1
 800c232:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c234:	430b      	orrs	r3, r1
 800c236:	d120      	bne.n	800c27a <_dtoa_r+0xa72>
 800c238:	2a00      	cmp	r2, #0
 800c23a:	dded      	ble.n	800c218 <_dtoa_r+0xa10>
 800c23c:	4649      	mov	r1, r9
 800c23e:	2201      	movs	r2, #1
 800c240:	4658      	mov	r0, fp
 800c242:	f000 fbfd 	bl	800ca40 <__lshift>
 800c246:	4621      	mov	r1, r4
 800c248:	4681      	mov	r9, r0
 800c24a:	f000 fc65 	bl	800cb18 <__mcmp>
 800c24e:	2800      	cmp	r0, #0
 800c250:	dc03      	bgt.n	800c25a <_dtoa_r+0xa52>
 800c252:	d1e1      	bne.n	800c218 <_dtoa_r+0xa10>
 800c254:	f018 0f01 	tst.w	r8, #1
 800c258:	d0de      	beq.n	800c218 <_dtoa_r+0xa10>
 800c25a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c25e:	d1d8      	bne.n	800c212 <_dtoa_r+0xa0a>
 800c260:	9a00      	ldr	r2, [sp, #0]
 800c262:	2339      	movs	r3, #57	@ 0x39
 800c264:	7013      	strb	r3, [r2, #0]
 800c266:	4633      	mov	r3, r6
 800c268:	461e      	mov	r6, r3
 800c26a:	3b01      	subs	r3, #1
 800c26c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c270:	2a39      	cmp	r2, #57	@ 0x39
 800c272:	d052      	beq.n	800c31a <_dtoa_r+0xb12>
 800c274:	3201      	adds	r2, #1
 800c276:	701a      	strb	r2, [r3, #0]
 800c278:	e612      	b.n	800bea0 <_dtoa_r+0x698>
 800c27a:	2a00      	cmp	r2, #0
 800c27c:	dd07      	ble.n	800c28e <_dtoa_r+0xa86>
 800c27e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c282:	d0ed      	beq.n	800c260 <_dtoa_r+0xa58>
 800c284:	9a00      	ldr	r2, [sp, #0]
 800c286:	f108 0301 	add.w	r3, r8, #1
 800c28a:	7013      	strb	r3, [r2, #0]
 800c28c:	e608      	b.n	800bea0 <_dtoa_r+0x698>
 800c28e:	9b07      	ldr	r3, [sp, #28]
 800c290:	9a07      	ldr	r2, [sp, #28]
 800c292:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c298:	4293      	cmp	r3, r2
 800c29a:	d028      	beq.n	800c2ee <_dtoa_r+0xae6>
 800c29c:	4649      	mov	r1, r9
 800c29e:	2300      	movs	r3, #0
 800c2a0:	220a      	movs	r2, #10
 800c2a2:	4658      	mov	r0, fp
 800c2a4:	f000 f9d6 	bl	800c654 <__multadd>
 800c2a8:	42af      	cmp	r7, r5
 800c2aa:	4681      	mov	r9, r0
 800c2ac:	f04f 0300 	mov.w	r3, #0
 800c2b0:	f04f 020a 	mov.w	r2, #10
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	4658      	mov	r0, fp
 800c2b8:	d107      	bne.n	800c2ca <_dtoa_r+0xac2>
 800c2ba:	f000 f9cb 	bl	800c654 <__multadd>
 800c2be:	4607      	mov	r7, r0
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	9b07      	ldr	r3, [sp, #28]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	9307      	str	r3, [sp, #28]
 800c2c8:	e774      	b.n	800c1b4 <_dtoa_r+0x9ac>
 800c2ca:	f000 f9c3 	bl	800c654 <__multadd>
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	f000 f9bc 	bl	800c654 <__multadd>
 800c2dc:	4605      	mov	r5, r0
 800c2de:	e7f0      	b.n	800c2c2 <_dtoa_r+0xaba>
 800c2e0:	9b00      	ldr	r3, [sp, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bfcc      	ite	gt
 800c2e6:	461e      	movgt	r6, r3
 800c2e8:	2601      	movle	r6, #1
 800c2ea:	4456      	add	r6, sl
 800c2ec:	2700      	movs	r7, #0
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	4658      	mov	r0, fp
 800c2f4:	f000 fba4 	bl	800ca40 <__lshift>
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4681      	mov	r9, r0
 800c2fc:	f000 fc0c 	bl	800cb18 <__mcmp>
 800c300:	2800      	cmp	r0, #0
 800c302:	dcb0      	bgt.n	800c266 <_dtoa_r+0xa5e>
 800c304:	d102      	bne.n	800c30c <_dtoa_r+0xb04>
 800c306:	f018 0f01 	tst.w	r8, #1
 800c30a:	d1ac      	bne.n	800c266 <_dtoa_r+0xa5e>
 800c30c:	4633      	mov	r3, r6
 800c30e:	461e      	mov	r6, r3
 800c310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c314:	2a30      	cmp	r2, #48	@ 0x30
 800c316:	d0fa      	beq.n	800c30e <_dtoa_r+0xb06>
 800c318:	e5c2      	b.n	800bea0 <_dtoa_r+0x698>
 800c31a:	459a      	cmp	sl, r3
 800c31c:	d1a4      	bne.n	800c268 <_dtoa_r+0xa60>
 800c31e:	9b04      	ldr	r3, [sp, #16]
 800c320:	3301      	adds	r3, #1
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	2331      	movs	r3, #49	@ 0x31
 800c326:	f88a 3000 	strb.w	r3, [sl]
 800c32a:	e5b9      	b.n	800bea0 <_dtoa_r+0x698>
 800c32c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c32e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c38c <_dtoa_r+0xb84>
 800c332:	b11b      	cbz	r3, 800c33c <_dtoa_r+0xb34>
 800c334:	f10a 0308 	add.w	r3, sl, #8
 800c338:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c33a:	6013      	str	r3, [r2, #0]
 800c33c:	4650      	mov	r0, sl
 800c33e:	b019      	add	sp, #100	@ 0x64
 800c340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c346:	2b01      	cmp	r3, #1
 800c348:	f77f ae37 	ble.w	800bfba <_dtoa_r+0x7b2>
 800c34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c34e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c350:	2001      	movs	r0, #1
 800c352:	e655      	b.n	800c000 <_dtoa_r+0x7f8>
 800c354:	9b00      	ldr	r3, [sp, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	f77f aed6 	ble.w	800c108 <_dtoa_r+0x900>
 800c35c:	4656      	mov	r6, sl
 800c35e:	4621      	mov	r1, r4
 800c360:	4648      	mov	r0, r9
 800c362:	f7ff f9c9 	bl	800b6f8 <quorem>
 800c366:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c36a:	f806 8b01 	strb.w	r8, [r6], #1
 800c36e:	9b00      	ldr	r3, [sp, #0]
 800c370:	eba6 020a 	sub.w	r2, r6, sl
 800c374:	4293      	cmp	r3, r2
 800c376:	ddb3      	ble.n	800c2e0 <_dtoa_r+0xad8>
 800c378:	4649      	mov	r1, r9
 800c37a:	2300      	movs	r3, #0
 800c37c:	220a      	movs	r2, #10
 800c37e:	4658      	mov	r0, fp
 800c380:	f000 f968 	bl	800c654 <__multadd>
 800c384:	4681      	mov	r9, r0
 800c386:	e7ea      	b.n	800c35e <_dtoa_r+0xb56>
 800c388:	0800f0f1 	.word	0x0800f0f1
 800c38c:	0800f075 	.word	0x0800f075

0800c390 <_free_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4605      	mov	r5, r0
 800c394:	2900      	cmp	r1, #0
 800c396:	d041      	beq.n	800c41c <_free_r+0x8c>
 800c398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c39c:	1f0c      	subs	r4, r1, #4
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfb8      	it	lt
 800c3a2:	18e4      	addlt	r4, r4, r3
 800c3a4:	f000 f8e8 	bl	800c578 <__malloc_lock>
 800c3a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c420 <_free_r+0x90>)
 800c3aa:	6813      	ldr	r3, [r2, #0]
 800c3ac:	b933      	cbnz	r3, 800c3bc <_free_r+0x2c>
 800c3ae:	6063      	str	r3, [r4, #4]
 800c3b0:	6014      	str	r4, [r2, #0]
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3b8:	f000 b8e4 	b.w	800c584 <__malloc_unlock>
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	d908      	bls.n	800c3d2 <_free_r+0x42>
 800c3c0:	6820      	ldr	r0, [r4, #0]
 800c3c2:	1821      	adds	r1, r4, r0
 800c3c4:	428b      	cmp	r3, r1
 800c3c6:	bf01      	itttt	eq
 800c3c8:	6819      	ldreq	r1, [r3, #0]
 800c3ca:	685b      	ldreq	r3, [r3, #4]
 800c3cc:	1809      	addeq	r1, r1, r0
 800c3ce:	6021      	streq	r1, [r4, #0]
 800c3d0:	e7ed      	b.n	800c3ae <_free_r+0x1e>
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	b10b      	cbz	r3, 800c3dc <_free_r+0x4c>
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	d9fa      	bls.n	800c3d2 <_free_r+0x42>
 800c3dc:	6811      	ldr	r1, [r2, #0]
 800c3de:	1850      	adds	r0, r2, r1
 800c3e0:	42a0      	cmp	r0, r4
 800c3e2:	d10b      	bne.n	800c3fc <_free_r+0x6c>
 800c3e4:	6820      	ldr	r0, [r4, #0]
 800c3e6:	4401      	add	r1, r0
 800c3e8:	1850      	adds	r0, r2, r1
 800c3ea:	4283      	cmp	r3, r0
 800c3ec:	6011      	str	r1, [r2, #0]
 800c3ee:	d1e0      	bne.n	800c3b2 <_free_r+0x22>
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	6053      	str	r3, [r2, #4]
 800c3f6:	4408      	add	r0, r1
 800c3f8:	6010      	str	r0, [r2, #0]
 800c3fa:	e7da      	b.n	800c3b2 <_free_r+0x22>
 800c3fc:	d902      	bls.n	800c404 <_free_r+0x74>
 800c3fe:	230c      	movs	r3, #12
 800c400:	602b      	str	r3, [r5, #0]
 800c402:	e7d6      	b.n	800c3b2 <_free_r+0x22>
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	1821      	adds	r1, r4, r0
 800c408:	428b      	cmp	r3, r1
 800c40a:	bf04      	itt	eq
 800c40c:	6819      	ldreq	r1, [r3, #0]
 800c40e:	685b      	ldreq	r3, [r3, #4]
 800c410:	6063      	str	r3, [r4, #4]
 800c412:	bf04      	itt	eq
 800c414:	1809      	addeq	r1, r1, r0
 800c416:	6021      	streq	r1, [r4, #0]
 800c418:	6054      	str	r4, [r2, #4]
 800c41a:	e7ca      	b.n	800c3b2 <_free_r+0x22>
 800c41c:	bd38      	pop	{r3, r4, r5, pc}
 800c41e:	bf00      	nop
 800c420:	20005074 	.word	0x20005074

0800c424 <malloc>:
 800c424:	4b02      	ldr	r3, [pc, #8]	@ (800c430 <malloc+0xc>)
 800c426:	4601      	mov	r1, r0
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	f000 b825 	b.w	800c478 <_malloc_r>
 800c42e:	bf00      	nop
 800c430:	2000017c 	.word	0x2000017c

0800c434 <sbrk_aligned>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	4e0f      	ldr	r6, [pc, #60]	@ (800c474 <sbrk_aligned+0x40>)
 800c438:	460c      	mov	r4, r1
 800c43a:	6831      	ldr	r1, [r6, #0]
 800c43c:	4605      	mov	r5, r0
 800c43e:	b911      	cbnz	r1, 800c446 <sbrk_aligned+0x12>
 800c440:	f001 fe0c 	bl	800e05c <_sbrk_r>
 800c444:	6030      	str	r0, [r6, #0]
 800c446:	4621      	mov	r1, r4
 800c448:	4628      	mov	r0, r5
 800c44a:	f001 fe07 	bl	800e05c <_sbrk_r>
 800c44e:	1c43      	adds	r3, r0, #1
 800c450:	d103      	bne.n	800c45a <sbrk_aligned+0x26>
 800c452:	f04f 34ff 	mov.w	r4, #4294967295
 800c456:	4620      	mov	r0, r4
 800c458:	bd70      	pop	{r4, r5, r6, pc}
 800c45a:	1cc4      	adds	r4, r0, #3
 800c45c:	f024 0403 	bic.w	r4, r4, #3
 800c460:	42a0      	cmp	r0, r4
 800c462:	d0f8      	beq.n	800c456 <sbrk_aligned+0x22>
 800c464:	1a21      	subs	r1, r4, r0
 800c466:	4628      	mov	r0, r5
 800c468:	f001 fdf8 	bl	800e05c <_sbrk_r>
 800c46c:	3001      	adds	r0, #1
 800c46e:	d1f2      	bne.n	800c456 <sbrk_aligned+0x22>
 800c470:	e7ef      	b.n	800c452 <sbrk_aligned+0x1e>
 800c472:	bf00      	nop
 800c474:	20005070 	.word	0x20005070

0800c478 <_malloc_r>:
 800c478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c47c:	1ccd      	adds	r5, r1, #3
 800c47e:	f025 0503 	bic.w	r5, r5, #3
 800c482:	3508      	adds	r5, #8
 800c484:	2d0c      	cmp	r5, #12
 800c486:	bf38      	it	cc
 800c488:	250c      	movcc	r5, #12
 800c48a:	2d00      	cmp	r5, #0
 800c48c:	4606      	mov	r6, r0
 800c48e:	db01      	blt.n	800c494 <_malloc_r+0x1c>
 800c490:	42a9      	cmp	r1, r5
 800c492:	d904      	bls.n	800c49e <_malloc_r+0x26>
 800c494:	230c      	movs	r3, #12
 800c496:	6033      	str	r3, [r6, #0]
 800c498:	2000      	movs	r0, #0
 800c49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c49e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c574 <_malloc_r+0xfc>
 800c4a2:	f000 f869 	bl	800c578 <__malloc_lock>
 800c4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4aa:	461c      	mov	r4, r3
 800c4ac:	bb44      	cbnz	r4, 800c500 <_malloc_r+0x88>
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f7ff ffbf 	bl	800c434 <sbrk_aligned>
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	d158      	bne.n	800c56e <_malloc_r+0xf6>
 800c4bc:	f8d8 4000 	ldr.w	r4, [r8]
 800c4c0:	4627      	mov	r7, r4
 800c4c2:	2f00      	cmp	r7, #0
 800c4c4:	d143      	bne.n	800c54e <_malloc_r+0xd6>
 800c4c6:	2c00      	cmp	r4, #0
 800c4c8:	d04b      	beq.n	800c562 <_malloc_r+0xea>
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	eb04 0903 	add.w	r9, r4, r3
 800c4d4:	f001 fdc2 	bl	800e05c <_sbrk_r>
 800c4d8:	4581      	cmp	r9, r0
 800c4da:	d142      	bne.n	800c562 <_malloc_r+0xea>
 800c4dc:	6821      	ldr	r1, [r4, #0]
 800c4de:	1a6d      	subs	r5, r5, r1
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f7ff ffa6 	bl	800c434 <sbrk_aligned>
 800c4e8:	3001      	adds	r0, #1
 800c4ea:	d03a      	beq.n	800c562 <_malloc_r+0xea>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	442b      	add	r3, r5
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	bb62      	cbnz	r2, 800c554 <_malloc_r+0xdc>
 800c4fa:	f8c8 7000 	str.w	r7, [r8]
 800c4fe:	e00f      	b.n	800c520 <_malloc_r+0xa8>
 800c500:	6822      	ldr	r2, [r4, #0]
 800c502:	1b52      	subs	r2, r2, r5
 800c504:	d420      	bmi.n	800c548 <_malloc_r+0xd0>
 800c506:	2a0b      	cmp	r2, #11
 800c508:	d917      	bls.n	800c53a <_malloc_r+0xc2>
 800c50a:	1961      	adds	r1, r4, r5
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	6025      	str	r5, [r4, #0]
 800c510:	bf18      	it	ne
 800c512:	6059      	strne	r1, [r3, #4]
 800c514:	6863      	ldr	r3, [r4, #4]
 800c516:	bf08      	it	eq
 800c518:	f8c8 1000 	streq.w	r1, [r8]
 800c51c:	5162      	str	r2, [r4, r5]
 800c51e:	604b      	str	r3, [r1, #4]
 800c520:	4630      	mov	r0, r6
 800c522:	f000 f82f 	bl	800c584 <__malloc_unlock>
 800c526:	f104 000b 	add.w	r0, r4, #11
 800c52a:	1d23      	adds	r3, r4, #4
 800c52c:	f020 0007 	bic.w	r0, r0, #7
 800c530:	1ac2      	subs	r2, r0, r3
 800c532:	bf1c      	itt	ne
 800c534:	1a1b      	subne	r3, r3, r0
 800c536:	50a3      	strne	r3, [r4, r2]
 800c538:	e7af      	b.n	800c49a <_malloc_r+0x22>
 800c53a:	6862      	ldr	r2, [r4, #4]
 800c53c:	42a3      	cmp	r3, r4
 800c53e:	bf0c      	ite	eq
 800c540:	f8c8 2000 	streq.w	r2, [r8]
 800c544:	605a      	strne	r2, [r3, #4]
 800c546:	e7eb      	b.n	800c520 <_malloc_r+0xa8>
 800c548:	4623      	mov	r3, r4
 800c54a:	6864      	ldr	r4, [r4, #4]
 800c54c:	e7ae      	b.n	800c4ac <_malloc_r+0x34>
 800c54e:	463c      	mov	r4, r7
 800c550:	687f      	ldr	r7, [r7, #4]
 800c552:	e7b6      	b.n	800c4c2 <_malloc_r+0x4a>
 800c554:	461a      	mov	r2, r3
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d1fb      	bne.n	800c554 <_malloc_r+0xdc>
 800c55c:	2300      	movs	r3, #0
 800c55e:	6053      	str	r3, [r2, #4]
 800c560:	e7de      	b.n	800c520 <_malloc_r+0xa8>
 800c562:	230c      	movs	r3, #12
 800c564:	6033      	str	r3, [r6, #0]
 800c566:	4630      	mov	r0, r6
 800c568:	f000 f80c 	bl	800c584 <__malloc_unlock>
 800c56c:	e794      	b.n	800c498 <_malloc_r+0x20>
 800c56e:	6005      	str	r5, [r0, #0]
 800c570:	e7d6      	b.n	800c520 <_malloc_r+0xa8>
 800c572:	bf00      	nop
 800c574:	20005074 	.word	0x20005074

0800c578 <__malloc_lock>:
 800c578:	4801      	ldr	r0, [pc, #4]	@ (800c580 <__malloc_lock+0x8>)
 800c57a:	f7ff b8a6 	b.w	800b6ca <__retarget_lock_acquire_recursive>
 800c57e:	bf00      	nop
 800c580:	2000506c 	.word	0x2000506c

0800c584 <__malloc_unlock>:
 800c584:	4801      	ldr	r0, [pc, #4]	@ (800c58c <__malloc_unlock+0x8>)
 800c586:	f7ff b8a1 	b.w	800b6cc <__retarget_lock_release_recursive>
 800c58a:	bf00      	nop
 800c58c:	2000506c 	.word	0x2000506c

0800c590 <_Balloc>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	69c6      	ldr	r6, [r0, #28]
 800c594:	4604      	mov	r4, r0
 800c596:	460d      	mov	r5, r1
 800c598:	b976      	cbnz	r6, 800c5b8 <_Balloc+0x28>
 800c59a:	2010      	movs	r0, #16
 800c59c:	f7ff ff42 	bl	800c424 <malloc>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	61e0      	str	r0, [r4, #28]
 800c5a4:	b920      	cbnz	r0, 800c5b0 <_Balloc+0x20>
 800c5a6:	4b18      	ldr	r3, [pc, #96]	@ (800c608 <_Balloc+0x78>)
 800c5a8:	4818      	ldr	r0, [pc, #96]	@ (800c60c <_Balloc+0x7c>)
 800c5aa:	216b      	movs	r1, #107	@ 0x6b
 800c5ac:	f001 fd70 	bl	800e090 <__assert_func>
 800c5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5b4:	6006      	str	r6, [r0, #0]
 800c5b6:	60c6      	str	r6, [r0, #12]
 800c5b8:	69e6      	ldr	r6, [r4, #28]
 800c5ba:	68f3      	ldr	r3, [r6, #12]
 800c5bc:	b183      	cbz	r3, 800c5e0 <_Balloc+0x50>
 800c5be:	69e3      	ldr	r3, [r4, #28]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5c6:	b9b8      	cbnz	r0, 800c5f8 <_Balloc+0x68>
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c5ce:	1d72      	adds	r2, r6, #5
 800c5d0:	0092      	lsls	r2, r2, #2
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f001 fd7a 	bl	800e0cc <_calloc_r>
 800c5d8:	b160      	cbz	r0, 800c5f4 <_Balloc+0x64>
 800c5da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5de:	e00e      	b.n	800c5fe <_Balloc+0x6e>
 800c5e0:	2221      	movs	r2, #33	@ 0x21
 800c5e2:	2104      	movs	r1, #4
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f001 fd71 	bl	800e0cc <_calloc_r>
 800c5ea:	69e3      	ldr	r3, [r4, #28]
 800c5ec:	60f0      	str	r0, [r6, #12]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e4      	bne.n	800c5be <_Balloc+0x2e>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	bd70      	pop	{r4, r5, r6, pc}
 800c5f8:	6802      	ldr	r2, [r0, #0]
 800c5fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5fe:	2300      	movs	r3, #0
 800c600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c604:	e7f7      	b.n	800c5f6 <_Balloc+0x66>
 800c606:	bf00      	nop
 800c608:	0800f082 	.word	0x0800f082
 800c60c:	0800f102 	.word	0x0800f102

0800c610 <_Bfree>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	69c6      	ldr	r6, [r0, #28]
 800c614:	4605      	mov	r5, r0
 800c616:	460c      	mov	r4, r1
 800c618:	b976      	cbnz	r6, 800c638 <_Bfree+0x28>
 800c61a:	2010      	movs	r0, #16
 800c61c:	f7ff ff02 	bl	800c424 <malloc>
 800c620:	4602      	mov	r2, r0
 800c622:	61e8      	str	r0, [r5, #28]
 800c624:	b920      	cbnz	r0, 800c630 <_Bfree+0x20>
 800c626:	4b09      	ldr	r3, [pc, #36]	@ (800c64c <_Bfree+0x3c>)
 800c628:	4809      	ldr	r0, [pc, #36]	@ (800c650 <_Bfree+0x40>)
 800c62a:	218f      	movs	r1, #143	@ 0x8f
 800c62c:	f001 fd30 	bl	800e090 <__assert_func>
 800c630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c634:	6006      	str	r6, [r0, #0]
 800c636:	60c6      	str	r6, [r0, #12]
 800c638:	b13c      	cbz	r4, 800c64a <_Bfree+0x3a>
 800c63a:	69eb      	ldr	r3, [r5, #28]
 800c63c:	6862      	ldr	r2, [r4, #4]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c644:	6021      	str	r1, [r4, #0]
 800c646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	0800f082 	.word	0x0800f082
 800c650:	0800f102 	.word	0x0800f102

0800c654 <__multadd>:
 800c654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c658:	690d      	ldr	r5, [r1, #16]
 800c65a:	4607      	mov	r7, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	461e      	mov	r6, r3
 800c660:	f101 0c14 	add.w	ip, r1, #20
 800c664:	2000      	movs	r0, #0
 800c666:	f8dc 3000 	ldr.w	r3, [ip]
 800c66a:	b299      	uxth	r1, r3
 800c66c:	fb02 6101 	mla	r1, r2, r1, r6
 800c670:	0c1e      	lsrs	r6, r3, #16
 800c672:	0c0b      	lsrs	r3, r1, #16
 800c674:	fb02 3306 	mla	r3, r2, r6, r3
 800c678:	b289      	uxth	r1, r1
 800c67a:	3001      	adds	r0, #1
 800c67c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c680:	4285      	cmp	r5, r0
 800c682:	f84c 1b04 	str.w	r1, [ip], #4
 800c686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c68a:	dcec      	bgt.n	800c666 <__multadd+0x12>
 800c68c:	b30e      	cbz	r6, 800c6d2 <__multadd+0x7e>
 800c68e:	68a3      	ldr	r3, [r4, #8]
 800c690:	42ab      	cmp	r3, r5
 800c692:	dc19      	bgt.n	800c6c8 <__multadd+0x74>
 800c694:	6861      	ldr	r1, [r4, #4]
 800c696:	4638      	mov	r0, r7
 800c698:	3101      	adds	r1, #1
 800c69a:	f7ff ff79 	bl	800c590 <_Balloc>
 800c69e:	4680      	mov	r8, r0
 800c6a0:	b928      	cbnz	r0, 800c6ae <__multadd+0x5a>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d8 <__multadd+0x84>)
 800c6a6:	480d      	ldr	r0, [pc, #52]	@ (800c6dc <__multadd+0x88>)
 800c6a8:	21ba      	movs	r1, #186	@ 0xba
 800c6aa:	f001 fcf1 	bl	800e090 <__assert_func>
 800c6ae:	6922      	ldr	r2, [r4, #16]
 800c6b0:	3202      	adds	r2, #2
 800c6b2:	f104 010c 	add.w	r1, r4, #12
 800c6b6:	0092      	lsls	r2, r2, #2
 800c6b8:	300c      	adds	r0, #12
 800c6ba:	f7ff f808 	bl	800b6ce <memcpy>
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	f7ff ffa5 	bl	800c610 <_Bfree>
 800c6c6:	4644      	mov	r4, r8
 800c6c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	615e      	str	r6, [r3, #20]
 800c6d0:	6125      	str	r5, [r4, #16]
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d8:	0800f0f1 	.word	0x0800f0f1
 800c6dc:	0800f102 	.word	0x0800f102

0800c6e0 <__s2b>:
 800c6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	4615      	mov	r5, r2
 800c6e8:	461f      	mov	r7, r3
 800c6ea:	2209      	movs	r2, #9
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	db09      	blt.n	800c710 <__s2b+0x30>
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	f7ff ff47 	bl	800c590 <_Balloc>
 800c702:	b940      	cbnz	r0, 800c716 <__s2b+0x36>
 800c704:	4602      	mov	r2, r0
 800c706:	4b19      	ldr	r3, [pc, #100]	@ (800c76c <__s2b+0x8c>)
 800c708:	4819      	ldr	r0, [pc, #100]	@ (800c770 <__s2b+0x90>)
 800c70a:	21d3      	movs	r1, #211	@ 0xd3
 800c70c:	f001 fcc0 	bl	800e090 <__assert_func>
 800c710:	0052      	lsls	r2, r2, #1
 800c712:	3101      	adds	r1, #1
 800c714:	e7f0      	b.n	800c6f8 <__s2b+0x18>
 800c716:	9b08      	ldr	r3, [sp, #32]
 800c718:	6143      	str	r3, [r0, #20]
 800c71a:	2d09      	cmp	r5, #9
 800c71c:	f04f 0301 	mov.w	r3, #1
 800c720:	6103      	str	r3, [r0, #16]
 800c722:	dd16      	ble.n	800c752 <__s2b+0x72>
 800c724:	f104 0909 	add.w	r9, r4, #9
 800c728:	46c8      	mov	r8, r9
 800c72a:	442c      	add	r4, r5
 800c72c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c730:	4601      	mov	r1, r0
 800c732:	3b30      	subs	r3, #48	@ 0x30
 800c734:	220a      	movs	r2, #10
 800c736:	4630      	mov	r0, r6
 800c738:	f7ff ff8c 	bl	800c654 <__multadd>
 800c73c:	45a0      	cmp	r8, r4
 800c73e:	d1f5      	bne.n	800c72c <__s2b+0x4c>
 800c740:	f1a5 0408 	sub.w	r4, r5, #8
 800c744:	444c      	add	r4, r9
 800c746:	1b2d      	subs	r5, r5, r4
 800c748:	1963      	adds	r3, r4, r5
 800c74a:	42bb      	cmp	r3, r7
 800c74c:	db04      	blt.n	800c758 <__s2b+0x78>
 800c74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c752:	340a      	adds	r4, #10
 800c754:	2509      	movs	r5, #9
 800c756:	e7f6      	b.n	800c746 <__s2b+0x66>
 800c758:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c75c:	4601      	mov	r1, r0
 800c75e:	3b30      	subs	r3, #48	@ 0x30
 800c760:	220a      	movs	r2, #10
 800c762:	4630      	mov	r0, r6
 800c764:	f7ff ff76 	bl	800c654 <__multadd>
 800c768:	e7ee      	b.n	800c748 <__s2b+0x68>
 800c76a:	bf00      	nop
 800c76c:	0800f0f1 	.word	0x0800f0f1
 800c770:	0800f102 	.word	0x0800f102

0800c774 <__hi0bits>:
 800c774:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c778:	4603      	mov	r3, r0
 800c77a:	bf36      	itet	cc
 800c77c:	0403      	lslcc	r3, r0, #16
 800c77e:	2000      	movcs	r0, #0
 800c780:	2010      	movcc	r0, #16
 800c782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c786:	bf3c      	itt	cc
 800c788:	021b      	lslcc	r3, r3, #8
 800c78a:	3008      	addcc	r0, #8
 800c78c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c790:	bf3c      	itt	cc
 800c792:	011b      	lslcc	r3, r3, #4
 800c794:	3004      	addcc	r0, #4
 800c796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c79a:	bf3c      	itt	cc
 800c79c:	009b      	lslcc	r3, r3, #2
 800c79e:	3002      	addcc	r0, #2
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	db05      	blt.n	800c7b0 <__hi0bits+0x3c>
 800c7a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c7a8:	f100 0001 	add.w	r0, r0, #1
 800c7ac:	bf08      	it	eq
 800c7ae:	2020      	moveq	r0, #32
 800c7b0:	4770      	bx	lr

0800c7b2 <__lo0bits>:
 800c7b2:	6803      	ldr	r3, [r0, #0]
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	f013 0007 	ands.w	r0, r3, #7
 800c7ba:	d00b      	beq.n	800c7d4 <__lo0bits+0x22>
 800c7bc:	07d9      	lsls	r1, r3, #31
 800c7be:	d421      	bmi.n	800c804 <__lo0bits+0x52>
 800c7c0:	0798      	lsls	r0, r3, #30
 800c7c2:	bf49      	itett	mi
 800c7c4:	085b      	lsrmi	r3, r3, #1
 800c7c6:	089b      	lsrpl	r3, r3, #2
 800c7c8:	2001      	movmi	r0, #1
 800c7ca:	6013      	strmi	r3, [r2, #0]
 800c7cc:	bf5c      	itt	pl
 800c7ce:	6013      	strpl	r3, [r2, #0]
 800c7d0:	2002      	movpl	r0, #2
 800c7d2:	4770      	bx	lr
 800c7d4:	b299      	uxth	r1, r3
 800c7d6:	b909      	cbnz	r1, 800c7dc <__lo0bits+0x2a>
 800c7d8:	0c1b      	lsrs	r3, r3, #16
 800c7da:	2010      	movs	r0, #16
 800c7dc:	b2d9      	uxtb	r1, r3
 800c7de:	b909      	cbnz	r1, 800c7e4 <__lo0bits+0x32>
 800c7e0:	3008      	adds	r0, #8
 800c7e2:	0a1b      	lsrs	r3, r3, #8
 800c7e4:	0719      	lsls	r1, r3, #28
 800c7e6:	bf04      	itt	eq
 800c7e8:	091b      	lsreq	r3, r3, #4
 800c7ea:	3004      	addeq	r0, #4
 800c7ec:	0799      	lsls	r1, r3, #30
 800c7ee:	bf04      	itt	eq
 800c7f0:	089b      	lsreq	r3, r3, #2
 800c7f2:	3002      	addeq	r0, #2
 800c7f4:	07d9      	lsls	r1, r3, #31
 800c7f6:	d403      	bmi.n	800c800 <__lo0bits+0x4e>
 800c7f8:	085b      	lsrs	r3, r3, #1
 800c7fa:	f100 0001 	add.w	r0, r0, #1
 800c7fe:	d003      	beq.n	800c808 <__lo0bits+0x56>
 800c800:	6013      	str	r3, [r2, #0]
 800c802:	4770      	bx	lr
 800c804:	2000      	movs	r0, #0
 800c806:	4770      	bx	lr
 800c808:	2020      	movs	r0, #32
 800c80a:	4770      	bx	lr

0800c80c <__i2b>:
 800c80c:	b510      	push	{r4, lr}
 800c80e:	460c      	mov	r4, r1
 800c810:	2101      	movs	r1, #1
 800c812:	f7ff febd 	bl	800c590 <_Balloc>
 800c816:	4602      	mov	r2, r0
 800c818:	b928      	cbnz	r0, 800c826 <__i2b+0x1a>
 800c81a:	4b05      	ldr	r3, [pc, #20]	@ (800c830 <__i2b+0x24>)
 800c81c:	4805      	ldr	r0, [pc, #20]	@ (800c834 <__i2b+0x28>)
 800c81e:	f240 1145 	movw	r1, #325	@ 0x145
 800c822:	f001 fc35 	bl	800e090 <__assert_func>
 800c826:	2301      	movs	r3, #1
 800c828:	6144      	str	r4, [r0, #20]
 800c82a:	6103      	str	r3, [r0, #16]
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	bf00      	nop
 800c830:	0800f0f1 	.word	0x0800f0f1
 800c834:	0800f102 	.word	0x0800f102

0800c838 <__multiply>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	4614      	mov	r4, r2
 800c83e:	690a      	ldr	r2, [r1, #16]
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	429a      	cmp	r2, r3
 800c844:	bfa8      	it	ge
 800c846:	4623      	movge	r3, r4
 800c848:	460f      	mov	r7, r1
 800c84a:	bfa4      	itt	ge
 800c84c:	460c      	movge	r4, r1
 800c84e:	461f      	movge	r7, r3
 800c850:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c854:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c858:	68a3      	ldr	r3, [r4, #8]
 800c85a:	6861      	ldr	r1, [r4, #4]
 800c85c:	eb0a 0609 	add.w	r6, sl, r9
 800c860:	42b3      	cmp	r3, r6
 800c862:	b085      	sub	sp, #20
 800c864:	bfb8      	it	lt
 800c866:	3101      	addlt	r1, #1
 800c868:	f7ff fe92 	bl	800c590 <_Balloc>
 800c86c:	b930      	cbnz	r0, 800c87c <__multiply+0x44>
 800c86e:	4602      	mov	r2, r0
 800c870:	4b44      	ldr	r3, [pc, #272]	@ (800c984 <__multiply+0x14c>)
 800c872:	4845      	ldr	r0, [pc, #276]	@ (800c988 <__multiply+0x150>)
 800c874:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c878:	f001 fc0a 	bl	800e090 <__assert_func>
 800c87c:	f100 0514 	add.w	r5, r0, #20
 800c880:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c884:	462b      	mov	r3, r5
 800c886:	2200      	movs	r2, #0
 800c888:	4543      	cmp	r3, r8
 800c88a:	d321      	bcc.n	800c8d0 <__multiply+0x98>
 800c88c:	f107 0114 	add.w	r1, r7, #20
 800c890:	f104 0214 	add.w	r2, r4, #20
 800c894:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c898:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c89c:	9302      	str	r3, [sp, #8]
 800c89e:	1b13      	subs	r3, r2, r4
 800c8a0:	3b15      	subs	r3, #21
 800c8a2:	f023 0303 	bic.w	r3, r3, #3
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	f104 0715 	add.w	r7, r4, #21
 800c8ac:	42ba      	cmp	r2, r7
 800c8ae:	bf38      	it	cc
 800c8b0:	2304      	movcc	r3, #4
 800c8b2:	9301      	str	r3, [sp, #4]
 800c8b4:	9b02      	ldr	r3, [sp, #8]
 800c8b6:	9103      	str	r1, [sp, #12]
 800c8b8:	428b      	cmp	r3, r1
 800c8ba:	d80c      	bhi.n	800c8d6 <__multiply+0x9e>
 800c8bc:	2e00      	cmp	r6, #0
 800c8be:	dd03      	ble.n	800c8c8 <__multiply+0x90>
 800c8c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d05b      	beq.n	800c980 <__multiply+0x148>
 800c8c8:	6106      	str	r6, [r0, #16]
 800c8ca:	b005      	add	sp, #20
 800c8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d0:	f843 2b04 	str.w	r2, [r3], #4
 800c8d4:	e7d8      	b.n	800c888 <__multiply+0x50>
 800c8d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8da:	f1ba 0f00 	cmp.w	sl, #0
 800c8de:	d024      	beq.n	800c92a <__multiply+0xf2>
 800c8e0:	f104 0e14 	add.w	lr, r4, #20
 800c8e4:	46a9      	mov	r9, r5
 800c8e6:	f04f 0c00 	mov.w	ip, #0
 800c8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8ee:	f8d9 3000 	ldr.w	r3, [r9]
 800c8f2:	fa1f fb87 	uxth.w	fp, r7
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c900:	f8d9 7000 	ldr.w	r7, [r9]
 800c904:	4463      	add	r3, ip
 800c906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c90a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c90e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c912:	b29b      	uxth	r3, r3
 800c914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c918:	4572      	cmp	r2, lr
 800c91a:	f849 3b04 	str.w	r3, [r9], #4
 800c91e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c922:	d8e2      	bhi.n	800c8ea <__multiply+0xb2>
 800c924:	9b01      	ldr	r3, [sp, #4]
 800c926:	f845 c003 	str.w	ip, [r5, r3]
 800c92a:	9b03      	ldr	r3, [sp, #12]
 800c92c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c930:	3104      	adds	r1, #4
 800c932:	f1b9 0f00 	cmp.w	r9, #0
 800c936:	d021      	beq.n	800c97c <__multiply+0x144>
 800c938:	682b      	ldr	r3, [r5, #0]
 800c93a:	f104 0c14 	add.w	ip, r4, #20
 800c93e:	46ae      	mov	lr, r5
 800c940:	f04f 0a00 	mov.w	sl, #0
 800c944:	f8bc b000 	ldrh.w	fp, [ip]
 800c948:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c94c:	fb09 770b 	mla	r7, r9, fp, r7
 800c950:	4457      	add	r7, sl
 800c952:	b29b      	uxth	r3, r3
 800c954:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c958:	f84e 3b04 	str.w	r3, [lr], #4
 800c95c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c964:	f8be 3000 	ldrh.w	r3, [lr]
 800c968:	fb09 330a 	mla	r3, r9, sl, r3
 800c96c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c970:	4562      	cmp	r2, ip
 800c972:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c976:	d8e5      	bhi.n	800c944 <__multiply+0x10c>
 800c978:	9f01      	ldr	r7, [sp, #4]
 800c97a:	51eb      	str	r3, [r5, r7]
 800c97c:	3504      	adds	r5, #4
 800c97e:	e799      	b.n	800c8b4 <__multiply+0x7c>
 800c980:	3e01      	subs	r6, #1
 800c982:	e79b      	b.n	800c8bc <__multiply+0x84>
 800c984:	0800f0f1 	.word	0x0800f0f1
 800c988:	0800f102 	.word	0x0800f102

0800c98c <__pow5mult>:
 800c98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c990:	4615      	mov	r5, r2
 800c992:	f012 0203 	ands.w	r2, r2, #3
 800c996:	4607      	mov	r7, r0
 800c998:	460e      	mov	r6, r1
 800c99a:	d007      	beq.n	800c9ac <__pow5mult+0x20>
 800c99c:	4c25      	ldr	r4, [pc, #148]	@ (800ca34 <__pow5mult+0xa8>)
 800c99e:	3a01      	subs	r2, #1
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9a6:	f7ff fe55 	bl	800c654 <__multadd>
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	10ad      	asrs	r5, r5, #2
 800c9ae:	d03d      	beq.n	800ca2c <__pow5mult+0xa0>
 800c9b0:	69fc      	ldr	r4, [r7, #28]
 800c9b2:	b97c      	cbnz	r4, 800c9d4 <__pow5mult+0x48>
 800c9b4:	2010      	movs	r0, #16
 800c9b6:	f7ff fd35 	bl	800c424 <malloc>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	61f8      	str	r0, [r7, #28]
 800c9be:	b928      	cbnz	r0, 800c9cc <__pow5mult+0x40>
 800c9c0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca38 <__pow5mult+0xac>)
 800c9c2:	481e      	ldr	r0, [pc, #120]	@ (800ca3c <__pow5mult+0xb0>)
 800c9c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9c8:	f001 fb62 	bl	800e090 <__assert_func>
 800c9cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9d0:	6004      	str	r4, [r0, #0]
 800c9d2:	60c4      	str	r4, [r0, #12]
 800c9d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9dc:	b94c      	cbnz	r4, 800c9f2 <__pow5mult+0x66>
 800c9de:	f240 2171 	movw	r1, #625	@ 0x271
 800c9e2:	4638      	mov	r0, r7
 800c9e4:	f7ff ff12 	bl	800c80c <__i2b>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	6003      	str	r3, [r0, #0]
 800c9f2:	f04f 0900 	mov.w	r9, #0
 800c9f6:	07eb      	lsls	r3, r5, #31
 800c9f8:	d50a      	bpl.n	800ca10 <__pow5mult+0x84>
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4638      	mov	r0, r7
 800ca00:	f7ff ff1a 	bl	800c838 <__multiply>
 800ca04:	4631      	mov	r1, r6
 800ca06:	4680      	mov	r8, r0
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7ff fe01 	bl	800c610 <_Bfree>
 800ca0e:	4646      	mov	r6, r8
 800ca10:	106d      	asrs	r5, r5, #1
 800ca12:	d00b      	beq.n	800ca2c <__pow5mult+0xa0>
 800ca14:	6820      	ldr	r0, [r4, #0]
 800ca16:	b938      	cbnz	r0, 800ca28 <__pow5mult+0x9c>
 800ca18:	4622      	mov	r2, r4
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	f7ff ff0b 	bl	800c838 <__multiply>
 800ca22:	6020      	str	r0, [r4, #0]
 800ca24:	f8c0 9000 	str.w	r9, [r0]
 800ca28:	4604      	mov	r4, r0
 800ca2a:	e7e4      	b.n	800c9f6 <__pow5mult+0x6a>
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca32:	bf00      	nop
 800ca34:	0800f15c 	.word	0x0800f15c
 800ca38:	0800f082 	.word	0x0800f082
 800ca3c:	0800f102 	.word	0x0800f102

0800ca40 <__lshift>:
 800ca40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca44:	460c      	mov	r4, r1
 800ca46:	6849      	ldr	r1, [r1, #4]
 800ca48:	6923      	ldr	r3, [r4, #16]
 800ca4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	4607      	mov	r7, r0
 800ca52:	4691      	mov	r9, r2
 800ca54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca58:	f108 0601 	add.w	r6, r8, #1
 800ca5c:	42b3      	cmp	r3, r6
 800ca5e:	db0b      	blt.n	800ca78 <__lshift+0x38>
 800ca60:	4638      	mov	r0, r7
 800ca62:	f7ff fd95 	bl	800c590 <_Balloc>
 800ca66:	4605      	mov	r5, r0
 800ca68:	b948      	cbnz	r0, 800ca7e <__lshift+0x3e>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	4b28      	ldr	r3, [pc, #160]	@ (800cb10 <__lshift+0xd0>)
 800ca6e:	4829      	ldr	r0, [pc, #164]	@ (800cb14 <__lshift+0xd4>)
 800ca70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca74:	f001 fb0c 	bl	800e090 <__assert_func>
 800ca78:	3101      	adds	r1, #1
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	e7ee      	b.n	800ca5c <__lshift+0x1c>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f100 0114 	add.w	r1, r0, #20
 800ca84:	f100 0210 	add.w	r2, r0, #16
 800ca88:	4618      	mov	r0, r3
 800ca8a:	4553      	cmp	r3, sl
 800ca8c:	db33      	blt.n	800caf6 <__lshift+0xb6>
 800ca8e:	6920      	ldr	r0, [r4, #16]
 800ca90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca94:	f104 0314 	add.w	r3, r4, #20
 800ca98:	f019 091f 	ands.w	r9, r9, #31
 800ca9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800caa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800caa4:	d02b      	beq.n	800cafe <__lshift+0xbe>
 800caa6:	f1c9 0e20 	rsb	lr, r9, #32
 800caaa:	468a      	mov	sl, r1
 800caac:	2200      	movs	r2, #0
 800caae:	6818      	ldr	r0, [r3, #0]
 800cab0:	fa00 f009 	lsl.w	r0, r0, r9
 800cab4:	4310      	orrs	r0, r2
 800cab6:	f84a 0b04 	str.w	r0, [sl], #4
 800caba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cabe:	459c      	cmp	ip, r3
 800cac0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cac4:	d8f3      	bhi.n	800caae <__lshift+0x6e>
 800cac6:	ebac 0304 	sub.w	r3, ip, r4
 800caca:	3b15      	subs	r3, #21
 800cacc:	f023 0303 	bic.w	r3, r3, #3
 800cad0:	3304      	adds	r3, #4
 800cad2:	f104 0015 	add.w	r0, r4, #21
 800cad6:	4584      	cmp	ip, r0
 800cad8:	bf38      	it	cc
 800cada:	2304      	movcc	r3, #4
 800cadc:	50ca      	str	r2, [r1, r3]
 800cade:	b10a      	cbz	r2, 800cae4 <__lshift+0xa4>
 800cae0:	f108 0602 	add.w	r6, r8, #2
 800cae4:	3e01      	subs	r6, #1
 800cae6:	4638      	mov	r0, r7
 800cae8:	612e      	str	r6, [r5, #16]
 800caea:	4621      	mov	r1, r4
 800caec:	f7ff fd90 	bl	800c610 <_Bfree>
 800caf0:	4628      	mov	r0, r5
 800caf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cafa:	3301      	adds	r3, #1
 800cafc:	e7c5      	b.n	800ca8a <__lshift+0x4a>
 800cafe:	3904      	subs	r1, #4
 800cb00:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb04:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb08:	459c      	cmp	ip, r3
 800cb0a:	d8f9      	bhi.n	800cb00 <__lshift+0xc0>
 800cb0c:	e7ea      	b.n	800cae4 <__lshift+0xa4>
 800cb0e:	bf00      	nop
 800cb10:	0800f0f1 	.word	0x0800f0f1
 800cb14:	0800f102 	.word	0x0800f102

0800cb18 <__mcmp>:
 800cb18:	690a      	ldr	r2, [r1, #16]
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	6900      	ldr	r0, [r0, #16]
 800cb1e:	1a80      	subs	r0, r0, r2
 800cb20:	b530      	push	{r4, r5, lr}
 800cb22:	d10e      	bne.n	800cb42 <__mcmp+0x2a>
 800cb24:	3314      	adds	r3, #20
 800cb26:	3114      	adds	r1, #20
 800cb28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb38:	4295      	cmp	r5, r2
 800cb3a:	d003      	beq.n	800cb44 <__mcmp+0x2c>
 800cb3c:	d205      	bcs.n	800cb4a <__mcmp+0x32>
 800cb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb42:	bd30      	pop	{r4, r5, pc}
 800cb44:	42a3      	cmp	r3, r4
 800cb46:	d3f3      	bcc.n	800cb30 <__mcmp+0x18>
 800cb48:	e7fb      	b.n	800cb42 <__mcmp+0x2a>
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	e7f9      	b.n	800cb42 <__mcmp+0x2a>
	...

0800cb50 <__mdiff>:
 800cb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	4689      	mov	r9, r1
 800cb56:	4606      	mov	r6, r0
 800cb58:	4611      	mov	r1, r2
 800cb5a:	4648      	mov	r0, r9
 800cb5c:	4614      	mov	r4, r2
 800cb5e:	f7ff ffdb 	bl	800cb18 <__mcmp>
 800cb62:	1e05      	subs	r5, r0, #0
 800cb64:	d112      	bne.n	800cb8c <__mdiff+0x3c>
 800cb66:	4629      	mov	r1, r5
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f7ff fd11 	bl	800c590 <_Balloc>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	b928      	cbnz	r0, 800cb7e <__mdiff+0x2e>
 800cb72:	4b3f      	ldr	r3, [pc, #252]	@ (800cc70 <__mdiff+0x120>)
 800cb74:	f240 2137 	movw	r1, #567	@ 0x237
 800cb78:	483e      	ldr	r0, [pc, #248]	@ (800cc74 <__mdiff+0x124>)
 800cb7a:	f001 fa89 	bl	800e090 <__assert_func>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb84:	4610      	mov	r0, r2
 800cb86:	b003      	add	sp, #12
 800cb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8c:	bfbc      	itt	lt
 800cb8e:	464b      	movlt	r3, r9
 800cb90:	46a1      	movlt	r9, r4
 800cb92:	4630      	mov	r0, r6
 800cb94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb98:	bfba      	itte	lt
 800cb9a:	461c      	movlt	r4, r3
 800cb9c:	2501      	movlt	r5, #1
 800cb9e:	2500      	movge	r5, #0
 800cba0:	f7ff fcf6 	bl	800c590 <_Balloc>
 800cba4:	4602      	mov	r2, r0
 800cba6:	b918      	cbnz	r0, 800cbb0 <__mdiff+0x60>
 800cba8:	4b31      	ldr	r3, [pc, #196]	@ (800cc70 <__mdiff+0x120>)
 800cbaa:	f240 2145 	movw	r1, #581	@ 0x245
 800cbae:	e7e3      	b.n	800cb78 <__mdiff+0x28>
 800cbb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cbb4:	6926      	ldr	r6, [r4, #16]
 800cbb6:	60c5      	str	r5, [r0, #12]
 800cbb8:	f109 0310 	add.w	r3, r9, #16
 800cbbc:	f109 0514 	add.w	r5, r9, #20
 800cbc0:	f104 0e14 	add.w	lr, r4, #20
 800cbc4:	f100 0b14 	add.w	fp, r0, #20
 800cbc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cbcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cbd0:	9301      	str	r3, [sp, #4]
 800cbd2:	46d9      	mov	r9, fp
 800cbd4:	f04f 0c00 	mov.w	ip, #0
 800cbd8:	9b01      	ldr	r3, [sp, #4]
 800cbda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbde:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	fa1f f38a 	uxth.w	r3, sl
 800cbe8:	4619      	mov	r1, r3
 800cbea:	b283      	uxth	r3, r0
 800cbec:	1acb      	subs	r3, r1, r3
 800cbee:	0c00      	lsrs	r0, r0, #16
 800cbf0:	4463      	add	r3, ip
 800cbf2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbf6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc00:	4576      	cmp	r6, lr
 800cc02:	f849 3b04 	str.w	r3, [r9], #4
 800cc06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc0a:	d8e5      	bhi.n	800cbd8 <__mdiff+0x88>
 800cc0c:	1b33      	subs	r3, r6, r4
 800cc0e:	3b15      	subs	r3, #21
 800cc10:	f023 0303 	bic.w	r3, r3, #3
 800cc14:	3415      	adds	r4, #21
 800cc16:	3304      	adds	r3, #4
 800cc18:	42a6      	cmp	r6, r4
 800cc1a:	bf38      	it	cc
 800cc1c:	2304      	movcc	r3, #4
 800cc1e:	441d      	add	r5, r3
 800cc20:	445b      	add	r3, fp
 800cc22:	461e      	mov	r6, r3
 800cc24:	462c      	mov	r4, r5
 800cc26:	4544      	cmp	r4, r8
 800cc28:	d30e      	bcc.n	800cc48 <__mdiff+0xf8>
 800cc2a:	f108 0103 	add.w	r1, r8, #3
 800cc2e:	1b49      	subs	r1, r1, r5
 800cc30:	f021 0103 	bic.w	r1, r1, #3
 800cc34:	3d03      	subs	r5, #3
 800cc36:	45a8      	cmp	r8, r5
 800cc38:	bf38      	it	cc
 800cc3a:	2100      	movcc	r1, #0
 800cc3c:	440b      	add	r3, r1
 800cc3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc42:	b191      	cbz	r1, 800cc6a <__mdiff+0x11a>
 800cc44:	6117      	str	r7, [r2, #16]
 800cc46:	e79d      	b.n	800cb84 <__mdiff+0x34>
 800cc48:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc4c:	46e6      	mov	lr, ip
 800cc4e:	0c08      	lsrs	r0, r1, #16
 800cc50:	fa1c fc81 	uxtah	ip, ip, r1
 800cc54:	4471      	add	r1, lr
 800cc56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc5a:	b289      	uxth	r1, r1
 800cc5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc60:	f846 1b04 	str.w	r1, [r6], #4
 800cc64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc68:	e7dd      	b.n	800cc26 <__mdiff+0xd6>
 800cc6a:	3f01      	subs	r7, #1
 800cc6c:	e7e7      	b.n	800cc3e <__mdiff+0xee>
 800cc6e:	bf00      	nop
 800cc70:	0800f0f1 	.word	0x0800f0f1
 800cc74:	0800f102 	.word	0x0800f102

0800cc78 <__ulp>:
 800cc78:	b082      	sub	sp, #8
 800cc7a:	ed8d 0b00 	vstr	d0, [sp]
 800cc7e:	9a01      	ldr	r2, [sp, #4]
 800cc80:	4b0f      	ldr	r3, [pc, #60]	@ (800ccc0 <__ulp+0x48>)
 800cc82:	4013      	ands	r3, r2
 800cc84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	dc08      	bgt.n	800cc9e <__ulp+0x26>
 800cc8c:	425b      	negs	r3, r3
 800cc8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc96:	da04      	bge.n	800cca2 <__ulp+0x2a>
 800cc98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc9c:	4113      	asrs	r3, r2
 800cc9e:	2200      	movs	r2, #0
 800cca0:	e008      	b.n	800ccb4 <__ulp+0x3c>
 800cca2:	f1a2 0314 	sub.w	r3, r2, #20
 800cca6:	2b1e      	cmp	r3, #30
 800cca8:	bfda      	itte	le
 800ccaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ccae:	40da      	lsrle	r2, r3
 800ccb0:	2201      	movgt	r2, #1
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	4610      	mov	r0, r2
 800ccb8:	ec41 0b10 	vmov	d0, r0, r1
 800ccbc:	b002      	add	sp, #8
 800ccbe:	4770      	bx	lr
 800ccc0:	7ff00000 	.word	0x7ff00000

0800ccc4 <__b2d>:
 800ccc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc8:	6906      	ldr	r6, [r0, #16]
 800ccca:	f100 0814 	add.w	r8, r0, #20
 800ccce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ccd2:	1f37      	subs	r7, r6, #4
 800ccd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ccd8:	4610      	mov	r0, r2
 800ccda:	f7ff fd4b 	bl	800c774 <__hi0bits>
 800ccde:	f1c0 0320 	rsb	r3, r0, #32
 800cce2:	280a      	cmp	r0, #10
 800cce4:	600b      	str	r3, [r1, #0]
 800cce6:	491b      	ldr	r1, [pc, #108]	@ (800cd54 <__b2d+0x90>)
 800cce8:	dc15      	bgt.n	800cd16 <__b2d+0x52>
 800ccea:	f1c0 0c0b 	rsb	ip, r0, #11
 800ccee:	fa22 f30c 	lsr.w	r3, r2, ip
 800ccf2:	45b8      	cmp	r8, r7
 800ccf4:	ea43 0501 	orr.w	r5, r3, r1
 800ccf8:	bf34      	ite	cc
 800ccfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccfe:	2300      	movcs	r3, #0
 800cd00:	3015      	adds	r0, #21
 800cd02:	fa02 f000 	lsl.w	r0, r2, r0
 800cd06:	fa23 f30c 	lsr.w	r3, r3, ip
 800cd0a:	4303      	orrs	r3, r0
 800cd0c:	461c      	mov	r4, r3
 800cd0e:	ec45 4b10 	vmov	d0, r4, r5
 800cd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd16:	45b8      	cmp	r8, r7
 800cd18:	bf3a      	itte	cc
 800cd1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd1e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cd22:	2300      	movcs	r3, #0
 800cd24:	380b      	subs	r0, #11
 800cd26:	d012      	beq.n	800cd4e <__b2d+0x8a>
 800cd28:	f1c0 0120 	rsb	r1, r0, #32
 800cd2c:	fa23 f401 	lsr.w	r4, r3, r1
 800cd30:	4082      	lsls	r2, r0
 800cd32:	4322      	orrs	r2, r4
 800cd34:	4547      	cmp	r7, r8
 800cd36:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cd3a:	bf8c      	ite	hi
 800cd3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd40:	2200      	movls	r2, #0
 800cd42:	4083      	lsls	r3, r0
 800cd44:	40ca      	lsrs	r2, r1
 800cd46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	e7de      	b.n	800cd0c <__b2d+0x48>
 800cd4e:	ea42 0501 	orr.w	r5, r2, r1
 800cd52:	e7db      	b.n	800cd0c <__b2d+0x48>
 800cd54:	3ff00000 	.word	0x3ff00000

0800cd58 <__d2b>:
 800cd58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd5c:	460f      	mov	r7, r1
 800cd5e:	2101      	movs	r1, #1
 800cd60:	ec59 8b10 	vmov	r8, r9, d0
 800cd64:	4616      	mov	r6, r2
 800cd66:	f7ff fc13 	bl	800c590 <_Balloc>
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	b930      	cbnz	r0, 800cd7c <__d2b+0x24>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	4b23      	ldr	r3, [pc, #140]	@ (800ce00 <__d2b+0xa8>)
 800cd72:	4824      	ldr	r0, [pc, #144]	@ (800ce04 <__d2b+0xac>)
 800cd74:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd78:	f001 f98a 	bl	800e090 <__assert_func>
 800cd7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd84:	b10d      	cbz	r5, 800cd8a <__d2b+0x32>
 800cd86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd8a:	9301      	str	r3, [sp, #4]
 800cd8c:	f1b8 0300 	subs.w	r3, r8, #0
 800cd90:	d023      	beq.n	800cdda <__d2b+0x82>
 800cd92:	4668      	mov	r0, sp
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	f7ff fd0c 	bl	800c7b2 <__lo0bits>
 800cd9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd9e:	b1d0      	cbz	r0, 800cdd6 <__d2b+0x7e>
 800cda0:	f1c0 0320 	rsb	r3, r0, #32
 800cda4:	fa02 f303 	lsl.w	r3, r2, r3
 800cda8:	430b      	orrs	r3, r1
 800cdaa:	40c2      	lsrs	r2, r0
 800cdac:	6163      	str	r3, [r4, #20]
 800cdae:	9201      	str	r2, [sp, #4]
 800cdb0:	9b01      	ldr	r3, [sp, #4]
 800cdb2:	61a3      	str	r3, [r4, #24]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	bf0c      	ite	eq
 800cdb8:	2201      	moveq	r2, #1
 800cdba:	2202      	movne	r2, #2
 800cdbc:	6122      	str	r2, [r4, #16]
 800cdbe:	b1a5      	cbz	r5, 800cdea <__d2b+0x92>
 800cdc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cdc4:	4405      	add	r5, r0
 800cdc6:	603d      	str	r5, [r7, #0]
 800cdc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cdcc:	6030      	str	r0, [r6, #0]
 800cdce:	4620      	mov	r0, r4
 800cdd0:	b003      	add	sp, #12
 800cdd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdd6:	6161      	str	r1, [r4, #20]
 800cdd8:	e7ea      	b.n	800cdb0 <__d2b+0x58>
 800cdda:	a801      	add	r0, sp, #4
 800cddc:	f7ff fce9 	bl	800c7b2 <__lo0bits>
 800cde0:	9b01      	ldr	r3, [sp, #4]
 800cde2:	6163      	str	r3, [r4, #20]
 800cde4:	3020      	adds	r0, #32
 800cde6:	2201      	movs	r2, #1
 800cde8:	e7e8      	b.n	800cdbc <__d2b+0x64>
 800cdea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cdf2:	6038      	str	r0, [r7, #0]
 800cdf4:	6918      	ldr	r0, [r3, #16]
 800cdf6:	f7ff fcbd 	bl	800c774 <__hi0bits>
 800cdfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdfe:	e7e5      	b.n	800cdcc <__d2b+0x74>
 800ce00:	0800f0f1 	.word	0x0800f0f1
 800ce04:	0800f102 	.word	0x0800f102

0800ce08 <__ratio>:
 800ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0c:	b085      	sub	sp, #20
 800ce0e:	e9cd 1000 	strd	r1, r0, [sp]
 800ce12:	a902      	add	r1, sp, #8
 800ce14:	f7ff ff56 	bl	800ccc4 <__b2d>
 800ce18:	9800      	ldr	r0, [sp, #0]
 800ce1a:	a903      	add	r1, sp, #12
 800ce1c:	ec55 4b10 	vmov	r4, r5, d0
 800ce20:	f7ff ff50 	bl	800ccc4 <__b2d>
 800ce24:	9b01      	ldr	r3, [sp, #4]
 800ce26:	6919      	ldr	r1, [r3, #16]
 800ce28:	9b00      	ldr	r3, [sp, #0]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	1ac9      	subs	r1, r1, r3
 800ce2e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce32:	1a9b      	subs	r3, r3, r2
 800ce34:	ec5b ab10 	vmov	sl, fp, d0
 800ce38:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bfce      	itee	gt
 800ce40:	462a      	movgt	r2, r5
 800ce42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce46:	465a      	movle	r2, fp
 800ce48:	462f      	mov	r7, r5
 800ce4a:	46d9      	mov	r9, fp
 800ce4c:	bfcc      	ite	gt
 800ce4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce52:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ce56:	464b      	mov	r3, r9
 800ce58:	4652      	mov	r2, sl
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	f7f3 fd25 	bl	80008ac <__aeabi_ddiv>
 800ce62:	ec41 0b10 	vmov	d0, r0, r1
 800ce66:	b005      	add	sp, #20
 800ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce6c <__copybits>:
 800ce6c:	3901      	subs	r1, #1
 800ce6e:	b570      	push	{r4, r5, r6, lr}
 800ce70:	1149      	asrs	r1, r1, #5
 800ce72:	6914      	ldr	r4, [r2, #16]
 800ce74:	3101      	adds	r1, #1
 800ce76:	f102 0314 	add.w	r3, r2, #20
 800ce7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce82:	1f05      	subs	r5, r0, #4
 800ce84:	42a3      	cmp	r3, r4
 800ce86:	d30c      	bcc.n	800cea2 <__copybits+0x36>
 800ce88:	1aa3      	subs	r3, r4, r2
 800ce8a:	3b11      	subs	r3, #17
 800ce8c:	f023 0303 	bic.w	r3, r3, #3
 800ce90:	3211      	adds	r2, #17
 800ce92:	42a2      	cmp	r2, r4
 800ce94:	bf88      	it	hi
 800ce96:	2300      	movhi	r3, #0
 800ce98:	4418      	add	r0, r3
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	4288      	cmp	r0, r1
 800ce9e:	d305      	bcc.n	800ceac <__copybits+0x40>
 800cea0:	bd70      	pop	{r4, r5, r6, pc}
 800cea2:	f853 6b04 	ldr.w	r6, [r3], #4
 800cea6:	f845 6f04 	str.w	r6, [r5, #4]!
 800ceaa:	e7eb      	b.n	800ce84 <__copybits+0x18>
 800ceac:	f840 3b04 	str.w	r3, [r0], #4
 800ceb0:	e7f4      	b.n	800ce9c <__copybits+0x30>

0800ceb2 <__any_on>:
 800ceb2:	f100 0214 	add.w	r2, r0, #20
 800ceb6:	6900      	ldr	r0, [r0, #16]
 800ceb8:	114b      	asrs	r3, r1, #5
 800ceba:	4298      	cmp	r0, r3
 800cebc:	b510      	push	{r4, lr}
 800cebe:	db11      	blt.n	800cee4 <__any_on+0x32>
 800cec0:	dd0a      	ble.n	800ced8 <__any_on+0x26>
 800cec2:	f011 011f 	ands.w	r1, r1, #31
 800cec6:	d007      	beq.n	800ced8 <__any_on+0x26>
 800cec8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cecc:	fa24 f001 	lsr.w	r0, r4, r1
 800ced0:	fa00 f101 	lsl.w	r1, r0, r1
 800ced4:	428c      	cmp	r4, r1
 800ced6:	d10b      	bne.n	800cef0 <__any_on+0x3e>
 800ced8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cedc:	4293      	cmp	r3, r2
 800cede:	d803      	bhi.n	800cee8 <__any_on+0x36>
 800cee0:	2000      	movs	r0, #0
 800cee2:	bd10      	pop	{r4, pc}
 800cee4:	4603      	mov	r3, r0
 800cee6:	e7f7      	b.n	800ced8 <__any_on+0x26>
 800cee8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ceec:	2900      	cmp	r1, #0
 800ceee:	d0f5      	beq.n	800cedc <__any_on+0x2a>
 800cef0:	2001      	movs	r0, #1
 800cef2:	e7f6      	b.n	800cee2 <__any_on+0x30>

0800cef4 <sulp>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4604      	mov	r4, r0
 800cef8:	460d      	mov	r5, r1
 800cefa:	ec45 4b10 	vmov	d0, r4, r5
 800cefe:	4616      	mov	r6, r2
 800cf00:	f7ff feba 	bl	800cc78 <__ulp>
 800cf04:	ec51 0b10 	vmov	r0, r1, d0
 800cf08:	b17e      	cbz	r6, 800cf2a <sulp+0x36>
 800cf0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf0e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dd09      	ble.n	800cf2a <sulp+0x36>
 800cf16:	051b      	lsls	r3, r3, #20
 800cf18:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cf1c:	2400      	movs	r4, #0
 800cf1e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cf22:	4622      	mov	r2, r4
 800cf24:	462b      	mov	r3, r5
 800cf26:	f7f3 fb97 	bl	8000658 <__aeabi_dmul>
 800cf2a:	ec41 0b10 	vmov	d0, r0, r1
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}

0800cf30 <_strtod_l>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	b09f      	sub	sp, #124	@ 0x7c
 800cf36:	460c      	mov	r4, r1
 800cf38:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cf3e:	9005      	str	r0, [sp, #20]
 800cf40:	f04f 0a00 	mov.w	sl, #0
 800cf44:	f04f 0b00 	mov.w	fp, #0
 800cf48:	460a      	mov	r2, r1
 800cf4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf4c:	7811      	ldrb	r1, [r2, #0]
 800cf4e:	292b      	cmp	r1, #43	@ 0x2b
 800cf50:	d04a      	beq.n	800cfe8 <_strtod_l+0xb8>
 800cf52:	d838      	bhi.n	800cfc6 <_strtod_l+0x96>
 800cf54:	290d      	cmp	r1, #13
 800cf56:	d832      	bhi.n	800cfbe <_strtod_l+0x8e>
 800cf58:	2908      	cmp	r1, #8
 800cf5a:	d832      	bhi.n	800cfc2 <_strtod_l+0x92>
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	d03b      	beq.n	800cfd8 <_strtod_l+0xa8>
 800cf60:	2200      	movs	r2, #0
 800cf62:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cf66:	782a      	ldrb	r2, [r5, #0]
 800cf68:	2a30      	cmp	r2, #48	@ 0x30
 800cf6a:	f040 80b3 	bne.w	800d0d4 <_strtod_l+0x1a4>
 800cf6e:	786a      	ldrb	r2, [r5, #1]
 800cf70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf74:	2a58      	cmp	r2, #88	@ 0x58
 800cf76:	d16e      	bne.n	800d056 <_strtod_l+0x126>
 800cf78:	9302      	str	r3, [sp, #8]
 800cf7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	4a8e      	ldr	r2, [pc, #568]	@ (800d1bc <_strtod_l+0x28c>)
 800cf84:	9805      	ldr	r0, [sp, #20]
 800cf86:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cf88:	a919      	add	r1, sp, #100	@ 0x64
 800cf8a:	f001 f91b 	bl	800e1c4 <__gethex>
 800cf8e:	f010 060f 	ands.w	r6, r0, #15
 800cf92:	4604      	mov	r4, r0
 800cf94:	d005      	beq.n	800cfa2 <_strtod_l+0x72>
 800cf96:	2e06      	cmp	r6, #6
 800cf98:	d128      	bne.n	800cfec <_strtod_l+0xbc>
 800cf9a:	3501      	adds	r5, #1
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cfa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f040 858e 	bne.w	800dac6 <_strtod_l+0xb96>
 800cfaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfac:	b1cb      	cbz	r3, 800cfe2 <_strtod_l+0xb2>
 800cfae:	4652      	mov	r2, sl
 800cfb0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cfb4:	ec43 2b10 	vmov	d0, r2, r3
 800cfb8:	b01f      	add	sp, #124	@ 0x7c
 800cfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbe:	2920      	cmp	r1, #32
 800cfc0:	d1ce      	bne.n	800cf60 <_strtod_l+0x30>
 800cfc2:	3201      	adds	r2, #1
 800cfc4:	e7c1      	b.n	800cf4a <_strtod_l+0x1a>
 800cfc6:	292d      	cmp	r1, #45	@ 0x2d
 800cfc8:	d1ca      	bne.n	800cf60 <_strtod_l+0x30>
 800cfca:	2101      	movs	r1, #1
 800cfcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cfce:	1c51      	adds	r1, r2, #1
 800cfd0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cfd2:	7852      	ldrb	r2, [r2, #1]
 800cfd4:	2a00      	cmp	r2, #0
 800cfd6:	d1c5      	bne.n	800cf64 <_strtod_l+0x34>
 800cfd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfda:	9419      	str	r4, [sp, #100]	@ 0x64
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f040 8570 	bne.w	800dac2 <_strtod_l+0xb92>
 800cfe2:	4652      	mov	r2, sl
 800cfe4:	465b      	mov	r3, fp
 800cfe6:	e7e5      	b.n	800cfb4 <_strtod_l+0x84>
 800cfe8:	2100      	movs	r1, #0
 800cfea:	e7ef      	b.n	800cfcc <_strtod_l+0x9c>
 800cfec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cfee:	b13a      	cbz	r2, 800d000 <_strtod_l+0xd0>
 800cff0:	2135      	movs	r1, #53	@ 0x35
 800cff2:	a81c      	add	r0, sp, #112	@ 0x70
 800cff4:	f7ff ff3a 	bl	800ce6c <__copybits>
 800cff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cffa:	9805      	ldr	r0, [sp, #20]
 800cffc:	f7ff fb08 	bl	800c610 <_Bfree>
 800d000:	3e01      	subs	r6, #1
 800d002:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d004:	2e04      	cmp	r6, #4
 800d006:	d806      	bhi.n	800d016 <_strtod_l+0xe6>
 800d008:	e8df f006 	tbb	[pc, r6]
 800d00c:	201d0314 	.word	0x201d0314
 800d010:	14          	.byte	0x14
 800d011:	00          	.byte	0x00
 800d012:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d016:	05e1      	lsls	r1, r4, #23
 800d018:	bf48      	it	mi
 800d01a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d01e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d022:	0d1b      	lsrs	r3, r3, #20
 800d024:	051b      	lsls	r3, r3, #20
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1bb      	bne.n	800cfa2 <_strtod_l+0x72>
 800d02a:	f7fe fb23 	bl	800b674 <__errno>
 800d02e:	2322      	movs	r3, #34	@ 0x22
 800d030:	6003      	str	r3, [r0, #0]
 800d032:	e7b6      	b.n	800cfa2 <_strtod_l+0x72>
 800d034:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d038:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d03c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d040:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d044:	e7e7      	b.n	800d016 <_strtod_l+0xe6>
 800d046:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d1c4 <_strtod_l+0x294>
 800d04a:	e7e4      	b.n	800d016 <_strtod_l+0xe6>
 800d04c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d050:	f04f 3aff 	mov.w	sl, #4294967295
 800d054:	e7df      	b.n	800d016 <_strtod_l+0xe6>
 800d056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d05c:	785b      	ldrb	r3, [r3, #1]
 800d05e:	2b30      	cmp	r3, #48	@ 0x30
 800d060:	d0f9      	beq.n	800d056 <_strtod_l+0x126>
 800d062:	2b00      	cmp	r3, #0
 800d064:	d09d      	beq.n	800cfa2 <_strtod_l+0x72>
 800d066:	2301      	movs	r3, #1
 800d068:	9309      	str	r3, [sp, #36]	@ 0x24
 800d06a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d06c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d06e:	2300      	movs	r3, #0
 800d070:	9308      	str	r3, [sp, #32]
 800d072:	930a      	str	r3, [sp, #40]	@ 0x28
 800d074:	461f      	mov	r7, r3
 800d076:	220a      	movs	r2, #10
 800d078:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d07a:	7805      	ldrb	r5, [r0, #0]
 800d07c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d080:	b2d9      	uxtb	r1, r3
 800d082:	2909      	cmp	r1, #9
 800d084:	d928      	bls.n	800d0d8 <_strtod_l+0x1a8>
 800d086:	494e      	ldr	r1, [pc, #312]	@ (800d1c0 <_strtod_l+0x290>)
 800d088:	2201      	movs	r2, #1
 800d08a:	f000 ffd5 	bl	800e038 <strncmp>
 800d08e:	2800      	cmp	r0, #0
 800d090:	d032      	beq.n	800d0f8 <_strtod_l+0x1c8>
 800d092:	2000      	movs	r0, #0
 800d094:	462a      	mov	r2, r5
 800d096:	4681      	mov	r9, r0
 800d098:	463d      	mov	r5, r7
 800d09a:	4603      	mov	r3, r0
 800d09c:	2a65      	cmp	r2, #101	@ 0x65
 800d09e:	d001      	beq.n	800d0a4 <_strtod_l+0x174>
 800d0a0:	2a45      	cmp	r2, #69	@ 0x45
 800d0a2:	d114      	bne.n	800d0ce <_strtod_l+0x19e>
 800d0a4:	b91d      	cbnz	r5, 800d0ae <_strtod_l+0x17e>
 800d0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0a8:	4302      	orrs	r2, r0
 800d0aa:	d095      	beq.n	800cfd8 <_strtod_l+0xa8>
 800d0ac:	2500      	movs	r5, #0
 800d0ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d0b0:	1c62      	adds	r2, r4, #1
 800d0b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0b4:	7862      	ldrb	r2, [r4, #1]
 800d0b6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d0b8:	d077      	beq.n	800d1aa <_strtod_l+0x27a>
 800d0ba:	2a2d      	cmp	r2, #45	@ 0x2d
 800d0bc:	d07b      	beq.n	800d1b6 <_strtod_l+0x286>
 800d0be:	f04f 0c00 	mov.w	ip, #0
 800d0c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d0c6:	2909      	cmp	r1, #9
 800d0c8:	f240 8082 	bls.w	800d1d0 <_strtod_l+0x2a0>
 800d0cc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0ce:	f04f 0800 	mov.w	r8, #0
 800d0d2:	e0a2      	b.n	800d21a <_strtod_l+0x2ea>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	e7c7      	b.n	800d068 <_strtod_l+0x138>
 800d0d8:	2f08      	cmp	r7, #8
 800d0da:	bfd5      	itete	le
 800d0dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d0de:	9908      	ldrgt	r1, [sp, #32]
 800d0e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d0e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d0e8:	f100 0001 	add.w	r0, r0, #1
 800d0ec:	bfd4      	ite	le
 800d0ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d0f0:	9308      	strgt	r3, [sp, #32]
 800d0f2:	3701      	adds	r7, #1
 800d0f4:	9019      	str	r0, [sp, #100]	@ 0x64
 800d0f6:	e7bf      	b.n	800d078 <_strtod_l+0x148>
 800d0f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0fe:	785a      	ldrb	r2, [r3, #1]
 800d100:	b37f      	cbz	r7, 800d162 <_strtod_l+0x232>
 800d102:	4681      	mov	r9, r0
 800d104:	463d      	mov	r5, r7
 800d106:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d10a:	2b09      	cmp	r3, #9
 800d10c:	d912      	bls.n	800d134 <_strtod_l+0x204>
 800d10e:	2301      	movs	r3, #1
 800d110:	e7c4      	b.n	800d09c <_strtod_l+0x16c>
 800d112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d114:	1c5a      	adds	r2, r3, #1
 800d116:	9219      	str	r2, [sp, #100]	@ 0x64
 800d118:	785a      	ldrb	r2, [r3, #1]
 800d11a:	3001      	adds	r0, #1
 800d11c:	2a30      	cmp	r2, #48	@ 0x30
 800d11e:	d0f8      	beq.n	800d112 <_strtod_l+0x1e2>
 800d120:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d124:	2b08      	cmp	r3, #8
 800d126:	f200 84d3 	bhi.w	800dad0 <_strtod_l+0xba0>
 800d12a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d12c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d12e:	4681      	mov	r9, r0
 800d130:	2000      	movs	r0, #0
 800d132:	4605      	mov	r5, r0
 800d134:	3a30      	subs	r2, #48	@ 0x30
 800d136:	f100 0301 	add.w	r3, r0, #1
 800d13a:	d02a      	beq.n	800d192 <_strtod_l+0x262>
 800d13c:	4499      	add	r9, r3
 800d13e:	eb00 0c05 	add.w	ip, r0, r5
 800d142:	462b      	mov	r3, r5
 800d144:	210a      	movs	r1, #10
 800d146:	4563      	cmp	r3, ip
 800d148:	d10d      	bne.n	800d166 <_strtod_l+0x236>
 800d14a:	1c69      	adds	r1, r5, #1
 800d14c:	4401      	add	r1, r0
 800d14e:	4428      	add	r0, r5
 800d150:	2808      	cmp	r0, #8
 800d152:	dc16      	bgt.n	800d182 <_strtod_l+0x252>
 800d154:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d156:	230a      	movs	r3, #10
 800d158:	fb03 2300 	mla	r3, r3, r0, r2
 800d15c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d15e:	2300      	movs	r3, #0
 800d160:	e018      	b.n	800d194 <_strtod_l+0x264>
 800d162:	4638      	mov	r0, r7
 800d164:	e7da      	b.n	800d11c <_strtod_l+0x1ec>
 800d166:	2b08      	cmp	r3, #8
 800d168:	f103 0301 	add.w	r3, r3, #1
 800d16c:	dc03      	bgt.n	800d176 <_strtod_l+0x246>
 800d16e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d170:	434e      	muls	r6, r1
 800d172:	960a      	str	r6, [sp, #40]	@ 0x28
 800d174:	e7e7      	b.n	800d146 <_strtod_l+0x216>
 800d176:	2b10      	cmp	r3, #16
 800d178:	bfde      	ittt	le
 800d17a:	9e08      	ldrle	r6, [sp, #32]
 800d17c:	434e      	mulle	r6, r1
 800d17e:	9608      	strle	r6, [sp, #32]
 800d180:	e7e1      	b.n	800d146 <_strtod_l+0x216>
 800d182:	280f      	cmp	r0, #15
 800d184:	dceb      	bgt.n	800d15e <_strtod_l+0x22e>
 800d186:	9808      	ldr	r0, [sp, #32]
 800d188:	230a      	movs	r3, #10
 800d18a:	fb03 2300 	mla	r3, r3, r0, r2
 800d18e:	9308      	str	r3, [sp, #32]
 800d190:	e7e5      	b.n	800d15e <_strtod_l+0x22e>
 800d192:	4629      	mov	r1, r5
 800d194:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d196:	1c50      	adds	r0, r2, #1
 800d198:	9019      	str	r0, [sp, #100]	@ 0x64
 800d19a:	7852      	ldrb	r2, [r2, #1]
 800d19c:	4618      	mov	r0, r3
 800d19e:	460d      	mov	r5, r1
 800d1a0:	e7b1      	b.n	800d106 <_strtod_l+0x1d6>
 800d1a2:	f04f 0900 	mov.w	r9, #0
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e77d      	b.n	800d0a6 <_strtod_l+0x176>
 800d1aa:	f04f 0c00 	mov.w	ip, #0
 800d1ae:	1ca2      	adds	r2, r4, #2
 800d1b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1b2:	78a2      	ldrb	r2, [r4, #2]
 800d1b4:	e785      	b.n	800d0c2 <_strtod_l+0x192>
 800d1b6:	f04f 0c01 	mov.w	ip, #1
 800d1ba:	e7f8      	b.n	800d1ae <_strtod_l+0x27e>
 800d1bc:	0800f270 	.word	0x0800f270
 800d1c0:	0800f258 	.word	0x0800f258
 800d1c4:	7ff00000 	.word	0x7ff00000
 800d1c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1ca:	1c51      	adds	r1, r2, #1
 800d1cc:	9119      	str	r1, [sp, #100]	@ 0x64
 800d1ce:	7852      	ldrb	r2, [r2, #1]
 800d1d0:	2a30      	cmp	r2, #48	@ 0x30
 800d1d2:	d0f9      	beq.n	800d1c8 <_strtod_l+0x298>
 800d1d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d1d8:	2908      	cmp	r1, #8
 800d1da:	f63f af78 	bhi.w	800d0ce <_strtod_l+0x19e>
 800d1de:	3a30      	subs	r2, #48	@ 0x30
 800d1e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1e6:	f04f 080a 	mov.w	r8, #10
 800d1ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1ec:	1c56      	adds	r6, r2, #1
 800d1ee:	9619      	str	r6, [sp, #100]	@ 0x64
 800d1f0:	7852      	ldrb	r2, [r2, #1]
 800d1f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d1f6:	f1be 0f09 	cmp.w	lr, #9
 800d1fa:	d939      	bls.n	800d270 <_strtod_l+0x340>
 800d1fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d1fe:	1a76      	subs	r6, r6, r1
 800d200:	2e08      	cmp	r6, #8
 800d202:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d206:	dc03      	bgt.n	800d210 <_strtod_l+0x2e0>
 800d208:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d20a:	4588      	cmp	r8, r1
 800d20c:	bfa8      	it	ge
 800d20e:	4688      	movge	r8, r1
 800d210:	f1bc 0f00 	cmp.w	ip, #0
 800d214:	d001      	beq.n	800d21a <_strtod_l+0x2ea>
 800d216:	f1c8 0800 	rsb	r8, r8, #0
 800d21a:	2d00      	cmp	r5, #0
 800d21c:	d14e      	bne.n	800d2bc <_strtod_l+0x38c>
 800d21e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d220:	4308      	orrs	r0, r1
 800d222:	f47f aebe 	bne.w	800cfa2 <_strtod_l+0x72>
 800d226:	2b00      	cmp	r3, #0
 800d228:	f47f aed6 	bne.w	800cfd8 <_strtod_l+0xa8>
 800d22c:	2a69      	cmp	r2, #105	@ 0x69
 800d22e:	d028      	beq.n	800d282 <_strtod_l+0x352>
 800d230:	dc25      	bgt.n	800d27e <_strtod_l+0x34e>
 800d232:	2a49      	cmp	r2, #73	@ 0x49
 800d234:	d025      	beq.n	800d282 <_strtod_l+0x352>
 800d236:	2a4e      	cmp	r2, #78	@ 0x4e
 800d238:	f47f aece 	bne.w	800cfd8 <_strtod_l+0xa8>
 800d23c:	499b      	ldr	r1, [pc, #620]	@ (800d4ac <_strtod_l+0x57c>)
 800d23e:	a819      	add	r0, sp, #100	@ 0x64
 800d240:	f001 f9e2 	bl	800e608 <__match>
 800d244:	2800      	cmp	r0, #0
 800d246:	f43f aec7 	beq.w	800cfd8 <_strtod_l+0xa8>
 800d24a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b28      	cmp	r3, #40	@ 0x28
 800d250:	d12e      	bne.n	800d2b0 <_strtod_l+0x380>
 800d252:	4997      	ldr	r1, [pc, #604]	@ (800d4b0 <_strtod_l+0x580>)
 800d254:	aa1c      	add	r2, sp, #112	@ 0x70
 800d256:	a819      	add	r0, sp, #100	@ 0x64
 800d258:	f001 f9ea 	bl	800e630 <__hexnan>
 800d25c:	2805      	cmp	r0, #5
 800d25e:	d127      	bne.n	800d2b0 <_strtod_l+0x380>
 800d260:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d262:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d266:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d26a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d26e:	e698      	b.n	800cfa2 <_strtod_l+0x72>
 800d270:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d272:	fb08 2101 	mla	r1, r8, r1, r2
 800d276:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d27a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d27c:	e7b5      	b.n	800d1ea <_strtod_l+0x2ba>
 800d27e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d280:	e7da      	b.n	800d238 <_strtod_l+0x308>
 800d282:	498c      	ldr	r1, [pc, #560]	@ (800d4b4 <_strtod_l+0x584>)
 800d284:	a819      	add	r0, sp, #100	@ 0x64
 800d286:	f001 f9bf 	bl	800e608 <__match>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	f43f aea4 	beq.w	800cfd8 <_strtod_l+0xa8>
 800d290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d292:	4989      	ldr	r1, [pc, #548]	@ (800d4b8 <_strtod_l+0x588>)
 800d294:	3b01      	subs	r3, #1
 800d296:	a819      	add	r0, sp, #100	@ 0x64
 800d298:	9319      	str	r3, [sp, #100]	@ 0x64
 800d29a:	f001 f9b5 	bl	800e608 <__match>
 800d29e:	b910      	cbnz	r0, 800d2a6 <_strtod_l+0x376>
 800d2a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d4c8 <_strtod_l+0x598>
 800d2aa:	f04f 0a00 	mov.w	sl, #0
 800d2ae:	e678      	b.n	800cfa2 <_strtod_l+0x72>
 800d2b0:	4882      	ldr	r0, [pc, #520]	@ (800d4bc <_strtod_l+0x58c>)
 800d2b2:	f000 fee5 	bl	800e080 <nan>
 800d2b6:	ec5b ab10 	vmov	sl, fp, d0
 800d2ba:	e672      	b.n	800cfa2 <_strtod_l+0x72>
 800d2bc:	eba8 0309 	sub.w	r3, r8, r9
 800d2c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c4:	2f00      	cmp	r7, #0
 800d2c6:	bf08      	it	eq
 800d2c8:	462f      	moveq	r7, r5
 800d2ca:	2d10      	cmp	r5, #16
 800d2cc:	462c      	mov	r4, r5
 800d2ce:	bfa8      	it	ge
 800d2d0:	2410      	movge	r4, #16
 800d2d2:	f7f3 f947 	bl	8000564 <__aeabi_ui2d>
 800d2d6:	2d09      	cmp	r5, #9
 800d2d8:	4682      	mov	sl, r0
 800d2da:	468b      	mov	fp, r1
 800d2dc:	dc13      	bgt.n	800d306 <_strtod_l+0x3d6>
 800d2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f43f ae5e 	beq.w	800cfa2 <_strtod_l+0x72>
 800d2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e8:	dd78      	ble.n	800d3dc <_strtod_l+0x4ac>
 800d2ea:	2b16      	cmp	r3, #22
 800d2ec:	dc5f      	bgt.n	800d3ae <_strtod_l+0x47e>
 800d2ee:	4974      	ldr	r1, [pc, #464]	@ (800d4c0 <_strtod_l+0x590>)
 800d2f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2f8:	4652      	mov	r2, sl
 800d2fa:	465b      	mov	r3, fp
 800d2fc:	f7f3 f9ac 	bl	8000658 <__aeabi_dmul>
 800d300:	4682      	mov	sl, r0
 800d302:	468b      	mov	fp, r1
 800d304:	e64d      	b.n	800cfa2 <_strtod_l+0x72>
 800d306:	4b6e      	ldr	r3, [pc, #440]	@ (800d4c0 <_strtod_l+0x590>)
 800d308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d30c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d310:	f7f3 f9a2 	bl	8000658 <__aeabi_dmul>
 800d314:	4682      	mov	sl, r0
 800d316:	9808      	ldr	r0, [sp, #32]
 800d318:	468b      	mov	fp, r1
 800d31a:	f7f3 f923 	bl	8000564 <__aeabi_ui2d>
 800d31e:	4602      	mov	r2, r0
 800d320:	460b      	mov	r3, r1
 800d322:	4650      	mov	r0, sl
 800d324:	4659      	mov	r1, fp
 800d326:	f7f2 ffe1 	bl	80002ec <__adddf3>
 800d32a:	2d0f      	cmp	r5, #15
 800d32c:	4682      	mov	sl, r0
 800d32e:	468b      	mov	fp, r1
 800d330:	ddd5      	ble.n	800d2de <_strtod_l+0x3ae>
 800d332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d334:	1b2c      	subs	r4, r5, r4
 800d336:	441c      	add	r4, r3
 800d338:	2c00      	cmp	r4, #0
 800d33a:	f340 8096 	ble.w	800d46a <_strtod_l+0x53a>
 800d33e:	f014 030f 	ands.w	r3, r4, #15
 800d342:	d00a      	beq.n	800d35a <_strtod_l+0x42a>
 800d344:	495e      	ldr	r1, [pc, #376]	@ (800d4c0 <_strtod_l+0x590>)
 800d346:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d34a:	4652      	mov	r2, sl
 800d34c:	465b      	mov	r3, fp
 800d34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d352:	f7f3 f981 	bl	8000658 <__aeabi_dmul>
 800d356:	4682      	mov	sl, r0
 800d358:	468b      	mov	fp, r1
 800d35a:	f034 040f 	bics.w	r4, r4, #15
 800d35e:	d073      	beq.n	800d448 <_strtod_l+0x518>
 800d360:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d364:	dd48      	ble.n	800d3f8 <_strtod_l+0x4c8>
 800d366:	2400      	movs	r4, #0
 800d368:	46a0      	mov	r8, r4
 800d36a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d36c:	46a1      	mov	r9, r4
 800d36e:	9a05      	ldr	r2, [sp, #20]
 800d370:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d4c8 <_strtod_l+0x598>
 800d374:	2322      	movs	r3, #34	@ 0x22
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	f04f 0a00 	mov.w	sl, #0
 800d37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f43f ae0f 	beq.w	800cfa2 <_strtod_l+0x72>
 800d384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d386:	9805      	ldr	r0, [sp, #20]
 800d388:	f7ff f942 	bl	800c610 <_Bfree>
 800d38c:	9805      	ldr	r0, [sp, #20]
 800d38e:	4649      	mov	r1, r9
 800d390:	f7ff f93e 	bl	800c610 <_Bfree>
 800d394:	9805      	ldr	r0, [sp, #20]
 800d396:	4641      	mov	r1, r8
 800d398:	f7ff f93a 	bl	800c610 <_Bfree>
 800d39c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d39e:	9805      	ldr	r0, [sp, #20]
 800d3a0:	f7ff f936 	bl	800c610 <_Bfree>
 800d3a4:	9805      	ldr	r0, [sp, #20]
 800d3a6:	4621      	mov	r1, r4
 800d3a8:	f7ff f932 	bl	800c610 <_Bfree>
 800d3ac:	e5f9      	b.n	800cfa2 <_strtod_l+0x72>
 800d3ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	dbbc      	blt.n	800d332 <_strtod_l+0x402>
 800d3b8:	4c41      	ldr	r4, [pc, #260]	@ (800d4c0 <_strtod_l+0x590>)
 800d3ba:	f1c5 050f 	rsb	r5, r5, #15
 800d3be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d3c2:	4652      	mov	r2, sl
 800d3c4:	465b      	mov	r3, fp
 800d3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3ca:	f7f3 f945 	bl	8000658 <__aeabi_dmul>
 800d3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d0:	1b5d      	subs	r5, r3, r5
 800d3d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d3d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d3da:	e78f      	b.n	800d2fc <_strtod_l+0x3cc>
 800d3dc:	3316      	adds	r3, #22
 800d3de:	dba8      	blt.n	800d332 <_strtod_l+0x402>
 800d3e0:	4b37      	ldr	r3, [pc, #220]	@ (800d4c0 <_strtod_l+0x590>)
 800d3e2:	eba9 0808 	sub.w	r8, r9, r8
 800d3e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d3ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d3ee:	4650      	mov	r0, sl
 800d3f0:	4659      	mov	r1, fp
 800d3f2:	f7f3 fa5b 	bl	80008ac <__aeabi_ddiv>
 800d3f6:	e783      	b.n	800d300 <_strtod_l+0x3d0>
 800d3f8:	4b32      	ldr	r3, [pc, #200]	@ (800d4c4 <_strtod_l+0x594>)
 800d3fa:	9308      	str	r3, [sp, #32]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	1124      	asrs	r4, r4, #4
 800d400:	4650      	mov	r0, sl
 800d402:	4659      	mov	r1, fp
 800d404:	461e      	mov	r6, r3
 800d406:	2c01      	cmp	r4, #1
 800d408:	dc21      	bgt.n	800d44e <_strtod_l+0x51e>
 800d40a:	b10b      	cbz	r3, 800d410 <_strtod_l+0x4e0>
 800d40c:	4682      	mov	sl, r0
 800d40e:	468b      	mov	fp, r1
 800d410:	492c      	ldr	r1, [pc, #176]	@ (800d4c4 <_strtod_l+0x594>)
 800d412:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d416:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d41a:	4652      	mov	r2, sl
 800d41c:	465b      	mov	r3, fp
 800d41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d422:	f7f3 f919 	bl	8000658 <__aeabi_dmul>
 800d426:	4b28      	ldr	r3, [pc, #160]	@ (800d4c8 <_strtod_l+0x598>)
 800d428:	460a      	mov	r2, r1
 800d42a:	400b      	ands	r3, r1
 800d42c:	4927      	ldr	r1, [pc, #156]	@ (800d4cc <_strtod_l+0x59c>)
 800d42e:	428b      	cmp	r3, r1
 800d430:	4682      	mov	sl, r0
 800d432:	d898      	bhi.n	800d366 <_strtod_l+0x436>
 800d434:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d438:	428b      	cmp	r3, r1
 800d43a:	bf86      	itte	hi
 800d43c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d4d0 <_strtod_l+0x5a0>
 800d440:	f04f 3aff 	movhi.w	sl, #4294967295
 800d444:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d448:	2300      	movs	r3, #0
 800d44a:	9308      	str	r3, [sp, #32]
 800d44c:	e07a      	b.n	800d544 <_strtod_l+0x614>
 800d44e:	07e2      	lsls	r2, r4, #31
 800d450:	d505      	bpl.n	800d45e <_strtod_l+0x52e>
 800d452:	9b08      	ldr	r3, [sp, #32]
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	f7f3 f8fe 	bl	8000658 <__aeabi_dmul>
 800d45c:	2301      	movs	r3, #1
 800d45e:	9a08      	ldr	r2, [sp, #32]
 800d460:	3208      	adds	r2, #8
 800d462:	3601      	adds	r6, #1
 800d464:	1064      	asrs	r4, r4, #1
 800d466:	9208      	str	r2, [sp, #32]
 800d468:	e7cd      	b.n	800d406 <_strtod_l+0x4d6>
 800d46a:	d0ed      	beq.n	800d448 <_strtod_l+0x518>
 800d46c:	4264      	negs	r4, r4
 800d46e:	f014 020f 	ands.w	r2, r4, #15
 800d472:	d00a      	beq.n	800d48a <_strtod_l+0x55a>
 800d474:	4b12      	ldr	r3, [pc, #72]	@ (800d4c0 <_strtod_l+0x590>)
 800d476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d47a:	4650      	mov	r0, sl
 800d47c:	4659      	mov	r1, fp
 800d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d482:	f7f3 fa13 	bl	80008ac <__aeabi_ddiv>
 800d486:	4682      	mov	sl, r0
 800d488:	468b      	mov	fp, r1
 800d48a:	1124      	asrs	r4, r4, #4
 800d48c:	d0dc      	beq.n	800d448 <_strtod_l+0x518>
 800d48e:	2c1f      	cmp	r4, #31
 800d490:	dd20      	ble.n	800d4d4 <_strtod_l+0x5a4>
 800d492:	2400      	movs	r4, #0
 800d494:	46a0      	mov	r8, r4
 800d496:	940a      	str	r4, [sp, #40]	@ 0x28
 800d498:	46a1      	mov	r9, r4
 800d49a:	9a05      	ldr	r2, [sp, #20]
 800d49c:	2322      	movs	r3, #34	@ 0x22
 800d49e:	f04f 0a00 	mov.w	sl, #0
 800d4a2:	f04f 0b00 	mov.w	fp, #0
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	e768      	b.n	800d37c <_strtod_l+0x44c>
 800d4aa:	bf00      	nop
 800d4ac:	0800f049 	.word	0x0800f049
 800d4b0:	0800f25c 	.word	0x0800f25c
 800d4b4:	0800f041 	.word	0x0800f041
 800d4b8:	0800f078 	.word	0x0800f078
 800d4bc:	0800f405 	.word	0x0800f405
 800d4c0:	0800f190 	.word	0x0800f190
 800d4c4:	0800f168 	.word	0x0800f168
 800d4c8:	7ff00000 	.word	0x7ff00000
 800d4cc:	7ca00000 	.word	0x7ca00000
 800d4d0:	7fefffff 	.word	0x7fefffff
 800d4d4:	f014 0310 	ands.w	r3, r4, #16
 800d4d8:	bf18      	it	ne
 800d4da:	236a      	movne	r3, #106	@ 0x6a
 800d4dc:	4ea9      	ldr	r6, [pc, #676]	@ (800d784 <_strtod_l+0x854>)
 800d4de:	9308      	str	r3, [sp, #32]
 800d4e0:	4650      	mov	r0, sl
 800d4e2:	4659      	mov	r1, fp
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	07e2      	lsls	r2, r4, #31
 800d4e8:	d504      	bpl.n	800d4f4 <_strtod_l+0x5c4>
 800d4ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4ee:	f7f3 f8b3 	bl	8000658 <__aeabi_dmul>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	1064      	asrs	r4, r4, #1
 800d4f6:	f106 0608 	add.w	r6, r6, #8
 800d4fa:	d1f4      	bne.n	800d4e6 <_strtod_l+0x5b6>
 800d4fc:	b10b      	cbz	r3, 800d502 <_strtod_l+0x5d2>
 800d4fe:	4682      	mov	sl, r0
 800d500:	468b      	mov	fp, r1
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	b1b3      	cbz	r3, 800d534 <_strtod_l+0x604>
 800d506:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d50a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d50e:	2b00      	cmp	r3, #0
 800d510:	4659      	mov	r1, fp
 800d512:	dd0f      	ble.n	800d534 <_strtod_l+0x604>
 800d514:	2b1f      	cmp	r3, #31
 800d516:	dd55      	ble.n	800d5c4 <_strtod_l+0x694>
 800d518:	2b34      	cmp	r3, #52	@ 0x34
 800d51a:	bfde      	ittt	le
 800d51c:	f04f 33ff 	movle.w	r3, #4294967295
 800d520:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d524:	4093      	lslle	r3, r2
 800d526:	f04f 0a00 	mov.w	sl, #0
 800d52a:	bfcc      	ite	gt
 800d52c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d530:	ea03 0b01 	andle.w	fp, r3, r1
 800d534:	2200      	movs	r2, #0
 800d536:	2300      	movs	r3, #0
 800d538:	4650      	mov	r0, sl
 800d53a:	4659      	mov	r1, fp
 800d53c:	f7f3 faf4 	bl	8000b28 <__aeabi_dcmpeq>
 800d540:	2800      	cmp	r0, #0
 800d542:	d1a6      	bne.n	800d492 <_strtod_l+0x562>
 800d544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d54a:	9805      	ldr	r0, [sp, #20]
 800d54c:	462b      	mov	r3, r5
 800d54e:	463a      	mov	r2, r7
 800d550:	f7ff f8c6 	bl	800c6e0 <__s2b>
 800d554:	900a      	str	r0, [sp, #40]	@ 0x28
 800d556:	2800      	cmp	r0, #0
 800d558:	f43f af05 	beq.w	800d366 <_strtod_l+0x436>
 800d55c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d55e:	2a00      	cmp	r2, #0
 800d560:	eba9 0308 	sub.w	r3, r9, r8
 800d564:	bfa8      	it	ge
 800d566:	2300      	movge	r3, #0
 800d568:	9312      	str	r3, [sp, #72]	@ 0x48
 800d56a:	2400      	movs	r4, #0
 800d56c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d570:	9316      	str	r3, [sp, #88]	@ 0x58
 800d572:	46a0      	mov	r8, r4
 800d574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d576:	9805      	ldr	r0, [sp, #20]
 800d578:	6859      	ldr	r1, [r3, #4]
 800d57a:	f7ff f809 	bl	800c590 <_Balloc>
 800d57e:	4681      	mov	r9, r0
 800d580:	2800      	cmp	r0, #0
 800d582:	f43f aef4 	beq.w	800d36e <_strtod_l+0x43e>
 800d586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d588:	691a      	ldr	r2, [r3, #16]
 800d58a:	3202      	adds	r2, #2
 800d58c:	f103 010c 	add.w	r1, r3, #12
 800d590:	0092      	lsls	r2, r2, #2
 800d592:	300c      	adds	r0, #12
 800d594:	f7fe f89b 	bl	800b6ce <memcpy>
 800d598:	ec4b ab10 	vmov	d0, sl, fp
 800d59c:	9805      	ldr	r0, [sp, #20]
 800d59e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d5a0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d5a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d5a6:	f7ff fbd7 	bl	800cd58 <__d2b>
 800d5aa:	901a      	str	r0, [sp, #104]	@ 0x68
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	f43f aede 	beq.w	800d36e <_strtod_l+0x43e>
 800d5b2:	9805      	ldr	r0, [sp, #20]
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	f7ff f929 	bl	800c80c <__i2b>
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	b948      	cbnz	r0, 800d5d2 <_strtod_l+0x6a2>
 800d5be:	f04f 0800 	mov.w	r8, #0
 800d5c2:	e6d4      	b.n	800d36e <_strtod_l+0x43e>
 800d5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5cc:	ea03 0a0a 	and.w	sl, r3, sl
 800d5d0:	e7b0      	b.n	800d534 <_strtod_l+0x604>
 800d5d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d5d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d5d6:	2d00      	cmp	r5, #0
 800d5d8:	bfab      	itete	ge
 800d5da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d5dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d5de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d5e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d5e2:	bfac      	ite	ge
 800d5e4:	18ef      	addge	r7, r5, r3
 800d5e6:	1b5e      	sublt	r6, r3, r5
 800d5e8:	9b08      	ldr	r3, [sp, #32]
 800d5ea:	1aed      	subs	r5, r5, r3
 800d5ec:	4415      	add	r5, r2
 800d5ee:	4b66      	ldr	r3, [pc, #408]	@ (800d788 <_strtod_l+0x858>)
 800d5f0:	3d01      	subs	r5, #1
 800d5f2:	429d      	cmp	r5, r3
 800d5f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d5f8:	da50      	bge.n	800d69c <_strtod_l+0x76c>
 800d5fa:	1b5b      	subs	r3, r3, r5
 800d5fc:	2b1f      	cmp	r3, #31
 800d5fe:	eba2 0203 	sub.w	r2, r2, r3
 800d602:	f04f 0101 	mov.w	r1, #1
 800d606:	dc3d      	bgt.n	800d684 <_strtod_l+0x754>
 800d608:	fa01 f303 	lsl.w	r3, r1, r3
 800d60c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d60e:	2300      	movs	r3, #0
 800d610:	9310      	str	r3, [sp, #64]	@ 0x40
 800d612:	18bd      	adds	r5, r7, r2
 800d614:	9b08      	ldr	r3, [sp, #32]
 800d616:	42af      	cmp	r7, r5
 800d618:	4416      	add	r6, r2
 800d61a:	441e      	add	r6, r3
 800d61c:	463b      	mov	r3, r7
 800d61e:	bfa8      	it	ge
 800d620:	462b      	movge	r3, r5
 800d622:	42b3      	cmp	r3, r6
 800d624:	bfa8      	it	ge
 800d626:	4633      	movge	r3, r6
 800d628:	2b00      	cmp	r3, #0
 800d62a:	bfc2      	ittt	gt
 800d62c:	1aed      	subgt	r5, r5, r3
 800d62e:	1af6      	subgt	r6, r6, r3
 800d630:	1aff      	subgt	r7, r7, r3
 800d632:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d634:	2b00      	cmp	r3, #0
 800d636:	dd16      	ble.n	800d666 <_strtod_l+0x736>
 800d638:	4641      	mov	r1, r8
 800d63a:	9805      	ldr	r0, [sp, #20]
 800d63c:	461a      	mov	r2, r3
 800d63e:	f7ff f9a5 	bl	800c98c <__pow5mult>
 800d642:	4680      	mov	r8, r0
 800d644:	2800      	cmp	r0, #0
 800d646:	d0ba      	beq.n	800d5be <_strtod_l+0x68e>
 800d648:	4601      	mov	r1, r0
 800d64a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d64c:	9805      	ldr	r0, [sp, #20]
 800d64e:	f7ff f8f3 	bl	800c838 <__multiply>
 800d652:	900e      	str	r0, [sp, #56]	@ 0x38
 800d654:	2800      	cmp	r0, #0
 800d656:	f43f ae8a 	beq.w	800d36e <_strtod_l+0x43e>
 800d65a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d65c:	9805      	ldr	r0, [sp, #20]
 800d65e:	f7fe ffd7 	bl	800c610 <_Bfree>
 800d662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d664:	931a      	str	r3, [sp, #104]	@ 0x68
 800d666:	2d00      	cmp	r5, #0
 800d668:	dc1d      	bgt.n	800d6a6 <_strtod_l+0x776>
 800d66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	dd23      	ble.n	800d6b8 <_strtod_l+0x788>
 800d670:	4649      	mov	r1, r9
 800d672:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d674:	9805      	ldr	r0, [sp, #20]
 800d676:	f7ff f989 	bl	800c98c <__pow5mult>
 800d67a:	4681      	mov	r9, r0
 800d67c:	b9e0      	cbnz	r0, 800d6b8 <_strtod_l+0x788>
 800d67e:	f04f 0900 	mov.w	r9, #0
 800d682:	e674      	b.n	800d36e <_strtod_l+0x43e>
 800d684:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d688:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d68c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d690:	35e2      	adds	r5, #226	@ 0xe2
 800d692:	fa01 f305 	lsl.w	r3, r1, r5
 800d696:	9310      	str	r3, [sp, #64]	@ 0x40
 800d698:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d69a:	e7ba      	b.n	800d612 <_strtod_l+0x6e2>
 800d69c:	2300      	movs	r3, #0
 800d69e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d6a4:	e7b5      	b.n	800d612 <_strtod_l+0x6e2>
 800d6a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6a8:	9805      	ldr	r0, [sp, #20]
 800d6aa:	462a      	mov	r2, r5
 800d6ac:	f7ff f9c8 	bl	800ca40 <__lshift>
 800d6b0:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d1d9      	bne.n	800d66a <_strtod_l+0x73a>
 800d6b6:	e65a      	b.n	800d36e <_strtod_l+0x43e>
 800d6b8:	2e00      	cmp	r6, #0
 800d6ba:	dd07      	ble.n	800d6cc <_strtod_l+0x79c>
 800d6bc:	4649      	mov	r1, r9
 800d6be:	9805      	ldr	r0, [sp, #20]
 800d6c0:	4632      	mov	r2, r6
 800d6c2:	f7ff f9bd 	bl	800ca40 <__lshift>
 800d6c6:	4681      	mov	r9, r0
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d0d8      	beq.n	800d67e <_strtod_l+0x74e>
 800d6cc:	2f00      	cmp	r7, #0
 800d6ce:	dd08      	ble.n	800d6e2 <_strtod_l+0x7b2>
 800d6d0:	4641      	mov	r1, r8
 800d6d2:	9805      	ldr	r0, [sp, #20]
 800d6d4:	463a      	mov	r2, r7
 800d6d6:	f7ff f9b3 	bl	800ca40 <__lshift>
 800d6da:	4680      	mov	r8, r0
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f43f ae46 	beq.w	800d36e <_strtod_l+0x43e>
 800d6e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6e4:	9805      	ldr	r0, [sp, #20]
 800d6e6:	464a      	mov	r2, r9
 800d6e8:	f7ff fa32 	bl	800cb50 <__mdiff>
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	f43f ae3d 	beq.w	800d36e <_strtod_l+0x43e>
 800d6f4:	68c3      	ldr	r3, [r0, #12]
 800d6f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	60c3      	str	r3, [r0, #12]
 800d6fc:	4641      	mov	r1, r8
 800d6fe:	f7ff fa0b 	bl	800cb18 <__mcmp>
 800d702:	2800      	cmp	r0, #0
 800d704:	da46      	bge.n	800d794 <_strtod_l+0x864>
 800d706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d708:	ea53 030a 	orrs.w	r3, r3, sl
 800d70c:	d16c      	bne.n	800d7e8 <_strtod_l+0x8b8>
 800d70e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d712:	2b00      	cmp	r3, #0
 800d714:	d168      	bne.n	800d7e8 <_strtod_l+0x8b8>
 800d716:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d71a:	0d1b      	lsrs	r3, r3, #20
 800d71c:	051b      	lsls	r3, r3, #20
 800d71e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d722:	d961      	bls.n	800d7e8 <_strtod_l+0x8b8>
 800d724:	6963      	ldr	r3, [r4, #20]
 800d726:	b913      	cbnz	r3, 800d72e <_strtod_l+0x7fe>
 800d728:	6923      	ldr	r3, [r4, #16]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	dd5c      	ble.n	800d7e8 <_strtod_l+0x8b8>
 800d72e:	4621      	mov	r1, r4
 800d730:	2201      	movs	r2, #1
 800d732:	9805      	ldr	r0, [sp, #20]
 800d734:	f7ff f984 	bl	800ca40 <__lshift>
 800d738:	4641      	mov	r1, r8
 800d73a:	4604      	mov	r4, r0
 800d73c:	f7ff f9ec 	bl	800cb18 <__mcmp>
 800d740:	2800      	cmp	r0, #0
 800d742:	dd51      	ble.n	800d7e8 <_strtod_l+0x8b8>
 800d744:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d748:	9a08      	ldr	r2, [sp, #32]
 800d74a:	0d1b      	lsrs	r3, r3, #20
 800d74c:	051b      	lsls	r3, r3, #20
 800d74e:	2a00      	cmp	r2, #0
 800d750:	d06b      	beq.n	800d82a <_strtod_l+0x8fa>
 800d752:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d756:	d868      	bhi.n	800d82a <_strtod_l+0x8fa>
 800d758:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d75c:	f67f ae9d 	bls.w	800d49a <_strtod_l+0x56a>
 800d760:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <_strtod_l+0x85c>)
 800d762:	4650      	mov	r0, sl
 800d764:	4659      	mov	r1, fp
 800d766:	2200      	movs	r2, #0
 800d768:	f7f2 ff76 	bl	8000658 <__aeabi_dmul>
 800d76c:	4b08      	ldr	r3, [pc, #32]	@ (800d790 <_strtod_l+0x860>)
 800d76e:	400b      	ands	r3, r1
 800d770:	4682      	mov	sl, r0
 800d772:	468b      	mov	fp, r1
 800d774:	2b00      	cmp	r3, #0
 800d776:	f47f ae05 	bne.w	800d384 <_strtod_l+0x454>
 800d77a:	9a05      	ldr	r2, [sp, #20]
 800d77c:	2322      	movs	r3, #34	@ 0x22
 800d77e:	6013      	str	r3, [r2, #0]
 800d780:	e600      	b.n	800d384 <_strtod_l+0x454>
 800d782:	bf00      	nop
 800d784:	0800f288 	.word	0x0800f288
 800d788:	fffffc02 	.word	0xfffffc02
 800d78c:	39500000 	.word	0x39500000
 800d790:	7ff00000 	.word	0x7ff00000
 800d794:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d798:	d165      	bne.n	800d866 <_strtod_l+0x936>
 800d79a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d79c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a0:	b35a      	cbz	r2, 800d7fa <_strtod_l+0x8ca>
 800d7a2:	4a9f      	ldr	r2, [pc, #636]	@ (800da20 <_strtod_l+0xaf0>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d12b      	bne.n	800d800 <_strtod_l+0x8d0>
 800d7a8:	9b08      	ldr	r3, [sp, #32]
 800d7aa:	4651      	mov	r1, sl
 800d7ac:	b303      	cbz	r3, 800d7f0 <_strtod_l+0x8c0>
 800d7ae:	4b9d      	ldr	r3, [pc, #628]	@ (800da24 <_strtod_l+0xaf4>)
 800d7b0:	465a      	mov	r2, fp
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7bc:	d81b      	bhi.n	800d7f6 <_strtod_l+0x8c6>
 800d7be:	0d1b      	lsrs	r3, r3, #20
 800d7c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c8:	4299      	cmp	r1, r3
 800d7ca:	d119      	bne.n	800d800 <_strtod_l+0x8d0>
 800d7cc:	4b96      	ldr	r3, [pc, #600]	@ (800da28 <_strtod_l+0xaf8>)
 800d7ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d102      	bne.n	800d7da <_strtod_l+0x8aa>
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	f43f adca 	beq.w	800d36e <_strtod_l+0x43e>
 800d7da:	4b92      	ldr	r3, [pc, #584]	@ (800da24 <_strtod_l+0xaf4>)
 800d7dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7de:	401a      	ands	r2, r3
 800d7e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d7e4:	f04f 0a00 	mov.w	sl, #0
 800d7e8:	9b08      	ldr	r3, [sp, #32]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1b8      	bne.n	800d760 <_strtod_l+0x830>
 800d7ee:	e5c9      	b.n	800d384 <_strtod_l+0x454>
 800d7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f4:	e7e8      	b.n	800d7c8 <_strtod_l+0x898>
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	e7e6      	b.n	800d7c8 <_strtod_l+0x898>
 800d7fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d7fe:	d0a1      	beq.n	800d744 <_strtod_l+0x814>
 800d800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d802:	b1db      	cbz	r3, 800d83c <_strtod_l+0x90c>
 800d804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d806:	4213      	tst	r3, r2
 800d808:	d0ee      	beq.n	800d7e8 <_strtod_l+0x8b8>
 800d80a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d80c:	9a08      	ldr	r2, [sp, #32]
 800d80e:	4650      	mov	r0, sl
 800d810:	4659      	mov	r1, fp
 800d812:	b1bb      	cbz	r3, 800d844 <_strtod_l+0x914>
 800d814:	f7ff fb6e 	bl	800cef4 <sulp>
 800d818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d81c:	ec53 2b10 	vmov	r2, r3, d0
 800d820:	f7f2 fd64 	bl	80002ec <__adddf3>
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	e7de      	b.n	800d7e8 <_strtod_l+0x8b8>
 800d82a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d82e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d832:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d836:	f04f 3aff 	mov.w	sl, #4294967295
 800d83a:	e7d5      	b.n	800d7e8 <_strtod_l+0x8b8>
 800d83c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d83e:	ea13 0f0a 	tst.w	r3, sl
 800d842:	e7e1      	b.n	800d808 <_strtod_l+0x8d8>
 800d844:	f7ff fb56 	bl	800cef4 <sulp>
 800d848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d84c:	ec53 2b10 	vmov	r2, r3, d0
 800d850:	f7f2 fd4a 	bl	80002e8 <__aeabi_dsub>
 800d854:	2200      	movs	r2, #0
 800d856:	2300      	movs	r3, #0
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	f7f3 f964 	bl	8000b28 <__aeabi_dcmpeq>
 800d860:	2800      	cmp	r0, #0
 800d862:	d0c1      	beq.n	800d7e8 <_strtod_l+0x8b8>
 800d864:	e619      	b.n	800d49a <_strtod_l+0x56a>
 800d866:	4641      	mov	r1, r8
 800d868:	4620      	mov	r0, r4
 800d86a:	f7ff facd 	bl	800ce08 <__ratio>
 800d86e:	ec57 6b10 	vmov	r6, r7, d0
 800d872:	2200      	movs	r2, #0
 800d874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f3 f968 	bl	8000b50 <__aeabi_dcmple>
 800d880:	2800      	cmp	r0, #0
 800d882:	d06f      	beq.n	800d964 <_strtod_l+0xa34>
 800d884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d886:	2b00      	cmp	r3, #0
 800d888:	d17a      	bne.n	800d980 <_strtod_l+0xa50>
 800d88a:	f1ba 0f00 	cmp.w	sl, #0
 800d88e:	d158      	bne.n	800d942 <_strtod_l+0xa12>
 800d890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d896:	2b00      	cmp	r3, #0
 800d898:	d15a      	bne.n	800d950 <_strtod_l+0xa20>
 800d89a:	4b64      	ldr	r3, [pc, #400]	@ (800da2c <_strtod_l+0xafc>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	4630      	mov	r0, r6
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	f7f3 f94b 	bl	8000b3c <__aeabi_dcmplt>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d159      	bne.n	800d95e <_strtod_l+0xa2e>
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	4b60      	ldr	r3, [pc, #384]	@ (800da30 <_strtod_l+0xb00>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f7f2 fed1 	bl	8000658 <__aeabi_dmul>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d8be:	9606      	str	r6, [sp, #24]
 800d8c0:	9307      	str	r3, [sp, #28]
 800d8c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8c6:	4d57      	ldr	r5, [pc, #348]	@ (800da24 <_strtod_l+0xaf4>)
 800d8c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d8cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8ce:	401d      	ands	r5, r3
 800d8d0:	4b58      	ldr	r3, [pc, #352]	@ (800da34 <_strtod_l+0xb04>)
 800d8d2:	429d      	cmp	r5, r3
 800d8d4:	f040 80b2 	bne.w	800da3c <_strtod_l+0xb0c>
 800d8d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d8de:	ec4b ab10 	vmov	d0, sl, fp
 800d8e2:	f7ff f9c9 	bl	800cc78 <__ulp>
 800d8e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8ea:	ec51 0b10 	vmov	r0, r1, d0
 800d8ee:	f7f2 feb3 	bl	8000658 <__aeabi_dmul>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	f7f2 fcf9 	bl	80002ec <__adddf3>
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	4949      	ldr	r1, [pc, #292]	@ (800da24 <_strtod_l+0xaf4>)
 800d8fe:	4a4e      	ldr	r2, [pc, #312]	@ (800da38 <_strtod_l+0xb08>)
 800d900:	4019      	ands	r1, r3
 800d902:	4291      	cmp	r1, r2
 800d904:	4682      	mov	sl, r0
 800d906:	d942      	bls.n	800d98e <_strtod_l+0xa5e>
 800d908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d90a:	4b47      	ldr	r3, [pc, #284]	@ (800da28 <_strtod_l+0xaf8>)
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d103      	bne.n	800d918 <_strtod_l+0x9e8>
 800d910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d912:	3301      	adds	r3, #1
 800d914:	f43f ad2b 	beq.w	800d36e <_strtod_l+0x43e>
 800d918:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800da28 <_strtod_l+0xaf8>
 800d91c:	f04f 3aff 	mov.w	sl, #4294967295
 800d920:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d922:	9805      	ldr	r0, [sp, #20]
 800d924:	f7fe fe74 	bl	800c610 <_Bfree>
 800d928:	9805      	ldr	r0, [sp, #20]
 800d92a:	4649      	mov	r1, r9
 800d92c:	f7fe fe70 	bl	800c610 <_Bfree>
 800d930:	9805      	ldr	r0, [sp, #20]
 800d932:	4641      	mov	r1, r8
 800d934:	f7fe fe6c 	bl	800c610 <_Bfree>
 800d938:	9805      	ldr	r0, [sp, #20]
 800d93a:	4621      	mov	r1, r4
 800d93c:	f7fe fe68 	bl	800c610 <_Bfree>
 800d940:	e618      	b.n	800d574 <_strtod_l+0x644>
 800d942:	f1ba 0f01 	cmp.w	sl, #1
 800d946:	d103      	bne.n	800d950 <_strtod_l+0xa20>
 800d948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	f43f ada5 	beq.w	800d49a <_strtod_l+0x56a>
 800d950:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800da00 <_strtod_l+0xad0>
 800d954:	4f35      	ldr	r7, [pc, #212]	@ (800da2c <_strtod_l+0xafc>)
 800d956:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d95a:	2600      	movs	r6, #0
 800d95c:	e7b1      	b.n	800d8c2 <_strtod_l+0x992>
 800d95e:	4f34      	ldr	r7, [pc, #208]	@ (800da30 <_strtod_l+0xb00>)
 800d960:	2600      	movs	r6, #0
 800d962:	e7aa      	b.n	800d8ba <_strtod_l+0x98a>
 800d964:	4b32      	ldr	r3, [pc, #200]	@ (800da30 <_strtod_l+0xb00>)
 800d966:	4630      	mov	r0, r6
 800d968:	4639      	mov	r1, r7
 800d96a:	2200      	movs	r2, #0
 800d96c:	f7f2 fe74 	bl	8000658 <__aeabi_dmul>
 800d970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d972:	4606      	mov	r6, r0
 800d974:	460f      	mov	r7, r1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d09f      	beq.n	800d8ba <_strtod_l+0x98a>
 800d97a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d97e:	e7a0      	b.n	800d8c2 <_strtod_l+0x992>
 800d980:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800da08 <_strtod_l+0xad8>
 800d984:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d988:	ec57 6b17 	vmov	r6, r7, d7
 800d98c:	e799      	b.n	800d8c2 <_strtod_l+0x992>
 800d98e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d992:	9b08      	ldr	r3, [sp, #32]
 800d994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1c1      	bne.n	800d920 <_strtod_l+0x9f0>
 800d99c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9a0:	0d1b      	lsrs	r3, r3, #20
 800d9a2:	051b      	lsls	r3, r3, #20
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	d1bb      	bne.n	800d920 <_strtod_l+0x9f0>
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f7f3 f9b4 	bl	8000d18 <__aeabi_d2lz>
 800d9b0:	f7f2 fe24 	bl	80005fc <__aeabi_l2d>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	4639      	mov	r1, r7
 800d9bc:	f7f2 fc94 	bl	80002e8 <__aeabi_dsub>
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d9c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9ce:	ea46 060a 	orr.w	r6, r6, sl
 800d9d2:	431e      	orrs	r6, r3
 800d9d4:	d06f      	beq.n	800dab6 <_strtod_l+0xb86>
 800d9d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800da10 <_strtod_l+0xae0>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f3 f8ae 	bl	8000b3c <__aeabi_dcmplt>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	f47f accf 	bne.w	800d384 <_strtod_l+0x454>
 800d9e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800da18 <_strtod_l+0xae8>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9f0:	f7f3 f8c2 	bl	8000b78 <__aeabi_dcmpgt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d093      	beq.n	800d920 <_strtod_l+0x9f0>
 800d9f8:	e4c4      	b.n	800d384 <_strtod_l+0x454>
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w
 800da00:	00000000 	.word	0x00000000
 800da04:	bff00000 	.word	0xbff00000
 800da08:	00000000 	.word	0x00000000
 800da0c:	3ff00000 	.word	0x3ff00000
 800da10:	94a03595 	.word	0x94a03595
 800da14:	3fdfffff 	.word	0x3fdfffff
 800da18:	35afe535 	.word	0x35afe535
 800da1c:	3fe00000 	.word	0x3fe00000
 800da20:	000fffff 	.word	0x000fffff
 800da24:	7ff00000 	.word	0x7ff00000
 800da28:	7fefffff 	.word	0x7fefffff
 800da2c:	3ff00000 	.word	0x3ff00000
 800da30:	3fe00000 	.word	0x3fe00000
 800da34:	7fe00000 	.word	0x7fe00000
 800da38:	7c9fffff 	.word	0x7c9fffff
 800da3c:	9b08      	ldr	r3, [sp, #32]
 800da3e:	b323      	cbz	r3, 800da8a <_strtod_l+0xb5a>
 800da40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800da44:	d821      	bhi.n	800da8a <_strtod_l+0xb5a>
 800da46:	a328      	add	r3, pc, #160	@ (adr r3, 800dae8 <_strtod_l+0xbb8>)
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	4630      	mov	r0, r6
 800da4e:	4639      	mov	r1, r7
 800da50:	f7f3 f87e 	bl	8000b50 <__aeabi_dcmple>
 800da54:	b1a0      	cbz	r0, 800da80 <_strtod_l+0xb50>
 800da56:	4639      	mov	r1, r7
 800da58:	4630      	mov	r0, r6
 800da5a:	f7f3 f8d5 	bl	8000c08 <__aeabi_d2uiz>
 800da5e:	2801      	cmp	r0, #1
 800da60:	bf38      	it	cc
 800da62:	2001      	movcc	r0, #1
 800da64:	f7f2 fd7e 	bl	8000564 <__aeabi_ui2d>
 800da68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da6a:	4606      	mov	r6, r0
 800da6c:	460f      	mov	r7, r1
 800da6e:	b9fb      	cbnz	r3, 800dab0 <_strtod_l+0xb80>
 800da70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da74:	9014      	str	r0, [sp, #80]	@ 0x50
 800da76:	9315      	str	r3, [sp, #84]	@ 0x54
 800da78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800da7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800da80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800da86:	1b5b      	subs	r3, r3, r5
 800da88:	9311      	str	r3, [sp, #68]	@ 0x44
 800da8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800da8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800da92:	f7ff f8f1 	bl	800cc78 <__ulp>
 800da96:	4650      	mov	r0, sl
 800da98:	ec53 2b10 	vmov	r2, r3, d0
 800da9c:	4659      	mov	r1, fp
 800da9e:	f7f2 fddb 	bl	8000658 <__aeabi_dmul>
 800daa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800daa6:	f7f2 fc21 	bl	80002ec <__adddf3>
 800daaa:	4682      	mov	sl, r0
 800daac:	468b      	mov	fp, r1
 800daae:	e770      	b.n	800d992 <_strtod_l+0xa62>
 800dab0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dab4:	e7e0      	b.n	800da78 <_strtod_l+0xb48>
 800dab6:	a30e      	add	r3, pc, #56	@ (adr r3, 800daf0 <_strtod_l+0xbc0>)
 800dab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabc:	f7f3 f83e 	bl	8000b3c <__aeabi_dcmplt>
 800dac0:	e798      	b.n	800d9f4 <_strtod_l+0xac4>
 800dac2:	2300      	movs	r3, #0
 800dac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dac6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	f7ff ba6d 	b.w	800cfaa <_strtod_l+0x7a>
 800dad0:	2a65      	cmp	r2, #101	@ 0x65
 800dad2:	f43f ab66 	beq.w	800d1a2 <_strtod_l+0x272>
 800dad6:	2a45      	cmp	r2, #69	@ 0x45
 800dad8:	f43f ab63 	beq.w	800d1a2 <_strtod_l+0x272>
 800dadc:	2301      	movs	r3, #1
 800dade:	f7ff bb9e 	b.w	800d21e <_strtod_l+0x2ee>
 800dae2:	bf00      	nop
 800dae4:	f3af 8000 	nop.w
 800dae8:	ffc00000 	.word	0xffc00000
 800daec:	41dfffff 	.word	0x41dfffff
 800daf0:	94a03595 	.word	0x94a03595
 800daf4:	3fcfffff 	.word	0x3fcfffff

0800daf8 <_strtod_r>:
 800daf8:	4b01      	ldr	r3, [pc, #4]	@ (800db00 <_strtod_r+0x8>)
 800dafa:	f7ff ba19 	b.w	800cf30 <_strtod_l>
 800dafe:	bf00      	nop
 800db00:	200001cc 	.word	0x200001cc

0800db04 <_strtol_l.constprop.0>:
 800db04:	2b24      	cmp	r3, #36	@ 0x24
 800db06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db0a:	4686      	mov	lr, r0
 800db0c:	4690      	mov	r8, r2
 800db0e:	d801      	bhi.n	800db14 <_strtol_l.constprop.0+0x10>
 800db10:	2b01      	cmp	r3, #1
 800db12:	d106      	bne.n	800db22 <_strtol_l.constprop.0+0x1e>
 800db14:	f7fd fdae 	bl	800b674 <__errno>
 800db18:	2316      	movs	r3, #22
 800db1a:	6003      	str	r3, [r0, #0]
 800db1c:	2000      	movs	r0, #0
 800db1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db22:	4834      	ldr	r0, [pc, #208]	@ (800dbf4 <_strtol_l.constprop.0+0xf0>)
 800db24:	460d      	mov	r5, r1
 800db26:	462a      	mov	r2, r5
 800db28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db2c:	5d06      	ldrb	r6, [r0, r4]
 800db2e:	f016 0608 	ands.w	r6, r6, #8
 800db32:	d1f8      	bne.n	800db26 <_strtol_l.constprop.0+0x22>
 800db34:	2c2d      	cmp	r4, #45	@ 0x2d
 800db36:	d12d      	bne.n	800db94 <_strtol_l.constprop.0+0x90>
 800db38:	782c      	ldrb	r4, [r5, #0]
 800db3a:	2601      	movs	r6, #1
 800db3c:	1c95      	adds	r5, r2, #2
 800db3e:	f033 0210 	bics.w	r2, r3, #16
 800db42:	d109      	bne.n	800db58 <_strtol_l.constprop.0+0x54>
 800db44:	2c30      	cmp	r4, #48	@ 0x30
 800db46:	d12a      	bne.n	800db9e <_strtol_l.constprop.0+0x9a>
 800db48:	782a      	ldrb	r2, [r5, #0]
 800db4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db4e:	2a58      	cmp	r2, #88	@ 0x58
 800db50:	d125      	bne.n	800db9e <_strtol_l.constprop.0+0x9a>
 800db52:	786c      	ldrb	r4, [r5, #1]
 800db54:	2310      	movs	r3, #16
 800db56:	3502      	adds	r5, #2
 800db58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800db5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db60:	2200      	movs	r2, #0
 800db62:	fbbc f9f3 	udiv	r9, ip, r3
 800db66:	4610      	mov	r0, r2
 800db68:	fb03 ca19 	mls	sl, r3, r9, ip
 800db6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800db70:	2f09      	cmp	r7, #9
 800db72:	d81b      	bhi.n	800dbac <_strtol_l.constprop.0+0xa8>
 800db74:	463c      	mov	r4, r7
 800db76:	42a3      	cmp	r3, r4
 800db78:	dd27      	ble.n	800dbca <_strtol_l.constprop.0+0xc6>
 800db7a:	1c57      	adds	r7, r2, #1
 800db7c:	d007      	beq.n	800db8e <_strtol_l.constprop.0+0x8a>
 800db7e:	4581      	cmp	r9, r0
 800db80:	d320      	bcc.n	800dbc4 <_strtol_l.constprop.0+0xc0>
 800db82:	d101      	bne.n	800db88 <_strtol_l.constprop.0+0x84>
 800db84:	45a2      	cmp	sl, r4
 800db86:	db1d      	blt.n	800dbc4 <_strtol_l.constprop.0+0xc0>
 800db88:	fb00 4003 	mla	r0, r0, r3, r4
 800db8c:	2201      	movs	r2, #1
 800db8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db92:	e7eb      	b.n	800db6c <_strtol_l.constprop.0+0x68>
 800db94:	2c2b      	cmp	r4, #43	@ 0x2b
 800db96:	bf04      	itt	eq
 800db98:	782c      	ldrbeq	r4, [r5, #0]
 800db9a:	1c95      	addeq	r5, r2, #2
 800db9c:	e7cf      	b.n	800db3e <_strtol_l.constprop.0+0x3a>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1da      	bne.n	800db58 <_strtol_l.constprop.0+0x54>
 800dba2:	2c30      	cmp	r4, #48	@ 0x30
 800dba4:	bf0c      	ite	eq
 800dba6:	2308      	moveq	r3, #8
 800dba8:	230a      	movne	r3, #10
 800dbaa:	e7d5      	b.n	800db58 <_strtol_l.constprop.0+0x54>
 800dbac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dbb0:	2f19      	cmp	r7, #25
 800dbb2:	d801      	bhi.n	800dbb8 <_strtol_l.constprop.0+0xb4>
 800dbb4:	3c37      	subs	r4, #55	@ 0x37
 800dbb6:	e7de      	b.n	800db76 <_strtol_l.constprop.0+0x72>
 800dbb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dbbc:	2f19      	cmp	r7, #25
 800dbbe:	d804      	bhi.n	800dbca <_strtol_l.constprop.0+0xc6>
 800dbc0:	3c57      	subs	r4, #87	@ 0x57
 800dbc2:	e7d8      	b.n	800db76 <_strtol_l.constprop.0+0x72>
 800dbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc8:	e7e1      	b.n	800db8e <_strtol_l.constprop.0+0x8a>
 800dbca:	1c53      	adds	r3, r2, #1
 800dbcc:	d108      	bne.n	800dbe0 <_strtol_l.constprop.0+0xdc>
 800dbce:	2322      	movs	r3, #34	@ 0x22
 800dbd0:	f8ce 3000 	str.w	r3, [lr]
 800dbd4:	4660      	mov	r0, ip
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	d0a0      	beq.n	800db1e <_strtol_l.constprop.0+0x1a>
 800dbdc:	1e69      	subs	r1, r5, #1
 800dbde:	e006      	b.n	800dbee <_strtol_l.constprop.0+0xea>
 800dbe0:	b106      	cbz	r6, 800dbe4 <_strtol_l.constprop.0+0xe0>
 800dbe2:	4240      	negs	r0, r0
 800dbe4:	f1b8 0f00 	cmp.w	r8, #0
 800dbe8:	d099      	beq.n	800db1e <_strtol_l.constprop.0+0x1a>
 800dbea:	2a00      	cmp	r2, #0
 800dbec:	d1f6      	bne.n	800dbdc <_strtol_l.constprop.0+0xd8>
 800dbee:	f8c8 1000 	str.w	r1, [r8]
 800dbf2:	e794      	b.n	800db1e <_strtol_l.constprop.0+0x1a>
 800dbf4:	0800f2b1 	.word	0x0800f2b1

0800dbf8 <_strtol_r>:
 800dbf8:	f7ff bf84 	b.w	800db04 <_strtol_l.constprop.0>

0800dbfc <__ssputs_r>:
 800dbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	688e      	ldr	r6, [r1, #8]
 800dc02:	461f      	mov	r7, r3
 800dc04:	42be      	cmp	r6, r7
 800dc06:	680b      	ldr	r3, [r1, #0]
 800dc08:	4682      	mov	sl, r0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	4690      	mov	r8, r2
 800dc0e:	d82d      	bhi.n	800dc6c <__ssputs_r+0x70>
 800dc10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc18:	d026      	beq.n	800dc68 <__ssputs_r+0x6c>
 800dc1a:	6965      	ldr	r5, [r4, #20]
 800dc1c:	6909      	ldr	r1, [r1, #16]
 800dc1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc22:	eba3 0901 	sub.w	r9, r3, r1
 800dc26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc2a:	1c7b      	adds	r3, r7, #1
 800dc2c:	444b      	add	r3, r9
 800dc2e:	106d      	asrs	r5, r5, #1
 800dc30:	429d      	cmp	r5, r3
 800dc32:	bf38      	it	cc
 800dc34:	461d      	movcc	r5, r3
 800dc36:	0553      	lsls	r3, r2, #21
 800dc38:	d527      	bpl.n	800dc8a <__ssputs_r+0x8e>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7fe fc1c 	bl	800c478 <_malloc_r>
 800dc40:	4606      	mov	r6, r0
 800dc42:	b360      	cbz	r0, 800dc9e <__ssputs_r+0xa2>
 800dc44:	6921      	ldr	r1, [r4, #16]
 800dc46:	464a      	mov	r2, r9
 800dc48:	f7fd fd41 	bl	800b6ce <memcpy>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc56:	81a3      	strh	r3, [r4, #12]
 800dc58:	6126      	str	r6, [r4, #16]
 800dc5a:	6165      	str	r5, [r4, #20]
 800dc5c:	444e      	add	r6, r9
 800dc5e:	eba5 0509 	sub.w	r5, r5, r9
 800dc62:	6026      	str	r6, [r4, #0]
 800dc64:	60a5      	str	r5, [r4, #8]
 800dc66:	463e      	mov	r6, r7
 800dc68:	42be      	cmp	r6, r7
 800dc6a:	d900      	bls.n	800dc6e <__ssputs_r+0x72>
 800dc6c:	463e      	mov	r6, r7
 800dc6e:	6820      	ldr	r0, [r4, #0]
 800dc70:	4632      	mov	r2, r6
 800dc72:	4641      	mov	r1, r8
 800dc74:	f000 f9c6 	bl	800e004 <memmove>
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	1b9b      	subs	r3, r3, r6
 800dc7c:	60a3      	str	r3, [r4, #8]
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	4433      	add	r3, r6
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	2000      	movs	r0, #0
 800dc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8a:	462a      	mov	r2, r5
 800dc8c:	f000 fd7d 	bl	800e78a <_realloc_r>
 800dc90:	4606      	mov	r6, r0
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d1e0      	bne.n	800dc58 <__ssputs_r+0x5c>
 800dc96:	6921      	ldr	r1, [r4, #16]
 800dc98:	4650      	mov	r0, sl
 800dc9a:	f7fe fb79 	bl	800c390 <_free_r>
 800dc9e:	230c      	movs	r3, #12
 800dca0:	f8ca 3000 	str.w	r3, [sl]
 800dca4:	89a3      	ldrh	r3, [r4, #12]
 800dca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcaa:	81a3      	strh	r3, [r4, #12]
 800dcac:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb0:	e7e9      	b.n	800dc86 <__ssputs_r+0x8a>
	...

0800dcb4 <_svfiprintf_r>:
 800dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb8:	4698      	mov	r8, r3
 800dcba:	898b      	ldrh	r3, [r1, #12]
 800dcbc:	061b      	lsls	r3, r3, #24
 800dcbe:	b09d      	sub	sp, #116	@ 0x74
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	460d      	mov	r5, r1
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	d510      	bpl.n	800dcea <_svfiprintf_r+0x36>
 800dcc8:	690b      	ldr	r3, [r1, #16]
 800dcca:	b973      	cbnz	r3, 800dcea <_svfiprintf_r+0x36>
 800dccc:	2140      	movs	r1, #64	@ 0x40
 800dcce:	f7fe fbd3 	bl	800c478 <_malloc_r>
 800dcd2:	6028      	str	r0, [r5, #0]
 800dcd4:	6128      	str	r0, [r5, #16]
 800dcd6:	b930      	cbnz	r0, 800dce6 <_svfiprintf_r+0x32>
 800dcd8:	230c      	movs	r3, #12
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dce0:	b01d      	add	sp, #116	@ 0x74
 800dce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce6:	2340      	movs	r3, #64	@ 0x40
 800dce8:	616b      	str	r3, [r5, #20]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcee:	2320      	movs	r3, #32
 800dcf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcf8:	2330      	movs	r3, #48	@ 0x30
 800dcfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800de98 <_svfiprintf_r+0x1e4>
 800dcfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd02:	f04f 0901 	mov.w	r9, #1
 800dd06:	4623      	mov	r3, r4
 800dd08:	469a      	mov	sl, r3
 800dd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd0e:	b10a      	cbz	r2, 800dd14 <_svfiprintf_r+0x60>
 800dd10:	2a25      	cmp	r2, #37	@ 0x25
 800dd12:	d1f9      	bne.n	800dd08 <_svfiprintf_r+0x54>
 800dd14:	ebba 0b04 	subs.w	fp, sl, r4
 800dd18:	d00b      	beq.n	800dd32 <_svfiprintf_r+0x7e>
 800dd1a:	465b      	mov	r3, fp
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4638      	mov	r0, r7
 800dd22:	f7ff ff6b 	bl	800dbfc <__ssputs_r>
 800dd26:	3001      	adds	r0, #1
 800dd28:	f000 80a7 	beq.w	800de7a <_svfiprintf_r+0x1c6>
 800dd2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd2e:	445a      	add	r2, fp
 800dd30:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd32:	f89a 3000 	ldrb.w	r3, [sl]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 809f 	beq.w	800de7a <_svfiprintf_r+0x1c6>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd46:	f10a 0a01 	add.w	sl, sl, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	9307      	str	r3, [sp, #28]
 800dd4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd52:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd54:	4654      	mov	r4, sl
 800dd56:	2205      	movs	r2, #5
 800dd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5c:	484e      	ldr	r0, [pc, #312]	@ (800de98 <_svfiprintf_r+0x1e4>)
 800dd5e:	f7f2 fa67 	bl	8000230 <memchr>
 800dd62:	9a04      	ldr	r2, [sp, #16]
 800dd64:	b9d8      	cbnz	r0, 800dd9e <_svfiprintf_r+0xea>
 800dd66:	06d0      	lsls	r0, r2, #27
 800dd68:	bf44      	itt	mi
 800dd6a:	2320      	movmi	r3, #32
 800dd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd70:	0711      	lsls	r1, r2, #28
 800dd72:	bf44      	itt	mi
 800dd74:	232b      	movmi	r3, #43	@ 0x2b
 800dd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd80:	d015      	beq.n	800ddae <_svfiprintf_r+0xfa>
 800dd82:	9a07      	ldr	r2, [sp, #28]
 800dd84:	4654      	mov	r4, sl
 800dd86:	2000      	movs	r0, #0
 800dd88:	f04f 0c0a 	mov.w	ip, #10
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd92:	3b30      	subs	r3, #48	@ 0x30
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d94b      	bls.n	800de30 <_svfiprintf_r+0x17c>
 800dd98:	b1b0      	cbz	r0, 800ddc8 <_svfiprintf_r+0x114>
 800dd9a:	9207      	str	r2, [sp, #28]
 800dd9c:	e014      	b.n	800ddc8 <_svfiprintf_r+0x114>
 800dd9e:	eba0 0308 	sub.w	r3, r0, r8
 800dda2:	fa09 f303 	lsl.w	r3, r9, r3
 800dda6:	4313      	orrs	r3, r2
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	46a2      	mov	sl, r4
 800ddac:	e7d2      	b.n	800dd54 <_svfiprintf_r+0xa0>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	1d19      	adds	r1, r3, #4
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9103      	str	r1, [sp, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bfbb      	ittet	lt
 800ddba:	425b      	neglt	r3, r3
 800ddbc:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc0:	9307      	strge	r3, [sp, #28]
 800ddc2:	9307      	strlt	r3, [sp, #28]
 800ddc4:	bfb8      	it	lt
 800ddc6:	9204      	strlt	r2, [sp, #16]
 800ddc8:	7823      	ldrb	r3, [r4, #0]
 800ddca:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddcc:	d10a      	bne.n	800dde4 <_svfiprintf_r+0x130>
 800ddce:	7863      	ldrb	r3, [r4, #1]
 800ddd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddd2:	d132      	bne.n	800de3a <_svfiprintf_r+0x186>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	1d1a      	adds	r2, r3, #4
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	9203      	str	r2, [sp, #12]
 800dddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dde0:	3402      	adds	r4, #2
 800dde2:	9305      	str	r3, [sp, #20]
 800dde4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dea8 <_svfiprintf_r+0x1f4>
 800dde8:	7821      	ldrb	r1, [r4, #0]
 800ddea:	2203      	movs	r2, #3
 800ddec:	4650      	mov	r0, sl
 800ddee:	f7f2 fa1f 	bl	8000230 <memchr>
 800ddf2:	b138      	cbz	r0, 800de04 <_svfiprintf_r+0x150>
 800ddf4:	9b04      	ldr	r3, [sp, #16]
 800ddf6:	eba0 000a 	sub.w	r0, r0, sl
 800ddfa:	2240      	movs	r2, #64	@ 0x40
 800ddfc:	4082      	lsls	r2, r0
 800ddfe:	4313      	orrs	r3, r2
 800de00:	3401      	adds	r4, #1
 800de02:	9304      	str	r3, [sp, #16]
 800de04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de08:	4824      	ldr	r0, [pc, #144]	@ (800de9c <_svfiprintf_r+0x1e8>)
 800de0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de0e:	2206      	movs	r2, #6
 800de10:	f7f2 fa0e 	bl	8000230 <memchr>
 800de14:	2800      	cmp	r0, #0
 800de16:	d036      	beq.n	800de86 <_svfiprintf_r+0x1d2>
 800de18:	4b21      	ldr	r3, [pc, #132]	@ (800dea0 <_svfiprintf_r+0x1ec>)
 800de1a:	bb1b      	cbnz	r3, 800de64 <_svfiprintf_r+0x1b0>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	3307      	adds	r3, #7
 800de20:	f023 0307 	bic.w	r3, r3, #7
 800de24:	3308      	adds	r3, #8
 800de26:	9303      	str	r3, [sp, #12]
 800de28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de2a:	4433      	add	r3, r6
 800de2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de2e:	e76a      	b.n	800dd06 <_svfiprintf_r+0x52>
 800de30:	fb0c 3202 	mla	r2, ip, r2, r3
 800de34:	460c      	mov	r4, r1
 800de36:	2001      	movs	r0, #1
 800de38:	e7a8      	b.n	800dd8c <_svfiprintf_r+0xd8>
 800de3a:	2300      	movs	r3, #0
 800de3c:	3401      	adds	r4, #1
 800de3e:	9305      	str	r3, [sp, #20]
 800de40:	4619      	mov	r1, r3
 800de42:	f04f 0c0a 	mov.w	ip, #10
 800de46:	4620      	mov	r0, r4
 800de48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de4c:	3a30      	subs	r2, #48	@ 0x30
 800de4e:	2a09      	cmp	r2, #9
 800de50:	d903      	bls.n	800de5a <_svfiprintf_r+0x1a6>
 800de52:	2b00      	cmp	r3, #0
 800de54:	d0c6      	beq.n	800dde4 <_svfiprintf_r+0x130>
 800de56:	9105      	str	r1, [sp, #20]
 800de58:	e7c4      	b.n	800dde4 <_svfiprintf_r+0x130>
 800de5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800de5e:	4604      	mov	r4, r0
 800de60:	2301      	movs	r3, #1
 800de62:	e7f0      	b.n	800de46 <_svfiprintf_r+0x192>
 800de64:	ab03      	add	r3, sp, #12
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	462a      	mov	r2, r5
 800de6a:	4b0e      	ldr	r3, [pc, #56]	@ (800dea4 <_svfiprintf_r+0x1f0>)
 800de6c:	a904      	add	r1, sp, #16
 800de6e:	4638      	mov	r0, r7
 800de70:	f7fc fc54 	bl	800a71c <_printf_float>
 800de74:	1c42      	adds	r2, r0, #1
 800de76:	4606      	mov	r6, r0
 800de78:	d1d6      	bne.n	800de28 <_svfiprintf_r+0x174>
 800de7a:	89ab      	ldrh	r3, [r5, #12]
 800de7c:	065b      	lsls	r3, r3, #25
 800de7e:	f53f af2d 	bmi.w	800dcdc <_svfiprintf_r+0x28>
 800de82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de84:	e72c      	b.n	800dce0 <_svfiprintf_r+0x2c>
 800de86:	ab03      	add	r3, sp, #12
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	462a      	mov	r2, r5
 800de8c:	4b05      	ldr	r3, [pc, #20]	@ (800dea4 <_svfiprintf_r+0x1f0>)
 800de8e:	a904      	add	r1, sp, #16
 800de90:	4638      	mov	r0, r7
 800de92:	f7fc fedb 	bl	800ac4c <_printf_i>
 800de96:	e7ed      	b.n	800de74 <_svfiprintf_r+0x1c0>
 800de98:	0800f3b1 	.word	0x0800f3b1
 800de9c:	0800f3bb 	.word	0x0800f3bb
 800dea0:	0800a71d 	.word	0x0800a71d
 800dea4:	0800dbfd 	.word	0x0800dbfd
 800dea8:	0800f3b7 	.word	0x0800f3b7

0800deac <__sflush_r>:
 800deac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb4:	0716      	lsls	r6, r2, #28
 800deb6:	4605      	mov	r5, r0
 800deb8:	460c      	mov	r4, r1
 800deba:	d454      	bmi.n	800df66 <__sflush_r+0xba>
 800debc:	684b      	ldr	r3, [r1, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	dc02      	bgt.n	800dec8 <__sflush_r+0x1c>
 800dec2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dd48      	ble.n	800df5a <__sflush_r+0xae>
 800dec8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800deca:	2e00      	cmp	r6, #0
 800decc:	d045      	beq.n	800df5a <__sflush_r+0xae>
 800dece:	2300      	movs	r3, #0
 800ded0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ded4:	682f      	ldr	r7, [r5, #0]
 800ded6:	6a21      	ldr	r1, [r4, #32]
 800ded8:	602b      	str	r3, [r5, #0]
 800deda:	d030      	beq.n	800df3e <__sflush_r+0x92>
 800dedc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dede:	89a3      	ldrh	r3, [r4, #12]
 800dee0:	0759      	lsls	r1, r3, #29
 800dee2:	d505      	bpl.n	800def0 <__sflush_r+0x44>
 800dee4:	6863      	ldr	r3, [r4, #4]
 800dee6:	1ad2      	subs	r2, r2, r3
 800dee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800deea:	b10b      	cbz	r3, 800def0 <__sflush_r+0x44>
 800deec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	2300      	movs	r3, #0
 800def2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800def4:	6a21      	ldr	r1, [r4, #32]
 800def6:	4628      	mov	r0, r5
 800def8:	47b0      	blx	r6
 800defa:	1c43      	adds	r3, r0, #1
 800defc:	89a3      	ldrh	r3, [r4, #12]
 800defe:	d106      	bne.n	800df0e <__sflush_r+0x62>
 800df00:	6829      	ldr	r1, [r5, #0]
 800df02:	291d      	cmp	r1, #29
 800df04:	d82b      	bhi.n	800df5e <__sflush_r+0xb2>
 800df06:	4a2a      	ldr	r2, [pc, #168]	@ (800dfb0 <__sflush_r+0x104>)
 800df08:	410a      	asrs	r2, r1
 800df0a:	07d6      	lsls	r6, r2, #31
 800df0c:	d427      	bmi.n	800df5e <__sflush_r+0xb2>
 800df0e:	2200      	movs	r2, #0
 800df10:	6062      	str	r2, [r4, #4]
 800df12:	04d9      	lsls	r1, r3, #19
 800df14:	6922      	ldr	r2, [r4, #16]
 800df16:	6022      	str	r2, [r4, #0]
 800df18:	d504      	bpl.n	800df24 <__sflush_r+0x78>
 800df1a:	1c42      	adds	r2, r0, #1
 800df1c:	d101      	bne.n	800df22 <__sflush_r+0x76>
 800df1e:	682b      	ldr	r3, [r5, #0]
 800df20:	b903      	cbnz	r3, 800df24 <__sflush_r+0x78>
 800df22:	6560      	str	r0, [r4, #84]	@ 0x54
 800df24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df26:	602f      	str	r7, [r5, #0]
 800df28:	b1b9      	cbz	r1, 800df5a <__sflush_r+0xae>
 800df2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df2e:	4299      	cmp	r1, r3
 800df30:	d002      	beq.n	800df38 <__sflush_r+0x8c>
 800df32:	4628      	mov	r0, r5
 800df34:	f7fe fa2c 	bl	800c390 <_free_r>
 800df38:	2300      	movs	r3, #0
 800df3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800df3c:	e00d      	b.n	800df5a <__sflush_r+0xae>
 800df3e:	2301      	movs	r3, #1
 800df40:	4628      	mov	r0, r5
 800df42:	47b0      	blx	r6
 800df44:	4602      	mov	r2, r0
 800df46:	1c50      	adds	r0, r2, #1
 800df48:	d1c9      	bne.n	800dede <__sflush_r+0x32>
 800df4a:	682b      	ldr	r3, [r5, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d0c6      	beq.n	800dede <__sflush_r+0x32>
 800df50:	2b1d      	cmp	r3, #29
 800df52:	d001      	beq.n	800df58 <__sflush_r+0xac>
 800df54:	2b16      	cmp	r3, #22
 800df56:	d11e      	bne.n	800df96 <__sflush_r+0xea>
 800df58:	602f      	str	r7, [r5, #0]
 800df5a:	2000      	movs	r0, #0
 800df5c:	e022      	b.n	800dfa4 <__sflush_r+0xf8>
 800df5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df62:	b21b      	sxth	r3, r3
 800df64:	e01b      	b.n	800df9e <__sflush_r+0xf2>
 800df66:	690f      	ldr	r7, [r1, #16]
 800df68:	2f00      	cmp	r7, #0
 800df6a:	d0f6      	beq.n	800df5a <__sflush_r+0xae>
 800df6c:	0793      	lsls	r3, r2, #30
 800df6e:	680e      	ldr	r6, [r1, #0]
 800df70:	bf08      	it	eq
 800df72:	694b      	ldreq	r3, [r1, #20]
 800df74:	600f      	str	r7, [r1, #0]
 800df76:	bf18      	it	ne
 800df78:	2300      	movne	r3, #0
 800df7a:	eba6 0807 	sub.w	r8, r6, r7
 800df7e:	608b      	str	r3, [r1, #8]
 800df80:	f1b8 0f00 	cmp.w	r8, #0
 800df84:	dde9      	ble.n	800df5a <__sflush_r+0xae>
 800df86:	6a21      	ldr	r1, [r4, #32]
 800df88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df8a:	4643      	mov	r3, r8
 800df8c:	463a      	mov	r2, r7
 800df8e:	4628      	mov	r0, r5
 800df90:	47b0      	blx	r6
 800df92:	2800      	cmp	r0, #0
 800df94:	dc08      	bgt.n	800dfa8 <__sflush_r+0xfc>
 800df96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df9e:	81a3      	strh	r3, [r4, #12]
 800dfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa8:	4407      	add	r7, r0
 800dfaa:	eba8 0800 	sub.w	r8, r8, r0
 800dfae:	e7e7      	b.n	800df80 <__sflush_r+0xd4>
 800dfb0:	dfbffffe 	.word	0xdfbffffe

0800dfb4 <_fflush_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	690b      	ldr	r3, [r1, #16]
 800dfb8:	4605      	mov	r5, r0
 800dfba:	460c      	mov	r4, r1
 800dfbc:	b913      	cbnz	r3, 800dfc4 <_fflush_r+0x10>
 800dfbe:	2500      	movs	r5, #0
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	bd38      	pop	{r3, r4, r5, pc}
 800dfc4:	b118      	cbz	r0, 800dfce <_fflush_r+0x1a>
 800dfc6:	6a03      	ldr	r3, [r0, #32]
 800dfc8:	b90b      	cbnz	r3, 800dfce <_fflush_r+0x1a>
 800dfca:	f7fd f9ff 	bl	800b3cc <__sinit>
 800dfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d0f3      	beq.n	800dfbe <_fflush_r+0xa>
 800dfd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfd8:	07d0      	lsls	r0, r2, #31
 800dfda:	d404      	bmi.n	800dfe6 <_fflush_r+0x32>
 800dfdc:	0599      	lsls	r1, r3, #22
 800dfde:	d402      	bmi.n	800dfe6 <_fflush_r+0x32>
 800dfe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfe2:	f7fd fb72 	bl	800b6ca <__retarget_lock_acquire_recursive>
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	4621      	mov	r1, r4
 800dfea:	f7ff ff5f 	bl	800deac <__sflush_r>
 800dfee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dff0:	07da      	lsls	r2, r3, #31
 800dff2:	4605      	mov	r5, r0
 800dff4:	d4e4      	bmi.n	800dfc0 <_fflush_r+0xc>
 800dff6:	89a3      	ldrh	r3, [r4, #12]
 800dff8:	059b      	lsls	r3, r3, #22
 800dffa:	d4e1      	bmi.n	800dfc0 <_fflush_r+0xc>
 800dffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dffe:	f7fd fb65 	bl	800b6cc <__retarget_lock_release_recursive>
 800e002:	e7dd      	b.n	800dfc0 <_fflush_r+0xc>

0800e004 <memmove>:
 800e004:	4288      	cmp	r0, r1
 800e006:	b510      	push	{r4, lr}
 800e008:	eb01 0402 	add.w	r4, r1, r2
 800e00c:	d902      	bls.n	800e014 <memmove+0x10>
 800e00e:	4284      	cmp	r4, r0
 800e010:	4623      	mov	r3, r4
 800e012:	d807      	bhi.n	800e024 <memmove+0x20>
 800e014:	1e43      	subs	r3, r0, #1
 800e016:	42a1      	cmp	r1, r4
 800e018:	d008      	beq.n	800e02c <memmove+0x28>
 800e01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e022:	e7f8      	b.n	800e016 <memmove+0x12>
 800e024:	4402      	add	r2, r0
 800e026:	4601      	mov	r1, r0
 800e028:	428a      	cmp	r2, r1
 800e02a:	d100      	bne.n	800e02e <memmove+0x2a>
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e036:	e7f7      	b.n	800e028 <memmove+0x24>

0800e038 <strncmp>:
 800e038:	b510      	push	{r4, lr}
 800e03a:	b16a      	cbz	r2, 800e058 <strncmp+0x20>
 800e03c:	3901      	subs	r1, #1
 800e03e:	1884      	adds	r4, r0, r2
 800e040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e044:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e048:	429a      	cmp	r2, r3
 800e04a:	d103      	bne.n	800e054 <strncmp+0x1c>
 800e04c:	42a0      	cmp	r0, r4
 800e04e:	d001      	beq.n	800e054 <strncmp+0x1c>
 800e050:	2a00      	cmp	r2, #0
 800e052:	d1f5      	bne.n	800e040 <strncmp+0x8>
 800e054:	1ad0      	subs	r0, r2, r3
 800e056:	bd10      	pop	{r4, pc}
 800e058:	4610      	mov	r0, r2
 800e05a:	e7fc      	b.n	800e056 <strncmp+0x1e>

0800e05c <_sbrk_r>:
 800e05c:	b538      	push	{r3, r4, r5, lr}
 800e05e:	4d06      	ldr	r5, [pc, #24]	@ (800e078 <_sbrk_r+0x1c>)
 800e060:	2300      	movs	r3, #0
 800e062:	4604      	mov	r4, r0
 800e064:	4608      	mov	r0, r1
 800e066:	602b      	str	r3, [r5, #0]
 800e068:	f7f4 ff0e 	bl	8002e88 <_sbrk>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	d102      	bne.n	800e076 <_sbrk_r+0x1a>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	b103      	cbz	r3, 800e076 <_sbrk_r+0x1a>
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	bd38      	pop	{r3, r4, r5, pc}
 800e078:	20005068 	.word	0x20005068
 800e07c:	00000000 	.word	0x00000000

0800e080 <nan>:
 800e080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e088 <nan+0x8>
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	00000000 	.word	0x00000000
 800e08c:	7ff80000 	.word	0x7ff80000

0800e090 <__assert_func>:
 800e090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e092:	4614      	mov	r4, r2
 800e094:	461a      	mov	r2, r3
 800e096:	4b09      	ldr	r3, [pc, #36]	@ (800e0bc <__assert_func+0x2c>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4605      	mov	r5, r0
 800e09c:	68d8      	ldr	r0, [r3, #12]
 800e09e:	b954      	cbnz	r4, 800e0b6 <__assert_func+0x26>
 800e0a0:	4b07      	ldr	r3, [pc, #28]	@ (800e0c0 <__assert_func+0x30>)
 800e0a2:	461c      	mov	r4, r3
 800e0a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0a8:	9100      	str	r1, [sp, #0]
 800e0aa:	462b      	mov	r3, r5
 800e0ac:	4905      	ldr	r1, [pc, #20]	@ (800e0c4 <__assert_func+0x34>)
 800e0ae:	f000 fba7 	bl	800e800 <fiprintf>
 800e0b2:	f000 fbb7 	bl	800e824 <abort>
 800e0b6:	4b04      	ldr	r3, [pc, #16]	@ (800e0c8 <__assert_func+0x38>)
 800e0b8:	e7f4      	b.n	800e0a4 <__assert_func+0x14>
 800e0ba:	bf00      	nop
 800e0bc:	2000017c 	.word	0x2000017c
 800e0c0:	0800f405 	.word	0x0800f405
 800e0c4:	0800f3d7 	.word	0x0800f3d7
 800e0c8:	0800f3ca 	.word	0x0800f3ca

0800e0cc <_calloc_r>:
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	fba1 5402 	umull	r5, r4, r1, r2
 800e0d2:	b93c      	cbnz	r4, 800e0e4 <_calloc_r+0x18>
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	f7fe f9cf 	bl	800c478 <_malloc_r>
 800e0da:	4606      	mov	r6, r0
 800e0dc:	b928      	cbnz	r0, 800e0ea <_calloc_r+0x1e>
 800e0de:	2600      	movs	r6, #0
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}
 800e0e4:	220c      	movs	r2, #12
 800e0e6:	6002      	str	r2, [r0, #0]
 800e0e8:	e7f9      	b.n	800e0de <_calloc_r+0x12>
 800e0ea:	462a      	mov	r2, r5
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	f7fd fa06 	bl	800b4fe <memset>
 800e0f2:	e7f5      	b.n	800e0e0 <_calloc_r+0x14>

0800e0f4 <rshift>:
 800e0f4:	6903      	ldr	r3, [r0, #16]
 800e0f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e0fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e102:	f100 0414 	add.w	r4, r0, #20
 800e106:	dd45      	ble.n	800e194 <rshift+0xa0>
 800e108:	f011 011f 	ands.w	r1, r1, #31
 800e10c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e110:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e114:	d10c      	bne.n	800e130 <rshift+0x3c>
 800e116:	f100 0710 	add.w	r7, r0, #16
 800e11a:	4629      	mov	r1, r5
 800e11c:	42b1      	cmp	r1, r6
 800e11e:	d334      	bcc.n	800e18a <rshift+0x96>
 800e120:	1a9b      	subs	r3, r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	1eea      	subs	r2, r5, #3
 800e126:	4296      	cmp	r6, r2
 800e128:	bf38      	it	cc
 800e12a:	2300      	movcc	r3, #0
 800e12c:	4423      	add	r3, r4
 800e12e:	e015      	b.n	800e15c <rshift+0x68>
 800e130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e134:	f1c1 0820 	rsb	r8, r1, #32
 800e138:	40cf      	lsrs	r7, r1
 800e13a:	f105 0e04 	add.w	lr, r5, #4
 800e13e:	46a1      	mov	r9, r4
 800e140:	4576      	cmp	r6, lr
 800e142:	46f4      	mov	ip, lr
 800e144:	d815      	bhi.n	800e172 <rshift+0x7e>
 800e146:	1a9a      	subs	r2, r3, r2
 800e148:	0092      	lsls	r2, r2, #2
 800e14a:	3a04      	subs	r2, #4
 800e14c:	3501      	adds	r5, #1
 800e14e:	42ae      	cmp	r6, r5
 800e150:	bf38      	it	cc
 800e152:	2200      	movcc	r2, #0
 800e154:	18a3      	adds	r3, r4, r2
 800e156:	50a7      	str	r7, [r4, r2]
 800e158:	b107      	cbz	r7, 800e15c <rshift+0x68>
 800e15a:	3304      	adds	r3, #4
 800e15c:	1b1a      	subs	r2, r3, r4
 800e15e:	42a3      	cmp	r3, r4
 800e160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e164:	bf08      	it	eq
 800e166:	2300      	moveq	r3, #0
 800e168:	6102      	str	r2, [r0, #16]
 800e16a:	bf08      	it	eq
 800e16c:	6143      	streq	r3, [r0, #20]
 800e16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e172:	f8dc c000 	ldr.w	ip, [ip]
 800e176:	fa0c fc08 	lsl.w	ip, ip, r8
 800e17a:	ea4c 0707 	orr.w	r7, ip, r7
 800e17e:	f849 7b04 	str.w	r7, [r9], #4
 800e182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e186:	40cf      	lsrs	r7, r1
 800e188:	e7da      	b.n	800e140 <rshift+0x4c>
 800e18a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e18e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e192:	e7c3      	b.n	800e11c <rshift+0x28>
 800e194:	4623      	mov	r3, r4
 800e196:	e7e1      	b.n	800e15c <rshift+0x68>

0800e198 <__hexdig_fun>:
 800e198:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e19c:	2b09      	cmp	r3, #9
 800e19e:	d802      	bhi.n	800e1a6 <__hexdig_fun+0xe>
 800e1a0:	3820      	subs	r0, #32
 800e1a2:	b2c0      	uxtb	r0, r0
 800e1a4:	4770      	bx	lr
 800e1a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e1aa:	2b05      	cmp	r3, #5
 800e1ac:	d801      	bhi.n	800e1b2 <__hexdig_fun+0x1a>
 800e1ae:	3847      	subs	r0, #71	@ 0x47
 800e1b0:	e7f7      	b.n	800e1a2 <__hexdig_fun+0xa>
 800e1b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d801      	bhi.n	800e1be <__hexdig_fun+0x26>
 800e1ba:	3827      	subs	r0, #39	@ 0x27
 800e1bc:	e7f1      	b.n	800e1a2 <__hexdig_fun+0xa>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	4770      	bx	lr
	...

0800e1c4 <__gethex>:
 800e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	b085      	sub	sp, #20
 800e1ca:	468a      	mov	sl, r1
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	680b      	ldr	r3, [r1, #0]
 800e1d0:	9001      	str	r0, [sp, #4]
 800e1d2:	4690      	mov	r8, r2
 800e1d4:	1c9c      	adds	r4, r3, #2
 800e1d6:	46a1      	mov	r9, r4
 800e1d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e1dc:	2830      	cmp	r0, #48	@ 0x30
 800e1de:	d0fa      	beq.n	800e1d6 <__gethex+0x12>
 800e1e0:	eba9 0303 	sub.w	r3, r9, r3
 800e1e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e1e8:	f7ff ffd6 	bl	800e198 <__hexdig_fun>
 800e1ec:	4605      	mov	r5, r0
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d168      	bne.n	800e2c4 <__gethex+0x100>
 800e1f2:	49a0      	ldr	r1, [pc, #640]	@ (800e474 <__gethex+0x2b0>)
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	4648      	mov	r0, r9
 800e1f8:	f7ff ff1e 	bl	800e038 <strncmp>
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d167      	bne.n	800e2d2 <__gethex+0x10e>
 800e202:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e206:	4626      	mov	r6, r4
 800e208:	f7ff ffc6 	bl	800e198 <__hexdig_fun>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d062      	beq.n	800e2d6 <__gethex+0x112>
 800e210:	4623      	mov	r3, r4
 800e212:	7818      	ldrb	r0, [r3, #0]
 800e214:	2830      	cmp	r0, #48	@ 0x30
 800e216:	4699      	mov	r9, r3
 800e218:	f103 0301 	add.w	r3, r3, #1
 800e21c:	d0f9      	beq.n	800e212 <__gethex+0x4e>
 800e21e:	f7ff ffbb 	bl	800e198 <__hexdig_fun>
 800e222:	fab0 f580 	clz	r5, r0
 800e226:	096d      	lsrs	r5, r5, #5
 800e228:	f04f 0b01 	mov.w	fp, #1
 800e22c:	464a      	mov	r2, r9
 800e22e:	4616      	mov	r6, r2
 800e230:	3201      	adds	r2, #1
 800e232:	7830      	ldrb	r0, [r6, #0]
 800e234:	f7ff ffb0 	bl	800e198 <__hexdig_fun>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d1f8      	bne.n	800e22e <__gethex+0x6a>
 800e23c:	498d      	ldr	r1, [pc, #564]	@ (800e474 <__gethex+0x2b0>)
 800e23e:	2201      	movs	r2, #1
 800e240:	4630      	mov	r0, r6
 800e242:	f7ff fef9 	bl	800e038 <strncmp>
 800e246:	2800      	cmp	r0, #0
 800e248:	d13f      	bne.n	800e2ca <__gethex+0x106>
 800e24a:	b944      	cbnz	r4, 800e25e <__gethex+0x9a>
 800e24c:	1c74      	adds	r4, r6, #1
 800e24e:	4622      	mov	r2, r4
 800e250:	4616      	mov	r6, r2
 800e252:	3201      	adds	r2, #1
 800e254:	7830      	ldrb	r0, [r6, #0]
 800e256:	f7ff ff9f 	bl	800e198 <__hexdig_fun>
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d1f8      	bne.n	800e250 <__gethex+0x8c>
 800e25e:	1ba4      	subs	r4, r4, r6
 800e260:	00a7      	lsls	r7, r4, #2
 800e262:	7833      	ldrb	r3, [r6, #0]
 800e264:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e268:	2b50      	cmp	r3, #80	@ 0x50
 800e26a:	d13e      	bne.n	800e2ea <__gethex+0x126>
 800e26c:	7873      	ldrb	r3, [r6, #1]
 800e26e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e270:	d033      	beq.n	800e2da <__gethex+0x116>
 800e272:	2b2d      	cmp	r3, #45	@ 0x2d
 800e274:	d034      	beq.n	800e2e0 <__gethex+0x11c>
 800e276:	1c71      	adds	r1, r6, #1
 800e278:	2400      	movs	r4, #0
 800e27a:	7808      	ldrb	r0, [r1, #0]
 800e27c:	f7ff ff8c 	bl	800e198 <__hexdig_fun>
 800e280:	1e43      	subs	r3, r0, #1
 800e282:	b2db      	uxtb	r3, r3
 800e284:	2b18      	cmp	r3, #24
 800e286:	d830      	bhi.n	800e2ea <__gethex+0x126>
 800e288:	f1a0 0210 	sub.w	r2, r0, #16
 800e28c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e290:	f7ff ff82 	bl	800e198 <__hexdig_fun>
 800e294:	f100 3cff 	add.w	ip, r0, #4294967295
 800e298:	fa5f fc8c 	uxtb.w	ip, ip
 800e29c:	f1bc 0f18 	cmp.w	ip, #24
 800e2a0:	f04f 030a 	mov.w	r3, #10
 800e2a4:	d91e      	bls.n	800e2e4 <__gethex+0x120>
 800e2a6:	b104      	cbz	r4, 800e2aa <__gethex+0xe6>
 800e2a8:	4252      	negs	r2, r2
 800e2aa:	4417      	add	r7, r2
 800e2ac:	f8ca 1000 	str.w	r1, [sl]
 800e2b0:	b1ed      	cbz	r5, 800e2ee <__gethex+0x12a>
 800e2b2:	f1bb 0f00 	cmp.w	fp, #0
 800e2b6:	bf0c      	ite	eq
 800e2b8:	2506      	moveq	r5, #6
 800e2ba:	2500      	movne	r5, #0
 800e2bc:	4628      	mov	r0, r5
 800e2be:	b005      	add	sp, #20
 800e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c4:	2500      	movs	r5, #0
 800e2c6:	462c      	mov	r4, r5
 800e2c8:	e7b0      	b.n	800e22c <__gethex+0x68>
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	d1c7      	bne.n	800e25e <__gethex+0x9a>
 800e2ce:	4627      	mov	r7, r4
 800e2d0:	e7c7      	b.n	800e262 <__gethex+0x9e>
 800e2d2:	464e      	mov	r6, r9
 800e2d4:	462f      	mov	r7, r5
 800e2d6:	2501      	movs	r5, #1
 800e2d8:	e7c3      	b.n	800e262 <__gethex+0x9e>
 800e2da:	2400      	movs	r4, #0
 800e2dc:	1cb1      	adds	r1, r6, #2
 800e2de:	e7cc      	b.n	800e27a <__gethex+0xb6>
 800e2e0:	2401      	movs	r4, #1
 800e2e2:	e7fb      	b.n	800e2dc <__gethex+0x118>
 800e2e4:	fb03 0002 	mla	r0, r3, r2, r0
 800e2e8:	e7ce      	b.n	800e288 <__gethex+0xc4>
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	e7de      	b.n	800e2ac <__gethex+0xe8>
 800e2ee:	eba6 0309 	sub.w	r3, r6, r9
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	2b07      	cmp	r3, #7
 800e2f8:	dc0a      	bgt.n	800e310 <__gethex+0x14c>
 800e2fa:	9801      	ldr	r0, [sp, #4]
 800e2fc:	f7fe f948 	bl	800c590 <_Balloc>
 800e300:	4604      	mov	r4, r0
 800e302:	b940      	cbnz	r0, 800e316 <__gethex+0x152>
 800e304:	4b5c      	ldr	r3, [pc, #368]	@ (800e478 <__gethex+0x2b4>)
 800e306:	4602      	mov	r2, r0
 800e308:	21e4      	movs	r1, #228	@ 0xe4
 800e30a:	485c      	ldr	r0, [pc, #368]	@ (800e47c <__gethex+0x2b8>)
 800e30c:	f7ff fec0 	bl	800e090 <__assert_func>
 800e310:	3101      	adds	r1, #1
 800e312:	105b      	asrs	r3, r3, #1
 800e314:	e7ef      	b.n	800e2f6 <__gethex+0x132>
 800e316:	f100 0a14 	add.w	sl, r0, #20
 800e31a:	2300      	movs	r3, #0
 800e31c:	4655      	mov	r5, sl
 800e31e:	469b      	mov	fp, r3
 800e320:	45b1      	cmp	r9, r6
 800e322:	d337      	bcc.n	800e394 <__gethex+0x1d0>
 800e324:	f845 bb04 	str.w	fp, [r5], #4
 800e328:	eba5 050a 	sub.w	r5, r5, sl
 800e32c:	10ad      	asrs	r5, r5, #2
 800e32e:	6125      	str	r5, [r4, #16]
 800e330:	4658      	mov	r0, fp
 800e332:	f7fe fa1f 	bl	800c774 <__hi0bits>
 800e336:	016d      	lsls	r5, r5, #5
 800e338:	f8d8 6000 	ldr.w	r6, [r8]
 800e33c:	1a2d      	subs	r5, r5, r0
 800e33e:	42b5      	cmp	r5, r6
 800e340:	dd54      	ble.n	800e3ec <__gethex+0x228>
 800e342:	1bad      	subs	r5, r5, r6
 800e344:	4629      	mov	r1, r5
 800e346:	4620      	mov	r0, r4
 800e348:	f7fe fdb3 	bl	800ceb2 <__any_on>
 800e34c:	4681      	mov	r9, r0
 800e34e:	b178      	cbz	r0, 800e370 <__gethex+0x1ac>
 800e350:	1e6b      	subs	r3, r5, #1
 800e352:	1159      	asrs	r1, r3, #5
 800e354:	f003 021f 	and.w	r2, r3, #31
 800e358:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e35c:	f04f 0901 	mov.w	r9, #1
 800e360:	fa09 f202 	lsl.w	r2, r9, r2
 800e364:	420a      	tst	r2, r1
 800e366:	d003      	beq.n	800e370 <__gethex+0x1ac>
 800e368:	454b      	cmp	r3, r9
 800e36a:	dc36      	bgt.n	800e3da <__gethex+0x216>
 800e36c:	f04f 0902 	mov.w	r9, #2
 800e370:	4629      	mov	r1, r5
 800e372:	4620      	mov	r0, r4
 800e374:	f7ff febe 	bl	800e0f4 <rshift>
 800e378:	442f      	add	r7, r5
 800e37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e37e:	42bb      	cmp	r3, r7
 800e380:	da42      	bge.n	800e408 <__gethex+0x244>
 800e382:	9801      	ldr	r0, [sp, #4]
 800e384:	4621      	mov	r1, r4
 800e386:	f7fe f943 	bl	800c610 <_Bfree>
 800e38a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e38c:	2300      	movs	r3, #0
 800e38e:	6013      	str	r3, [r2, #0]
 800e390:	25a3      	movs	r5, #163	@ 0xa3
 800e392:	e793      	b.n	800e2bc <__gethex+0xf8>
 800e394:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e398:	2a2e      	cmp	r2, #46	@ 0x2e
 800e39a:	d012      	beq.n	800e3c2 <__gethex+0x1fe>
 800e39c:	2b20      	cmp	r3, #32
 800e39e:	d104      	bne.n	800e3aa <__gethex+0x1e6>
 800e3a0:	f845 bb04 	str.w	fp, [r5], #4
 800e3a4:	f04f 0b00 	mov.w	fp, #0
 800e3a8:	465b      	mov	r3, fp
 800e3aa:	7830      	ldrb	r0, [r6, #0]
 800e3ac:	9303      	str	r3, [sp, #12]
 800e3ae:	f7ff fef3 	bl	800e198 <__hexdig_fun>
 800e3b2:	9b03      	ldr	r3, [sp, #12]
 800e3b4:	f000 000f 	and.w	r0, r0, #15
 800e3b8:	4098      	lsls	r0, r3
 800e3ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800e3be:	3304      	adds	r3, #4
 800e3c0:	e7ae      	b.n	800e320 <__gethex+0x15c>
 800e3c2:	45b1      	cmp	r9, r6
 800e3c4:	d8ea      	bhi.n	800e39c <__gethex+0x1d8>
 800e3c6:	492b      	ldr	r1, [pc, #172]	@ (800e474 <__gethex+0x2b0>)
 800e3c8:	9303      	str	r3, [sp, #12]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff fe33 	bl	800e038 <strncmp>
 800e3d2:	9b03      	ldr	r3, [sp, #12]
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d1e1      	bne.n	800e39c <__gethex+0x1d8>
 800e3d8:	e7a2      	b.n	800e320 <__gethex+0x15c>
 800e3da:	1ea9      	subs	r1, r5, #2
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f7fe fd68 	bl	800ceb2 <__any_on>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d0c2      	beq.n	800e36c <__gethex+0x1a8>
 800e3e6:	f04f 0903 	mov.w	r9, #3
 800e3ea:	e7c1      	b.n	800e370 <__gethex+0x1ac>
 800e3ec:	da09      	bge.n	800e402 <__gethex+0x23e>
 800e3ee:	1b75      	subs	r5, r6, r5
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	9801      	ldr	r0, [sp, #4]
 800e3f4:	462a      	mov	r2, r5
 800e3f6:	f7fe fb23 	bl	800ca40 <__lshift>
 800e3fa:	1b7f      	subs	r7, r7, r5
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	f100 0a14 	add.w	sl, r0, #20
 800e402:	f04f 0900 	mov.w	r9, #0
 800e406:	e7b8      	b.n	800e37a <__gethex+0x1b6>
 800e408:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e40c:	42bd      	cmp	r5, r7
 800e40e:	dd6f      	ble.n	800e4f0 <__gethex+0x32c>
 800e410:	1bed      	subs	r5, r5, r7
 800e412:	42ae      	cmp	r6, r5
 800e414:	dc34      	bgt.n	800e480 <__gethex+0x2bc>
 800e416:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d022      	beq.n	800e464 <__gethex+0x2a0>
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d024      	beq.n	800e46c <__gethex+0x2a8>
 800e422:	2b01      	cmp	r3, #1
 800e424:	d115      	bne.n	800e452 <__gethex+0x28e>
 800e426:	42ae      	cmp	r6, r5
 800e428:	d113      	bne.n	800e452 <__gethex+0x28e>
 800e42a:	2e01      	cmp	r6, #1
 800e42c:	d10b      	bne.n	800e446 <__gethex+0x282>
 800e42e:	9a02      	ldr	r2, [sp, #8]
 800e430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e434:	6013      	str	r3, [r2, #0]
 800e436:	2301      	movs	r3, #1
 800e438:	6123      	str	r3, [r4, #16]
 800e43a:	f8ca 3000 	str.w	r3, [sl]
 800e43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e440:	2562      	movs	r5, #98	@ 0x62
 800e442:	601c      	str	r4, [r3, #0]
 800e444:	e73a      	b.n	800e2bc <__gethex+0xf8>
 800e446:	1e71      	subs	r1, r6, #1
 800e448:	4620      	mov	r0, r4
 800e44a:	f7fe fd32 	bl	800ceb2 <__any_on>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d1ed      	bne.n	800e42e <__gethex+0x26a>
 800e452:	9801      	ldr	r0, [sp, #4]
 800e454:	4621      	mov	r1, r4
 800e456:	f7fe f8db 	bl	800c610 <_Bfree>
 800e45a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e45c:	2300      	movs	r3, #0
 800e45e:	6013      	str	r3, [r2, #0]
 800e460:	2550      	movs	r5, #80	@ 0x50
 800e462:	e72b      	b.n	800e2bc <__gethex+0xf8>
 800e464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1f3      	bne.n	800e452 <__gethex+0x28e>
 800e46a:	e7e0      	b.n	800e42e <__gethex+0x26a>
 800e46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1dd      	bne.n	800e42e <__gethex+0x26a>
 800e472:	e7ee      	b.n	800e452 <__gethex+0x28e>
 800e474:	0800f258 	.word	0x0800f258
 800e478:	0800f0f1 	.word	0x0800f0f1
 800e47c:	0800f406 	.word	0x0800f406
 800e480:	1e6f      	subs	r7, r5, #1
 800e482:	f1b9 0f00 	cmp.w	r9, #0
 800e486:	d130      	bne.n	800e4ea <__gethex+0x326>
 800e488:	b127      	cbz	r7, 800e494 <__gethex+0x2d0>
 800e48a:	4639      	mov	r1, r7
 800e48c:	4620      	mov	r0, r4
 800e48e:	f7fe fd10 	bl	800ceb2 <__any_on>
 800e492:	4681      	mov	r9, r0
 800e494:	117a      	asrs	r2, r7, #5
 800e496:	2301      	movs	r3, #1
 800e498:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e49c:	f007 071f 	and.w	r7, r7, #31
 800e4a0:	40bb      	lsls	r3, r7
 800e4a2:	4213      	tst	r3, r2
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	bf18      	it	ne
 800e4aa:	f049 0902 	orrne.w	r9, r9, #2
 800e4ae:	f7ff fe21 	bl	800e0f4 <rshift>
 800e4b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e4b6:	1b76      	subs	r6, r6, r5
 800e4b8:	2502      	movs	r5, #2
 800e4ba:	f1b9 0f00 	cmp.w	r9, #0
 800e4be:	d047      	beq.n	800e550 <__gethex+0x38c>
 800e4c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d015      	beq.n	800e4f4 <__gethex+0x330>
 800e4c8:	2b03      	cmp	r3, #3
 800e4ca:	d017      	beq.n	800e4fc <__gethex+0x338>
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d109      	bne.n	800e4e4 <__gethex+0x320>
 800e4d0:	f019 0f02 	tst.w	r9, #2
 800e4d4:	d006      	beq.n	800e4e4 <__gethex+0x320>
 800e4d6:	f8da 3000 	ldr.w	r3, [sl]
 800e4da:	ea49 0903 	orr.w	r9, r9, r3
 800e4de:	f019 0f01 	tst.w	r9, #1
 800e4e2:	d10e      	bne.n	800e502 <__gethex+0x33e>
 800e4e4:	f045 0510 	orr.w	r5, r5, #16
 800e4e8:	e032      	b.n	800e550 <__gethex+0x38c>
 800e4ea:	f04f 0901 	mov.w	r9, #1
 800e4ee:	e7d1      	b.n	800e494 <__gethex+0x2d0>
 800e4f0:	2501      	movs	r5, #1
 800e4f2:	e7e2      	b.n	800e4ba <__gethex+0x2f6>
 800e4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f6:	f1c3 0301 	rsb	r3, r3, #1
 800e4fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d0f0      	beq.n	800e4e4 <__gethex+0x320>
 800e502:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e506:	f104 0314 	add.w	r3, r4, #20
 800e50a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e50e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e512:	f04f 0c00 	mov.w	ip, #0
 800e516:	4618      	mov	r0, r3
 800e518:	f853 2b04 	ldr.w	r2, [r3], #4
 800e51c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e520:	d01b      	beq.n	800e55a <__gethex+0x396>
 800e522:	3201      	adds	r2, #1
 800e524:	6002      	str	r2, [r0, #0]
 800e526:	2d02      	cmp	r5, #2
 800e528:	f104 0314 	add.w	r3, r4, #20
 800e52c:	d13c      	bne.n	800e5a8 <__gethex+0x3e4>
 800e52e:	f8d8 2000 	ldr.w	r2, [r8]
 800e532:	3a01      	subs	r2, #1
 800e534:	42b2      	cmp	r2, r6
 800e536:	d109      	bne.n	800e54c <__gethex+0x388>
 800e538:	1171      	asrs	r1, r6, #5
 800e53a:	2201      	movs	r2, #1
 800e53c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e540:	f006 061f 	and.w	r6, r6, #31
 800e544:	fa02 f606 	lsl.w	r6, r2, r6
 800e548:	421e      	tst	r6, r3
 800e54a:	d13a      	bne.n	800e5c2 <__gethex+0x3fe>
 800e54c:	f045 0520 	orr.w	r5, r5, #32
 800e550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e552:	601c      	str	r4, [r3, #0]
 800e554:	9b02      	ldr	r3, [sp, #8]
 800e556:	601f      	str	r7, [r3, #0]
 800e558:	e6b0      	b.n	800e2bc <__gethex+0xf8>
 800e55a:	4299      	cmp	r1, r3
 800e55c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e560:	d8d9      	bhi.n	800e516 <__gethex+0x352>
 800e562:	68a3      	ldr	r3, [r4, #8]
 800e564:	459b      	cmp	fp, r3
 800e566:	db17      	blt.n	800e598 <__gethex+0x3d4>
 800e568:	6861      	ldr	r1, [r4, #4]
 800e56a:	9801      	ldr	r0, [sp, #4]
 800e56c:	3101      	adds	r1, #1
 800e56e:	f7fe f80f 	bl	800c590 <_Balloc>
 800e572:	4681      	mov	r9, r0
 800e574:	b918      	cbnz	r0, 800e57e <__gethex+0x3ba>
 800e576:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e0 <__gethex+0x41c>)
 800e578:	4602      	mov	r2, r0
 800e57a:	2184      	movs	r1, #132	@ 0x84
 800e57c:	e6c5      	b.n	800e30a <__gethex+0x146>
 800e57e:	6922      	ldr	r2, [r4, #16]
 800e580:	3202      	adds	r2, #2
 800e582:	f104 010c 	add.w	r1, r4, #12
 800e586:	0092      	lsls	r2, r2, #2
 800e588:	300c      	adds	r0, #12
 800e58a:	f7fd f8a0 	bl	800b6ce <memcpy>
 800e58e:	4621      	mov	r1, r4
 800e590:	9801      	ldr	r0, [sp, #4]
 800e592:	f7fe f83d 	bl	800c610 <_Bfree>
 800e596:	464c      	mov	r4, r9
 800e598:	6923      	ldr	r3, [r4, #16]
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e5a0:	6122      	str	r2, [r4, #16]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	615a      	str	r2, [r3, #20]
 800e5a6:	e7be      	b.n	800e526 <__gethex+0x362>
 800e5a8:	6922      	ldr	r2, [r4, #16]
 800e5aa:	455a      	cmp	r2, fp
 800e5ac:	dd0b      	ble.n	800e5c6 <__gethex+0x402>
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7ff fd9f 	bl	800e0f4 <rshift>
 800e5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5ba:	3701      	adds	r7, #1
 800e5bc:	42bb      	cmp	r3, r7
 800e5be:	f6ff aee0 	blt.w	800e382 <__gethex+0x1be>
 800e5c2:	2501      	movs	r5, #1
 800e5c4:	e7c2      	b.n	800e54c <__gethex+0x388>
 800e5c6:	f016 061f 	ands.w	r6, r6, #31
 800e5ca:	d0fa      	beq.n	800e5c2 <__gethex+0x3fe>
 800e5cc:	4453      	add	r3, sl
 800e5ce:	f1c6 0620 	rsb	r6, r6, #32
 800e5d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e5d6:	f7fe f8cd 	bl	800c774 <__hi0bits>
 800e5da:	42b0      	cmp	r0, r6
 800e5dc:	dbe7      	blt.n	800e5ae <__gethex+0x3ea>
 800e5de:	e7f0      	b.n	800e5c2 <__gethex+0x3fe>
 800e5e0:	0800f0f1 	.word	0x0800f0f1

0800e5e4 <L_shift>:
 800e5e4:	f1c2 0208 	rsb	r2, r2, #8
 800e5e8:	0092      	lsls	r2, r2, #2
 800e5ea:	b570      	push	{r4, r5, r6, lr}
 800e5ec:	f1c2 0620 	rsb	r6, r2, #32
 800e5f0:	6843      	ldr	r3, [r0, #4]
 800e5f2:	6804      	ldr	r4, [r0, #0]
 800e5f4:	fa03 f506 	lsl.w	r5, r3, r6
 800e5f8:	432c      	orrs	r4, r5
 800e5fa:	40d3      	lsrs	r3, r2
 800e5fc:	6004      	str	r4, [r0, #0]
 800e5fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800e602:	4288      	cmp	r0, r1
 800e604:	d3f4      	bcc.n	800e5f0 <L_shift+0xc>
 800e606:	bd70      	pop	{r4, r5, r6, pc}

0800e608 <__match>:
 800e608:	b530      	push	{r4, r5, lr}
 800e60a:	6803      	ldr	r3, [r0, #0]
 800e60c:	3301      	adds	r3, #1
 800e60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e612:	b914      	cbnz	r4, 800e61a <__match+0x12>
 800e614:	6003      	str	r3, [r0, #0]
 800e616:	2001      	movs	r0, #1
 800e618:	bd30      	pop	{r4, r5, pc}
 800e61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e61e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e622:	2d19      	cmp	r5, #25
 800e624:	bf98      	it	ls
 800e626:	3220      	addls	r2, #32
 800e628:	42a2      	cmp	r2, r4
 800e62a:	d0f0      	beq.n	800e60e <__match+0x6>
 800e62c:	2000      	movs	r0, #0
 800e62e:	e7f3      	b.n	800e618 <__match+0x10>

0800e630 <__hexnan>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	680b      	ldr	r3, [r1, #0]
 800e636:	6801      	ldr	r1, [r0, #0]
 800e638:	115e      	asrs	r6, r3, #5
 800e63a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e63e:	f013 031f 	ands.w	r3, r3, #31
 800e642:	b087      	sub	sp, #28
 800e644:	bf18      	it	ne
 800e646:	3604      	addne	r6, #4
 800e648:	2500      	movs	r5, #0
 800e64a:	1f37      	subs	r7, r6, #4
 800e64c:	4682      	mov	sl, r0
 800e64e:	4690      	mov	r8, r2
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	f846 5c04 	str.w	r5, [r6, #-4]
 800e656:	46b9      	mov	r9, r7
 800e658:	463c      	mov	r4, r7
 800e65a:	9502      	str	r5, [sp, #8]
 800e65c:	46ab      	mov	fp, r5
 800e65e:	784a      	ldrb	r2, [r1, #1]
 800e660:	1c4b      	adds	r3, r1, #1
 800e662:	9303      	str	r3, [sp, #12]
 800e664:	b342      	cbz	r2, 800e6b8 <__hexnan+0x88>
 800e666:	4610      	mov	r0, r2
 800e668:	9105      	str	r1, [sp, #20]
 800e66a:	9204      	str	r2, [sp, #16]
 800e66c:	f7ff fd94 	bl	800e198 <__hexdig_fun>
 800e670:	2800      	cmp	r0, #0
 800e672:	d151      	bne.n	800e718 <__hexnan+0xe8>
 800e674:	9a04      	ldr	r2, [sp, #16]
 800e676:	9905      	ldr	r1, [sp, #20]
 800e678:	2a20      	cmp	r2, #32
 800e67a:	d818      	bhi.n	800e6ae <__hexnan+0x7e>
 800e67c:	9b02      	ldr	r3, [sp, #8]
 800e67e:	459b      	cmp	fp, r3
 800e680:	dd13      	ble.n	800e6aa <__hexnan+0x7a>
 800e682:	454c      	cmp	r4, r9
 800e684:	d206      	bcs.n	800e694 <__hexnan+0x64>
 800e686:	2d07      	cmp	r5, #7
 800e688:	dc04      	bgt.n	800e694 <__hexnan+0x64>
 800e68a:	462a      	mov	r2, r5
 800e68c:	4649      	mov	r1, r9
 800e68e:	4620      	mov	r0, r4
 800e690:	f7ff ffa8 	bl	800e5e4 <L_shift>
 800e694:	4544      	cmp	r4, r8
 800e696:	d952      	bls.n	800e73e <__hexnan+0x10e>
 800e698:	2300      	movs	r3, #0
 800e69a:	f1a4 0904 	sub.w	r9, r4, #4
 800e69e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6a2:	f8cd b008 	str.w	fp, [sp, #8]
 800e6a6:	464c      	mov	r4, r9
 800e6a8:	461d      	mov	r5, r3
 800e6aa:	9903      	ldr	r1, [sp, #12]
 800e6ac:	e7d7      	b.n	800e65e <__hexnan+0x2e>
 800e6ae:	2a29      	cmp	r2, #41	@ 0x29
 800e6b0:	d157      	bne.n	800e762 <__hexnan+0x132>
 800e6b2:	3102      	adds	r1, #2
 800e6b4:	f8ca 1000 	str.w	r1, [sl]
 800e6b8:	f1bb 0f00 	cmp.w	fp, #0
 800e6bc:	d051      	beq.n	800e762 <__hexnan+0x132>
 800e6be:	454c      	cmp	r4, r9
 800e6c0:	d206      	bcs.n	800e6d0 <__hexnan+0xa0>
 800e6c2:	2d07      	cmp	r5, #7
 800e6c4:	dc04      	bgt.n	800e6d0 <__hexnan+0xa0>
 800e6c6:	462a      	mov	r2, r5
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7ff ff8a 	bl	800e5e4 <L_shift>
 800e6d0:	4544      	cmp	r4, r8
 800e6d2:	d936      	bls.n	800e742 <__hexnan+0x112>
 800e6d4:	f1a8 0204 	sub.w	r2, r8, #4
 800e6d8:	4623      	mov	r3, r4
 800e6da:	f853 1b04 	ldr.w	r1, [r3], #4
 800e6de:	f842 1f04 	str.w	r1, [r2, #4]!
 800e6e2:	429f      	cmp	r7, r3
 800e6e4:	d2f9      	bcs.n	800e6da <__hexnan+0xaa>
 800e6e6:	1b3b      	subs	r3, r7, r4
 800e6e8:	f023 0303 	bic.w	r3, r3, #3
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	3401      	adds	r4, #1
 800e6f0:	3e03      	subs	r6, #3
 800e6f2:	42b4      	cmp	r4, r6
 800e6f4:	bf88      	it	hi
 800e6f6:	2304      	movhi	r3, #4
 800e6f8:	4443      	add	r3, r8
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f843 2b04 	str.w	r2, [r3], #4
 800e700:	429f      	cmp	r7, r3
 800e702:	d2fb      	bcs.n	800e6fc <__hexnan+0xcc>
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	b91b      	cbnz	r3, 800e710 <__hexnan+0xe0>
 800e708:	4547      	cmp	r7, r8
 800e70a:	d128      	bne.n	800e75e <__hexnan+0x12e>
 800e70c:	2301      	movs	r3, #1
 800e70e:	603b      	str	r3, [r7, #0]
 800e710:	2005      	movs	r0, #5
 800e712:	b007      	add	sp, #28
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	3501      	adds	r5, #1
 800e71a:	2d08      	cmp	r5, #8
 800e71c:	f10b 0b01 	add.w	fp, fp, #1
 800e720:	dd06      	ble.n	800e730 <__hexnan+0x100>
 800e722:	4544      	cmp	r4, r8
 800e724:	d9c1      	bls.n	800e6aa <__hexnan+0x7a>
 800e726:	2300      	movs	r3, #0
 800e728:	f844 3c04 	str.w	r3, [r4, #-4]
 800e72c:	2501      	movs	r5, #1
 800e72e:	3c04      	subs	r4, #4
 800e730:	6822      	ldr	r2, [r4, #0]
 800e732:	f000 000f 	and.w	r0, r0, #15
 800e736:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e73a:	6020      	str	r0, [r4, #0]
 800e73c:	e7b5      	b.n	800e6aa <__hexnan+0x7a>
 800e73e:	2508      	movs	r5, #8
 800e740:	e7b3      	b.n	800e6aa <__hexnan+0x7a>
 800e742:	9b01      	ldr	r3, [sp, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d0dd      	beq.n	800e704 <__hexnan+0xd4>
 800e748:	f1c3 0320 	rsb	r3, r3, #32
 800e74c:	f04f 32ff 	mov.w	r2, #4294967295
 800e750:	40da      	lsrs	r2, r3
 800e752:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e756:	4013      	ands	r3, r2
 800e758:	f846 3c04 	str.w	r3, [r6, #-4]
 800e75c:	e7d2      	b.n	800e704 <__hexnan+0xd4>
 800e75e:	3f04      	subs	r7, #4
 800e760:	e7d0      	b.n	800e704 <__hexnan+0xd4>
 800e762:	2004      	movs	r0, #4
 800e764:	e7d5      	b.n	800e712 <__hexnan+0xe2>

0800e766 <__ascii_mbtowc>:
 800e766:	b082      	sub	sp, #8
 800e768:	b901      	cbnz	r1, 800e76c <__ascii_mbtowc+0x6>
 800e76a:	a901      	add	r1, sp, #4
 800e76c:	b142      	cbz	r2, 800e780 <__ascii_mbtowc+0x1a>
 800e76e:	b14b      	cbz	r3, 800e784 <__ascii_mbtowc+0x1e>
 800e770:	7813      	ldrb	r3, [r2, #0]
 800e772:	600b      	str	r3, [r1, #0]
 800e774:	7812      	ldrb	r2, [r2, #0]
 800e776:	1e10      	subs	r0, r2, #0
 800e778:	bf18      	it	ne
 800e77a:	2001      	movne	r0, #1
 800e77c:	b002      	add	sp, #8
 800e77e:	4770      	bx	lr
 800e780:	4610      	mov	r0, r2
 800e782:	e7fb      	b.n	800e77c <__ascii_mbtowc+0x16>
 800e784:	f06f 0001 	mvn.w	r0, #1
 800e788:	e7f8      	b.n	800e77c <__ascii_mbtowc+0x16>

0800e78a <_realloc_r>:
 800e78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78e:	4680      	mov	r8, r0
 800e790:	4615      	mov	r5, r2
 800e792:	460c      	mov	r4, r1
 800e794:	b921      	cbnz	r1, 800e7a0 <_realloc_r+0x16>
 800e796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e79a:	4611      	mov	r1, r2
 800e79c:	f7fd be6c 	b.w	800c478 <_malloc_r>
 800e7a0:	b92a      	cbnz	r2, 800e7ae <_realloc_r+0x24>
 800e7a2:	f7fd fdf5 	bl	800c390 <_free_r>
 800e7a6:	2400      	movs	r4, #0
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ae:	f000 f840 	bl	800e832 <_malloc_usable_size_r>
 800e7b2:	4285      	cmp	r5, r0
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	d802      	bhi.n	800e7be <_realloc_r+0x34>
 800e7b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7bc:	d8f4      	bhi.n	800e7a8 <_realloc_r+0x1e>
 800e7be:	4629      	mov	r1, r5
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	f7fd fe59 	bl	800c478 <_malloc_r>
 800e7c6:	4607      	mov	r7, r0
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d0ec      	beq.n	800e7a6 <_realloc_r+0x1c>
 800e7cc:	42b5      	cmp	r5, r6
 800e7ce:	462a      	mov	r2, r5
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	bf28      	it	cs
 800e7d4:	4632      	movcs	r2, r6
 800e7d6:	f7fc ff7a 	bl	800b6ce <memcpy>
 800e7da:	4621      	mov	r1, r4
 800e7dc:	4640      	mov	r0, r8
 800e7de:	f7fd fdd7 	bl	800c390 <_free_r>
 800e7e2:	463c      	mov	r4, r7
 800e7e4:	e7e0      	b.n	800e7a8 <_realloc_r+0x1e>

0800e7e6 <__ascii_wctomb>:
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4608      	mov	r0, r1
 800e7ea:	b141      	cbz	r1, 800e7fe <__ascii_wctomb+0x18>
 800e7ec:	2aff      	cmp	r2, #255	@ 0xff
 800e7ee:	d904      	bls.n	800e7fa <__ascii_wctomb+0x14>
 800e7f0:	228a      	movs	r2, #138	@ 0x8a
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f8:	4770      	bx	lr
 800e7fa:	700a      	strb	r2, [r1, #0]
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	4770      	bx	lr

0800e800 <fiprintf>:
 800e800:	b40e      	push	{r1, r2, r3}
 800e802:	b503      	push	{r0, r1, lr}
 800e804:	4601      	mov	r1, r0
 800e806:	ab03      	add	r3, sp, #12
 800e808:	4805      	ldr	r0, [pc, #20]	@ (800e820 <fiprintf+0x20>)
 800e80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e80e:	6800      	ldr	r0, [r0, #0]
 800e810:	9301      	str	r3, [sp, #4]
 800e812:	f000 f83f 	bl	800e894 <_vfiprintf_r>
 800e816:	b002      	add	sp, #8
 800e818:	f85d eb04 	ldr.w	lr, [sp], #4
 800e81c:	b003      	add	sp, #12
 800e81e:	4770      	bx	lr
 800e820:	2000017c 	.word	0x2000017c

0800e824 <abort>:
 800e824:	b508      	push	{r3, lr}
 800e826:	2006      	movs	r0, #6
 800e828:	f000 fa08 	bl	800ec3c <raise>
 800e82c:	2001      	movs	r0, #1
 800e82e:	f7f4 fab3 	bl	8002d98 <_exit>

0800e832 <_malloc_usable_size_r>:
 800e832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e836:	1f18      	subs	r0, r3, #4
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bfbc      	itt	lt
 800e83c:	580b      	ldrlt	r3, [r1, r0]
 800e83e:	18c0      	addlt	r0, r0, r3
 800e840:	4770      	bx	lr

0800e842 <__sfputc_r>:
 800e842:	6893      	ldr	r3, [r2, #8]
 800e844:	3b01      	subs	r3, #1
 800e846:	2b00      	cmp	r3, #0
 800e848:	b410      	push	{r4}
 800e84a:	6093      	str	r3, [r2, #8]
 800e84c:	da08      	bge.n	800e860 <__sfputc_r+0x1e>
 800e84e:	6994      	ldr	r4, [r2, #24]
 800e850:	42a3      	cmp	r3, r4
 800e852:	db01      	blt.n	800e858 <__sfputc_r+0x16>
 800e854:	290a      	cmp	r1, #10
 800e856:	d103      	bne.n	800e860 <__sfputc_r+0x1e>
 800e858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e85c:	f000 b932 	b.w	800eac4 <__swbuf_r>
 800e860:	6813      	ldr	r3, [r2, #0]
 800e862:	1c58      	adds	r0, r3, #1
 800e864:	6010      	str	r0, [r2, #0]
 800e866:	7019      	strb	r1, [r3, #0]
 800e868:	4608      	mov	r0, r1
 800e86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <__sfputs_r>:
 800e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e872:	4606      	mov	r6, r0
 800e874:	460f      	mov	r7, r1
 800e876:	4614      	mov	r4, r2
 800e878:	18d5      	adds	r5, r2, r3
 800e87a:	42ac      	cmp	r4, r5
 800e87c:	d101      	bne.n	800e882 <__sfputs_r+0x12>
 800e87e:	2000      	movs	r0, #0
 800e880:	e007      	b.n	800e892 <__sfputs_r+0x22>
 800e882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e886:	463a      	mov	r2, r7
 800e888:	4630      	mov	r0, r6
 800e88a:	f7ff ffda 	bl	800e842 <__sfputc_r>
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	d1f3      	bne.n	800e87a <__sfputs_r+0xa>
 800e892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e894 <_vfiprintf_r>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	460d      	mov	r5, r1
 800e89a:	b09d      	sub	sp, #116	@ 0x74
 800e89c:	4614      	mov	r4, r2
 800e89e:	4698      	mov	r8, r3
 800e8a0:	4606      	mov	r6, r0
 800e8a2:	b118      	cbz	r0, 800e8ac <_vfiprintf_r+0x18>
 800e8a4:	6a03      	ldr	r3, [r0, #32]
 800e8a6:	b90b      	cbnz	r3, 800e8ac <_vfiprintf_r+0x18>
 800e8a8:	f7fc fd90 	bl	800b3cc <__sinit>
 800e8ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8ae:	07d9      	lsls	r1, r3, #31
 800e8b0:	d405      	bmi.n	800e8be <_vfiprintf_r+0x2a>
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	059a      	lsls	r2, r3, #22
 800e8b6:	d402      	bmi.n	800e8be <_vfiprintf_r+0x2a>
 800e8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ba:	f7fc ff06 	bl	800b6ca <__retarget_lock_acquire_recursive>
 800e8be:	89ab      	ldrh	r3, [r5, #12]
 800e8c0:	071b      	lsls	r3, r3, #28
 800e8c2:	d501      	bpl.n	800e8c8 <_vfiprintf_r+0x34>
 800e8c4:	692b      	ldr	r3, [r5, #16]
 800e8c6:	b99b      	cbnz	r3, 800e8f0 <_vfiprintf_r+0x5c>
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f000 f938 	bl	800eb40 <__swsetup_r>
 800e8d0:	b170      	cbz	r0, 800e8f0 <_vfiprintf_r+0x5c>
 800e8d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8d4:	07dc      	lsls	r4, r3, #31
 800e8d6:	d504      	bpl.n	800e8e2 <_vfiprintf_r+0x4e>
 800e8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8dc:	b01d      	add	sp, #116	@ 0x74
 800e8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e2:	89ab      	ldrh	r3, [r5, #12]
 800e8e4:	0598      	lsls	r0, r3, #22
 800e8e6:	d4f7      	bmi.n	800e8d8 <_vfiprintf_r+0x44>
 800e8e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ea:	f7fc feef 	bl	800b6cc <__retarget_lock_release_recursive>
 800e8ee:	e7f3      	b.n	800e8d8 <_vfiprintf_r+0x44>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8f4:	2320      	movs	r3, #32
 800e8f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8fe:	2330      	movs	r3, #48	@ 0x30
 800e900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eab0 <_vfiprintf_r+0x21c>
 800e904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e908:	f04f 0901 	mov.w	r9, #1
 800e90c:	4623      	mov	r3, r4
 800e90e:	469a      	mov	sl, r3
 800e910:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e914:	b10a      	cbz	r2, 800e91a <_vfiprintf_r+0x86>
 800e916:	2a25      	cmp	r2, #37	@ 0x25
 800e918:	d1f9      	bne.n	800e90e <_vfiprintf_r+0x7a>
 800e91a:	ebba 0b04 	subs.w	fp, sl, r4
 800e91e:	d00b      	beq.n	800e938 <_vfiprintf_r+0xa4>
 800e920:	465b      	mov	r3, fp
 800e922:	4622      	mov	r2, r4
 800e924:	4629      	mov	r1, r5
 800e926:	4630      	mov	r0, r6
 800e928:	f7ff ffa2 	bl	800e870 <__sfputs_r>
 800e92c:	3001      	adds	r0, #1
 800e92e:	f000 80a7 	beq.w	800ea80 <_vfiprintf_r+0x1ec>
 800e932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e934:	445a      	add	r2, fp
 800e936:	9209      	str	r2, [sp, #36]	@ 0x24
 800e938:	f89a 3000 	ldrb.w	r3, [sl]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 809f 	beq.w	800ea80 <_vfiprintf_r+0x1ec>
 800e942:	2300      	movs	r3, #0
 800e944:	f04f 32ff 	mov.w	r2, #4294967295
 800e948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e94c:	f10a 0a01 	add.w	sl, sl, #1
 800e950:	9304      	str	r3, [sp, #16]
 800e952:	9307      	str	r3, [sp, #28]
 800e954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e958:	931a      	str	r3, [sp, #104]	@ 0x68
 800e95a:	4654      	mov	r4, sl
 800e95c:	2205      	movs	r2, #5
 800e95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e962:	4853      	ldr	r0, [pc, #332]	@ (800eab0 <_vfiprintf_r+0x21c>)
 800e964:	f7f1 fc64 	bl	8000230 <memchr>
 800e968:	9a04      	ldr	r2, [sp, #16]
 800e96a:	b9d8      	cbnz	r0, 800e9a4 <_vfiprintf_r+0x110>
 800e96c:	06d1      	lsls	r1, r2, #27
 800e96e:	bf44      	itt	mi
 800e970:	2320      	movmi	r3, #32
 800e972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e976:	0713      	lsls	r3, r2, #28
 800e978:	bf44      	itt	mi
 800e97a:	232b      	movmi	r3, #43	@ 0x2b
 800e97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e980:	f89a 3000 	ldrb.w	r3, [sl]
 800e984:	2b2a      	cmp	r3, #42	@ 0x2a
 800e986:	d015      	beq.n	800e9b4 <_vfiprintf_r+0x120>
 800e988:	9a07      	ldr	r2, [sp, #28]
 800e98a:	4654      	mov	r4, sl
 800e98c:	2000      	movs	r0, #0
 800e98e:	f04f 0c0a 	mov.w	ip, #10
 800e992:	4621      	mov	r1, r4
 800e994:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e998:	3b30      	subs	r3, #48	@ 0x30
 800e99a:	2b09      	cmp	r3, #9
 800e99c:	d94b      	bls.n	800ea36 <_vfiprintf_r+0x1a2>
 800e99e:	b1b0      	cbz	r0, 800e9ce <_vfiprintf_r+0x13a>
 800e9a0:	9207      	str	r2, [sp, #28]
 800e9a2:	e014      	b.n	800e9ce <_vfiprintf_r+0x13a>
 800e9a4:	eba0 0308 	sub.w	r3, r0, r8
 800e9a8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	9304      	str	r3, [sp, #16]
 800e9b0:	46a2      	mov	sl, r4
 800e9b2:	e7d2      	b.n	800e95a <_vfiprintf_r+0xc6>
 800e9b4:	9b03      	ldr	r3, [sp, #12]
 800e9b6:	1d19      	adds	r1, r3, #4
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	9103      	str	r1, [sp, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	bfbb      	ittet	lt
 800e9c0:	425b      	neglt	r3, r3
 800e9c2:	f042 0202 	orrlt.w	r2, r2, #2
 800e9c6:	9307      	strge	r3, [sp, #28]
 800e9c8:	9307      	strlt	r3, [sp, #28]
 800e9ca:	bfb8      	it	lt
 800e9cc:	9204      	strlt	r2, [sp, #16]
 800e9ce:	7823      	ldrb	r3, [r4, #0]
 800e9d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9d2:	d10a      	bne.n	800e9ea <_vfiprintf_r+0x156>
 800e9d4:	7863      	ldrb	r3, [r4, #1]
 800e9d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9d8:	d132      	bne.n	800ea40 <_vfiprintf_r+0x1ac>
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	1d1a      	adds	r2, r3, #4
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	9203      	str	r2, [sp, #12]
 800e9e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9e6:	3402      	adds	r4, #2
 800e9e8:	9305      	str	r3, [sp, #20]
 800e9ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eac0 <_vfiprintf_r+0x22c>
 800e9ee:	7821      	ldrb	r1, [r4, #0]
 800e9f0:	2203      	movs	r2, #3
 800e9f2:	4650      	mov	r0, sl
 800e9f4:	f7f1 fc1c 	bl	8000230 <memchr>
 800e9f8:	b138      	cbz	r0, 800ea0a <_vfiprintf_r+0x176>
 800e9fa:	9b04      	ldr	r3, [sp, #16]
 800e9fc:	eba0 000a 	sub.w	r0, r0, sl
 800ea00:	2240      	movs	r2, #64	@ 0x40
 800ea02:	4082      	lsls	r2, r0
 800ea04:	4313      	orrs	r3, r2
 800ea06:	3401      	adds	r4, #1
 800ea08:	9304      	str	r3, [sp, #16]
 800ea0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea0e:	4829      	ldr	r0, [pc, #164]	@ (800eab4 <_vfiprintf_r+0x220>)
 800ea10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea14:	2206      	movs	r2, #6
 800ea16:	f7f1 fc0b 	bl	8000230 <memchr>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d03f      	beq.n	800ea9e <_vfiprintf_r+0x20a>
 800ea1e:	4b26      	ldr	r3, [pc, #152]	@ (800eab8 <_vfiprintf_r+0x224>)
 800ea20:	bb1b      	cbnz	r3, 800ea6a <_vfiprintf_r+0x1d6>
 800ea22:	9b03      	ldr	r3, [sp, #12]
 800ea24:	3307      	adds	r3, #7
 800ea26:	f023 0307 	bic.w	r3, r3, #7
 800ea2a:	3308      	adds	r3, #8
 800ea2c:	9303      	str	r3, [sp, #12]
 800ea2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea30:	443b      	add	r3, r7
 800ea32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea34:	e76a      	b.n	800e90c <_vfiprintf_r+0x78>
 800ea36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	e7a8      	b.n	800e992 <_vfiprintf_r+0xfe>
 800ea40:	2300      	movs	r3, #0
 800ea42:	3401      	adds	r4, #1
 800ea44:	9305      	str	r3, [sp, #20]
 800ea46:	4619      	mov	r1, r3
 800ea48:	f04f 0c0a 	mov.w	ip, #10
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea52:	3a30      	subs	r2, #48	@ 0x30
 800ea54:	2a09      	cmp	r2, #9
 800ea56:	d903      	bls.n	800ea60 <_vfiprintf_r+0x1cc>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d0c6      	beq.n	800e9ea <_vfiprintf_r+0x156>
 800ea5c:	9105      	str	r1, [sp, #20]
 800ea5e:	e7c4      	b.n	800e9ea <_vfiprintf_r+0x156>
 800ea60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea64:	4604      	mov	r4, r0
 800ea66:	2301      	movs	r3, #1
 800ea68:	e7f0      	b.n	800ea4c <_vfiprintf_r+0x1b8>
 800ea6a:	ab03      	add	r3, sp, #12
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	462a      	mov	r2, r5
 800ea70:	4b12      	ldr	r3, [pc, #72]	@ (800eabc <_vfiprintf_r+0x228>)
 800ea72:	a904      	add	r1, sp, #16
 800ea74:	4630      	mov	r0, r6
 800ea76:	f7fb fe51 	bl	800a71c <_printf_float>
 800ea7a:	4607      	mov	r7, r0
 800ea7c:	1c78      	adds	r0, r7, #1
 800ea7e:	d1d6      	bne.n	800ea2e <_vfiprintf_r+0x19a>
 800ea80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea82:	07d9      	lsls	r1, r3, #31
 800ea84:	d405      	bmi.n	800ea92 <_vfiprintf_r+0x1fe>
 800ea86:	89ab      	ldrh	r3, [r5, #12]
 800ea88:	059a      	lsls	r2, r3, #22
 800ea8a:	d402      	bmi.n	800ea92 <_vfiprintf_r+0x1fe>
 800ea8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea8e:	f7fc fe1d 	bl	800b6cc <__retarget_lock_release_recursive>
 800ea92:	89ab      	ldrh	r3, [r5, #12]
 800ea94:	065b      	lsls	r3, r3, #25
 800ea96:	f53f af1f 	bmi.w	800e8d8 <_vfiprintf_r+0x44>
 800ea9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea9c:	e71e      	b.n	800e8dc <_vfiprintf_r+0x48>
 800ea9e:	ab03      	add	r3, sp, #12
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	462a      	mov	r2, r5
 800eaa4:	4b05      	ldr	r3, [pc, #20]	@ (800eabc <_vfiprintf_r+0x228>)
 800eaa6:	a904      	add	r1, sp, #16
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7fc f8cf 	bl	800ac4c <_printf_i>
 800eaae:	e7e4      	b.n	800ea7a <_vfiprintf_r+0x1e6>
 800eab0:	0800f3b1 	.word	0x0800f3b1
 800eab4:	0800f3bb 	.word	0x0800f3bb
 800eab8:	0800a71d 	.word	0x0800a71d
 800eabc:	0800e871 	.word	0x0800e871
 800eac0:	0800f3b7 	.word	0x0800f3b7

0800eac4 <__swbuf_r>:
 800eac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac6:	460e      	mov	r6, r1
 800eac8:	4614      	mov	r4, r2
 800eaca:	4605      	mov	r5, r0
 800eacc:	b118      	cbz	r0, 800ead6 <__swbuf_r+0x12>
 800eace:	6a03      	ldr	r3, [r0, #32]
 800ead0:	b90b      	cbnz	r3, 800ead6 <__swbuf_r+0x12>
 800ead2:	f7fc fc7b 	bl	800b3cc <__sinit>
 800ead6:	69a3      	ldr	r3, [r4, #24]
 800ead8:	60a3      	str	r3, [r4, #8]
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	071a      	lsls	r2, r3, #28
 800eade:	d501      	bpl.n	800eae4 <__swbuf_r+0x20>
 800eae0:	6923      	ldr	r3, [r4, #16]
 800eae2:	b943      	cbnz	r3, 800eaf6 <__swbuf_r+0x32>
 800eae4:	4621      	mov	r1, r4
 800eae6:	4628      	mov	r0, r5
 800eae8:	f000 f82a 	bl	800eb40 <__swsetup_r>
 800eaec:	b118      	cbz	r0, 800eaf6 <__swbuf_r+0x32>
 800eaee:	f04f 37ff 	mov.w	r7, #4294967295
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	6922      	ldr	r2, [r4, #16]
 800eafa:	1a98      	subs	r0, r3, r2
 800eafc:	6963      	ldr	r3, [r4, #20]
 800eafe:	b2f6      	uxtb	r6, r6
 800eb00:	4283      	cmp	r3, r0
 800eb02:	4637      	mov	r7, r6
 800eb04:	dc05      	bgt.n	800eb12 <__swbuf_r+0x4e>
 800eb06:	4621      	mov	r1, r4
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f7ff fa53 	bl	800dfb4 <_fflush_r>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d1ed      	bne.n	800eaee <__swbuf_r+0x2a>
 800eb12:	68a3      	ldr	r3, [r4, #8]
 800eb14:	3b01      	subs	r3, #1
 800eb16:	60a3      	str	r3, [r4, #8]
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	1c5a      	adds	r2, r3, #1
 800eb1c:	6022      	str	r2, [r4, #0]
 800eb1e:	701e      	strb	r6, [r3, #0]
 800eb20:	6962      	ldr	r2, [r4, #20]
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d004      	beq.n	800eb32 <__swbuf_r+0x6e>
 800eb28:	89a3      	ldrh	r3, [r4, #12]
 800eb2a:	07db      	lsls	r3, r3, #31
 800eb2c:	d5e1      	bpl.n	800eaf2 <__swbuf_r+0x2e>
 800eb2e:	2e0a      	cmp	r6, #10
 800eb30:	d1df      	bne.n	800eaf2 <__swbuf_r+0x2e>
 800eb32:	4621      	mov	r1, r4
 800eb34:	4628      	mov	r0, r5
 800eb36:	f7ff fa3d 	bl	800dfb4 <_fflush_r>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d0d9      	beq.n	800eaf2 <__swbuf_r+0x2e>
 800eb3e:	e7d6      	b.n	800eaee <__swbuf_r+0x2a>

0800eb40 <__swsetup_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	4b29      	ldr	r3, [pc, #164]	@ (800ebe8 <__swsetup_r+0xa8>)
 800eb44:	4605      	mov	r5, r0
 800eb46:	6818      	ldr	r0, [r3, #0]
 800eb48:	460c      	mov	r4, r1
 800eb4a:	b118      	cbz	r0, 800eb54 <__swsetup_r+0x14>
 800eb4c:	6a03      	ldr	r3, [r0, #32]
 800eb4e:	b90b      	cbnz	r3, 800eb54 <__swsetup_r+0x14>
 800eb50:	f7fc fc3c 	bl	800b3cc <__sinit>
 800eb54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb58:	0719      	lsls	r1, r3, #28
 800eb5a:	d422      	bmi.n	800eba2 <__swsetup_r+0x62>
 800eb5c:	06da      	lsls	r2, r3, #27
 800eb5e:	d407      	bmi.n	800eb70 <__swsetup_r+0x30>
 800eb60:	2209      	movs	r2, #9
 800eb62:	602a      	str	r2, [r5, #0]
 800eb64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb68:	81a3      	strh	r3, [r4, #12]
 800eb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb6e:	e033      	b.n	800ebd8 <__swsetup_r+0x98>
 800eb70:	0758      	lsls	r0, r3, #29
 800eb72:	d512      	bpl.n	800eb9a <__swsetup_r+0x5a>
 800eb74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb76:	b141      	cbz	r1, 800eb8a <__swsetup_r+0x4a>
 800eb78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb7c:	4299      	cmp	r1, r3
 800eb7e:	d002      	beq.n	800eb86 <__swsetup_r+0x46>
 800eb80:	4628      	mov	r0, r5
 800eb82:	f7fd fc05 	bl	800c390 <_free_r>
 800eb86:	2300      	movs	r3, #0
 800eb88:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb8a:	89a3      	ldrh	r3, [r4, #12]
 800eb8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb90:	81a3      	strh	r3, [r4, #12]
 800eb92:	2300      	movs	r3, #0
 800eb94:	6063      	str	r3, [r4, #4]
 800eb96:	6923      	ldr	r3, [r4, #16]
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	f043 0308 	orr.w	r3, r3, #8
 800eba0:	81a3      	strh	r3, [r4, #12]
 800eba2:	6923      	ldr	r3, [r4, #16]
 800eba4:	b94b      	cbnz	r3, 800ebba <__swsetup_r+0x7a>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ebac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebb0:	d003      	beq.n	800ebba <__swsetup_r+0x7a>
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f000 f883 	bl	800ecc0 <__smakebuf_r>
 800ebba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebbe:	f013 0201 	ands.w	r2, r3, #1
 800ebc2:	d00a      	beq.n	800ebda <__swsetup_r+0x9a>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	60a2      	str	r2, [r4, #8]
 800ebc8:	6962      	ldr	r2, [r4, #20]
 800ebca:	4252      	negs	r2, r2
 800ebcc:	61a2      	str	r2, [r4, #24]
 800ebce:	6922      	ldr	r2, [r4, #16]
 800ebd0:	b942      	cbnz	r2, 800ebe4 <__swsetup_r+0xa4>
 800ebd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ebd6:	d1c5      	bne.n	800eb64 <__swsetup_r+0x24>
 800ebd8:	bd38      	pop	{r3, r4, r5, pc}
 800ebda:	0799      	lsls	r1, r3, #30
 800ebdc:	bf58      	it	pl
 800ebde:	6962      	ldrpl	r2, [r4, #20]
 800ebe0:	60a2      	str	r2, [r4, #8]
 800ebe2:	e7f4      	b.n	800ebce <__swsetup_r+0x8e>
 800ebe4:	2000      	movs	r0, #0
 800ebe6:	e7f7      	b.n	800ebd8 <__swsetup_r+0x98>
 800ebe8:	2000017c 	.word	0x2000017c

0800ebec <_raise_r>:
 800ebec:	291f      	cmp	r1, #31
 800ebee:	b538      	push	{r3, r4, r5, lr}
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	d904      	bls.n	800ec00 <_raise_r+0x14>
 800ebf6:	2316      	movs	r3, #22
 800ebf8:	6003      	str	r3, [r0, #0]
 800ebfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ebfe:	bd38      	pop	{r3, r4, r5, pc}
 800ec00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ec02:	b112      	cbz	r2, 800ec0a <_raise_r+0x1e>
 800ec04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec08:	b94b      	cbnz	r3, 800ec1e <_raise_r+0x32>
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f000 f830 	bl	800ec70 <_getpid_r>
 800ec10:	4622      	mov	r2, r4
 800ec12:	4601      	mov	r1, r0
 800ec14:	4628      	mov	r0, r5
 800ec16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec1a:	f000 b817 	b.w	800ec4c <_kill_r>
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d00a      	beq.n	800ec38 <_raise_r+0x4c>
 800ec22:	1c59      	adds	r1, r3, #1
 800ec24:	d103      	bne.n	800ec2e <_raise_r+0x42>
 800ec26:	2316      	movs	r3, #22
 800ec28:	6003      	str	r3, [r0, #0]
 800ec2a:	2001      	movs	r0, #1
 800ec2c:	e7e7      	b.n	800ebfe <_raise_r+0x12>
 800ec2e:	2100      	movs	r1, #0
 800ec30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec34:	4620      	mov	r0, r4
 800ec36:	4798      	blx	r3
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e7e0      	b.n	800ebfe <_raise_r+0x12>

0800ec3c <raise>:
 800ec3c:	4b02      	ldr	r3, [pc, #8]	@ (800ec48 <raise+0xc>)
 800ec3e:	4601      	mov	r1, r0
 800ec40:	6818      	ldr	r0, [r3, #0]
 800ec42:	f7ff bfd3 	b.w	800ebec <_raise_r>
 800ec46:	bf00      	nop
 800ec48:	2000017c 	.word	0x2000017c

0800ec4c <_kill_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	4d07      	ldr	r5, [pc, #28]	@ (800ec6c <_kill_r+0x20>)
 800ec50:	2300      	movs	r3, #0
 800ec52:	4604      	mov	r4, r0
 800ec54:	4608      	mov	r0, r1
 800ec56:	4611      	mov	r1, r2
 800ec58:	602b      	str	r3, [r5, #0]
 800ec5a:	f7f4 f88d 	bl	8002d78 <_kill>
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	d102      	bne.n	800ec68 <_kill_r+0x1c>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b103      	cbz	r3, 800ec68 <_kill_r+0x1c>
 800ec66:	6023      	str	r3, [r4, #0]
 800ec68:	bd38      	pop	{r3, r4, r5, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20005068 	.word	0x20005068

0800ec70 <_getpid_r>:
 800ec70:	f7f4 b87a 	b.w	8002d68 <_getpid>

0800ec74 <__swhatbuf_r>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	460c      	mov	r4, r1
 800ec78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec7c:	2900      	cmp	r1, #0
 800ec7e:	b096      	sub	sp, #88	@ 0x58
 800ec80:	4615      	mov	r5, r2
 800ec82:	461e      	mov	r6, r3
 800ec84:	da0d      	bge.n	800eca2 <__swhatbuf_r+0x2e>
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec8c:	f04f 0100 	mov.w	r1, #0
 800ec90:	bf14      	ite	ne
 800ec92:	2340      	movne	r3, #64	@ 0x40
 800ec94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec98:	2000      	movs	r0, #0
 800ec9a:	6031      	str	r1, [r6, #0]
 800ec9c:	602b      	str	r3, [r5, #0]
 800ec9e:	b016      	add	sp, #88	@ 0x58
 800eca0:	bd70      	pop	{r4, r5, r6, pc}
 800eca2:	466a      	mov	r2, sp
 800eca4:	f000 f848 	bl	800ed38 <_fstat_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	dbec      	blt.n	800ec86 <__swhatbuf_r+0x12>
 800ecac:	9901      	ldr	r1, [sp, #4]
 800ecae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ecb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ecb6:	4259      	negs	r1, r3
 800ecb8:	4159      	adcs	r1, r3
 800ecba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecbe:	e7eb      	b.n	800ec98 <__swhatbuf_r+0x24>

0800ecc0 <__smakebuf_r>:
 800ecc0:	898b      	ldrh	r3, [r1, #12]
 800ecc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecc4:	079d      	lsls	r5, r3, #30
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	d507      	bpl.n	800ecdc <__smakebuf_r+0x1c>
 800eccc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	6123      	str	r3, [r4, #16]
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	6163      	str	r3, [r4, #20]
 800ecd8:	b003      	add	sp, #12
 800ecda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecdc:	ab01      	add	r3, sp, #4
 800ecde:	466a      	mov	r2, sp
 800ece0:	f7ff ffc8 	bl	800ec74 <__swhatbuf_r>
 800ece4:	9f00      	ldr	r7, [sp, #0]
 800ece6:	4605      	mov	r5, r0
 800ece8:	4639      	mov	r1, r7
 800ecea:	4630      	mov	r0, r6
 800ecec:	f7fd fbc4 	bl	800c478 <_malloc_r>
 800ecf0:	b948      	cbnz	r0, 800ed06 <__smakebuf_r+0x46>
 800ecf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf6:	059a      	lsls	r2, r3, #22
 800ecf8:	d4ee      	bmi.n	800ecd8 <__smakebuf_r+0x18>
 800ecfa:	f023 0303 	bic.w	r3, r3, #3
 800ecfe:	f043 0302 	orr.w	r3, r3, #2
 800ed02:	81a3      	strh	r3, [r4, #12]
 800ed04:	e7e2      	b.n	800eccc <__smakebuf_r+0xc>
 800ed06:	89a3      	ldrh	r3, [r4, #12]
 800ed08:	6020      	str	r0, [r4, #0]
 800ed0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	9b01      	ldr	r3, [sp, #4]
 800ed12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ed16:	b15b      	cbz	r3, 800ed30 <__smakebuf_r+0x70>
 800ed18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f000 f81d 	bl	800ed5c <_isatty_r>
 800ed22:	b128      	cbz	r0, 800ed30 <__smakebuf_r+0x70>
 800ed24:	89a3      	ldrh	r3, [r4, #12]
 800ed26:	f023 0303 	bic.w	r3, r3, #3
 800ed2a:	f043 0301 	orr.w	r3, r3, #1
 800ed2e:	81a3      	strh	r3, [r4, #12]
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	431d      	orrs	r5, r3
 800ed34:	81a5      	strh	r5, [r4, #12]
 800ed36:	e7cf      	b.n	800ecd8 <__smakebuf_r+0x18>

0800ed38 <_fstat_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4d07      	ldr	r5, [pc, #28]	@ (800ed58 <_fstat_r+0x20>)
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	4604      	mov	r4, r0
 800ed40:	4608      	mov	r0, r1
 800ed42:	4611      	mov	r1, r2
 800ed44:	602b      	str	r3, [r5, #0]
 800ed46:	f7f4 f877 	bl	8002e38 <_fstat>
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	d102      	bne.n	800ed54 <_fstat_r+0x1c>
 800ed4e:	682b      	ldr	r3, [r5, #0]
 800ed50:	b103      	cbz	r3, 800ed54 <_fstat_r+0x1c>
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	bd38      	pop	{r3, r4, r5, pc}
 800ed56:	bf00      	nop
 800ed58:	20005068 	.word	0x20005068

0800ed5c <_isatty_r>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	4d06      	ldr	r5, [pc, #24]	@ (800ed78 <_isatty_r+0x1c>)
 800ed60:	2300      	movs	r3, #0
 800ed62:	4604      	mov	r4, r0
 800ed64:	4608      	mov	r0, r1
 800ed66:	602b      	str	r3, [r5, #0]
 800ed68:	f7f4 f876 	bl	8002e58 <_isatty>
 800ed6c:	1c43      	adds	r3, r0, #1
 800ed6e:	d102      	bne.n	800ed76 <_isatty_r+0x1a>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	b103      	cbz	r3, 800ed76 <_isatty_r+0x1a>
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	bd38      	pop	{r3, r4, r5, pc}
 800ed78:	20005068 	.word	0x20005068

0800ed7c <_init>:
 800ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7e:	bf00      	nop
 800ed80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed82:	bc08      	pop	{r3}
 800ed84:	469e      	mov	lr, r3
 800ed86:	4770      	bx	lr

0800ed88 <_fini>:
 800ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8a:	bf00      	nop
 800ed8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8e:	bc08      	pop	{r3}
 800ed90:	469e      	mov	lr, r3
 800ed92:	4770      	bx	lr
